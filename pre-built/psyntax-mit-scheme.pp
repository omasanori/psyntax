;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$0$10133 (quote #f)) ((lambda (g$0$10029) (begin (set! g$0$10029 (lambda g$0$10130 ((lambda (g$0$10129) (if (= g$0$10129 (quote 1)) (apply (lambda (g$0$10116) (g$0$10029 g$0$10116 (lambda (g$0$10118) g$0$10118))) g$0$10130) (if (= g$0$10129 (quote 2)) (apply (lambda (g$0$10121 g$0$10122) (begin (if (procedure? g$0$10122) (void) (error (quote assert) (quote "~s failed") (quote (procedure? fender)))) ((lambda (g$0$10124) (lambda g$0$10128 ((lambda (g$0$10127) (if (= g$0$10127 (quote 0)) (apply (lambda () g$0$10124) g$0$10128) (if (= g$0$10127 (quote 1)) (apply (lambda (g$0$10126) (set! g$0$10124 (g$0$10122 g$0$10126))) g$0$10128) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10128)))) (g$0$10122 g$0$10121)))) g$0$10130) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10130)))) (set! g$0$10133 g$0$10029))) (quote #f)))


(begin (define g$0$10211 (quote #f)) (define g$0$10210 (quote #f)) (define g$0$10209 (quote #f)) (define g$0$10208 (quote #f)) (define g$0$10207 (quote #f)) (define g$0$10206 (quote #f)) ((lambda (g$0$10136 g$0$10138 g$0$10140 g$0$10142 g$0$10144 g$0$10146) (begin (set! g$0$10136 (g$0$10133 (lambda (g$0$10148) (quote #f)) (lambda (g$0$10150) (begin (if (procedure? g$0$10150) (void) (error (quote assert) (quote "~s failed") (quote (procedure? p)))) g$0$10150)))) (set! g$0$10138 (lambda (g$0$10152) ((lambda (g$0$10154) (begin (set! g$0$10154 (lambda (g$0$10156) ((lambda (g$0$10158) (if g$0$10158 g$0$10158 ((lambda (g$0$10160) (if g$0$10160 g$0$10160 ((lambda (g$0$10162) (if g$0$10162 g$0$10162 ((lambda (g$0$10164) (if g$0$10164 g$0$10164 (begin (quote #f) (number? g$0$10156)))) (boolean? g$0$10156)))) (symbol? g$0$10156)))) (char? g$0$10156)))) (null? g$0$10156)))) (not (g$0$10154 g$0$10152)))) (quote #f)))) (set! g$0$10140 (lambda (g$0$10166) ((lambda (g$0$10168) (begin (set! g$0$10168 (lambda (g$0$10170) (if (pair? g$0$10170) ((lambda (g$0$10171) (if (memv g$0$10171 (quote (quote))) (if (if g$0$10166 (begin (quote #f) (g$0$10138 (cadr g$0$10170))) (quote #f)) ((lambda (g$0$10197) (begin (set-symbol-value! g$0$10197 (cadr g$0$10170)) g$0$10197)) (gensym)) g$0$10170) (if (memv g$0$10171 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (g$0$10195) (cons (car g$0$10195) (map g$0$10168 (cdr g$0$10195)))) (cdr g$0$10170))) (if (memv g$0$10171 (quote (lambda))) (cons* (quote lambda) (cadr g$0$10170) (map g$0$10168 (cddr g$0$10170))) (if (memv g$0$10171 (quote (letrec))) ((lambda (g$0$10188 g$0$10189) ((lambda (g$0$10192 g$0$10193) (cons* (quote letrec) (map list g$0$10192 (map g$0$10168 g$0$10193)) (map g$0$10168 g$0$10189))) (map car g$0$10188) (map cadr g$0$10188))) (cadr g$0$10170) (cddr g$0$10170)) (if (memv g$0$10171 (quote (letrec*))) ((lambda (g$0$10180 g$0$10181) ((lambda (g$0$10184 g$0$10185) (cons* (quote letrec*) (map list g$0$10184 (map g$0$10168 g$0$10185)) (map g$0$10168 g$0$10181))) (map car g$0$10180) (map cadr g$0$10180))) (cadr g$0$10170) (cddr g$0$10170)) (if (memv g$0$10171 (quote (begin))) (cons (quote begin) (map g$0$10168 (cdr g$0$10170))) (if (memv g$0$10171 (quote (set!))) (list (quote set!) (cadr g$0$10170) (g$0$10168 (caddr g$0$10170))) (if (memv g$0$10171 (quote (primitive))) ((lambda (g$0$10173) ((lambda (g$0$10175) (if g$0$10175 ((lambda (g$0$10177) g$0$10177) g$0$10175) g$0$10173)) ((g$0$10136) g$0$10173))) (cadr g$0$10170)) (if (memv g$0$10171 (quote (define))) g$0$10170 (if (list? g$0$10170) (map g$0$10168 g$0$10170) (error (quote rewrite) (quote "invalid form ~s ~s") g$0$10170 (list? g$0$10170))))))))))))) (car g$0$10170)) g$0$10170))) g$0$10168)) (quote #f)))) (set! g$0$10142 ((lambda (g$0$10199) (not (eq? (eval-core (list (quote quote) g$0$10199)) (eval-core (list (quote quote) g$0$10199))))) (cons (quote 1) (quote 2)))) (set! g$0$10144 (lambda (g$0$10201) ((g$0$10140 g$0$10142) g$0$10201))) (set! g$0$10146 (lambda (g$0$10204 g$0$10205) (begin (pretty-print ((g$0$10140 (quote #f)) g$0$10204) g$0$10205) (newline g$0$10205)))) (begin (set! g$0$10206 g$0$10146) (set! g$0$10207 g$0$10144) (set! g$0$10208 g$0$10142) (set! g$0$10209 g$0$10140) (set! g$0$10210 g$0$10138) (set! g$0$10211 g$0$10136)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define g$0$10689 (quote #f)) (define g$0$10688 (quote #f)) (define g$0$10687 (quote #f)) (define g$0$10686 (quote #f)) (define g$0$10685 (quote #f)) (define g$0$10684 (quote #f)) (define g$0$10683 (quote #f)) (define g$0$10682 (quote #f)) (define g$0$10681 (quote #f)) (define g$0$10680 (quote #f)) (define g$0$10679 (quote #f)) (define g$0$10678 (quote #f)) (define g$0$10677 (quote #f)) (define g$0$10676 (quote #f)) (define g$0$10675 (quote #f)) (define g$0$10674 (quote #f)) (define g$0$10673 (quote #f)) (define g$0$10672 (quote #f)) (define g$0$10671 (quote #f)) (define g$0$10670 (quote #f)) (define g$0$10669 (quote #f)) (define g$0$10668 (quote #f)) (define g$0$10667 (quote #f)) (define g$0$10666 (quote #f)) (define g$0$10665 (quote #f)) (define g$0$10664 (quote #f)) (define g$0$10663 (quote #f)) (define g$0$10662 (quote #f)) (define g$0$10661 (quote #f)) (define g$0$10660 (quote #f)) (define g$0$10659 (quote #f)) (define g$0$10658 (quote #f)) (define g$0$10657 (quote #f)) (define g$0$10656 (quote #f)) (define g$0$10655 (quote #f)) (define g$0$10654 (quote #f)) (define g$0$10653 (quote #f)) (define g$0$10652 (quote #f)) (define g$0$10651 (quote #f)) (define g$0$10650 (quote #f)) (define g$0$10649 (quote #f)) (define g$0$10648 (quote #f)) (define g$0$10647 (quote #f)) (define g$0$10646 (quote #f)) (define g$0$10645 (quote #f)) (define g$0$10644 (quote #f)) (define g$0$10643 (quote #f)) (define g$0$10642 (quote #f)) (define g$0$10641 (quote #f)) ((lambda (g$0$10266 g$0$10268 g$0$10271 g$0$10273 g$0$10275 g$0$10277 g$0$10279 g$0$10281 g$0$10283 g$0$10285 g$0$10287 g$0$10289 g$0$10291 g$0$10293 g$0$10295 g$0$10297 g$0$10299 g$0$10301 g$0$10303 g$0$10305 g$0$10307 g$0$10309 g$0$10311 g$0$10313 g$0$10315 g$0$10317 g$0$10319 g$0$10321 g$0$10323 g$0$10325 g$0$10327 g$0$10329 g$0$10331 g$0$10333 g$0$10335 g$0$10337 g$0$10339 g$0$10341 g$0$10343 g$0$10345 g$0$10347 g$0$10349 g$0$10351 g$0$10353 g$0$10355 g$0$10357 g$0$10359 g$0$10361 g$0$10363) (begin (set! g$0$10266 (lambda () ((lambda (g$0$10365) ((lambda (g$0$10367) (begin (set! g$0$10367 (lambda (g$0$10374 g$0$10375) (if (memq g$0$10374 g$0$10375) g$0$10375 (cons g$0$10374 g$0$10375)))) (lambda g$0$10371 ((lambda (g$0$10370) (if (= g$0$10370 (quote 0)) (apply (lambda () g$0$10365) g$0$10371) (if (= g$0$10370 (quote 1)) (apply (lambda (g$0$10369) (set! g$0$10365 (g$0$10367 g$0$10369 g$0$10365))) g$0$10371) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10371))))) (quote #f))) (quote ())))) (set! g$0$10268 (g$0$10133 (g$0$10266) (lambda (g$0$10377) (begin (if (procedure? g$0$10377) (void) (error (quote current-library-collection) (quote "~s is not a procedure") g$0$10377)) g$0$10377)))) (set! g$0$10271 (lambda (g$0$10389 g$0$10390 g$0$10391 g$0$10392 g$0$10393 g$0$10394 g$0$10395 g$0$10396 g$0$10397 g$0$10398 g$0$10399) (vector (quote g$0$10269) g$0$10389 g$0$10390 g$0$10391 g$0$10392 g$0$10393 g$0$10394 g$0$10395 g$0$10396 g$0$10397 g$0$10398 g$0$10399))) (set! g$0$10273 (lambda (g$0$10401) (if (vector? g$0$10401) (if (= (vector-length g$0$10401) (+ (quote 1) (length (quote (id name ver imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref g$0$10401 (quote 0)) (quote g$0$10269))) (quote #f)) (quote #f)))) (set! g$0$10275 (lambda (g$0$10403) (if (g$0$10273 g$0$10403) (vector-ref g$0$10403 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") g$0$10403 (quote library))))) (set! g$0$10277 (lambda (g$0$10405) (if (g$0$10273 g$0$10405) (vector-ref g$0$10405 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") g$0$10405 (quote library))))) (set! g$0$10279 (lambda (g$0$10407) (if (g$0$10273 g$0$10407) (vector-ref g$0$10407 (quote 3)) (error (quote library-ver) (quote "~s is not of type ~s") g$0$10407 (quote library))))) (set! g$0$10281 (lambda (g$0$10409) (if (g$0$10273 g$0$10409) (vector-ref g$0$10409 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") g$0$10409 (quote library))))) (set! g$0$10283 (lambda (g$0$10411) (if (g$0$10273 g$0$10411) (vector-ref g$0$10411 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") g$0$10411 (quote library))))) (set! g$0$10285 (lambda (g$0$10413) (if (g$0$10273 g$0$10413) (vector-ref g$0$10413 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") g$0$10413 (quote library))))) (set! g$0$10287 (lambda (g$0$10415) (if (g$0$10273 g$0$10415) (vector-ref g$0$10415 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") g$0$10415 (quote library))))) (set! g$0$10289 (lambda (g$0$10417) (if (g$0$10273 g$0$10417) (vector-ref g$0$10417 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") g$0$10417 (quote library))))) (set! g$0$10291 (lambda (g$0$10419) (if (g$0$10273 g$0$10419) (vector-ref g$0$10419 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") g$0$10419 (quote library))))) (set! g$0$10293 (lambda (g$0$10421) (if (g$0$10273 g$0$10421) (vector-ref g$0$10421 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") g$0$10421 (quote library))))) (set! g$0$10295 (lambda (g$0$10423) (if (g$0$10273 g$0$10423) (vector-ref g$0$10423 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") g$0$10423 (quote library))))) (set! g$0$10297 (lambda (g$0$10426 g$0$10427) (if (g$0$10273 g$0$10426) (vector-set! g$0$10426 (quote 1) g$0$10427) (error (quote set-library-id!) (quote "~s is not of type ~s") g$0$10426 (quote library))))) (set! g$0$10299 (lambda (g$0$10430 g$0$10431) (if (g$0$10273 g$0$10430) (vector-set! g$0$10430 (quote 2) g$0$10431) (error (quote set-library-name!) (quote "~s is not of type ~s") g$0$10430 (quote library))))) (set! g$0$10301 (lambda (g$0$10434 g$0$10435) (if (g$0$10273 g$0$10434) (vector-set! g$0$10434 (quote 3) g$0$10435) (error (quote set-library-ver!) (quote "~s is not of type ~s") g$0$10434 (quote library))))) (set! g$0$10303 (lambda (g$0$10438 g$0$10439) (if (g$0$10273 g$0$10438) (vector-set! g$0$10438 (quote 4) g$0$10439) (error (quote set-library-imp*!) (quote "~s is not of type ~s") g$0$10438 (quote library))))) (set! g$0$10305 (lambda (g$0$10442 g$0$10443) (if (g$0$10273 g$0$10442) (vector-set! g$0$10442 (quote 5) g$0$10443) (error (quote set-library-vis*!) (quote "~s is not of type ~s") g$0$10442 (quote library))))) (set! g$0$10307 (lambda (g$0$10446 g$0$10447) (if (g$0$10273 g$0$10446) (vector-set! g$0$10446 (quote 6) g$0$10447) (error (quote set-library-inv*!) (quote "~s is not of type ~s") g$0$10446 (quote library))))) (set! g$0$10309 (lambda (g$0$10450 g$0$10451) (if (g$0$10273 g$0$10450) (vector-set! g$0$10450 (quote 7) g$0$10451) (error (quote set-library-subst!) (quote "~s is not of type ~s") g$0$10450 (quote library))))) (set! g$0$10311 (lambda (g$0$10454 g$0$10455) (if (g$0$10273 g$0$10454) (vector-set! g$0$10454 (quote 8) g$0$10455) (error (quote set-library-env!) (quote "~s is not of type ~s") g$0$10454 (quote library))))) (set! g$0$10313 (lambda (g$0$10458 g$0$10459) (if (g$0$10273 g$0$10458) (vector-set! g$0$10458 (quote 9) g$0$10459) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") g$0$10458 (quote library))))) (set! g$0$10315 (lambda (g$0$10462 g$0$10463) (if (g$0$10273 g$0$10462) (vector-set! g$0$10462 (quote 10) g$0$10463) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") g$0$10462 (quote library))))) (set! g$0$10317 (lambda (g$0$10466 g$0$10467) (if (g$0$10273 g$0$10466) (vector-set! g$0$10466 (quote 11) g$0$10467) (error (quote set-library-visible?!) (quote "~s is not of type ~s") g$0$10466 (quote library))))) (set! g$0$10319 (lambda (g$0$10469) (if (null? g$0$10469) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! g$0$10321 (lambda (g$0$10471) (letrec ((g$0$10473 (lambda (g$0$10475) (if (null? g$0$10475) (quote #f) (if (g$0$10471 (car g$0$10475)) (car g$0$10475) (g$0$10473 (cdr g$0$10475))))))) (g$0$10473 ((g$0$10268)))))) (set! g$0$10323 (g$0$10133 (quote (".")) (lambda (g$0$10477) (if (if (list? g$0$10477) (begin (quote #f) (for-all string? g$0$10477)) (quote #f)) (map (lambda (g$0$10479) g$0$10479) g$0$10477) (error (quote library-path) (quote "~s is not a list of strings") g$0$10477))))) (set! g$0$10325 (lambda (g$0$10481) (call-with-values (lambda () (open-string-output-port)) (lambda (g$0$10484 g$0$10485) ((lambda (g$0$10487) (begin (set! g$0$10487 (lambda (g$0$10503) (if (<= (quote 0) g$0$10503 (quote 9)) (display g$0$10503 g$0$10484) (display (integer->char (+ (char->integer (quote #\A)) (- g$0$10503 (quote 10)))) g$0$10484)))) (begin (letrec ((g$0$10489 (lambda (g$0$10491) (if (null? g$0$10491) (display (quote ".ss") g$0$10484) (begin (display (quote "/") g$0$10484) (for-each (lambda (g$0$10493) (if ((lambda (g$0$10497) (if g$0$10497 g$0$10497 ((lambda (g$0$10499) (if g$0$10499 g$0$10499 ((lambda (g$0$10501) (if g$0$10501 g$0$10501 (begin (quote #f) (memv g$0$10493 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) g$0$10493 (quote #\9))))) (char<=? (quote #\A) g$0$10493 (quote #\Z))))) (char<=? (quote #\a) g$0$10493 (quote #\z))) (display g$0$10493 g$0$10484) (begin (display (quote "%") g$0$10484) ((lambda (g$0$10495) (begin (g$0$10487 (quotient g$0$10495 (quote 16))) (g$0$10487 (remainder g$0$10495 (quote 16))))) (char->integer g$0$10493))))) (string->list (symbol->string (car g$0$10491)))) (g$0$10489 (cdr g$0$10491))))))) (g$0$10489 g$0$10481)) (g$0$10485)))) (quote #f)))))) (set! g$0$10327 (g$0$10133 (lambda (g$0$10505) ((lambda (g$0$10507) (letrec ((g$0$10509 (lambda (g$0$10511) (if (pair? g$0$10511) (begin (quote #f) ((lambda (g$0$10513) (if (file-exists? g$0$10513) g$0$10513 (g$0$10509 (cdr g$0$10511)))) (string-append (car g$0$10511) g$0$10507))) (quote #f))))) (g$0$10509 (g$0$10323)))) (g$0$10325 g$0$10505))) (lambda (g$0$10515) (if (procedure? g$0$10515) g$0$10515 (error (quote file-locator) (quote "~s is not a procedure") g$0$10515))))) (set! g$0$10329 (g$0$10133 (lambda (g$0$10517) ((lambda (g$0$10519) (if (string? g$0$10519) (begin (quote #f) (with-input-from-file g$0$10519 read)) (quote #f))) ((g$0$10327) g$0$10517))) (lambda (g$0$10521) (if (procedure? g$0$10521) g$0$10521 (error (quote library-locator) (quote "~s is not a procedure") g$0$10521))))) (set! g$0$10331 (g$0$10133 (lambda (g$0$10523) (error (quote library-expander) (quote "not initialized"))) (lambda (g$0$10525) (if (procedure? g$0$10525) g$0$10525 (error (quote library-expander) (quote "~s is not a procedure") g$0$10525))))) (set! g$0$10333 (g$0$10133 (quote ()))) (set! g$0$10335 (lambda (g$0$10527) (begin (if (member g$0$10527 (g$0$10333)) (error (quote #f) (quote "circular attempt to import library ~s detected") g$0$10527) (void)) ((lambda (g$0$10532 g$0$10533) ((lambda (g$0$10535) (dynamic-wind g$0$10535 (lambda () ((lambda (g$0$10537) (begin (if g$0$10537 (void) (error (quote #f) (quote "cannot find library ~s") g$0$10527)) ((g$0$10331) g$0$10537) ((lambda (g$0$10539) (if g$0$10539 g$0$10539 (begin (quote #f) (error (quote #f) (quote "handling external library of ~s did not yield the currect library") g$0$10527)))) (g$0$10321 (lambda (g$0$10541) (equal? (g$0$10277 g$0$10541) g$0$10527)))))) ((g$0$10329) g$0$10527))) g$0$10535)) (lambda () ((lambda (g$0$10543) (begin (g$0$10532 g$0$10533) (set! g$0$10533 g$0$10543))) (g$0$10532))))) g$0$10333 (cons g$0$10527 (g$0$10333)))))) (set! g$0$10337 (lambda (g$0$10545) ((lambda (g$0$10547) (if g$0$10547 g$0$10547 (begin (quote #f) (g$0$10335 g$0$10545)))) (g$0$10321 (lambda (g$0$10549) (equal? (g$0$10277 g$0$10549) g$0$10545)))))) (set! g$0$10339 (lambda (g$0$10551) (if (g$0$10321 (lambda (g$0$10553) (equal? (g$0$10277 g$0$10553) g$0$10551))) (begin (quote #f) (quote #t)) (quote #f)))) (set! g$0$10341 (lambda (g$0$10555) ((lambda (g$0$10557) ((lambda (g$0$10559) (if g$0$10559 g$0$10559 (begin (quote #f) (error (quote #f) (quote "cannot find library with spec ~s") g$0$10555)))) (g$0$10321 (lambda (g$0$10561) (eq? g$0$10557 (g$0$10275 g$0$10561)))))) (car g$0$10555)))) (set! g$0$10343 (make-hashtable)) (set! g$0$10345 (lambda (g$0$10563) (begin ((lambda (g$0$10565) (for-each (lambda (g$0$10567) ((lambda (g$0$10570 g$0$10571) ((lambda (g$0$10573) (hashtable-set! g$0$10343 g$0$10570 g$0$10573)) ((lambda (g$0$10574) (if (memv g$0$10574 (quote (global))) (cons (quote global) (cons g$0$10563 (cdr g$0$10571))) (if (memv g$0$10574 (quote (global-macro))) (cons (quote global-macro) (cons g$0$10563 (cdr g$0$10571))) (if (memv g$0$10574 (quote (global-macro!))) (cons (quote global-macro!) (cons g$0$10563 (cdr g$0$10571))) g$0$10571)))) (car g$0$10571)))) (car g$0$10567) (cdr g$0$10567))) g$0$10565)) (g$0$10289 g$0$10563)) ((g$0$10268) g$0$10563)))) (set! g$0$10347 (lambda (g$0$10586 g$0$10587 g$0$10588 g$0$10589 g$0$10590 g$0$10591 g$0$10592 g$0$10593 g$0$10594 g$0$10595 g$0$10596) ((lambda (g$0$10600 g$0$10601 g$0$10602) (begin (if (if (symbol? g$0$10586) (if (list? g$0$10587) (begin (quote #f) (list? g$0$10588)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec ~s ~s ~s") g$0$10586 g$0$10587 g$0$10588)) (if (g$0$10339 g$0$10587) (error (quote install-library) (quote "~s is already installed") g$0$10587) (void)) ((lambda (g$0$10604) (g$0$10345 g$0$10604)) (g$0$10271 g$0$10586 g$0$10587 g$0$10588 g$0$10600 g$0$10601 g$0$10602 g$0$10592 g$0$10593 g$0$10594 g$0$10595 g$0$10596)))) (map g$0$10341 g$0$10589) (map g$0$10341 g$0$10590) (map g$0$10341 g$0$10591)))) (set! g$0$10349 (lambda (g$0$10608 g$0$10609 g$0$10610) (g$0$10309 g$0$10608 (cons (cons g$0$10609 g$0$10610) (g$0$10287 g$0$10608))))) (set! g$0$10351 (lambda (g$0$10614 g$0$10615 g$0$10616) (begin (g$0$10311 g$0$10614 (cons (cons g$0$10615 g$0$10616) (g$0$10289 g$0$10614))) (hashtable-set! g$0$10343 g$0$10615 g$0$10616)))) (set! g$0$10353 (lambda (g$0$10618) (hashtable-ref g$0$10343 g$0$10618 (quote #f)))) (set! g$0$10355 (lambda (g$0$10620) ((lambda (g$0$10622) (if (procedure? g$0$10622) (begin (g$0$10315 g$0$10620 (lambda () (error (quote invoke) (quote "circularity detected for ~s") g$0$10620))) (for-each g$0$10355 (g$0$10285 g$0$10620)) (g$0$10315 g$0$10620 (lambda () (error (quote invoke) (quote "first invoke did not return for ~s") g$0$10620))) (g$0$10622) (g$0$10315 g$0$10620 (quote #t))) (void))) (g$0$10293 g$0$10620)))) (set! g$0$10357 (lambda (g$0$10624) ((lambda (g$0$10626) (if (procedure? g$0$10626) (begin (g$0$10313 g$0$10624 (lambda () (error (quote visit) (quote "circularity detected for ~s") g$0$10624))) (for-each g$0$10355 (g$0$10283 g$0$10624)) (g$0$10313 g$0$10624 (lambda () (error (quote invoke) (quote "first visit did not return for ~s") g$0$10624))) (g$0$10626) (g$0$10313 g$0$10624 (quote #t))) (void))) (g$0$10291 g$0$10624)))) (set! g$0$10359 (lambda (g$0$10628) (g$0$10355 (g$0$10341 g$0$10628)))) (set! g$0$10361 (lambda g$0$10638 ((lambda (g$0$10637) (if (= g$0$10637 (quote 1)) (apply (lambda (g$0$10630) (letrec ((g$0$10632 (lambda (g$0$10634) (if (null? g$0$10634) (quote ()) (if ((lambda (g$0$10636) (if g$0$10636 g$0$10636 (begin (quote #f) (g$0$10295 (car g$0$10634))))) g$0$10630) (cons (car g$0$10634) (g$0$10632 (cdr g$0$10634))) (g$0$10632 (cdr g$0$10634))))))) (g$0$10632 ((g$0$10268))))) g$0$10638) (if (= g$0$10637 (quote 0)) (apply (lambda () (g$0$10361 (quote #f))) g$0$10638) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10638)))) (set! g$0$10363 (lambda (g$0$10640) (begin (if (g$0$10273 g$0$10640) (void) (error (quote library-spec) (quote "~s is not a library") g$0$10640)) (list (g$0$10275 g$0$10640) (g$0$10277 g$0$10640) (g$0$10279 g$0$10640))))) (begin (set! g$0$10641 g$0$10363) (set! g$0$10642 g$0$10361) (set! g$0$10643 g$0$10359) (set! g$0$10644 g$0$10357) (set! g$0$10645 g$0$10355) (set! g$0$10646 g$0$10353) (set! g$0$10647 g$0$10351) (set! g$0$10648 g$0$10349) (set! g$0$10649 g$0$10347) (set! g$0$10650 g$0$10345) (set! g$0$10651 g$0$10343) (set! g$0$10652 g$0$10341) (set! g$0$10653 g$0$10339) (set! g$0$10654 g$0$10337) (set! g$0$10655 g$0$10335) (set! g$0$10656 g$0$10333) (set! g$0$10657 g$0$10331) (set! g$0$10658 g$0$10329) (set! g$0$10659 g$0$10327) (set! g$0$10660 g$0$10325) (set! g$0$10661 g$0$10323) (set! g$0$10662 g$0$10321) (set! g$0$10663 g$0$10319) (set! g$0$10664 g$0$10317) (set! g$0$10665 g$0$10315) (set! g$0$10666 g$0$10313) (set! g$0$10667 g$0$10311) (set! g$0$10668 g$0$10309) (set! g$0$10669 g$0$10307) (set! g$0$10670 g$0$10305) (set! g$0$10671 g$0$10303) (set! g$0$10672 g$0$10301) (set! g$0$10673 g$0$10299) (set! g$0$10674 g$0$10297) (set! g$0$10675 g$0$10295) (set! g$0$10676 g$0$10293) (set! g$0$10677 g$0$10291) (set! g$0$10678 g$0$10289) (set! g$0$10679 g$0$10287) (set! g$0$10680 g$0$10285) (set! g$0$10681 g$0$10283) (set! g$0$10682 g$0$10281) (set! g$0$10683 g$0$10279) (set! g$0$10684 g$0$10277) (set! g$0$10685 g$0$10275) (set! g$0$10686 g$0$10273) (set! g$0$10687 g$0$10271) (set! g$0$10688 g$0$10268) (set! g$0$10689 g$0$10266)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$10937 (quote #f)) (define g$0$10929 (quote #f)) (define g$0$10928 (quote #f)) (define g$0$10927 (quote #f)) (define g$0$10923 (quote #f)) (define g$0$10922 (quote #f)) (define g$0$10921 (quote #f)) (define g$0$10920 (quote #f)) ((lambda (g$0$10692 g$0$10769 g$0$10771 g$0$10773 g$0$10811 g$0$10813 g$0$10815 g$0$10817) (begin (set! g$0$10692 (lambda (g$0$10819) (cons (quote define) (cons g$0$10819 (quote ((quote #f))))))) (set! g$0$10769 (lambda (g$0$10823 g$0$10824 g$0$10825) (list (quote lambda) g$0$10824 g$0$10825))) (set! g$0$10771 (lambda (g$0$10829 g$0$10830 g$0$10831) ((lambda (g$0$10833 g$0$10835 g$0$10837 g$0$10839) (begin (set! g$0$10833 (lambda (g$0$10881) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! g$0$10835 (lambda (g$0$10867 g$0$10868 g$0$10869) (call-with-values (lambda () (letrec ((g$0$10871 (lambda (g$0$10874 g$0$10875) (if (pair? g$0$10874) (g$0$10871 (cdr g$0$10874) (+ g$0$10875 (quote 1))) (if (null? g$0$10874) (values g$0$10875 (quote =)) (values g$0$10875 (quote >=))))))) (g$0$10871 g$0$10869 (quote 0)))) (lambda (g$0$10878 g$0$10879) (list (list (quote primitive) g$0$10879) g$0$10868 (list (quote quote) g$0$10878)))))) (set! g$0$10837 (lambda (g$0$10860 g$0$10861 g$0$10862 g$0$10863) (list (quote (primitive apply)) (g$0$10769 g$0$10860 g$0$10862 g$0$10863) g$0$10861))) (set! g$0$10839 (lambda (g$0$10843 g$0$10844 g$0$10845) ((lambda (g$0$10848 g$0$10849) (list (quote lambda) g$0$10848 (g$0$10773 g$0$10843 (list g$0$10849) (list (list (quote (primitive length)) g$0$10848)) (letrec ((g$0$10851 (lambda (g$0$10854 g$0$10855) (if (null? g$0$10854) (g$0$10833 g$0$10843) (list (quote if) (g$0$10835 g$0$10843 g$0$10849 (car g$0$10854)) (g$0$10837 g$0$10843 g$0$10848 (car g$0$10854) (car g$0$10855)) (g$0$10851 (cdr g$0$10854) (cdr g$0$10855))))))) (g$0$10851 g$0$10830 g$0$10845))))) (gensym) (gensym)))) (if (= (length g$0$10831) (quote 1)) (g$0$10769 g$0$10829 (car g$0$10830) (car g$0$10831)) (g$0$10839 g$0$10829 g$0$10830 g$0$10831)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$10773 (lambda (g$0$10886 g$0$10887 g$0$10888 g$0$10889) (cons (g$0$10769 g$0$10886 g$0$10887 g$0$10889) g$0$10888))) (set! g$0$10811 (lambda (g$0$10892 g$0$10893) (letrec ((g$0$10895 (lambda (g$0$10897) (if (null? (cdr g$0$10897)) (car g$0$10897) (if (equal? (car g$0$10897) (g$0$10813)) (g$0$10895 (cdr g$0$10897)) (cons (quote begin) g$0$10897)))))) (g$0$10895 g$0$10893)))) (set! g$0$10813 (lambda () (quote ((primitive void))))) (set! g$0$10815 (lambda (g$0$10902 g$0$10903 g$0$10904 g$0$10905) (if (null? g$0$10903) g$0$10905 (list (quote letrec) (map list g$0$10903 g$0$10904) g$0$10905)))) (set! g$0$10817 (lambda (g$0$10910 g$0$10911 g$0$10912 g$0$10913) (if (null? g$0$10911) g$0$10913 (g$0$10773 g$0$10910 g$0$10911 (map (lambda (g$0$10915) (list (quote quote) (quote #f))) g$0$10911) (g$0$10811 g$0$10910 (append (map (lambda (g$0$10918 g$0$10919) (list (quote set!) g$0$10918 g$0$10919)) g$0$10911 g$0$10912) (list g$0$10913))))))) (begin (set! g$0$10920 g$0$10817) (set! g$0$10921 g$0$10815) (set! g$0$10922 g$0$10813) (set! g$0$10923 g$0$10811) (set! g$0$10927 g$0$10773) (set! g$0$10928 g$0$10771) (set! g$0$10929 g$0$10769) (set! g$0$10937 g$0$10692)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$18999 (quote #f)) (define g$0$18998 (quote #f)) (define g$0$18996 (quote #f)) (define g$0$18995 (quote #f)) (define g$0$18994 (quote #f)) (define g$0$18993 (quote #f)) (define g$0$18992 (quote #f)) (define g$0$18991 (quote #f)) (define g$0$18990 (quote #f)) (define g$0$18989 (quote #f)) (define g$0$18988 (quote #f)) (define g$0$18987 (quote #f)) (define g$0$18986 (quote #f)) (define g$0$18985 (quote #f)) (define g$0$18984 (quote #f)) (define g$0$18983 (quote #f)) (define g$0$18982 (quote #f)) (define g$0$18981 (quote #f)) (define g$0$18980 (quote #f)) (define g$0$18979 (quote #f)) (define g$0$18978 (quote #f)) (define g$0$18977 (quote #f)) (define g$0$18976 (quote #f)) (define g$0$18975 (quote #f)) (define g$0$18974 (quote #f)) (define g$0$18973 (quote #f)) (define g$0$18972 (quote #f)) (define g$0$18971 (quote #f)) (define g$0$18970 (quote #f)) (define g$0$18969 (quote #f)) (define g$0$18968 (quote #f)) (define g$0$18967 (quote #f)) (define g$0$18966 (quote #f)) (define g$0$18965 (quote #f)) (define g$0$18964 (quote #f)) (define g$0$18963 (quote #f)) (define g$0$18962 (quote #f)) (define g$0$18961 (quote #f)) (define g$0$18960 (quote #f)) (define g$0$18959 (quote #f)) (define g$0$18958 (quote #f)) (define g$0$18957 (quote #f)) (define g$0$18956 (quote #f)) (define g$0$18955 (quote #f)) (define g$0$18954 (quote #f)) (define g$0$18953 (quote #f)) (define g$0$18952 (quote #f)) (define g$0$18951 (quote #f)) (define g$0$18950 (quote #f)) (define g$0$18949 (quote #f)) (define g$0$18948 (quote #f)) (define g$0$18947 (quote #f)) (define g$0$18946 (quote #f)) (define g$0$18945 (quote #f)) (define g$0$18944 (quote #f)) (define g$0$18943 (quote #f)) (define g$0$18942 (quote #f)) (define g$0$18941 (quote #f)) (define g$0$18940 (quote #f)) (define g$0$18939 (quote #f)) (define g$0$18938 (quote #f)) (define g$0$18937 (quote #f)) (define g$0$18936 (quote #f)) (define g$0$18935 (quote #f)) (define g$0$18934 (quote #f)) (define g$0$18932 (quote #f)) (define g$0$18931 (quote #f)) (define g$0$18930 (quote #f)) (define g$0$18928 (quote #f)) (define g$0$18927 (quote #f)) (define g$0$18926 (quote #f)) (define g$0$18925 (quote #f)) (define g$0$18924 (quote #f)) (define g$0$18923 (quote #f)) (define g$0$18922 (quote #f)) (define g$0$18921 (quote #f)) (define g$0$18920 (quote #f)) (define g$0$18919 (quote #f)) (define g$0$18918 (quote #f)) (define g$0$18917 (quote #f)) (define g$0$18916 (quote #f)) (define g$0$18915 (quote #f)) (define g$0$18914 (quote #f)) (define g$0$18913 (quote #f)) (define g$0$18912 (quote #f)) (define g$0$18911 (quote #f)) (define g$0$18910 (quote #f)) (define g$0$18909 (quote #f)) (define g$0$18908 (quote #f)) (define g$0$18907 (quote #f)) (define g$0$18906 (quote #f)) (define g$0$18905 (quote #f)) (define g$0$18904 (quote #f)) (define g$0$18903 (quote #f)) (define g$0$18902 (quote #f)) (define g$0$18901 (quote #f)) (define g$0$18900 (quote #f)) (define g$0$18899 (quote #f)) (define g$0$18898 (quote #f)) (define g$0$18897 (quote #f)) (define g$0$18896 (quote #f)) (define g$0$18895 (quote #f)) (define g$0$18894 (quote #f)) (define g$0$18893 (quote #f)) (define g$0$18892 (quote #f)) (define g$0$18891 (quote #f)) (define g$0$18890 (quote #f)) (define g$0$18889 (quote #f)) (define g$0$18888 (quote #f)) (define g$0$18887 (quote #f)) (define g$0$18886 (quote #f)) (define g$0$18885 (quote #f)) (define g$0$18884 (quote #f)) (define g$0$18883 (quote #f)) (define g$0$18882 (quote #f)) (define g$0$18881 (quote #f)) (define g$0$18880 (quote #f)) (define g$0$18879 (quote #f)) (define g$0$18878 (quote #f)) (define g$0$18877 (quote #f)) (define g$0$18876 (quote #f)) (define g$0$18875 (quote #f)) (define g$0$18874 (quote #f)) (define g$0$18873 (quote #f)) (define g$0$18872 (quote #f)) (define g$0$18871 (quote #f)) (define g$0$18870 (quote #f)) (define g$0$18869 (quote #f)) (define g$0$18868 (quote #f)) (define g$0$18867 (quote #f)) (define g$0$18866 (quote #f)) (define g$0$18865 (quote #f)) (define g$0$18864 (quote #f)) (define g$0$18863 (quote #f)) (define g$0$18862 (quote #f)) (define g$0$18861 (quote #f)) (define g$0$18860 (quote #f)) (define g$0$18859 (quote #f)) (define g$0$18858 (quote #f)) (define g$0$18857 (quote #f)) (define g$0$18856 (quote #f)) (define g$0$18855 (quote #f)) (define g$0$18854 (quote #f)) (define g$0$18853 (quote #f)) (define g$0$18852 (quote #f)) (define g$0$18851 (quote #f)) (define g$0$18850 (quote #f)) (define g$0$18849 (quote #f)) (define g$0$18848 (quote #f)) (define g$0$18847 (quote #f)) (define g$0$18846 (quote #f)) (define g$0$18845 (quote #f)) (define g$0$18844 (quote #f)) (define g$0$18843 (quote #f)) (define g$0$18842 (quote #f)) (define g$0$18841 (quote #f)) (define g$0$18840 (quote #f)) (define g$0$18839 (quote #f)) (define g$0$18838 (quote #f)) (define g$0$18837 (quote #f)) (define g$0$18836 (quote #f)) (define g$0$18835 (quote #f)) (define g$0$18834 (quote #f)) (define g$0$18833 (quote #f)) (define g$0$18832 (quote #f)) (define g$0$18831 (quote #f)) (define g$0$18830 (quote #f)) (define g$0$18829 (quote #f)) (define g$0$18828 (quote #f)) (define g$0$18827 (quote #f)) (define g$0$18826 (quote #f)) (define g$0$18825 (quote #f)) (define g$0$18824 (quote #f)) (define g$0$18823 (quote #f)) (define g$0$18822 (quote #f)) (define g$0$18821 (quote #f)) (define g$0$18820 (quote #f)) (define g$0$18819 (quote #f)) (define g$0$18818 (quote #f)) (define g$0$18817 (quote #f)) (define g$0$18816 (quote #f)) ((lambda (g$0$10940 g$0$10942 g$0$10947 g$0$10949 g$0$10951 g$0$10953 g$0$10955 g$0$10958 g$0$10960 g$0$10962 g$0$10964 g$0$10966 g$0$10968 g$0$10970 g$0$10972 g$0$10974 g$0$10976 g$0$10978 g$0$10980 g$0$10982 g$0$10984 g$0$10986 g$0$10988 g$0$10991 g$0$10993 g$0$10995 g$0$10997 g$0$10999 g$0$11001 g$0$11003 g$0$11005 g$0$11007 g$0$11009 g$0$11011 g$0$11013 g$0$11015 g$0$11017 g$0$11019 g$0$11021 g$0$11023 g$0$11025 g$0$11027 g$0$11029 g$0$11031 g$0$11033 g$0$11035 g$0$11037 g$0$11039 g$0$11041 g$0$11043 g$0$11045 g$0$11047 g$0$11049 g$0$11051 g$0$11053 g$0$11055 g$0$11057 g$0$11059 g$0$11061 g$0$11063 g$0$11065 g$0$11067 g$0$11069 g$0$11071 g$0$11073 g$0$11087 g$0$11089 g$0$11091 g$0$11290 g$0$11292 g$0$11294 g$0$11296 g$0$11298 g$0$11300 g$0$11302 g$0$11304 g$0$11306 g$0$11308 g$0$11310 g$0$11312 g$0$11314 g$0$11316 g$0$11318 g$0$11320 g$0$11322 g$0$11324 g$0$11326 g$0$11328 g$0$11330 g$0$11332 g$0$11334 g$0$11336 g$0$11338 g$0$11340 g$0$11342 g$0$11344 g$0$11346 g$0$11348 g$0$11350 g$0$11352 g$0$11354 g$0$11356 g$0$11358 g$0$11360 g$0$11362 g$0$11364 g$0$11366 g$0$11368 g$0$11370 g$0$11372 g$0$11374 g$0$11376 g$0$11378 g$0$11380 g$0$11382 g$0$11384 g$0$11386 g$0$11388 g$0$11390 g$0$11392 g$0$11394 g$0$11396 g$0$11398 g$0$11400 g$0$11402 g$0$11404 g$0$11406 g$0$11408 g$0$11410 g$0$11412 g$0$11414 g$0$11416 g$0$11418 g$0$11420 g$0$11422 g$0$11424 g$0$11426 g$0$11428 g$0$11430 g$0$11432 g$0$11434 g$0$11436 g$0$11438 g$0$11440 g$0$11442 g$0$11444 g$0$11446 g$0$11448 g$0$11450 g$0$11452 g$0$11454 g$0$11456 g$0$11459 g$0$11461 g$0$11463 g$0$11465 g$0$11467 g$0$11469 g$0$11471 g$0$11473 g$0$11475 g$0$11477 g$0$11479 g$0$11481 g$0$11483 g$0$11485 g$0$11487 g$0$11489 g$0$11491 g$0$11493 g$0$11495 g$0$11497 g$0$11499 g$0$11501 g$0$11503 g$0$11505 g$0$11507 g$0$11509 g$0$11511 g$0$11513 g$0$11515) (begin (set! g$0$10940 (lambda (g$0$11518 g$0$11519) (if (memq g$0$11518 g$0$11519) g$0$11519 (cons g$0$11518 g$0$11519)))) (set! g$0$10942 (lambda (g$0$11522 g$0$11523) (if (null? g$0$11522) g$0$11523 (if (memq (car g$0$11522) g$0$11523) (g$0$10942 (cdr g$0$11522) g$0$11523) (cons (car g$0$11522) (g$0$10942 (cdr g$0$11522) g$0$11523)))))) (set! g$0$10947 (quote (top))) (set! g$0$10949 (lambda (g$0$11525) (memq (quote top) g$0$11525))) (set! g$0$10951 (lambda (g$0$11527) (if (symbol? g$0$11527) (gensym g$0$11527) (if (g$0$10993 g$0$11527) (g$0$10951 (g$0$11043 g$0$11527)) (error (quote gen-lexical) (quote "BUG: invalid arg ~s") g$0$11527))))) (set! g$0$10953 (lambda (g$0$11529) (g$0$10951 g$0$11529))) (set! g$0$10955 (lambda (g$0$11531) (gensym))) (set! g$0$10958 (lambda (g$0$11536 g$0$11537 g$0$11538 g$0$11539) (vector (quote g$0$10956) g$0$11536 g$0$11537 g$0$11538 g$0$11539))) (set! g$0$10960 (lambda (g$0$11541) (if (vector? g$0$11541) (if (= (vector-length g$0$11541) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref g$0$11541 (quote 0)) (quote g$0$10956))) (quote #f)) (quote #f)))) (set! g$0$10962 (lambda (g$0$11543) (if (g$0$10960 g$0$11543) (vector-ref g$0$11543 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") g$0$11543 (quote rib))))) (set! g$0$10964 (lambda (g$0$11545) (if (g$0$10960 g$0$11545) (vector-ref g$0$11545 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") g$0$11545 (quote rib))))) (set! g$0$10966 (lambda (g$0$11547) (if (g$0$10960 g$0$11547) (vector-ref g$0$11547 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") g$0$11547 (quote rib))))) (set! g$0$10968 (lambda (g$0$11549) (if (g$0$10960 g$0$11549) (vector-ref g$0$11549 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") g$0$11549 (quote rib))))) (set! g$0$10970 (lambda (g$0$11552 g$0$11553) (if (g$0$10960 g$0$11552) (vector-set! g$0$11552 (quote 1) g$0$11553) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") g$0$11552 (quote rib))))) (set! g$0$10972 (lambda (g$0$11556 g$0$11557) (if (g$0$10960 g$0$11556) (vector-set! g$0$11556 (quote 2) g$0$11557) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") g$0$11556 (quote rib))))) (set! g$0$10974 (lambda (g$0$11560 g$0$11561) (if (g$0$10960 g$0$11560) (vector-set! g$0$11560 (quote 3) g$0$11561) (error (quote set-rib-label*!) (quote "~s is not of type ~s") g$0$11560 (quote rib))))) (set! g$0$10976 (lambda (g$0$11564 g$0$11565) (if (g$0$10960 g$0$11564) (vector-set! g$0$11564 (quote 4) g$0$11565) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") g$0$11564 (quote rib))))) (set! g$0$10978 (lambda () (g$0$10958 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! g$0$10980 (lambda (g$0$11569 g$0$11570 g$0$11571) ((lambda (g$0$11573) (begin (set! g$0$11573 (lambda (g$0$11584 g$0$11585 g$0$11586 g$0$11587) (if (pair? g$0$11586) (begin (quote #f) ((lambda (g$0$11589) (if g$0$11589 g$0$11589 (begin (quote #f) (g$0$11573 g$0$11584 g$0$11585 (cdr g$0$11586) (cdr g$0$11587))))) (if (eq? g$0$11584 (car g$0$11586)) (begin (quote #f) (g$0$11045 g$0$11585 (car g$0$11587))) (quote #f)))) (quote #f)))) (begin (if (g$0$10968 g$0$11569) (error (quote extend-rib!) (quote "rib ~s is sealed") g$0$11569) (void)) ((lambda (g$0$11576 g$0$11577) ((lambda (g$0$11579) (begin (if (if (memq g$0$11576 (g$0$10962 g$0$11569)) (begin (quote #f) (g$0$11573 g$0$11576 g$0$11577 g$0$11579 (g$0$10964 g$0$11569))) (quote #f)) (error (quote expander) (quote "~a ~s") (quote "cannot redefine") (g$0$11059 g$0$11570 (quote ()))) (void)) (g$0$10970 g$0$11569 (cons g$0$11576 g$0$11579)) (g$0$10972 g$0$11569 (cons g$0$11577 (g$0$10964 g$0$11569))) (g$0$10974 g$0$11569 (cons g$0$11571 (g$0$10966 g$0$11569))))) (g$0$10962 g$0$11569))) (g$0$11043 g$0$11570) (g$0$10997 g$0$11570))))) (quote #f)))) (set! g$0$10982 (lambda (g$0$11591) ((lambda (g$0$11593) (if (null? g$0$11593) (void) ((lambda (g$0$11595) (begin (g$0$10970 g$0$11591 g$0$11595) (g$0$10972 g$0$11591 (list->vector (g$0$10964 g$0$11591))) (g$0$10974 g$0$11591 (list->vector (g$0$10966 g$0$11591))) (g$0$10976 g$0$11591 (make-vector (vector-length g$0$11595) (quote 0))))) (list->vector g$0$11593)))) (g$0$10962 g$0$11591)))) (set! g$0$10984 (lambda (g$0$11597) (if (g$0$10968 g$0$11597) (begin (g$0$10976 g$0$11597 (quote #f)) (g$0$10970 g$0$11597 (vector->list (g$0$10962 g$0$11597))) (g$0$10972 g$0$11597 (vector->list (g$0$10964 g$0$11597))) (g$0$10974 g$0$11597 (vector->list (g$0$10966 g$0$11597)))) (void)))) (set! g$0$10986 (lambda (g$0$11600 g$0$11601) ((lambda (g$0$11603) ((lambda (g$0$11605) ((lambda (g$0$11607) (begin (vector-set! g$0$11603 g$0$11607 (+ g$0$11605 (quote 1))) (if (= g$0$11607 g$0$11601) (void) ((lambda (g$0$11611 g$0$11612 g$0$11613) (begin ((lambda (g$0$11615) (begin (vector-set! g$0$11611 g$0$11601 (vector-ref g$0$11611 g$0$11607)) (vector-set! g$0$11611 g$0$11607 g$0$11615))) (vector-ref g$0$11611 g$0$11601)) ((lambda (g$0$11617) (begin (vector-set! g$0$11612 g$0$11601 (vector-ref g$0$11612 g$0$11607)) (vector-set! g$0$11612 g$0$11607 g$0$11617))) (vector-ref g$0$11612 g$0$11601)) ((lambda (g$0$11619) (begin (vector-set! g$0$11613 g$0$11601 (vector-ref g$0$11613 g$0$11607)) (vector-set! g$0$11613 g$0$11607 g$0$11619))) (vector-ref g$0$11613 g$0$11601)))) (g$0$10962 g$0$11600) (g$0$10964 g$0$11600) (g$0$10966 g$0$11600))))) (letrec ((g$0$11621 (lambda (g$0$11623) (if (zero? g$0$11623) (quote 0) ((lambda (g$0$11625) (if (= g$0$11605 (vector-ref g$0$11603 g$0$11625)) (g$0$11621 g$0$11625) g$0$11623)) (- g$0$11623 (quote 1))))))) (g$0$11621 g$0$11601)))) (vector-ref g$0$11603 g$0$11601))) (g$0$10968 g$0$11600)))) (set! g$0$10988 (lambda (g$0$11628 g$0$11629) (g$0$10958 (map g$0$11043 g$0$11628) (map g$0$10997 g$0$11628) g$0$11629 (quote #f)))) (set! g$0$10991 (lambda (g$0$11633 g$0$11634 g$0$11635) (vector (quote g$0$10989) g$0$11633 g$0$11634 g$0$11635))) (set! g$0$10993 (lambda (g$0$11637) (if (vector? g$0$11637) (if (= (vector-length g$0$11637) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref g$0$11637 (quote 0)) (quote g$0$10989))) (quote #f)) (quote #f)))) (set! g$0$10995 (lambda (g$0$11639) (if (g$0$10993 g$0$11639) (vector-ref g$0$11639 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") g$0$11639 (quote stx))))) (set! g$0$10997 (lambda (g$0$11641) (if (g$0$10993 g$0$11641) (vector-ref g$0$11641 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") g$0$11641 (quote stx))))) (set! g$0$10999 (lambda (g$0$11643) (if (g$0$10993 g$0$11643) (vector-ref g$0$11643 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") g$0$11643 (quote stx))))) (set! g$0$11001 (lambda (g$0$11646 g$0$11647) (if (g$0$10993 g$0$11646) (vector-set! g$0$11646 (quote 1) g$0$11647) (error (quote set-stx-expr!) (quote "~s is not of type ~s") g$0$11646 (quote stx))))) (set! g$0$11003 (lambda (g$0$11650 g$0$11651) (if (g$0$10993 g$0$11650) (vector-set! g$0$11650 (quote 2) g$0$11651) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") g$0$11650 (quote stx))))) (set! g$0$11005 (lambda (g$0$11654 g$0$11655) (if (g$0$10993 g$0$11654) (vector-set! g$0$11654 (quote 3) g$0$11655) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") g$0$11654 (quote stx))))) (set! g$0$11007 (lambda (g$0$11658 g$0$11659) (g$0$10991 g$0$11659 (g$0$10997 g$0$11658) (g$0$10999 g$0$11658)))) (set! g$0$11009 (lambda () (string (quote #\m)))) (set! g$0$11011 (quote #f)) (set! g$0$11013 not) (set! g$0$11015 (lambda (g$0$11663 g$0$11664 g$0$11665) ((lambda (g$0$11667) (begin (set! g$0$11667 (lambda (g$0$11674 g$0$11675) (letrec ((g$0$11677 (lambda (g$0$11680 g$0$11681) (if (null? g$0$11681) (cdr g$0$11675) (cons g$0$11680 (g$0$11677 (car g$0$11681) (cdr g$0$11681))))))) (g$0$11677 (car g$0$11674) (cdr g$0$11674))))) ((lambda (g$0$11670 g$0$11671) (if (if (not (null? g$0$11663)) (if (not (null? g$0$11670)) (begin (quote #f) (g$0$11013 (car g$0$11670))) (quote #f)) (quote #f)) (values (g$0$11667 g$0$11663 g$0$11670) (g$0$11667 g$0$11664 g$0$11671)) (values (append g$0$11663 g$0$11670) (append g$0$11664 g$0$11671)))) (g$0$10997 g$0$11665) (g$0$10999 g$0$11665)))) (quote #f)))) (set! g$0$11017 (lambda (g$0$11685 g$0$11686 g$0$11687) (if (g$0$10993 g$0$11685) (call-with-values (lambda () (g$0$11015 g$0$11686 g$0$11687 g$0$11685)) (lambda (g$0$11690 g$0$11691) (g$0$10991 (g$0$10995 g$0$11685) g$0$11690 g$0$11691))) (g$0$10991 g$0$11685 g$0$11686 g$0$11687)))) (set! g$0$11019 (lambda (g$0$11694 g$0$11695) (g$0$11017 g$0$11695 (list g$0$11694) (quote (shift))))) (set! g$0$11021 (lambda (g$0$11698 g$0$11699) (g$0$11017 g$0$11699 (quote ()) (list g$0$11698)))) (set! g$0$11023 (lambda (g$0$11702 g$0$11703) (if (g$0$10993 g$0$11702) (g$0$11023 (g$0$10995 g$0$11702) g$0$11703) (g$0$11703 g$0$11702)))) (set! g$0$11025 (lambda (g$0$11705) (if (g$0$10993 g$0$11705) ((lambda (g$0$11709 g$0$11710 g$0$11711) (map (lambda (g$0$11713) (g$0$11017 g$0$11713 g$0$11710 g$0$11711)) g$0$11709)) (g$0$11025 (g$0$10995 g$0$11705)) (g$0$10997 g$0$11705) (g$0$10999 g$0$11705)) (if (vector? g$0$11705) (vector->list g$0$11705) (error (quote syntax-vector->list) (quote "not a syntax vector ~s") g$0$11705))))) (set! g$0$11027 (lambda (g$0$11715) (g$0$11023 g$0$11715 pair?))) (set! g$0$11029 (lambda (g$0$11717) (g$0$11023 g$0$11717 vector?))) (set! g$0$11031 (lambda (g$0$11719) (g$0$11023 g$0$11719 null?))) (set! g$0$11033 (lambda (g$0$11721) ((lambda (g$0$11723) (if g$0$11723 g$0$11723 (begin (quote #f) (if (g$0$11027 g$0$11721) (begin (quote #f) (g$0$11033 (g$0$11039 g$0$11721))) (quote #f))))) (g$0$11031 g$0$11721)))) (set! g$0$11035 (lambda (g$0$11725) (if (g$0$10993 g$0$11725) (g$0$11017 (g$0$11035 (g$0$10995 g$0$11725)) (g$0$10997 g$0$11725) (g$0$10999 g$0$11725)) (if (pair? g$0$11725) (car g$0$11725) (error (quote syntax-car) (quote "~s is not a pair") g$0$11725))))) (set! g$0$11037 (lambda (g$0$11727) (if (g$0$11027 g$0$11727) (cons (g$0$11035 g$0$11727) (g$0$11037 (g$0$11039 g$0$11727))) (if (g$0$11031 g$0$11727) (quote ()) (error (quote syntax->list) (quote "invalid ~s") g$0$11727))))) (set! g$0$11039 (lambda (g$0$11729) (if (g$0$10993 g$0$11729) (g$0$11017 (g$0$11039 (g$0$10995 g$0$11729)) (g$0$10997 g$0$11729) (g$0$10999 g$0$11729)) (if (pair? g$0$11729) (cdr g$0$11729) (error (quote syntax-cdr) (quote "~s is not a pair") g$0$11729))))) (set! g$0$11041 (lambda (g$0$11731) (g$0$11023 g$0$11731 symbol?))) (set! g$0$11043 (lambda (g$0$11733) (if (g$0$10993 g$0$11733) (g$0$11043 (g$0$10995 g$0$11733)) (if (symbol? g$0$11733) g$0$11733 (error (quote id->sym) (quote "~s is not an id") g$0$11733))))) (set! g$0$11045 (lambda (g$0$11736 g$0$11737) ((lambda (g$0$11739) (if g$0$11739 g$0$11739 (begin (quote #f) (if (pair? g$0$11736) (if (pair? g$0$11737) (if (eq? (car g$0$11736) (car g$0$11737)) (begin (quote #f) (g$0$11045 (cdr g$0$11736) (cdr g$0$11737))) (quote #f)) (quote #f)) (quote #f))))) (if (null? g$0$11736) (begin (quote #f) (null? g$0$11737)) (quote #f))))) (set! g$0$11047 (lambda (g$0$11742 g$0$11743) (if (eq? (g$0$11043 g$0$11742) (g$0$11043 g$0$11743)) (begin (quote #f) (g$0$11045 (g$0$10997 g$0$11742) (g$0$10997 g$0$11743))) (quote #f)))) (set! g$0$11049 (lambda (g$0$11746 g$0$11747) ((lambda (g$0$11750 g$0$11751) (if ((lambda (g$0$11753) (if g$0$11753 g$0$11753 (begin (quote #f) g$0$11751))) g$0$11750) (eq? g$0$11750 g$0$11751) (eq? (g$0$11043 g$0$11746) (g$0$11043 g$0$11747)))) (g$0$11063 g$0$11746) (g$0$11063 g$0$11747)))) (set! g$0$11051 (lambda (g$0$11755) (if (for-all g$0$11041 g$0$11755) (begin (quote #f) (g$0$11053 g$0$11755)) (quote #f)))) (set! g$0$11053 (lambda (g$0$11757) ((lambda (g$0$11759) (if g$0$11759 g$0$11759 (begin (quote #f) (if (not (g$0$11055 (car g$0$11757) (cdr g$0$11757))) (begin (quote #f) (g$0$11053 (cdr g$0$11757))) (quote #f))))) (null? g$0$11757)))) (set! g$0$11055 (lambda (g$0$11762 g$0$11763) (if (pair? g$0$11763) (begin (quote #f) ((lambda (g$0$11765) (if g$0$11765 g$0$11765 (begin (quote #f) (g$0$11055 g$0$11762 (cdr g$0$11763))))) (g$0$11047 g$0$11762 (car g$0$11763)))) (quote #f)))) (set! g$0$11057 (lambda (g$0$11767) ((lambda (g$0$11769) (if g$0$11769 g$0$11769 ((lambda (g$0$11771) (if g$0$11771 g$0$11771 ((lambda (g$0$11773) (if g$0$11773 g$0$11773 (begin (quote #f) (boolean? g$0$11767)))) (char? g$0$11767)))) (string? g$0$11767)))) (number? g$0$11767)))) (set! g$0$11059 (lambda (g$0$11776 g$0$11777) (if (g$0$10949 g$0$11777) g$0$11776 (letrec ((g$0$11779 (lambda (g$0$11781) (if (g$0$10993 g$0$11781) (g$0$11059 (g$0$10995 g$0$11781) (g$0$10997 g$0$11781)) (if (pair? g$0$11781) ((lambda (g$0$11788 g$0$11789) (if (if (eq? g$0$11788 (car g$0$11781)) (begin (quote #f) (eq? g$0$11789 (cdr g$0$11781))) (quote #f)) g$0$11781 (cons g$0$11788 g$0$11789))) (g$0$11779 (car g$0$11781)) (g$0$11779 (cdr g$0$11781))) (if (vector? g$0$11781) ((lambda (g$0$11783) ((lambda (g$0$11785) (if (for-all eq? g$0$11783 g$0$11785) g$0$11781 (list->vector g$0$11785))) (map g$0$11779 g$0$11783))) (vector->list g$0$11781)) g$0$11781)))))) (g$0$11779 g$0$11776))))) (set! g$0$11061 (lambda (g$0$11791) (g$0$11059 g$0$11791 (quote ())))) (set! g$0$11063 (lambda (g$0$11793) ((lambda (g$0$11795) (letrec ((g$0$11797 (lambda (g$0$11800 g$0$11801) (if (null? g$0$11800) (g$0$11513 g$0$11795) (if (eq? (car g$0$11800) (quote shift)) (g$0$11797 (cdr g$0$11800) (cdr g$0$11801)) ((lambda (g$0$11803) (if (g$0$10968 g$0$11803) ((lambda (g$0$11813) (letrec ((g$0$11815 (lambda (g$0$11818 g$0$11819) (if (= g$0$11818 g$0$11819) (g$0$11797 (cdr g$0$11800) g$0$11801) (if (if (eq? (vector-ref g$0$11813 g$0$11818) g$0$11795) (begin (quote #f) (g$0$11045 g$0$11801 (vector-ref (g$0$10964 g$0$11803) g$0$11818))) (quote #f)) ((lambda (g$0$11821) (begin (g$0$10986 g$0$11803 g$0$11818) g$0$11821)) (vector-ref (g$0$10966 g$0$11803) g$0$11818)) (g$0$11815 (+ g$0$11818 (quote 1)) g$0$11819)))))) (g$0$11815 (quote 0) (vector-length g$0$11813)))) (g$0$10962 g$0$11803)) (letrec ((g$0$11805 (lambda (g$0$11809 g$0$11810 g$0$11811) (if (null? g$0$11809) (g$0$11797 (cdr g$0$11800) g$0$11801) (if (if (eq? (car g$0$11809) g$0$11795) (begin (quote #f) (g$0$11045 (car g$0$11810) g$0$11801)) (quote #f)) (car g$0$11811) (g$0$11805 (cdr g$0$11809) (cdr g$0$11810) (cdr g$0$11811))))))) (g$0$11805 (g$0$10962 g$0$11803) (g$0$10964 g$0$11803) (g$0$10966 g$0$11803))))) (car g$0$11800))))))) (g$0$11797 (g$0$10999 g$0$11793) (g$0$10997 g$0$11793)))) (g$0$11043 g$0$11793)))) (set! g$0$11065 (lambda (g$0$11824 g$0$11825) ((lambda (g$0$11827) (if g$0$11827 g$0$11827 (begin (quote #f) ((lambda (g$0$11829) (if g$0$11829 (cdr g$0$11829) (quote (displaced-lexical . #f)))) (assq g$0$11824 g$0$11825))))) (g$0$10646 g$0$11824)))) (set! g$0$11067 cons) (set! g$0$11069 car) (set! g$0$11071 cdr) (set! g$0$11073 (lambda (g$0$11832 g$0$11833) (if (g$0$11041 g$0$11832) ((lambda (g$0$11846) ((lambda (g$0$11848) ((lambda (g$0$11850) ((lambda (g$0$11852) ((lambda () (begin (if g$0$11848 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (g$0$11059 g$0$11832 (quote ())))) ((lambda (g$0$11853) (if (memv g$0$11853 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module))) (values g$0$11852 (g$0$11071 g$0$11850) g$0$11846) (values (quote other) (quote #f) (quote #f)))) g$0$11852))))) (g$0$11069 g$0$11850))) (g$0$11065 g$0$11848 g$0$11833))) (g$0$11063 g$0$11846))) g$0$11832) (if (g$0$11027 g$0$11832) ((lambda (g$0$11837) (if (g$0$11041 g$0$11837) ((lambda (g$0$11839) ((lambda (g$0$11841) ((lambda (g$0$11843) ((lambda () (begin (if g$0$11839 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (g$0$11059 g$0$11832 (quote ())))) ((lambda (g$0$11844) (if (memv g$0$11844 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import))) (values g$0$11843 (g$0$11071 g$0$11841) g$0$11837) (values (quote call) (quote #f) (quote #f)))) g$0$11843))))) (g$0$11069 g$0$11841))) (g$0$11065 g$0$11839 g$0$11833))) (g$0$11063 g$0$11837)) (values (quote call) (quote #f) (quote #f)))) (g$0$11035 g$0$11832)) ((lambda (g$0$11835) (if (g$0$11057 g$0$11835) (values (quote constant) g$0$11835 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (g$0$11061 g$0$11832)))))) (set! g$0$11087 (lambda (g$0$11856 g$0$11857) (if (procedure? g$0$11856) (cons* (quote local-macro) g$0$11856 g$0$11857) (if (if (pair? g$0$11856) (if (eq? (car g$0$11856) (quote macro!)) (begin (quote #f) (procedure? (cdr g$0$11856))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr g$0$11856) g$0$11857) (if (if (pair? g$0$11856) (begin (quote #f) (eq? (car g$0$11856) (quote $rtd))) (quote #f)) g$0$11856 (error (quote expand) (quote "invalid transformer ~s") g$0$11856)))))) (set! g$0$11089 (lambda (g$0$11859) (if (procedure? g$0$11859) (cons (quote macro!) g$0$11859) (error (quote make-variable-transformer) (quote "~s is not a procedure") g$0$11859)))) (set! g$0$11091 (lambda (g$0$11861) (g$0$11087 (eval-core (g$0$10207 g$0$11861)) g$0$11861))) (set! g$0$11290 (lambda (g$0$11863) ((lambda (g$0$11865) ((lambda (g$0$11867) (if (if g$0$11867 (begin (quote #f) (apply (lambda (g$0$11918 g$0$11919 g$0$11920 g$0$11921) (g$0$11041 g$0$11918)) g$0$11867)) (quote #f)) (apply (lambda (g$0$11910 g$0$11911 g$0$11912 g$0$11913) (values g$0$11910 (cons (quote defun) (cons g$0$11911 (cons g$0$11912 g$0$11913))))) g$0$11867) ((lambda (g$0$11869) ((lambda (g$0$11871) (if (if g$0$11871 (begin (quote #f) (apply (lambda (g$0$11878 g$0$11879) (g$0$11041 g$0$11878)) g$0$11871)) (quote #f)) (apply (lambda (g$0$11874 g$0$11875) (values g$0$11874 (cons (quote expr) g$0$11875))) g$0$11871) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$11869 (quote ()))))) ((lambda (g$0$11881) (if (g$0$11027 g$0$11881) (begin (quote #f) ((lambda (g$0$11883) (if g$0$11883 (begin (quote #f) ((lambda (g$0$11885) (if g$0$11885 (begin (quote #f) (append g$0$11883 g$0$11885)) (quote #f))) ((lambda (g$0$11887) (if (g$0$11027 g$0$11887) (begin (quote #f) ((lambda (g$0$11889) (if g$0$11889 (begin (quote #f) ((lambda (g$0$11891) (if g$0$11891 (begin (quote #f) (append g$0$11889 g$0$11891)) (quote #f))) ((lambda (g$0$11893) (if (g$0$11027 g$0$11893) (begin (quote #f) ((lambda (g$0$11895) (if g$0$11895 (begin (quote #f) ((lambda (g$0$11897) (if g$0$11897 (begin (quote #f) (append g$0$11895 g$0$11897)) (quote #f))) ((lambda (g$0$11899) (if (equal? (g$0$11061 g$0$11899) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$11893)))) (quote #f))) ((lambda (g$0$11901) (list g$0$11901)) (g$0$11035 g$0$11893)))) (quote #f))) (g$0$11039 g$0$11887)))) (quote #f))) ((lambda (g$0$11903) (list g$0$11903)) (g$0$11035 g$0$11887)))) (quote #f))) (g$0$11039 g$0$11881)))) (quote #f))) ((lambda (g$0$11905) (quote ())) (g$0$11035 g$0$11881)))) (quote #f))) g$0$11869))) g$0$11865))) ((lambda (g$0$11923) (if (g$0$11027 g$0$11923) (begin (quote #f) ((lambda (g$0$11925) (if g$0$11925 (begin (quote #f) ((lambda (g$0$11927) (if g$0$11927 (begin (quote #f) (append g$0$11925 g$0$11927)) (quote #f))) ((lambda (g$0$11929) (if (g$0$11027 g$0$11929) (begin (quote #f) ((lambda (g$0$11931) (if g$0$11931 (begin (quote #f) ((lambda (g$0$11933) (if g$0$11933 (begin (quote #f) (append g$0$11931 g$0$11933)) (quote #f))) ((lambda (g$0$11935) (if (g$0$11027 g$0$11935) (begin (quote #f) ((lambda (g$0$11937) (if g$0$11937 (begin (quote #f) ((lambda (g$0$11939) (if g$0$11939 (begin (quote #f) (append g$0$11937 g$0$11939)) (quote #f))) ((letrec ((g$0$11941 (lambda (g$0$11943) (if (g$0$11027 g$0$11943) ((lambda (g$0$11945) (if g$0$11945 (begin (quote #f) ((lambda (g$0$11947) (if g$0$11947 (begin (quote #f) (map cons g$0$11945 g$0$11947)) (quote #f))) (g$0$11941 (g$0$11039 g$0$11943)))) (quote #f))) ((lambda (g$0$11949) (list g$0$11949)) (g$0$11035 g$0$11943))) (if (g$0$11031 g$0$11943) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$11941) (g$0$11039 g$0$11935)))) (quote #f))) ((lambda (g$0$11951) (list g$0$11951)) (g$0$11035 g$0$11935)))) (quote #f))) (g$0$11039 g$0$11929)))) (quote #f))) ((lambda (g$0$11953) (if (g$0$11027 g$0$11953) (begin (quote #f) ((lambda (g$0$11955) (if g$0$11955 (begin (quote #f) ((lambda (g$0$11957) (if g$0$11957 (begin (quote #f) (append g$0$11955 g$0$11957)) (quote #f))) ((lambda (g$0$11959) (list g$0$11959)) (g$0$11039 g$0$11953)))) (quote #f))) ((lambda (g$0$11961) (list g$0$11961)) (g$0$11035 g$0$11953)))) (quote #f))) (g$0$11035 g$0$11929)))) (quote #f))) (g$0$11039 g$0$11923)))) (quote #f))) ((lambda (g$0$11963) (quote ())) (g$0$11035 g$0$11923)))) (quote #f))) g$0$11865))) g$0$11863))) (set! g$0$11292 (lambda (g$0$11965) ((lambda (g$0$11967) ((lambda (g$0$11969) (if (if g$0$11969 (begin (quote #f) (apply (lambda (g$0$11976 g$0$11977) (g$0$11041 g$0$11976)) g$0$11969)) (quote #f)) (apply (lambda (g$0$11972 g$0$11973) (values g$0$11972 g$0$11973)) g$0$11969) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$11967 (quote ()))))) ((lambda (g$0$11979) (if (g$0$11027 g$0$11979) (begin (quote #f) ((lambda (g$0$11981) (if g$0$11981 (begin (quote #f) ((lambda (g$0$11983) (if g$0$11983 (begin (quote #f) (append g$0$11981 g$0$11983)) (quote #f))) ((lambda (g$0$11985) (if (g$0$11027 g$0$11985) (begin (quote #f) ((lambda (g$0$11987) (if g$0$11987 (begin (quote #f) ((lambda (g$0$11989) (if g$0$11989 (begin (quote #f) (append g$0$11987 g$0$11989)) (quote #f))) ((lambda (g$0$11991) (if (g$0$11027 g$0$11991) (begin (quote #f) ((lambda (g$0$11993) (if g$0$11993 (begin (quote #f) ((lambda (g$0$11995) (if g$0$11995 (begin (quote #f) (append g$0$11993 g$0$11995)) (quote #f))) ((lambda (g$0$11997) (if (equal? (g$0$11061 g$0$11997) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$11991)))) (quote #f))) ((lambda (g$0$11999) (list g$0$11999)) (g$0$11035 g$0$11991)))) (quote #f))) (g$0$11039 g$0$11985)))) (quote #f))) ((lambda (g$0$12001) (list g$0$12001)) (g$0$11035 g$0$11985)))) (quote #f))) (g$0$11039 g$0$11979)))) (quote #f))) ((lambda (g$0$12003) (quote ())) (g$0$11035 g$0$11979)))) (quote #f))) g$0$11967))) g$0$11965))) (set! g$0$11294 (lambda (g$0$12005) ((lambda (g$0$12007) ((lambda (g$0$12009) (if g$0$12009 ((lambda (g$0$12011) ((lambda (g$0$12014 g$0$12015) (g$0$11021 (g$0$10958 (list g$0$12014) (list g$0$10947) (list g$0$12015) (quote #f)) (g$0$11017 g$0$12005 g$0$10947 (quote ())))) (car g$0$12011) (cdr g$0$12011))) g$0$12009) (g$0$11017 g$0$12005 g$0$10947 (quote ())))) (assq g$0$12005 g$0$12007))) (g$0$10679 (g$0$10654 (quote (psyntax system $all))))))) (set! g$0$11296 (lambda (g$0$12019 g$0$12020 g$0$12021) (cons (cons* g$0$12019 (quote lexical) g$0$12020) g$0$12021))) (set! g$0$11298 (lambda (g$0$12025 g$0$12026 g$0$12027) (if (null? g$0$12025) g$0$12027 (g$0$11298 (cdr g$0$12025) (cdr g$0$12026) (g$0$11296 (car g$0$12025) (car g$0$12026) g$0$12027))))) (set! g$0$11300 (lambda (g$0$12031 g$0$12032 g$0$12033) ((lambda (g$0$12035) ((lambda (g$0$12037) (if (if g$0$12037 (begin (quote #f) (apply (lambda (g$0$12072 g$0$12073 g$0$12074 g$0$12075) (quote #t)) g$0$12037)) (quote #f)) (apply (lambda (g$0$12042 g$0$12043 g$0$12044 g$0$12045) ((lambda (g$0$12047) ((lambda (g$0$12050 g$0$12051) ((lambda (g$0$12055 g$0$12056 g$0$12057) (letrec ((g$0$12059 (lambda (g$0$12062 g$0$12063) (if (null? g$0$12062) (g$0$11412 (g$0$11021 (g$0$10988 g$0$12055 g$0$12056) (cons g$0$12044 g$0$12045)) (g$0$11298 g$0$12056 g$0$12057 g$0$12032) g$0$12033) (list (quote (primitive call-with-values)) (g$0$10929 (quote #f) (quote ()) (car g$0$12063)) (g$0$10929 (quote #f) (car g$0$12062) (g$0$12059 (cdr g$0$12062) (cdr g$0$12063)))))))) (g$0$12059 g$0$12050 g$0$12047))) (apply append g$0$12042) (apply append g$0$12051) (apply append g$0$12050))) (map (lambda (g$0$12065) (map g$0$10951 g$0$12065)) g$0$12042) (map (lambda (g$0$12067) (map g$0$10955 g$0$12067)) g$0$12042))) (g$0$11392 g$0$12043 g$0$12032 g$0$12033))) g$0$12037) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12035 (quote ()))))) ((lambda (g$0$12077) (if (g$0$11027 g$0$12077) (begin (quote #f) ((lambda (g$0$12079) (if g$0$12079 (begin (quote #f) ((lambda (g$0$12081) (if g$0$12081 (begin (quote #f) (append g$0$12079 g$0$12081)) (quote #f))) ((lambda (g$0$12083) (if (g$0$11027 g$0$12083) (begin (quote #f) ((lambda (g$0$12085) (if g$0$12085 (begin (quote #f) ((lambda (g$0$12087) (if g$0$12087 (begin (quote #f) (append g$0$12085 g$0$12087)) (quote #f))) ((lambda (g$0$12089) (if (g$0$11027 g$0$12089) (begin (quote #f) ((lambda (g$0$12091) (if g$0$12091 (begin (quote #f) ((lambda (g$0$12093) (if g$0$12093 (begin (quote #f) (append g$0$12091 g$0$12093)) (quote #f))) ((letrec ((g$0$12095 (lambda (g$0$12097) (if (g$0$11027 g$0$12097) ((lambda (g$0$12099) (if g$0$12099 (begin (quote #f) ((lambda (g$0$12101) (if g$0$12101 (begin (quote #f) (map cons g$0$12099 g$0$12101)) (quote #f))) (g$0$12095 (g$0$11039 g$0$12097)))) (quote #f))) ((lambda (g$0$12103) (list g$0$12103)) (g$0$11035 g$0$12097))) (if (g$0$11031 g$0$12097) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12095) (g$0$11039 g$0$12089)))) (quote #f))) ((lambda (g$0$12105) (list g$0$12105)) (g$0$11035 g$0$12089)))) (quote #f))) (g$0$11039 g$0$12083)))) (quote #f))) ((letrec ((g$0$12107 (lambda (g$0$12109) (if (g$0$11027 g$0$12109) ((lambda (g$0$12111) (if g$0$12111 (begin (quote #f) ((lambda (g$0$12113) (if g$0$12113 (begin (quote #f) (map cons g$0$12111 g$0$12113)) (quote #f))) (g$0$12107 (g$0$11039 g$0$12109)))) (quote #f))) ((lambda (g$0$12115) (if (g$0$11027 g$0$12115) (begin (quote #f) ((lambda (g$0$12117) (if g$0$12117 (begin (quote #f) ((lambda (g$0$12119) (if g$0$12119 (begin (quote #f) (append g$0$12117 g$0$12119)) (quote #f))) ((lambda (g$0$12121) (if (g$0$11027 g$0$12121) (begin (quote #f) ((lambda (g$0$12123) (if g$0$12123 (begin (quote #f) ((lambda (g$0$12125) (if g$0$12125 (begin (quote #f) (append g$0$12123 g$0$12125)) (quote #f))) ((lambda (g$0$12127) (if (equal? (g$0$11061 g$0$12127) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12121)))) (quote #f))) ((lambda (g$0$12129) (list g$0$12129)) (g$0$11035 g$0$12121)))) (quote #f))) (g$0$11039 g$0$12115)))) (quote #f))) ((letrec ((g$0$12131 (lambda (g$0$12133) (if (g$0$11027 g$0$12133) ((lambda (g$0$12135) (if g$0$12135 (begin (quote #f) ((lambda (g$0$12137) (if g$0$12137 (begin (quote #f) (map cons g$0$12135 g$0$12137)) (quote #f))) (g$0$12131 (g$0$11039 g$0$12133)))) (quote #f))) ((lambda (g$0$12139) (list g$0$12139)) (g$0$11035 g$0$12133))) (if (g$0$11031 g$0$12133) (list (begin (quote fml**) (quote ()))) (quote #f)))))) g$0$12131) (g$0$11035 g$0$12115)))) (quote #f))) (g$0$11035 g$0$12109))) (if (g$0$11031 g$0$12109) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$12107) (g$0$11035 g$0$12083)))) (quote #f))) (g$0$11039 g$0$12077)))) (quote #f))) ((lambda (g$0$12141) (quote ())) (g$0$11035 g$0$12077)))) (quote #f))) g$0$12035))) g$0$12031))) (set! g$0$11302 (lambda (g$0$12146 g$0$12147 g$0$12148 g$0$12149) ((lambda (g$0$12151) ((lambda (g$0$12153) (if (if g$0$12153 (begin (quote #f) (apply (lambda (g$0$12180 g$0$12181 g$0$12182 g$0$12183) (quote #t)) g$0$12153)) (quote #f)) (apply (lambda (g$0$12158 g$0$12159 g$0$12160 g$0$12161) (if (not (g$0$11051 g$0$12158)) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (g$0$11059 g$0$12146 (quote ()))) ((lambda (g$0$12164 g$0$12165) ((lambda (g$0$12168 g$0$12169) ((lambda (g$0$12172 g$0$12173) (g$0$12149 (quote #f) g$0$12164 g$0$12173 g$0$12172)) (g$0$11412 (g$0$11021 g$0$12168 (cons g$0$12160 g$0$12161)) g$0$12169 g$0$12148) (g$0$11392 (map (lambda (g$0$12175) (g$0$11021 g$0$12168 g$0$12175)) g$0$12159) g$0$12169 g$0$12148))) (g$0$10988 g$0$12158 g$0$12165) (g$0$11298 g$0$12165 g$0$12164 g$0$12147))) (map g$0$10951 g$0$12158) (map g$0$10955 g$0$12158)))) g$0$12153) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12151 (quote ()))))) ((lambda (g$0$12185) (if (g$0$11027 g$0$12185) (begin (quote #f) ((lambda (g$0$12187) (if g$0$12187 (begin (quote #f) ((lambda (g$0$12189) (if g$0$12189 (begin (quote #f) (append g$0$12187 g$0$12189)) (quote #f))) ((lambda (g$0$12191) (if (g$0$11027 g$0$12191) (begin (quote #f) ((lambda (g$0$12193) (if g$0$12193 (begin (quote #f) ((lambda (g$0$12195) (if g$0$12195 (begin (quote #f) (append g$0$12193 g$0$12195)) (quote #f))) ((lambda (g$0$12197) (if (g$0$11027 g$0$12197) (begin (quote #f) ((lambda (g$0$12199) (if g$0$12199 (begin (quote #f) ((lambda (g$0$12201) (if g$0$12201 (begin (quote #f) (append g$0$12199 g$0$12201)) (quote #f))) ((letrec ((g$0$12203 (lambda (g$0$12205) (if (g$0$11027 g$0$12205) ((lambda (g$0$12207) (if g$0$12207 (begin (quote #f) ((lambda (g$0$12209) (if g$0$12209 (begin (quote #f) (map cons g$0$12207 g$0$12209)) (quote #f))) (g$0$12203 (g$0$11039 g$0$12205)))) (quote #f))) ((lambda (g$0$12211) (list g$0$12211)) (g$0$11035 g$0$12205))) (if (g$0$11031 g$0$12205) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12203) (g$0$11039 g$0$12197)))) (quote #f))) ((lambda (g$0$12213) (list g$0$12213)) (g$0$11035 g$0$12197)))) (quote #f))) (g$0$11039 g$0$12191)))) (quote #f))) ((letrec ((g$0$12215 (lambda (g$0$12217) (if (g$0$11027 g$0$12217) ((lambda (g$0$12219) (if g$0$12219 (begin (quote #f) ((lambda (g$0$12221) (if g$0$12221 (begin (quote #f) (map cons g$0$12219 g$0$12221)) (quote #f))) (g$0$12215 (g$0$11039 g$0$12217)))) (quote #f))) ((lambda (g$0$12223) (if (g$0$11027 g$0$12223) (begin (quote #f) ((lambda (g$0$12225) (if g$0$12225 (begin (quote #f) ((lambda (g$0$12227) (if g$0$12227 (begin (quote #f) (append g$0$12225 g$0$12227)) (quote #f))) ((lambda (g$0$12229) (if (g$0$11027 g$0$12229) (begin (quote #f) ((lambda (g$0$12231) (if g$0$12231 (begin (quote #f) ((lambda (g$0$12233) (if g$0$12233 (begin (quote #f) (append g$0$12231 g$0$12233)) (quote #f))) ((lambda (g$0$12235) (if (equal? (g$0$11061 g$0$12235) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12229)))) (quote #f))) ((lambda (g$0$12237) (list g$0$12237)) (g$0$11035 g$0$12229)))) (quote #f))) (g$0$11039 g$0$12223)))) (quote #f))) ((lambda (g$0$12239) (list g$0$12239)) (g$0$11035 g$0$12223)))) (quote #f))) (g$0$11035 g$0$12217))) (if (g$0$11031 g$0$12217) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$12215) (g$0$11035 g$0$12191)))) (quote #f))) (g$0$11039 g$0$12185)))) (quote #f))) ((lambda (g$0$12241) (quote ())) (g$0$11035 g$0$12185)))) (quote #f))) g$0$12151))) g$0$12146))) (set! g$0$11304 (lambda (g$0$12245 g$0$12246 g$0$12247) (g$0$11302 g$0$12245 g$0$12246 g$0$12247 g$0$10921))) (set! g$0$11306 (lambda (g$0$12251 g$0$12252 g$0$12253) (g$0$11302 g$0$12251 g$0$12252 g$0$12253 g$0$10920))) (set! g$0$11308 (lambda (g$0$12257 g$0$12258 g$0$12259) ((lambda (g$0$12261) ((lambda (g$0$12263) (if (if g$0$12263 (begin (quote #f) (apply (lambda (g$0$12274) (g$0$11041 g$0$12274)) g$0$12263)) (quote #f)) (apply (lambda (g$0$12265) ((lambda (g$0$12267) ((lambda (g$0$12269) ((lambda (g$0$12271) ((lambda () (begin (if g$0$12267 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (g$0$11059 g$0$12257 (quote ())))) ((lambda (g$0$12272) (if (memv g$0$12272 (quote ($rtd))) (list (quote quote) (g$0$11071 g$0$12269)) (error (quote expander) (quote "~a ~s") (quote "invalid type") (g$0$11059 g$0$12257 (quote ()))))) g$0$12271))))) (g$0$11069 g$0$12269))) (g$0$11065 g$0$12267 g$0$12258))) (g$0$11063 g$0$12265))) g$0$12263) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12261 (quote ()))))) ((lambda (g$0$12276) (if (g$0$11027 g$0$12276) (begin (quote #f) ((lambda (g$0$12278) (if g$0$12278 (begin (quote #f) ((lambda (g$0$12280) (if g$0$12280 (begin (quote #f) (append g$0$12278 g$0$12280)) (quote #f))) ((lambda (g$0$12282) (if (g$0$11027 g$0$12282) (begin (quote #f) ((lambda (g$0$12284) (if g$0$12284 (begin (quote #f) ((lambda (g$0$12286) (if g$0$12286 (begin (quote #f) (append g$0$12284 g$0$12286)) (quote #f))) ((lambda (g$0$12288) (if (equal? (g$0$11061 g$0$12288) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12282)))) (quote #f))) ((lambda (g$0$12290) (list g$0$12290)) (g$0$11035 g$0$12282)))) (quote #f))) (g$0$11039 g$0$12276)))) (quote #f))) ((lambda (g$0$12292) (quote ())) (g$0$11035 g$0$12276)))) (quote #f))) g$0$12261))) g$0$12257))) (set! g$0$11310 (lambda (g$0$12296 g$0$12297 g$0$12298) ((lambda (g$0$12300) ((lambda (g$0$12302) (if (if g$0$12302 (begin (quote #f) (apply (lambda (g$0$12312 g$0$12313 g$0$12314) (quote #t)) g$0$12302)) (quote #f)) (apply (lambda (g$0$12306 g$0$12307 g$0$12308) (list (quote if) (g$0$11396 g$0$12306 g$0$12297 g$0$12298) (g$0$10923 (quote #f) (g$0$11392 (cons g$0$12307 g$0$12308) g$0$12297 g$0$12298)) (g$0$10922))) g$0$12302) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12300 (quote ()))))) ((lambda (g$0$12316) (if (g$0$11027 g$0$12316) (begin (quote #f) ((lambda (g$0$12318) (if g$0$12318 (begin (quote #f) ((lambda (g$0$12320) (if g$0$12320 (begin (quote #f) (append g$0$12318 g$0$12320)) (quote #f))) ((lambda (g$0$12322) (if (g$0$11027 g$0$12322) (begin (quote #f) ((lambda (g$0$12324) (if g$0$12324 (begin (quote #f) ((lambda (g$0$12326) (if g$0$12326 (begin (quote #f) (append g$0$12324 g$0$12326)) (quote #f))) ((lambda (g$0$12328) (if (g$0$11027 g$0$12328) (begin (quote #f) ((lambda (g$0$12330) (if g$0$12330 (begin (quote #f) ((lambda (g$0$12332) (if g$0$12332 (begin (quote #f) (append g$0$12330 g$0$12332)) (quote #f))) ((letrec ((g$0$12334 (lambda (g$0$12336) (if (g$0$11027 g$0$12336) ((lambda (g$0$12338) (if g$0$12338 (begin (quote #f) ((lambda (g$0$12340) (if g$0$12340 (begin (quote #f) (map cons g$0$12338 g$0$12340)) (quote #f))) (g$0$12334 (g$0$11039 g$0$12336)))) (quote #f))) ((lambda (g$0$12342) (list g$0$12342)) (g$0$11035 g$0$12336))) (if (g$0$11031 g$0$12336) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12334) (g$0$11039 g$0$12328)))) (quote #f))) ((lambda (g$0$12344) (list g$0$12344)) (g$0$11035 g$0$12328)))) (quote #f))) (g$0$11039 g$0$12322)))) (quote #f))) ((lambda (g$0$12346) (list g$0$12346)) (g$0$11035 g$0$12322)))) (quote #f))) (g$0$11039 g$0$12316)))) (quote #f))) ((lambda (g$0$12348) (quote ())) (g$0$11035 g$0$12316)))) (quote #f))) g$0$12300))) g$0$12296))) (set! g$0$11312 (lambda (g$0$12352 g$0$12353 g$0$12354) ((lambda (g$0$12356) ((lambda (g$0$12358) (if (if g$0$12358 (begin (quote #f) (apply (lambda (g$0$12368 g$0$12369 g$0$12370) (quote #t)) g$0$12358)) (quote #f)) (apply (lambda (g$0$12362 g$0$12363 g$0$12364) (list (quote if) (g$0$11396 g$0$12362 g$0$12353 g$0$12354) (g$0$10922) (g$0$10923 (quote #f) (g$0$11392 (cons g$0$12363 g$0$12364) g$0$12353 g$0$12354)))) g$0$12358) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12356 (quote ()))))) ((lambda (g$0$12372) (if (g$0$11027 g$0$12372) (begin (quote #f) ((lambda (g$0$12374) (if g$0$12374 (begin (quote #f) ((lambda (g$0$12376) (if g$0$12376 (begin (quote #f) (append g$0$12374 g$0$12376)) (quote #f))) ((lambda (g$0$12378) (if (g$0$11027 g$0$12378) (begin (quote #f) ((lambda (g$0$12380) (if g$0$12380 (begin (quote #f) ((lambda (g$0$12382) (if g$0$12382 (begin (quote #f) (append g$0$12380 g$0$12382)) (quote #f))) ((lambda (g$0$12384) (if (g$0$11027 g$0$12384) (begin (quote #f) ((lambda (g$0$12386) (if g$0$12386 (begin (quote #f) ((lambda (g$0$12388) (if g$0$12388 (begin (quote #f) (append g$0$12386 g$0$12388)) (quote #f))) ((letrec ((g$0$12390 (lambda (g$0$12392) (if (g$0$11027 g$0$12392) ((lambda (g$0$12394) (if g$0$12394 (begin (quote #f) ((lambda (g$0$12396) (if g$0$12396 (begin (quote #f) (map cons g$0$12394 g$0$12396)) (quote #f))) (g$0$12390 (g$0$11039 g$0$12392)))) (quote #f))) ((lambda (g$0$12398) (list g$0$12398)) (g$0$11035 g$0$12392))) (if (g$0$11031 g$0$12392) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12390) (g$0$11039 g$0$12384)))) (quote #f))) ((lambda (g$0$12400) (list g$0$12400)) (g$0$11035 g$0$12384)))) (quote #f))) (g$0$11039 g$0$12378)))) (quote #f))) ((lambda (g$0$12402) (list g$0$12402)) (g$0$11035 g$0$12378)))) (quote #f))) (g$0$11039 g$0$12372)))) (quote #f))) ((lambda (g$0$12404) (quote ())) (g$0$11035 g$0$12372)))) (quote #f))) g$0$12356))) g$0$12352))) (set! g$0$11314 (lambda (g$0$12408 g$0$12409 g$0$12410) ((lambda (g$0$12412) ((lambda (g$0$12414) (if (if g$0$12414 (begin (quote #f) (apply (lambda (g$0$12462 g$0$12463 g$0$12464) (quote #t)) g$0$12414)) (quote #f)) (apply (lambda (g$0$12456 g$0$12457 g$0$12458) (list (quote if) (g$0$11396 g$0$12456 g$0$12409 g$0$12410) (g$0$11396 g$0$12457 g$0$12409 g$0$12410) (g$0$11396 g$0$12458 g$0$12409 g$0$12410))) g$0$12414) ((lambda (g$0$12416) ((lambda (g$0$12418) (if (if g$0$12418 (begin (quote #f) (apply (lambda (g$0$12425 g$0$12426) (quote #t)) g$0$12418)) (quote #f)) (apply (lambda (g$0$12421 g$0$12422) (list (quote if) (g$0$11396 g$0$12421 g$0$12409 g$0$12410) (g$0$11396 g$0$12422 g$0$12409 g$0$12410) (g$0$10922))) g$0$12418) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12416 (quote ()))))) ((lambda (g$0$12428) (if (g$0$11027 g$0$12428) (begin (quote #f) ((lambda (g$0$12430) (if g$0$12430 (begin (quote #f) ((lambda (g$0$12432) (if g$0$12432 (begin (quote #f) (append g$0$12430 g$0$12432)) (quote #f))) ((lambda (g$0$12434) (if (g$0$11027 g$0$12434) (begin (quote #f) ((lambda (g$0$12436) (if g$0$12436 (begin (quote #f) ((lambda (g$0$12438) (if g$0$12438 (begin (quote #f) (append g$0$12436 g$0$12438)) (quote #f))) ((lambda (g$0$12440) (if (g$0$11027 g$0$12440) (begin (quote #f) ((lambda (g$0$12442) (if g$0$12442 (begin (quote #f) ((lambda (g$0$12444) (if g$0$12444 (begin (quote #f) (append g$0$12442 g$0$12444)) (quote #f))) ((lambda (g$0$12446) (if (equal? (g$0$11061 g$0$12446) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12440)))) (quote #f))) ((lambda (g$0$12448) (list g$0$12448)) (g$0$11035 g$0$12440)))) (quote #f))) (g$0$11039 g$0$12434)))) (quote #f))) ((lambda (g$0$12450) (list g$0$12450)) (g$0$11035 g$0$12434)))) (quote #f))) (g$0$11039 g$0$12428)))) (quote #f))) ((lambda (g$0$12452) (quote ())) (g$0$11035 g$0$12428)))) (quote #f))) g$0$12416))) g$0$12412))) ((lambda (g$0$12466) (if (g$0$11027 g$0$12466) (begin (quote #f) ((lambda (g$0$12468) (if g$0$12468 (begin (quote #f) ((lambda (g$0$12470) (if g$0$12470 (begin (quote #f) (append g$0$12468 g$0$12470)) (quote #f))) ((lambda (g$0$12472) (if (g$0$11027 g$0$12472) (begin (quote #f) ((lambda (g$0$12474) (if g$0$12474 (begin (quote #f) ((lambda (g$0$12476) (if g$0$12476 (begin (quote #f) (append g$0$12474 g$0$12476)) (quote #f))) ((lambda (g$0$12478) (if (g$0$11027 g$0$12478) (begin (quote #f) ((lambda (g$0$12480) (if g$0$12480 (begin (quote #f) ((lambda (g$0$12482) (if g$0$12482 (begin (quote #f) (append g$0$12480 g$0$12482)) (quote #f))) ((lambda (g$0$12484) (if (g$0$11027 g$0$12484) (begin (quote #f) ((lambda (g$0$12486) (if g$0$12486 (begin (quote #f) ((lambda (g$0$12488) (if g$0$12488 (begin (quote #f) (append g$0$12486 g$0$12488)) (quote #f))) ((lambda (g$0$12490) (if (equal? (g$0$11061 g$0$12490) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12484)))) (quote #f))) ((lambda (g$0$12492) (list g$0$12492)) (g$0$11035 g$0$12484)))) (quote #f))) (g$0$11039 g$0$12478)))) (quote #f))) ((lambda (g$0$12494) (list g$0$12494)) (g$0$11035 g$0$12478)))) (quote #f))) (g$0$11039 g$0$12472)))) (quote #f))) ((lambda (g$0$12496) (list g$0$12496)) (g$0$11035 g$0$12472)))) (quote #f))) (g$0$11039 g$0$12466)))) (quote #f))) ((lambda (g$0$12498) (quote ())) (g$0$11035 g$0$12466)))) (quote #f))) g$0$12412))) g$0$12408))) (set! g$0$11316 (lambda (g$0$12502 g$0$12503 g$0$12504) ((lambda (g$0$12506 g$0$12508) (begin (set! g$0$12506 (lambda (g$0$12702 g$0$12703 g$0$12704) ((lambda (g$0$12706) ((lambda (g$0$12708) (if (if g$0$12708 (begin (quote #f) (apply (lambda (g$0$12728 g$0$12729 g$0$12730) (quote #t)) g$0$12708)) (quote #f)) (apply (lambda (g$0$12722 g$0$12723 g$0$12724) (list (quote if) (list (quote (primitive memv)) g$0$12702 (list (quote quote) (g$0$11061 g$0$12722))) (g$0$10923 (quote #f) (g$0$11392 (cons g$0$12723 g$0$12724) g$0$12503 g$0$12504)) g$0$12704)) g$0$12708) ((lambda (g$0$12710) ((lambda (g$0$12712) (if (if g$0$12712 (begin (quote #f) (apply (lambda (g$0$12716) (quote #t)) g$0$12712)) (quote #f)) (apply (lambda (g$0$12714) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$12502))) g$0$12712) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12710 (quote ()))))) ((lambda (g$0$12718) (list g$0$12718)) g$0$12710))) g$0$12706))) ((lambda (g$0$12732) (if (g$0$11027 g$0$12732) (begin (quote #f) ((lambda (g$0$12734) (if g$0$12734 (begin (quote #f) ((lambda (g$0$12736) (if g$0$12736 (begin (quote #f) (append g$0$12734 g$0$12736)) (quote #f))) ((lambda (g$0$12738) (if (g$0$11027 g$0$12738) (begin (quote #f) ((lambda (g$0$12740) (if g$0$12740 (begin (quote #f) ((lambda (g$0$12742) (if g$0$12742 (begin (quote #f) (append g$0$12740 g$0$12742)) (quote #f))) ((letrec ((g$0$12744 (lambda (g$0$12746) (if (g$0$11027 g$0$12746) ((lambda (g$0$12748) (if g$0$12748 (begin (quote #f) ((lambda (g$0$12750) (if g$0$12750 (begin (quote #f) (map cons g$0$12748 g$0$12750)) (quote #f))) (g$0$12744 (g$0$11039 g$0$12746)))) (quote #f))) ((lambda (g$0$12752) (list g$0$12752)) (g$0$11035 g$0$12746))) (if (g$0$11031 g$0$12746) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12744) (g$0$11039 g$0$12738)))) (quote #f))) ((lambda (g$0$12754) (list g$0$12754)) (g$0$11035 g$0$12738)))) (quote #f))) (g$0$11039 g$0$12732)))) (quote #f))) ((letrec ((g$0$12756 (lambda (g$0$12758) (if (g$0$11027 g$0$12758) ((lambda (g$0$12760) (if g$0$12760 (begin (quote #f) ((lambda (g$0$12762) (if g$0$12762 (begin (quote #f) (map cons g$0$12760 g$0$12762)) (quote #f))) (g$0$12756 (g$0$11039 g$0$12758)))) (quote #f))) ((lambda (g$0$12764) (list g$0$12764)) (g$0$11035 g$0$12758))) (if (g$0$11031 g$0$12758) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$12756) (g$0$11035 g$0$12732)))) (quote #f))) g$0$12706))) g$0$12703))) (set! g$0$12508 (lambda (g$0$12595 g$0$12596) ((lambda (g$0$12598) ((lambda (g$0$12600) (if (if g$0$12600 (begin (quote #f) (apply (lambda (g$0$12662 g$0$12663 g$0$12664) (quote #t)) g$0$12600)) (quote #f)) (apply (lambda (g$0$12656 g$0$12657 g$0$12658) (g$0$12506 g$0$12595 g$0$12596 (g$0$10922))) g$0$12600) ((lambda (g$0$12602) ((lambda (g$0$12604) (if (if g$0$12604 (begin (quote #f) (apply (lambda (g$0$12624 g$0$12625 g$0$12626) (quote #t)) g$0$12604)) (quote #f)) (apply (lambda (g$0$12618 g$0$12619 g$0$12620) (if (if (g$0$11041 g$0$12618) (begin (quote #f) (g$0$11049 g$0$12618 (g$0$11294 (quote else)))) (quote #f)) (g$0$10923 (quote #f) (g$0$11392 (cons g$0$12619 g$0$12620) g$0$12503 g$0$12504)) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$12502)))) g$0$12604) ((lambda (g$0$12606) ((lambda (g$0$12608) (if (if g$0$12608 (begin (quote #f) (apply (lambda (g$0$12612) (quote #t)) g$0$12608)) (quote #f)) (apply (lambda (g$0$12610) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$12502))) g$0$12608) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12606 (quote ()))))) ((lambda (g$0$12614) (list g$0$12614)) g$0$12606))) g$0$12602))) ((lambda (g$0$12628) (if (g$0$11027 g$0$12628) (begin (quote #f) ((lambda (g$0$12630) (if g$0$12630 (begin (quote #f) ((lambda (g$0$12632) (if g$0$12632 (begin (quote #f) (append g$0$12630 g$0$12632)) (quote #f))) ((lambda (g$0$12634) (if (g$0$11027 g$0$12634) (begin (quote #f) ((lambda (g$0$12636) (if g$0$12636 (begin (quote #f) ((lambda (g$0$12638) (if g$0$12638 (begin (quote #f) (append g$0$12636 g$0$12638)) (quote #f))) ((letrec ((g$0$12640 (lambda (g$0$12642) (if (g$0$11027 g$0$12642) ((lambda (g$0$12644) (if g$0$12644 (begin (quote #f) ((lambda (g$0$12646) (if g$0$12646 (begin (quote #f) (map cons g$0$12644 g$0$12646)) (quote #f))) (g$0$12640 (g$0$11039 g$0$12642)))) (quote #f))) ((lambda (g$0$12648) (list g$0$12648)) (g$0$11035 g$0$12642))) (if (g$0$11031 g$0$12642) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$12640) (g$0$11039 g$0$12634)))) (quote #f))) ((lambda (g$0$12650) (list g$0$12650)) (g$0$11035 g$0$12634)))) (quote #f))) (g$0$11039 g$0$12628)))) (quote #f))) ((lambda (g$0$12652) (list g$0$12652)) (g$0$11035 g$0$12628)))) (quote #f))) g$0$12602))) g$0$12598))) ((lambda (g$0$12666) (if (g$0$11027 g$0$12666) (begin (quote #f) ((lambda (g$0$12668) (if g$0$12668 (begin (quote #f) ((lambda (g$0$12670) (if g$0$12670 (begin (quote #f) (append g$0$12668 g$0$12670)) (quote #f))) ((lambda (g$0$12672) (if (g$0$11027 g$0$12672) (begin (quote #f) ((lambda (g$0$12674) (if g$0$12674 (begin (quote #f) ((lambda (g$0$12676) (if g$0$12676 (begin (quote #f) (append g$0$12674 g$0$12676)) (quote #f))) ((letrec ((g$0$12678 (lambda (g$0$12680) (if (g$0$11027 g$0$12680) ((lambda (g$0$12682) (if g$0$12682 (begin (quote #f) ((lambda (g$0$12684) (if g$0$12684 (begin (quote #f) (map cons g$0$12682 g$0$12684)) (quote #f))) (g$0$12678 (g$0$11039 g$0$12680)))) (quote #f))) ((lambda (g$0$12686) (list g$0$12686)) (g$0$11035 g$0$12680))) (if (g$0$11031 g$0$12680) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12678) (g$0$11039 g$0$12672)))) (quote #f))) ((lambda (g$0$12688) (list g$0$12688)) (g$0$11035 g$0$12672)))) (quote #f))) (g$0$11039 g$0$12666)))) (quote #f))) ((letrec ((g$0$12690 (lambda (g$0$12692) (if (g$0$11027 g$0$12692) ((lambda (g$0$12694) (if g$0$12694 (begin (quote #f) ((lambda (g$0$12696) (if g$0$12696 (begin (quote #f) (map cons g$0$12694 g$0$12696)) (quote #f))) (g$0$12690 (g$0$11039 g$0$12692)))) (quote #f))) ((lambda (g$0$12698) (list g$0$12698)) (g$0$11035 g$0$12692))) (if (g$0$11031 g$0$12692) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$12690) (g$0$11035 g$0$12666)))) (quote #f))) g$0$12598))) g$0$12596))) ((lambda (g$0$12510) ((lambda (g$0$12512) (if (if g$0$12512 (begin (quote #f) (apply (lambda (g$0$12574) (quote #t)) g$0$12512)) (quote #f)) (apply (lambda (g$0$12572) (g$0$10923 (quote #f) (list (g$0$11396 g$0$12572 g$0$12503 g$0$12504) (g$0$10922)))) g$0$12512) ((lambda (g$0$12514) ((lambda (g$0$12516) (if (if g$0$12516 (begin (quote #f) (apply (lambda (g$0$12534 g$0$12535 g$0$12536) (quote #t)) g$0$12516)) (quote #f)) (apply (lambda (g$0$12520 g$0$12521 g$0$12522) ((lambda (g$0$12524) (g$0$10927 (quote #f) (list g$0$12524) (list (g$0$11396 g$0$12520 g$0$12503 g$0$12504)) (letrec ((g$0$12526 (lambda (g$0$12529 g$0$12530) (if (null? g$0$12530) (g$0$12508 g$0$12524 g$0$12529) (g$0$12506 g$0$12524 g$0$12529 (g$0$12526 (car g$0$12530) (cdr g$0$12530))))))) (g$0$12526 g$0$12521 g$0$12522)))) (g$0$10951 (quote t)))) g$0$12516) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12514 (quote ()))))) ((lambda (g$0$12538) (if (g$0$11027 g$0$12538) (begin (quote #f) ((lambda (g$0$12540) (if g$0$12540 (begin (quote #f) ((lambda (g$0$12542) (if g$0$12542 (begin (quote #f) (append g$0$12540 g$0$12542)) (quote #f))) ((lambda (g$0$12544) (if (g$0$11027 g$0$12544) (begin (quote #f) ((lambda (g$0$12546) (if g$0$12546 (begin (quote #f) ((lambda (g$0$12548) (if g$0$12548 (begin (quote #f) (append g$0$12546 g$0$12548)) (quote #f))) ((lambda (g$0$12550) (if (g$0$11027 g$0$12550) (begin (quote #f) ((lambda (g$0$12552) (if g$0$12552 (begin (quote #f) ((lambda (g$0$12554) (if g$0$12554 (begin (quote #f) (append g$0$12552 g$0$12554)) (quote #f))) ((letrec ((g$0$12556 (lambda (g$0$12558) (if (g$0$11027 g$0$12558) ((lambda (g$0$12560) (if g$0$12560 (begin (quote #f) ((lambda (g$0$12562) (if g$0$12562 (begin (quote #f) (map cons g$0$12560 g$0$12562)) (quote #f))) (g$0$12556 (g$0$11039 g$0$12558)))) (quote #f))) ((lambda (g$0$12564) (list g$0$12564)) (g$0$11035 g$0$12558))) (if (g$0$11031 g$0$12558) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$12556) (g$0$11039 g$0$12550)))) (quote #f))) ((lambda (g$0$12566) (list g$0$12566)) (g$0$11035 g$0$12550)))) (quote #f))) (g$0$11039 g$0$12544)))) (quote #f))) ((lambda (g$0$12568) (list g$0$12568)) (g$0$11035 g$0$12544)))) (quote #f))) (g$0$11039 g$0$12538)))) (quote #f))) ((lambda (g$0$12570) (quote ())) (g$0$11035 g$0$12538)))) (quote #f))) g$0$12514))) g$0$12510))) ((lambda (g$0$12576) (if (g$0$11027 g$0$12576) (begin (quote #f) ((lambda (g$0$12578) (if g$0$12578 (begin (quote #f) ((lambda (g$0$12580) (if g$0$12580 (begin (quote #f) (append g$0$12578 g$0$12580)) (quote #f))) ((lambda (g$0$12582) (if (g$0$11027 g$0$12582) (begin (quote #f) ((lambda (g$0$12584) (if g$0$12584 (begin (quote #f) ((lambda (g$0$12586) (if g$0$12586 (begin (quote #f) (append g$0$12584 g$0$12586)) (quote #f))) ((lambda (g$0$12588) (if (equal? (g$0$11061 g$0$12588) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12582)))) (quote #f))) ((lambda (g$0$12590) (list g$0$12590)) (g$0$11035 g$0$12582)))) (quote #f))) (g$0$11039 g$0$12576)))) (quote #f))) ((lambda (g$0$12592) (quote ())) (g$0$11035 g$0$12576)))) (quote #f))) g$0$12510))) g$0$12502))) (quote #f) (quote #f)))) (set! g$0$11318 (lambda (g$0$12768 g$0$12769 g$0$12770) ((lambda (g$0$12772) ((lambda (g$0$12774) (if (if g$0$12774 (begin (quote #f) (apply (lambda (g$0$12778) (quote #t)) g$0$12774)) (quote #f)) (apply (lambda (g$0$12776) (list (quote quote) (g$0$11061 g$0$12776))) g$0$12774) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12772 (quote ()))))) ((lambda (g$0$12780) (if (g$0$11027 g$0$12780) (begin (quote #f) ((lambda (g$0$12782) (if g$0$12782 (begin (quote #f) ((lambda (g$0$12784) (if g$0$12784 (begin (quote #f) (append g$0$12782 g$0$12784)) (quote #f))) ((lambda (g$0$12786) (if (g$0$11027 g$0$12786) (begin (quote #f) ((lambda (g$0$12788) (if g$0$12788 (begin (quote #f) ((lambda (g$0$12790) (if g$0$12790 (begin (quote #f) (append g$0$12788 g$0$12790)) (quote #f))) ((lambda (g$0$12792) (if (equal? (g$0$11061 g$0$12792) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12786)))) (quote #f))) ((lambda (g$0$12794) (list g$0$12794)) (g$0$11035 g$0$12786)))) (quote #f))) (g$0$11039 g$0$12780)))) (quote #f))) ((lambda (g$0$12796) (quote ())) (g$0$11035 g$0$12780)))) (quote #f))) g$0$12772))) g$0$12768))) (set! g$0$11320 (lambda (g$0$12800 g$0$12801 g$0$12802) ((lambda (g$0$12804) ((lambda (g$0$12806) (if (if g$0$12806 (begin (quote #f) (apply (lambda (g$0$12820 g$0$12821 g$0$12822) (quote #t)) g$0$12806)) (quote #f)) (apply (lambda (g$0$12810 g$0$12811 g$0$12812) (call-with-values (lambda () (g$0$11402 g$0$12810 (map cons g$0$12811 g$0$12812) g$0$12801 g$0$12802)) (lambda (g$0$12815 g$0$12816) (g$0$10928 (quote #f) g$0$12815 g$0$12816)))) g$0$12806) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12804 (quote ()))))) ((lambda (g$0$12824) (if (g$0$11027 g$0$12824) (begin (quote #f) ((lambda (g$0$12826) (if g$0$12826 (begin (quote #f) ((lambda (g$0$12828) (if g$0$12828 (begin (quote #f) (append g$0$12826 g$0$12828)) (quote #f))) ((letrec ((g$0$12830 (lambda (g$0$12832) (if (g$0$11027 g$0$12832) ((lambda (g$0$12834) (if g$0$12834 (begin (quote #f) ((lambda (g$0$12836) (if g$0$12836 (begin (quote #f) (map cons g$0$12834 g$0$12836)) (quote #f))) (g$0$12830 (g$0$11039 g$0$12832)))) (quote #f))) ((lambda (g$0$12838) (if (g$0$11027 g$0$12838) (begin (quote #f) ((lambda (g$0$12840) (if g$0$12840 (begin (quote #f) ((lambda (g$0$12842) (if g$0$12842 (begin (quote #f) (append g$0$12840 g$0$12842)) (quote #f))) ((lambda (g$0$12844) (if (g$0$11027 g$0$12844) (begin (quote #f) ((lambda (g$0$12846) (if g$0$12846 (begin (quote #f) ((lambda (g$0$12848) (if g$0$12848 (begin (quote #f) (append g$0$12846 g$0$12848)) (quote #f))) ((letrec ((g$0$12850 (lambda (g$0$12852) (if (g$0$11027 g$0$12852) ((lambda (g$0$12854) (if g$0$12854 (begin (quote #f) ((lambda (g$0$12856) (if g$0$12856 (begin (quote #f) (map cons g$0$12854 g$0$12856)) (quote #f))) (g$0$12850 (g$0$11039 g$0$12852)))) (quote #f))) ((lambda (g$0$12858) (list g$0$12858)) (g$0$11035 g$0$12852))) (if (g$0$11031 g$0$12852) (list (begin (quote b**) (quote ()))) (quote #f)))))) g$0$12850) (g$0$11039 g$0$12844)))) (quote #f))) ((lambda (g$0$12860) (list g$0$12860)) (g$0$11035 g$0$12844)))) (quote #f))) (g$0$11039 g$0$12838)))) (quote #f))) ((lambda (g$0$12862) (list g$0$12862)) (g$0$11035 g$0$12838)))) (quote #f))) (g$0$11035 g$0$12832))) (if (g$0$11031 g$0$12832) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) g$0$12830) (g$0$11039 g$0$12824)))) (quote #f))) ((lambda (g$0$12864) (quote ())) (g$0$11035 g$0$12824)))) (quote #f))) g$0$12804))) g$0$12800))) (set! g$0$11322 (lambda (g$0$12868 g$0$12869 g$0$12870) ((lambda (g$0$12872) ((lambda (g$0$12874) (if (if g$0$12874 (begin (quote #f) (apply (lambda (g$0$12888 g$0$12889 g$0$12890) (quote #t)) g$0$12874)) (quote #f)) (apply (lambda (g$0$12878 g$0$12879 g$0$12880) (call-with-values (lambda () (g$0$11400 g$0$12878 (cons g$0$12879 g$0$12880) g$0$12869 g$0$12870)) (lambda (g$0$12883 g$0$12884) (g$0$10929 (quote #f) g$0$12883 g$0$12884)))) g$0$12874) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12872 (quote ()))))) ((lambda (g$0$12892) (if (g$0$11027 g$0$12892) (begin (quote #f) ((lambda (g$0$12894) (if g$0$12894 (begin (quote #f) ((lambda (g$0$12896) (if g$0$12896 (begin (quote #f) (append g$0$12894 g$0$12896)) (quote #f))) ((lambda (g$0$12898) (if (g$0$11027 g$0$12898) (begin (quote #f) ((lambda (g$0$12900) (if g$0$12900 (begin (quote #f) ((lambda (g$0$12902) (if g$0$12902 (begin (quote #f) (append g$0$12900 g$0$12902)) (quote #f))) ((lambda (g$0$12904) (if (g$0$11027 g$0$12904) (begin (quote #f) ((lambda (g$0$12906) (if g$0$12906 (begin (quote #f) ((lambda (g$0$12908) (if g$0$12908 (begin (quote #f) (append g$0$12906 g$0$12908)) (quote #f))) ((letrec ((g$0$12910 (lambda (g$0$12912) (if (g$0$11027 g$0$12912) ((lambda (g$0$12914) (if g$0$12914 (begin (quote #f) ((lambda (g$0$12916) (if g$0$12916 (begin (quote #f) (map cons g$0$12914 g$0$12916)) (quote #f))) (g$0$12910 (g$0$11039 g$0$12912)))) (quote #f))) ((lambda (g$0$12918) (list g$0$12918)) (g$0$11035 g$0$12912))) (if (g$0$11031 g$0$12912) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12910) (g$0$11039 g$0$12904)))) (quote #f))) ((lambda (g$0$12920) (list g$0$12920)) (g$0$11035 g$0$12904)))) (quote #f))) (g$0$11039 g$0$12898)))) (quote #f))) ((lambda (g$0$12922) (list g$0$12922)) (g$0$11035 g$0$12898)))) (quote #f))) (g$0$11039 g$0$12892)))) (quote #f))) ((lambda (g$0$12924) (quote ())) (g$0$11035 g$0$12892)))) (quote #f))) g$0$12872))) g$0$12868))) (set! g$0$11324 (lambda (g$0$12926) (g$0$11017 (letrec ((g$0$12928 (lambda (g$0$12930) (if (g$0$10993 g$0$12930) g$0$12930 (if (pair? g$0$12930) (cons (g$0$12928 (car g$0$12930)) (g$0$12928 (cdr g$0$12930))) (if (symbol? g$0$12930) (g$0$11294 g$0$12930) (if (vector? g$0$12930) (list->vector (map g$0$12928 (vector->list g$0$12930))) g$0$12930))))))) (g$0$12928 g$0$12926)) (quote ()) (quote ())))) (set! g$0$11326 (lambda (g$0$12932) ((lambda (g$0$12934) ((lambda (g$0$12936) (if (if g$0$12936 (begin (quote #f) (apply (lambda (g$0$12949 g$0$12950 g$0$12951 g$0$12952) (quote #t)) g$0$12936)) (quote #f)) (apply (lambda (g$0$12941 g$0$12942 g$0$12943 g$0$12944) (g$0$11324 (list (quote syntax-case) (cons (quote list) g$0$12942) (quote ()) (list g$0$12941 (cons (quote begin) (cons g$0$12943 g$0$12944)))))) g$0$12936) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$12934 (quote ()))))) ((lambda (g$0$12954) (if (g$0$11027 g$0$12954) (begin (quote #f) ((lambda (g$0$12956) (if g$0$12956 (begin (quote #f) ((lambda (g$0$12958) (if g$0$12958 (begin (quote #f) (append g$0$12956 g$0$12958)) (quote #f))) ((lambda (g$0$12960) (if (g$0$11027 g$0$12960) (begin (quote #f) ((lambda (g$0$12962) (if g$0$12962 (begin (quote #f) ((lambda (g$0$12964) (if g$0$12964 (begin (quote #f) (append g$0$12962 g$0$12964)) (quote #f))) ((lambda (g$0$12966) (if (g$0$11027 g$0$12966) (begin (quote #f) ((lambda (g$0$12968) (if g$0$12968 (begin (quote #f) ((lambda (g$0$12970) (if g$0$12970 (begin (quote #f) (append g$0$12968 g$0$12970)) (quote #f))) ((letrec ((g$0$12972 (lambda (g$0$12974) (if (g$0$11027 g$0$12974) ((lambda (g$0$12976) (if g$0$12976 (begin (quote #f) ((lambda (g$0$12978) (if g$0$12978 (begin (quote #f) (map cons g$0$12976 g$0$12978)) (quote #f))) (g$0$12972 (g$0$11039 g$0$12974)))) (quote #f))) ((lambda (g$0$12980) (list g$0$12980)) (g$0$11035 g$0$12974))) (if (g$0$11031 g$0$12974) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12972) (g$0$11039 g$0$12966)))) (quote #f))) ((lambda (g$0$12982) (list g$0$12982)) (g$0$11035 g$0$12966)))) (quote #f))) (g$0$11039 g$0$12960)))) (quote #f))) ((letrec ((g$0$12984 (lambda (g$0$12986) (if (g$0$11027 g$0$12986) ((lambda (g$0$12988) (if g$0$12988 (begin (quote #f) ((lambda (g$0$12990) (if g$0$12990 (begin (quote #f) (map cons g$0$12988 g$0$12990)) (quote #f))) (g$0$12984 (g$0$11039 g$0$12986)))) (quote #f))) ((lambda (g$0$12992) (if (g$0$11027 g$0$12992) (begin (quote #f) ((lambda (g$0$12994) (if g$0$12994 (begin (quote #f) ((lambda (g$0$12996) (if g$0$12996 (begin (quote #f) (append g$0$12994 g$0$12996)) (quote #f))) ((lambda (g$0$12998) (if (g$0$11027 g$0$12998) (begin (quote #f) ((lambda (g$0$13000) (if g$0$13000 (begin (quote #f) ((lambda (g$0$13002) (if g$0$13002 (begin (quote #f) (append g$0$13000 g$0$13002)) (quote #f))) ((lambda (g$0$13004) (if (equal? (g$0$11061 g$0$13004) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$12998)))) (quote #f))) ((lambda (g$0$13006) (list g$0$13006)) (g$0$11035 g$0$12998)))) (quote #f))) (g$0$11039 g$0$12992)))) (quote #f))) ((lambda (g$0$13008) (list g$0$13008)) (g$0$11035 g$0$12992)))) (quote #f))) (g$0$11035 g$0$12986))) (if (g$0$11031 g$0$12986) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$12984) (g$0$11035 g$0$12960)))) (quote #f))) (g$0$11039 g$0$12954)))) (quote #f))) ((lambda (g$0$13010) (quote ())) (g$0$11035 g$0$12954)))) (quote #f))) g$0$12934))) g$0$12932))) (set! g$0$11328 (lambda (g$0$13012) ((lambda (g$0$13014) ((lambda (g$0$13016) (if (if g$0$13016 (begin (quote #f) (apply (lambda (g$0$13119 g$0$13120 g$0$13121 g$0$13122) (quote #t)) g$0$13016)) (quote #f)) (apply (lambda (g$0$13111 g$0$13112 g$0$13113 g$0$13114) (if (g$0$11051 g$0$13111) (g$0$11324 (cons (cons (quote lambda) (cons g$0$13111 (cons g$0$13113 g$0$13114))) g$0$13112)) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (g$0$11059 g$0$13012 (quote ()))))) g$0$13016) ((lambda (g$0$13018) ((lambda (g$0$13020) (if (if g$0$13020 (begin (quote #f) (apply (lambda (g$0$13036 g$0$13037 g$0$13038 g$0$13039 g$0$13040) (g$0$11041 g$0$13036)) g$0$13020)) (quote #f)) (apply (lambda (g$0$13026 g$0$13027 g$0$13028 g$0$13029 g$0$13030) (if (g$0$11051 g$0$13027) (g$0$11324 (list (quote letrec) (list (list g$0$13026 (cons (quote lambda) (cons g$0$13027 (cons g$0$13029 g$0$13030))))) (cons g$0$13026 g$0$13028))) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13012 (quote ()))))) g$0$13020) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13018 (quote ()))))) ((lambda (g$0$13042) (if (g$0$11027 g$0$13042) (begin (quote #f) ((lambda (g$0$13044) (if g$0$13044 (begin (quote #f) ((lambda (g$0$13046) (if g$0$13046 (begin (quote #f) (append g$0$13044 g$0$13046)) (quote #f))) ((lambda (g$0$13048) (if (g$0$11027 g$0$13048) (begin (quote #f) ((lambda (g$0$13050) (if g$0$13050 (begin (quote #f) ((lambda (g$0$13052) (if g$0$13052 (begin (quote #f) (append g$0$13050 g$0$13052)) (quote #f))) ((lambda (g$0$13054) (if (g$0$11027 g$0$13054) (begin (quote #f) ((lambda (g$0$13056) (if g$0$13056 (begin (quote #f) ((lambda (g$0$13058) (if g$0$13058 (begin (quote #f) (append g$0$13056 g$0$13058)) (quote #f))) ((lambda (g$0$13060) (if (g$0$11027 g$0$13060) (begin (quote #f) ((lambda (g$0$13062) (if g$0$13062 (begin (quote #f) ((lambda (g$0$13064) (if g$0$13064 (begin (quote #f) (append g$0$13062 g$0$13064)) (quote #f))) ((letrec ((g$0$13066 (lambda (g$0$13068) (if (g$0$11027 g$0$13068) ((lambda (g$0$13070) (if g$0$13070 (begin (quote #f) ((lambda (g$0$13072) (if g$0$13072 (begin (quote #f) (map cons g$0$13070 g$0$13072)) (quote #f))) (g$0$13066 (g$0$11039 g$0$13068)))) (quote #f))) ((lambda (g$0$13074) (list g$0$13074)) (g$0$11035 g$0$13068))) (if (g$0$11031 g$0$13068) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13066) (g$0$11039 g$0$13060)))) (quote #f))) ((lambda (g$0$13076) (list g$0$13076)) (g$0$11035 g$0$13060)))) (quote #f))) (g$0$11039 g$0$13054)))) (quote #f))) ((letrec ((g$0$13078 (lambda (g$0$13080) (if (g$0$11027 g$0$13080) ((lambda (g$0$13082) (if g$0$13082 (begin (quote #f) ((lambda (g$0$13084) (if g$0$13084 (begin (quote #f) (map cons g$0$13082 g$0$13084)) (quote #f))) (g$0$13078 (g$0$11039 g$0$13080)))) (quote #f))) ((lambda (g$0$13086) (if (g$0$11027 g$0$13086) (begin (quote #f) ((lambda (g$0$13088) (if g$0$13088 (begin (quote #f) ((lambda (g$0$13090) (if g$0$13090 (begin (quote #f) (append g$0$13088 g$0$13090)) (quote #f))) ((lambda (g$0$13092) (if (g$0$11027 g$0$13092) (begin (quote #f) ((lambda (g$0$13094) (if g$0$13094 (begin (quote #f) ((lambda (g$0$13096) (if g$0$13096 (begin (quote #f) (append g$0$13094 g$0$13096)) (quote #f))) ((lambda (g$0$13098) (if (equal? (g$0$11061 g$0$13098) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13092)))) (quote #f))) ((lambda (g$0$13100) (list g$0$13100)) (g$0$11035 g$0$13092)))) (quote #f))) (g$0$11039 g$0$13086)))) (quote #f))) ((lambda (g$0$13102) (list g$0$13102)) (g$0$11035 g$0$13086)))) (quote #f))) (g$0$11035 g$0$13080))) (if (g$0$11031 g$0$13080) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$13078) (g$0$11035 g$0$13054)))) (quote #f))) (g$0$11039 g$0$13048)))) (quote #f))) ((lambda (g$0$13104) (list g$0$13104)) (g$0$11035 g$0$13048)))) (quote #f))) (g$0$11039 g$0$13042)))) (quote #f))) ((lambda (g$0$13106) (quote ())) (g$0$11035 g$0$13042)))) (quote #f))) g$0$13018))) g$0$13014))) ((lambda (g$0$13124) (if (g$0$11027 g$0$13124) (begin (quote #f) ((lambda (g$0$13126) (if g$0$13126 (begin (quote #f) ((lambda (g$0$13128) (if g$0$13128 (begin (quote #f) (append g$0$13126 g$0$13128)) (quote #f))) ((lambda (g$0$13130) (if (g$0$11027 g$0$13130) (begin (quote #f) ((lambda (g$0$13132) (if g$0$13132 (begin (quote #f) ((lambda (g$0$13134) (if g$0$13134 (begin (quote #f) (append g$0$13132 g$0$13134)) (quote #f))) ((lambda (g$0$13136) (if (g$0$11027 g$0$13136) (begin (quote #f) ((lambda (g$0$13138) (if g$0$13138 (begin (quote #f) ((lambda (g$0$13140) (if g$0$13140 (begin (quote #f) (append g$0$13138 g$0$13140)) (quote #f))) ((letrec ((g$0$13142 (lambda (g$0$13144) (if (g$0$11027 g$0$13144) ((lambda (g$0$13146) (if g$0$13146 (begin (quote #f) ((lambda (g$0$13148) (if g$0$13148 (begin (quote #f) (map cons g$0$13146 g$0$13148)) (quote #f))) (g$0$13142 (g$0$11039 g$0$13144)))) (quote #f))) ((lambda (g$0$13150) (list g$0$13150)) (g$0$11035 g$0$13144))) (if (g$0$11031 g$0$13144) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13142) (g$0$11039 g$0$13136)))) (quote #f))) ((lambda (g$0$13152) (list g$0$13152)) (g$0$11035 g$0$13136)))) (quote #f))) (g$0$11039 g$0$13130)))) (quote #f))) ((letrec ((g$0$13154 (lambda (g$0$13156) (if (g$0$11027 g$0$13156) ((lambda (g$0$13158) (if g$0$13158 (begin (quote #f) ((lambda (g$0$13160) (if g$0$13160 (begin (quote #f) (map cons g$0$13158 g$0$13160)) (quote #f))) (g$0$13154 (g$0$11039 g$0$13156)))) (quote #f))) ((lambda (g$0$13162) (if (g$0$11027 g$0$13162) (begin (quote #f) ((lambda (g$0$13164) (if g$0$13164 (begin (quote #f) ((lambda (g$0$13166) (if g$0$13166 (begin (quote #f) (append g$0$13164 g$0$13166)) (quote #f))) ((lambda (g$0$13168) (if (g$0$11027 g$0$13168) (begin (quote #f) ((lambda (g$0$13170) (if g$0$13170 (begin (quote #f) ((lambda (g$0$13172) (if g$0$13172 (begin (quote #f) (append g$0$13170 g$0$13172)) (quote #f))) ((lambda (g$0$13174) (if (equal? (g$0$11061 g$0$13174) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13168)))) (quote #f))) ((lambda (g$0$13176) (list g$0$13176)) (g$0$11035 g$0$13168)))) (quote #f))) (g$0$11039 g$0$13162)))) (quote #f))) ((lambda (g$0$13178) (list g$0$13178)) (g$0$11035 g$0$13162)))) (quote #f))) (g$0$11035 g$0$13156))) (if (g$0$11031 g$0$13156) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$13154) (g$0$11035 g$0$13130)))) (quote #f))) (g$0$11039 g$0$13124)))) (quote #f))) ((lambda (g$0$13180) (quote ())) (g$0$11035 g$0$13124)))) (quote #f))) g$0$13014))) g$0$13012))) (set! g$0$11330 (lambda (g$0$13182) ((lambda (g$0$13184) ((lambda (g$0$13186) (if (if g$0$13186 (begin (quote #f) (apply (lambda (g$0$13281 g$0$13282 g$0$13283 g$0$13284) (quote #t)) g$0$13186)) (quote #f)) (apply (lambda (g$0$13273 g$0$13274 g$0$13275 g$0$13276) (if (g$0$11051 g$0$13274) (g$0$11324 (list (quote make-traced-procedure) (list (quote quote) g$0$13273) (cons (quote lambda) (cons g$0$13274 (cons g$0$13275 g$0$13276))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11059 g$0$13182 (quote ()))))) g$0$13186) ((lambda (g$0$13188) ((lambda (g$0$13190) (if (if g$0$13190 (begin (quote #f) (apply (lambda (g$0$13206 g$0$13207 g$0$13208 g$0$13209 g$0$13210) (quote #t)) g$0$13190)) (quote #f)) (apply (lambda (g$0$13196 g$0$13197 g$0$13198 g$0$13199 g$0$13200) (if (g$0$11051 (cons g$0$13198 g$0$13197)) (g$0$11324 (list (quote make-traced-procedure) (list (quote quote) g$0$13196) (cons (quote lambda) (cons (append g$0$13197 g$0$13198) (cons g$0$13199 g$0$13200))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11059 g$0$13182 (quote ()))))) g$0$13190) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13188 (quote ()))))) ((lambda (g$0$13212) (if (g$0$11027 g$0$13212) (begin (quote #f) ((lambda (g$0$13214) (if g$0$13214 (begin (quote #f) ((lambda (g$0$13216) (if g$0$13216 (begin (quote #f) (append g$0$13214 g$0$13216)) (quote #f))) ((lambda (g$0$13218) (if (g$0$11027 g$0$13218) (begin (quote #f) ((lambda (g$0$13220) (if g$0$13220 (begin (quote #f) ((lambda (g$0$13222) (if g$0$13222 (begin (quote #f) (append g$0$13220 g$0$13222)) (quote #f))) ((lambda (g$0$13224) (if (g$0$11027 g$0$13224) (begin (quote #f) ((lambda (g$0$13226) (if g$0$13226 (begin (quote #f) ((lambda (g$0$13228) (if g$0$13228 (begin (quote #f) (append g$0$13226 g$0$13228)) (quote #f))) ((lambda (g$0$13230) (if (g$0$11027 g$0$13230) (begin (quote #f) ((lambda (g$0$13232) (if g$0$13232 (begin (quote #f) ((lambda (g$0$13234) (if g$0$13234 (begin (quote #f) (append g$0$13232 g$0$13234)) (quote #f))) ((letrec ((g$0$13236 (lambda (g$0$13238) (if (g$0$11027 g$0$13238) ((lambda (g$0$13240) (if g$0$13240 (begin (quote #f) ((lambda (g$0$13242) (if g$0$13242 (begin (quote #f) (map cons g$0$13240 g$0$13242)) (quote #f))) (g$0$13236 (g$0$11039 g$0$13238)))) (quote #f))) ((lambda (g$0$13244) (list g$0$13244)) (g$0$11035 g$0$13238))) (if (g$0$11031 g$0$13238) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13236) (g$0$11039 g$0$13230)))) (quote #f))) ((lambda (g$0$13246) (list g$0$13246)) (g$0$11035 g$0$13230)))) (quote #f))) (g$0$11039 g$0$13224)))) (quote #f))) ((letrec ((g$0$13248 (lambda (g$0$13250) (if (g$0$11027 g$0$13250) ((lambda (g$0$13256) (if g$0$13256 (begin (quote #f) ((lambda (g$0$13258) (if g$0$13258 (begin (quote #f) (cons (map cons g$0$13256 (car g$0$13258)) (cdr g$0$13258))) (quote #f))) (g$0$13248 (g$0$11039 g$0$13250)))) (quote #f))) ((lambda (g$0$13260) (list g$0$13260)) (g$0$11035 g$0$13250))) ((lambda (g$0$13252) (if g$0$13252 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$13252)) (quote #f))) ((lambda (g$0$13254) (list g$0$13254)) g$0$13250)))))) (lambda (g$0$13262) ((lambda (g$0$13264) (if g$0$13264 (begin (quote #f) (append (car g$0$13264) (cdr g$0$13264))) (quote #f))) (g$0$13248 g$0$13262)))) (g$0$11035 g$0$13224)))) (quote #f))) (g$0$11039 g$0$13218)))) (quote #f))) ((lambda (g$0$13266) (list g$0$13266)) (g$0$11035 g$0$13218)))) (quote #f))) (g$0$11039 g$0$13212)))) (quote #f))) ((lambda (g$0$13268) (quote ())) (g$0$11035 g$0$13212)))) (quote #f))) g$0$13188))) g$0$13184))) ((lambda (g$0$13286) (if (g$0$11027 g$0$13286) (begin (quote #f) ((lambda (g$0$13288) (if g$0$13288 (begin (quote #f) ((lambda (g$0$13290) (if g$0$13290 (begin (quote #f) (append g$0$13288 g$0$13290)) (quote #f))) ((lambda (g$0$13292) (if (g$0$11027 g$0$13292) (begin (quote #f) ((lambda (g$0$13294) (if g$0$13294 (begin (quote #f) ((lambda (g$0$13296) (if g$0$13296 (begin (quote #f) (append g$0$13294 g$0$13296)) (quote #f))) ((lambda (g$0$13298) (if (g$0$11027 g$0$13298) (begin (quote #f) ((lambda (g$0$13300) (if g$0$13300 (begin (quote #f) ((lambda (g$0$13302) (if g$0$13302 (begin (quote #f) (append g$0$13300 g$0$13302)) (quote #f))) ((lambda (g$0$13304) (if (g$0$11027 g$0$13304) (begin (quote #f) ((lambda (g$0$13306) (if g$0$13306 (begin (quote #f) ((lambda (g$0$13308) (if g$0$13308 (begin (quote #f) (append g$0$13306 g$0$13308)) (quote #f))) ((letrec ((g$0$13310 (lambda (g$0$13312) (if (g$0$11027 g$0$13312) ((lambda (g$0$13314) (if g$0$13314 (begin (quote #f) ((lambda (g$0$13316) (if g$0$13316 (begin (quote #f) (map cons g$0$13314 g$0$13316)) (quote #f))) (g$0$13310 (g$0$11039 g$0$13312)))) (quote #f))) ((lambda (g$0$13318) (list g$0$13318)) (g$0$11035 g$0$13312))) (if (g$0$11031 g$0$13312) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13310) (g$0$11039 g$0$13304)))) (quote #f))) ((lambda (g$0$13320) (list g$0$13320)) (g$0$11035 g$0$13304)))) (quote #f))) (g$0$11039 g$0$13298)))) (quote #f))) ((letrec ((g$0$13322 (lambda (g$0$13324) (if (g$0$11027 g$0$13324) ((lambda (g$0$13326) (if g$0$13326 (begin (quote #f) ((lambda (g$0$13328) (if g$0$13328 (begin (quote #f) (map cons g$0$13326 g$0$13328)) (quote #f))) (g$0$13322 (g$0$11039 g$0$13324)))) (quote #f))) ((lambda (g$0$13330) (list g$0$13330)) (g$0$11035 g$0$13324))) (if (g$0$11031 g$0$13324) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$13322) (g$0$11035 g$0$13298)))) (quote #f))) (g$0$11039 g$0$13292)))) (quote #f))) ((lambda (g$0$13332) (list g$0$13332)) (g$0$11035 g$0$13292)))) (quote #f))) (g$0$11039 g$0$13286)))) (quote #f))) ((lambda (g$0$13334) (quote ())) (g$0$11035 g$0$13286)))) (quote #f))) g$0$13184))) g$0$13182))) (set! g$0$11332 (lambda (g$0$13336) ((lambda (g$0$13338) ((lambda (g$0$13340) (if (if g$0$13340 (begin (quote #f) (apply (lambda (g$0$13473 g$0$13474 g$0$13475 g$0$13476) (quote #t)) g$0$13340)) (quote #f)) (apply (lambda (g$0$13465 g$0$13466 g$0$13467 g$0$13468) (if (g$0$11051 g$0$13466) (g$0$11324 (list (quote define) g$0$13465 (list (quote make-traced-procedure) (list (quote quote) g$0$13465) (cons (quote lambda) (cons g$0$13466 (cons g$0$13467 g$0$13468)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11059 g$0$13336 (quote ()))))) g$0$13340) ((lambda (g$0$13342) ((lambda (g$0$13344) (if (if g$0$13344 (begin (quote #f) (apply (lambda (g$0$13398 g$0$13399 g$0$13400 g$0$13401 g$0$13402) (quote #t)) g$0$13344)) (quote #f)) (apply (lambda (g$0$13388 g$0$13389 g$0$13390 g$0$13391 g$0$13392) (if (g$0$11051 (cons g$0$13390 g$0$13389)) (g$0$11324 (list (quote define) g$0$13388 (list (quote make-traced-procedure) (list (quote quote) g$0$13388) (cons (quote lambda) (cons (append g$0$13389 g$0$13390) (cons g$0$13391 g$0$13392)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11059 g$0$13336 (quote ()))))) g$0$13344) ((lambda (g$0$13346) ((lambda (g$0$13348) (if (if g$0$13348 (begin (quote #f) (apply (lambda (g$0$13355 g$0$13356) (quote #t)) g$0$13348)) (quote #f)) (apply (lambda (g$0$13351 g$0$13352) (if (g$0$11041 g$0$13351) (g$0$11324 (list (quote define) g$0$13351 (list (quote let) (list (list (quote v) g$0$13352)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) g$0$13351) (quote (v)))) (quote ((error (quote trace-define) "~s is not a procedure" v))))))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11059 g$0$13336 (quote ()))))) g$0$13348) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13346 (quote ()))))) ((lambda (g$0$13358) (if (g$0$11027 g$0$13358) (begin (quote #f) ((lambda (g$0$13360) (if g$0$13360 (begin (quote #f) ((lambda (g$0$13362) (if g$0$13362 (begin (quote #f) (append g$0$13360 g$0$13362)) (quote #f))) ((lambda (g$0$13364) (if (g$0$11027 g$0$13364) (begin (quote #f) ((lambda (g$0$13366) (if g$0$13366 (begin (quote #f) ((lambda (g$0$13368) (if g$0$13368 (begin (quote #f) (append g$0$13366 g$0$13368)) (quote #f))) ((lambda (g$0$13370) (if (g$0$11027 g$0$13370) (begin (quote #f) ((lambda (g$0$13372) (if g$0$13372 (begin (quote #f) ((lambda (g$0$13374) (if g$0$13374 (begin (quote #f) (append g$0$13372 g$0$13374)) (quote #f))) ((lambda (g$0$13376) (if (equal? (g$0$11061 g$0$13376) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13370)))) (quote #f))) ((lambda (g$0$13378) (list g$0$13378)) (g$0$11035 g$0$13370)))) (quote #f))) (g$0$11039 g$0$13364)))) (quote #f))) ((lambda (g$0$13380) (list g$0$13380)) (g$0$11035 g$0$13364)))) (quote #f))) (g$0$11039 g$0$13358)))) (quote #f))) ((lambda (g$0$13382) (quote ())) (g$0$11035 g$0$13358)))) (quote #f))) g$0$13346))) g$0$13342))) ((lambda (g$0$13404) (if (g$0$11027 g$0$13404) (begin (quote #f) ((lambda (g$0$13406) (if g$0$13406 (begin (quote #f) ((lambda (g$0$13408) (if g$0$13408 (begin (quote #f) (append g$0$13406 g$0$13408)) (quote #f))) ((lambda (g$0$13410) (if (g$0$11027 g$0$13410) (begin (quote #f) ((lambda (g$0$13412) (if g$0$13412 (begin (quote #f) ((lambda (g$0$13414) (if g$0$13414 (begin (quote #f) (append g$0$13412 g$0$13414)) (quote #f))) ((lambda (g$0$13416) (if (g$0$11027 g$0$13416) (begin (quote #f) ((lambda (g$0$13418) (if g$0$13418 (begin (quote #f) ((lambda (g$0$13420) (if g$0$13420 (begin (quote #f) (append g$0$13418 g$0$13420)) (quote #f))) ((letrec ((g$0$13422 (lambda (g$0$13424) (if (g$0$11027 g$0$13424) ((lambda (g$0$13426) (if g$0$13426 (begin (quote #f) ((lambda (g$0$13428) (if g$0$13428 (begin (quote #f) (map cons g$0$13426 g$0$13428)) (quote #f))) (g$0$13422 (g$0$11039 g$0$13424)))) (quote #f))) ((lambda (g$0$13430) (list g$0$13430)) (g$0$11035 g$0$13424))) (if (g$0$11031 g$0$13424) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13422) (g$0$11039 g$0$13416)))) (quote #f))) ((lambda (g$0$13432) (list g$0$13432)) (g$0$11035 g$0$13416)))) (quote #f))) (g$0$11039 g$0$13410)))) (quote #f))) ((lambda (g$0$13434) (if (g$0$11027 g$0$13434) (begin (quote #f) ((lambda (g$0$13436) (if g$0$13436 (begin (quote #f) ((lambda (g$0$13438) (if g$0$13438 (begin (quote #f) (append g$0$13436 g$0$13438)) (quote #f))) ((letrec ((g$0$13440 (lambda (g$0$13442) (if (g$0$11027 g$0$13442) ((lambda (g$0$13448) (if g$0$13448 (begin (quote #f) ((lambda (g$0$13450) (if g$0$13450 (begin (quote #f) (cons (map cons g$0$13448 (car g$0$13450)) (cdr g$0$13450))) (quote #f))) (g$0$13440 (g$0$11039 g$0$13442)))) (quote #f))) ((lambda (g$0$13452) (list g$0$13452)) (g$0$11035 g$0$13442))) ((lambda (g$0$13444) (if g$0$13444 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$13444)) (quote #f))) ((lambda (g$0$13446) (list g$0$13446)) g$0$13442)))))) (lambda (g$0$13454) ((lambda (g$0$13456) (if g$0$13456 (begin (quote #f) (append (car g$0$13456) (cdr g$0$13456))) (quote #f))) (g$0$13440 g$0$13454)))) (g$0$11039 g$0$13434)))) (quote #f))) ((lambda (g$0$13458) (list g$0$13458)) (g$0$11035 g$0$13434)))) (quote #f))) (g$0$11035 g$0$13410)))) (quote #f))) (g$0$11039 g$0$13404)))) (quote #f))) ((lambda (g$0$13460) (quote ())) (g$0$11035 g$0$13404)))) (quote #f))) g$0$13342))) g$0$13338))) ((lambda (g$0$13478) (if (g$0$11027 g$0$13478) (begin (quote #f) ((lambda (g$0$13480) (if g$0$13480 (begin (quote #f) ((lambda (g$0$13482) (if g$0$13482 (begin (quote #f) (append g$0$13480 g$0$13482)) (quote #f))) ((lambda (g$0$13484) (if (g$0$11027 g$0$13484) (begin (quote #f) ((lambda (g$0$13486) (if g$0$13486 (begin (quote #f) ((lambda (g$0$13488) (if g$0$13488 (begin (quote #f) (append g$0$13486 g$0$13488)) (quote #f))) ((lambda (g$0$13490) (if (g$0$11027 g$0$13490) (begin (quote #f) ((lambda (g$0$13492) (if g$0$13492 (begin (quote #f) ((lambda (g$0$13494) (if g$0$13494 (begin (quote #f) (append g$0$13492 g$0$13494)) (quote #f))) ((letrec ((g$0$13496 (lambda (g$0$13498) (if (g$0$11027 g$0$13498) ((lambda (g$0$13500) (if g$0$13500 (begin (quote #f) ((lambda (g$0$13502) (if g$0$13502 (begin (quote #f) (map cons g$0$13500 g$0$13502)) (quote #f))) (g$0$13496 (g$0$11039 g$0$13498)))) (quote #f))) ((lambda (g$0$13504) (list g$0$13504)) (g$0$11035 g$0$13498))) (if (g$0$11031 g$0$13498) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13496) (g$0$11039 g$0$13490)))) (quote #f))) ((lambda (g$0$13506) (list g$0$13506)) (g$0$11035 g$0$13490)))) (quote #f))) (g$0$11039 g$0$13484)))) (quote #f))) ((lambda (g$0$13508) (if (g$0$11027 g$0$13508) (begin (quote #f) ((lambda (g$0$13510) (if g$0$13510 (begin (quote #f) ((lambda (g$0$13512) (if g$0$13512 (begin (quote #f) (append g$0$13510 g$0$13512)) (quote #f))) ((letrec ((g$0$13514 (lambda (g$0$13516) (if (g$0$11027 g$0$13516) ((lambda (g$0$13518) (if g$0$13518 (begin (quote #f) ((lambda (g$0$13520) (if g$0$13520 (begin (quote #f) (map cons g$0$13518 g$0$13520)) (quote #f))) (g$0$13514 (g$0$11039 g$0$13516)))) (quote #f))) ((lambda (g$0$13522) (list g$0$13522)) (g$0$11035 g$0$13516))) (if (g$0$11031 g$0$13516) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$13514) (g$0$11039 g$0$13508)))) (quote #f))) ((lambda (g$0$13524) (list g$0$13524)) (g$0$11035 g$0$13508)))) (quote #f))) (g$0$11035 g$0$13484)))) (quote #f))) (g$0$11039 g$0$13478)))) (quote #f))) ((lambda (g$0$13526) (quote ())) (g$0$11035 g$0$13478)))) (quote #f))) g$0$13338))) g$0$13336))) (set! g$0$11334 (lambda (g$0$13528) ((lambda (g$0$13530) ((lambda (g$0$13532) (if (if g$0$13532 (begin (quote #f) (apply (lambda (g$0$13536) (quote #t)) g$0$13532)) (quote #f)) (apply (lambda (g$0$13534) (g$0$11324 (list (quote time-it) (list (quote quote) g$0$13534) (list (quote lambda) (quote ()) g$0$13534)))) g$0$13532) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13530 (quote ()))))) ((lambda (g$0$13538) (if (g$0$11027 g$0$13538) (begin (quote #f) ((lambda (g$0$13540) (if g$0$13540 (begin (quote #f) ((lambda (g$0$13542) (if g$0$13542 (begin (quote #f) (append g$0$13540 g$0$13542)) (quote #f))) ((lambda (g$0$13544) (if (g$0$11027 g$0$13544) (begin (quote #f) ((lambda (g$0$13546) (if g$0$13546 (begin (quote #f) ((lambda (g$0$13548) (if g$0$13548 (begin (quote #f) (append g$0$13546 g$0$13548)) (quote #f))) ((lambda (g$0$13550) (if (equal? (g$0$11061 g$0$13550) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13544)))) (quote #f))) ((lambda (g$0$13552) (list g$0$13552)) (g$0$11035 g$0$13544)))) (quote #f))) (g$0$11039 g$0$13538)))) (quote #f))) ((lambda (g$0$13554) (quote ())) (g$0$11035 g$0$13538)))) (quote #f))) g$0$13530))) g$0$13528))) (set! g$0$11336 (lambda (g$0$13556) ((lambda (g$0$13558) ((lambda (g$0$13560) (if (if g$0$13560 (begin (quote #f) (apply (lambda (g$0$13564) (quote #t)) g$0$13560)) (quote #f)) (apply (lambda (g$0$13562) (g$0$11324 (list (quote make-promise) (list (quote lambda) (quote ()) g$0$13562)))) g$0$13560) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13558 (quote ()))))) ((lambda (g$0$13566) (if (g$0$11027 g$0$13566) (begin (quote #f) ((lambda (g$0$13568) (if g$0$13568 (begin (quote #f) ((lambda (g$0$13570) (if g$0$13570 (begin (quote #f) (append g$0$13568 g$0$13570)) (quote #f))) ((lambda (g$0$13572) (if (g$0$11027 g$0$13572) (begin (quote #f) ((lambda (g$0$13574) (if g$0$13574 (begin (quote #f) ((lambda (g$0$13576) (if g$0$13576 (begin (quote #f) (append g$0$13574 g$0$13576)) (quote #f))) ((lambda (g$0$13578) (if (equal? (g$0$11061 g$0$13578) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13572)))) (quote #f))) ((lambda (g$0$13580) (list g$0$13580)) (g$0$11035 g$0$13572)))) (quote #f))) (g$0$11039 g$0$13566)))) (quote #f))) ((lambda (g$0$13582) (quote ())) (g$0$11035 g$0$13566)))) (quote #f))) g$0$13558))) g$0$13556))) (set! g$0$11338 (lambda (g$0$13584) ((lambda (g$0$13586) ((lambda (g$0$13588) (if (if g$0$13588 (begin (quote #f) (apply (lambda (g$0$13592) (quote #t)) g$0$13588)) (quote #f)) (apply (lambda (g$0$13590) (g$0$11324 (list (quote unless) g$0$13590 (list (quote error) (quote (quote assert)) (quote "~s failed") (list (quote quote) g$0$13590))))) g$0$13588) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13586 (quote ()))))) ((lambda (g$0$13594) (if (g$0$11027 g$0$13594) (begin (quote #f) ((lambda (g$0$13596) (if g$0$13596 (begin (quote #f) ((lambda (g$0$13598) (if g$0$13598 (begin (quote #f) (append g$0$13596 g$0$13598)) (quote #f))) ((lambda (g$0$13600) (if (g$0$11027 g$0$13600) (begin (quote #f) ((lambda (g$0$13602) (if g$0$13602 (begin (quote #f) ((lambda (g$0$13604) (if g$0$13604 (begin (quote #f) (append g$0$13602 g$0$13604)) (quote #f))) ((lambda (g$0$13606) (if (equal? (g$0$11061 g$0$13606) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13600)))) (quote #f))) ((lambda (g$0$13608) (list g$0$13608)) (g$0$11035 g$0$13600)))) (quote #f))) (g$0$11039 g$0$13594)))) (quote #f))) ((lambda (g$0$13610) (quote ())) (g$0$11035 g$0$13594)))) (quote #f))) g$0$13586))) g$0$13584))) (set! g$0$11340 (lambda (g$0$13612) ((lambda (g$0$13614) ((lambda (g$0$13616) (if (if g$0$13616 (begin (quote #f) (apply (lambda (g$0$13621) (quote #t)) g$0$13616)) (quote #f)) (apply (lambda (g$0$13618) ((lambda (g$0$13619) (if (memv g$0$13619 (quote (little))) (g$0$11324 (quote (quote little))) (if (memv g$0$13619 (quote (big))) (g$0$11324 (quote (quote big))) (error (quote expander) (quote "~a ~s") (quote "endianness must be big or little") (g$0$11059 g$0$13612 (quote ())))))) (g$0$11507 g$0$13618))) g$0$13616) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13614 (quote ()))))) ((lambda (g$0$13623) (if (g$0$11027 g$0$13623) (begin (quote #f) ((lambda (g$0$13625) (if g$0$13625 (begin (quote #f) ((lambda (g$0$13627) (if g$0$13627 (begin (quote #f) (append g$0$13625 g$0$13627)) (quote #f))) ((lambda (g$0$13629) (if (g$0$11027 g$0$13629) (begin (quote #f) ((lambda (g$0$13631) (if g$0$13631 (begin (quote #f) ((lambda (g$0$13633) (if g$0$13633 (begin (quote #f) (append g$0$13631 g$0$13633)) (quote #f))) ((lambda (g$0$13635) (if (equal? (g$0$11061 g$0$13635) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13629)))) (quote #f))) ((lambda (g$0$13637) (list g$0$13637)) (g$0$11035 g$0$13629)))) (quote #f))) (g$0$11039 g$0$13623)))) (quote #f))) ((lambda (g$0$13639) (quote ())) (g$0$11035 g$0$13623)))) (quote #f))) g$0$13614))) g$0$13612))) (set! g$0$11342 (lambda (g$0$13641) ((lambda (g$0$13643) ((lambda (g$0$13645) (if (if g$0$13645 (begin (quote #f) (apply (lambda (g$0$13755) (quote #t)) g$0$13645)) (quote #f)) (apply (lambda (g$0$13753) (g$0$11324 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$13753)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) g$0$13753) (quote ((syntax (e* ...))))))))))) g$0$13645) ((lambda (g$0$13647) ((lambda (g$0$13649) (if (if g$0$13649 (begin (quote #f) (apply (lambda (g$0$13665 g$0$13666 g$0$13667 g$0$13668 g$0$13669) (if (g$0$11041 g$0$13665) (if (g$0$11041 g$0$13667) (begin (quote #f) (g$0$11041 g$0$13668)) (quote #f)) (quote #f))) g$0$13649)) (quote #f)) (apply (lambda (g$0$13655 g$0$13656 g$0$13657 g$0$13658 g$0$13659) (g$0$11324 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$13656)) (list (list (quote set!) (quote id) g$0$13658) (list (quote syntax) g$0$13659)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (list (quote syntax) (cons g$0$13656 (quote (e* ...)))))))))) g$0$13649) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13647 (quote ()))))) ((lambda (g$0$13671) (if (g$0$11027 g$0$13671) (begin (quote #f) ((lambda (g$0$13673) (if g$0$13673 (begin (quote #f) ((lambda (g$0$13675) (if g$0$13675 (begin (quote #f) (append g$0$13673 g$0$13675)) (quote #f))) ((lambda (g$0$13677) (if (g$0$11027 g$0$13677) (begin (quote #f) ((lambda (g$0$13679) (if g$0$13679 (begin (quote #f) ((lambda (g$0$13681) (if g$0$13681 (begin (quote #f) (append g$0$13679 g$0$13681)) (quote #f))) ((lambda (g$0$13683) (if (g$0$11027 g$0$13683) (begin (quote #f) ((lambda (g$0$13685) (if g$0$13685 (begin (quote #f) ((lambda (g$0$13687) (if g$0$13687 (begin (quote #f) (append g$0$13685 g$0$13687)) (quote #f))) ((lambda (g$0$13689) (if (equal? (g$0$11061 g$0$13689) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13683)))) (quote #f))) ((lambda (g$0$13691) (if (g$0$11027 g$0$13691) (begin (quote #f) ((lambda (g$0$13693) (if g$0$13693 (begin (quote #f) ((lambda (g$0$13695) (if g$0$13695 (begin (quote #f) (append g$0$13693 g$0$13695)) (quote #f))) ((lambda (g$0$13697) (if (g$0$11027 g$0$13697) (begin (quote #f) ((lambda (g$0$13699) (if g$0$13699 (begin (quote #f) ((lambda (g$0$13701) (if g$0$13701 (begin (quote #f) (append g$0$13699 g$0$13701)) (quote #f))) ((lambda (g$0$13703) (if (equal? (g$0$11061 g$0$13703) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13697)))) (quote #f))) ((lambda (g$0$13705) (list g$0$13705)) (g$0$11035 g$0$13697)))) (quote #f))) (g$0$11039 g$0$13691)))) (quote #f))) ((lambda (g$0$13707) (if (g$0$11027 g$0$13707) (begin (quote #f) ((lambda (g$0$13709) (if g$0$13709 (begin (quote #f) ((lambda (g$0$13711) (if g$0$13711 (begin (quote #f) (append g$0$13709 g$0$13711)) (quote #f))) ((lambda (g$0$13713) (if (g$0$11027 g$0$13713) (begin (quote #f) ((lambda (g$0$13715) (if g$0$13715 (begin (quote #f) ((lambda (g$0$13717) (if g$0$13717 (begin (quote #f) (append g$0$13715 g$0$13717)) (quote #f))) ((lambda (g$0$13719) (if (g$0$11027 g$0$13719) (begin (quote #f) ((lambda (g$0$13721) (if g$0$13721 (begin (quote #f) ((lambda (g$0$13723) (if g$0$13723 (begin (quote #f) (append g$0$13721 g$0$13723)) (quote #f))) ((lambda (g$0$13725) (if (equal? (g$0$11061 g$0$13725) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13719)))) (quote #f))) ((lambda (g$0$13727) (list g$0$13727)) (g$0$11035 g$0$13719)))) (quote #f))) (g$0$11039 g$0$13713)))) (quote #f))) ((lambda (g$0$13729) (list g$0$13729)) (g$0$11035 g$0$13713)))) (quote #f))) (g$0$11039 g$0$13707)))) (quote #f))) ((lambda (g$0$13731) (if (g$0$11041 g$0$13731) (if (g$0$11049 g$0$13731 (g$0$11294 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$13707)))) (quote #f))) (g$0$11035 g$0$13691)))) (quote #f))) (g$0$11035 g$0$13683)))) (quote #f))) (g$0$11039 g$0$13677)))) (quote #f))) ((lambda (g$0$13733) (if (g$0$11027 g$0$13733) (begin (quote #f) ((lambda (g$0$13735) (if g$0$13735 (begin (quote #f) ((lambda (g$0$13737) (if g$0$13737 (begin (quote #f) (append g$0$13735 g$0$13737)) (quote #f))) ((lambda (g$0$13739) (if (g$0$11027 g$0$13739) (begin (quote #f) ((lambda (g$0$13741) (if g$0$13741 (begin (quote #f) ((lambda (g$0$13743) (if g$0$13743 (begin (quote #f) (append g$0$13741 g$0$13743)) (quote #f))) ((lambda (g$0$13745) (if (equal? (g$0$11061 g$0$13745) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13739)))) (quote #f))) ((lambda (g$0$13747) (list g$0$13747)) (g$0$11035 g$0$13739)))) (quote #f))) (g$0$11039 g$0$13733)))) (quote #f))) ((lambda (g$0$13749) (list g$0$13749)) (g$0$11035 g$0$13733)))) (quote #f))) (g$0$11035 g$0$13677)))) (quote #f))) (g$0$11039 g$0$13671)))) (quote #f))) ((lambda (g$0$13751) (quote ())) (g$0$11035 g$0$13671)))) (quote #f))) g$0$13647))) g$0$13643))) ((lambda (g$0$13757) (if (g$0$11027 g$0$13757) (begin (quote #f) ((lambda (g$0$13759) (if g$0$13759 (begin (quote #f) ((lambda (g$0$13761) (if g$0$13761 (begin (quote #f) (append g$0$13759 g$0$13761)) (quote #f))) ((lambda (g$0$13763) (if (g$0$11027 g$0$13763) (begin (quote #f) ((lambda (g$0$13765) (if g$0$13765 (begin (quote #f) ((lambda (g$0$13767) (if g$0$13767 (begin (quote #f) (append g$0$13765 g$0$13767)) (quote #f))) ((lambda (g$0$13769) (if (equal? (g$0$11061 g$0$13769) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13763)))) (quote #f))) ((lambda (g$0$13771) (list g$0$13771)) (g$0$11035 g$0$13763)))) (quote #f))) (g$0$11039 g$0$13757)))) (quote #f))) ((lambda (g$0$13773) (quote ())) (g$0$11035 g$0$13757)))) (quote #f))) g$0$13643))) g$0$13641))) (set! g$0$11344 (lambda (g$0$13775) ((lambda (g$0$13777) (begin (set! g$0$13777 (lambda (g$0$13907) ((lambda (g$0$13909) ((lambda (g$0$13911) (if (if g$0$13911 (begin (quote #f) (apply (lambda (g$0$13966 g$0$13967) (quote #t)) g$0$13911)) (quote #f)) (apply (lambda (g$0$13962 g$0$13963) (list g$0$13962 g$0$13963 g$0$13962)) g$0$13911) ((lambda (g$0$13913) ((lambda (g$0$13915) (if (if g$0$13915 (begin (quote #f) (apply (lambda (g$0$13931 g$0$13932 g$0$13933) (quote #t)) g$0$13915)) (quote #f)) (apply (lambda (g$0$13925 g$0$13926 g$0$13927) (list g$0$13925 g$0$13926 g$0$13927)) g$0$13915) ((lambda (g$0$13917) ((lambda (g$0$13919) (if (if g$0$13919 (begin (quote #f) (apply (lambda () (quote #t)) g$0$13919)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid binding") (g$0$11059 g$0$13775 (quote ())))) g$0$13919) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13917 (quote ()))))) ((lambda (g$0$13921) (quote ())) g$0$13917))) g$0$13913))) ((lambda (g$0$13935) (if (g$0$11027 g$0$13935) (begin (quote #f) ((lambda (g$0$13937) (if g$0$13937 (begin (quote #f) ((lambda (g$0$13939) (if g$0$13939 (begin (quote #f) (append g$0$13937 g$0$13939)) (quote #f))) ((lambda (g$0$13941) (if (g$0$11027 g$0$13941) (begin (quote #f) ((lambda (g$0$13943) (if g$0$13943 (begin (quote #f) ((lambda (g$0$13945) (if g$0$13945 (begin (quote #f) (append g$0$13943 g$0$13945)) (quote #f))) ((lambda (g$0$13947) (if (g$0$11027 g$0$13947) (begin (quote #f) ((lambda (g$0$13949) (if g$0$13949 (begin (quote #f) ((lambda (g$0$13951) (if g$0$13951 (begin (quote #f) (append g$0$13949 g$0$13951)) (quote #f))) ((lambda (g$0$13953) (if (equal? (g$0$11061 g$0$13953) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13947)))) (quote #f))) ((lambda (g$0$13955) (list g$0$13955)) (g$0$11035 g$0$13947)))) (quote #f))) (g$0$11039 g$0$13941)))) (quote #f))) ((lambda (g$0$13957) (list g$0$13957)) (g$0$11035 g$0$13941)))) (quote #f))) (g$0$11039 g$0$13935)))) (quote #f))) ((lambda (g$0$13959) (list g$0$13959)) (g$0$11035 g$0$13935)))) (quote #f))) g$0$13913))) g$0$13909))) ((lambda (g$0$13969) (if (g$0$11027 g$0$13969) (begin (quote #f) ((lambda (g$0$13971) (if g$0$13971 (begin (quote #f) ((lambda (g$0$13973) (if g$0$13973 (begin (quote #f) (append g$0$13971 g$0$13973)) (quote #f))) ((lambda (g$0$13975) (if (g$0$11027 g$0$13975) (begin (quote #f) ((lambda (g$0$13977) (if g$0$13977 (begin (quote #f) ((lambda (g$0$13979) (if g$0$13979 (begin (quote #f) (append g$0$13977 g$0$13979)) (quote #f))) ((lambda (g$0$13981) (if (equal? (g$0$11061 g$0$13981) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13975)))) (quote #f))) ((lambda (g$0$13983) (list g$0$13983)) (g$0$11035 g$0$13975)))) (quote #f))) (g$0$11039 g$0$13969)))) (quote #f))) ((lambda (g$0$13985) (list g$0$13985)) (g$0$11035 g$0$13969)))) (quote #f))) g$0$13909))) g$0$13907))) ((lambda (g$0$13779) ((lambda (g$0$13781) (if (if g$0$13781 (begin (quote #f) (apply (lambda (g$0$13844 g$0$13845 g$0$13846 g$0$13847) (quote #t)) g$0$13781)) (quote #f)) (apply (lambda (g$0$13786 g$0$13787 g$0$13788 g$0$13789) ((lambda (g$0$13791) ((lambda (g$0$13793) (if (if g$0$13793 (begin (quote #f) (apply (lambda (g$0$13803 g$0$13804 g$0$13805) (quote #t)) g$0$13793)) (quote #f)) (apply (lambda (g$0$13797 g$0$13798 g$0$13799) (if (g$0$11051 g$0$13797) (g$0$11324 (list (quote letrec) (list (list (quote loop) (list (quote lambda) g$0$13797 (list (quote if) g$0$13787 (cons (quote begin) (cons (quote (if #f #f)) g$0$13788)) (cons (quote begin) (append g$0$13789 (list (cons (quote loop) g$0$13799)))))))) (cons (quote loop) g$0$13798))) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (g$0$11059 g$0$13775 (quote ()))))) g$0$13793) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13791 (quote ()))))) ((letrec ((g$0$13807 (lambda (g$0$13809) (if (g$0$11027 g$0$13809) ((lambda (g$0$13811) (if g$0$13811 (begin (quote #f) ((lambda (g$0$13813) (if g$0$13813 (begin (quote #f) (map cons g$0$13811 g$0$13813)) (quote #f))) (g$0$13807 (g$0$11039 g$0$13809)))) (quote #f))) ((lambda (g$0$13815) (if (g$0$11027 g$0$13815) (begin (quote #f) ((lambda (g$0$13817) (if g$0$13817 (begin (quote #f) ((lambda (g$0$13819) (if g$0$13819 (begin (quote #f) (append g$0$13817 g$0$13819)) (quote #f))) ((lambda (g$0$13821) (if (g$0$11027 g$0$13821) (begin (quote #f) ((lambda (g$0$13823) (if g$0$13823 (begin (quote #f) ((lambda (g$0$13825) (if g$0$13825 (begin (quote #f) (append g$0$13823 g$0$13825)) (quote #f))) ((lambda (g$0$13827) (if (g$0$11027 g$0$13827) (begin (quote #f) ((lambda (g$0$13829) (if g$0$13829 (begin (quote #f) ((lambda (g$0$13831) (if g$0$13831 (begin (quote #f) (append g$0$13829 g$0$13831)) (quote #f))) ((lambda (g$0$13833) (if (equal? (g$0$11061 g$0$13833) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$13827)))) (quote #f))) ((lambda (g$0$13835) (list g$0$13835)) (g$0$11035 g$0$13827)))) (quote #f))) (g$0$11039 g$0$13821)))) (quote #f))) ((lambda (g$0$13837) (list g$0$13837)) (g$0$11035 g$0$13821)))) (quote #f))) (g$0$11039 g$0$13815)))) (quote #f))) ((lambda (g$0$13839) (list g$0$13839)) (g$0$11035 g$0$13815)))) (quote #f))) (g$0$11035 g$0$13809))) (if (g$0$11031 g$0$13809) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) g$0$13807) g$0$13791))) (map g$0$13777 g$0$13786))) g$0$13781) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13779 (quote ()))))) ((lambda (g$0$13849) (if (g$0$11027 g$0$13849) (begin (quote #f) ((lambda (g$0$13851) (if g$0$13851 (begin (quote #f) ((lambda (g$0$13853) (if g$0$13853 (begin (quote #f) (append g$0$13851 g$0$13853)) (quote #f))) ((lambda (g$0$13855) (if (g$0$11027 g$0$13855) (begin (quote #f) ((lambda (g$0$13857) (if g$0$13857 (begin (quote #f) ((lambda (g$0$13859) (if g$0$13859 (begin (quote #f) (append g$0$13857 g$0$13859)) (quote #f))) ((lambda (g$0$13861) (if (g$0$11027 g$0$13861) (begin (quote #f) ((lambda (g$0$13863) (if g$0$13863 (begin (quote #f) ((lambda (g$0$13865) (if g$0$13865 (begin (quote #f) (append g$0$13863 g$0$13865)) (quote #f))) ((letrec ((g$0$13867 (lambda (g$0$13869) (if (g$0$11027 g$0$13869) ((lambda (g$0$13871) (if g$0$13871 (begin (quote #f) ((lambda (g$0$13873) (if g$0$13873 (begin (quote #f) (map cons g$0$13871 g$0$13873)) (quote #f))) (g$0$13867 (g$0$11039 g$0$13869)))) (quote #f))) ((lambda (g$0$13875) (list g$0$13875)) (g$0$11035 g$0$13869))) (if (g$0$11031 g$0$13869) (list (begin (quote command*) (quote ()))) (quote #f)))))) g$0$13867) (g$0$11039 g$0$13861)))) (quote #f))) ((lambda (g$0$13877) (if (g$0$11027 g$0$13877) (begin (quote #f) ((lambda (g$0$13879) (if g$0$13879 (begin (quote #f) ((lambda (g$0$13881) (if g$0$13881 (begin (quote #f) (append g$0$13879 g$0$13881)) (quote #f))) ((letrec ((g$0$13883 (lambda (g$0$13885) (if (g$0$11027 g$0$13885) ((lambda (g$0$13887) (if g$0$13887 (begin (quote #f) ((lambda (g$0$13889) (if g$0$13889 (begin (quote #f) (map cons g$0$13887 g$0$13889)) (quote #f))) (g$0$13883 (g$0$11039 g$0$13885)))) (quote #f))) ((lambda (g$0$13891) (list g$0$13891)) (g$0$11035 g$0$13885))) (if (g$0$11031 g$0$13885) (list (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$13883) (g$0$11039 g$0$13877)))) (quote #f))) ((lambda (g$0$13893) (list g$0$13893)) (g$0$11035 g$0$13877)))) (quote #f))) (g$0$11035 g$0$13861)))) (quote #f))) (g$0$11039 g$0$13855)))) (quote #f))) ((letrec ((g$0$13895 (lambda (g$0$13897) (if (g$0$11027 g$0$13897) ((lambda (g$0$13899) (if g$0$13899 (begin (quote #f) ((lambda (g$0$13901) (if g$0$13901 (begin (quote #f) (map cons g$0$13899 g$0$13901)) (quote #f))) (g$0$13895 (g$0$11039 g$0$13897)))) (quote #f))) ((lambda (g$0$13903) (list g$0$13903)) (g$0$11035 g$0$13897))) (if (g$0$11031 g$0$13897) (list (begin (quote binding*) (quote ()))) (quote #f)))))) g$0$13895) (g$0$11035 g$0$13855)))) (quote #f))) (g$0$11039 g$0$13849)))) (quote #f))) ((lambda (g$0$13905) (quote ())) (g$0$11035 g$0$13849)))) (quote #f))) g$0$13779))) g$0$13775))) (quote #f)))) (set! g$0$11346 (lambda (g$0$13987) ((lambda (g$0$13989) ((lambda (g$0$13991) (if (if g$0$13991 (begin (quote #f) (apply (lambda (g$0$14008 g$0$14009 g$0$14010 g$0$14011) (for-all g$0$11041 g$0$14008)) g$0$13991)) (quote #f)) (apply (lambda (g$0$13996 g$0$13997 g$0$13998 g$0$13999) (g$0$11324 (letrec ((g$0$14001 (lambda (g$0$14003) (if (null? g$0$14003) (cons (quote let) (cons (quote ()) (cons g$0$13998 g$0$13999))) (list (quote let) (list (car g$0$14003)) (g$0$14001 (cdr g$0$14003))))))) (g$0$14001 (map list g$0$13996 g$0$13997))))) g$0$13991) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$13989 (quote ()))))) ((lambda (g$0$14013) (if (g$0$11027 g$0$14013) (begin (quote #f) ((lambda (g$0$14015) (if g$0$14015 (begin (quote #f) ((lambda (g$0$14017) (if g$0$14017 (begin (quote #f) (append g$0$14015 g$0$14017)) (quote #f))) ((lambda (g$0$14019) (if (g$0$11027 g$0$14019) (begin (quote #f) ((lambda (g$0$14021) (if g$0$14021 (begin (quote #f) ((lambda (g$0$14023) (if g$0$14023 (begin (quote #f) (append g$0$14021 g$0$14023)) (quote #f))) ((lambda (g$0$14025) (if (g$0$11027 g$0$14025) (begin (quote #f) ((lambda (g$0$14027) (if g$0$14027 (begin (quote #f) ((lambda (g$0$14029) (if g$0$14029 (begin (quote #f) (append g$0$14027 g$0$14029)) (quote #f))) ((letrec ((g$0$14031 (lambda (g$0$14033) (if (g$0$11027 g$0$14033) ((lambda (g$0$14035) (if g$0$14035 (begin (quote #f) ((lambda (g$0$14037) (if g$0$14037 (begin (quote #f) (map cons g$0$14035 g$0$14037)) (quote #f))) (g$0$14031 (g$0$11039 g$0$14033)))) (quote #f))) ((lambda (g$0$14039) (list g$0$14039)) (g$0$11035 g$0$14033))) (if (g$0$11031 g$0$14033) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14031) (g$0$11039 g$0$14025)))) (quote #f))) ((lambda (g$0$14041) (list g$0$14041)) (g$0$11035 g$0$14025)))) (quote #f))) (g$0$11039 g$0$14019)))) (quote #f))) ((letrec ((g$0$14043 (lambda (g$0$14045) (if (g$0$11027 g$0$14045) ((lambda (g$0$14047) (if g$0$14047 (begin (quote #f) ((lambda (g$0$14049) (if g$0$14049 (begin (quote #f) (map cons g$0$14047 g$0$14049)) (quote #f))) (g$0$14043 (g$0$11039 g$0$14045)))) (quote #f))) ((lambda (g$0$14051) (if (g$0$11027 g$0$14051) (begin (quote #f) ((lambda (g$0$14053) (if g$0$14053 (begin (quote #f) ((lambda (g$0$14055) (if g$0$14055 (begin (quote #f) (append g$0$14053 g$0$14055)) (quote #f))) ((lambda (g$0$14057) (if (g$0$11027 g$0$14057) (begin (quote #f) ((lambda (g$0$14059) (if g$0$14059 (begin (quote #f) ((lambda (g$0$14061) (if g$0$14061 (begin (quote #f) (append g$0$14059 g$0$14061)) (quote #f))) ((lambda (g$0$14063) (if (equal? (g$0$11061 g$0$14063) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14057)))) (quote #f))) ((lambda (g$0$14065) (list g$0$14065)) (g$0$11035 g$0$14057)))) (quote #f))) (g$0$11039 g$0$14051)))) (quote #f))) ((lambda (g$0$14067) (list g$0$14067)) (g$0$11035 g$0$14051)))) (quote #f))) (g$0$11035 g$0$14045))) (if (g$0$11031 g$0$14045) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$14043) (g$0$11035 g$0$14019)))) (quote #f))) (g$0$11039 g$0$14013)))) (quote #f))) ((lambda (g$0$14069) (quote ())) (g$0$11035 g$0$14013)))) (quote #f))) g$0$13989))) g$0$13987))) (set! g$0$11348 (lambda (g$0$14071) ((lambda (g$0$14073) ((lambda (g$0$14075) (if (if g$0$14075 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14075)) (quote #f)) (apply (lambda () (quote #f)) g$0$14075) ((lambda (g$0$14077) ((lambda (g$0$14079) (if (if g$0$14079 (begin (quote #f) (apply (lambda (g$0$14092 g$0$14093) (quote #t)) g$0$14079)) (quote #f)) (apply (lambda (g$0$14082 g$0$14083) (g$0$11324 (letrec ((g$0$14085 (lambda (g$0$14088 g$0$14089) (if (null? g$0$14089) (list (quote begin) (quote #f) g$0$14088) (list (quote let) (list (list (quote t) g$0$14088)) (list (quote if) (quote t) (quote t) (g$0$14085 (car g$0$14089) (cdr g$0$14089)))))))) (g$0$14085 g$0$14082 g$0$14083)))) g$0$14079) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14077 (quote ()))))) ((lambda (g$0$14095) (if (g$0$11027 g$0$14095) (begin (quote #f) ((lambda (g$0$14097) (if g$0$14097 (begin (quote #f) ((lambda (g$0$14099) (if g$0$14099 (begin (quote #f) (append g$0$14097 g$0$14099)) (quote #f))) ((lambda (g$0$14101) (if (g$0$11027 g$0$14101) (begin (quote #f) ((lambda (g$0$14103) (if g$0$14103 (begin (quote #f) ((lambda (g$0$14105) (if g$0$14105 (begin (quote #f) (append g$0$14103 g$0$14105)) (quote #f))) ((letrec ((g$0$14107 (lambda (g$0$14109) (if (g$0$11027 g$0$14109) ((lambda (g$0$14111) (if g$0$14111 (begin (quote #f) ((lambda (g$0$14113) (if g$0$14113 (begin (quote #f) (map cons g$0$14111 g$0$14113)) (quote #f))) (g$0$14107 (g$0$11039 g$0$14109)))) (quote #f))) ((lambda (g$0$14115) (list g$0$14115)) (g$0$11035 g$0$14109))) (if (g$0$11031 g$0$14109) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14107) (g$0$11039 g$0$14101)))) (quote #f))) ((lambda (g$0$14117) (list g$0$14117)) (g$0$11035 g$0$14101)))) (quote #f))) (g$0$11039 g$0$14095)))) (quote #f))) ((lambda (g$0$14119) (quote ())) (g$0$11035 g$0$14095)))) (quote #f))) g$0$14077))) g$0$14073))) ((lambda (g$0$14121) (if (g$0$11027 g$0$14121) (begin (quote #f) ((lambda (g$0$14123) (if g$0$14123 (begin (quote #f) ((lambda (g$0$14125) (if g$0$14125 (begin (quote #f) (append g$0$14123 g$0$14125)) (quote #f))) ((lambda (g$0$14127) (if (equal? (g$0$11061 g$0$14127) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14121)))) (quote #f))) ((lambda (g$0$14129) (quote ())) (g$0$11035 g$0$14121)))) (quote #f))) g$0$14073))) g$0$14071))) (set! g$0$11350 (lambda (g$0$14131) ((lambda (g$0$14133) ((lambda (g$0$14135) (if (if g$0$14135 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14135)) (quote #f)) (apply (lambda () (quote #t)) g$0$14135) ((lambda (g$0$14137) ((lambda (g$0$14139) (if (if g$0$14139 (begin (quote #f) (apply (lambda (g$0$14152 g$0$14153) (quote #t)) g$0$14139)) (quote #f)) (apply (lambda (g$0$14142 g$0$14143) (g$0$11324 (letrec ((g$0$14145 (lambda (g$0$14148 g$0$14149) (if (null? g$0$14149) (list (quote begin) (quote #f) g$0$14148) (cons (quote if) (cons g$0$14148 (cons (g$0$14145 (car g$0$14149) (cdr g$0$14149)) (quote (#f))))))))) (g$0$14145 g$0$14142 g$0$14143)))) g$0$14139) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14137 (quote ()))))) ((lambda (g$0$14155) (if (g$0$11027 g$0$14155) (begin (quote #f) ((lambda (g$0$14157) (if g$0$14157 (begin (quote #f) ((lambda (g$0$14159) (if g$0$14159 (begin (quote #f) (append g$0$14157 g$0$14159)) (quote #f))) ((lambda (g$0$14161) (if (g$0$11027 g$0$14161) (begin (quote #f) ((lambda (g$0$14163) (if g$0$14163 (begin (quote #f) ((lambda (g$0$14165) (if g$0$14165 (begin (quote #f) (append g$0$14163 g$0$14165)) (quote #f))) ((letrec ((g$0$14167 (lambda (g$0$14169) (if (g$0$11027 g$0$14169) ((lambda (g$0$14171) (if g$0$14171 (begin (quote #f) ((lambda (g$0$14173) (if g$0$14173 (begin (quote #f) (map cons g$0$14171 g$0$14173)) (quote #f))) (g$0$14167 (g$0$11039 g$0$14169)))) (quote #f))) ((lambda (g$0$14175) (list g$0$14175)) (g$0$11035 g$0$14169))) (if (g$0$11031 g$0$14169) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14167) (g$0$11039 g$0$14161)))) (quote #f))) ((lambda (g$0$14177) (list g$0$14177)) (g$0$11035 g$0$14161)))) (quote #f))) (g$0$11039 g$0$14155)))) (quote #f))) ((lambda (g$0$14179) (quote ())) (g$0$11035 g$0$14155)))) (quote #f))) g$0$14137))) g$0$14133))) ((lambda (g$0$14181) (if (g$0$11027 g$0$14181) (begin (quote #f) ((lambda (g$0$14183) (if g$0$14183 (begin (quote #f) ((lambda (g$0$14185) (if g$0$14185 (begin (quote #f) (append g$0$14183 g$0$14185)) (quote #f))) ((lambda (g$0$14187) (if (equal? (g$0$11061 g$0$14187) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14181)))) (quote #f))) ((lambda (g$0$14189) (quote ())) (g$0$11035 g$0$14181)))) (quote #f))) g$0$14133))) g$0$14131))) (set! g$0$11352 (lambda (g$0$14191) ((lambda (g$0$14193) ((lambda (g$0$14195) (if (if g$0$14195 (begin (quote #f) (apply (lambda (g$0$14468 g$0$14469) (quote #t)) g$0$14195)) (quote #f)) (apply (lambda (g$0$14198 g$0$14199) (g$0$11324 (letrec ((g$0$14201 (lambda (g$0$14204 g$0$14205) (if (null? g$0$14205) ((lambda (g$0$14337) ((lambda (g$0$14339) (if (if g$0$14339 (begin (quote #f) (apply (lambda (g$0$14438 g$0$14439) (quote #t)) g$0$14339)) (quote #f)) (apply (lambda (g$0$14434 g$0$14435) (cons (quote begin) (cons g$0$14434 g$0$14435))) g$0$14339) ((lambda (g$0$14341) ((lambda (g$0$14343) (if (if g$0$14343 (begin (quote #f) (apply (lambda (g$0$14404 g$0$14405) (quote #t)) g$0$14343)) (quote #f)) (apply (lambda (g$0$14400 g$0$14401) (list (quote let) (list (list (quote t) g$0$14400)) (list (quote if) (quote t) (cons g$0$14401 (quote (t)))))) g$0$14343) ((lambda (g$0$14345) ((lambda (g$0$14347) (if (if g$0$14347 (begin (quote #f) (apply (lambda (g$0$14387) (quote #t)) g$0$14347)) (quote #f)) (apply (lambda (g$0$14385) (cons (quote or) (cons g$0$14385 (quote ((if #f #f)))))) g$0$14347) ((lambda (g$0$14349) ((lambda (g$0$14351) (if (if g$0$14351 (begin (quote #f) (apply (lambda (g$0$14364 g$0$14365) (quote #t)) g$0$14351)) (quote #f)) (apply (lambda (g$0$14360 g$0$14361) (list (quote if) g$0$14360 (cons (quote begin) g$0$14361))) g$0$14351) ((lambda (g$0$14353) ((lambda (g$0$14355) (if (if g$0$14355 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14355)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (g$0$11059 g$0$14191 (quote ())))) g$0$14355) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14353 (quote ()))))) ((lambda (g$0$14357) (quote ())) g$0$14353))) g$0$14349))) ((lambda (g$0$14367) (if (g$0$11027 g$0$14367) (begin (quote #f) ((lambda (g$0$14369) (if g$0$14369 (begin (quote #f) ((lambda (g$0$14371) (if g$0$14371 (begin (quote #f) (append g$0$14369 g$0$14371)) (quote #f))) ((letrec ((g$0$14373 (lambda (g$0$14375) (if (g$0$11027 g$0$14375) ((lambda (g$0$14377) (if g$0$14377 (begin (quote #f) ((lambda (g$0$14379) (if g$0$14379 (begin (quote #f) (map cons g$0$14377 g$0$14379)) (quote #f))) (g$0$14373 (g$0$11039 g$0$14375)))) (quote #f))) ((lambda (g$0$14381) (list g$0$14381)) (g$0$11035 g$0$14375))) (if (g$0$11031 g$0$14375) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14373) (g$0$11039 g$0$14367)))) (quote #f))) ((lambda (g$0$14383) (list g$0$14383)) (g$0$11035 g$0$14367)))) (quote #f))) g$0$14349))) g$0$14345))) ((lambda (g$0$14389) (if (g$0$11027 g$0$14389) (begin (quote #f) ((lambda (g$0$14391) (if g$0$14391 (begin (quote #f) ((lambda (g$0$14393) (if g$0$14393 (begin (quote #f) (append g$0$14391 g$0$14393)) (quote #f))) ((lambda (g$0$14395) (if (equal? (g$0$11061 g$0$14395) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14389)))) (quote #f))) ((lambda (g$0$14397) (list g$0$14397)) (g$0$11035 g$0$14389)))) (quote #f))) g$0$14345))) g$0$14341))) ((lambda (g$0$14407) (if (g$0$11027 g$0$14407) (begin (quote #f) ((lambda (g$0$14409) (if g$0$14409 (begin (quote #f) ((lambda (g$0$14411) (if g$0$14411 (begin (quote #f) (append g$0$14409 g$0$14411)) (quote #f))) ((lambda (g$0$14413) (if (g$0$11027 g$0$14413) (begin (quote #f) ((lambda (g$0$14415) (if g$0$14415 (begin (quote #f) ((lambda (g$0$14417) (if g$0$14417 (begin (quote #f) (append g$0$14415 g$0$14417)) (quote #f))) ((lambda (g$0$14419) (if (g$0$11027 g$0$14419) (begin (quote #f) ((lambda (g$0$14421) (if g$0$14421 (begin (quote #f) ((lambda (g$0$14423) (if g$0$14423 (begin (quote #f) (append g$0$14421 g$0$14423)) (quote #f))) ((lambda (g$0$14425) (if (equal? (g$0$11061 g$0$14425) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14419)))) (quote #f))) ((lambda (g$0$14427) (list g$0$14427)) (g$0$11035 g$0$14419)))) (quote #f))) (g$0$11039 g$0$14413)))) (quote #f))) ((lambda (g$0$14429) (if (g$0$11041 g$0$14429) (if (g$0$11049 g$0$14429 (g$0$11294 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14413)))) (quote #f))) (g$0$11039 g$0$14407)))) (quote #f))) ((lambda (g$0$14431) (list g$0$14431)) (g$0$11035 g$0$14407)))) (quote #f))) g$0$14341))) g$0$14337))) ((lambda (g$0$14441) (if (g$0$11027 g$0$14441) (begin (quote #f) ((lambda (g$0$14443) (if g$0$14443 (begin (quote #f) ((lambda (g$0$14445) (if g$0$14445 (begin (quote #f) (append g$0$14443 g$0$14445)) (quote #f))) ((lambda (g$0$14447) (if (g$0$11027 g$0$14447) (begin (quote #f) ((lambda (g$0$14449) (if g$0$14449 (begin (quote #f) ((lambda (g$0$14451) (if g$0$14451 (begin (quote #f) (append g$0$14449 g$0$14451)) (quote #f))) ((letrec ((g$0$14453 (lambda (g$0$14455) (if (g$0$11027 g$0$14455) ((lambda (g$0$14457) (if g$0$14457 (begin (quote #f) ((lambda (g$0$14459) (if g$0$14459 (begin (quote #f) (map cons g$0$14457 g$0$14459)) (quote #f))) (g$0$14453 (g$0$11039 g$0$14455)))) (quote #f))) ((lambda (g$0$14461) (list g$0$14461)) (g$0$11035 g$0$14455))) (if (g$0$11031 g$0$14455) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14453) (g$0$11039 g$0$14447)))) (quote #f))) ((lambda (g$0$14463) (list g$0$14463)) (g$0$11035 g$0$14447)))) (quote #f))) (g$0$11039 g$0$14441)))) (quote #f))) ((lambda (g$0$14465) (if (g$0$11041 g$0$14465) (if (g$0$11049 g$0$14465 (g$0$11294 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14441)))) (quote #f))) g$0$14337))) g$0$14204) ((lambda (g$0$14207) ((lambda (g$0$14209) (if (if g$0$14209 (begin (quote #f) (apply (lambda (g$0$14308 g$0$14309) (quote #t)) g$0$14209)) (quote #f)) (apply (lambda (g$0$14304 g$0$14305) (error (quote expander) (quote "~a ~s") (quote "incorrect position of keyword else") (g$0$11059 g$0$14191 (quote ())))) g$0$14209) ((lambda (g$0$14211) ((lambda (g$0$14213) (if (if g$0$14213 (begin (quote #f) (apply (lambda (g$0$14274 g$0$14275) (quote #t)) g$0$14213)) (quote #f)) (apply (lambda (g$0$14270 g$0$14271) (list (quote let) (list (list (quote t) g$0$14270)) (list (quote if) (quote t) (cons g$0$14271 (quote (t))) (g$0$14201 (car g$0$14205) (cdr g$0$14205))))) g$0$14213) ((lambda (g$0$14215) ((lambda (g$0$14217) (if (if g$0$14217 (begin (quote #f) (apply (lambda (g$0$14257) (quote #t)) g$0$14217)) (quote #f)) (apply (lambda (g$0$14255) (list (quote or) g$0$14255 (g$0$14201 (car g$0$14205) (cdr g$0$14205)))) g$0$14217) ((lambda (g$0$14219) ((lambda (g$0$14221) (if (if g$0$14221 (begin (quote #f) (apply (lambda (g$0$14234 g$0$14235) (quote #t)) g$0$14221)) (quote #f)) (apply (lambda (g$0$14230 g$0$14231) (list (quote if) g$0$14230 (cons (quote begin) g$0$14231) (g$0$14201 (car g$0$14205) (cdr g$0$14205)))) g$0$14221) ((lambda (g$0$14223) ((lambda (g$0$14225) (if (if g$0$14225 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14225)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (g$0$11059 g$0$14191 (quote ())))) g$0$14225) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14223 (quote ()))))) ((lambda (g$0$14227) (quote ())) g$0$14223))) g$0$14219))) ((lambda (g$0$14237) (if (g$0$11027 g$0$14237) (begin (quote #f) ((lambda (g$0$14239) (if g$0$14239 (begin (quote #f) ((lambda (g$0$14241) (if g$0$14241 (begin (quote #f) (append g$0$14239 g$0$14241)) (quote #f))) ((letrec ((g$0$14243 (lambda (g$0$14245) (if (g$0$11027 g$0$14245) ((lambda (g$0$14247) (if g$0$14247 (begin (quote #f) ((lambda (g$0$14249) (if g$0$14249 (begin (quote #f) (map cons g$0$14247 g$0$14249)) (quote #f))) (g$0$14243 (g$0$11039 g$0$14245)))) (quote #f))) ((lambda (g$0$14251) (list g$0$14251)) (g$0$11035 g$0$14245))) (if (g$0$11031 g$0$14245) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14243) (g$0$11039 g$0$14237)))) (quote #f))) ((lambda (g$0$14253) (list g$0$14253)) (g$0$11035 g$0$14237)))) (quote #f))) g$0$14219))) g$0$14215))) ((lambda (g$0$14259) (if (g$0$11027 g$0$14259) (begin (quote #f) ((lambda (g$0$14261) (if g$0$14261 (begin (quote #f) ((lambda (g$0$14263) (if g$0$14263 (begin (quote #f) (append g$0$14261 g$0$14263)) (quote #f))) ((lambda (g$0$14265) (if (equal? (g$0$11061 g$0$14265) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14259)))) (quote #f))) ((lambda (g$0$14267) (list g$0$14267)) (g$0$11035 g$0$14259)))) (quote #f))) g$0$14215))) g$0$14211))) ((lambda (g$0$14277) (if (g$0$11027 g$0$14277) (begin (quote #f) ((lambda (g$0$14279) (if g$0$14279 (begin (quote #f) ((lambda (g$0$14281) (if g$0$14281 (begin (quote #f) (append g$0$14279 g$0$14281)) (quote #f))) ((lambda (g$0$14283) (if (g$0$11027 g$0$14283) (begin (quote #f) ((lambda (g$0$14285) (if g$0$14285 (begin (quote #f) ((lambda (g$0$14287) (if g$0$14287 (begin (quote #f) (append g$0$14285 g$0$14287)) (quote #f))) ((lambda (g$0$14289) (if (g$0$11027 g$0$14289) (begin (quote #f) ((lambda (g$0$14291) (if g$0$14291 (begin (quote #f) ((lambda (g$0$14293) (if g$0$14293 (begin (quote #f) (append g$0$14291 g$0$14293)) (quote #f))) ((lambda (g$0$14295) (if (equal? (g$0$11061 g$0$14295) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14289)))) (quote #f))) ((lambda (g$0$14297) (list g$0$14297)) (g$0$11035 g$0$14289)))) (quote #f))) (g$0$11039 g$0$14283)))) (quote #f))) ((lambda (g$0$14299) (if (g$0$11041 g$0$14299) (if (g$0$11049 g$0$14299 (g$0$11294 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14283)))) (quote #f))) (g$0$11039 g$0$14277)))) (quote #f))) ((lambda (g$0$14301) (list g$0$14301)) (g$0$11035 g$0$14277)))) (quote #f))) g$0$14211))) g$0$14207))) ((lambda (g$0$14311) (if (g$0$11027 g$0$14311) (begin (quote #f) ((lambda (g$0$14313) (if g$0$14313 (begin (quote #f) ((lambda (g$0$14315) (if g$0$14315 (begin (quote #f) (append g$0$14313 g$0$14315)) (quote #f))) ((lambda (g$0$14317) (if (g$0$11027 g$0$14317) (begin (quote #f) ((lambda (g$0$14319) (if g$0$14319 (begin (quote #f) ((lambda (g$0$14321) (if g$0$14321 (begin (quote #f) (append g$0$14319 g$0$14321)) (quote #f))) ((letrec ((g$0$14323 (lambda (g$0$14325) (if (g$0$11027 g$0$14325) ((lambda (g$0$14327) (if g$0$14327 (begin (quote #f) ((lambda (g$0$14329) (if g$0$14329 (begin (quote #f) (map cons g$0$14327 g$0$14329)) (quote #f))) (g$0$14323 (g$0$11039 g$0$14325)))) (quote #f))) ((lambda (g$0$14331) (list g$0$14331)) (g$0$11035 g$0$14325))) (if (g$0$11031 g$0$14325) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14323) (g$0$11039 g$0$14317)))) (quote #f))) ((lambda (g$0$14333) (list g$0$14333)) (g$0$11035 g$0$14317)))) (quote #f))) (g$0$11039 g$0$14311)))) (quote #f))) ((lambda (g$0$14335) (if (g$0$11041 g$0$14335) (if (g$0$11049 g$0$14335 (g$0$11294 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14311)))) (quote #f))) g$0$14207))) g$0$14204))))) (g$0$14201 g$0$14198 g$0$14199)))) g$0$14195) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14193 (quote ()))))) ((lambda (g$0$14471) (if (g$0$11027 g$0$14471) (begin (quote #f) ((lambda (g$0$14473) (if g$0$14473 (begin (quote #f) ((lambda (g$0$14475) (if g$0$14475 (begin (quote #f) (append g$0$14473 g$0$14475)) (quote #f))) ((lambda (g$0$14477) (if (g$0$11027 g$0$14477) (begin (quote #f) ((lambda (g$0$14479) (if g$0$14479 (begin (quote #f) ((lambda (g$0$14481) (if g$0$14481 (begin (quote #f) (append g$0$14479 g$0$14481)) (quote #f))) ((letrec ((g$0$14483 (lambda (g$0$14485) (if (g$0$11027 g$0$14485) ((lambda (g$0$14487) (if g$0$14487 (begin (quote #f) ((lambda (g$0$14489) (if g$0$14489 (begin (quote #f) (map cons g$0$14487 g$0$14489)) (quote #f))) (g$0$14483 (g$0$11039 g$0$14485)))) (quote #f))) ((lambda (g$0$14491) (list g$0$14491)) (g$0$11035 g$0$14485))) (if (g$0$11031 g$0$14485) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$14483) (g$0$11039 g$0$14477)))) (quote #f))) ((lambda (g$0$14493) (list g$0$14493)) (g$0$11035 g$0$14477)))) (quote #f))) (g$0$11039 g$0$14471)))) (quote #f))) ((lambda (g$0$14495) (quote ())) (g$0$11035 g$0$14471)))) (quote #f))) g$0$14193))) g$0$14191))) (set! g$0$11354 (lambda (g$0$14497) ((lambda (g$0$14499) ((lambda (g$0$14501) (if (if g$0$14501 (begin (quote #f) (apply (lambda (g$0$14516 g$0$14517) (quote #t)) g$0$14501)) (quote #f)) (apply (lambda (g$0$14504 g$0$14505) ((lambda (g$0$14507) (begin (if (string? g$0$14507) (void) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$14497))) (with-input-from-file g$0$14507 (lambda () (letrec ((g$0$14509 (lambda (g$0$14511) ((lambda (g$0$14513) (if (eof-object? g$0$14513) (cons (g$0$11324 (quote begin)) (g$0$11007 g$0$14504 (reverse g$0$14511))) (g$0$14509 (cons g$0$14513 g$0$14511)))) (read))))) (g$0$14509 (quote ()))))))) (g$0$11061 g$0$14505))) g$0$14501) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14499 (quote ()))))) ((lambda (g$0$14519) (if (g$0$11027 g$0$14519) (begin (quote #f) ((lambda (g$0$14521) (if g$0$14521 (begin (quote #f) ((lambda (g$0$14523) (if g$0$14523 (begin (quote #f) (append g$0$14521 g$0$14523)) (quote #f))) ((lambda (g$0$14525) (if (g$0$11027 g$0$14525) (begin (quote #f) ((lambda (g$0$14527) (if g$0$14527 (begin (quote #f) ((lambda (g$0$14529) (if g$0$14529 (begin (quote #f) (append g$0$14527 g$0$14529)) (quote #f))) ((lambda (g$0$14531) (if (equal? (g$0$11061 g$0$14531) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14525)))) (quote #f))) ((lambda (g$0$14533) (list g$0$14533)) (g$0$11035 g$0$14525)))) (quote #f))) (g$0$11039 g$0$14519)))) (quote #f))) ((lambda (g$0$14535) (list g$0$14535)) (g$0$11035 g$0$14519)))) (quote #f))) g$0$14499))) g$0$14497))) (set! g$0$11356 (lambda (g$0$14537) ((lambda (g$0$14539) ((lambda (g$0$14541) (if (if g$0$14541 (begin (quote #f) (apply (lambda (g$0$14557 g$0$14558 g$0$14559) (quote #t)) g$0$14541)) (quote #f)) (apply (lambda (g$0$14545 g$0$14546 g$0$14547) (begin (if (for-all (lambda (g$0$14549) (if (g$0$11041 g$0$14549) (if (not (g$0$11049 g$0$14549 (g$0$11294 (quote ...)))) (begin (quote #f) (not (g$0$11049 g$0$14549 (g$0$11294 (quote _))))) (quote #f)) (quote #f))) g$0$14545) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (g$0$11059 g$0$14537 (quote ())))) (g$0$11324 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons g$0$14545 (map (lambda (g$0$14552 g$0$14553) (list g$0$14552 (list (quote syntax) g$0$14553))) g$0$14546 g$0$14547)))))))) g$0$14541) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14539 (quote ()))))) ((lambda (g$0$14561) (if (g$0$11027 g$0$14561) (begin (quote #f) ((lambda (g$0$14563) (if g$0$14563 (begin (quote #f) ((lambda (g$0$14565) (if g$0$14565 (begin (quote #f) (append g$0$14563 g$0$14565)) (quote #f))) ((lambda (g$0$14567) (if (g$0$11027 g$0$14567) (begin (quote #f) ((lambda (g$0$14569) (if g$0$14569 (begin (quote #f) ((lambda (g$0$14571) (if g$0$14571 (begin (quote #f) (append g$0$14569 g$0$14571)) (quote #f))) ((letrec ((g$0$14573 (lambda (g$0$14575) (if (g$0$11027 g$0$14575) ((lambda (g$0$14577) (if g$0$14577 (begin (quote #f) ((lambda (g$0$14579) (if g$0$14579 (begin (quote #f) (map cons g$0$14577 g$0$14579)) (quote #f))) (g$0$14573 (g$0$11039 g$0$14575)))) (quote #f))) ((lambda (g$0$14581) (if (g$0$11027 g$0$14581) (begin (quote #f) ((lambda (g$0$14583) (if g$0$14583 (begin (quote #f) ((lambda (g$0$14585) (if g$0$14585 (begin (quote #f) (append g$0$14583 g$0$14585)) (quote #f))) ((lambda (g$0$14587) (if (g$0$11027 g$0$14587) (begin (quote #f) ((lambda (g$0$14589) (if g$0$14589 (begin (quote #f) ((lambda (g$0$14591) (if g$0$14591 (begin (quote #f) (append g$0$14589 g$0$14591)) (quote #f))) ((lambda (g$0$14593) (if (equal? (g$0$11061 g$0$14593) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14587)))) (quote #f))) ((lambda (g$0$14595) (list g$0$14595)) (g$0$11035 g$0$14587)))) (quote #f))) (g$0$11039 g$0$14581)))) (quote #f))) ((lambda (g$0$14597) (list g$0$14597)) (g$0$11035 g$0$14581)))) (quote #f))) (g$0$11035 g$0$14575))) (if (g$0$11031 g$0$14575) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) g$0$14573) (g$0$11039 g$0$14567)))) (quote #f))) ((letrec ((g$0$14599 (lambda (g$0$14601) (if (g$0$11027 g$0$14601) ((lambda (g$0$14603) (if g$0$14603 (begin (quote #f) ((lambda (g$0$14605) (if g$0$14605 (begin (quote #f) (map cons g$0$14603 g$0$14605)) (quote #f))) (g$0$14599 (g$0$11039 g$0$14601)))) (quote #f))) ((lambda (g$0$14607) (list g$0$14607)) (g$0$11035 g$0$14601))) (if (g$0$11031 g$0$14601) (list (begin (quote lits) (quote ()))) (quote #f)))))) g$0$14599) (g$0$11035 g$0$14567)))) (quote #f))) (g$0$11039 g$0$14561)))) (quote #f))) ((lambda (g$0$14609) (quote ())) (g$0$11035 g$0$14561)))) (quote #f))) g$0$14539))) g$0$14537))) (set! g$0$11358 ((lambda () ((lambda (g$0$14633 g$0$14635 g$0$14637 g$0$14639 g$0$14641 g$0$14643) (begin (set! g$0$14633 (lambda (g$0$15284 g$0$15285) (letrec ((g$0$15287 (lambda (g$0$15289) (if (null? g$0$15289) g$0$15285 (g$0$14635 (car g$0$15289) (g$0$15287 (cdr g$0$15289))))))) (g$0$15287 g$0$15284)))) (set! g$0$14635 (lambda (g$0$15178 g$0$15179) ((lambda (g$0$15181) ((lambda (g$0$15183) (if (if g$0$15183 (begin (quote #f) (apply (lambda (g$0$15263) (quote #t)) g$0$15183)) (quote #f)) (apply (lambda (g$0$15217) ((lambda (g$0$15219) ((lambda (g$0$15221) (if (if g$0$15221 (begin (quote #f) (apply (lambda (g$0$15243) (quote #t)) g$0$15221)) (quote #f)) (apply (lambda (g$0$15241) (list (g$0$11294 (quote quote)) (cons g$0$15241 g$0$15217))) g$0$15221) ((lambda (g$0$15223) ((lambda (g$0$15225) (if (if g$0$15225 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15225)) (quote #f)) (apply (lambda () ((lambda (g$0$15227) ((lambda (g$0$15229) (if (if g$0$15229 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15229)) (quote #f)) (apply (lambda () (list (g$0$11294 (quote list)) g$0$15178)) g$0$15229) ((lambda (g$0$15231) ((lambda (g$0$15233) (if (if g$0$15233 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15233)) (quote #f)) (apply (lambda () (list (g$0$11294 (quote cons)) g$0$15178 g$0$15179)) g$0$15233) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15231 (quote ()))))) ((lambda (g$0$15235) (quote ())) g$0$15231))) g$0$15227))) ((lambda (g$0$15237) (if (equal? (g$0$11061 g$0$15237) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$15227))) g$0$15217)) g$0$15225) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15223 (quote ()))))) ((lambda (g$0$15239) (quote ())) g$0$15223))) g$0$15219))) ((lambda (g$0$15245) (if (g$0$11027 g$0$15245) (begin (quote #f) ((lambda (g$0$15247) (if g$0$15247 (begin (quote #f) ((lambda (g$0$15249) (if g$0$15249 (begin (quote #f) (append g$0$15247 g$0$15249)) (quote #f))) ((lambda (g$0$15251) (if (g$0$11027 g$0$15251) (begin (quote #f) ((lambda (g$0$15253) (if g$0$15253 (begin (quote #f) ((lambda (g$0$15255) (if g$0$15255 (begin (quote #f) (append g$0$15253 g$0$15255)) (quote #f))) ((lambda (g$0$15257) (if (equal? (g$0$11061 g$0$15257) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15251)))) (quote #f))) ((lambda (g$0$15259) (list g$0$15259)) (g$0$11035 g$0$15251)))) (quote #f))) (g$0$11039 g$0$15245)))) (quote #f))) ((lambda (g$0$15261) (if (g$0$11041 g$0$15261) (if (g$0$11049 g$0$15261 (g$0$11294 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15245)))) (quote #f))) g$0$15219))) g$0$15178)) g$0$15183) ((lambda (g$0$15185) ((lambda (g$0$15187) (if (if g$0$15187 (begin (quote #f) (apply (lambda (g$0$15197) (quote #t)) g$0$15187)) (quote #f)) (apply (lambda (g$0$15195) (cons* (g$0$11294 (quote list)) g$0$15178 g$0$15195)) g$0$15187) ((lambda (g$0$15189) ((lambda (g$0$15191) (if (if g$0$15191 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15191)) (quote #f)) (apply (lambda () (list (g$0$11294 (quote cons)) g$0$15178 g$0$15179)) g$0$15191) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15189 (quote ()))))) ((lambda (g$0$15193) (quote ())) g$0$15189))) g$0$15185))) ((lambda (g$0$15199) (if (g$0$11027 g$0$15199) (begin (quote #f) ((lambda (g$0$15201) (if g$0$15201 (begin (quote #f) ((lambda (g$0$15203) (if g$0$15203 (begin (quote #f) (append g$0$15201 g$0$15203)) (quote #f))) ((letrec ((g$0$15205 (lambda (g$0$15207) (if (g$0$11027 g$0$15207) ((lambda (g$0$15209) (if g$0$15209 (begin (quote #f) ((lambda (g$0$15211) (if g$0$15211 (begin (quote #f) (map cons g$0$15209 g$0$15211)) (quote #f))) (g$0$15205 (g$0$11039 g$0$15207)))) (quote #f))) ((lambda (g$0$15213) (list g$0$15213)) (g$0$11035 g$0$15207))) (if (g$0$11031 g$0$15207) (list (begin (quote stuff) (quote ()))) (quote #f)))))) g$0$15205) (g$0$11039 g$0$15199)))) (quote #f))) ((lambda (g$0$15215) (if (g$0$11041 g$0$15215) (if (g$0$11049 g$0$15215 (g$0$11294 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15199)))) (quote #f))) g$0$15185))) g$0$15181))) ((lambda (g$0$15265) (if (g$0$11027 g$0$15265) (begin (quote #f) ((lambda (g$0$15267) (if g$0$15267 (begin (quote #f) ((lambda (g$0$15269) (if g$0$15269 (begin (quote #f) (append g$0$15267 g$0$15269)) (quote #f))) ((lambda (g$0$15271) (if (g$0$11027 g$0$15271) (begin (quote #f) ((lambda (g$0$15273) (if g$0$15273 (begin (quote #f) ((lambda (g$0$15275) (if g$0$15275 (begin (quote #f) (append g$0$15273 g$0$15275)) (quote #f))) ((lambda (g$0$15277) (if (equal? (g$0$11061 g$0$15277) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15271)))) (quote #f))) ((lambda (g$0$15279) (list g$0$15279)) (g$0$11035 g$0$15271)))) (quote #f))) (g$0$11039 g$0$15265)))) (quote #f))) ((lambda (g$0$15281) (if (g$0$11041 g$0$15281) (if (g$0$11049 g$0$15281 (g$0$11294 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15265)))) (quote #f))) g$0$15181))) g$0$15179))) (set! g$0$14637 (lambda (g$0$15112 g$0$15113) ((lambda (g$0$15115) (if (null? g$0$15115) (list (g$0$11294 (quote quote)) (quote ())) (if (null? (cdr g$0$15115)) (car g$0$15115) (cons* (g$0$11294 (quote append)) g$0$15115)))) (letrec ((g$0$15117 (lambda (g$0$15119) (if (null? g$0$15119) ((lambda (g$0$15149) ((lambda (g$0$15151) (if (if g$0$15151 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15151)) (quote #f)) (apply (lambda () (quote ())) g$0$15151) ((lambda (g$0$15153) ((lambda (g$0$15155) (if (if g$0$15155 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15155)) (quote #f)) (apply (lambda () (list g$0$15113)) g$0$15155) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15153 (quote ()))))) ((lambda (g$0$15157) (quote ())) g$0$15153))) g$0$15149))) ((lambda (g$0$15159) (if (g$0$11027 g$0$15159) (begin (quote #f) ((lambda (g$0$15161) (if g$0$15161 (begin (quote #f) ((lambda (g$0$15163) (if g$0$15163 (begin (quote #f) (append g$0$15161 g$0$15163)) (quote #f))) ((lambda (g$0$15165) (if (g$0$11027 g$0$15165) (begin (quote #f) ((lambda (g$0$15167) (if g$0$15167 (begin (quote #f) ((lambda (g$0$15169) (if g$0$15169 (begin (quote #f) (append g$0$15167 g$0$15169)) (quote #f))) ((lambda (g$0$15171) (if (equal? (g$0$11061 g$0$15171) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15165)))) (quote #f))) ((lambda (g$0$15173) (if (equal? (g$0$11061 g$0$15173) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11035 g$0$15165)))) (quote #f))) (g$0$11039 g$0$15159)))) (quote #f))) ((lambda (g$0$15175) (if (g$0$11041 g$0$15175) (if (g$0$11049 g$0$15175 (g$0$11294 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15159)))) (quote #f))) g$0$15149))) g$0$15113) ((lambda (g$0$15121) ((lambda (g$0$15123) (if (if g$0$15123 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15123)) (quote #f)) (apply (lambda () (g$0$15117 (cdr g$0$15119))) g$0$15123) ((lambda (g$0$15125) ((lambda (g$0$15127) (if (if g$0$15127 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15127)) (quote #f)) (apply (lambda () (cons (car g$0$15119) (g$0$15117 (cdr g$0$15119)))) g$0$15127) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15125 (quote ()))))) ((lambda (g$0$15129) (quote ())) g$0$15125))) g$0$15121))) ((lambda (g$0$15131) (if (g$0$11027 g$0$15131) (begin (quote #f) ((lambda (g$0$15133) (if g$0$15133 (begin (quote #f) ((lambda (g$0$15135) (if g$0$15135 (begin (quote #f) (append g$0$15133 g$0$15135)) (quote #f))) ((lambda (g$0$15137) (if (g$0$11027 g$0$15137) (begin (quote #f) ((lambda (g$0$15139) (if g$0$15139 (begin (quote #f) ((lambda (g$0$15141) (if g$0$15141 (begin (quote #f) (append g$0$15139 g$0$15141)) (quote #f))) ((lambda (g$0$15143) (if (equal? (g$0$11061 g$0$15143) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15137)))) (quote #f))) ((lambda (g$0$15145) (if (equal? (g$0$11061 g$0$15145) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11035 g$0$15137)))) (quote #f))) (g$0$11039 g$0$15131)))) (quote #f))) ((lambda (g$0$15147) (if (g$0$11041 g$0$15147) (if (g$0$11049 g$0$15147 (g$0$11294 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15131)))) (quote #f))) g$0$15121))) (car g$0$15119)))))) (g$0$15117 g$0$15112))))) (set! g$0$14639 (lambda (g$0$14951) ((lambda (g$0$14953) ((lambda (g$0$14955) ((lambda (g$0$14957) (if (if g$0$14957 (begin (quote #f) (apply (lambda (g$0$15083) (quote #t)) g$0$14957)) (quote #f)) (apply (lambda (g$0$15081) (list (g$0$11294 (quote quote)) (list->vector g$0$15081))) g$0$14957) ((lambda (g$0$14959) ((lambda (g$0$14961) (if (if g$0$14961 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14961)) (quote #f)) (apply (lambda () (letrec ((g$0$14963 (lambda (g$0$14966 g$0$14967) ((lambda (g$0$14969) ((lambda (g$0$14971) (if (if g$0$14971 (begin (quote #f) (apply (lambda (g$0$15049) (quote #t)) g$0$14971)) (quote #f)) (apply (lambda (g$0$15045) (g$0$14967 (map (lambda (g$0$15047) (list (g$0$11294 (quote quote)) g$0$15047)) g$0$15045))) g$0$14971) ((lambda (g$0$14973) ((lambda (g$0$14975) (if (if g$0$14975 (begin (quote #f) (apply (lambda (g$0$15025) (quote #t)) g$0$14975)) (quote #f)) (apply (lambda (g$0$15023) (g$0$14967 g$0$15023)) g$0$14975) ((lambda (g$0$14977) ((lambda (g$0$14979) (if (if g$0$14979 (begin (quote #f) (apply (lambda (g$0$14994 g$0$14995) (quote #t)) g$0$14979)) (quote #f)) (apply (lambda (g$0$14988 g$0$14989) (g$0$14963 g$0$14989 (lambda (g$0$14991) (g$0$14967 (cons g$0$14988 g$0$14991))))) g$0$14979) ((lambda (g$0$14981) ((lambda (g$0$14983) (if (if g$0$14983 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14983)) (quote #f)) (apply (lambda () (list (g$0$11294 (quote list->vector)) g$0$14953)) g$0$14983) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14981 (quote ()))))) ((lambda (g$0$14985) (quote ())) g$0$14981))) g$0$14977))) ((lambda (g$0$14997) (if (g$0$11027 g$0$14997) (begin (quote #f) ((lambda (g$0$14999) (if g$0$14999 (begin (quote #f) ((lambda (g$0$15001) (if g$0$15001 (begin (quote #f) (append g$0$14999 g$0$15001)) (quote #f))) ((lambda (g$0$15003) (if (g$0$11027 g$0$15003) (begin (quote #f) ((lambda (g$0$15005) (if g$0$15005 (begin (quote #f) ((lambda (g$0$15007) (if g$0$15007 (begin (quote #f) (append g$0$15005 g$0$15007)) (quote #f))) ((lambda (g$0$15009) (if (g$0$11027 g$0$15009) (begin (quote #f) ((lambda (g$0$15011) (if g$0$15011 (begin (quote #f) ((lambda (g$0$15013) (if g$0$15013 (begin (quote #f) (append g$0$15011 g$0$15013)) (quote #f))) ((lambda (g$0$15015) (if (equal? (g$0$11061 g$0$15015) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15009)))) (quote #f))) ((lambda (g$0$15017) (list g$0$15017)) (g$0$11035 g$0$15009)))) (quote #f))) (g$0$11039 g$0$15003)))) (quote #f))) ((lambda (g$0$15019) (list g$0$15019)) (g$0$11035 g$0$15003)))) (quote #f))) (g$0$11039 g$0$14997)))) (quote #f))) ((lambda (g$0$15021) (if (g$0$11041 g$0$15021) (if (g$0$11049 g$0$15021 (g$0$11294 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14997)))) (quote #f))) g$0$14977))) g$0$14973))) ((lambda (g$0$15027) (if (g$0$11027 g$0$15027) (begin (quote #f) ((lambda (g$0$15029) (if g$0$15029 (begin (quote #f) ((lambda (g$0$15031) (if g$0$15031 (begin (quote #f) (append g$0$15029 g$0$15031)) (quote #f))) ((letrec ((g$0$15033 (lambda (g$0$15035) (if (g$0$11027 g$0$15035) ((lambda (g$0$15037) (if g$0$15037 (begin (quote #f) ((lambda (g$0$15039) (if g$0$15039 (begin (quote #f) (map cons g$0$15037 g$0$15039)) (quote #f))) (g$0$15033 (g$0$11039 g$0$15035)))) (quote #f))) ((lambda (g$0$15041) (list g$0$15041)) (g$0$11035 g$0$15035))) (if (g$0$11031 g$0$15035) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$15033) (g$0$11039 g$0$15027)))) (quote #f))) ((lambda (g$0$15043) (if (g$0$11041 g$0$15043) (if (g$0$11049 g$0$15043 (g$0$11294 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15027)))) (quote #f))) g$0$14973))) g$0$14969))) ((lambda (g$0$15051) (if (g$0$11027 g$0$15051) (begin (quote #f) ((lambda (g$0$15053) (if g$0$15053 (begin (quote #f) ((lambda (g$0$15055) (if g$0$15055 (begin (quote #f) (append g$0$15053 g$0$15055)) (quote #f))) ((lambda (g$0$15057) (if (g$0$11027 g$0$15057) (begin (quote #f) ((lambda (g$0$15059) (if g$0$15059 (begin (quote #f) ((lambda (g$0$15061) (if g$0$15061 (begin (quote #f) (append g$0$15059 g$0$15061)) (quote #f))) ((lambda (g$0$15063) (if (equal? (g$0$11061 g$0$15063) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15057)))) (quote #f))) ((letrec ((g$0$15065 (lambda (g$0$15067) (if (g$0$11027 g$0$15067) ((lambda (g$0$15069) (if g$0$15069 (begin (quote #f) ((lambda (g$0$15071) (if g$0$15071 (begin (quote #f) (map cons g$0$15069 g$0$15071)) (quote #f))) (g$0$15065 (g$0$11039 g$0$15067)))) (quote #f))) ((lambda (g$0$15073) (list g$0$15073)) (g$0$11035 g$0$15067))) (if (g$0$11031 g$0$15067) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$15065) (g$0$11035 g$0$15057)))) (quote #f))) (g$0$11039 g$0$15051)))) (quote #f))) ((lambda (g$0$15075) (if (g$0$11041 g$0$15075) (if (g$0$11049 g$0$15075 (g$0$11294 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15051)))) (quote #f))) g$0$14969))) g$0$14966)))) (g$0$14963 g$0$14951 (lambda (g$0$15077) (cons* (g$0$11294 (quote vector)) g$0$15077))))) g$0$14961) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14959 (quote ()))))) ((lambda (g$0$15079) (quote ())) g$0$14959))) g$0$14955))) ((lambda (g$0$15085) (if (g$0$11027 g$0$15085) (begin (quote #f) ((lambda (g$0$15087) (if g$0$15087 (begin (quote #f) ((lambda (g$0$15089) (if g$0$15089 (begin (quote #f) (append g$0$15087 g$0$15089)) (quote #f))) ((lambda (g$0$15091) (if (g$0$11027 g$0$15091) (begin (quote #f) ((lambda (g$0$15093) (if g$0$15093 (begin (quote #f) ((lambda (g$0$15095) (if g$0$15095 (begin (quote #f) (append g$0$15093 g$0$15095)) (quote #f))) ((lambda (g$0$15097) (if (equal? (g$0$11061 g$0$15097) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15091)))) (quote #f))) ((letrec ((g$0$15099 (lambda (g$0$15101) (if (g$0$11027 g$0$15101) ((lambda (g$0$15103) (if g$0$15103 (begin (quote #f) ((lambda (g$0$15105) (if g$0$15105 (begin (quote #f) (map cons g$0$15103 g$0$15105)) (quote #f))) (g$0$15099 (g$0$11039 g$0$15101)))) (quote #f))) ((lambda (g$0$15107) (list g$0$15107)) (g$0$11035 g$0$15101))) (if (g$0$11031 g$0$15101) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$15099) (g$0$11035 g$0$15091)))) (quote #f))) (g$0$11039 g$0$15085)))) (quote #f))) ((lambda (g$0$15109) (if (g$0$11041 g$0$15109) (if (g$0$11049 g$0$15109 (g$0$11294 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15085)))) (quote #f))) g$0$14955))) g$0$14953)) g$0$14951))) (set! g$0$14641 (lambda (g$0$14858 g$0$14859) ((lambda (g$0$14861) ((lambda (g$0$14863) (if (if g$0$14863 (begin (quote #f) (apply (lambda (g$0$14938 g$0$14939) (quote #t)) g$0$14863)) (quote #f)) (apply (lambda (g$0$14872 g$0$14873) ((lambda (g$0$14875) ((lambda (g$0$14877) (if (if g$0$14877 (begin (quote #f) (apply (lambda (g$0$14917) (quote #t)) g$0$14877)) (quote #f)) (apply (lambda (g$0$14915) (if (= g$0$14859 (quote 0)) (g$0$14633 g$0$14915 (g$0$14641 g$0$14873 g$0$14859)) (g$0$14635 (g$0$14635 (list (g$0$11294 (quote quote)) (quote unquote)) (g$0$14643 g$0$14915 (- g$0$14859 (quote 1)))) (g$0$14641 g$0$14873 g$0$14859)))) g$0$14877) ((lambda (g$0$14879) ((lambda (g$0$14881) (if (if g$0$14881 (begin (quote #f) (apply (lambda (g$0$14895) (quote #t)) g$0$14881)) (quote #f)) (apply (lambda (g$0$14893) (if (= g$0$14859 (quote 0)) (g$0$14637 g$0$14893 (g$0$14641 g$0$14873 g$0$14859)) (g$0$14635 (g$0$14635 (list (g$0$11294 (quote quote)) (quote unquote-splicing)) (g$0$14643 g$0$14893 (- g$0$14859 (quote 1)))) (g$0$14641 g$0$14873 g$0$14859)))) g$0$14881) ((lambda (g$0$14883) ((lambda (g$0$14885) (if (if g$0$14885 (begin (quote #f) (apply (lambda (g$0$14889) (quote #t)) g$0$14885)) (quote #f)) (apply (lambda (g$0$14887) (g$0$14635 (g$0$14643 g$0$14887 g$0$14859) (g$0$14641 g$0$14873 g$0$14859))) g$0$14885) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14883 (quote ()))))) ((lambda (g$0$14891) (list g$0$14891)) g$0$14883))) g$0$14879))) ((lambda (g$0$14897) (if (g$0$11027 g$0$14897) (begin (quote #f) ((lambda (g$0$14899) (if g$0$14899 (begin (quote #f) ((lambda (g$0$14901) (if g$0$14901 (begin (quote #f) (append g$0$14899 g$0$14901)) (quote #f))) ((letrec ((g$0$14903 (lambda (g$0$14905) (if (g$0$11027 g$0$14905) ((lambda (g$0$14907) (if g$0$14907 (begin (quote #f) ((lambda (g$0$14909) (if g$0$14909 (begin (quote #f) (map cons g$0$14907 g$0$14909)) (quote #f))) (g$0$14903 (g$0$11039 g$0$14905)))) (quote #f))) ((lambda (g$0$14911) (list g$0$14911)) (g$0$11035 g$0$14905))) (if (g$0$11031 g$0$14905) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14903) (g$0$11039 g$0$14897)))) (quote #f))) ((lambda (g$0$14913) (if (g$0$11041 g$0$14913) (if (g$0$11049 g$0$14913 (g$0$11294 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14897)))) (quote #f))) g$0$14879))) g$0$14875))) ((lambda (g$0$14919) (if (g$0$11027 g$0$14919) (begin (quote #f) ((lambda (g$0$14921) (if g$0$14921 (begin (quote #f) ((lambda (g$0$14923) (if g$0$14923 (begin (quote #f) (append g$0$14921 g$0$14923)) (quote #f))) ((letrec ((g$0$14925 (lambda (g$0$14927) (if (g$0$11027 g$0$14927) ((lambda (g$0$14929) (if g$0$14929 (begin (quote #f) ((lambda (g$0$14931) (if g$0$14931 (begin (quote #f) (map cons g$0$14929 g$0$14931)) (quote #f))) (g$0$14925 (g$0$11039 g$0$14927)))) (quote #f))) ((lambda (g$0$14933) (list g$0$14933)) (g$0$11035 g$0$14927))) (if (g$0$11031 g$0$14927) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14925) (g$0$11039 g$0$14919)))) (quote #f))) ((lambda (g$0$14935) (if (g$0$11041 g$0$14935) (if (g$0$11049 g$0$14935 (g$0$11294 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14919)))) (quote #f))) g$0$14875))) g$0$14872)) g$0$14863) ((lambda (g$0$14865) ((lambda (g$0$14867) (if (if g$0$14867 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14867)) (quote #f)) (apply (lambda () (list (g$0$11294 (quote quote)) (quote ()))) g$0$14867) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14865 (quote ()))))) ((lambda (g$0$14869) (if (equal? (g$0$11061 g$0$14869) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$14865))) g$0$14861))) ((lambda (g$0$14941) (if (g$0$11027 g$0$14941) (begin (quote #f) ((lambda (g$0$14943) (if g$0$14943 (begin (quote #f) ((lambda (g$0$14945) (if g$0$14945 (begin (quote #f) (append g$0$14943 g$0$14945)) (quote #f))) ((lambda (g$0$14947) (list g$0$14947)) (g$0$11039 g$0$14941)))) (quote #f))) ((lambda (g$0$14949) (list g$0$14949)) (g$0$11035 g$0$14941)))) (quote #f))) g$0$14861))) g$0$14858))) (set! g$0$14643 (lambda (g$0$14674 g$0$14675) ((lambda (g$0$14677) ((lambda (g$0$14679) (if (if g$0$14679 (begin (quote #f) (apply (lambda (g$0$14837) (quote #t)) g$0$14679)) (quote #f)) (apply (lambda (g$0$14835) (if (= g$0$14675 (quote 0)) g$0$14835 (g$0$14635 (list (g$0$11294 (quote quote)) (quote unquote)) (g$0$14643 (list g$0$14835) (- g$0$14675 (quote 1)))))) g$0$14679) ((lambda (g$0$14681) ((lambda (g$0$14683) (if (if g$0$14683 (begin (quote #f) (apply (lambda (g$0$14806 g$0$14807) (quote #t)) g$0$14683)) (quote #f)) (apply (lambda (g$0$14802 g$0$14803) (if (= g$0$14675 (quote 0)) (g$0$14633 g$0$14802 (g$0$14643 g$0$14803 g$0$14675)) (g$0$14635 (g$0$14635 (list (g$0$11294 (quote quote)) (quote unquote)) (g$0$14643 g$0$14802 (- g$0$14675 (quote 1)))) (g$0$14643 g$0$14803 g$0$14675)))) g$0$14683) ((lambda (g$0$14685) ((lambda (g$0$14687) (if (if g$0$14687 (begin (quote #f) (apply (lambda (g$0$14772 g$0$14773) (quote #t)) g$0$14687)) (quote #f)) (apply (lambda (g$0$14768 g$0$14769) (if (= g$0$14675 (quote 0)) (g$0$14637 g$0$14768 (g$0$14643 g$0$14769 g$0$14675)) (g$0$14635 (g$0$14635 (list (g$0$11294 (quote quote)) (quote unquote-splicing)) (g$0$14643 g$0$14768 (- g$0$14675 (quote 1)))) (g$0$14643 g$0$14769 g$0$14675)))) g$0$14687) ((lambda (g$0$14689) ((lambda (g$0$14691) (if (if g$0$14691 (begin (quote #f) (apply (lambda (g$0$14747) (quote #t)) g$0$14691)) (quote #f)) (apply (lambda (g$0$14745) (g$0$14635 (list (g$0$11294 (quote quote)) (quote quasiquote)) (g$0$14643 (list g$0$14745) (+ g$0$14675 (quote 1))))) g$0$14691) ((lambda (g$0$14693) ((lambda (g$0$14695) (if (if g$0$14695 (begin (quote #f) (apply (lambda (g$0$14732 g$0$14733) (quote #t)) g$0$14695)) (quote #f)) (apply (lambda (g$0$14728 g$0$14729) (g$0$14635 (g$0$14643 g$0$14728 g$0$14675) (g$0$14643 g$0$14729 g$0$14675))) g$0$14695) ((lambda (g$0$14697) ((lambda (g$0$14699) (if (if g$0$14699 (begin (quote #f) (apply (lambda (g$0$14713) (not (g$0$10993 g$0$14713))) g$0$14699)) (quote #f)) (apply (lambda (g$0$14711) (g$0$14639 (g$0$14641 g$0$14711 g$0$14675))) g$0$14699) ((lambda (g$0$14701) ((lambda (g$0$14703) (if (if g$0$14703 (begin (quote #f) (apply (lambda (g$0$14707) (quote #t)) g$0$14703)) (quote #f)) (apply (lambda (g$0$14705) (list (g$0$11294 (quote quote)) g$0$14705)) g$0$14703) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14701 (quote ()))))) ((lambda (g$0$14709) (list g$0$14709)) g$0$14701))) g$0$14697))) ((lambda (g$0$14715) (if (g$0$11029 g$0$14715) (begin (quote #f) ((letrec ((g$0$14717 (lambda (g$0$14719) (if (g$0$11027 g$0$14719) ((lambda (g$0$14721) (if g$0$14721 (begin (quote #f) ((lambda (g$0$14723) (if g$0$14723 (begin (quote #f) (map cons g$0$14721 g$0$14723)) (quote #f))) (g$0$14717 (g$0$11039 g$0$14719)))) (quote #f))) ((lambda (g$0$14725) (list g$0$14725)) (g$0$11035 g$0$14719))) (if (g$0$11031 g$0$14719) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$14717) (g$0$11025 g$0$14715))) (quote #f))) g$0$14697))) g$0$14693))) ((lambda (g$0$14735) (if (g$0$11027 g$0$14735) (begin (quote #f) ((lambda (g$0$14737) (if g$0$14737 (begin (quote #f) ((lambda (g$0$14739) (if g$0$14739 (begin (quote #f) (append g$0$14737 g$0$14739)) (quote #f))) ((lambda (g$0$14741) (list g$0$14741)) (g$0$11039 g$0$14735)))) (quote #f))) ((lambda (g$0$14743) (list g$0$14743)) (g$0$11035 g$0$14735)))) (quote #f))) g$0$14693))) g$0$14689))) ((lambda (g$0$14749) (if (g$0$11027 g$0$14749) (begin (quote #f) ((lambda (g$0$14751) (if g$0$14751 (begin (quote #f) ((lambda (g$0$14753) (if g$0$14753 (begin (quote #f) (append g$0$14751 g$0$14753)) (quote #f))) ((lambda (g$0$14755) (if (g$0$11027 g$0$14755) (begin (quote #f) ((lambda (g$0$14757) (if g$0$14757 (begin (quote #f) ((lambda (g$0$14759) (if g$0$14759 (begin (quote #f) (append g$0$14757 g$0$14759)) (quote #f))) ((lambda (g$0$14761) (if (equal? (g$0$11061 g$0$14761) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14755)))) (quote #f))) ((lambda (g$0$14763) (list g$0$14763)) (g$0$11035 g$0$14755)))) (quote #f))) (g$0$11039 g$0$14749)))) (quote #f))) ((lambda (g$0$14765) (if (g$0$11041 g$0$14765) (if (g$0$11049 g$0$14765 (g$0$11294 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14749)))) (quote #f))) g$0$14689))) g$0$14685))) ((lambda (g$0$14775) (if (g$0$11027 g$0$14775) (begin (quote #f) ((lambda (g$0$14777) (if g$0$14777 (begin (quote #f) ((lambda (g$0$14779) (if g$0$14779 (begin (quote #f) (append g$0$14777 g$0$14779)) (quote #f))) ((lambda (g$0$14781) (list g$0$14781)) (g$0$11039 g$0$14775)))) (quote #f))) ((lambda (g$0$14783) (if (g$0$11027 g$0$14783) (begin (quote #f) ((lambda (g$0$14785) (if g$0$14785 (begin (quote #f) ((lambda (g$0$14787) (if g$0$14787 (begin (quote #f) (append g$0$14785 g$0$14787)) (quote #f))) ((letrec ((g$0$14789 (lambda (g$0$14791) (if (g$0$11027 g$0$14791) ((lambda (g$0$14793) (if g$0$14793 (begin (quote #f) ((lambda (g$0$14795) (if g$0$14795 (begin (quote #f) (map cons g$0$14793 g$0$14795)) (quote #f))) (g$0$14789 (g$0$11039 g$0$14791)))) (quote #f))) ((lambda (g$0$14797) (list g$0$14797)) (g$0$11035 g$0$14791))) (if (g$0$11031 g$0$14791) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14789) (g$0$11039 g$0$14783)))) (quote #f))) ((lambda (g$0$14799) (if (g$0$11041 g$0$14799) (if (g$0$11049 g$0$14799 (g$0$11294 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14783)))) (quote #f))) (g$0$11035 g$0$14775)))) (quote #f))) g$0$14685))) g$0$14681))) ((lambda (g$0$14809) (if (g$0$11027 g$0$14809) (begin (quote #f) ((lambda (g$0$14811) (if g$0$14811 (begin (quote #f) ((lambda (g$0$14813) (if g$0$14813 (begin (quote #f) (append g$0$14811 g$0$14813)) (quote #f))) ((lambda (g$0$14815) (list g$0$14815)) (g$0$11039 g$0$14809)))) (quote #f))) ((lambda (g$0$14817) (if (g$0$11027 g$0$14817) (begin (quote #f) ((lambda (g$0$14819) (if g$0$14819 (begin (quote #f) ((lambda (g$0$14821) (if g$0$14821 (begin (quote #f) (append g$0$14819 g$0$14821)) (quote #f))) ((letrec ((g$0$14823 (lambda (g$0$14825) (if (g$0$11027 g$0$14825) ((lambda (g$0$14827) (if g$0$14827 (begin (quote #f) ((lambda (g$0$14829) (if g$0$14829 (begin (quote #f) (map cons g$0$14827 g$0$14829)) (quote #f))) (g$0$14823 (g$0$11039 g$0$14825)))) (quote #f))) ((lambda (g$0$14831) (list g$0$14831)) (g$0$11035 g$0$14825))) (if (g$0$11031 g$0$14825) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14823) (g$0$11039 g$0$14817)))) (quote #f))) ((lambda (g$0$14833) (if (g$0$11041 g$0$14833) (if (g$0$11049 g$0$14833 (g$0$11294 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14817)))) (quote #f))) (g$0$11035 g$0$14809)))) (quote #f))) g$0$14681))) g$0$14677))) ((lambda (g$0$14839) (if (g$0$11027 g$0$14839) (begin (quote #f) ((lambda (g$0$14841) (if g$0$14841 (begin (quote #f) ((lambda (g$0$14843) (if g$0$14843 (begin (quote #f) (append g$0$14841 g$0$14843)) (quote #f))) ((lambda (g$0$14845) (if (g$0$11027 g$0$14845) (begin (quote #f) ((lambda (g$0$14847) (if g$0$14847 (begin (quote #f) ((lambda (g$0$14849) (if g$0$14849 (begin (quote #f) (append g$0$14847 g$0$14849)) (quote #f))) ((lambda (g$0$14851) (if (equal? (g$0$11061 g$0$14851) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14845)))) (quote #f))) ((lambda (g$0$14853) (list g$0$14853)) (g$0$11035 g$0$14845)))) (quote #f))) (g$0$11039 g$0$14839)))) (quote #f))) ((lambda (g$0$14855) (if (g$0$11041 g$0$14855) (if (g$0$11049 g$0$14855 (g$0$11294 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$14839)))) (quote #f))) g$0$14677))) g$0$14674))) (lambda (g$0$14645) ((lambda (g$0$14647) ((lambda (g$0$14649) (if (if g$0$14649 (begin (quote #f) (apply (lambda (g$0$14653) (quote #t)) g$0$14649)) (quote #f)) (apply (lambda (g$0$14651) (g$0$14643 g$0$14651 (quote 0))) g$0$14649) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$14647 (quote ()))))) ((lambda (g$0$14655) (if (g$0$11027 g$0$14655) (begin (quote #f) ((lambda (g$0$14657) (if g$0$14657 (begin (quote #f) ((lambda (g$0$14659) (if g$0$14659 (begin (quote #f) (append g$0$14657 g$0$14659)) (quote #f))) ((lambda (g$0$14661) (if (g$0$11027 g$0$14661) (begin (quote #f) ((lambda (g$0$14663) (if g$0$14663 (begin (quote #f) ((lambda (g$0$14665) (if g$0$14665 (begin (quote #f) (append g$0$14663 g$0$14665)) (quote #f))) ((lambda (g$0$14667) (if (equal? (g$0$11061 g$0$14667) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$14661)))) (quote #f))) ((lambda (g$0$14669) (list g$0$14669)) (g$0$11035 g$0$14661)))) (quote #f))) (g$0$11039 g$0$14655)))) (quote #f))) ((lambda (g$0$14671) (quote ())) (g$0$11035 g$0$14655)))) (quote #f))) g$0$14647))) g$0$14645)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$11360 ((lambda () ((lambda (g$0$15291) (begin (set! g$0$15291 (lambda (g$0$15328 g$0$15329) ((lambda (g$0$15331) ((lambda (g$0$15333) (if (if g$0$15333 (begin (quote #f) (apply (lambda (g$0$15523) (quote #t)) g$0$15333)) (quote #f)) (apply (lambda (g$0$15513) (if (= g$0$15329 (quote 0)) ((lambda (g$0$15521) (values (list g$0$15521) (list g$0$15513) g$0$15521)) (gensym)) (call-with-values (lambda () (g$0$15291 g$0$15513 (- g$0$15329 (quote 1)))) (lambda (g$0$15517 g$0$15518 g$0$15519) (values g$0$15517 g$0$15518 (list (quote unsyntax) g$0$15519)))))) g$0$15333) ((lambda (g$0$15335) ((lambda (g$0$15337) (if (if g$0$15337 (begin (quote #f) (apply (lambda () (= g$0$15329 (quote 0))) g$0$15337)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax") (g$0$11059 g$0$15328 (quote ())))) g$0$15337) ((lambda (g$0$15339) ((lambda (g$0$15341) (if (if g$0$15341 (begin (quote #f) (apply (lambda (g$0$15482 g$0$15483) (quote #t)) g$0$15341)) (quote #f)) (apply (lambda (g$0$15464 g$0$15465) (call-with-values (lambda () (g$0$15291 g$0$15465 g$0$15329)) (lambda (g$0$15469 g$0$15470 g$0$15471) (if (= g$0$15329 (quote 0)) ((lambda (g$0$15479) (values (cons (cons g$0$15479 (quote (...))) g$0$15469) (cons g$0$15464 g$0$15470) (cons g$0$15479 (cons (quote ...) g$0$15471)))) (gensym)) (call-with-values (lambda () (g$0$15291 g$0$15464 (- g$0$15329 (quote 1)))) (lambda (g$0$15475 g$0$15476 g$0$15477) (values (append g$0$15475 g$0$15469) (append g$0$15476 g$0$15470) (cons (list (quote unsyntax-splicing) g$0$15477) g$0$15471)))))))) g$0$15341) ((lambda (g$0$15343) ((lambda (g$0$15345) (if (if g$0$15345 (begin (quote #f) (apply (lambda () (= g$0$15329 (quote 0))) g$0$15345)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax-splicing") (g$0$11059 g$0$15328 (quote ())))) g$0$15345) ((lambda (g$0$15347) ((lambda (g$0$15349) (if (if g$0$15349 (begin (quote #f) (apply (lambda (g$0$15441) (quote #t)) g$0$15349)) (quote #f)) (apply (lambda (g$0$15433) (call-with-values (lambda () (g$0$15291 g$0$15433 (+ g$0$15329 (quote 1)))) (lambda (g$0$15437 g$0$15438 g$0$15439) (values g$0$15437 g$0$15438 (list (quote quasisyntax) g$0$15439))))) g$0$15349) ((lambda (g$0$15351) ((lambda (g$0$15353) (if (if g$0$15353 (begin (quote #f) (apply (lambda (g$0$15420 g$0$15421) (quote #t)) g$0$15353)) (quote #f)) (apply (lambda (g$0$15404 g$0$15405) (call-with-values (lambda () (g$0$15291 g$0$15404 g$0$15329)) (lambda (g$0$15412 g$0$15413 g$0$15414) (call-with-values (lambda () (g$0$15291 g$0$15405 g$0$15329)) (lambda (g$0$15415 g$0$15416 g$0$15417) (values (append g$0$15415 g$0$15412) (append g$0$15416 g$0$15413) (cons g$0$15414 g$0$15417))))))) g$0$15353) ((lambda (g$0$15355) ((lambda (g$0$15357) (if (if g$0$15357 (begin (quote #f) (apply (lambda (g$0$15389) (not (g$0$10993 g$0$15328))) g$0$15357)) (quote #f)) (apply (lambda (g$0$15365) (call-with-values (lambda () (letrec ((g$0$15367 (lambda (g$0$15369) (if (null? g$0$15369) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (g$0$15291 (car g$0$15369) g$0$15329)) (lambda (g$0$15373 g$0$15374 g$0$15375) (call-with-values (lambda () (g$0$15367 (cdr g$0$15369))) (lambda (g$0$15379 g$0$15380 g$0$15381) (values (append g$0$15373 g$0$15379) (append g$0$15374 g$0$15380) (cons g$0$15375 g$0$15381)))))))))) (g$0$15367 g$0$15365))) (lambda (g$0$15385 g$0$15386 g$0$15387) (values g$0$15385 g$0$15386 (list->vector g$0$15387))))) g$0$15357) ((lambda (g$0$15359) ((lambda (g$0$15361) (if (if g$0$15361 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15361)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) g$0$15328)) g$0$15361) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15359 (quote ()))))) ((lambda (g$0$15363) (quote ())) g$0$15359))) g$0$15355))) ((lambda (g$0$15391) (if (g$0$11029 g$0$15391) (begin (quote #f) ((letrec ((g$0$15393 (lambda (g$0$15395) (if (g$0$11027 g$0$15395) ((lambda (g$0$15397) (if g$0$15397 (begin (quote #f) ((lambda (g$0$15399) (if g$0$15399 (begin (quote #f) (map cons g$0$15397 g$0$15399)) (quote #f))) (g$0$15393 (g$0$11039 g$0$15395)))) (quote #f))) ((lambda (g$0$15401) (list g$0$15401)) (g$0$11035 g$0$15395))) (if (g$0$11031 g$0$15395) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$15393) (g$0$11025 g$0$15391))) (quote #f))) g$0$15355))) g$0$15351))) ((lambda (g$0$15423) (if (g$0$11027 g$0$15423) (begin (quote #f) ((lambda (g$0$15425) (if g$0$15425 (begin (quote #f) ((lambda (g$0$15427) (if g$0$15427 (begin (quote #f) (append g$0$15425 g$0$15427)) (quote #f))) ((lambda (g$0$15429) (list g$0$15429)) (g$0$11039 g$0$15423)))) (quote #f))) ((lambda (g$0$15431) (list g$0$15431)) (g$0$11035 g$0$15423)))) (quote #f))) g$0$15351))) g$0$15347))) ((lambda (g$0$15443) (if (g$0$11027 g$0$15443) (begin (quote #f) ((lambda (g$0$15445) (if g$0$15445 (begin (quote #f) ((lambda (g$0$15447) (if g$0$15447 (begin (quote #f) (append g$0$15445 g$0$15447)) (quote #f))) ((lambda (g$0$15449) (if (g$0$11027 g$0$15449) (begin (quote #f) ((lambda (g$0$15451) (if g$0$15451 (begin (quote #f) ((lambda (g$0$15453) (if g$0$15453 (begin (quote #f) (append g$0$15451 g$0$15453)) (quote #f))) ((lambda (g$0$15455) (if (equal? (g$0$11061 g$0$15455) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15449)))) (quote #f))) ((lambda (g$0$15457) (list g$0$15457)) (g$0$11035 g$0$15449)))) (quote #f))) (g$0$11039 g$0$15443)))) (quote #f))) ((lambda (g$0$15459) (if (g$0$11041 g$0$15459) (if (g$0$11049 g$0$15459 (g$0$11294 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15443)))) (quote #f))) g$0$15347))) g$0$15343))) ((lambda (g$0$15461) (if (g$0$11041 g$0$15461) (if (g$0$11049 g$0$15461 (g$0$11294 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$15343))) g$0$15339))) ((lambda (g$0$15485) (if (g$0$11027 g$0$15485) (begin (quote #f) ((lambda (g$0$15487) (if g$0$15487 (begin (quote #f) ((lambda (g$0$15489) (if g$0$15489 (begin (quote #f) (append g$0$15487 g$0$15489)) (quote #f))) ((lambda (g$0$15491) (list g$0$15491)) (g$0$11039 g$0$15485)))) (quote #f))) ((lambda (g$0$15493) (if (g$0$11027 g$0$15493) (begin (quote #f) ((lambda (g$0$15495) (if g$0$15495 (begin (quote #f) ((lambda (g$0$15497) (if g$0$15497 (begin (quote #f) (append g$0$15495 g$0$15497)) (quote #f))) ((lambda (g$0$15499) (if (g$0$11027 g$0$15499) (begin (quote #f) ((lambda (g$0$15501) (if g$0$15501 (begin (quote #f) ((lambda (g$0$15503) (if g$0$15503 (begin (quote #f) (append g$0$15501 g$0$15503)) (quote #f))) ((lambda (g$0$15505) (if (equal? (g$0$11061 g$0$15505) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15499)))) (quote #f))) ((lambda (g$0$15507) (list g$0$15507)) (g$0$11035 g$0$15499)))) (quote #f))) (g$0$11039 g$0$15493)))) (quote #f))) ((lambda (g$0$15509) (if (g$0$11041 g$0$15509) (if (g$0$11049 g$0$15509 (g$0$11294 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15493)))) (quote #f))) (g$0$11035 g$0$15485)))) (quote #f))) g$0$15339))) g$0$15335))) ((lambda (g$0$15511) (if (g$0$11041 g$0$15511) (if (g$0$11049 g$0$15511 (g$0$11294 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$15335))) g$0$15331))) ((lambda (g$0$15525) (if (g$0$11027 g$0$15525) (begin (quote #f) ((lambda (g$0$15527) (if g$0$15527 (begin (quote #f) ((lambda (g$0$15529) (if g$0$15529 (begin (quote #f) (append g$0$15527 g$0$15529)) (quote #f))) ((lambda (g$0$15531) (if (g$0$11027 g$0$15531) (begin (quote #f) ((lambda (g$0$15533) (if g$0$15533 (begin (quote #f) ((lambda (g$0$15535) (if g$0$15535 (begin (quote #f) (append g$0$15533 g$0$15535)) (quote #f))) ((lambda (g$0$15537) (if (equal? (g$0$11061 g$0$15537) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15531)))) (quote #f))) ((lambda (g$0$15539) (list g$0$15539)) (g$0$11035 g$0$15531)))) (quote #f))) (g$0$11039 g$0$15525)))) (quote #f))) ((lambda (g$0$15541) (if (g$0$11041 g$0$15541) (if (g$0$11049 g$0$15541 (g$0$11294 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11035 g$0$15525)))) (quote #f))) g$0$15331))) g$0$15328))) (lambda (g$0$15293) ((lambda (g$0$15295) ((lambda (g$0$15297) (if (if g$0$15297 (begin (quote #f) (apply (lambda (g$0$15307) (quote #t)) g$0$15297)) (quote #f)) (apply (lambda (g$0$15299) (call-with-values (lambda () (g$0$15291 g$0$15299 (quote 0))) (lambda (g$0$15303 g$0$15304 g$0$15305) (g$0$11324 (list (quote syntax-case) (cons (quote list) g$0$15304) (quote ()) (list g$0$15303 (list (quote syntax) g$0$15305))))))) g$0$15297) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15295 (quote ()))))) ((lambda (g$0$15309) (if (g$0$11027 g$0$15309) (begin (quote #f) ((lambda (g$0$15311) (if g$0$15311 (begin (quote #f) ((lambda (g$0$15313) (if g$0$15313 (begin (quote #f) (append g$0$15311 g$0$15313)) (quote #f))) ((lambda (g$0$15315) (if (g$0$11027 g$0$15315) (begin (quote #f) ((lambda (g$0$15317) (if g$0$15317 (begin (quote #f) ((lambda (g$0$15319) (if g$0$15319 (begin (quote #f) (append g$0$15317 g$0$15319)) (quote #f))) ((lambda (g$0$15321) (if (equal? (g$0$11061 g$0$15321) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15315)))) (quote #f))) ((lambda (g$0$15323) (list g$0$15323)) (g$0$11035 g$0$15315)))) (quote #f))) (g$0$11039 g$0$15309)))) (quote #f))) ((lambda (g$0$15325) (quote ())) (g$0$11035 g$0$15309)))) (quote #f))) g$0$15295))) g$0$15293)))) (quote #f))))) (set! g$0$11362 (lambda (g$0$15543) (error (quote expander) (quote "~a ~s") (quote "define-record not supported") (g$0$11059 g$0$15543 (quote ()))))) (set! g$0$11364 (lambda (g$0$15545) (error (quote expander) (quote "~a ~s") (quote "incorrect usage of auxilary keyword") (g$0$11059 g$0$15545 (quote ()))))) (set! g$0$11366 (lambda (g$0$15549 g$0$15550 g$0$15551) ((lambda (g$0$15553) ((lambda (g$0$15555) (if (if g$0$15555 (begin (quote #f) (apply (lambda (g$0$15660 g$0$15661) (quote #t)) g$0$15555)) (quote #f)) (apply (lambda (g$0$15656 g$0$15657) (g$0$11412 (cons g$0$15656 g$0$15657) g$0$15550 g$0$15551)) g$0$15555) ((lambda (g$0$15557) ((lambda (g$0$15559) (if (if g$0$15559 (begin (quote #f) (apply (lambda (g$0$15592 g$0$15593 g$0$15594 g$0$15595) (quote #t)) g$0$15559)) (quote #f)) (apply (lambda (g$0$15564 g$0$15565 g$0$15566 g$0$15567) ((lambda (g$0$15572 g$0$15573 g$0$15574 g$0$15575) (g$0$10927 (quote #f) (append g$0$15572 g$0$15573) (append (g$0$11392 g$0$15564 g$0$15550 g$0$15551) (g$0$11392 g$0$15565 g$0$15550 g$0$15551)) (g$0$10927 (quote #f) (list g$0$15575) (list (g$0$10929 (quote #f) (quote ()) (g$0$10923 (quote #f) (map (lambda (g$0$15579 g$0$15580 g$0$15581) (g$0$10927 (quote #f) (list g$0$15579) (list (list g$0$15580)) (g$0$10923 (quote #f) (list (list g$0$15580 g$0$15581) (list (quote set!) g$0$15581 g$0$15579))))) g$0$15574 g$0$15572 g$0$15573)))) (list (quote (primitive dynamic-wind)) g$0$15575 (g$0$10929 (quote #f) (quote ()) (g$0$11412 (cons g$0$15566 g$0$15567) g$0$15550 g$0$15551)) g$0$15575)))) (map (lambda (g$0$15583) (g$0$10951 (quote lhs))) g$0$15564) (map (lambda (g$0$15585) (g$0$10951 (quote rhs))) g$0$15564) (map (lambda (g$0$15587) (g$0$10951 (quote t))) g$0$15564) (g$0$10951 (quote swap)))) g$0$15559) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15557 (quote ()))))) ((lambda (g$0$15597) (if (g$0$11027 g$0$15597) (begin (quote #f) ((lambda (g$0$15599) (if g$0$15599 (begin (quote #f) ((lambda (g$0$15601) (if g$0$15601 (begin (quote #f) (append g$0$15599 g$0$15601)) (quote #f))) ((lambda (g$0$15603) (if (g$0$11027 g$0$15603) (begin (quote #f) ((lambda (g$0$15605) (if g$0$15605 (begin (quote #f) ((lambda (g$0$15607) (if g$0$15607 (begin (quote #f) (append g$0$15605 g$0$15607)) (quote #f))) ((lambda (g$0$15609) (if (g$0$11027 g$0$15609) (begin (quote #f) ((lambda (g$0$15611) (if g$0$15611 (begin (quote #f) ((lambda (g$0$15613) (if g$0$15613 (begin (quote #f) (append g$0$15611 g$0$15613)) (quote #f))) ((letrec ((g$0$15615 (lambda (g$0$15617) (if (g$0$11027 g$0$15617) ((lambda (g$0$15619) (if g$0$15619 (begin (quote #f) ((lambda (g$0$15621) (if g$0$15621 (begin (quote #f) (map cons g$0$15619 g$0$15621)) (quote #f))) (g$0$15615 (g$0$11039 g$0$15617)))) (quote #f))) ((lambda (g$0$15623) (list g$0$15623)) (g$0$11035 g$0$15617))) (if (g$0$11031 g$0$15617) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15615) (g$0$11039 g$0$15609)))) (quote #f))) ((lambda (g$0$15625) (list g$0$15625)) (g$0$11035 g$0$15609)))) (quote #f))) (g$0$11039 g$0$15603)))) (quote #f))) ((letrec ((g$0$15627 (lambda (g$0$15629) (if (g$0$11027 g$0$15629) ((lambda (g$0$15631) (if g$0$15631 (begin (quote #f) ((lambda (g$0$15633) (if g$0$15633 (begin (quote #f) (map cons g$0$15631 g$0$15633)) (quote #f))) (g$0$15627 (g$0$11039 g$0$15629)))) (quote #f))) ((lambda (g$0$15635) (if (g$0$11027 g$0$15635) (begin (quote #f) ((lambda (g$0$15637) (if g$0$15637 (begin (quote #f) ((lambda (g$0$15639) (if g$0$15639 (begin (quote #f) (append g$0$15637 g$0$15639)) (quote #f))) ((lambda (g$0$15641) (if (g$0$11027 g$0$15641) (begin (quote #f) ((lambda (g$0$15643) (if g$0$15643 (begin (quote #f) ((lambda (g$0$15645) (if g$0$15645 (begin (quote #f) (append g$0$15643 g$0$15645)) (quote #f))) ((lambda (g$0$15647) (if (equal? (g$0$11061 g$0$15647) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15641)))) (quote #f))) ((lambda (g$0$15649) (list g$0$15649)) (g$0$11035 g$0$15641)))) (quote #f))) (g$0$11039 g$0$15635)))) (quote #f))) ((lambda (g$0$15651) (list g$0$15651)) (g$0$11035 g$0$15635)))) (quote #f))) (g$0$11035 g$0$15629))) (if (g$0$11031 g$0$15629) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) g$0$15627) (g$0$11035 g$0$15603)))) (quote #f))) (g$0$11039 g$0$15597)))) (quote #f))) ((lambda (g$0$15653) (quote ())) (g$0$11035 g$0$15597)))) (quote #f))) g$0$15557))) g$0$15553))) ((lambda (g$0$15663) (if (g$0$11027 g$0$15663) (begin (quote #f) ((lambda (g$0$15665) (if g$0$15665 (begin (quote #f) ((lambda (g$0$15667) (if g$0$15667 (begin (quote #f) (append g$0$15665 g$0$15667)) (quote #f))) ((lambda (g$0$15669) (if (g$0$11027 g$0$15669) (begin (quote #f) ((lambda (g$0$15671) (if g$0$15671 (begin (quote #f) ((lambda (g$0$15673) (if g$0$15673 (begin (quote #f) (append g$0$15671 g$0$15673)) (quote #f))) ((lambda (g$0$15675) (if (g$0$11027 g$0$15675) (begin (quote #f) ((lambda (g$0$15677) (if g$0$15677 (begin (quote #f) ((lambda (g$0$15679) (if g$0$15679 (begin (quote #f) (append g$0$15677 g$0$15679)) (quote #f))) ((letrec ((g$0$15681 (lambda (g$0$15683) (if (g$0$11027 g$0$15683) ((lambda (g$0$15685) (if g$0$15685 (begin (quote #f) ((lambda (g$0$15687) (if g$0$15687 (begin (quote #f) (map cons g$0$15685 g$0$15687)) (quote #f))) (g$0$15681 (g$0$11039 g$0$15683)))) (quote #f))) ((lambda (g$0$15689) (list g$0$15689)) (g$0$11035 g$0$15683))) (if (g$0$11031 g$0$15683) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15681) (g$0$11039 g$0$15675)))) (quote #f))) ((lambda (g$0$15691) (list g$0$15691)) (g$0$11035 g$0$15675)))) (quote #f))) (g$0$11039 g$0$15669)))) (quote #f))) ((lambda (g$0$15693) (if (equal? (g$0$11061 g$0$15693) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11035 g$0$15669)))) (quote #f))) (g$0$11039 g$0$15663)))) (quote #f))) ((lambda (g$0$15695) (quote ())) (g$0$11035 g$0$15663)))) (quote #f))) g$0$15553))) g$0$15549))) (set! g$0$11368 (lambda (g$0$15699 g$0$15700 g$0$15701) ((lambda (g$0$15703) ((lambda (g$0$15705) (if (if g$0$15705 (begin (quote #f) (apply (lambda (g$0$15712 g$0$15713) (quote #t)) g$0$15705)) (quote #f)) (apply (lambda (g$0$15708 g$0$15709) (cons (quote foreign-call) (cons (g$0$11396 g$0$15708 g$0$15700 g$0$15701) (g$0$11392 g$0$15709 g$0$15700 g$0$15701)))) g$0$15705) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15703 (quote ()))))) ((lambda (g$0$15715) (if (g$0$11027 g$0$15715) (begin (quote #f) ((lambda (g$0$15717) (if g$0$15717 (begin (quote #f) ((lambda (g$0$15719) (if g$0$15719 (begin (quote #f) (append g$0$15717 g$0$15719)) (quote #f))) ((lambda (g$0$15721) (if (g$0$11027 g$0$15721) (begin (quote #f) ((lambda (g$0$15723) (if g$0$15723 (begin (quote #f) ((lambda (g$0$15725) (if g$0$15725 (begin (quote #f) (append g$0$15723 g$0$15725)) (quote #f))) ((letrec ((g$0$15727 (lambda (g$0$15729) (if (g$0$11027 g$0$15729) ((lambda (g$0$15731) (if g$0$15731 (begin (quote #f) ((lambda (g$0$15733) (if g$0$15733 (begin (quote #f) (map cons g$0$15731 g$0$15733)) (quote #f))) (g$0$15727 (g$0$11039 g$0$15729)))) (quote #f))) ((lambda (g$0$15735) (list g$0$15735)) (g$0$11035 g$0$15729))) (if (g$0$11031 g$0$15729) (list (begin (quote arg*) (quote ()))) (quote #f)))))) g$0$15727) (g$0$11039 g$0$15721)))) (quote #f))) ((lambda (g$0$15737) (list g$0$15737)) (g$0$11035 g$0$15721)))) (quote #f))) (g$0$11039 g$0$15715)))) (quote #f))) ((lambda (g$0$15739) (quote ())) (g$0$11035 g$0$15715)))) (quote #f))) g$0$15703))) g$0$15699))) (set! g$0$11370 (lambda (g$0$15742 g$0$15743) ((lambda (g$0$15745 g$0$15747) (begin (set! g$0$15745 (lambda (g$0$15937 g$0$15938 g$0$15939) (if (null? g$0$15937) (values (quote ()) g$0$15939) (call-with-values (lambda () (g$0$15745 (cdr g$0$15937) g$0$15938 g$0$15939)) (lambda (g$0$15942 g$0$15943) (call-with-values (lambda () (g$0$15747 (car g$0$15937) g$0$15938 g$0$15943)) (lambda (g$0$15946 g$0$15947) (values (cons g$0$15946 g$0$15942) g$0$15947)))))))) (set! g$0$15747 (lambda (g$0$15751 g$0$15752 g$0$15753) ((lambda (g$0$15755) ((lambda (g$0$15757) (if (if g$0$15757 (begin (quote #f) (apply (lambda (g$0$15931) (g$0$11041 g$0$15931)) g$0$15757)) (quote #f)) (apply (lambda (g$0$15929) (if (g$0$11055 g$0$15751 g$0$15743) (values (vector (quote free-id) g$0$15751) g$0$15753) (if (g$0$11049 g$0$15751 (g$0$11294 (quote _))) (values (quote _) g$0$15753) (values (quote any) (cons (cons g$0$15751 g$0$15752) g$0$15753))))) g$0$15757) ((lambda (g$0$15759) ((lambda (g$0$15761) (if (if g$0$15761 (begin (quote #f) (apply (lambda (g$0$15908 g$0$15909) (g$0$11374 g$0$15909)) g$0$15761)) (quote #f)) (apply (lambda (g$0$15900 g$0$15901) (call-with-values (lambda () (g$0$15747 g$0$15900 (+ g$0$15752 (quote 1)) g$0$15753)) (lambda (g$0$15904 g$0$15905) (values (if (eq? g$0$15904 (quote any)) (quote each-any) (vector (quote each) g$0$15904)) g$0$15905)))) g$0$15761) ((lambda (g$0$15763) ((lambda (g$0$15765) (if (if g$0$15765 (begin (quote #f) (apply (lambda (g$0$15860 g$0$15861 g$0$15862 g$0$15863) (g$0$11374 g$0$15861)) g$0$15765)) (quote #f)) (apply (lambda (g$0$15840 g$0$15841 g$0$15842 g$0$15843) (call-with-values (lambda () (g$0$15747 g$0$15843 g$0$15752 g$0$15753)) (lambda (g$0$15846 g$0$15847) (call-with-values (lambda () (g$0$15745 g$0$15842 g$0$15752 g$0$15847)) (lambda (g$0$15850 g$0$15851) (call-with-values (lambda () (g$0$15747 g$0$15840 (+ g$0$15752 (quote 1)) g$0$15851)) (lambda (g$0$15854 g$0$15855) (values (vector (quote each+) g$0$15854 (reverse g$0$15850) g$0$15846) g$0$15855)))))))) g$0$15765) ((lambda (g$0$15767) ((lambda (g$0$15769) (if (if g$0$15769 (begin (quote #f) (apply (lambda (g$0$15824 g$0$15825) (quote #t)) g$0$15769)) (quote #f)) (apply (lambda (g$0$15812 g$0$15813) (call-with-values (lambda () (g$0$15747 g$0$15813 g$0$15752 g$0$15753)) (lambda (g$0$15816 g$0$15817) (call-with-values (lambda () (g$0$15747 g$0$15812 g$0$15752 g$0$15817)) (lambda (g$0$15820 g$0$15821) (values (cons g$0$15820 g$0$15816) g$0$15821)))))) g$0$15769) ((lambda (g$0$15771) ((lambda (g$0$15773) (if (if g$0$15773 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15773)) (quote #f)) (apply (lambda () (values (quote ()) g$0$15753)) g$0$15773) ((lambda (g$0$15775) ((lambda (g$0$15777) (if (if g$0$15777 (begin (quote #f) (apply (lambda (g$0$15795) (not (g$0$10993 g$0$15795))) g$0$15777)) (quote #f)) (apply (lambda (g$0$15789) (call-with-values (lambda () (g$0$15747 g$0$15789 g$0$15752 g$0$15753)) (lambda (g$0$15792 g$0$15793) (values (vector (quote vector) g$0$15792) g$0$15793)))) g$0$15777) ((lambda (g$0$15779) ((lambda (g$0$15781) (if (if g$0$15781 (begin (quote #f) (apply (lambda (g$0$15785) (quote #t)) g$0$15781)) (quote #f)) (apply (lambda (g$0$15783) (values (vector (quote atom) (g$0$11061 g$0$15783)) g$0$15753)) g$0$15781) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$15779 (quote ()))))) ((lambda (g$0$15787) (list g$0$15787)) g$0$15779))) g$0$15775))) ((lambda (g$0$15797) (if (g$0$11029 g$0$15797) (begin (quote #f) ((letrec ((g$0$15799 (lambda (g$0$15801) (if (g$0$11027 g$0$15801) ((lambda (g$0$15803) (if g$0$15803 (begin (quote #f) ((lambda (g$0$15805) (if g$0$15805 (begin (quote #f) (map cons g$0$15803 g$0$15805)) (quote #f))) (g$0$15799 (g$0$11039 g$0$15801)))) (quote #f))) ((lambda (g$0$15807) (list g$0$15807)) (g$0$11035 g$0$15801))) (if (g$0$11031 g$0$15801) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$15799) (g$0$11025 g$0$15797))) (quote #f))) g$0$15775))) g$0$15771))) ((lambda (g$0$15809) (if (equal? (g$0$11061 g$0$15809) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$15771))) g$0$15767))) ((lambda (g$0$15827) (if (g$0$11027 g$0$15827) (begin (quote #f) ((lambda (g$0$15829) (if g$0$15829 (begin (quote #f) ((lambda (g$0$15831) (if g$0$15831 (begin (quote #f) (append g$0$15829 g$0$15831)) (quote #f))) ((lambda (g$0$15833) (list g$0$15833)) (g$0$11039 g$0$15827)))) (quote #f))) ((lambda (g$0$15835) (list g$0$15835)) (g$0$11035 g$0$15827)))) (quote #f))) g$0$15767))) g$0$15763))) ((lambda (g$0$15865) (if (g$0$11027 g$0$15865) (begin (quote #f) ((lambda (g$0$15867) (if g$0$15867 (begin (quote #f) ((lambda (g$0$15869) (if g$0$15869 (begin (quote #f) (append g$0$15867 g$0$15869)) (quote #f))) ((lambda (g$0$15871) (if (g$0$11027 g$0$15871) (begin (quote #f) ((lambda (g$0$15873) (if g$0$15873 (begin (quote #f) ((lambda (g$0$15875) (if g$0$15875 (begin (quote #f) (append g$0$15873 g$0$15875)) (quote #f))) ((letrec ((g$0$15877 (lambda (g$0$15879) (if (g$0$11027 g$0$15879) ((lambda (g$0$15885) (if g$0$15885 (begin (quote #f) ((lambda (g$0$15887) (if g$0$15887 (begin (quote #f) (cons (map cons g$0$15885 (car g$0$15887)) (cdr g$0$15887))) (quote #f))) (g$0$15877 (g$0$11039 g$0$15879)))) (quote #f))) ((lambda (g$0$15889) (list g$0$15889)) (g$0$11035 g$0$15879))) ((lambda (g$0$15881) (if g$0$15881 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) g$0$15881)) (quote #f))) ((lambda (g$0$15883) (list g$0$15883)) g$0$15879)))))) (lambda (g$0$15891) ((lambda (g$0$15893) (if g$0$15893 (begin (quote #f) (append (car g$0$15893) (cdr g$0$15893))) (quote #f))) (g$0$15877 g$0$15891)))) (g$0$11039 g$0$15871)))) (quote #f))) ((lambda (g$0$15895) (list g$0$15895)) (g$0$11035 g$0$15871)))) (quote #f))) (g$0$11039 g$0$15865)))) (quote #f))) ((lambda (g$0$15897) (list g$0$15897)) (g$0$11035 g$0$15865)))) (quote #f))) g$0$15763))) g$0$15759))) ((lambda (g$0$15911) (if (g$0$11027 g$0$15911) (begin (quote #f) ((lambda (g$0$15913) (if g$0$15913 (begin (quote #f) ((lambda (g$0$15915) (if g$0$15915 (begin (quote #f) (append g$0$15913 g$0$15915)) (quote #f))) ((lambda (g$0$15917) (if (g$0$11027 g$0$15917) (begin (quote #f) ((lambda (g$0$15919) (if g$0$15919 (begin (quote #f) ((lambda (g$0$15921) (if g$0$15921 (begin (quote #f) (append g$0$15919 g$0$15921)) (quote #f))) ((lambda (g$0$15923) (if (equal? (g$0$11061 g$0$15923) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$15917)))) (quote #f))) ((lambda (g$0$15925) (list g$0$15925)) (g$0$11035 g$0$15917)))) (quote #f))) (g$0$11039 g$0$15911)))) (quote #f))) ((lambda (g$0$15927) (list g$0$15927)) (g$0$11035 g$0$15911)))) (quote #f))) g$0$15759))) g$0$15755))) ((lambda (g$0$15933) (list g$0$15933)) g$0$15755))) g$0$15751))) (g$0$15747 g$0$15742 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! g$0$11372 (lambda (g$0$15950 g$0$15951) ((lambda (g$0$15953 g$0$15955 g$0$15957 g$0$15959 g$0$15961 g$0$15963 g$0$15965 g$0$15967) (begin (set! g$0$15953 (lambda (g$0$16077 g$0$16078 g$0$16079) (if (if (null? g$0$16078) (begin (quote #f) (null? g$0$16079)) (quote #f)) g$0$16077 (g$0$11017 g$0$16077 g$0$16078 g$0$16079)))) (set! g$0$15955 (lambda (g$0$16062 g$0$16063 g$0$16064 g$0$16065) (if (pair? g$0$16062) ((lambda (g$0$16071) (if g$0$16071 (begin (quote #f) ((lambda (g$0$16073) (if g$0$16073 (begin (quote #f) (cons g$0$16071 g$0$16073)) (quote #f))) (g$0$15955 (cdr g$0$16062) g$0$16063 g$0$16064 g$0$16065))) (quote #f))) (g$0$15967 (car g$0$16062) g$0$16063 g$0$16064 g$0$16065 (quote ()))) (if (null? g$0$16062) (quote ()) (if (g$0$10993 g$0$16062) (call-with-values (lambda () (g$0$11015 g$0$16064 g$0$16065 g$0$16062)) (lambda (g$0$16068 g$0$16069) (g$0$15955 (g$0$10995 g$0$16062) g$0$16063 g$0$16068 g$0$16069))) (quote #f)))))) (set! g$0$15957 (lambda (g$0$16031 g$0$16032 g$0$16033 g$0$16034 g$0$16035 g$0$16036 g$0$16037) (letrec ((g$0$16039 (lambda (g$0$16043 g$0$16044 g$0$16045) (if (pair? g$0$16043) (call-with-values (lambda () (g$0$16039 (cdr g$0$16043) g$0$16044 g$0$16045)) (lambda (g$0$16053 g$0$16054 g$0$16055) (if g$0$16055 (if (null? g$0$16054) ((lambda (g$0$16057) (if g$0$16057 (values (cons g$0$16057 g$0$16053) g$0$16054 g$0$16055) (values (quote #f) (quote #f) (quote #f)))) (g$0$15967 (car g$0$16043) g$0$16032 g$0$16044 g$0$16045 (quote ()))) (values (quote ()) (cdr g$0$16054) (g$0$15967 (car g$0$16043) (car g$0$16054) g$0$16044 g$0$16045 g$0$16055))) (values (quote #f) (quote #f) (quote #f))))) (if (g$0$10993 g$0$16043) (call-with-values (lambda () (g$0$11015 g$0$16044 g$0$16045 g$0$16043)) (lambda (g$0$16048 g$0$16049) (g$0$16039 (g$0$10995 g$0$16043) g$0$16048 g$0$16049))) (values (quote ()) g$0$16033 (g$0$15967 g$0$16043 g$0$16034 g$0$16044 g$0$16045 g$0$16037))))))) (g$0$16039 g$0$16031 g$0$16035 g$0$16036)))) (set! g$0$15959 (lambda (g$0$16015 g$0$16016 g$0$16017) (if (pair? g$0$16015) ((lambda (g$0$16023) (if g$0$16023 (begin (quote #f) (cons (g$0$15953 (car g$0$16015) g$0$16016 g$0$16017) g$0$16023)) (quote #f))) (g$0$15959 (cdr g$0$16015) g$0$16016 g$0$16017)) (if (null? g$0$16015) (quote ()) (if (g$0$10993 g$0$16015) (call-with-values (lambda () (g$0$11015 g$0$16016 g$0$16017 g$0$16015)) (lambda (g$0$16020 g$0$16021) (g$0$15959 (g$0$10995 g$0$16015) g$0$16020 g$0$16021))) (quote #f)))))) (set! g$0$15961 (lambda (g$0$16009 g$0$16010) (if (null? g$0$16009) g$0$16010 (if (eq? g$0$16009 (quote _)) g$0$16010 (if (eq? g$0$16009 (quote any)) (cons (quote ()) g$0$16010) (if (pair? g$0$16009) (g$0$15961 (car g$0$16009) (g$0$15961 (cdr g$0$16009) g$0$16010)) (if (eq? g$0$16009 (quote each-any)) (cons (quote ()) g$0$16010) ((lambda (g$0$16011) (if (memv g$0$16011 (quote (each))) (g$0$15961 (vector-ref g$0$16009 (quote 1)) g$0$16010) (if (memv g$0$16011 (quote (each+))) (g$0$15961 (vector-ref g$0$16009 (quote 1)) (g$0$15961 (reverse (vector-ref g$0$16009 (quote 2))) (g$0$15961 (vector-ref g$0$16009 (quote 3)) g$0$16010))) (if (memv g$0$16011 (quote (free-id atom))) g$0$16010 (if (memv g$0$16011 (quote (vector))) (g$0$15961 (vector-ref g$0$16009 (quote 1)) g$0$16010) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$16009)))))) (vector-ref g$0$16009 (quote 0)))))))))) (set! g$0$15963 (lambda (g$0$16005 g$0$16006) (if (null? (car g$0$16005)) g$0$16006 (cons (map car g$0$16005) (g$0$15963 (map cdr g$0$16005) g$0$16006))))) (set! g$0$15965 (lambda (g$0$15987 g$0$15988 g$0$15989 g$0$15990 g$0$15991) (if (null? g$0$15988) (if (null? g$0$15987) (begin (quote #f) g$0$15991) (quote #f)) (if (pair? g$0$15988) (if (pair? g$0$15987) (begin (quote #f) (g$0$15967 (car g$0$15987) (car g$0$15988) g$0$15989 g$0$15990 (g$0$15967 (cdr g$0$15987) (cdr g$0$15988) g$0$15989 g$0$15990 g$0$15991))) (quote #f)) (if (eq? g$0$15988 (quote each-any)) ((lambda (g$0$16002) (if g$0$16002 (begin (quote #f) (cons g$0$16002 g$0$15991)) (quote #f))) (g$0$15959 g$0$15987 g$0$15989 g$0$15990)) ((lambda (g$0$15992) (if (memv g$0$15992 (quote (each))) (if (null? g$0$15987) (g$0$15961 (vector-ref g$0$15988 (quote 1)) g$0$15991) ((lambda (g$0$16000) (if g$0$16000 (begin (quote #f) (g$0$15963 g$0$16000 g$0$15991)) (quote #f))) (g$0$15955 g$0$15987 (vector-ref g$0$15988 (quote 1)) g$0$15989 g$0$15990))) (if (memv g$0$15992 (quote (free-id))) (if (symbol? g$0$15987) (if (g$0$11049 (g$0$15953 g$0$15987 g$0$15989 g$0$15990) (vector-ref g$0$15988 (quote 1))) (begin (quote #f) g$0$15991) (quote #f)) (quote #f)) (if (memv g$0$15992 (quote (each+))) (call-with-values (lambda () (g$0$15957 g$0$15987 (vector-ref g$0$15988 (quote 1)) (vector-ref g$0$15988 (quote 2)) (vector-ref g$0$15988 (quote 3)) g$0$15989 g$0$15990 g$0$15991)) (lambda (g$0$15996 g$0$15997 g$0$15998) (if g$0$15998 (if (null? g$0$15997) (begin (quote #f) (if (null? g$0$15996) (g$0$15961 (vector-ref g$0$15988 (quote 1)) g$0$15998) (g$0$15963 g$0$15996 g$0$15998))) (quote #f)) (quote #f)))) (if (memv g$0$15992 (quote (atom))) (if (equal? (vector-ref g$0$15988 (quote 1)) (g$0$11059 g$0$15987 g$0$15989)) (begin (quote #f) g$0$15991) (quote #f)) (if (memv g$0$15992 (quote (vector))) (if (vector? g$0$15987) (begin (quote #f) (g$0$15967 (vector->list g$0$15987) (vector-ref g$0$15988 (quote 1)) g$0$15989 g$0$15990 g$0$15991)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$15988))))))) (vector-ref g$0$15988 (quote 0)))))))) (set! g$0$15967 (lambda (g$0$15973 g$0$15974 g$0$15975 g$0$15976 g$0$15977) (if (not g$0$15977) (quote #f) (if (eq? g$0$15974 (quote _)) g$0$15977 (if (eq? g$0$15974 (quote any)) (cons (g$0$15953 g$0$15973 g$0$15975 g$0$15976) g$0$15977) (if (g$0$10993 g$0$15973) (call-with-values (lambda () (g$0$11015 g$0$15975 g$0$15976 g$0$15973)) (lambda (g$0$15980 g$0$15981) (g$0$15967 (g$0$10995 g$0$15973) g$0$15974 g$0$15980 g$0$15981 g$0$15977))) (g$0$15965 g$0$15973 g$0$15974 g$0$15975 g$0$15976 g$0$15977))))))) (g$0$15967 g$0$15950 g$0$15951 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$11374 (lambda (g$0$16081) (if (g$0$11041 g$0$16081) (begin (quote #f) (g$0$11049 g$0$16081 (g$0$11294 (quote ...)))) (quote #f)))) (set! g$0$11376 ((lambda () ((lambda (g$0$16083 g$0$16085 g$0$16087 g$0$16089) (begin (set! g$0$16083 (lambda (g$0$16297 g$0$16298 g$0$16299 g$0$16300 g$0$16301) ((lambda (g$0$16304 g$0$16305) ((lambda (g$0$16308 g$0$16309) ((lambda (g$0$16311) (list (quote (primitive apply)) (g$0$10929 (quote #f) g$0$16309 g$0$16311) g$0$16299)) (g$0$11396 (g$0$11021 (g$0$10988 g$0$16304 g$0$16308) g$0$16298) (append (map (lambda (g$0$16315 g$0$16316 g$0$16317) (cons g$0$16315 (g$0$11067 (quote syntax) (cons g$0$16316 g$0$16317)))) g$0$16308 g$0$16309 (map cdr g$0$16297)) g$0$16300) g$0$16301))) (map g$0$10955 g$0$16304) (map g$0$10951 g$0$16304))) (map car g$0$16297) (map cdr g$0$16297)))) (set! g$0$16085 (lambda (g$0$16283 g$0$16284 g$0$16285) (letrec ((g$0$16287 (lambda (g$0$16290 g$0$16291) (if (null? g$0$16290) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$16284)) (if (g$0$11041 (car g$0$16290)) (if (g$0$11055 (car g$0$16290) g$0$16291) (g$0$11501 (car g$0$16290) (quote "duplicate ") g$0$16285) (g$0$16287 (cdr g$0$16290) (cons (car g$0$16290) g$0$16291))) (g$0$11501 (car g$0$16290) (quote "invalid ") g$0$16285)))))) (g$0$16287 g$0$16283 (quote ()))))) (set! g$0$16087 (lambda (g$0$16256 g$0$16257 g$0$16258 g$0$16259 g$0$16260 g$0$16261 g$0$16262 g$0$16263) (call-with-values (lambda () (g$0$11370 g$0$16261 g$0$16257)) (lambda (g$0$16266 g$0$16267) (if (not (g$0$11053 (map car g$0$16267))) (g$0$16085 (map car g$0$16267) g$0$16261 (quote "pattern variable")) (if (not (for-all (lambda (g$0$16279) (not (g$0$11374 (car g$0$16279)))) g$0$16267)) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax-case pattern") (g$0$11059 g$0$16261 (quote ()))) ((lambda (g$0$16269) ((lambda (g$0$16271) ((lambda (g$0$16273) ((lambda (g$0$16275) (list (g$0$10929 (quote #f) (list g$0$16269) (list (quote if) g$0$16271 g$0$16273 g$0$16275)) (list (quote (primitive syntax-dispatch)) g$0$16256 (list (quote quote) g$0$16266)))) (g$0$16089 g$0$16256 g$0$16257 g$0$16258 g$0$16259 g$0$16260))) (g$0$16083 g$0$16267 g$0$16263 g$0$16269 g$0$16259 g$0$16260))) (if (eq? g$0$16262 (quote #t)) g$0$16269 ((lambda (g$0$16277) (list (quote if) g$0$16269 g$0$16277 (list (quote quote) (quote #f)))) (g$0$16083 g$0$16267 g$0$16262 g$0$16269 g$0$16259 g$0$16260))))) (g$0$10951 (quote tmp))))))))) (set! g$0$16089 (lambda (g$0$16165 g$0$16166 g$0$16167 g$0$16168 g$0$16169) (if (null? g$0$16167) (list (quote (primitive syntax-error)) g$0$16165) ((lambda (g$0$16171) ((lambda (g$0$16173) (if (if g$0$16173 (begin (quote #f) (apply (lambda (g$0$16228 g$0$16229) (quote #t)) g$0$16173)) (quote #f)) (apply (lambda (g$0$16218 g$0$16219) (if (if (g$0$11041 g$0$16218) (if (not (g$0$11055 g$0$16218 g$0$16166)) (begin (quote #f) (not (g$0$11374 g$0$16218))) (quote #f)) (quote #f)) (if (g$0$11049 g$0$16218 (g$0$11294 (quote _))) (g$0$11396 g$0$16219 g$0$16168 g$0$16169) ((lambda (g$0$16222 g$0$16223) ((lambda (g$0$16225) (list (g$0$10929 (quote #f) (list g$0$16223) g$0$16225) g$0$16165)) (g$0$11396 (g$0$11021 (g$0$10988 (list g$0$16218) (list g$0$16222)) g$0$16219) (cons (cons g$0$16222 (g$0$11067 (quote syntax) (cons g$0$16223 (quote 0)))) g$0$16168) g$0$16169))) (g$0$10955 g$0$16218) (g$0$10951 g$0$16218))) (g$0$16087 g$0$16165 g$0$16166 (cdr g$0$16167) g$0$16168 g$0$16169 g$0$16218 (quote #t) g$0$16219))) g$0$16173) ((lambda (g$0$16175) ((lambda (g$0$16177) (if (if g$0$16177 (begin (quote #f) (apply (lambda (g$0$16187 g$0$16188 g$0$16189) (quote #t)) g$0$16177)) (quote #f)) (apply (lambda (g$0$16181 g$0$16182 g$0$16183) (g$0$16087 g$0$16165 g$0$16166 (cdr g$0$16167) g$0$16168 g$0$16169 g$0$16181 g$0$16182 g$0$16183)) g$0$16177) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16175 (quote ()))))) ((lambda (g$0$16191) (if (g$0$11027 g$0$16191) (begin (quote #f) ((lambda (g$0$16193) (if g$0$16193 (begin (quote #f) ((lambda (g$0$16195) (if g$0$16195 (begin (quote #f) (append g$0$16193 g$0$16195)) (quote #f))) ((lambda (g$0$16197) (if (g$0$11027 g$0$16197) (begin (quote #f) ((lambda (g$0$16199) (if g$0$16199 (begin (quote #f) ((lambda (g$0$16201) (if g$0$16201 (begin (quote #f) (append g$0$16199 g$0$16201)) (quote #f))) ((lambda (g$0$16203) (if (g$0$11027 g$0$16203) (begin (quote #f) ((lambda (g$0$16205) (if g$0$16205 (begin (quote #f) ((lambda (g$0$16207) (if g$0$16207 (begin (quote #f) (append g$0$16205 g$0$16207)) (quote #f))) ((lambda (g$0$16209) (if (equal? (g$0$11061 g$0$16209) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$16203)))) (quote #f))) ((lambda (g$0$16211) (list g$0$16211)) (g$0$11035 g$0$16203)))) (quote #f))) (g$0$11039 g$0$16197)))) (quote #f))) ((lambda (g$0$16213) (list g$0$16213)) (g$0$11035 g$0$16197)))) (quote #f))) (g$0$11039 g$0$16191)))) (quote #f))) ((lambda (g$0$16215) (list g$0$16215)) (g$0$11035 g$0$16191)))) (quote #f))) g$0$16175))) g$0$16171))) ((lambda (g$0$16231) (if (g$0$11027 g$0$16231) (begin (quote #f) ((lambda (g$0$16233) (if g$0$16233 (begin (quote #f) ((lambda (g$0$16235) (if g$0$16235 (begin (quote #f) (append g$0$16233 g$0$16235)) (quote #f))) ((lambda (g$0$16237) (if (g$0$11027 g$0$16237) (begin (quote #f) ((lambda (g$0$16239) (if g$0$16239 (begin (quote #f) ((lambda (g$0$16241) (if g$0$16241 (begin (quote #f) (append g$0$16239 g$0$16241)) (quote #f))) ((lambda (g$0$16243) (if (equal? (g$0$11061 g$0$16243) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$16237)))) (quote #f))) ((lambda (g$0$16245) (list g$0$16245)) (g$0$11035 g$0$16237)))) (quote #f))) (g$0$11039 g$0$16231)))) (quote #f))) ((lambda (g$0$16247) (list g$0$16247)) (g$0$11035 g$0$16231)))) (quote #f))) g$0$16171))) (car g$0$16167))))) (lambda (g$0$16093 g$0$16094 g$0$16095) ((lambda (g$0$16097) ((lambda (g$0$16099) (if (if g$0$16099 (begin (quote #f) (apply (lambda (g$0$16115 g$0$16116 g$0$16117) (quote #t)) g$0$16099)) (quote #f)) (apply (lambda (g$0$16103 g$0$16104 g$0$16105) (begin (if (for-all (lambda (g$0$16107) (if (g$0$11041 g$0$16107) (begin (quote #f) (not (g$0$11374 g$0$16107))) (quote #f))) g$0$16104) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (g$0$11059 g$0$16093 (quote ())))) ((lambda (g$0$16109) ((lambda (g$0$16111) (list (g$0$10929 (quote #f) (list g$0$16109) g$0$16111) (g$0$11396 g$0$16103 g$0$16094 g$0$16095))) (g$0$16089 g$0$16109 g$0$16104 g$0$16105 g$0$16094 g$0$16095))) (g$0$10951 (quote tmp))))) g$0$16099) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16097 (quote ()))))) ((lambda (g$0$16119) (if (g$0$11027 g$0$16119) (begin (quote #f) ((lambda (g$0$16121) (if g$0$16121 (begin (quote #f) ((lambda (g$0$16123) (if g$0$16123 (begin (quote #f) (append g$0$16121 g$0$16123)) (quote #f))) ((lambda (g$0$16125) (if (g$0$11027 g$0$16125) (begin (quote #f) ((lambda (g$0$16127) (if g$0$16127 (begin (quote #f) ((lambda (g$0$16129) (if g$0$16129 (begin (quote #f) (append g$0$16127 g$0$16129)) (quote #f))) ((lambda (g$0$16131) (if (g$0$11027 g$0$16131) (begin (quote #f) ((lambda (g$0$16133) (if g$0$16133 (begin (quote #f) ((lambda (g$0$16135) (if g$0$16135 (begin (quote #f) (append g$0$16133 g$0$16135)) (quote #f))) ((letrec ((g$0$16137 (lambda (g$0$16139) (if (g$0$11027 g$0$16139) ((lambda (g$0$16141) (if g$0$16141 (begin (quote #f) ((lambda (g$0$16143) (if g$0$16143 (begin (quote #f) (map cons g$0$16141 g$0$16143)) (quote #f))) (g$0$16137 (g$0$11039 g$0$16139)))) (quote #f))) ((lambda (g$0$16145) (list g$0$16145)) (g$0$11035 g$0$16139))) (if (g$0$11031 g$0$16139) (list (begin (quote clauses) (quote ()))) (quote #f)))))) g$0$16137) (g$0$11039 g$0$16131)))) (quote #f))) ((letrec ((g$0$16147 (lambda (g$0$16149) (if (g$0$11027 g$0$16149) ((lambda (g$0$16151) (if g$0$16151 (begin (quote #f) ((lambda (g$0$16153) (if g$0$16153 (begin (quote #f) (map cons g$0$16151 g$0$16153)) (quote #f))) (g$0$16147 (g$0$11039 g$0$16149)))) (quote #f))) ((lambda (g$0$16155) (list g$0$16155)) (g$0$11035 g$0$16149))) (if (g$0$11031 g$0$16149) (list (begin (quote keys) (quote ()))) (quote #f)))))) g$0$16147) (g$0$11035 g$0$16131)))) (quote #f))) (g$0$11039 g$0$16125)))) (quote #f))) ((lambda (g$0$16157) (list g$0$16157)) (g$0$11035 g$0$16125)))) (quote #f))) (g$0$11039 g$0$16119)))) (quote #f))) ((lambda (g$0$16159) (quote ())) (g$0$11035 g$0$16119)))) (quote #f))) g$0$16097))) g$0$16093)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$11378 ((lambda () ((lambda (g$0$16319 g$0$16321 g$0$16323 g$0$16325 g$0$16327 g$0$16329 g$0$16331 g$0$16333) (begin (set! g$0$16319 (lambda (g$0$16446 g$0$16447 g$0$16448 g$0$16449 g$0$16450 g$0$16451) ((lambda (g$0$16453) ((lambda (g$0$16455) (if (if g$0$16455 (begin (quote #f) (apply (lambda (g$0$16665) (g$0$16450 g$0$16665)) g$0$16455)) (quote #f)) (apply (lambda (g$0$16663) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (g$0$11059 g$0$16446 (quote ())))) g$0$16455) ((lambda (g$0$16457) ((lambda (g$0$16459) (if (if g$0$16459 (begin (quote #f) (apply (lambda (g$0$16659) (g$0$11041 g$0$16659)) g$0$16459)) (quote #f)) (apply (lambda (g$0$16647) ((lambda (g$0$16649) ((lambda (g$0$16651) ((lambda () (if (eq? (g$0$11069 g$0$16651) (quote syntax)) (call-with-values (lambda () ((lambda (g$0$16653) (g$0$16321 g$0$16446 (car g$0$16653) (cdr g$0$16653) g$0$16449)) (g$0$11071 g$0$16651))) (lambda (g$0$16656 g$0$16657) (values (list (quote ref) g$0$16656) g$0$16657))) (values (list (quote quote) g$0$16447) g$0$16449))))) (g$0$11065 g$0$16649 g$0$16448))) (g$0$11063 g$0$16447))) g$0$16459) ((lambda (g$0$16461) ((lambda (g$0$16463) (if (if g$0$16463 (begin (quote #f) (apply (lambda (g$0$16626 g$0$16627) (g$0$16450 g$0$16626)) g$0$16463)) (quote #f)) (apply (lambda (g$0$16620 g$0$16621) (if g$0$16451 (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (g$0$11059 g$0$16446 (quote ()))) (g$0$16319 g$0$16446 g$0$16621 g$0$16448 g$0$16449 (lambda (g$0$16623) (quote #f)) (quote #f)))) g$0$16463) ((lambda (g$0$16465) ((lambda (g$0$16467) (if (if g$0$16467 (begin (quote #f) (apply (lambda (g$0$16597 g$0$16598 g$0$16599) (g$0$16450 g$0$16598)) g$0$16467)) (quote #f)) (apply (lambda (g$0$16531 g$0$16532 g$0$16533) (letrec ((g$0$16535 (lambda (g$0$16538 g$0$16539) ((lambda (g$0$16541) ((lambda (g$0$16543) (if (if g$0$16543 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16543)) (quote #f)) (apply (lambda () (g$0$16539 g$0$16449)) g$0$16543) ((lambda (g$0$16545) ((lambda (g$0$16547) (if (if g$0$16547 (begin (quote #f) (apply (lambda (g$0$16574 g$0$16575) (g$0$16450 g$0$16574)) g$0$16547)) (quote #f)) (apply (lambda (g$0$16564 g$0$16565) (g$0$16535 g$0$16565 (lambda (g$0$16567) (call-with-values (lambda () (g$0$16539 (cons (quote ()) g$0$16567))) (lambda (g$0$16570 g$0$16571) (if (null? (car g$0$16571)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (g$0$11059 g$0$16446 (quote ()))) (values (g$0$16325 g$0$16570 (car g$0$16571)) (cdr g$0$16571)))))))) g$0$16547) ((lambda (g$0$16549) ((lambda (g$0$16551) (if (if g$0$16551 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16551)) (quote #f)) (apply (lambda () (call-with-values (lambda () (g$0$16319 g$0$16446 g$0$16538 g$0$16448 g$0$16449 g$0$16450 g$0$16451)) (lambda (g$0$16554 g$0$16555) (call-with-values (lambda () (g$0$16539 g$0$16555)) (lambda (g$0$16558 g$0$16559) (values (g$0$16323 g$0$16558 g$0$16554) g$0$16559)))))) g$0$16551) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16549 (quote ()))))) ((lambda (g$0$16561) (quote ())) g$0$16549))) g$0$16545))) ((lambda (g$0$16577) (if (g$0$11027 g$0$16577) (begin (quote #f) ((lambda (g$0$16579) (if g$0$16579 (begin (quote #f) ((lambda (g$0$16581) (if g$0$16581 (begin (quote #f) (append g$0$16579 g$0$16581)) (quote #f))) ((lambda (g$0$16583) (list g$0$16583)) (g$0$11039 g$0$16577)))) (quote #f))) ((lambda (g$0$16585) (list g$0$16585)) (g$0$11035 g$0$16577)))) (quote #f))) g$0$16545))) g$0$16541))) ((lambda (g$0$16587) (if (equal? (g$0$11061 g$0$16587) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$16541))) g$0$16538)))) (g$0$16535 g$0$16533 (lambda (g$0$16589) (call-with-values (lambda () (g$0$16319 g$0$16446 g$0$16531 g$0$16448 (cons (quote ()) g$0$16589) g$0$16450 (quote #f))) (lambda (g$0$16592 g$0$16593) (if (null? (car g$0$16593)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (g$0$11059 g$0$16446 (quote ()))) (values (g$0$16327 g$0$16592 (car g$0$16593)) (cdr g$0$16593))))))))) g$0$16467) ((lambda (g$0$16469) ((lambda (g$0$16471) (if (if g$0$16471 (begin (quote #f) (apply (lambda (g$0$16516 g$0$16517) (quote #t)) g$0$16471)) (quote #f)) (apply (lambda (g$0$16504 g$0$16505) (call-with-values (lambda () (g$0$16319 g$0$16446 g$0$16504 g$0$16448 g$0$16449 g$0$16450 (quote #f))) (lambda (g$0$16508 g$0$16509) (call-with-values (lambda () (g$0$16319 g$0$16446 g$0$16505 g$0$16448 g$0$16509 g$0$16450 g$0$16451)) (lambda (g$0$16512 g$0$16513) (values (g$0$16329 g$0$16447 g$0$16504 g$0$16505 g$0$16508 g$0$16512) g$0$16513)))))) g$0$16471) ((lambda (g$0$16473) ((lambda (g$0$16475) (if (if g$0$16475 (begin (quote #f) (apply (lambda (g$0$16489) (not (g$0$10993 g$0$16447))) g$0$16475)) (quote #f)) (apply (lambda (g$0$16483) (call-with-values (lambda () (g$0$16319 g$0$16446 g$0$16483 g$0$16448 g$0$16449 g$0$16450 (quote #t))) (lambda (g$0$16486 g$0$16487) (values (g$0$16331 g$0$16447 g$0$16483 g$0$16486) g$0$16487)))) g$0$16475) ((lambda (g$0$16477) ((lambda (g$0$16479) (if (if g$0$16479 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16479)) (quote #f)) (apply (lambda () (values (list (quote quote) g$0$16447) g$0$16449)) g$0$16479) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16477 (quote ()))))) ((lambda (g$0$16481) (quote ())) g$0$16477))) g$0$16473))) ((lambda (g$0$16491) (if (g$0$11029 g$0$16491) (begin (quote #f) ((letrec ((g$0$16493 (lambda (g$0$16495) (if (g$0$11027 g$0$16495) ((lambda (g$0$16497) (if g$0$16497 (begin (quote #f) ((lambda (g$0$16499) (if g$0$16499 (begin (quote #f) (map cons g$0$16497 g$0$16499)) (quote #f))) (g$0$16493 (g$0$11039 g$0$16495)))) (quote #f))) ((lambda (g$0$16501) (list g$0$16501)) (g$0$11035 g$0$16495))) (if (g$0$11031 g$0$16495) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$16493) (g$0$11025 g$0$16491))) (quote #f))) g$0$16473))) g$0$16469))) ((lambda (g$0$16519) (if (g$0$11027 g$0$16519) (begin (quote #f) ((lambda (g$0$16521) (if g$0$16521 (begin (quote #f) ((lambda (g$0$16523) (if g$0$16523 (begin (quote #f) (append g$0$16521 g$0$16523)) (quote #f))) ((lambda (g$0$16525) (list g$0$16525)) (g$0$11039 g$0$16519)))) (quote #f))) ((lambda (g$0$16527) (list g$0$16527)) (g$0$11035 g$0$16519)))) (quote #f))) g$0$16469))) g$0$16465))) ((lambda (g$0$16601) (if (g$0$11027 g$0$16601) (begin (quote #f) ((lambda (g$0$16603) (if g$0$16603 (begin (quote #f) ((lambda (g$0$16605) (if g$0$16605 (begin (quote #f) (append g$0$16603 g$0$16605)) (quote #f))) ((lambda (g$0$16607) (if (g$0$11027 g$0$16607) (begin (quote #f) ((lambda (g$0$16609) (if g$0$16609 (begin (quote #f) ((lambda (g$0$16611) (if g$0$16611 (begin (quote #f) (append g$0$16609 g$0$16611)) (quote #f))) ((lambda (g$0$16613) (list g$0$16613)) (g$0$11039 g$0$16607)))) (quote #f))) ((lambda (g$0$16615) (list g$0$16615)) (g$0$11035 g$0$16607)))) (quote #f))) (g$0$11039 g$0$16601)))) (quote #f))) ((lambda (g$0$16617) (list g$0$16617)) (g$0$11035 g$0$16601)))) (quote #f))) g$0$16465))) g$0$16461))) ((lambda (g$0$16629) (if (g$0$11027 g$0$16629) (begin (quote #f) ((lambda (g$0$16631) (if g$0$16631 (begin (quote #f) ((lambda (g$0$16633) (if g$0$16633 (begin (quote #f) (append g$0$16631 g$0$16633)) (quote #f))) ((lambda (g$0$16635) (if (g$0$11027 g$0$16635) (begin (quote #f) ((lambda (g$0$16637) (if g$0$16637 (begin (quote #f) ((lambda (g$0$16639) (if g$0$16639 (begin (quote #f) (append g$0$16637 g$0$16639)) (quote #f))) ((lambda (g$0$16641) (if (equal? (g$0$11061 g$0$16641) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$16635)))) (quote #f))) ((lambda (g$0$16643) (list g$0$16643)) (g$0$11035 g$0$16635)))) (quote #f))) (g$0$11039 g$0$16629)))) (quote #f))) ((lambda (g$0$16645) (list g$0$16645)) (g$0$11035 g$0$16629)))) (quote #f))) g$0$16461))) g$0$16457))) ((lambda (g$0$16661) (list g$0$16661)) g$0$16457))) g$0$16453))) ((lambda (g$0$16667) (list g$0$16667)) g$0$16453))) g$0$16447))) (set! g$0$16321 (lambda (g$0$16426 g$0$16427 g$0$16428 g$0$16429) (if (= g$0$16428 (quote 0)) (values g$0$16427 g$0$16429) (if (null? g$0$16429) (error (quote expander) (quote "~a ~s") (quote "missing ellipsis in syntax form") (g$0$11059 g$0$16426 (quote ()))) (call-with-values (lambda () (g$0$16321 g$0$16426 g$0$16427 (- g$0$16428 (quote 1)) (cdr g$0$16429))) (lambda (g$0$16432 g$0$16433) ((lambda (g$0$16435) (if g$0$16435 ((lambda (g$0$16439) (values (cdr g$0$16439) g$0$16429)) g$0$16435) ((lambda (g$0$16437) (values g$0$16437 (cons (cons (cons g$0$16432 g$0$16437) (car g$0$16429)) g$0$16433))) (g$0$10951 (quote tmp))))) (assq g$0$16432 (car g$0$16429))))))))) (set! g$0$16323 (lambda (g$0$16420 g$0$16421) (if (equal? g$0$16421 (quote (quote ()))) g$0$16420 (list (quote append) g$0$16420 g$0$16421)))) (set! g$0$16325 (lambda (g$0$16416 g$0$16417) (list (quote apply) (quote (primitive append)) (g$0$16327 g$0$16416 g$0$16417)))) (set! g$0$16327 (lambda (g$0$16398 g$0$16399) ((lambda (g$0$16402 g$0$16403) (if (eq? (car g$0$16398) (quote ref)) (car g$0$16403) (if (for-all (lambda (g$0$16411) (if (eq? (car g$0$16411) (quote ref)) (begin (quote #f) (memq (cadr g$0$16411) g$0$16402)) (quote #f))) (cdr g$0$16398)) ((lambda (g$0$16405) (cons (quote map) (cons (list (quote primitive) (car g$0$16398)) g$0$16405))) (map ((lambda (g$0$16407) (lambda (g$0$16409) (cdr (assq (cadr g$0$16409) g$0$16407)))) (map cons g$0$16402 g$0$16403)) (cdr g$0$16398))) (cons* (quote map) (list (quote lambda) g$0$16402 g$0$16398) g$0$16403)))) (map cdr g$0$16399) (map (lambda (g$0$16413) (list (quote ref) (car g$0$16413))) g$0$16399)))) (set! g$0$16329 (lambda (g$0$16386 g$0$16387 g$0$16388 g$0$16389 g$0$16390) ((lambda (g$0$16391) (if (memv g$0$16391 (quote (quote))) (if (eq? (car g$0$16389) (quote quote)) ((lambda (g$0$16394 g$0$16395) (if (if (eq? g$0$16394 g$0$16387) (begin (quote #f) (eq? g$0$16395 g$0$16388)) (quote #f)) (list (quote quote) g$0$16386) (list (quote quote) (cons g$0$16394 g$0$16395)))) (cadr g$0$16389) (cadr g$0$16390)) (if (null? (cadr g$0$16390)) (list (quote list) g$0$16389) (list (quote cons) g$0$16389 g$0$16390))) (if (memv g$0$16391 (quote (list))) (cons (quote list) (cons g$0$16389 (cdr g$0$16390))) (list (quote cons) g$0$16389 g$0$16390)))) (car g$0$16390)))) (set! g$0$16331 (lambda (g$0$16378 g$0$16379 g$0$16380) (if (eq? (car g$0$16380) (quote quote)) (if (eq? (cadr g$0$16380) g$0$16379) (list (quote quote) g$0$16378) (list (quote quote) (list->vector (cadr g$0$16380)))) (if (eq? (car g$0$16380) (quote list)) (cons (quote vector) (cdr g$0$16380)) (list (quote list->vector) g$0$16380))))) (set! g$0$16333 (lambda (g$0$16371) ((lambda (g$0$16372) (if (memv g$0$16372 (quote (ref))) (cadr g$0$16371) (if (memv g$0$16372 (quote (primitive))) (list (quote primitive) (cadr g$0$16371)) (if (memv g$0$16372 (quote (quote))) (list (quote quote) (cadr g$0$16371)) (if (memv g$0$16372 (quote (lambda))) (g$0$10929 (quote #f) (cadr g$0$16371) (g$0$16333 (caddr g$0$16371))) (if (memv g$0$16372 (quote (map))) ((lambda (g$0$16374) (cons (quote (primitive map)) g$0$16374)) (map g$0$16333 (cdr g$0$16371))) (cons (list (quote primitive) (car g$0$16371)) (map g$0$16333 (cdr g$0$16371))))))))) (car g$0$16371)))) (lambda (g$0$16337 g$0$16338 g$0$16339) ((lambda (g$0$16341) ((lambda (g$0$16343) (if (if g$0$16343 (begin (quote #f) (apply (lambda (g$0$16351) (quote #t)) g$0$16343)) (quote #f)) (apply (lambda (g$0$16345) (call-with-values (lambda () (g$0$16319 g$0$16337 g$0$16345 g$0$16338 (quote ()) g$0$11374 (quote #f))) (lambda (g$0$16348 g$0$16349) (g$0$16333 g$0$16348)))) g$0$16343) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16341 (quote ()))))) ((lambda (g$0$16353) (if (g$0$11027 g$0$16353) (begin (quote #f) ((lambda (g$0$16355) (if g$0$16355 (begin (quote #f) ((lambda (g$0$16357) (if g$0$16357 (begin (quote #f) (append g$0$16355 g$0$16357)) (quote #f))) ((lambda (g$0$16359) (if (g$0$11027 g$0$16359) (begin (quote #f) ((lambda (g$0$16361) (if g$0$16361 (begin (quote #f) ((lambda (g$0$16363) (if g$0$16363 (begin (quote #f) (append g$0$16361 g$0$16363)) (quote #f))) ((lambda (g$0$16365) (if (equal? (g$0$11061 g$0$16365) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$16359)))) (quote #f))) ((lambda (g$0$16367) (list g$0$16367)) (g$0$11035 g$0$16359)))) (quote #f))) (g$0$11039 g$0$16353)))) (quote #f))) ((lambda (g$0$16369) (quote ())) (g$0$11035 g$0$16353)))) (quote #f))) g$0$16341))) g$0$16337)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$11380 (lambda (g$0$16669) ((lambda (g$0$16670) (if (memv g$0$16670 (quote (quote))) g$0$11318 (if (memv g$0$16670 (quote (lambda))) g$0$11322 (if (memv g$0$16670 (quote (case-lambda))) g$0$11320 (if (memv g$0$16670 (quote (let-values))) g$0$11300 (if (memv g$0$16670 (quote (letrec))) g$0$11304 (if (memv g$0$16670 (quote (letrec*))) g$0$11306 (if (memv g$0$16670 (quote (case))) g$0$11316 (if (memv g$0$16670 (quote (if))) g$0$11314 (if (memv g$0$16670 (quote (when))) g$0$11310 (if (memv g$0$16670 (quote (unless))) g$0$11312 (if (memv g$0$16670 (quote (parameterize))) g$0$11366 (if (memv g$0$16670 (quote (foreign-call))) g$0$11368 (if (memv g$0$16670 (quote (syntax-case))) g$0$11376 (if (memv g$0$16670 (quote (syntax))) g$0$11378 (if (memv g$0$16670 (quote (type-descriptor))) g$0$11308 (error (quote macro-transformer) (quote "cannot find ~s") g$0$16669))))))))))))))))) g$0$16669))) (set! g$0$11382 (lambda (g$0$16672) (if (procedure? g$0$16672) g$0$16672 (if (symbol? g$0$16672) ((lambda (g$0$16673) (if (memv g$0$16673 (quote (define-record))) g$0$11362 (if (memv g$0$16673 (quote (include))) g$0$11354 (if (memv g$0$16673 (quote (cond))) g$0$11352 (if (memv g$0$16673 (quote (let))) g$0$11328 (if (memv g$0$16673 (quote (do))) g$0$11344 (if (memv g$0$16673 (quote (or))) g$0$11348 (if (memv g$0$16673 (quote (and))) g$0$11350 (if (memv g$0$16673 (quote (let*))) g$0$11346 (if (memv g$0$16673 (quote (syntax-rules))) g$0$11356 (if (memv g$0$16673 (quote (quasiquote))) g$0$11358 (if (memv g$0$16673 (quote (quasisyntax))) g$0$11360 (if (memv g$0$16673 (quote (with-syntax))) g$0$11326 (if (memv g$0$16673 (quote (identifier-syntax))) g$0$11342 (if (memv g$0$16673 (quote (time))) g$0$11334 (if (memv g$0$16673 (quote (delay))) g$0$11336 (if (memv g$0$16673 (quote (assert))) g$0$11338 (if (memv g$0$16673 (quote (endianness))) g$0$11340 (if (memv g$0$16673 (quote (trace-lambda))) g$0$11330 (if (memv g$0$16673 (quote (trace-define))) g$0$11332 (if (memv g$0$16673 (quote (... => _ else unquote unquote-splicing unsyntax unsyntax-splicing))) g$0$11364 (error (quote macro-transformer) (quote "invalid macro ~s") g$0$16672)))))))))))))))))))))) g$0$16672) (error (quote core-macro-transformer) (quote "invalid macro ~s") g$0$16672))))) (set! g$0$11384 (lambda (g$0$16675) (car g$0$16675))) (set! g$0$11386 (lambda (g$0$16678 g$0$16679) ((lambda (g$0$16681) (g$0$11019 (g$0$11009) g$0$16681)) ((g$0$11382 g$0$16678) (g$0$11019 g$0$11011 g$0$16679))))) (set! g$0$11388 (lambda (g$0$16684 g$0$16685) ((lambda (g$0$16687) (g$0$11019 (g$0$11009) g$0$16687)) ((g$0$11384 g$0$16684) (g$0$11019 g$0$11011 g$0$16685))))) (set! g$0$11390 (lambda (g$0$16690 g$0$16691) ((lambda (g$0$16694 g$0$16695) (begin (g$0$10644 g$0$16694) ((lambda (g$0$16697) ((lambda (g$0$16699) ((lambda (g$0$16701) (g$0$11019 (g$0$11009) g$0$16701)) (g$0$16699 (g$0$11019 g$0$11011 g$0$16691)))) (if (procedure? g$0$16697) g$0$16697 (error (quote chi-global-macro) (quote "~s is not a procedure"))))) (symbol-value g$0$16695)))) (car g$0$16690) (cdr g$0$16690)))) (set! g$0$11392 (lambda (g$0$16705 g$0$16706 g$0$16707) (if (null? g$0$16705) (quote ()) ((lambda (g$0$16709) (cons g$0$16709 (g$0$11392 (cdr g$0$16705) g$0$16706 g$0$16707))) (g$0$11396 (car g$0$16705) g$0$16706 g$0$16707))))) (set! g$0$11394 (lambda (g$0$16713 g$0$16714 g$0$16715) ((lambda (g$0$16717) ((lambda (g$0$16719) (if (if g$0$16719 (begin (quote #f) (apply (lambda (g$0$16728 g$0$16729) (quote #t)) g$0$16719)) (quote #f)) (apply (lambda (g$0$16722 g$0$16723) ((lambda (g$0$16725) (cons g$0$16725 (g$0$11392 g$0$16723 g$0$16714 g$0$16715))) (g$0$11396 g$0$16722 g$0$16714 g$0$16715))) g$0$16719) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16717 (quote ()))))) ((lambda (g$0$16731) (if (g$0$11027 g$0$16731) (begin (quote #f) ((lambda (g$0$16733) (if g$0$16733 (begin (quote #f) ((lambda (g$0$16735) (if g$0$16735 (begin (quote #f) (append g$0$16733 g$0$16735)) (quote #f))) ((letrec ((g$0$16737 (lambda (g$0$16739) (if (g$0$11027 g$0$16739) ((lambda (g$0$16741) (if g$0$16741 (begin (quote #f) ((lambda (g$0$16743) (if g$0$16743 (begin (quote #f) (map cons g$0$16741 g$0$16743)) (quote #f))) (g$0$16737 (g$0$11039 g$0$16739)))) (quote #f))) ((lambda (g$0$16745) (list g$0$16745)) (g$0$11035 g$0$16739))) (if (g$0$11031 g$0$16739) (list (begin (quote rands) (quote ()))) (quote #f)))))) g$0$16737) (g$0$11039 g$0$16731)))) (quote #f))) ((lambda (g$0$16747) (list g$0$16747)) (g$0$11035 g$0$16731)))) (quote #f))) g$0$16717))) g$0$16713))) (set! g$0$11396 (lambda (g$0$16751 g$0$16752 g$0$16753) (call-with-values (lambda () (g$0$11073 g$0$16751 g$0$16752)) (lambda (g$0$16757 g$0$16758 g$0$16759) ((lambda (g$0$16760) (if (memv g$0$16760 (quote (core-macro))) ((lambda (g$0$16898) (g$0$16898 g$0$16751 g$0$16752 g$0$16753)) (g$0$11380 g$0$16758)) (if (memv g$0$16760 (quote (global))) ((lambda (g$0$16894) ((lambda (g$0$16896) ((lambda () (begin ((g$0$11444) g$0$16894) g$0$16896)))) (cdr g$0$16758))) (car g$0$16758)) (if (memv g$0$16760 (quote (core-prim))) ((lambda (g$0$16892) (list (quote primitive) g$0$16892)) g$0$16758) (if (memv g$0$16760 (quote (call))) (g$0$11394 g$0$16751 g$0$16752 g$0$16753) (if (memv g$0$16760 (quote (lexical))) ((lambda (g$0$16890) g$0$16890) g$0$16758) (if (memv g$0$16760 (quote (global-macro global-macro!))) (g$0$11396 (g$0$11390 g$0$16758 g$0$16751) g$0$16752 g$0$16753) (if (memv g$0$16760 (quote (local-macro local-macro!))) (g$0$11396 (g$0$11388 g$0$16758 g$0$16751) g$0$16752 g$0$16753) (if (memv g$0$16760 (quote (macro macro!))) (g$0$11396 (g$0$11386 g$0$16758 g$0$16751) g$0$16752 g$0$16753) (if (memv g$0$16760 (quote (constant))) ((lambda (g$0$16888) (list (quote quote) g$0$16888)) g$0$16758) (if (memv g$0$16760 (quote (set!))) (g$0$11398 g$0$16751 g$0$16752 g$0$16753) (if (memv g$0$16760 (quote (begin))) ((lambda (g$0$16850) ((lambda (g$0$16852) (if (if g$0$16852 (begin (quote #f) (apply (lambda (g$0$16859 g$0$16860) (quote #t)) g$0$16852)) (quote #f)) (apply (lambda (g$0$16855 g$0$16856) (g$0$10923 (quote #f) (g$0$11392 (cons g$0$16855 g$0$16856) g$0$16752 g$0$16753))) g$0$16852) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16850 (quote ()))))) ((lambda (g$0$16862) (if (g$0$11027 g$0$16862) (begin (quote #f) ((lambda (g$0$16864) (if g$0$16864 (begin (quote #f) ((lambda (g$0$16866) (if g$0$16866 (begin (quote #f) (append g$0$16864 g$0$16866)) (quote #f))) ((lambda (g$0$16868) (if (g$0$11027 g$0$16868) (begin (quote #f) ((lambda (g$0$16870) (if g$0$16870 (begin (quote #f) ((lambda (g$0$16872) (if g$0$16872 (begin (quote #f) (append g$0$16870 g$0$16872)) (quote #f))) ((letrec ((g$0$16874 (lambda (g$0$16876) (if (g$0$11027 g$0$16876) ((lambda (g$0$16878) (if g$0$16878 (begin (quote #f) ((lambda (g$0$16880) (if g$0$16880 (begin (quote #f) (map cons g$0$16878 g$0$16880)) (quote #f))) (g$0$16874 (g$0$11039 g$0$16876)))) (quote #f))) ((lambda (g$0$16882) (list g$0$16882)) (g$0$11035 g$0$16876))) (if (g$0$11031 g$0$16876) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$16874) (g$0$11039 g$0$16868)))) (quote #f))) ((lambda (g$0$16884) (list g$0$16884)) (g$0$11035 g$0$16868)))) (quote #f))) (g$0$11039 g$0$16862)))) (quote #f))) ((lambda (g$0$16886) (quote ())) (g$0$11035 g$0$16862)))) (quote #f))) g$0$16850))) g$0$16751) (if (memv g$0$16760 (quote (let-syntax letrec-syntax))) ((lambda (g$0$16762) ((lambda (g$0$16764) (if (if g$0$16764 (begin (quote #f) (apply (lambda (g$0$16787 g$0$16788 g$0$16789 g$0$16790) (if (g$0$11051 g$0$16787) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (g$0$11059 g$0$16751 (quote ()))))) g$0$16764)) (quote #f)) (apply (lambda (g$0$16769 g$0$16770 g$0$16771 g$0$16772) ((lambda (g$0$16774) ((lambda (g$0$16776) ((lambda (g$0$16778) ((lambda () (g$0$10923 (quote #f) (g$0$11392 (map (lambda (g$0$16780) (g$0$11021 g$0$16776 g$0$16780)) (cons g$0$16771 g$0$16772)) (append (map cons g$0$16774 g$0$16778) g$0$16752) (append (map cons g$0$16774 g$0$16778) g$0$16753)))))) (map (lambda (g$0$16782) (g$0$11091 (g$0$11430 (if (eq? g$0$16757 (quote let-syntax)) g$0$16782 (g$0$11021 g$0$16776 g$0$16782)) g$0$16753))) g$0$16770))) (g$0$10988 g$0$16769 g$0$16774))) (map g$0$10955 g$0$16769))) g$0$16764) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16762 (quote ()))))) ((lambda (g$0$16792) (if (g$0$11027 g$0$16792) (begin (quote #f) ((lambda (g$0$16794) (if g$0$16794 (begin (quote #f) ((lambda (g$0$16796) (if g$0$16796 (begin (quote #f) (append g$0$16794 g$0$16796)) (quote #f))) ((lambda (g$0$16798) (if (g$0$11027 g$0$16798) (begin (quote #f) ((lambda (g$0$16800) (if g$0$16800 (begin (quote #f) ((lambda (g$0$16802) (if g$0$16802 (begin (quote #f) (append g$0$16800 g$0$16802)) (quote #f))) ((lambda (g$0$16804) (if (g$0$11027 g$0$16804) (begin (quote #f) ((lambda (g$0$16806) (if g$0$16806 (begin (quote #f) ((lambda (g$0$16808) (if g$0$16808 (begin (quote #f) (append g$0$16806 g$0$16808)) (quote #f))) ((letrec ((g$0$16810 (lambda (g$0$16812) (if (g$0$11027 g$0$16812) ((lambda (g$0$16814) (if g$0$16814 (begin (quote #f) ((lambda (g$0$16816) (if g$0$16816 (begin (quote #f) (map cons g$0$16814 g$0$16816)) (quote #f))) (g$0$16810 (g$0$11039 g$0$16812)))) (quote #f))) ((lambda (g$0$16818) (list g$0$16818)) (g$0$11035 g$0$16812))) (if (g$0$11031 g$0$16812) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$16810) (g$0$11039 g$0$16804)))) (quote #f))) ((lambda (g$0$16820) (list g$0$16820)) (g$0$11035 g$0$16804)))) (quote #f))) (g$0$11039 g$0$16798)))) (quote #f))) ((letrec ((g$0$16822 (lambda (g$0$16824) (if (g$0$11027 g$0$16824) ((lambda (g$0$16826) (if g$0$16826 (begin (quote #f) ((lambda (g$0$16828) (if g$0$16828 (begin (quote #f) (map cons g$0$16826 g$0$16828)) (quote #f))) (g$0$16822 (g$0$11039 g$0$16824)))) (quote #f))) ((lambda (g$0$16830) (if (g$0$11027 g$0$16830) (begin (quote #f) ((lambda (g$0$16832) (if g$0$16832 (begin (quote #f) ((lambda (g$0$16834) (if g$0$16834 (begin (quote #f) (append g$0$16832 g$0$16834)) (quote #f))) ((lambda (g$0$16836) (if (g$0$11027 g$0$16836) (begin (quote #f) ((lambda (g$0$16838) (if g$0$16838 (begin (quote #f) ((lambda (g$0$16840) (if g$0$16840 (begin (quote #f) (append g$0$16838 g$0$16840)) (quote #f))) ((lambda (g$0$16842) (if (equal? (g$0$11061 g$0$16842) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$16836)))) (quote #f))) ((lambda (g$0$16844) (list g$0$16844)) (g$0$11035 g$0$16836)))) (quote #f))) (g$0$11039 g$0$16830)))) (quote #f))) ((lambda (g$0$16846) (list g$0$16846)) (g$0$11035 g$0$16830)))) (quote #f))) (g$0$11035 g$0$16824))) (if (g$0$11031 g$0$16824) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$16822) (g$0$11035 g$0$16798)))) (quote #f))) (g$0$11039 g$0$16792)))) (quote #f))) ((lambda (g$0$16848) (quote ())) (g$0$11035 g$0$16792)))) (quote #f))) g$0$16762))) g$0$16751) (if (memv g$0$16760 (quote (displaced-lexical))) (error (quote expander) (quote "~a ~s") (quote "identifier out of context") (g$0$11059 g$0$16751 (quote ()))) (if (memv g$0$16760 (quote (syntax))) (error (quote expander) (quote "~a ~s") (quote "reference to pattern variable outside a syntax form") (g$0$11059 g$0$16751 (quote ()))) (if (memv g$0$16760 (quote (define define-syntax module import))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (g$0$11059 g$0$16751 (quote ()))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (g$0$11059 g$0$16751 (quote ()))))))))))))))))))) g$0$16757))))) (set! g$0$11398 (lambda (g$0$16902 g$0$16903 g$0$16904) ((lambda (g$0$16906) ((lambda (g$0$16908) (if (if g$0$16908 (begin (quote #f) (apply (lambda (g$0$16922 g$0$16923) (g$0$11041 g$0$16922)) g$0$16908)) (quote #f)) (apply (lambda (g$0$16911 g$0$16912) (call-with-values (lambda () (g$0$11073 g$0$16911 g$0$16903)) (lambda (g$0$16916 g$0$16917 g$0$16918) ((lambda (g$0$16919) (if (memv g$0$16919 (quote (lexical))) (list (quote set!) g$0$16917 (g$0$11396 g$0$16912 g$0$16903 g$0$16904)) (if (memv g$0$16919 (quote (global core-prim))) (error (quote expander) (quote "~a ~s") (quote "cannot modify imported identifier in") (g$0$11059 g$0$16902 (quote ()))) (if (memv g$0$16919 (quote (global-macro!))) (g$0$11396 (g$0$11390 g$0$16917 g$0$16902) g$0$16903 g$0$16904) (if (memv g$0$16919 (quote (local-macro!))) (g$0$11396 (g$0$11388 g$0$16917 g$0$16902) g$0$16903 g$0$16904) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$16902))))))) g$0$16916)))) g$0$16908) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16906 (quote ()))))) ((lambda (g$0$16925) (if (g$0$11027 g$0$16925) (begin (quote #f) ((lambda (g$0$16927) (if g$0$16927 (begin (quote #f) ((lambda (g$0$16929) (if g$0$16929 (begin (quote #f) (append g$0$16927 g$0$16929)) (quote #f))) ((lambda (g$0$16931) (if (g$0$11027 g$0$16931) (begin (quote #f) ((lambda (g$0$16933) (if g$0$16933 (begin (quote #f) ((lambda (g$0$16935) (if g$0$16935 (begin (quote #f) (append g$0$16933 g$0$16935)) (quote #f))) ((lambda (g$0$16937) (if (g$0$11027 g$0$16937) (begin (quote #f) ((lambda (g$0$16939) (if g$0$16939 (begin (quote #f) ((lambda (g$0$16941) (if g$0$16941 (begin (quote #f) (append g$0$16939 g$0$16941)) (quote #f))) ((lambda (g$0$16943) (if (equal? (g$0$11061 g$0$16943) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$16937)))) (quote #f))) ((lambda (g$0$16945) (list g$0$16945)) (g$0$11035 g$0$16937)))) (quote #f))) (g$0$11039 g$0$16931)))) (quote #f))) ((lambda (g$0$16947) (list g$0$16947)) (g$0$11035 g$0$16931)))) (quote #f))) (g$0$11039 g$0$16925)))) (quote #f))) ((lambda (g$0$16949) (quote ())) (g$0$11035 g$0$16925)))) (quote #f))) g$0$16906))) g$0$16902))) (set! g$0$11400 (lambda (g$0$16954 g$0$16955 g$0$16956 g$0$16957) ((lambda (g$0$16959) ((lambda (g$0$16961) (if (if g$0$16961 (begin (quote #f) (apply (lambda (g$0$17013) (quote #t)) g$0$16961)) (quote #f)) (apply (lambda (g$0$17007) (if (g$0$11051 g$0$17007) ((lambda (g$0$17010 g$0$17011) (values g$0$17010 (g$0$11412 (g$0$11021 (g$0$10988 g$0$17007 g$0$17011) g$0$16955) (g$0$11298 g$0$17011 g$0$17010 g$0$16956) g$0$16957))) (map g$0$10951 g$0$17007) (map g$0$10955 g$0$17007)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (g$0$11059 g$0$16954 (quote ()))))) g$0$16961) ((lambda (g$0$16963) ((lambda (g$0$16965) (if (if g$0$16965 (begin (quote #f) (apply (lambda (g$0$16986 g$0$16987) (quote #t)) g$0$16965)) (quote #f)) (apply (lambda (g$0$16974 g$0$16975) (if (g$0$11051 (cons g$0$16975 g$0$16974)) ((lambda (g$0$16980 g$0$16981 g$0$16982 g$0$16983) (values (append g$0$16980 g$0$16982) (g$0$11412 (g$0$11021 (g$0$10988 (cons g$0$16975 g$0$16974) (cons g$0$16983 g$0$16981)) g$0$16955) (g$0$11298 (cons g$0$16983 g$0$16981) (cons g$0$16982 g$0$16980) g$0$16956) g$0$16957))) (map g$0$10951 g$0$16974) (map g$0$10955 g$0$16974) (g$0$10951 g$0$16975) (g$0$10955 g$0$16975)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (g$0$11059 g$0$16954 (quote ()))))) g$0$16965) ((lambda (g$0$16967) ((lambda (g$0$16969) (if (if g$0$16969 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16969)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (g$0$11059 g$0$16954 (quote ())))) g$0$16969) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$16967 (quote ()))))) ((lambda (g$0$16971) (quote ())) g$0$16967))) g$0$16963))) ((letrec ((g$0$16989 (lambda (g$0$16991) (if (g$0$11027 g$0$16991) ((lambda (g$0$16997) (if g$0$16997 (begin (quote #f) ((lambda (g$0$16999) (if g$0$16999 (begin (quote #f) (cons (map cons g$0$16997 (car g$0$16999)) (cdr g$0$16999))) (quote #f))) (g$0$16989 (g$0$11039 g$0$16991)))) (quote #f))) ((lambda (g$0$17001) (list g$0$17001)) (g$0$11035 g$0$16991))) ((lambda (g$0$16993) (if g$0$16993 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$0$16993)) (quote #f))) ((lambda (g$0$16995) (list g$0$16995)) g$0$16991)))))) (lambda (g$0$17003) ((lambda (g$0$17005) (if g$0$17005 (begin (quote #f) (append (car g$0$17005) (cdr g$0$17005))) (quote #f))) (g$0$16989 g$0$17003)))) g$0$16963))) g$0$16959))) ((letrec ((g$0$17015 (lambda (g$0$17017) (if (g$0$11027 g$0$17017) ((lambda (g$0$17019) (if g$0$17019 (begin (quote #f) ((lambda (g$0$17021) (if g$0$17021 (begin (quote #f) (map cons g$0$17019 g$0$17021)) (quote #f))) (g$0$17015 (g$0$11039 g$0$17017)))) (quote #f))) ((lambda (g$0$17023) (list g$0$17023)) (g$0$11035 g$0$17017))) (if (g$0$11031 g$0$17017) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17015) g$0$16959))) g$0$16954))) (set! g$0$11402 (lambda (g$0$17028 g$0$17029 g$0$17030 g$0$17031) (if (null? g$0$17028) (values (quote ()) (quote ())) (call-with-values (lambda () (g$0$11400 (car g$0$17028) (car g$0$17029) g$0$17030 g$0$17031)) (lambda (g$0$17034 g$0$17035) (call-with-values (lambda () (g$0$11402 (cdr g$0$17028) (cdr g$0$17029) g$0$17030 g$0$17031)) (lambda (g$0$17038 g$0$17039) (values (cons g$0$17034 g$0$17038) (cons g$0$17035 g$0$17039))))))))) (set! g$0$11404 (lambda (g$0$17043 g$0$17044 g$0$17045) ((lambda (g$0$17046) (if (memv g$0$17046 (quote (defun))) ((lambda (g$0$17052) ((lambda (g$0$17055 g$0$17056) (call-with-values (lambda () (g$0$11400 g$0$17055 g$0$17056 g$0$17044 g$0$17045)) (lambda (g$0$17059 g$0$17060) (g$0$10929 (quote #f) g$0$17059 g$0$17060)))) (car g$0$17052) (cdr g$0$17052))) (cdr g$0$17043)) (if (memv g$0$17046 (quote (expr))) ((lambda (g$0$17050) (g$0$11396 g$0$17050 g$0$17044 g$0$17045)) (cdr g$0$17043)) (if (memv g$0$17046 (quote (top-expr))) ((lambda (g$0$17048) (g$0$10923 (quote #f) (list (g$0$11396 g$0$17048 g$0$17044 g$0$17045) (g$0$10922)))) (cdr g$0$17043)) (error (quote chi-rhs) (quote "invalid rhs ~s") g$0$17043))))) (car g$0$17043)))) (set! g$0$11406 (lambda (g$0$17064 g$0$17065 g$0$17066) (letrec ((g$0$17068 (lambda (g$0$17070) (if (null? g$0$17070) (quote ()) ((lambda (g$0$17072) (cons g$0$17072 (g$0$17068 (cdr g$0$17070)))) (g$0$11404 (car g$0$17070) g$0$17065 g$0$17066)))))) (g$0$17068 g$0$17064)))) (set! g$0$11408 (lambda (g$0$17076 g$0$17077 g$0$17078) (if (null? g$0$17077) (quote #f) (if (g$0$11047 g$0$17076 (car g$0$17077)) (car g$0$17078) (g$0$11408 g$0$17076 (cdr g$0$17077) (cdr g$0$17078)))))) (set! g$0$11410 (lambda (g$0$17080) (letrec ((g$0$17082 (lambda (g$0$17085 g$0$17086) (if (null? g$0$17085) g$0$17086 ((lambda (g$0$17088) (if g$0$17088 ((lambda (g$0$17090) (g$0$17082 (cdr g$0$17085) (cons (list (car g$0$17085) g$0$17090) g$0$17086))) g$0$17088) (g$0$17082 (cdr g$0$17085) g$0$17086))) (g$0$11408 (car g$0$17085) (cdr g$0$17085) (cdr g$0$17085))))))) (g$0$17082 g$0$17080 (quote ()))))) (set! g$0$11412 (lambda (g$0$17094 g$0$17095 g$0$17096) ((lambda (g$0$17098) (call-with-values (lambda () (g$0$11418 (map (lambda (g$0$17100) (g$0$11021 g$0$17098 g$0$17100)) (g$0$11037 g$0$17094)) g$0$17095 g$0$17096 (quote ()) (quote ()) (quote ()) (quote ()) g$0$17098 (quote #f))) (lambda (g$0$17108 g$0$17109 g$0$17110 g$0$17111 g$0$17112 g$0$17113 g$0$17114) (begin (if (null? g$0$17108) (error (quote expander) (quote "~a ~s") (quote "no expression in body") (g$0$11059 g$0$17108 (quote ()))) (void)) ((lambda (g$0$17117 g$0$17118) (g$0$10920 (quote #f) (reverse g$0$17111) (reverse g$0$17117) (g$0$10923 (quote #f) g$0$17118))) (g$0$11406 g$0$17112 g$0$17109 g$0$17110) (g$0$11392 (append (apply append (reverse g$0$17113)) g$0$17108) g$0$17109 g$0$17110)))))) (g$0$10978)))) (set! g$0$11414 (lambda (g$0$17120) ((lambda (g$0$17122) ((lambda (g$0$17124) (if (if g$0$17124 (begin (quote #f) (apply (lambda (g$0$17189 g$0$17190) (quote #t)) g$0$17124)) (quote #f)) (apply (lambda (g$0$17185 g$0$17186) (begin (if (for-all g$0$11041 g$0$17185) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (g$0$11059 g$0$17120 (quote ())))) (values (quote #f) g$0$17185 g$0$17186))) g$0$17124) ((lambda (g$0$17126) ((lambda (g$0$17128) (if (if g$0$17128 (begin (quote #f) (apply (lambda (g$0$17138 g$0$17139 g$0$17140) (quote #t)) g$0$17128)) (quote #f)) (apply (lambda (g$0$17132 g$0$17133 g$0$17134) (begin (if (g$0$11041 g$0$17132) (void) (error (quote expander) (quote "~a ~s") (quote "module name must be an identifier") (g$0$11059 g$0$17120 (quote ())))) (if (for-all g$0$11041 g$0$17133) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (g$0$11059 g$0$17120 (quote ())))) (values g$0$17132 g$0$17133 g$0$17134))) g$0$17128) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17126 (quote ()))))) ((lambda (g$0$17142) (if (g$0$11027 g$0$17142) (begin (quote #f) ((lambda (g$0$17144) (if g$0$17144 (begin (quote #f) ((lambda (g$0$17146) (if g$0$17146 (begin (quote #f) (append g$0$17144 g$0$17146)) (quote #f))) ((lambda (g$0$17148) (if (g$0$11027 g$0$17148) (begin (quote #f) ((lambda (g$0$17150) (if g$0$17150 (begin (quote #f) ((lambda (g$0$17152) (if g$0$17152 (begin (quote #f) (append g$0$17150 g$0$17152)) (quote #f))) ((lambda (g$0$17154) (if (g$0$11027 g$0$17154) (begin (quote #f) ((lambda (g$0$17156) (if g$0$17156 (begin (quote #f) ((lambda (g$0$17158) (if g$0$17158 (begin (quote #f) (append g$0$17156 g$0$17158)) (quote #f))) ((letrec ((g$0$17160 (lambda (g$0$17162) (if (g$0$11027 g$0$17162) ((lambda (g$0$17164) (if g$0$17164 (begin (quote #f) ((lambda (g$0$17166) (if g$0$17166 (begin (quote #f) (map cons g$0$17164 g$0$17166)) (quote #f))) (g$0$17160 (g$0$11039 g$0$17162)))) (quote #f))) ((lambda (g$0$17168) (list g$0$17168)) (g$0$11035 g$0$17162))) (if (g$0$11031 g$0$17162) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$17160) (g$0$11039 g$0$17154)))) (quote #f))) ((letrec ((g$0$17170 (lambda (g$0$17172) (if (g$0$11027 g$0$17172) ((lambda (g$0$17174) (if g$0$17174 (begin (quote #f) ((lambda (g$0$17176) (if g$0$17176 (begin (quote #f) (map cons g$0$17174 g$0$17176)) (quote #f))) (g$0$17170 (g$0$11039 g$0$17172)))) (quote #f))) ((lambda (g$0$17178) (list g$0$17178)) (g$0$11035 g$0$17172))) (if (g$0$11031 g$0$17172) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$17170) (g$0$11035 g$0$17154)))) (quote #f))) (g$0$11039 g$0$17148)))) (quote #f))) ((lambda (g$0$17180) (list g$0$17180)) (g$0$11035 g$0$17148)))) (quote #f))) (g$0$11039 g$0$17142)))) (quote #f))) ((lambda (g$0$17182) (quote ())) (g$0$11035 g$0$17142)))) (quote #f))) g$0$17126))) g$0$17122))) ((lambda (g$0$17192) (if (g$0$11027 g$0$17192) (begin (quote #f) ((lambda (g$0$17194) (if g$0$17194 (begin (quote #f) ((lambda (g$0$17196) (if g$0$17196 (begin (quote #f) (append g$0$17194 g$0$17196)) (quote #f))) ((lambda (g$0$17198) (if (g$0$11027 g$0$17198) (begin (quote #f) ((lambda (g$0$17200) (if g$0$17200 (begin (quote #f) ((lambda (g$0$17202) (if g$0$17202 (begin (quote #f) (append g$0$17200 g$0$17202)) (quote #f))) ((letrec ((g$0$17204 (lambda (g$0$17206) (if (g$0$11027 g$0$17206) ((lambda (g$0$17208) (if g$0$17208 (begin (quote #f) ((lambda (g$0$17210) (if g$0$17210 (begin (quote #f) (map cons g$0$17208 g$0$17210)) (quote #f))) (g$0$17204 (g$0$11039 g$0$17206)))) (quote #f))) ((lambda (g$0$17212) (list g$0$17212)) (g$0$11035 g$0$17206))) (if (g$0$11031 g$0$17206) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$17204) (g$0$11039 g$0$17198)))) (quote #f))) ((letrec ((g$0$17214 (lambda (g$0$17216) (if (g$0$11027 g$0$17216) ((lambda (g$0$17218) (if g$0$17218 (begin (quote #f) ((lambda (g$0$17220) (if g$0$17220 (begin (quote #f) (map cons g$0$17218 g$0$17220)) (quote #f))) (g$0$17214 (g$0$11039 g$0$17216)))) (quote #f))) ((lambda (g$0$17222) (list g$0$17222)) (g$0$11035 g$0$17216))) (if (g$0$11031 g$0$17216) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$17214) (g$0$11035 g$0$17198)))) (quote #f))) (g$0$11039 g$0$17192)))) (quote #f))) ((lambda (g$0$17224) (quote ())) (g$0$11035 g$0$17192)))) (quote #f))) g$0$17122))) g$0$17120))) (set! g$0$11416 (lambda (g$0$17232 g$0$17233 g$0$17234 g$0$17235 g$0$17236 g$0$17237 g$0$17238) (call-with-values (lambda () (g$0$11414 g$0$17232)) (lambda (g$0$17242 g$0$17243 g$0$17244) ((lambda (g$0$17246) ((lambda (g$0$17248) ((lambda () (call-with-values (lambda () (g$0$11418 g$0$17248 g$0$17233 g$0$17234 g$0$17235 g$0$17236 g$0$17237 g$0$17238 g$0$17246 (quote #f))) (lambda (g$0$17256 g$0$17257 g$0$17258 g$0$17259 g$0$17260 g$0$17261 g$0$17262) ((lambda (g$0$17265 g$0$17266) (if (not g$0$17242) (values g$0$17259 g$0$17260 g$0$17243 g$0$17265 g$0$17257 g$0$17258 g$0$17266 g$0$17262) ((lambda (g$0$17269 g$0$17270) (values g$0$17259 g$0$17260 (list g$0$17242) (list g$0$17269) (cons (cons g$0$17269 (cons (quote $module) g$0$17270)) g$0$17257) (cons (cons g$0$17269 (cons (quote $module) g$0$17270)) g$0$17258) g$0$17266 g$0$17262)) (g$0$10955 (quote module)) (cons g$0$17243 g$0$17265)))) (map (lambda (g$0$17272) ((lambda (g$0$17274) (if g$0$17274 g$0$17274 (begin (quote #f) (error (quote expander) (quote "~a ~s") (quote "cannot find module export") (g$0$11059 g$0$17272 (quote ())))))) (g$0$11063 (g$0$11021 g$0$17246 g$0$17272)))) g$0$17243) (cons g$0$17256 g$0$17261))))))) (map (lambda (g$0$17276) (g$0$11021 g$0$17246 g$0$17276)) (g$0$11037 g$0$17244)))) (g$0$10978)))))) (set! g$0$11418 (lambda (g$0$17286 g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17292 g$0$17293 g$0$17294) (if (null? g$0$17286) (values g$0$17286 g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17292) ((lambda (g$0$17296) (call-with-values (lambda () (g$0$11073 g$0$17296 g$0$17287)) (lambda (g$0$17300 g$0$17301 g$0$17302) ((lambda (g$0$17304) ((lambda (g$0$17305) (if (memv g$0$17305 (quote (define))) (call-with-values (lambda () (g$0$11290 g$0$17296)) (lambda (g$0$17493 g$0$17494) (begin (if (g$0$11055 g$0$17493 g$0$17304) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (g$0$11059 g$0$17296 (quote ()))) (void)) ((lambda (g$0$17497 g$0$17498) (begin (g$0$10980 g$0$17293 g$0$17493 g$0$17498) (g$0$11418 (cdr g$0$17286) (g$0$11296 g$0$17498 g$0$17497 g$0$17287) g$0$17288 (cons g$0$17497 g$0$17289) (cons g$0$17494 g$0$17290) g$0$17291 g$0$17304 g$0$17293 g$0$17294))) (g$0$10951 g$0$17493) (g$0$10955 g$0$17493))))) (if (memv g$0$17305 (quote (define-syntax))) (call-with-values (lambda () (g$0$11292 g$0$17296)) (lambda (g$0$17483 g$0$17484) (begin (if (g$0$11055 g$0$17483 g$0$17304) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (g$0$11059 g$0$17296 (quote ()))) (void)) ((lambda (g$0$17487 g$0$17488) (begin (g$0$10980 g$0$17293 g$0$17483 g$0$17487) ((lambda (g$0$17490) (g$0$11418 (cdr g$0$17286) (cons (cons g$0$17487 g$0$17490) g$0$17287) (cons (cons g$0$17487 g$0$17490) g$0$17288) g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294)) (g$0$11091 g$0$17488)))) (g$0$10955 g$0$17483) (g$0$11430 g$0$17484 g$0$17288))))) (if (memv g$0$17305 (quote (let-syntax letrec-syntax))) ((lambda (g$0$17406) ((lambda (g$0$17408) (if (if g$0$17408 (begin (quote #f) (apply (lambda (g$0$17428 g$0$17429 g$0$17430) (if (g$0$11051 g$0$17428) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (g$0$11059 g$0$17296 (quote ()))))) g$0$17408)) (quote #f)) (apply (lambda (g$0$17412 g$0$17413 g$0$17414) ((lambda (g$0$17416) ((lambda (g$0$17418) ((lambda (g$0$17420) ((lambda () (g$0$11418 (append (map (lambda (g$0$17422) (g$0$11021 g$0$17418 g$0$17422)) g$0$17414) (cdr g$0$17286)) (append (map cons g$0$17416 g$0$17420) g$0$17287) (append (map cons g$0$17416 g$0$17420) g$0$17288) g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294)))) (map (lambda (g$0$17424) (g$0$11091 (g$0$11430 (if (eq? g$0$17300 (quote let-syntax)) g$0$17424 (g$0$11021 g$0$17418 g$0$17424)) g$0$17288))) g$0$17413))) (g$0$10988 g$0$17412 g$0$17416))) (map g$0$10955 g$0$17412))) g$0$17408) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17406 (quote ()))))) ((lambda (g$0$17432) (if (g$0$11027 g$0$17432) (begin (quote #f) ((lambda (g$0$17434) (if g$0$17434 (begin (quote #f) ((lambda (g$0$17436) (if g$0$17436 (begin (quote #f) (append g$0$17434 g$0$17436)) (quote #f))) ((lambda (g$0$17438) (if (g$0$11027 g$0$17438) (begin (quote #f) ((lambda (g$0$17440) (if g$0$17440 (begin (quote #f) ((lambda (g$0$17442) (if g$0$17442 (begin (quote #f) (append g$0$17440 g$0$17442)) (quote #f))) ((letrec ((g$0$17444 (lambda (g$0$17446) (if (g$0$11027 g$0$17446) ((lambda (g$0$17448) (if g$0$17448 (begin (quote #f) ((lambda (g$0$17450) (if g$0$17450 (begin (quote #f) (map cons g$0$17448 g$0$17450)) (quote #f))) (g$0$17444 (g$0$11039 g$0$17446)))) (quote #f))) ((lambda (g$0$17452) (list g$0$17452)) (g$0$11035 g$0$17446))) (if (g$0$11031 g$0$17446) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$17444) (g$0$11039 g$0$17438)))) (quote #f))) ((letrec ((g$0$17454 (lambda (g$0$17456) (if (g$0$11027 g$0$17456) ((lambda (g$0$17458) (if g$0$17458 (begin (quote #f) ((lambda (g$0$17460) (if g$0$17460 (begin (quote #f) (map cons g$0$17458 g$0$17460)) (quote #f))) (g$0$17454 (g$0$11039 g$0$17456)))) (quote #f))) ((lambda (g$0$17462) (if (g$0$11027 g$0$17462) (begin (quote #f) ((lambda (g$0$17464) (if g$0$17464 (begin (quote #f) ((lambda (g$0$17466) (if g$0$17466 (begin (quote #f) (append g$0$17464 g$0$17466)) (quote #f))) ((lambda (g$0$17468) (if (g$0$11027 g$0$17468) (begin (quote #f) ((lambda (g$0$17470) (if g$0$17470 (begin (quote #f) ((lambda (g$0$17472) (if g$0$17472 (begin (quote #f) (append g$0$17470 g$0$17472)) (quote #f))) ((lambda (g$0$17474) (if (equal? (g$0$11061 g$0$17474) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$17468)))) (quote #f))) ((lambda (g$0$17476) (list g$0$17476)) (g$0$11035 g$0$17468)))) (quote #f))) (g$0$11039 g$0$17462)))) (quote #f))) ((lambda (g$0$17478) (list g$0$17478)) (g$0$11035 g$0$17462)))) (quote #f))) (g$0$11035 g$0$17456))) (if (g$0$11031 g$0$17456) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$17454) (g$0$11035 g$0$17438)))) (quote #f))) (g$0$11039 g$0$17432)))) (quote #f))) ((lambda (g$0$17480) (quote ())) (g$0$11035 g$0$17432)))) (quote #f))) g$0$17406))) g$0$17296) (if (memv g$0$17305 (quote (begin))) ((lambda (g$0$17380) ((lambda (g$0$17382) (if (if g$0$17382 (begin (quote #f) (apply (lambda (g$0$17386) (quote #t)) g$0$17382)) (quote #f)) (apply (lambda (g$0$17384) (g$0$11418 (append g$0$17384 (cdr g$0$17286)) g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294)) g$0$17382) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17380 (quote ()))))) ((lambda (g$0$17388) (if (g$0$11027 g$0$17388) (begin (quote #f) ((lambda (g$0$17390) (if g$0$17390 (begin (quote #f) ((lambda (g$0$17392) (if g$0$17392 (begin (quote #f) (append g$0$17390 g$0$17392)) (quote #f))) ((letrec ((g$0$17394 (lambda (g$0$17396) (if (g$0$11027 g$0$17396) ((lambda (g$0$17398) (if g$0$17398 (begin (quote #f) ((lambda (g$0$17400) (if g$0$17400 (begin (quote #f) (map cons g$0$17398 g$0$17400)) (quote #f))) (g$0$17394 (g$0$11039 g$0$17396)))) (quote #f))) ((lambda (g$0$17402) (list g$0$17402)) (g$0$11035 g$0$17396))) (if (g$0$11031 g$0$17396) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17394) (g$0$11039 g$0$17388)))) (quote #f))) ((lambda (g$0$17404) (quote ())) (g$0$11035 g$0$17388)))) (quote #f))) g$0$17380))) g$0$17296) (if (memv g$0$17305 (quote (global-macro global-macro!))) (g$0$11418 (cons (g$0$11021 g$0$17293 (g$0$11390 g$0$17301 g$0$17296)) (cdr g$0$17286)) g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294) (if (memv g$0$17305 (quote (local-macro local-macro!))) (g$0$11418 (cons (g$0$11021 g$0$17293 (g$0$11388 g$0$17301 g$0$17296)) (cdr g$0$17286)) g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294) (if (memv g$0$17305 (quote (macro macro!))) (g$0$11418 (cons (g$0$11021 g$0$17293 (g$0$11386 g$0$17301 g$0$17296)) (cdr g$0$17286)) g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294) (if (memv g$0$17305 (quote (module))) (call-with-values (lambda () (g$0$11416 g$0$17296 g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304)) (lambda (g$0$17367 g$0$17368 g$0$17369 g$0$17370 g$0$17371 g$0$17372 g$0$17373 g$0$17374) (begin (for-each (lambda (g$0$17377 g$0$17378) (g$0$10980 g$0$17293 g$0$17377 g$0$17378)) g$0$17369 g$0$17370) (g$0$11418 (cdr g$0$17286) g$0$17371 g$0$17372 g$0$17367 g$0$17368 g$0$17373 g$0$17374 g$0$17293 g$0$17294)))) (if (memv g$0$17305 (quote (import))) (begin ((lambda () ((lambda (g$0$17307) (begin (set! g$0$17307 (lambda (g$0$17318 g$0$17319) ((lambda (g$0$17321) ((lambda (g$0$17323) (if (if g$0$17323 (begin (quote #f) (apply (lambda (g$0$17340) (g$0$11041 g$0$17340)) g$0$17323)) (quote #f)) (apply (lambda (g$0$17325) (call-with-values (lambda () (g$0$11073 g$0$17325 g$0$17319)) (lambda (g$0$17329 g$0$17330 g$0$17331) ((lambda (g$0$17332) (if (memv g$0$17332 (quote ($module))) ((lambda (g$0$17334) ((lambda (g$0$17337 g$0$17338) (values g$0$17337 g$0$17338)) (car g$0$17334) (cdr g$0$17334))) g$0$17330) (error (quote expander) (quote "~a ~s") (quote "invalid import") (g$0$11059 g$0$17318 (quote ()))))) g$0$17329)))) g$0$17323) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17321 (quote ()))))) ((lambda (g$0$17342) (if (g$0$11027 g$0$17342) (begin (quote #f) ((lambda (g$0$17344) (if g$0$17344 (begin (quote #f) ((lambda (g$0$17346) (if g$0$17346 (begin (quote #f) (append g$0$17344 g$0$17346)) (quote #f))) ((lambda (g$0$17348) (if (g$0$11027 g$0$17348) (begin (quote #f) ((lambda (g$0$17350) (if g$0$17350 (begin (quote #f) ((lambda (g$0$17352) (if g$0$17352 (begin (quote #f) (append g$0$17350 g$0$17352)) (quote #f))) ((lambda (g$0$17354) (if (equal? (g$0$11061 g$0$17354) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$17348)))) (quote #f))) ((lambda (g$0$17356) (list g$0$17356)) (g$0$11035 g$0$17348)))) (quote #f))) (g$0$11039 g$0$17342)))) (quote #f))) ((lambda (g$0$17358) (quote ())) (g$0$11035 g$0$17342)))) (quote #f))) g$0$17321))) g$0$17318))) (call-with-values (lambda () (g$0$17307 g$0$17296 g$0$17287)) (lambda (g$0$17310 g$0$17311) (for-each (lambda (g$0$17314 g$0$17315) (g$0$10980 g$0$17293 g$0$17314 g$0$17315)) g$0$17310 g$0$17311))))) (quote #f)))) (g$0$11418 (cdr g$0$17286) g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304 g$0$17293 g$0$17294)) (if g$0$17294 (g$0$11418 (cdr g$0$17286) g$0$17287 g$0$17288 (cons (g$0$10951 (quote dummy)) g$0$17289) (cons (cons (quote top-expr) g$0$17296) g$0$17290) g$0$17291 g$0$17304 g$0$17293 g$0$17294) (values g$0$17286 g$0$17287 g$0$17288 g$0$17289 g$0$17290 g$0$17291 g$0$17304)))))))))))) g$0$17300)) (if (g$0$11041 g$0$17302) (cons g$0$17302 g$0$17292) g$0$17292))))) (car g$0$17286))))) (set! g$0$11420 (lambda (g$0$17502 g$0$17503 g$0$17504) (begin (g$0$10648 (g$0$11511) g$0$17502 g$0$17503) (g$0$10647 (g$0$11511) g$0$17503 g$0$17504)))) (set! g$0$11422 (lambda (g$0$17507 g$0$17508) (g$0$11424 g$0$17507 g$0$17508))) (set! g$0$11424 (lambda (g$0$17511 g$0$17512) ((lambda (g$0$17514) ((lambda (g$0$17516) ((lambda (g$0$17517) (if (memv g$0$17517 (quote (global))) ((lambda (g$0$17519) ((lambda (g$0$17522 g$0$17523) (if (eq? g$0$17522 (g$0$11511)) g$0$17523 (error (quote expander) (quote "~a ~s") (quote "cannot modify imported binding") (g$0$11059 g$0$17512 (quote ()))))) (car g$0$17519) (cdr g$0$17519))) (g$0$11071 g$0$17516)) (error (quote expander) (quote "~a ~s") (quote "cannot modify binding in") (g$0$11059 g$0$17512 (quote ()))))) (g$0$11069 g$0$17516))) (g$0$10646 g$0$17514))) (g$0$11063 g$0$17511)))) (set! g$0$11426 (lambda (g$0$17525) ((lambda (g$0$17527) ((lambda (g$0$17529) (if (if g$0$17529 (begin (quote #f) (apply (lambda (g$0$17540 g$0$17541) (g$0$11041 g$0$17540)) g$0$17529)) (quote #f)) (apply (lambda (g$0$17532 g$0$17533) ((lambda (g$0$17535) ((lambda (g$0$17537) (values g$0$17535 g$0$17537)) (g$0$11396 g$0$17533 (quote ()) (quote ())))) (g$0$11424 g$0$17532 g$0$17525))) g$0$17529) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17527 (quote ()))))) ((lambda (g$0$17543) (if (g$0$11027 g$0$17543) (begin (quote #f) ((lambda (g$0$17545) (if g$0$17545 (begin (quote #f) ((lambda (g$0$17547) (if g$0$17547 (begin (quote #f) (append g$0$17545 g$0$17547)) (quote #f))) ((lambda (g$0$17549) (if (g$0$11027 g$0$17549) (begin (quote #f) ((lambda (g$0$17551) (if g$0$17551 (begin (quote #f) ((lambda (g$0$17553) (if g$0$17553 (begin (quote #f) (append g$0$17551 g$0$17553)) (quote #f))) ((lambda (g$0$17555) (if (g$0$11027 g$0$17555) (begin (quote #f) ((lambda (g$0$17557) (if g$0$17557 (begin (quote #f) ((lambda (g$0$17559) (if g$0$17559 (begin (quote #f) (append g$0$17557 g$0$17559)) (quote #f))) ((lambda (g$0$17561) (if (equal? (g$0$11061 g$0$17561) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$17555)))) (quote #f))) ((lambda (g$0$17563) (list g$0$17563)) (g$0$11035 g$0$17555)))) (quote #f))) (g$0$11039 g$0$17549)))) (quote #f))) ((lambda (g$0$17565) (list g$0$17565)) (g$0$11035 g$0$17549)))) (quote #f))) (g$0$11039 g$0$17543)))) (quote #f))) ((lambda (g$0$17567) (quote ())) (g$0$11035 g$0$17543)))) (quote #f))) g$0$17527))) g$0$17525))) (set! g$0$11428 (lambda (g$0$17570 g$0$17571) (if (null? g$0$17570) g$0$17571 ((lambda (g$0$17573) (call-with-values (lambda () (g$0$11073 g$0$17573 (quote ()))) (lambda (g$0$17577 g$0$17578 g$0$17579) ((lambda (g$0$17580) (if (memv g$0$17580 (quote (define))) (call-with-values (lambda () (g$0$11290 g$0$17573)) (lambda (g$0$17623 g$0$17624) ((lambda (g$0$17626) ((lambda (g$0$17628) (g$0$11428 (cdr g$0$17570) (cons (cons g$0$17626 g$0$17628) g$0$17571))) (g$0$11404 g$0$17624 (quote ()) (quote ())))) (g$0$11424 g$0$17623 g$0$17573)))) (if (memv g$0$17580 (quote (set!))) (call-with-values (lambda () (g$0$11426 g$0$17573)) (lambda (g$0$17619 g$0$17620) (g$0$11428 (cdr g$0$17570) (cons (cons g$0$17619 g$0$17620) g$0$17571)))) (if (memv g$0$17580 (quote (define-syntax))) (call-with-values (lambda () (g$0$11292 g$0$17573)) (lambda (g$0$17609 g$0$17610) ((lambda (g$0$17612) ((lambda (g$0$17614) ((lambda (g$0$17616) (begin (g$0$11420 (g$0$11043 g$0$17609) g$0$17612 g$0$17616) (g$0$11428 (cdr g$0$17570) g$0$17571))) (g$0$11091 g$0$17614))) (g$0$11430 g$0$17610 (quote ())))) (g$0$11422 g$0$17609 g$0$17573)))) (if (memv g$0$17580 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "~s is not supported yet at top level") g$0$17577) (if (memv g$0$17580 (quote (begin))) ((lambda (g$0$17582) ((lambda (g$0$17584) (if (if g$0$17584 (begin (quote #f) (apply (lambda (g$0$17588) (quote #t)) g$0$17584)) (quote #f)) (apply (lambda (g$0$17586) (g$0$11428 (append g$0$17586 (cdr g$0$17570)) g$0$17571)) g$0$17584) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17582 (quote ()))))) ((lambda (g$0$17590) (if (g$0$11027 g$0$17590) (begin (quote #f) ((lambda (g$0$17592) (if g$0$17592 (begin (quote #f) ((lambda (g$0$17594) (if g$0$17594 (begin (quote #f) (append g$0$17592 g$0$17594)) (quote #f))) ((letrec ((g$0$17596 (lambda (g$0$17598) (if (g$0$11027 g$0$17598) ((lambda (g$0$17600) (if g$0$17600 (begin (quote #f) ((lambda (g$0$17602) (if g$0$17602 (begin (quote #f) (map cons g$0$17600 g$0$17602)) (quote #f))) (g$0$17596 (g$0$11039 g$0$17598)))) (quote #f))) ((lambda (g$0$17604) (list g$0$17604)) (g$0$11035 g$0$17598))) (if (g$0$11031 g$0$17598) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17596) (g$0$11039 g$0$17590)))) (quote #f))) ((lambda (g$0$17606) (quote ())) (g$0$11035 g$0$17590)))) (quote #f))) g$0$17582))) g$0$17573) (if (memv g$0$17580 (quote (global-macro global-macro!))) (g$0$11428 (cons (g$0$11390 g$0$17578 g$0$17573) (cdr g$0$17570)) g$0$17571) (if (memv g$0$17580 (quote (local-macro local-macro!))) (g$0$11428 (cons (g$0$11388 g$0$17578 g$0$17573) (cdr g$0$17570)) g$0$17571) (if (memv g$0$17580 (quote (macro macro!))) (g$0$11428 (cons (g$0$11386 g$0$17578 g$0$17573) (cdr g$0$17570)) g$0$17571) (g$0$11428 (cdr g$0$17570) (cons (cons (quote #f) (g$0$11396 g$0$17573 (quote ()) (quote ()))) g$0$17571))))))))))) g$0$17577)))) (car g$0$17570))))) (set! g$0$11430 (lambda (g$0$17631 g$0$17632) ((lambda (g$0$17634) ((lambda (g$0$17636) (begin (for-each ((lambda (g$0$17638) (lambda (g$0$17640) (begin (g$0$10645 g$0$17640) (g$0$17638 g$0$17640)))) (g$0$11446)) (g$0$17634)) g$0$17636)) ((lambda (g$0$17649 g$0$17650 g$0$17651 g$0$17652) ((lambda (g$0$17654) (dynamic-wind g$0$17654 (lambda () (g$0$11396 g$0$17631 g$0$17632 g$0$17632)) g$0$17654)) (lambda () (begin ((lambda (g$0$17656) (begin (g$0$17649 g$0$17651) (set! g$0$17651 g$0$17656))) (g$0$17649)) ((lambda (g$0$17658) (begin (g$0$17650 g$0$17652) (set! g$0$17652 g$0$17658))) (g$0$17650)))))) g$0$11444 g$0$11446 g$0$17634 (lambda (g$0$17660) (values))))) (g$0$11442)))) (set! g$0$11432 (lambda (g$0$17662) (letrec ((g$0$17664 (lambda (g$0$17668 g$0$17669 g$0$17670) (if (null? g$0$17668) (begin ((lambda (g$0$17732) (if (g$0$11051 g$0$17732) (void) (error (quote expander) (quote "invalid exports of ~s") (g$0$11410 g$0$17732)))) (map (lambda (g$0$17734) (g$0$11017 g$0$17734 g$0$10947 (quote ()))) g$0$17670)) (values g$0$17669 g$0$17670)) ((lambda (g$0$17672) ((lambda (g$0$17674) (if (if g$0$17674 (begin (quote #f) (apply (lambda (g$0$17694 g$0$17695 g$0$17696) (quote #t)) g$0$17674)) (quote #f)) (apply (lambda (g$0$17688 g$0$17689 g$0$17690) (begin (if (if (eq? g$0$17688 (quote rename)) (if (for-all symbol? g$0$17689) (begin (quote #f) (for-all symbol? g$0$17690)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier ~s") (car g$0$17668))) (g$0$17664 (cdr g$0$17668) (append g$0$17689 g$0$17669) (append g$0$17690 g$0$17670)))) g$0$17674) ((lambda (g$0$17676) ((lambda (g$0$17678) (if (if g$0$17678 (begin (quote #f) (apply (lambda (g$0$17682) (quote #t)) g$0$17678)) (quote #f)) (apply (lambda (g$0$17680) (begin (if (symbol? g$0$17680) (void) (error (quote expander) (quote "invalid export ~s") g$0$17680)) (g$0$17664 (cdr g$0$17668) (cons g$0$17680 g$0$17669) (cons g$0$17680 g$0$17670)))) g$0$17678) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17676 (quote ()))))) ((lambda (g$0$17684) (list g$0$17684)) g$0$17676))) g$0$17672))) ((lambda (g$0$17698) (if (g$0$11027 g$0$17698) (begin (quote #f) ((lambda (g$0$17700) (if g$0$17700 (begin (quote #f) ((lambda (g$0$17702) (if g$0$17702 (begin (quote #f) (append g$0$17700 g$0$17702)) (quote #f))) ((letrec ((g$0$17704 (lambda (g$0$17706) (if (g$0$11027 g$0$17706) ((lambda (g$0$17708) (if g$0$17708 (begin (quote #f) ((lambda (g$0$17710) (if g$0$17710 (begin (quote #f) (map cons g$0$17708 g$0$17710)) (quote #f))) (g$0$17704 (g$0$11039 g$0$17706)))) (quote #f))) ((lambda (g$0$17712) (if (g$0$11027 g$0$17712) (begin (quote #f) ((lambda (g$0$17714) (if g$0$17714 (begin (quote #f) ((lambda (g$0$17716) (if g$0$17716 (begin (quote #f) (append g$0$17714 g$0$17716)) (quote #f))) ((lambda (g$0$17718) (if (g$0$11027 g$0$17718) (begin (quote #f) ((lambda (g$0$17720) (if g$0$17720 (begin (quote #f) ((lambda (g$0$17722) (if g$0$17722 (begin (quote #f) (append g$0$17720 g$0$17722)) (quote #f))) ((lambda (g$0$17724) (if (equal? (g$0$11061 g$0$17724) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$17718)))) (quote #f))) ((lambda (g$0$17726) (list g$0$17726)) (g$0$11035 g$0$17718)))) (quote #f))) (g$0$11039 g$0$17712)))) (quote #f))) ((lambda (g$0$17728) (list g$0$17728)) (g$0$11035 g$0$17712)))) (quote #f))) (g$0$11035 g$0$17706))) (if (g$0$11031 g$0$17706) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) g$0$17704) (g$0$11039 g$0$17698)))) (quote #f))) ((lambda (g$0$17730) (list g$0$17730)) (g$0$11035 g$0$17698)))) (quote #f))) g$0$17672))) (car g$0$17668)))))) (g$0$17664 g$0$17662 (quote ()) (quote ()))))) (set! g$0$11434 (lambda (g$0$17736) ((lambda (g$0$17738) (begin (set! g$0$17738 (lambda (g$0$17744) ((lambda (g$0$17746) ((lambda (g$0$17748) (if (if g$0$17748 (begin (quote #f) (apply (lambda (g$0$17779 g$0$17780) (if (for-all symbol? g$0$17779) (begin (quote #f) (for-all (lambda (g$0$17782) (if (integer? g$0$17782) (begin (quote #f) (exact? g$0$17782)) (quote #f))) g$0$17780)) (quote #f))) g$0$17748)) (quote #f)) (apply (lambda (g$0$17775 g$0$17776) (values g$0$17775 g$0$17776)) g$0$17748) ((lambda (g$0$17750) ((lambda (g$0$17752) (if (if g$0$17752 (begin (quote #f) (apply (lambda (g$0$17762) (for-all symbol? g$0$17762)) g$0$17752)) (quote #f)) (apply (lambda (g$0$17760) (values g$0$17760 (quote ()))) g$0$17752) ((lambda (g$0$17754) ((lambda (g$0$17756) (if (if g$0$17756 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17756)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid library name") (g$0$11059 g$0$17744 (quote ())))) g$0$17756) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17754 (quote ()))))) ((lambda (g$0$17758) (quote ())) g$0$17754))) g$0$17750))) ((letrec ((g$0$17764 (lambda (g$0$17766) (if (g$0$11027 g$0$17766) ((lambda (g$0$17768) (if g$0$17768 (begin (quote #f) ((lambda (g$0$17770) (if g$0$17770 (begin (quote #f) (map cons g$0$17768 g$0$17770)) (quote #f))) (g$0$17764 (g$0$11039 g$0$17766)))) (quote #f))) ((lambda (g$0$17772) (list g$0$17772)) (g$0$11035 g$0$17766))) (if (g$0$11031 g$0$17766) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17764) g$0$17750))) g$0$17746))) ((letrec ((g$0$17784 (lambda (g$0$17786) (if (g$0$11027 g$0$17786) ((lambda (g$0$17808) (if g$0$17808 (begin (quote #f) ((lambda (g$0$17810) (if g$0$17810 (begin (quote #f) (cons (map cons g$0$17808 (car g$0$17810)) (cdr g$0$17810))) (quote #f))) (g$0$17784 (g$0$11039 g$0$17786)))) (quote #f))) ((lambda (g$0$17812) (list g$0$17812)) (g$0$11035 g$0$17786))) ((lambda (g$0$17788) (if g$0$17788 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$0$17788)) (quote #f))) ((lambda (g$0$17790) (if (g$0$11027 g$0$17790) (begin (quote #f) ((lambda (g$0$17792) (if g$0$17792 (begin (quote #f) ((lambda (g$0$17794) (if g$0$17794 (begin (quote #f) (append g$0$17792 g$0$17794)) (quote #f))) ((lambda (g$0$17796) (if (equal? (g$0$11061 g$0$17796) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$17790)))) (quote #f))) ((letrec ((g$0$17798 (lambda (g$0$17800) (if (g$0$11027 g$0$17800) ((lambda (g$0$17802) (if g$0$17802 (begin (quote #f) ((lambda (g$0$17804) (if g$0$17804 (begin (quote #f) (map cons g$0$17802 g$0$17804)) (quote #f))) (g$0$17798 (g$0$11039 g$0$17800)))) (quote #f))) ((lambda (g$0$17806) (list g$0$17806)) (g$0$11035 g$0$17800))) (if (g$0$11031 g$0$17800) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$0$17798) (g$0$11035 g$0$17790)))) (quote #f))) g$0$17786)))))) (lambda (g$0$17814) ((lambda (g$0$17816) (if g$0$17816 (begin (quote #f) (append (car g$0$17816) (cdr g$0$17816))) (quote #f))) (g$0$17784 g$0$17814)))) g$0$17746))) g$0$17744))) (call-with-values (lambda () (g$0$17738 g$0$17736)) (lambda (g$0$17741 g$0$17742) (begin (if (null? g$0$17741) (error (quote expander) (quote "~a ~s") (quote "empty library name") (g$0$11059 g$0$17736 (quote ()))) (void)) (values g$0$17741 g$0$17742)))))) (quote #f)))) (set! g$0$11436 (lambda (g$0$17818) ((lambda (g$0$17820) ((lambda (g$0$17822) (if (if g$0$17822 (begin (quote #f) (apply (lambda (g$0$17850 g$0$17851 g$0$17852 g$0$17853 g$0$17854 g$0$17855 g$0$17856) (if (eq? g$0$17852 (quote export)) (if (eq? g$0$17854 (quote import)) (begin (quote #f) (eq? g$0$17850 (quote library))) (quote #f)) (quote #f))) g$0$17822)) (quote #f)) (apply (lambda (g$0$17836 g$0$17837 g$0$17838 g$0$17839 g$0$17840 g$0$17841 g$0$17842) (values g$0$17837 g$0$17839 g$0$17841 g$0$17842)) g$0$17822) ((lambda (g$0$17824) ((lambda (g$0$17826) (if (if g$0$17826 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17826)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "malformed library") (g$0$11059 g$0$17818 (quote ())))) g$0$17826) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17824 (quote ()))))) ((lambda (g$0$17828) (quote ())) g$0$17824))) g$0$17820))) ((lambda (g$0$17858) (if (g$0$11027 g$0$17858) (begin (quote #f) ((lambda (g$0$17860) (if g$0$17860 (begin (quote #f) ((lambda (g$0$17862) (if g$0$17862 (begin (quote #f) (append g$0$17860 g$0$17862)) (quote #f))) ((lambda (g$0$17864) (if (g$0$11027 g$0$17864) (begin (quote #f) ((lambda (g$0$17866) (if g$0$17866 (begin (quote #f) ((lambda (g$0$17868) (if g$0$17868 (begin (quote #f) (append g$0$17866 g$0$17868)) (quote #f))) ((lambda (g$0$17870) (if (g$0$11027 g$0$17870) (begin (quote #f) ((lambda (g$0$17872) (if g$0$17872 (begin (quote #f) ((lambda (g$0$17874) (if g$0$17874 (begin (quote #f) (append g$0$17872 g$0$17874)) (quote #f))) ((lambda (g$0$17876) (if (g$0$11027 g$0$17876) (begin (quote #f) ((lambda (g$0$17878) (if g$0$17878 (begin (quote #f) ((lambda (g$0$17880) (if g$0$17880 (begin (quote #f) (append g$0$17878 g$0$17880)) (quote #f))) ((letrec ((g$0$17882 (lambda (g$0$17884) (if (g$0$11027 g$0$17884) ((lambda (g$0$17886) (if g$0$17886 (begin (quote #f) ((lambda (g$0$17888) (if g$0$17888 (begin (quote #f) (map cons g$0$17886 g$0$17888)) (quote #f))) (g$0$17882 (g$0$11039 g$0$17884)))) (quote #f))) ((lambda (g$0$17890) (list g$0$17890)) (g$0$11035 g$0$17884))) (if (g$0$11031 g$0$17884) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$17882) (g$0$11039 g$0$17876)))) (quote #f))) ((lambda (g$0$17892) (if (g$0$11027 g$0$17892) (begin (quote #f) ((lambda (g$0$17894) (if g$0$17894 (begin (quote #f) ((lambda (g$0$17896) (if g$0$17896 (begin (quote #f) (append g$0$17894 g$0$17896)) (quote #f))) ((letrec ((g$0$17898 (lambda (g$0$17900) (if (g$0$11027 g$0$17900) ((lambda (g$0$17902) (if g$0$17902 (begin (quote #f) ((lambda (g$0$17904) (if g$0$17904 (begin (quote #f) (map cons g$0$17902 g$0$17904)) (quote #f))) (g$0$17898 (g$0$11039 g$0$17900)))) (quote #f))) ((lambda (g$0$17906) (list g$0$17906)) (g$0$11035 g$0$17900))) (if (g$0$11031 g$0$17900) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$17898) (g$0$11039 g$0$17892)))) (quote #f))) ((lambda (g$0$17908) (list g$0$17908)) (g$0$11035 g$0$17892)))) (quote #f))) (g$0$11035 g$0$17876)))) (quote #f))) (g$0$11039 g$0$17870)))) (quote #f))) ((lambda (g$0$17910) (if (g$0$11027 g$0$17910) (begin (quote #f) ((lambda (g$0$17912) (if g$0$17912 (begin (quote #f) ((lambda (g$0$17914) (if g$0$17914 (begin (quote #f) (append g$0$17912 g$0$17914)) (quote #f))) ((letrec ((g$0$17916 (lambda (g$0$17918) (if (g$0$11027 g$0$17918) ((lambda (g$0$17920) (if g$0$17920 (begin (quote #f) ((lambda (g$0$17922) (if g$0$17922 (begin (quote #f) (map cons g$0$17920 g$0$17922)) (quote #f))) (g$0$17916 (g$0$11039 g$0$17918)))) (quote #f))) ((lambda (g$0$17924) (list g$0$17924)) (g$0$11035 g$0$17918))) (if (g$0$11031 g$0$17918) (list (begin (quote exp*) (quote ()))) (quote #f)))))) g$0$17916) (g$0$11039 g$0$17910)))) (quote #f))) ((lambda (g$0$17926) (list g$0$17926)) (g$0$11035 g$0$17910)))) (quote #f))) (g$0$11035 g$0$17870)))) (quote #f))) (g$0$11039 g$0$17864)))) (quote #f))) ((letrec ((g$0$17928 (lambda (g$0$17930) (if (g$0$11027 g$0$17930) ((lambda (g$0$17932) (if g$0$17932 (begin (quote #f) ((lambda (g$0$17934) (if g$0$17934 (begin (quote #f) (map cons g$0$17932 g$0$17934)) (quote #f))) (g$0$17928 (g$0$11039 g$0$17930)))) (quote #f))) ((lambda (g$0$17936) (list g$0$17936)) (g$0$11035 g$0$17930))) (if (g$0$11031 g$0$17930) (list (begin (quote name*) (quote ()))) (quote #f)))))) g$0$17928) (g$0$11035 g$0$17864)))) (quote #f))) (g$0$11039 g$0$17858)))) (quote #f))) ((lambda (g$0$17938) (list g$0$17938)) (g$0$11035 g$0$17858)))) (quote #f))) g$0$17820))) g$0$17818))) (set! g$0$11438 (lambda (g$0$17940) ((lambda (g$0$17942 g$0$17944 g$0$17946 g$0$17948 g$0$17950 g$0$17952 g$0$17954) (begin (set! g$0$17942 (g$0$11442)) (set! g$0$17944 (lambda (g$0$18285 g$0$18286) ((lambda (g$0$18288) (begin (set! g$0$18288 (lambda (g$0$18291 g$0$18292) ((lambda (g$0$18295 g$0$18296) ((lambda (g$0$18298) (if g$0$18298 ((lambda (g$0$18300) (if (eq? (cdr g$0$18300) g$0$18296) g$0$18292 (error (quote import) (quote "two imports of ~s with different bindings") g$0$18295))) g$0$18298) (cons g$0$18291 g$0$18292))) (assq g$0$18295 g$0$18292))) (car g$0$18291) (cdr g$0$18291)))) (if (null? g$0$18285) g$0$18286 (g$0$18288 (car g$0$18285) (g$0$17944 (cdr g$0$18285) g$0$18286))))) (quote #f)))) (set! g$0$17946 (lambda (g$0$18261 g$0$18262) ((lambda (g$0$18264) (begin (set! g$0$18264 (lambda (g$0$18275 g$0$18276) (if (null? g$0$18276) (error (quote import) (quote "cannot rename unbound identifier ~s") g$0$18275) (if (eq? g$0$18275 (caar g$0$18276)) (values (cdar g$0$18276) (cdr g$0$18276)) ((lambda (g$0$18278) (call-with-values (lambda () (g$0$18264 g$0$18275 (cdr g$0$18276))) (lambda (g$0$18281 g$0$18282) (values g$0$18281 (cons g$0$18278 g$0$18282))))) (car g$0$18276)))))) (if (null? g$0$18261) (values (quote ()) g$0$18262) (call-with-values (lambda () (g$0$18264 (car g$0$18261) g$0$18262)) (lambda (g$0$18267 g$0$18268) (call-with-values (lambda () (g$0$17946 (cdr g$0$18261) g$0$18268)) (lambda (g$0$18271 g$0$18272) (values (cons g$0$18267 g$0$18271) g$0$18272)))))))) (quote #f)))) (set! g$0$17948 (lambda (g$0$18253 g$0$18254) (map (lambda (g$0$18256) ((lambda (g$0$18258) (if g$0$18258 (cdr g$0$18258) (error (quote import) (quote "cannot find identifier ~s") g$0$18256))) (assq g$0$18256 g$0$18254))) g$0$18253))) (set! g$0$17950 (lambda (g$0$18245 g$0$18246) (letrec ((g$0$18248 (lambda (g$0$18250) (if (null? g$0$18250) (quote ()) (if (memq (caar g$0$18250) g$0$18245) (g$0$18248 (cdr g$0$18250)) (cons (car g$0$18250) (g$0$18248 (cdr g$0$18250)))))))) (g$0$18248 g$0$18246)))) (set! g$0$17952 (lambda (g$0$18242) (if (null? g$0$18242) (quote ()) (if (memq (car g$0$18242) (cdr g$0$18242)) (g$0$17952 (cdr g$0$18242)) (cons (car g$0$18242) (g$0$17952 (cdr g$0$18242))))))) (set! g$0$17954 (lambda (g$0$17962) ((lambda (g$0$17964) ((lambda (g$0$17966) (if (if g$0$17966 (begin (quote #f) (apply (lambda (g$0$18195 g$0$18196 g$0$18197 g$0$18198) (if (eq? g$0$18195 (quote rename)) (if (for-all symbol? g$0$18197) (begin (quote #f) (for-all symbol? g$0$18198)) (quote #f)) (quote #f))) g$0$17966)) (quote #f)) (apply (lambda (g$0$18181 g$0$18182 g$0$18183 g$0$18184) ((lambda (g$0$18186) ((lambda (g$0$18188) ((lambda (g$0$18190) (g$0$17944 (map cons g$0$18184 g$0$18188) g$0$18190)) (g$0$17950 g$0$18183 g$0$18186))) (g$0$17948 g$0$18183 g$0$18186))) (g$0$17954 g$0$18182))) g$0$17966) ((lambda (g$0$17968) ((lambda (g$0$17970) (if (if g$0$17970 (begin (quote #f) (apply (lambda (g$0$18148 g$0$18149 g$0$18150) (if (eq? g$0$18148 (quote except)) (begin (quote #f) (for-all symbol? g$0$18150)) (quote #f))) g$0$17970)) (quote #f)) (apply (lambda (g$0$18140 g$0$18141 g$0$18142) ((lambda (g$0$18144) (g$0$17950 g$0$18142 g$0$18144)) (g$0$17954 g$0$18141))) g$0$17970) ((lambda (g$0$17972) ((lambda (g$0$17974) (if (if g$0$17974 (begin (quote #f) (apply (lambda (g$0$18108 g$0$18109 g$0$18110) (if (eq? g$0$18108 (quote only)) (begin (quote #f) (for-all symbol? g$0$18110)) (quote #f))) g$0$17974)) (quote #f)) (apply (lambda (g$0$18096 g$0$18097 g$0$18098) ((lambda (g$0$18100) ((lambda (g$0$18102) ((lambda (g$0$18104) (map cons g$0$18102 g$0$18104)) (g$0$17948 g$0$18102 g$0$18100))) (g$0$17952 g$0$18098))) (g$0$17954 g$0$18097))) g$0$17974) ((lambda (g$0$17976) ((lambda (g$0$17978) (if (if g$0$17978 (begin (quote #f) (apply (lambda (g$0$18064 g$0$18065 g$0$18066) (if (eq? g$0$18064 (quote prefix)) (begin (quote #f) (symbol? g$0$18066)) (quote #f))) g$0$17978)) (quote #f)) (apply (lambda (g$0$18054 g$0$18055 g$0$18056) ((lambda (g$0$18058) (map (lambda (g$0$18060) (cons (string->symbol (string-append (symbol->string g$0$18056) (symbol->string (car g$0$18060)))) (cdr g$0$18060))) g$0$18058)) (g$0$17954 g$0$18055))) g$0$17978) ((lambda (g$0$17980) ((lambda (g$0$17982) (if (if g$0$17982 (begin (quote #f) (apply (lambda (g$0$18031 g$0$18032) (eq? g$0$18031 (quote library))) g$0$17982)) (quote #f)) (apply (lambda (g$0$18025 g$0$18026) ((lambda (g$0$18028) (begin (if g$0$18028 (void) (error (quote import) (quote "cannot find library satisfying ~s") g$0$18026)) (g$0$17942 g$0$18028) (g$0$10679 g$0$18028))) (g$0$10654 g$0$18026))) g$0$17982) ((lambda (g$0$17984) ((lambda (g$0$17986) (if (if g$0$17986 (begin (quote #f) (apply (lambda (g$0$18003 g$0$18004) (not (memq g$0$18003 (quote (rename except only prefix library))))) g$0$17986)) (quote #f)) (apply (lambda (g$0$17999 g$0$18000) (g$0$17954 (list (quote library) (cons g$0$17999 g$0$18000)))) g$0$17986) ((lambda (g$0$17988) ((lambda (g$0$17990) (if (if g$0$17990 (begin (quote #f) (apply (lambda (g$0$17994) (quote #t)) g$0$17990)) (quote #f)) (apply (lambda (g$0$17992) (error (quote import) (quote "invalid import spec ~s") g$0$17992)) g$0$17990) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$17988 (quote ()))))) ((lambda (g$0$17996) (list g$0$17996)) g$0$17988))) g$0$17984))) ((lambda (g$0$18006) (if (g$0$11027 g$0$18006) (begin (quote #f) ((lambda (g$0$18008) (if g$0$18008 (begin (quote #f) ((lambda (g$0$18010) (if g$0$18010 (begin (quote #f) (append g$0$18008 g$0$18010)) (quote #f))) ((letrec ((g$0$18012 (lambda (g$0$18014) (if (g$0$11027 g$0$18014) ((lambda (g$0$18016) (if g$0$18016 (begin (quote #f) ((lambda (g$0$18018) (if g$0$18018 (begin (quote #f) (map cons g$0$18016 g$0$18018)) (quote #f))) (g$0$18012 (g$0$11039 g$0$18014)))) (quote #f))) ((lambda (g$0$18020) (list g$0$18020)) (g$0$11035 g$0$18014))) (if (g$0$11031 g$0$18014) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$18012) (g$0$11039 g$0$18006)))) (quote #f))) ((lambda (g$0$18022) (list g$0$18022)) (g$0$11035 g$0$18006)))) (quote #f))) g$0$17984))) g$0$17980))) ((lambda (g$0$18034) (if (g$0$11027 g$0$18034) (begin (quote #f) ((lambda (g$0$18036) (if g$0$18036 (begin (quote #f) ((lambda (g$0$18038) (if g$0$18038 (begin (quote #f) (append g$0$18036 g$0$18038)) (quote #f))) ((lambda (g$0$18040) (if (g$0$11027 g$0$18040) (begin (quote #f) ((lambda (g$0$18042) (if g$0$18042 (begin (quote #f) ((lambda (g$0$18044) (if g$0$18044 (begin (quote #f) (append g$0$18042 g$0$18044)) (quote #f))) ((lambda (g$0$18046) (if (equal? (g$0$11061 g$0$18046) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$18040)))) (quote #f))) ((lambda (g$0$18048) (list g$0$18048)) (g$0$11035 g$0$18040)))) (quote #f))) (g$0$11039 g$0$18034)))) (quote #f))) ((lambda (g$0$18050) (list g$0$18050)) (g$0$11035 g$0$18034)))) (quote #f))) g$0$17980))) g$0$17976))) ((lambda (g$0$18068) (if (g$0$11027 g$0$18068) (begin (quote #f) ((lambda (g$0$18070) (if g$0$18070 (begin (quote #f) ((lambda (g$0$18072) (if g$0$18072 (begin (quote #f) (append g$0$18070 g$0$18072)) (quote #f))) ((lambda (g$0$18074) (if (g$0$11027 g$0$18074) (begin (quote #f) ((lambda (g$0$18076) (if g$0$18076 (begin (quote #f) ((lambda (g$0$18078) (if g$0$18078 (begin (quote #f) (append g$0$18076 g$0$18078)) (quote #f))) ((lambda (g$0$18080) (if (g$0$11027 g$0$18080) (begin (quote #f) ((lambda (g$0$18082) (if g$0$18082 (begin (quote #f) ((lambda (g$0$18084) (if g$0$18084 (begin (quote #f) (append g$0$18082 g$0$18084)) (quote #f))) ((lambda (g$0$18086) (if (equal? (g$0$11061 g$0$18086) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$18080)))) (quote #f))) ((lambda (g$0$18088) (list g$0$18088)) (g$0$11035 g$0$18080)))) (quote #f))) (g$0$11039 g$0$18074)))) (quote #f))) ((lambda (g$0$18090) (list g$0$18090)) (g$0$11035 g$0$18074)))) (quote #f))) (g$0$11039 g$0$18068)))) (quote #f))) ((lambda (g$0$18092) (list g$0$18092)) (g$0$11035 g$0$18068)))) (quote #f))) g$0$17976))) g$0$17972))) ((lambda (g$0$18112) (if (g$0$11027 g$0$18112) (begin (quote #f) ((lambda (g$0$18114) (if g$0$18114 (begin (quote #f) ((lambda (g$0$18116) (if g$0$18116 (begin (quote #f) (append g$0$18114 g$0$18116)) (quote #f))) ((lambda (g$0$18118) (if (g$0$11027 g$0$18118) (begin (quote #f) ((lambda (g$0$18120) (if g$0$18120 (begin (quote #f) ((lambda (g$0$18122) (if g$0$18122 (begin (quote #f) (append g$0$18120 g$0$18122)) (quote #f))) ((letrec ((g$0$18124 (lambda (g$0$18126) (if (g$0$11027 g$0$18126) ((lambda (g$0$18128) (if g$0$18128 (begin (quote #f) ((lambda (g$0$18130) (if g$0$18130 (begin (quote #f) (map cons g$0$18128 g$0$18130)) (quote #f))) (g$0$18124 (g$0$11039 g$0$18126)))) (quote #f))) ((lambda (g$0$18132) (list g$0$18132)) (g$0$11035 g$0$18126))) (if (g$0$11031 g$0$18126) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$18124) (g$0$11039 g$0$18118)))) (quote #f))) ((lambda (g$0$18134) (list g$0$18134)) (g$0$11035 g$0$18118)))) (quote #f))) (g$0$11039 g$0$18112)))) (quote #f))) ((lambda (g$0$18136) (list g$0$18136)) (g$0$11035 g$0$18112)))) (quote #f))) g$0$17972))) g$0$17968))) ((lambda (g$0$18152) (if (g$0$11027 g$0$18152) (begin (quote #f) ((lambda (g$0$18154) (if g$0$18154 (begin (quote #f) ((lambda (g$0$18156) (if g$0$18156 (begin (quote #f) (append g$0$18154 g$0$18156)) (quote #f))) ((lambda (g$0$18158) (if (g$0$11027 g$0$18158) (begin (quote #f) ((lambda (g$0$18160) (if g$0$18160 (begin (quote #f) ((lambda (g$0$18162) (if g$0$18162 (begin (quote #f) (append g$0$18160 g$0$18162)) (quote #f))) ((letrec ((g$0$18164 (lambda (g$0$18166) (if (g$0$11027 g$0$18166) ((lambda (g$0$18168) (if g$0$18168 (begin (quote #f) ((lambda (g$0$18170) (if g$0$18170 (begin (quote #f) (map cons g$0$18168 g$0$18170)) (quote #f))) (g$0$18164 (g$0$11039 g$0$18166)))) (quote #f))) ((lambda (g$0$18172) (list g$0$18172)) (g$0$11035 g$0$18166))) (if (g$0$11031 g$0$18166) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$18164) (g$0$11039 g$0$18158)))) (quote #f))) ((lambda (g$0$18174) (list g$0$18174)) (g$0$11035 g$0$18158)))) (quote #f))) (g$0$11039 g$0$18152)))) (quote #f))) ((lambda (g$0$18176) (list g$0$18176)) (g$0$11035 g$0$18152)))) (quote #f))) g$0$17968))) g$0$17964))) ((lambda (g$0$18200) (if (g$0$11027 g$0$18200) (begin (quote #f) ((lambda (g$0$18202) (if g$0$18202 (begin (quote #f) ((lambda (g$0$18204) (if g$0$18204 (begin (quote #f) (append g$0$18202 g$0$18204)) (quote #f))) ((lambda (g$0$18206) (if (g$0$11027 g$0$18206) (begin (quote #f) ((lambda (g$0$18208) (if g$0$18208 (begin (quote #f) ((lambda (g$0$18210) (if g$0$18210 (begin (quote #f) (append g$0$18208 g$0$18210)) (quote #f))) ((letrec ((g$0$18212 (lambda (g$0$18214) (if (g$0$11027 g$0$18214) ((lambda (g$0$18216) (if g$0$18216 (begin (quote #f) ((lambda (g$0$18218) (if g$0$18218 (begin (quote #f) (map cons g$0$18216 g$0$18218)) (quote #f))) (g$0$18212 (g$0$11039 g$0$18214)))) (quote #f))) ((lambda (g$0$18220) (if (g$0$11027 g$0$18220) (begin (quote #f) ((lambda (g$0$18222) (if g$0$18222 (begin (quote #f) ((lambda (g$0$18224) (if g$0$18224 (begin (quote #f) (append g$0$18222 g$0$18224)) (quote #f))) ((lambda (g$0$18226) (if (g$0$11027 g$0$18226) (begin (quote #f) ((lambda (g$0$18228) (if g$0$18228 (begin (quote #f) ((lambda (g$0$18230) (if g$0$18230 (begin (quote #f) (append g$0$18228 g$0$18230)) (quote #f))) ((lambda (g$0$18232) (if (equal? (g$0$11061 g$0$18232) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11039 g$0$18226)))) (quote #f))) ((lambda (g$0$18234) (list g$0$18234)) (g$0$11035 g$0$18226)))) (quote #f))) (g$0$11039 g$0$18220)))) (quote #f))) ((lambda (g$0$18236) (list g$0$18236)) (g$0$11035 g$0$18220)))) (quote #f))) (g$0$11035 g$0$18214))) (if (g$0$11031 g$0$18214) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) g$0$18212) (g$0$11039 g$0$18206)))) (quote #f))) ((lambda (g$0$18238) (list g$0$18238)) (g$0$11035 g$0$18206)))) (quote #f))) (g$0$11039 g$0$18200)))) (quote #f))) ((lambda (g$0$18240) (list g$0$18240)) (g$0$11035 g$0$18200)))) (quote #f))) g$0$17964))) g$0$17962))) (letrec ((g$0$17956 (lambda (g$0$17959 g$0$17960) (if (null? g$0$17959) (values g$0$17960 (g$0$17942)) (g$0$17956 (cdr g$0$17959) (g$0$17944 (g$0$17954 (car g$0$17959)) g$0$17960)))))) (g$0$17956 g$0$17940 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$11440 (lambda (g$0$18302) ((lambda (g$0$18304) (begin (for-each (lambda (g$0$18306) ((lambda (g$0$18309 g$0$18310) (g$0$10980 g$0$18304 (g$0$11017 g$0$18309 g$0$10947 (quote ())) g$0$18310)) (car g$0$18306) (cdr g$0$18306))) g$0$18302) g$0$18304)) (g$0$10978)))) (set! g$0$11442 (lambda () ((lambda (g$0$18312) (lambda g$0$18316 ((lambda (g$0$18315) (if (= g$0$18315 (quote 0)) (apply (lambda () g$0$18312) g$0$18316) (if (= g$0$18315 (quote 1)) (apply (lambda (g$0$18314) (set! g$0$18312 (g$0$10940 g$0$18314 g$0$18312))) g$0$18316) (error (quote apply) (quote "invalid arg count"))))) (length g$0$18316)))) (quote ())))) (set! g$0$11444 (g$0$10133 (lambda g$0$18318 (error (quote inv-collector) (quote "not initialized"))) (lambda (g$0$18320) (begin (if (procedure? g$0$18320) (void) (error (quote inv-collector) (quote "~s is not a procedure") g$0$18320)) g$0$18320)))) (set! g$0$11446 (g$0$10133 (lambda g$0$18322 (error (quote vis-collector) (quote "not initialized"))) (lambda (g$0$18324) (begin (if (procedure? g$0$18324) (void) (error (quote vis-collector) (quote "~s is not a procedure") g$0$18324)) g$0$18324)))) (set! g$0$11448 (lambda (g$0$18328 g$0$18329 g$0$18330) (call-with-values (lambda () (g$0$11418 g$0$18328 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) g$0$18329 g$0$18330)) (lambda (g$0$18338 g$0$18339 g$0$18340 g$0$18341 g$0$18342 g$0$18343 g$0$18344) (values (append (apply append (reverse g$0$18343)) g$0$18338) g$0$18339 g$0$18340 (reverse g$0$18341) (reverse g$0$18342)))))) (set! g$0$11450 (lambda (g$0$18348 g$0$18349 g$0$18350) (call-with-values (lambda () (g$0$11432 g$0$18348)) (lambda (g$0$18355 g$0$18356) (call-with-values (lambda () (g$0$11438 g$0$18349)) (lambda (g$0$18357 g$0$18358) ((lambda (g$0$18360) ((lambda (g$0$18364 g$0$18365 g$0$18366) ((lambda (g$0$18375 g$0$18376 g$0$18377 g$0$18378) ((lambda (g$0$18380) (dynamic-wind g$0$18380 (lambda () (call-with-values (lambda () (g$0$11448 g$0$18364 g$0$18360 (quote #f))) (lambda (g$0$18386 g$0$18387 g$0$18388 g$0$18389 g$0$18390) (begin (g$0$10982 g$0$18360) ((lambda (g$0$18393 g$0$18394) (begin (g$0$10984 g$0$18360) ((lambda (g$0$18396) (call-with-values (lambda () (g$0$11493 g$0$18387)) (lambda (g$0$18400 g$0$18401 g$0$18402) ((lambda (g$0$18405 g$0$18406) (values g$0$18358 (g$0$18365) (g$0$18366) (g$0$10923 (quote #f) (append g$0$18406 (list g$0$18405))) g$0$18402 g$0$18396 g$0$18400)) (g$0$10920 (quote #f) g$0$18389 g$0$18393 (g$0$11489 g$0$18401 g$0$18394)) (map g$0$10937 (map cdr g$0$18401)))))) (g$0$11491 g$0$18355 g$0$18356 g$0$18360)))) (g$0$11406 g$0$18390 g$0$18387 g$0$18388) (g$0$11392 g$0$18386 g$0$18387 g$0$18388)))))) g$0$18380)) (lambda () (begin ((lambda (g$0$18408) (begin (g$0$18375 g$0$18377) (set! g$0$18377 g$0$18408))) (g$0$18375)) ((lambda (g$0$18410) (begin (g$0$18376 g$0$18378) (set! g$0$18378 g$0$18410))) (g$0$18376)))))) g$0$11444 g$0$11446 g$0$18365 g$0$18366)) (map (lambda (g$0$18412) (g$0$11017 g$0$18412 g$0$10947 (list g$0$18360))) g$0$18350) (g$0$11442) (g$0$11442))) (g$0$11440 g$0$18357)))))))) (set! g$0$11452 (lambda (g$0$18414) (call-with-values (lambda () (g$0$11436 g$0$18414)) (lambda (g$0$18419 g$0$18420 g$0$18421 g$0$18422) (call-with-values (lambda () (g$0$11434 g$0$18419)) (lambda (g$0$18425 g$0$18426) (call-with-values (lambda () (g$0$11450 g$0$18420 g$0$18421 g$0$18422)) (lambda (g$0$18434 g$0$18435 g$0$18436 g$0$18437 g$0$18438 g$0$18439 g$0$18440) (values g$0$18425 g$0$18434 g$0$18435 g$0$18436 g$0$18437 g$0$18438 g$0$18439 g$0$18440))))))))) (set! g$0$11454 (lambda (g$0$18442) ((lambda (g$0$18444) ((lambda (g$0$18446) (if (if g$0$18446 (begin (quote #f) (apply (lambda (g$0$18462 g$0$18463 g$0$18464) (eq? g$0$18462 (quote import))) g$0$18446)) (quote #f)) (apply (lambda (g$0$18456 g$0$18457 g$0$18458) (values g$0$18457 g$0$18458)) g$0$18446) ((lambda (g$0$18448) ((lambda (g$0$18450) (if (if g$0$18450 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18450)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) g$0$18450) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$18448 (quote ()))))) ((lambda (g$0$18452) (quote ())) g$0$18448))) g$0$18444))) ((lambda (g$0$18466) (if (g$0$11027 g$0$18466) (begin (quote #f) ((lambda (g$0$18468) (if g$0$18468 (begin (quote #f) ((lambda (g$0$18470) (if g$0$18470 (begin (quote #f) (append g$0$18468 g$0$18470)) (quote #f))) ((letrec ((g$0$18472 (lambda (g$0$18474) (if (g$0$11027 g$0$18474) ((lambda (g$0$18476) (if g$0$18476 (begin (quote #f) ((lambda (g$0$18478) (if g$0$18478 (begin (quote #f) (map cons g$0$18476 g$0$18478)) (quote #f))) (g$0$18472 (g$0$11039 g$0$18474)))) (quote #f))) ((lambda (g$0$18480) (list g$0$18480)) (g$0$11035 g$0$18474))) (if (g$0$11031 g$0$18474) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$18472) (g$0$11039 g$0$18466)))) (quote #f))) ((lambda (g$0$18482) (if (g$0$11027 g$0$18482) (begin (quote #f) ((lambda (g$0$18484) (if g$0$18484 (begin (quote #f) ((lambda (g$0$18486) (if g$0$18486 (begin (quote #f) (append g$0$18484 g$0$18486)) (quote #f))) ((letrec ((g$0$18488 (lambda (g$0$18490) (if (g$0$11027 g$0$18490) ((lambda (g$0$18492) (if g$0$18492 (begin (quote #f) ((lambda (g$0$18494) (if g$0$18494 (begin (quote #f) (map cons g$0$18492 g$0$18494)) (quote #f))) (g$0$18488 (g$0$11039 g$0$18490)))) (quote #f))) ((lambda (g$0$18496) (list g$0$18496)) (g$0$11035 g$0$18490))) (if (g$0$11031 g$0$18490) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$18488) (g$0$11039 g$0$18482)))) (quote #f))) ((lambda (g$0$18498) (list g$0$18498)) (g$0$11035 g$0$18482)))) (quote #f))) (g$0$11035 g$0$18466)))) (quote #f))) g$0$18444))) g$0$18442))) (set! g$0$11456 (lambda (g$0$18500) (call-with-values (lambda () (g$0$11454 g$0$18500)) (lambda (g$0$18503 g$0$18504) (call-with-values (lambda () (g$0$11450 (quote ()) g$0$18503 g$0$18504)) (lambda (g$0$18512 g$0$18513 g$0$18514 g$0$18515 g$0$18516 g$0$18517 g$0$18518) (values g$0$18513 g$0$18515))))))) (set! g$0$11459 (lambda (g$0$18521 g$0$18522) (vector (quote g$0$11457) g$0$18521 g$0$18522))) (set! g$0$11461 (lambda (g$0$18524) (if (vector? g$0$18524) (if (= (vector-length g$0$18524) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref g$0$18524 (quote 0)) (quote g$0$11457))) (quote #f)) (quote #f)))) (set! g$0$11463 (lambda (g$0$18526) (if (g$0$11461 g$0$18526) (vector-ref g$0$18526 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") g$0$18526 (quote env))))) (set! g$0$11465 (lambda (g$0$18528) (if (g$0$11461 g$0$18528) (vector-ref g$0$18528 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") g$0$18528 (quote env))))) (set! g$0$11467 (lambda (g$0$18531 g$0$18532) (if (g$0$11461 g$0$18531) (vector-set! g$0$18531 (quote 1) g$0$18532) (error (quote set-env-subst!) (quote "~s is not of type ~s") g$0$18531 (quote env))))) (set! g$0$11469 (lambda (g$0$18535 g$0$18536) (if (g$0$11461 g$0$18535) (vector-set! g$0$18535 (quote 2) g$0$18536) (error (quote set-env-imp*!) (quote "~s is not of type ~s") g$0$18535 (quote env))))) (set! g$0$11471 (lambda (g$0$18538) (g$0$11461 g$0$18538))) (set! g$0$11473 (lambda g$0$18540 (call-with-values (lambda () (g$0$11438 g$0$18540)) (lambda (g$0$18543 g$0$18544) (g$0$11459 g$0$18543 g$0$18544))))) (set! g$0$11475 (lambda (g$0$18546) (begin (if (eqv? g$0$18546 (quote 5)) (void) (error (quote null-environment) (quote "~s is not 5") g$0$18546)) (g$0$11473 (quote (psyntax null-environment-5)))))) (set! g$0$11477 (lambda (g$0$18548) (begin (if (eqv? g$0$18548 (quote 5)) (void) (error (quote scheme-report-environment) (quote "~s is not 5") g$0$18548)) (g$0$11473 (quote (psyntax scheme-report-environment-5)))))) (set! g$0$11479 (lambda (g$0$18551 g$0$18552) (begin (if (g$0$11461 g$0$18552) (void) (error (quote expand) (quote "~s is not an environment") g$0$18552)) ((lambda (g$0$18554) ((lambda (g$0$18556) ((lambda (g$0$18560 g$0$18561 g$0$18562) ((lambda (g$0$18564) (begin (g$0$10982 g$0$18556) (values g$0$18564 (g$0$18561)))) ((lambda (g$0$18573 g$0$18574 g$0$18575 g$0$18576) ((lambda (g$0$18578) (dynamic-wind g$0$18578 (lambda () (g$0$11396 g$0$18560 (quote ()) (quote ()))) g$0$18578)) (lambda () (begin ((lambda (g$0$18580) (begin (g$0$18573 g$0$18575) (set! g$0$18575 g$0$18580))) (g$0$18573)) ((lambda (g$0$18582) (begin (g$0$18574 g$0$18576) (set! g$0$18576 g$0$18582))) (g$0$18574)))))) g$0$11444 g$0$11446 g$0$18561 g$0$18562))) (g$0$11017 g$0$18551 g$0$10947 (list g$0$18556)) (g$0$11442) (g$0$11442))) (g$0$11440 g$0$18554))) (g$0$11463 g$0$18552))))) (set! g$0$11481 (lambda (g$0$18585 g$0$18586) (begin (if (g$0$11461 g$0$18586) (void) (error (quote eval) (quote "~s is not an environment") g$0$18586)) (call-with-values (lambda () (g$0$11479 g$0$18585 g$0$18586)) (lambda (g$0$18589 g$0$18590) (begin (for-each g$0$10645 g$0$18590) (eval-core (g$0$10207 g$0$18589)))))))) (set! g$0$11483 (lambda (g$0$18592) ((lambda (g$0$18594 g$0$18596) (begin (set! g$0$18594 (lambda (g$0$18634) (if (null? g$0$18634) (g$0$10922) (g$0$10923 (quote #f) (map (lambda (g$0$18636) ((lambda (g$0$18639 g$0$18640) (list (quote set!) g$0$18639 g$0$18640)) (car g$0$18636) (cddr g$0$18636))) g$0$18634))))) (set! g$0$18596 (lambda (g$0$18626) (for-each (lambda (g$0$18628) ((lambda (g$0$18631 g$0$18632) (set-symbol-value! g$0$18631 g$0$18632)) (car g$0$18628) (cadr g$0$18628))) g$0$18626))) (call-with-values (lambda () (g$0$11452 g$0$18592)) (lambda (g$0$18605 g$0$18606 g$0$18607 g$0$18608 g$0$18609 g$0$18610 g$0$18611 g$0$18612) ((lambda (g$0$18619 g$0$18620 g$0$18621 g$0$18622 g$0$18623 g$0$18624) (begin (g$0$10649 g$0$18619 g$0$18620 g$0$18621 g$0$18622 g$0$18623 g$0$18624 g$0$18611 g$0$18612 (lambda () (g$0$18596 g$0$18610)) (lambda () (eval-core (g$0$10207 g$0$18609))) (quote #t)) (values g$0$18609 (g$0$18594 g$0$18610) g$0$18611 g$0$18612))) (gensym) g$0$18605 (quote ()) (map g$0$10641 g$0$18606) (map g$0$10641 g$0$18608) (map g$0$10641 g$0$18607)))))) (quote #f) (quote #f)))) (set! g$0$11485 (lambda (g$0$18642) (call-with-values (lambda () (g$0$11483 g$0$18642)) (lambda (g$0$18647 g$0$18648 g$0$18649 g$0$18650) (values g$0$18647 g$0$18649 g$0$18650))))) (set! g$0$11487 (lambda (g$0$18654 g$0$18655 g$0$18656) (if (null? g$0$18655) g$0$18656 (g$0$11487 g$0$18654 (cdr g$0$18655) (cons (g$0$18654 (car g$0$18655)) g$0$18656))))) (set! g$0$11489 (lambda (g$0$18659 g$0$18660) (g$0$10923 (quote #f) (cons (g$0$10922) (g$0$11487 (lambda (g$0$18662) (list (quote set!) (cdr g$0$18662) (car g$0$18662))) g$0$18659 g$0$18660))))) (set! g$0$11491 (lambda (g$0$18666 g$0$18667 g$0$18668) (map (lambda (g$0$18671 g$0$18672) ((lambda (g$0$18674) ((lambda (g$0$18676) ((lambda () (begin (if g$0$18676 (void) (error (quote expander) (quote "~a ~s") (quote "cannot export unbound identifier") (g$0$11059 g$0$18674 (quote ())))) (cons g$0$18672 g$0$18676))))) (g$0$11063 g$0$18674))) (g$0$11017 g$0$18671 g$0$10947 (list g$0$18668)))) g$0$18666 g$0$18667))) (set! g$0$11493 (lambda (g$0$18678) (letrec ((g$0$18680 (lambda (g$0$18685 g$0$18686 g$0$18687 g$0$18688) (if (null? g$0$18685) (values g$0$18686 g$0$18687 g$0$18688) ((lambda (g$0$18690) ((lambda (g$0$18693 g$0$18694) ((lambda (g$0$18695) (if (memv g$0$18695 (quote (lexical))) ((lambda (g$0$18701) (g$0$18680 (cdr g$0$18685) (cons (cons* g$0$18693 (quote global) g$0$18701) g$0$18686) (cons (cons (g$0$11071 g$0$18694) g$0$18701) g$0$18687) g$0$18688)) (g$0$10953 (g$0$11071 g$0$18694))) (if (memv g$0$18695 (quote (local-macro))) ((lambda (g$0$18699) (g$0$18680 (cdr g$0$18685) (cons (cons* g$0$18693 (quote global-macro) g$0$18699) g$0$18686) g$0$18687 (cons (cons g$0$18699 (g$0$11071 g$0$18694)) g$0$18688))) (gensym)) (if (memv g$0$18695 (quote (local-macro!))) ((lambda (g$0$18697) (g$0$18680 (cdr g$0$18685) (cons (cons* g$0$18693 (quote global-macro!) g$0$18697) g$0$18686) g$0$18687 (cons (cons g$0$18697 (g$0$11071 g$0$18694)) g$0$18688))) (gensym)) (if (memv g$0$18695 (quote ($rtd $module))) (g$0$18680 (cdr g$0$18685) (cons g$0$18690 g$0$18686) g$0$18687 g$0$18688) (error (quote expander) (quote "BUG: do not know how to export ~s ~s") (g$0$11069 g$0$18694) (g$0$11071 g$0$18694))))))) (g$0$11069 g$0$18694))) (car g$0$18690) (cdr g$0$18690))) (car g$0$18685)))))) (g$0$18680 g$0$18678 (quote ()) (quote ()) (quote ()))))) (set! g$0$11495 (lambda (g$0$18703) ((lambda (g$0$18705) ((lambda (g$0$18707) (if (if g$0$18707 (begin (quote #f) (apply (lambda (g$0$18719) (quote #t)) g$0$18707)) (quote #f)) (apply (lambda (g$0$18715) (map (lambda (g$0$18717) (g$0$10991 (gensym (quote t)) g$0$10947 (quote ()))) g$0$18715)) g$0$18707) ((lambda (g$0$18709) ((lambda (g$0$18711) (if (if g$0$18711 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18711)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "~s is not a list"))) g$0$18711) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11059 g$0$18709 (quote ()))))) ((lambda (g$0$18713) (quote ())) g$0$18709))) g$0$18705))) ((letrec ((g$0$18721 (lambda (g$0$18723) (if (g$0$11027 g$0$18723) ((lambda (g$0$18725) (if g$0$18725 (begin (quote #f) ((lambda (g$0$18727) (if g$0$18727 (begin (quote #f) (map cons g$0$18725 g$0$18727)) (quote #f))) (g$0$18721 (g$0$11039 g$0$18723)))) (quote #f))) ((lambda (g$0$18729) (list g$0$18729)) (g$0$11035 g$0$18723))) (if (g$0$11031 g$0$18723) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$18721) g$0$18705))) g$0$18703))) (set! g$0$11497 (lambda (g$0$18732 g$0$18733) (if (g$0$11041 g$0$18732) (if (g$0$11041 g$0$18733) (g$0$11049 g$0$18732 g$0$18733) (error (quote free-identifier=?) (quote "~s is not an identifier") g$0$18733)) (error (quote free-identifier=?) (quote "~s is not an identifier") g$0$18732)))) (set! g$0$11499 (lambda (g$0$18736 g$0$18737) (if (g$0$11041 g$0$18736) (if (g$0$11041 g$0$18737) (g$0$11047 g$0$18736 g$0$18737) (error (quote bound-identifier=?) (quote "~s is not an identifier") g$0$18737)) (error (quote bound-identifier=?) (quote "~s is not an identifier") g$0$18736)))) (set! g$0$11501 (lambda (g$0$18741 . g$0$18739) (begin (if (for-all string? g$0$18739) (void) (error (quote syntax-error) (quote "invalid argument ~s") g$0$18739)) (if (null? g$0$18739) (error (quote expander) (quote "invalid syntax ~s") (g$0$11061 g$0$18741)) (error (quote expander) (quote "~s ~a") (g$0$11061 g$0$18741) (apply string-append g$0$18739)))))) (set! g$0$11503 (lambda (g$0$18743) (g$0$11041 g$0$18743))) (set! g$0$11505 (lambda (g$0$18746 g$0$18747) (if (g$0$11041 g$0$18746) (g$0$11007 g$0$18746 g$0$18747) (error (quote datum->syntax) (quote "~s is not an identifier") g$0$18746)))) (set! g$0$11507 (lambda (g$0$18749) (g$0$11061 g$0$18749))) (set! g$0$11509 (lambda (g$0$18751) (call-with-values (lambda () (g$0$11456 g$0$18751)) (lambda (g$0$18754 g$0$18755) (begin (for-each g$0$10645 g$0$18754) (eval-core (g$0$10207 g$0$18755))))))) (set! g$0$11511 (g$0$10133 (quote #f))) (set! g$0$11513 (lambda (g$0$18757) ((lambda (g$0$18759) (if g$0$18759 ((lambda (g$0$18761) ((lambda (g$0$18763) (if g$0$18763 (cdr g$0$18763) ((lambda (g$0$18765) ((lambda (g$0$18767) (if g$0$18767 ((lambda (g$0$18771) ((lambda (g$0$18773) (begin (g$0$10648 g$0$18761 g$0$18757 g$0$18773) g$0$18773)) (cdr g$0$18771))) g$0$18767) ((lambda (g$0$18769) (begin (g$0$10648 g$0$18761 g$0$18757 g$0$18769) (g$0$10647 g$0$18761 g$0$18769 (cons (quote global) (cons g$0$18761 (g$0$10953 g$0$18757)))) g$0$18769)) (g$0$10955 g$0$18757)))) (assq g$0$18757 g$0$18765))) (if (g$0$10653 (quote (ikarus))) (g$0$10679 (g$0$10654 (quote (ikarus)))) (quote ()))))) (assq g$0$18757 (g$0$10679 g$0$18761)))) g$0$18759) (quote #f))) (g$0$11511)))) (set! g$0$11515 (lambda (g$0$18775) ((lambda (g$0$18777) (begin (set! g$0$18777 (lambda (g$0$18811) ((lambda (g$0$18814 g$0$18815) (if g$0$18814 (set-symbol-value! g$0$18814 (eval-core (g$0$10207 g$0$18815))) (eval-core (g$0$10207 g$0$18815)))) (car g$0$18811) (cdr g$0$18811)))) ((lambda (g$0$18780 g$0$18781) ((lambda (g$0$18783) (begin (for-each g$0$10645 (g$0$18780)) (if (null? g$0$18783) (void) (begin (for-each g$0$18777 (reverse (cdr g$0$18783))) (g$0$18777 (car g$0$18783)))))) ((lambda (g$0$18796 g$0$18797 g$0$18798 g$0$18799 g$0$18800 g$0$18801) ((lambda (g$0$18803) (dynamic-wind g$0$18803 (lambda () (g$0$11428 (list (g$0$11017 g$0$18775 g$0$10947 (quote ()))) (quote ()))) g$0$18803)) (lambda () (begin ((lambda (g$0$18805) (begin (g$0$18796 g$0$18799) (set! g$0$18799 g$0$18805))) (g$0$18796)) ((lambda (g$0$18807) (begin (g$0$18797 g$0$18800) (set! g$0$18800 g$0$18807))) (g$0$18797)) ((lambda (g$0$18809) (begin (g$0$18798 g$0$18801) (set! g$0$18801 g$0$18809))) (g$0$18798)))))) g$0$11444 g$0$11446 g$0$11511 g$0$18780 g$0$18781 (g$0$10654 (quote (ikarus interaction)))))) (g$0$11442) (g$0$11442)))) (quote #f)))) (begin (set! g$0$18816 g$0$11515) (set! g$0$18817 g$0$11513) (set! g$0$18818 g$0$11511) (set! g$0$18819 g$0$11509) (set! g$0$18820 g$0$11507) (set! g$0$18821 g$0$11505) (set! g$0$18822 g$0$11503) (set! g$0$18823 g$0$11501) (set! g$0$18824 g$0$11499) (set! g$0$18825 g$0$11497) (set! g$0$18826 g$0$11495) (set! g$0$18827 g$0$11493) (set! g$0$18828 g$0$11491) (set! g$0$18829 g$0$11489) (set! g$0$18830 g$0$11487) (set! g$0$18831 g$0$11485) (set! g$0$18832 g$0$11483) (set! g$0$18833 g$0$11481) (set! g$0$18834 g$0$11479) (set! g$0$18835 g$0$11477) (set! g$0$18836 g$0$11475) (set! g$0$18837 g$0$11473) (set! g$0$18838 g$0$11471) (set! g$0$18839 g$0$11469) (set! g$0$18840 g$0$11467) (set! g$0$18841 g$0$11465) (set! g$0$18842 g$0$11463) (set! g$0$18843 g$0$11461) (set! g$0$18844 g$0$11459) (set! g$0$18845 g$0$11456) (set! g$0$18846 g$0$11454) (set! g$0$18847 g$0$11452) (set! g$0$18848 g$0$11450) (set! g$0$18849 g$0$11448) (set! g$0$18850 g$0$11446) (set! g$0$18851 g$0$11444) (set! g$0$18852 g$0$11442) (set! g$0$18853 g$0$11440) (set! g$0$18854 g$0$11438) (set! g$0$18855 g$0$11436) (set! g$0$18856 g$0$11434) (set! g$0$18857 g$0$11432) (set! g$0$18858 g$0$11430) (set! g$0$18859 g$0$11428) (set! g$0$18860 g$0$11426) (set! g$0$18861 g$0$11424) (set! g$0$18862 g$0$11422) (set! g$0$18863 g$0$11420) (set! g$0$18864 g$0$11418) (set! g$0$18865 g$0$11416) (set! g$0$18866 g$0$11414) (set! g$0$18867 g$0$11412) (set! g$0$18868 g$0$11410) (set! g$0$18869 g$0$11408) (set! g$0$18870 g$0$11406) (set! g$0$18871 g$0$11404) (set! g$0$18872 g$0$11402) (set! g$0$18873 g$0$11400) (set! g$0$18874 g$0$11398) (set! g$0$18875 g$0$11396) (set! g$0$18876 g$0$11394) (set! g$0$18877 g$0$11392) (set! g$0$18878 g$0$11390) (set! g$0$18879 g$0$11388) (set! g$0$18880 g$0$11386) (set! g$0$18881 g$0$11384) (set! g$0$18882 g$0$11382) (set! g$0$18883 g$0$11380) (set! g$0$18884 g$0$11378) (set! g$0$18885 g$0$11376) (set! g$0$18886 g$0$11374) (set! g$0$18887 g$0$11372) (set! g$0$18888 g$0$11370) (set! g$0$18889 g$0$11368) (set! g$0$18890 g$0$11366) (set! g$0$18891 g$0$11364) (set! g$0$18892 g$0$11362) (set! g$0$18893 g$0$11360) (set! g$0$18894 g$0$11358) (set! g$0$18895 g$0$11356) (set! g$0$18896 g$0$11354) (set! g$0$18897 g$0$11352) (set! g$0$18898 g$0$11350) (set! g$0$18899 g$0$11348) (set! g$0$18900 g$0$11346) (set! g$0$18901 g$0$11344) (set! g$0$18902 g$0$11342) (set! g$0$18903 g$0$11340) (set! g$0$18904 g$0$11338) (set! g$0$18905 g$0$11336) (set! g$0$18906 g$0$11334) (set! g$0$18907 g$0$11332) (set! g$0$18908 g$0$11330) (set! g$0$18909 g$0$11328) (set! g$0$18910 g$0$11326) (set! g$0$18911 g$0$11324) (set! g$0$18912 g$0$11322) (set! g$0$18913 g$0$11320) (set! g$0$18914 g$0$11318) (set! g$0$18915 g$0$11316) (set! g$0$18916 g$0$11314) (set! g$0$18917 g$0$11312) (set! g$0$18918 g$0$11310) (set! g$0$18919 g$0$11308) (set! g$0$18920 g$0$11306) (set! g$0$18921 g$0$11304) (set! g$0$18922 g$0$11302) (set! g$0$18923 g$0$11300) (set! g$0$18924 g$0$11298) (set! g$0$18925 g$0$11296) (set! g$0$18926 g$0$11294) (set! g$0$18927 g$0$11292) (set! g$0$18928 g$0$11290) (set! g$0$18930 g$0$11091) (set! g$0$18931 g$0$11089) (set! g$0$18932 g$0$11087) (set! g$0$18934 g$0$11073) (set! g$0$18935 g$0$11071) (set! g$0$18936 g$0$11069) (set! g$0$18937 g$0$11067) (set! g$0$18938 g$0$11065) (set! g$0$18939 g$0$11063) (set! g$0$18940 g$0$11061) (set! g$0$18941 g$0$11059) (set! g$0$18942 g$0$11057) (set! g$0$18943 g$0$11055) (set! g$0$18944 g$0$11053) (set! g$0$18945 g$0$11051) (set! g$0$18946 g$0$11049) (set! g$0$18947 g$0$11047) (set! g$0$18948 g$0$11045) (set! g$0$18949 g$0$11043) (set! g$0$18950 g$0$11041) (set! g$0$18951 g$0$11039) (set! g$0$18952 g$0$11037) (set! g$0$18953 g$0$11035) (set! g$0$18954 g$0$11033) (set! g$0$18955 g$0$11031) (set! g$0$18956 g$0$11029) (set! g$0$18957 g$0$11027) (set! g$0$18958 g$0$11025) (set! g$0$18959 g$0$11023) (set! g$0$18960 g$0$11021) (set! g$0$18961 g$0$11019) (set! g$0$18962 g$0$11017) (set! g$0$18963 g$0$11015) (set! g$0$18964 g$0$11013) (set! g$0$18965 g$0$11011) (set! g$0$18966 g$0$11009) (set! g$0$18967 g$0$11007) (set! g$0$18968 g$0$11005) (set! g$0$18969 g$0$11003) (set! g$0$18970 g$0$11001) (set! g$0$18971 g$0$10999) (set! g$0$18972 g$0$10997) (set! g$0$18973 g$0$10995) (set! g$0$18974 g$0$10993) (set! g$0$18975 g$0$10991) (set! g$0$18976 g$0$10988) (set! g$0$18977 g$0$10986) (set! g$0$18978 g$0$10984) (set! g$0$18979 g$0$10982) (set! g$0$18980 g$0$10980) (set! g$0$18981 g$0$10978) (set! g$0$18982 g$0$10976) (set! g$0$18983 g$0$10974) (set! g$0$18984 g$0$10972) (set! g$0$18985 g$0$10970) (set! g$0$18986 g$0$10968) (set! g$0$18987 g$0$10966) (set! g$0$18988 g$0$10964) (set! g$0$18989 g$0$10962) (set! g$0$18990 g$0$10960) (set! g$0$18991 g$0$10958) (set! g$0$18992 g$0$10955) (set! g$0$18993 g$0$10953) (set! g$0$18994 g$0$10951) (set! g$0$18995 g$0$10949) (set! g$0$18996 g$0$10947) (set! g$0$18998 g$0$10942) (set! g$0$18999 g$0$10940) (g$0$10657 g$0$11483)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (g$0$10211 (lambda (g$0$19761) ((lambda (g$0$19763) (if g$0$19763 (cdr g$0$19763) (quote #f))) (assq g$0$19761 (quote ((syntax-error . g$0$18823) (syntax-dispatch . g$0$18887) (make-variable-transformer . g$0$18931) (identifier? . g$0$18822) (generate-temporaries . g$0$18826) (free-identifier=? . g$0$18825) (syntax->datum . g$0$18820) (datum->syntax . g$0$18821) (bound-identifier=? . g$0$18824) (null-environment . g$0$18836) (eval . g$0$18833) (environment . g$0$18837))))))) (g$0$10649 (quote g$0$19727) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19728) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$0$19064) (unquote . g$0$19063) (delay . g$0$19056) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (case . g$0$19040) (if . g$0$19036) (letrec . g$0$19034) (lambda . g$0$19031) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19729) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-upcase . g$0$19698) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689) (call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object . g$0$19617) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (scheme-report-environment . g$0$19512) (quotient . g$0$19511) (null-environment . g$0$11474) (remainder . g$0$19510) (modulo . g$0$19509) (inexact->exact . g$0$19508) (force . g$0$19507) (exact->inexact . g$0$19506) (string-fill! . g$0$19503) (string-set! . g$0$19502) (set-cdr! . g$0$19501) (set-car! . g$0$19500) (memv . g$0$19494) (memq . g$0$19493) (member . g$0$19491) (assv . g$0$19483) (assq . g$0$19482) (assoc . g$0$19480) (eval . g$0$11480) (zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-length . g$0$19226) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (not . g$0$19181) (negative? . g$0$19180) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer->char . g$0$19159) (inexact? . g$0$19157) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (even? . g$0$19145) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (atan . g$0$19086) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (delay . g$0$19056) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (case . g$0$19040) (if . g$0$19036) (letrec . g$0$19034) (lambda . g$0$19031) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19730) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$0$19021))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19731) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19732) (quote (rnrs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$19717) (string-titlecase . g$0$19716) (string-normalize-nfkd . g$0$19715) (string-normalize-nfkc . g$0$19714) (string-normalize-nfd . g$0$19713) (string-normalize-nfc . g$0$19712) (string-foldcase . g$0$19711) (string-downcase . g$0$19710) (string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-title-case? . g$0$19702) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-general-category . g$0$19699) (char-upcase . g$0$19698) (char-titlecase . g$0$19697) (char-foldcase . g$0$19696) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689) (make-variable-transformer . g$0$11088) (identifier? . g$0$11502) (generate-temporaries . g$0$11494) (free-identifier=? . g$0$11496) (syntax->datum . g$0$11506) (datum->syntax . g$0$11504) (bound-identifier=? . g$0$11498) (record-type-descriptor? . g$0$19688) (record-predicate . g$0$19687) (record-mutator . g$0$19686) (record-constructor . g$0$19685) (record-accessor . g$0$19684) (make-record-type-descriptor . g$0$19683) (make-record-constructor-descriptor . g$0$19682) (record? . g$0$19681) (record-type-uid . g$0$19680) (record-type-sealed? . g$0$19679) (record-type-parent . g$0$19678) (record-type-opaque? . g$0$19677) (record-type-name . g$0$19676) (record-type-generative? . g$0$19675) (record-type-field-names . g$0$19674) (record-rtd . g$0$19673) (record-field-mutable? . g$0$19672) (nongenerative . g$0$19671) (sealed . g$0$19670) (record-type-descriptor . g$0$19669) (record-constructor-descriptor . g$0$19668) (protocol . g$0$19667) (parent-rtd . g$0$19666) (parent . g$0$19665) (opaque . g$0$19664) (mutable . g$0$19663) (immutable . g$0$19662) (fields . g$0$19661) (define-record-type . g$0$19660) (delete-file . g$0$19659) (file-exists? . g$0$19658) (vector-sort! . g$0$19657) (vector-sort . g$0$19656) (list-sort . g$0$19655) (symbol-hash . g$0$19654) (string-ci-hash . g$0$19653) (string-hash . g$0$19652) (equal-hash . g$0$19651) (hashtable-equivalence-function . g$0$19650) (make-hashtable . g$0$19649) (hashtable-hash-function . g$0$19648) (make-eqv-hashtable . g$0$19647) (make-eq-hashtable . g$0$19646) (hashtable? . g$0$19645) (hashtable-update! . g$0$19644) (hashtable-size . g$0$19643) (hashtable-set! . g$0$19642) (hashtable-ref . g$0$19641) (hashtable-mutable? . g$0$19640) (hashtable-keys . g$0$19639) (hashtable-entries . g$0$19638) (hashtable-delete! . g$0$19637) (hashtable-copy . g$0$19636) (hashtable-contains? . g$0$19635) (hashtable-clear! . g$0$19634) (call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (utf-8-codec . g$0$19611) (utf-16-codec . g$0$19610) (transcoder-error-handling-mode . g$0$19609) (transcoder-eol-style . g$0$19608) (transcoder-codec . g$0$19607) (transcoded-port . g$0$19606) (textual-port? . g$0$19605) (string->bytevector . g$0$19604) (standard-output-port . g$0$19603) (standard-input-port . g$0$19602) (standard-error-port . g$0$19601) (set-port-position! . g$0$19600) (put-u8 . g$0$19599) (put-string . g$0$19598) (put-datum . g$0$19597) (put-char . g$0$19596) (put-bytevector . g$0$19595) (port? . g$0$19594) (port-transcoder . g$0$19593) (port-position . g$0$19592) (port-has-set-port-position!? . g$0$19591) (port-has-port-position? . g$0$19590) (port-eof? . g$0$19589) (output-port-buffer-mode . g$0$19588) (open-string-output-port . g$0$19587) (open-string-input-port . g$0$19586) (open-file-output-port . g$0$19585) (open-file-input/output-port . g$0$19584) (open-file-input-port . g$0$19583) (open-bytevector-output-port . g$0$19582) (open-bytevector-input-port . g$0$19581) (native-transcoder . g$0$19580) (native-eol-style . g$0$19579) (make-transcoder . g$0$19578) (latin-1-codec . g$0$19577) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (make-i/o-encoding-error . g$0$19566) (make-i/o-decoding-error . g$0$19565) (make-custom-textual-output-port . g$0$19564) (make-custom-textual-input/output-port . g$0$19563) (make-custom-textual-input-port . g$0$19562) (make-custom-binary-output-port . g$0$19561) (make-custom-binary-input/output-port . g$0$19560) (make-custom-binary-input-port . g$0$19559) (make-bytevector . g$0$19558) (lookahead-u8 . g$0$19557) (lookahead-char . g$0$19556) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (i/o-encoding-error? . g$0$19534) (i/o-encoding-error-char . g$0$19533) (&i/o-encoding . g$0$19532) (i/o-decoding-error? . g$0$19531) (&i/o-decoding . g$0$19530) (&i/o . g$0$19529) (get-u8 . g$0$19528) (get-string-n! . g$0$19527) (get-string-n . g$0$19526) (get-string-all . g$0$19525) (get-line . g$0$19524) (get-datum . g$0$19523) (get-char . g$0$19522) (get-bytevector-some . g$0$19521) (get-bytevector-n! . g$0$19520) (get-bytevector-n . g$0$19519) (get-bytevector-all . g$0$19518) (flush-output-port . g$0$19517) (file-options . g$0$19516) (error-handling-mode . g$0$19515) (eol-style . g$0$19514) (close-port . g$0$19513) (exit . g$0$19505) (command-line . g$0$19504) (remove . g$0$19499) (remv . g$0$19498) (remp . g$0$19497) (remq . g$0$19496) (partition . g$0$19495) (memv . g$0$19494) (memq . g$0$19493) (memp . g$0$19492) (member . g$0$19491) (exists . g$0$19490) (for-all . g$0$19489) (fold-right . g$0$19488) (fold-left . g$0$19487) (find . g$0$19486) (filter . g$0$19485) (cons* . g$0$19484) (assv . g$0$19483) (assq . g$0$19482) (assp . g$0$19481) (assoc . g$0$19480) (call-with-string-output-port . g$0$19479) (call-with-port . g$0$19478) (call-with-bytevector-output-port . g$0$19477) (bytevector->string . g$0$19476) (buffer-mode? . g$0$19475) (buffer-mode . g$0$19474) (binary-port? . g$0$19473) (guard . g$0$19472) (with-exception-handler . g$0$19471) (raise-continuable . g$0$19470) (raise . g$0$19469) (make-enumeration . g$0$19468) (enum-set=? . g$0$19467) (enum-set-universe . g$0$19466) (enum-set-union . g$0$19465) (enum-set-subset? . g$0$19464) (enum-set-projection . g$0$19463) (enum-set-member? . g$0$19462) (enum-set-intersection . g$0$19461) (enum-set-indexer . g$0$19460) (enum-set-difference . g$0$19459) (enum-set-constructor . g$0$19458) (enum-set-complement . g$0$19457) (enum-set->list . g$0$19456) (define-enumeration . g$0$19455) (who-condition? . g$0$19454) (&who . g$0$19453) (warning? . g$0$19452) (&warning . g$0$19451) (violation? . g$0$19450) (&violation . g$0$19449) (undefined-violation? . g$0$19448) (&undefined . g$0$19447) (syntax-violation? . g$0$19446) (syntax-violation-subform . g$0$19445) (syntax-violation-form . g$0$19444) (syntax-violation . g$0$19443) (&syntax . g$0$19442) (simple-conditions . g$0$19441) (serious-condition? . g$0$19440) (&serious . g$0$19439) (non-continuable-violation? . g$0$19438) (&non-continuable . g$0$19437) (message-condition? . g$0$19436) (&message . g$0$19435) (make-who-condition . g$0$19434) (make-warning . g$0$19433) (make-violation . g$0$19432) (make-undefined-violation . g$0$19431) (make-syntax-violation . g$0$19430) (make-serious-condition . g$0$19429) (make-non-continuable-violation . g$0$19428) (make-message-condition . g$0$19427) (make-lexical-violation . g$0$19426) (make-irritants-condition . g$0$19425) (make-implementation-restriction-violation . g$0$19424) (make-error . g$0$19423) (make-assertion-violation . g$0$19422) (lexical-violation? . g$0$19421) (&lexical . g$0$19420) (irritants-condition? . g$0$19419) (&irritants . g$0$19418) (implementation-restriction-violation? . g$0$19417) (&implementation-restriction . g$0$19416) (error? . g$0$19415) (&error . g$0$19414) (define-condition-type . g$0$19413) (condition-who . g$0$19412) (condition-predicate . g$0$19411) (condition-message . g$0$19410) (condition-irritants . g$0$19409) (condition-accessor . g$0$19408) (condition . g$0$19407) (&condition . g$0$19406) (assertion-violation? . g$0$19405) (&assertion . g$0$19404) (condition? . g$0$19403) (utf32->string . g$0$19402) (utf16->string . g$0$19401) (utf8->string . g$0$19400) (uint-list->bytevector . g$0$19399) (u8-list->bytevector . g$0$19398) (string->utf8 . g$0$19397) (string->utf32 . g$0$19396) (string->utf16 . g$0$19395) (sint-list->bytevector . g$0$19394) (native-endianness . g$0$19393) (bytevector? . g$0$19392) (bytevector=? . g$0$19391) (bytevector-uint-set! . g$0$19390) (bytevector-uint-ref . g$0$19389) (bytevector-u8-set! . g$0$19388) (bytevector-u8-ref . g$0$19387) (bytevector-u64-set! . g$0$19386) (bytevector-u64-ref . g$0$19385) (bytevector-u64-native-set! . g$0$19384) (bytevector-u64-native-ref . g$0$19383) (bytevector-u32-set! . g$0$19382) (bytevector-u32-ref . g$0$19381) (bytevector-u32-native-set! . g$0$19380) (bytevector-u32-native-ref . g$0$19379) (bytevector-u16-set! . g$0$19378) (bytevector-u16-ref . g$0$19377) (bytevector-u16-native-set! . g$0$19376) (bytevector-u16-native-ref . g$0$19375) (bytevector-sint-set! . g$0$19374) (bytevector-sint-ref . g$0$19373) (bytevector-s8-set! . g$0$19372) (bytevector-s8-ref . g$0$19371) (bytevector-s64-set! . g$0$19370) (bytevector-s64-ref . g$0$19369) (bytevector-s64-native-set! . g$0$19368) (bytevector-s64-native-ref . g$0$19367) (bytevector-s32-set! . g$0$19366) (bytevector-s32-ref . g$0$19365) (bytevector-s32-native-set! . g$0$19364) (bytevector-s32-native-ref . g$0$19363) (bytevector-s16-set! . g$0$19362) (bytevector-s16-ref . g$0$19361) (bytevector-s16-native-set! . g$0$19360) (bytevector-s16-native-ref . g$0$19359) (bytevector-length . g$0$19358) (bytevector-ieee-single-ref . g$0$19357) (bytevector-ieee-single-native-set! . g$0$19356) (bytevector-ieee-single-native-ref . g$0$19355) (bytevector-ieee-double-ref . g$0$19354) (bytevector-ieee-double-native-set! . g$0$19353) (bytevector-ieee-double-native-ref . g$0$19352) (bytevector-fill! . g$0$19351) (bytevector-copy! . g$0$19350) (bytevector-copy . g$0$19349) (bytevector->uint-list . g$0$19348) (bytevector->u8-list . g$0$19347) (bytevector->sint-list . g$0$19346) (no-nans-violation? . g$0$19345) (&no-nans . g$0$19344) (no-infinities-violation? . g$0$19343) (&no-infinities . g$0$19342) (make-no-nans-violation . g$0$19341) (make-no-infinities-violation . g$0$19340) (real->flonum . g$0$19339) (flzero? . g$0$19338) (fltruncate . g$0$19337) (fltan . g$0$19336) (flsqrt . g$0$19335) (flsin . g$0$19334) (flround . g$0$19333) (flpositive? . g$0$19332) (flonum? . g$0$19331) (flodd? . g$0$19330) (flnumerator . g$0$19329) (flnegative? . g$0$19328) (flnan? . g$0$19327) (flmod0 . g$0$19326) (flmod . g$0$19325) (flmin . g$0$19324) (flmax . g$0$19323) (fllog . g$0$19322) (flinteger? . g$0$19321) (flinfinite? . g$0$19320) (flfloor . g$0$19319) (flfinite? . g$0$19318) (flexpt . g$0$19317) (flexp . g$0$19316) (fleven? . g$0$19315) (fldiv0-and-mod0 . g$0$19314) (fldiv0 . g$0$19313) (fldiv-and-mod . g$0$19312) (fldiv . g$0$19311) (fldenominator . g$0$19310) (flcos . g$0$19309) (flceiling . g$0$19308) (flatan . g$0$19307) (flasin . g$0$19306) (flacos . g$0$19305) (flabs . g$0$19304) (fl>? . g$0$19303) (fl>=? . g$0$19302) (fl=? . g$0$19301) (fl<? . g$0$19300) (fl<=? . g$0$19299) (fl/ . g$0$19298) (fl- . g$0$19297) (fl+ . g$0$19296) (fl* . g$0$19295) (fixnum->flonum . g$0$19294) (fxzero? . g$0$19293) (fxxor . g$0$19292) (fxrotate-bit-field . g$0$19291) (fxreverse-bit-field . g$0$19290) (fxpositive? . g$0$19289) (fxodd? . g$0$19288) (fxnot . g$0$19287) (fxnegative? . g$0$19286) (fxmod0 . g$0$19285) (fxmod . g$0$19284) (fxmin . g$0$19283) (fxmax . g$0$19282) (fxlength . g$0$19281) (fxior . g$0$19280) (fxif . g$0$19279) (fxfirst-bit-set . g$0$19278) (fxeven? . g$0$19277) (fxdiv0-and-mod0 . g$0$19276) (fxdiv0 . g$0$19275) (fxdiv-and-mod . g$0$19274) (fxdiv . g$0$19273) (fxcopy-bit-field . g$0$19272) (fxcopy-bit . g$0$19271) (fxbit-set? . g$0$19270) (fxbit-field . g$0$19269) (fxbit-count . g$0$19268) (fxarithmetic-shift-right . g$0$19267) (fxarithmetic-shift-left . g$0$19266) (fxarithmetic-shift . g$0$19265) (fxand . g$0$19264) (fx>? . g$0$19263) (fx>=? . g$0$19262) (fx=? . g$0$19261) (fx<? . g$0$19260) (fx<=? . g$0$19259) (fx-/carry . g$0$19258) (fx- . g$0$19257) (fx+/carry . g$0$19256) (fx+ . g$0$19255) (fx*/carry . g$0$19254) (fx* . g$0$19253) (greatest-fixnum . g$0$19252) (least-fixnum . g$0$19251) (fixnum-width . g$0$19250) (fixnum? . g$0$19249) (bitwise-rotate-bit-field . g$0$19248) (bitwise-reverse-bit-field . g$0$19247) (bitwise-length . g$0$19246) (bitwise-if . g$0$19245) (bitwise-first-bit-set . g$0$19244) (bitwise-copy-bit-field . g$0$19243) (bitwise-copy-bit . g$0$19242) (bitwise-bit-set? . g$0$19241) (bitwise-bit-field . g$0$19240) (bitwise-bit-count . g$0$19239) (bitwise-xor . g$0$19238) (bitwise-ior . g$0$19237) (bitwise-and . g$0$19236) (bitwise-not . g$0$19235) (bitwise-arithmetic-shift-right . g$0$19234) (bitwise-arithmetic-shift-left . g$0$19233) (bitwise-arithmetic-shift . g$0$19232) (zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-map . g$0$19227) (vector-length . g$0$19226) (vector-for-each . g$0$19225) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol=? . g$0$19217) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-for-each . g$0$19206) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-valued? . g$0$19194) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (rational-valued? . g$0$19190) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (null? . g$0$19182) (not . g$0$19181) (negative? . g$0$19180) (nan? . g$0$19179) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer-valued? . g$0$19160) (integer->char . g$0$19159) (infinite? . g$0$19158) (inexact? . g$0$19157) (inexact . g$0$19156) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (finite? . g$0$19151) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (exact-integer-sqrt . g$0$19147) (exact . g$0$19146) (even? . g$0$19145) (error . g$0$19144) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (div0-and-mod0 . g$0$19139) (mod0 . g$0$19138) (div0 . g$0$19137) (div-and-mod . g$0$19136) (mod . g$0$19135) (div . g$0$19134) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call/cc . g$0$19120) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (boolean=? . g$0$19087) (atan . g$0$19086) (assertion-violation . g$0$19085) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (let*-values . g$0$19069) (unsyntax-splicing . g$0$19066) (unsyntax . g$0$19065) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (_ . g$0$19062) (else . g$0$19061) (=> . g$0$19060) (... . g$0$19059) (assert . g$0$19058) (endianness . g$0$19057) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (identifier-syntax . g$0$19048) (with-syntax . g$0$19047) (quasisyntax . g$0$19046) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (let-values . g$0$19041) (case . g$0$19040) (unless . g$0$19038) (when . g$0$19037) (if . g$0$19036) (letrec* . g$0$19035) (letrec . g$0$19034) (case-lambda . g$0$19032) (lambda . g$0$19031) (syntax . g$0$19030) (syntax-case . g$0$19029) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19733) (quote (rnrs r5rs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$0$19512) (quotient . g$0$19511) (null-environment . g$0$11474) (remainder . g$0$19510) (modulo . g$0$19509) (inexact->exact . g$0$19508) (force . g$0$19507) (exact->inexact . g$0$19506) (delay . g$0$19056))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19734) (quote (rnrs control)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((do . g$0$19052) (unless . g$0$19038) (when . g$0$19037) (case-lambda . g$0$19032))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19735) (quote (rnrs eval)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eval . g$0$11480) (environment . g$0$11472))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19736) (quote (rnrs mutable-pairs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$0$19501) (set-car! . g$0$19500))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19737) (quote (rnrs mutable-strings)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$0$19503) (string-set! . g$0$19502))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19738) (quote (rnrs programs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((exit . g$0$19505) (command-line . g$0$19504))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19739) (quote (rnrs syntax-case)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$0$11088) (identifier? . g$0$11502) (generate-temporaries . g$0$11494) (free-identifier=? . g$0$11496) (syntax->datum . g$0$11506) (datum->syntax . g$0$11504) (bound-identifier=? . g$0$11498) (syntax-violation . g$0$19443) (unsyntax-splicing . g$0$19066) (unsyntax . g$0$19065) (_ . g$0$19062) (... . g$0$19059) (with-syntax . g$0$19047) (quasisyntax . g$0$19046) (syntax . g$0$19030) (syntax-case . g$0$19029))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19740) (quote (rnrs files)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$0$19659) (file-exists? . g$0$19658) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (&i/o . g$0$19529))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19741) (quote (rnrs sorting)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$0$19657) (vector-sort . g$0$19656) (list-sort . g$0$19655))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19742) (quote (rnrs base)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-map . g$0$19227) (vector-length . g$0$19226) (vector-for-each . g$0$19225) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol=? . g$0$19217) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-for-each . g$0$19206) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-valued? . g$0$19194) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (rational-valued? . g$0$19190) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (null? . g$0$19182) (not . g$0$19181) (negative? . g$0$19180) (nan? . g$0$19179) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer-valued? . g$0$19160) (integer->char . g$0$19159) (infinite? . g$0$19158) (inexact? . g$0$19157) (inexact . g$0$19156) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (finite? . g$0$19151) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (exact-integer-sqrt . g$0$19147) (exact . g$0$19146) (even? . g$0$19145) (error . g$0$19144) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (div0-and-mod0 . g$0$19139) (mod0 . g$0$19138) (div0 . g$0$19137) (div-and-mod . g$0$19136) (mod . g$0$19135) (div . g$0$19134) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call/cc . g$0$19120) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (boolean=? . g$0$19087) (atan . g$0$19086) (assertion-violation . g$0$19085) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (let*-values . g$0$19069) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (_ . g$0$19062) (else . g$0$19061) (=> . g$0$19060) (... . g$0$19059) (assert . g$0$19058) (or . g$0$19054) (and . g$0$19053) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (identifier-syntax . g$0$19048) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (let-values . g$0$19041) (case . g$0$19040) (if . g$0$19036) (letrec* . g$0$19035) (letrec . g$0$19034) (lambda . g$0$19031) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19743) (quote (rnrs lists)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((remove . g$0$19499) (remv . g$0$19498) (remp . g$0$19497) (remq . g$0$19496) (partition . g$0$19495) (memv . g$0$19494) (memq . g$0$19493) (memp . g$0$19492) (member . g$0$19491) (exists . g$0$19490) (for-all . g$0$19489) (fold-right . g$0$19488) (fold-left . g$0$19487) (find . g$0$19486) (filter . g$0$19485) (cons* . g$0$19484) (assv . g$0$19483) (assq . g$0$19482) (assp . g$0$19481) (assoc . g$0$19480))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19744) (quote (rnrs io simple)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (&i/o . g$0$19529))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19745) (quote (rnrs bytevectors)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$0$19558) (utf32->string . g$0$19402) (utf16->string . g$0$19401) (utf8->string . g$0$19400) (uint-list->bytevector . g$0$19399) (u8-list->bytevector . g$0$19398) (string->utf8 . g$0$19397) (string->utf32 . g$0$19396) (string->utf16 . g$0$19395) (sint-list->bytevector . g$0$19394) (native-endianness . g$0$19393) (bytevector? . g$0$19392) (bytevector=? . g$0$19391) (bytevector-uint-set! . g$0$19390) (bytevector-uint-ref . g$0$19389) (bytevector-u8-set! . g$0$19388) (bytevector-u8-ref . g$0$19387) (bytevector-u64-set! . g$0$19386) (bytevector-u64-ref . g$0$19385) (bytevector-u64-native-set! . g$0$19384) (bytevector-u64-native-ref . g$0$19383) (bytevector-u32-set! . g$0$19382) (bytevector-u32-ref . g$0$19381) (bytevector-u32-native-set! . g$0$19380) (bytevector-u32-native-ref . g$0$19379) (bytevector-u16-set! . g$0$19378) (bytevector-u16-ref . g$0$19377) (bytevector-u16-native-set! . g$0$19376) (bytevector-u16-native-ref . g$0$19375) (bytevector-sint-set! . g$0$19374) (bytevector-sint-ref . g$0$19373) (bytevector-s8-set! . g$0$19372) (bytevector-s8-ref . g$0$19371) (bytevector-s64-set! . g$0$19370) (bytevector-s64-ref . g$0$19369) (bytevector-s64-native-set! . g$0$19368) (bytevector-s64-native-ref . g$0$19367) (bytevector-s32-set! . g$0$19366) (bytevector-s32-ref . g$0$19365) (bytevector-s32-native-set! . g$0$19364) (bytevector-s32-native-ref . g$0$19363) (bytevector-s16-set! . g$0$19362) (bytevector-s16-ref . g$0$19361) (bytevector-s16-native-set! . g$0$19360) (bytevector-s16-native-ref . g$0$19359) (bytevector-length . g$0$19358) (bytevector-ieee-single-ref . g$0$19357) (bytevector-ieee-single-native-set! . g$0$19356) (bytevector-ieee-single-native-ref . g$0$19355) (bytevector-ieee-double-ref . g$0$19354) (bytevector-ieee-double-native-set! . g$0$19353) (bytevector-ieee-double-native-ref . g$0$19352) (bytevector-fill! . g$0$19351) (bytevector-copy! . g$0$19350) (bytevector-copy . g$0$19349) (bytevector->uint-list . g$0$19348) (bytevector->u8-list . g$0$19347) (bytevector->sint-list . g$0$19346) (endianness . g$0$19057))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19746) (quote (rnrs unicode)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$19717) (string-titlecase . g$0$19716) (string-normalize-nfkd . g$0$19715) (string-normalize-nfkc . g$0$19714) (string-normalize-nfd . g$0$19713) (string-normalize-nfc . g$0$19712) (string-foldcase . g$0$19711) (string-downcase . g$0$19710) (string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-title-case? . g$0$19702) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-general-category . g$0$19699) (char-upcase . g$0$19698) (char-titlecase . g$0$19697) (char-foldcase . g$0$19696) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19747) (quote (rnrs exceptions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((guard . g$0$19472) (with-exception-handler . g$0$19471) (raise-continuable . g$0$19470) (raise . g$0$19469) (else . g$0$19061) (=> . g$0$19060))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19748) (quote (rnrs arithmetic bitwise)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$0$19248) (bitwise-reverse-bit-field . g$0$19247) (bitwise-length . g$0$19246) (bitwise-if . g$0$19245) (bitwise-first-bit-set . g$0$19244) (bitwise-copy-bit-field . g$0$19243) (bitwise-copy-bit . g$0$19242) (bitwise-bit-set? . g$0$19241) (bitwise-bit-field . g$0$19240) (bitwise-bit-count . g$0$19239) (bitwise-xor . g$0$19238) (bitwise-ior . g$0$19237) (bitwise-and . g$0$19236) (bitwise-not . g$0$19235) (bitwise-arithmetic-shift-right . g$0$19234) (bitwise-arithmetic-shift-left . g$0$19233) (bitwise-arithmetic-shift . g$0$19232))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19749) (quote (rnrs arithmetic fixnums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$0$19293) (fxxor . g$0$19292) (fxrotate-bit-field . g$0$19291) (fxreverse-bit-field . g$0$19290) (fxpositive? . g$0$19289) (fxodd? . g$0$19288) (fxnot . g$0$19287) (fxnegative? . g$0$19286) (fxmod0 . g$0$19285) (fxmod . g$0$19284) (fxmin . g$0$19283) (fxmax . g$0$19282) (fxlength . g$0$19281) (fxior . g$0$19280) (fxif . g$0$19279) (fxfirst-bit-set . g$0$19278) (fxeven? . g$0$19277) (fxdiv0-and-mod0 . g$0$19276) (fxdiv0 . g$0$19275) (fxdiv-and-mod . g$0$19274) (fxdiv . g$0$19273) (fxcopy-bit-field . g$0$19272) (fxcopy-bit . g$0$19271) (fxbit-set? . g$0$19270) (fxbit-field . g$0$19269) (fxbit-count . g$0$19268) (fxarithmetic-shift-right . g$0$19267) (fxarithmetic-shift-left . g$0$19266) (fxarithmetic-shift . g$0$19265) (fxand . g$0$19264) (fx>? . g$0$19263) (fx>=? . g$0$19262) (fx=? . g$0$19261) (fx<? . g$0$19260) (fx<=? . g$0$19259) (fx-/carry . g$0$19258) (fx- . g$0$19257) (fx+/carry . g$0$19256) (fx+ . g$0$19255) (fx*/carry . g$0$19254) (fx* . g$0$19253) (greatest-fixnum . g$0$19252) (least-fixnum . g$0$19251) (fixnum-width . g$0$19250) (fixnum? . g$0$19249))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19750) (quote (rnrs arithmetic flonums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$0$19345) (&no-nans . g$0$19344) (no-infinities-violation? . g$0$19343) (&no-infinities . g$0$19342) (make-no-nans-violation . g$0$19341) (make-no-infinities-violation . g$0$19340) (real->flonum . g$0$19339) (flzero? . g$0$19338) (fltruncate . g$0$19337) (fltan . g$0$19336) (flsqrt . g$0$19335) (flsin . g$0$19334) (flround . g$0$19333) (flpositive? . g$0$19332) (flonum? . g$0$19331) (flodd? . g$0$19330) (flnumerator . g$0$19329) (flnegative? . g$0$19328) (flnan? . g$0$19327) (flmod0 . g$0$19326) (flmod . g$0$19325) (flmin . g$0$19324) (flmax . g$0$19323) (fllog . g$0$19322) (flinteger? . g$0$19321) (flinfinite? . g$0$19320) (flfloor . g$0$19319) (flfinite? . g$0$19318) (flexpt . g$0$19317) (flexp . g$0$19316) (fleven? . g$0$19315) (fldiv0-and-mod0 . g$0$19314) (fldiv0 . g$0$19313) (fldiv-and-mod . g$0$19312) (fldiv . g$0$19311) (fldenominator . g$0$19310) (flcos . g$0$19309) (flceiling . g$0$19308) (flatan . g$0$19307) (flasin . g$0$19306) (flacos . g$0$19305) (flabs . g$0$19304) (fl>? . g$0$19303) (fl>=? . g$0$19302) (fl=? . g$0$19301) (fl<? . g$0$19300) (fl<=? . g$0$19299) (fl/ . g$0$19298) (fl- . g$0$19297) (fl+ . g$0$19296) (fl* . g$0$19295) (fixnum->flonum . g$0$19294))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19751) (quote (rnrs hashtables)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$0$19654) (string-ci-hash . g$0$19653) (string-hash . g$0$19652) (equal-hash . g$0$19651) (hashtable-equivalence-function . g$0$19650) (make-hashtable . g$0$19649) (hashtable-hash-function . g$0$19648) (make-eqv-hashtable . g$0$19647) (make-eq-hashtable . g$0$19646) (hashtable? . g$0$19645) (hashtable-update! . g$0$19644) (hashtable-size . g$0$19643) (hashtable-set! . g$0$19642) (hashtable-ref . g$0$19641) (hashtable-mutable? . g$0$19640) (hashtable-keys . g$0$19639) (hashtable-entries . g$0$19638) (hashtable-delete! . g$0$19637) (hashtable-copy . g$0$19636) (hashtable-contains? . g$0$19635) (hashtable-clear! . g$0$19634))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19752) (quote (rnrs io ports)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (utf-8-codec . g$0$19611) (utf-16-codec . g$0$19610) (transcoder-error-handling-mode . g$0$19609) (transcoder-eol-style . g$0$19608) (transcoder-codec . g$0$19607) (transcoded-port . g$0$19606) (textual-port? . g$0$19605) (string->bytevector . g$0$19604) (standard-output-port . g$0$19603) (standard-input-port . g$0$19602) (standard-error-port . g$0$19601) (set-port-position! . g$0$19600) (put-u8 . g$0$19599) (put-string . g$0$19598) (put-datum . g$0$19597) (put-char . g$0$19596) (put-bytevector . g$0$19595) (port? . g$0$19594) (port-transcoder . g$0$19593) (port-position . g$0$19592) (port-has-set-port-position!? . g$0$19591) (port-has-port-position? . g$0$19590) (port-eof? . g$0$19589) (output-port-buffer-mode . g$0$19588) (open-string-output-port . g$0$19587) (open-string-input-port . g$0$19586) (open-file-output-port . g$0$19585) (open-file-input/output-port . g$0$19584) (open-file-input-port . g$0$19583) (open-bytevector-output-port . g$0$19582) (open-bytevector-input-port . g$0$19581) (native-transcoder . g$0$19580) (native-eol-style . g$0$19579) (make-transcoder . g$0$19578) (latin-1-codec . g$0$19577) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (make-i/o-encoding-error . g$0$19566) (make-i/o-decoding-error . g$0$19565) (make-custom-textual-output-port . g$0$19564) (make-custom-textual-input/output-port . g$0$19563) (make-custom-textual-input-port . g$0$19562) (make-custom-binary-output-port . g$0$19561) (make-custom-binary-input/output-port . g$0$19560) (make-custom-binary-input-port . g$0$19559) (lookahead-u8 . g$0$19557) (lookahead-char . g$0$19556) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (i/o-encoding-error? . g$0$19534) (i/o-encoding-error-char . g$0$19533) (&i/o-encoding . g$0$19532) (i/o-decoding-error? . g$0$19531) (&i/o-decoding . g$0$19530) (&i/o . g$0$19529) (get-u8 . g$0$19528) (get-string-n! . g$0$19527) (get-string-n . g$0$19526) (get-string-all . g$0$19525) (get-line . g$0$19524) (get-datum . g$0$19523) (get-char . g$0$19522) (get-bytevector-some . g$0$19521) (get-bytevector-n! . g$0$19520) (get-bytevector-n . g$0$19519) (get-bytevector-all . g$0$19518) (flush-output-port . g$0$19517) (file-options . g$0$19516) (error-handling-mode . g$0$19515) (eol-style . g$0$19514) (close-port . g$0$19513) (call-with-string-output-port . g$0$19479) (call-with-port . g$0$19478) (call-with-bytevector-output-port . g$0$19477) (bytevector->string . g$0$19476) (buffer-mode? . g$0$19475) (buffer-mode . g$0$19474) (binary-port? . g$0$19473))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19753) (quote (rnrs enums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$0$19468) (enum-set=? . g$0$19467) (enum-set-universe . g$0$19466) (enum-set-union . g$0$19465) (enum-set-subset? . g$0$19464) (enum-set-projection . g$0$19463) (enum-set-member? . g$0$19462) (enum-set-intersection . g$0$19461) (enum-set-indexer . g$0$19460) (enum-set-difference . g$0$19459) (enum-set-constructor . g$0$19458) (enum-set-complement . g$0$19457) (enum-set->list . g$0$19456) (define-enumeration . g$0$19455))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19754) (quote (rnrs conditions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$0$19454) (&who . g$0$19453) (warning? . g$0$19452) (&warning . g$0$19451) (violation? . g$0$19450) (&violation . g$0$19449) (undefined-violation? . g$0$19448) (&undefined . g$0$19447) (syntax-violation? . g$0$19446) (syntax-violation-subform . g$0$19445) (syntax-violation-form . g$0$19444) (syntax-violation . g$0$19443) (&syntax . g$0$19442) (simple-conditions . g$0$19441) (serious-condition? . g$0$19440) (&serious . g$0$19439) (non-continuable-violation? . g$0$19438) (&non-continuable . g$0$19437) (message-condition? . g$0$19436) (&message . g$0$19435) (make-who-condition . g$0$19434) (make-warning . g$0$19433) (make-violation . g$0$19432) (make-undefined-violation . g$0$19431) (make-syntax-violation . g$0$19430) (make-serious-condition . g$0$19429) (make-non-continuable-violation . g$0$19428) (make-message-condition . g$0$19427) (make-lexical-violation . g$0$19426) (make-irritants-condition . g$0$19425) (make-implementation-restriction-violation . g$0$19424) (make-error . g$0$19423) (make-assertion-violation . g$0$19422) (lexical-violation? . g$0$19421) (&lexical . g$0$19420) (irritants-condition? . g$0$19419) (&irritants . g$0$19418) (implementation-restriction-violation? . g$0$19417) (&implementation-restriction . g$0$19416) (error? . g$0$19415) (&error . g$0$19414) (define-condition-type . g$0$19413) (condition-who . g$0$19412) (condition-predicate . g$0$19411) (condition-message . g$0$19410) (condition-irritants . g$0$19409) (condition-accessor . g$0$19408) (condition . g$0$19407) (&condition . g$0$19406) (assertion-violation? . g$0$19405) (&assertion . g$0$19404) (condition? . g$0$19403))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19755) (quote (rnrs records inspection)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record? . g$0$19681) (record-type-uid . g$0$19680) (record-type-sealed? . g$0$19679) (record-type-parent . g$0$19678) (record-type-opaque? . g$0$19677) (record-type-name . g$0$19676) (record-type-generative? . g$0$19675) (record-type-field-names . g$0$19674) (record-rtd . g$0$19673) (record-field-mutable? . g$0$19672))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19756) (quote (rnrs records procedural)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$0$19688) (record-predicate . g$0$19687) (record-mutator . g$0$19686) (record-constructor . g$0$19685) (record-accessor . g$0$19684) (make-record-type-descriptor . g$0$19683) (make-record-constructor-descriptor . g$0$19682))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19757) (quote (rnrs records syntactic)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((nongenerative . g$0$19671) (sealed . g$0$19670) (record-type-descriptor . g$0$19669) (record-constructor-descriptor . g$0$19668) (protocol . g$0$19667) (parent-rtd . g$0$19666) (parent . g$0$19665) (opaque . g$0$19664) (mutable . g$0$19663) (immutable . g$0$19662) (fields . g$0$19661) (define-record-type . g$0$19660))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19758) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$0$11500) (syntax-dispatch . g$0$11371) (pretty-print . g$0$19726) (eval-core . g$0$19725) (set-symbol-value! . g$0$19724) (symbol-value . g$0$19723) (gensym . g$0$19722) (void . g$0$19721) (load . g$0$19720) (interaction-environment . g$0$19719) (char-ready? . g$0$19718) (string-upcase . g$0$19717) (string-titlecase . g$0$19716) (string-normalize-nfkd . g$0$19715) (string-normalize-nfkc . g$0$19714) (string-normalize-nfd . g$0$19713) (string-normalize-nfc . g$0$19712) (string-foldcase . g$0$19711) (string-downcase . g$0$19710) (string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-title-case? . g$0$19702) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-general-category . g$0$19699) (char-upcase . g$0$19698) (char-titlecase . g$0$19697) (char-foldcase . g$0$19696) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689) (make-variable-transformer . g$0$11088) (identifier? . g$0$11502) (generate-temporaries . g$0$11494) (free-identifier=? . g$0$11496) (syntax->datum . g$0$11506) (datum->syntax . g$0$11504) (bound-identifier=? . g$0$11498) (record-type-descriptor? . g$0$19688) (record-predicate . g$0$19687) (record-mutator . g$0$19686) (record-constructor . g$0$19685) (record-accessor . g$0$19684) (make-record-type-descriptor . g$0$19683) (make-record-constructor-descriptor . g$0$19682) (record? . g$0$19681) (record-type-uid . g$0$19680) (record-type-sealed? . g$0$19679) (record-type-parent . g$0$19678) (record-type-opaque? . g$0$19677) (record-type-name . g$0$19676) (record-type-generative? . g$0$19675) (record-type-field-names . g$0$19674) (record-rtd . g$0$19673) (record-field-mutable? . g$0$19672) (nongenerative . g$0$19671) (sealed . g$0$19670) (record-type-descriptor . g$0$19669) (record-constructor-descriptor . g$0$19668) (protocol . g$0$19667) (parent-rtd . g$0$19666) (parent . g$0$19665) (opaque . g$0$19664) (mutable . g$0$19663) (immutable . g$0$19662) (fields . g$0$19661) (define-record-type . g$0$19660) (delete-file . g$0$19659) (file-exists? . g$0$19658) (vector-sort! . g$0$19657) (vector-sort . g$0$19656) (list-sort . g$0$19655) (symbol-hash . g$0$19654) (string-ci-hash . g$0$19653) (string-hash . g$0$19652) (equal-hash . g$0$19651) (hashtable-equivalence-function . g$0$19650) (make-hashtable . g$0$19649) (hashtable-hash-function . g$0$19648) (make-eqv-hashtable . g$0$19647) (make-eq-hashtable . g$0$19646) (hashtable? . g$0$19645) (hashtable-update! . g$0$19644) (hashtable-size . g$0$19643) (hashtable-set! . g$0$19642) (hashtable-ref . g$0$19641) (hashtable-mutable? . g$0$19640) (hashtable-keys . g$0$19639) (hashtable-entries . g$0$19638) (hashtable-delete! . g$0$19637) (hashtable-copy . g$0$19636) (hashtable-contains? . g$0$19635) (hashtable-clear! . g$0$19634) (call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (utf-8-codec . g$0$19611) (utf-16-codec . g$0$19610) (transcoder-error-handling-mode . g$0$19609) (transcoder-eol-style . g$0$19608) (transcoder-codec . g$0$19607) (transcoded-port . g$0$19606) (textual-port? . g$0$19605) (string->bytevector . g$0$19604) (standard-output-port . g$0$19603) (standard-input-port . g$0$19602) (standard-error-port . g$0$19601) (set-port-position! . g$0$19600) (put-u8 . g$0$19599) (put-string . g$0$19598) (put-datum . g$0$19597) (put-char . g$0$19596) (put-bytevector . g$0$19595) (port? . g$0$19594) (port-transcoder . g$0$19593) (port-position . g$0$19592) (port-has-set-port-position!? . g$0$19591) (port-has-port-position? . g$0$19590) (port-eof? . g$0$19589) (output-port-buffer-mode . g$0$19588) (open-string-output-port . g$0$19587) (open-string-input-port . g$0$19586) (open-file-output-port . g$0$19585) (open-file-input/output-port . g$0$19584) (open-file-input-port . g$0$19583) (open-bytevector-output-port . g$0$19582) (open-bytevector-input-port . g$0$19581) (native-transcoder . g$0$19580) (native-eol-style . g$0$19579) (make-transcoder . g$0$19578) (latin-1-codec . g$0$19577) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (make-i/o-encoding-error . g$0$19566) (make-i/o-decoding-error . g$0$19565) (make-custom-textual-output-port . g$0$19564) (make-custom-textual-input/output-port . g$0$19563) (make-custom-textual-input-port . g$0$19562) (make-custom-binary-output-port . g$0$19561) (make-custom-binary-input/output-port . g$0$19560) (make-custom-binary-input-port . g$0$19559) (make-bytevector . g$0$19558) (lookahead-u8 . g$0$19557) (lookahead-char . g$0$19556) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (i/o-encoding-error? . g$0$19534) (i/o-encoding-error-char . g$0$19533) (&i/o-encoding . g$0$19532) (i/o-decoding-error? . g$0$19531) (&i/o-decoding . g$0$19530) (&i/o . g$0$19529) (get-u8 . g$0$19528) (get-string-n! . g$0$19527) (get-string-n . g$0$19526) (get-string-all . g$0$19525) (get-line . g$0$19524) (get-datum . g$0$19523) (get-char . g$0$19522) (get-bytevector-some . g$0$19521) (get-bytevector-n! . g$0$19520) (get-bytevector-n . g$0$19519) (get-bytevector-all . g$0$19518) (flush-output-port . g$0$19517) (file-options . g$0$19516) (error-handling-mode . g$0$19515) (eol-style . g$0$19514) (close-port . g$0$19513) (scheme-report-environment . g$0$19512) (quotient . g$0$19511) (null-environment . g$0$11474) (remainder . g$0$19510) (modulo . g$0$19509) (inexact->exact . g$0$19508) (force . g$0$19507) (exact->inexact . g$0$19506) (exit . g$0$19505) (command-line . g$0$19504) (string-fill! . g$0$19503) (string-set! . g$0$19502) (set-cdr! . g$0$19501) (set-car! . g$0$19500) (remove . g$0$19499) (remv . g$0$19498) (remp . g$0$19497) (remq . g$0$19496) (partition . g$0$19495) (memv . g$0$19494) (memq . g$0$19493) (memp . g$0$19492) (member . g$0$19491) (exists . g$0$19490) (for-all . g$0$19489) (fold-right . g$0$19488) (fold-left . g$0$19487) (find . g$0$19486) (filter . g$0$19485) (cons* . g$0$19484) (assv . g$0$19483) (assq . g$0$19482) (assp . g$0$19481) (assoc . g$0$19480) (call-with-string-output-port . g$0$19479) (call-with-port . g$0$19478) (call-with-bytevector-output-port . g$0$19477) (bytevector->string . g$0$19476) (buffer-mode? . g$0$19475) (buffer-mode . g$0$19474) (binary-port? . g$0$19473) (guard . g$0$19472) (with-exception-handler . g$0$19471) (raise-continuable . g$0$19470) (raise . g$0$19469) (eval . g$0$11480) (environment . g$0$11472) (make-enumeration . g$0$19468) (enum-set=? . g$0$19467) (enum-set-universe . g$0$19466) (enum-set-union . g$0$19465) (enum-set-subset? . g$0$19464) (enum-set-projection . g$0$19463) (enum-set-member? . g$0$19462) (enum-set-intersection . g$0$19461) (enum-set-indexer . g$0$19460) (enum-set-difference . g$0$19459) (enum-set-constructor . g$0$19458) (enum-set-complement . g$0$19457) (enum-set->list . g$0$19456) (define-enumeration . g$0$19455) (who-condition? . g$0$19454) (&who . g$0$19453) (warning? . g$0$19452) (&warning . g$0$19451) (violation? . g$0$19450) (&violation . g$0$19449) (undefined-violation? . g$0$19448) (&undefined . g$0$19447) (syntax-violation? . g$0$19446) (syntax-violation-subform . g$0$19445) (syntax-violation-form . g$0$19444) (syntax-violation . g$0$19443) (&syntax . g$0$19442) (simple-conditions . g$0$19441) (serious-condition? . g$0$19440) (&serious . g$0$19439) (non-continuable-violation? . g$0$19438) (&non-continuable . g$0$19437) (message-condition? . g$0$19436) (&message . g$0$19435) (make-who-condition . g$0$19434) (make-warning . g$0$19433) (make-violation . g$0$19432) (make-undefined-violation . g$0$19431) (make-syntax-violation . g$0$19430) (make-serious-condition . g$0$19429) (make-non-continuable-violation . g$0$19428) (make-message-condition . g$0$19427) (make-lexical-violation . g$0$19426) (make-irritants-condition . g$0$19425) (make-implementation-restriction-violation . g$0$19424) (make-error . g$0$19423) (make-assertion-violation . g$0$19422) (lexical-violation? . g$0$19421) (&lexical . g$0$19420) (irritants-condition? . g$0$19419) (&irritants . g$0$19418) (implementation-restriction-violation? . g$0$19417) (&implementation-restriction . g$0$19416) (error? . g$0$19415) (&error . g$0$19414) (define-condition-type . g$0$19413) (condition-who . g$0$19412) (condition-predicate . g$0$19411) (condition-message . g$0$19410) (condition-irritants . g$0$19409) (condition-accessor . g$0$19408) (condition . g$0$19407) (&condition . g$0$19406) (assertion-violation? . g$0$19405) (&assertion . g$0$19404) (condition? . g$0$19403) (utf32->string . g$0$19402) (utf16->string . g$0$19401) (utf8->string . g$0$19400) (uint-list->bytevector . g$0$19399) (u8-list->bytevector . g$0$19398) (string->utf8 . g$0$19397) (string->utf32 . g$0$19396) (string->utf16 . g$0$19395) (sint-list->bytevector . g$0$19394) (native-endianness . g$0$19393) (bytevector? . g$0$19392) (bytevector=? . g$0$19391) (bytevector-uint-set! . g$0$19390) (bytevector-uint-ref . g$0$19389) (bytevector-u8-set! . g$0$19388) (bytevector-u8-ref . g$0$19387) (bytevector-u64-set! . g$0$19386) (bytevector-u64-ref . g$0$19385) (bytevector-u64-native-set! . g$0$19384) (bytevector-u64-native-ref . g$0$19383) (bytevector-u32-set! . g$0$19382) (bytevector-u32-ref . g$0$19381) (bytevector-u32-native-set! . g$0$19380) (bytevector-u32-native-ref . g$0$19379) (bytevector-u16-set! . g$0$19378) (bytevector-u16-ref . g$0$19377) (bytevector-u16-native-set! . g$0$19376) (bytevector-u16-native-ref . g$0$19375) (bytevector-sint-set! . g$0$19374) (bytevector-sint-ref . g$0$19373) (bytevector-s8-set! . g$0$19372) (bytevector-s8-ref . g$0$19371) (bytevector-s64-set! . g$0$19370) (bytevector-s64-ref . g$0$19369) (bytevector-s64-native-set! . g$0$19368) (bytevector-s64-native-ref . g$0$19367) (bytevector-s32-set! . g$0$19366) (bytevector-s32-ref . g$0$19365) (bytevector-s32-native-set! . g$0$19364) (bytevector-s32-native-ref . g$0$19363) (bytevector-s16-set! . g$0$19362) (bytevector-s16-ref . g$0$19361) (bytevector-s16-native-set! . g$0$19360) (bytevector-s16-native-ref . g$0$19359) (bytevector-length . g$0$19358) (bytevector-ieee-single-ref . g$0$19357) (bytevector-ieee-single-native-set! . g$0$19356) (bytevector-ieee-single-native-ref . g$0$19355) (bytevector-ieee-double-ref . g$0$19354) (bytevector-ieee-double-native-set! . g$0$19353) (bytevector-ieee-double-native-ref . g$0$19352) (bytevector-fill! . g$0$19351) (bytevector-copy! . g$0$19350) (bytevector-copy . g$0$19349) (bytevector->uint-list . g$0$19348) (bytevector->u8-list . g$0$19347) (bytevector->sint-list . g$0$19346) (no-nans-violation? . g$0$19345) (&no-nans . g$0$19344) (no-infinities-violation? . g$0$19343) (&no-infinities . g$0$19342) (make-no-nans-violation . g$0$19341) (make-no-infinities-violation . g$0$19340) (real->flonum . g$0$19339) (flzero? . g$0$19338) (fltruncate . g$0$19337) (fltan . g$0$19336) (flsqrt . g$0$19335) (flsin . g$0$19334) (flround . g$0$19333) (flpositive? . g$0$19332) (flonum? . g$0$19331) (flodd? . g$0$19330) (flnumerator . g$0$19329) (flnegative? . g$0$19328) (flnan? . g$0$19327) (flmod0 . g$0$19326) (flmod . g$0$19325) (flmin . g$0$19324) (flmax . g$0$19323) (fllog . g$0$19322) (flinteger? . g$0$19321) (flinfinite? . g$0$19320) (flfloor . g$0$19319) (flfinite? . g$0$19318) (flexpt . g$0$19317) (flexp . g$0$19316) (fleven? . g$0$19315) (fldiv0-and-mod0 . g$0$19314) (fldiv0 . g$0$19313) (fldiv-and-mod . g$0$19312) (fldiv . g$0$19311) (fldenominator . g$0$19310) (flcos . g$0$19309) (flceiling . g$0$19308) (flatan . g$0$19307) (flasin . g$0$19306) (flacos . g$0$19305) (flabs . g$0$19304) (fl>? . g$0$19303) (fl>=? . g$0$19302) (fl=? . g$0$19301) (fl<? . g$0$19300) (fl<=? . g$0$19299) (fl/ . g$0$19298) (fl- . g$0$19297) (fl+ . g$0$19296) (fl* . g$0$19295) (fixnum->flonum . g$0$19294) (fxzero? . g$0$19293) (fxxor . g$0$19292) (fxrotate-bit-field . g$0$19291) (fxreverse-bit-field . g$0$19290) (fxpositive? . g$0$19289) (fxodd? . g$0$19288) (fxnot . g$0$19287) (fxnegative? . g$0$19286) (fxmod0 . g$0$19285) (fxmod . g$0$19284) (fxmin . g$0$19283) (fxmax . g$0$19282) (fxlength . g$0$19281) (fxior . g$0$19280) (fxif . g$0$19279) (fxfirst-bit-set . g$0$19278) (fxeven? . g$0$19277) (fxdiv0-and-mod0 . g$0$19276) (fxdiv0 . g$0$19275) (fxdiv-and-mod . g$0$19274) (fxdiv . g$0$19273) (fxcopy-bit-field . g$0$19272) (fxcopy-bit . g$0$19271) (fxbit-set? . g$0$19270) (fxbit-field . g$0$19269) (fxbit-count . g$0$19268) (fxarithmetic-shift-right . g$0$19267) (fxarithmetic-shift-left . g$0$19266) (fxarithmetic-shift . g$0$19265) (fxand . g$0$19264) (fx>? . g$0$19263) (fx>=? . g$0$19262) (fx=? . g$0$19261) (fx<? . g$0$19260) (fx<=? . g$0$19259) (fx-/carry . g$0$19258) (fx- . g$0$19257) (fx+/carry . g$0$19256) (fx+ . g$0$19255) (fx*/carry . g$0$19254) (fx* . g$0$19253) (greatest-fixnum . g$0$19252) (least-fixnum . g$0$19251) (fixnum-width . g$0$19250) (fixnum? . g$0$19249) (bitwise-rotate-bit-field . g$0$19248) (bitwise-reverse-bit-field . g$0$19247) (bitwise-length . g$0$19246) (bitwise-if . g$0$19245) (bitwise-first-bit-set . g$0$19244) (bitwise-copy-bit-field . g$0$19243) (bitwise-copy-bit . g$0$19242) (bitwise-bit-set? . g$0$19241) (bitwise-bit-field . g$0$19240) (bitwise-bit-count . g$0$19239) (bitwise-xor . g$0$19238) (bitwise-ior . g$0$19237) (bitwise-and . g$0$19236) (bitwise-not . g$0$19235) (bitwise-arithmetic-shift-right . g$0$19234) (bitwise-arithmetic-shift-left . g$0$19233) (bitwise-arithmetic-shift . g$0$19232) (zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-map . g$0$19227) (vector-length . g$0$19226) (vector-for-each . g$0$19225) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol=? . g$0$19217) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-for-each . g$0$19206) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-valued? . g$0$19194) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (rational-valued? . g$0$19190) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (null? . g$0$19182) (not . g$0$19181) (negative? . g$0$19180) (nan? . g$0$19179) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer-valued? . g$0$19160) (integer->char . g$0$19159) (infinite? . g$0$19158) (inexact? . g$0$19157) (inexact . g$0$19156) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (finite? . g$0$19151) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (exact-integer-sqrt . g$0$19147) (exact . g$0$19146) (even? . g$0$19145) (error . g$0$19144) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (div0-and-mod0 . g$0$19139) (mod0 . g$0$19138) (div0 . g$0$19137) (div-and-mod . g$0$19136) (mod . g$0$19135) (div . g$0$19134) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call/cc . g$0$19120) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (boolean=? . g$0$19087) (atan . g$0$19086) (assertion-violation . g$0$19085) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (let*-values . g$0$19069) (trace-define . g$0$19068) (trace-lambda . g$0$19067) (unsyntax-splicing . g$0$19066) (unsyntax . g$0$19065) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (_ . g$0$19062) (else . g$0$19061) (=> . g$0$19060) (... . g$0$19059) (assert . g$0$19058) (endianness . g$0$19057) (delay . g$0$19056) (time . g$0$19055) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (identifier-syntax . g$0$19048) (with-syntax . g$0$19047) (quasisyntax . g$0$19046) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (include . g$0$19043) (define-record . g$0$19042) (let-values . g$0$19041) (case . g$0$19040) (parameterize . g$0$19039) (unless . g$0$19038) (when . g$0$19037) (if . g$0$19036) (letrec* . g$0$19035) (letrec . g$0$19034) (type-descriptor . g$0$19033) (case-lambda . g$0$19032) (lambda . g$0$19031) (syntax . g$0$19030) (syntax-case . g$0$19029) (quote . g$0$19028) (foreign-call . g$0$19027) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (import . g$0$19023) (begin . g$0$19022) (module . g$0$19021) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ((g$0$11500 core-prim . syntax-error) (g$0$11371 core-prim . syntax-dispatch) (g$0$19726 core-prim . pretty-print) (g$0$19725 core-prim . eval-core) (g$0$19724 core-prim . set-symbol-value!) (g$0$19723 core-prim . symbol-value) (g$0$19722 core-prim . gensym) (g$0$19721 core-prim . void) (g$0$19720 core-prim . load) (g$0$19719 core-prim . interaction-environment) (g$0$19718 core-prim . char-ready?) (g$0$19717 core-prim . string-upcase) (g$0$19716 core-prim . string-titlecase) (g$0$19715 core-prim . string-normalize-nfkd) (g$0$19714 core-prim . string-normalize-nfkc) (g$0$19713 core-prim . string-normalize-nfd) (g$0$19712 core-prim . string-normalize-nfc) (g$0$19711 core-prim . string-foldcase) (g$0$19710 core-prim . string-downcase) (g$0$19709 core-prim . string-ci>?) (g$0$19708 core-prim . string-ci>=?) (g$0$19707 core-prim . string-ci=?) (g$0$19706 core-prim . string-ci<?) (g$0$19705 core-prim . string-ci<=?) (g$0$19704 core-prim . char-whitespace?) (g$0$19703 core-prim . char-upper-case?) (g$0$19702 core-prim . char-title-case?) (g$0$19701 core-prim . char-numeric?) (g$0$19700 core-prim . char-lower-case?) (g$0$19699 core-prim . char-general-category) (g$0$19698 core-prim . char-upcase) (g$0$19697 core-prim . char-titlecase) (g$0$19696 core-prim . char-foldcase) (g$0$19695 core-prim . char-downcase) (g$0$19694 core-prim . char-ci>?) (g$0$19693 core-prim . char-ci>=?) (g$0$19692 core-prim . char-ci=?) (g$0$19691 core-prim . char-ci<?) (g$0$19690 core-prim . char-ci<=?) (g$0$19689 core-prim . char-alphabetic?) (g$0$11088 core-prim . make-variable-transformer) (g$0$11502 core-prim . identifier?) (g$0$11494 core-prim . generate-temporaries) (g$0$11496 core-prim . free-identifier=?) (g$0$11506 core-prim . syntax->datum) (g$0$11504 core-prim . datum->syntax) (g$0$11498 core-prim . bound-identifier=?) (g$0$19688 core-prim . record-type-descriptor?) (g$0$19687 core-prim . record-predicate) (g$0$19686 core-prim . record-mutator) (g$0$19685 core-prim . record-constructor) (g$0$19684 core-prim . record-accessor) (g$0$19683 core-prim . make-record-type-descriptor) (g$0$19682 core-prim . make-record-constructor-descriptor) (g$0$19681 core-prim . record?) (g$0$19680 core-prim . record-type-uid) (g$0$19679 core-prim . record-type-sealed?) (g$0$19678 core-prim . record-type-parent) (g$0$19677 core-prim . record-type-opaque?) (g$0$19676 core-prim . record-type-name) (g$0$19675 core-prim . record-type-generative?) (g$0$19674 core-prim . record-type-field-names) (g$0$19673 core-prim . record-rtd) (g$0$19672 core-prim . record-field-mutable?) (g$0$19671 core-prim . nongenerative) (g$0$19670 core-prim . sealed) (g$0$19669 core-prim . record-type-descriptor) (g$0$19668 core-prim . record-constructor-descriptor) (g$0$19667 core-prim . protocol) (g$0$19666 core-prim . parent-rtd) (g$0$19665 core-prim . parent) (g$0$19664 core-prim . opaque) (g$0$19663 core-prim . mutable) (g$0$19662 core-prim . immutable) (g$0$19661 core-prim . fields) (g$0$19660 core-prim . define-record-type) (g$0$19659 core-prim . delete-file) (g$0$19658 core-prim . file-exists?) (g$0$19657 core-prim . vector-sort!) (g$0$19656 core-prim . vector-sort) (g$0$19655 core-prim . list-sort) (g$0$19654 core-prim . symbol-hash) (g$0$19653 core-prim . string-ci-hash) (g$0$19652 core-prim . string-hash) (g$0$19651 core-prim . equal-hash) (g$0$19650 core-prim . hashtable-equivalence-function) (g$0$19649 core-prim . make-hashtable) (g$0$19648 core-prim . hashtable-hash-function) (g$0$19647 core-prim . make-eqv-hashtable) (g$0$19646 core-prim . make-eq-hashtable) (g$0$19645 core-prim . hashtable?) (g$0$19644 core-prim . hashtable-update!) (g$0$19643 core-prim . hashtable-size) (g$0$19642 core-prim . hashtable-set!) (g$0$19641 core-prim . hashtable-ref) (g$0$19640 core-prim . hashtable-mutable?) (g$0$19639 core-prim . hashtable-keys) (g$0$19638 core-prim . hashtable-entries) (g$0$19637 core-prim . hashtable-delete!) (g$0$19636 core-prim . hashtable-copy) (g$0$19635 core-prim . hashtable-contains?) (g$0$19634 core-prim . hashtable-clear!) (g$0$19633 core-prim . call-with-output-file) (g$0$19632 core-prim . call-with-input-file) (g$0$19631 core-prim . write-char) (g$0$19630 core-prim . write) (g$0$19629 core-prim . with-output-to-file) (g$0$19628 core-prim . with-input-from-file) (g$0$19627 core-prim . read-char) (g$0$19626 core-prim . read) (g$0$19625 core-prim . peek-char) (g$0$19624 core-prim . open-output-file) (g$0$19623 core-prim . open-input-file) (g$0$19622 core-prim . newline) (g$0$19621 core-prim . display) (g$0$19620 core-prim . close-output-port) (g$0$19619 core-prim . close-input-port) (g$0$19618 core-prim . eof-object?) (g$0$19617 core-prim . eof-object) (g$0$19616 core-prim . current-error-port) (g$0$19615 core-prim . current-output-port) (g$0$19614 core-prim . current-input-port) (g$0$19613 core-prim . output-port?) (g$0$19612 core-prim . input-port?) (g$0$19611 core-prim . utf-8-codec) (g$0$19610 core-prim . utf-16-codec) (g$0$19609 core-prim . transcoder-error-handling-mode) (g$0$19608 core-prim . transcoder-eol-style) (g$0$19607 core-prim . transcoder-codec) (g$0$19606 core-prim . transcoded-port) (g$0$19605 core-prim . textual-port?) (g$0$19604 core-prim . string->bytevector) (g$0$19603 core-prim . standard-output-port) (g$0$19602 core-prim . standard-input-port) (g$0$19601 core-prim . standard-error-port) (g$0$19600 core-prim . set-port-position!) (g$0$19599 core-prim . put-u8) (g$0$19598 core-prim . put-string) (g$0$19597 core-prim . put-datum) (g$0$19596 core-prim . put-char) (g$0$19595 core-prim . put-bytevector) (g$0$19594 core-prim . port?) (g$0$19593 core-prim . port-transcoder) (g$0$19592 core-prim . port-position) (g$0$19591 core-prim . port-has-set-port-position!?) (g$0$19590 core-prim . port-has-port-position?) (g$0$19589 core-prim . port-eof?) (g$0$19588 core-prim . output-port-buffer-mode) (g$0$19587 core-prim . open-string-output-port) (g$0$19586 core-prim . open-string-input-port) (g$0$19585 core-prim . open-file-output-port) (g$0$19584 core-prim . open-file-input/output-port) (g$0$19583 core-prim . open-file-input-port) (g$0$19582 core-prim . open-bytevector-output-port) (g$0$19581 core-prim . open-bytevector-input-port) (g$0$19580 core-prim . native-transcoder) (g$0$19579 core-prim . native-eol-style) (g$0$19578 core-prim . make-transcoder) (g$0$19577 core-prim . latin-1-codec) (g$0$19576 core-prim . make-i/o-write-error) (g$0$19575 core-prim . make-i/o-read-error) (g$0$19574 core-prim . make-i/o-port-error) (g$0$19573 core-prim . make-i/o-invalid-position-error) (g$0$19572 core-prim . make-i/o-filename-error) (g$0$19571 core-prim . make-i/o-file-protection-error) (g$0$19570 core-prim . make-i/o-file-is-read-only-error) (g$0$19569 core-prim . make-i/o-file-does-not-exist-error) (g$0$19568 core-prim . make-i/o-file-already-exists-error) (g$0$19567 core-prim . make-i/o-error) (g$0$19566 core-prim . make-i/o-encoding-error) (g$0$19565 core-prim . make-i/o-decoding-error) (g$0$19564 core-prim . make-custom-textual-output-port) (g$0$19563 core-prim . make-custom-textual-input/output-port) (g$0$19562 core-prim . make-custom-textual-input-port) (g$0$19561 core-prim . make-custom-binary-output-port) (g$0$19560 core-prim . make-custom-binary-input/output-port) (g$0$19559 core-prim . make-custom-binary-input-port) (g$0$19558 core-prim . make-bytevector) (g$0$19557 core-prim . lookahead-u8) (g$0$19556 core-prim . lookahead-char) (g$0$19555 core-prim . i/o-write-error?) (g$0$19554 core-prim . &i/o-write) (g$0$19553 core-prim . i/o-read-error?) (g$0$19552 core-prim . &i/o-read) (g$0$19551 core-prim . i/o-port-error?) (g$0$19550 core-prim . &i/o-port) (g$0$19549 core-prim . i/o-invalid-position-error?) (g$0$19548 core-prim . &i/o-invalid-position) (g$0$19547 core-prim . i/o-filename-error?) (g$0$19546 core-prim . &i/o-filename) (g$0$19545 core-prim . i/o-file-protection-error?) (g$0$19544 core-prim . &i/o-file-protection) (g$0$19543 core-prim . i/o-file-is-read-only-error?) (g$0$19542 core-prim . &i/o-file-is-read-only) (g$0$19541 core-prim . i/o-file-does-not-exist-error?) (g$0$19540 core-prim . &i/o-file-does-not-exist) (g$0$19539 core-prim . i/o-file-already-exists-error?) (g$0$19538 core-prim . &i/o-file-already-exists) (g$0$19537 core-prim . i/o-error?) (g$0$19536 core-prim . i/o-error-port) (g$0$19535 core-prim . i/o-error-filename) (g$0$19534 core-prim . i/o-encoding-error?) (g$0$19533 core-prim . i/o-encoding-error-char) (g$0$19532 core-prim . &i/o-encoding) (g$0$19531 core-prim . i/o-decoding-error?) (g$0$19530 core-prim . &i/o-decoding) (g$0$19529 core-prim . &i/o) (g$0$19528 core-prim . get-u8) (g$0$19527 core-prim . get-string-n!) (g$0$19526 core-prim . get-string-n) (g$0$19525 core-prim . get-string-all) (g$0$19524 core-prim . get-line) (g$0$19523 core-prim . get-datum) (g$0$19522 core-prim . get-char) (g$0$19521 core-prim . get-bytevector-some) (g$0$19520 core-prim . get-bytevector-n!) (g$0$19519 core-prim . get-bytevector-n) (g$0$19518 core-prim . get-bytevector-all) (g$0$19517 core-prim . flush-output-port) (g$0$19516 core-prim . file-options) (g$0$19515 core-prim . error-handling-mode) (g$0$19514 core-prim . eol-style) (g$0$19513 core-prim . close-port) (g$0$19512 core-prim . scheme-report-environment) (g$0$19511 core-prim . quotient) (g$0$11474 core-prim . null-environment) (g$0$19510 core-prim . remainder) (g$0$19509 core-prim . modulo) (g$0$19508 core-prim . inexact->exact) (g$0$19507 core-prim . force) (g$0$19506 core-prim . exact->inexact) (g$0$19505 core-prim . exit) (g$0$19504 core-prim . command-line) (g$0$19503 core-prim . string-fill!) (g$0$19502 core-prim . string-set!) (g$0$19501 core-prim . set-cdr!) (g$0$19500 core-prim . set-car!) (g$0$19499 core-prim . remove) (g$0$19498 core-prim . remv) (g$0$19497 core-prim . remp) (g$0$19496 core-prim . remq) (g$0$19495 core-prim . partition) (g$0$19494 core-prim . memv) (g$0$19493 core-prim . memq) (g$0$19492 core-prim . memp) (g$0$19491 core-prim . member) (g$0$19490 core-prim . exists) (g$0$19489 core-prim . for-all) (g$0$19488 core-prim . fold-right) (g$0$19487 core-prim . fold-left) (g$0$19486 core-prim . find) (g$0$19485 core-prim . filter) (g$0$19484 core-prim . cons*) (g$0$19483 core-prim . assv) (g$0$19482 core-prim . assq) (g$0$19481 core-prim . assp) (g$0$19480 core-prim . assoc) (g$0$19479 core-prim . call-with-string-output-port) (g$0$19478 core-prim . call-with-port) (g$0$19477 core-prim . call-with-bytevector-output-port) (g$0$19476 core-prim . bytevector->string) (g$0$19475 core-prim . buffer-mode?) (g$0$19474 core-prim . buffer-mode) (g$0$19473 core-prim . binary-port?) (g$0$19472 core-prim . guard) (g$0$19471 core-prim . with-exception-handler) (g$0$19470 core-prim . raise-continuable) (g$0$19469 core-prim . raise) (g$0$11480 core-prim . eval) (g$0$11472 core-prim . environment) (g$0$19468 core-prim . make-enumeration) (g$0$19467 core-prim . enum-set=?) (g$0$19466 core-prim . enum-set-universe) (g$0$19465 core-prim . enum-set-union) (g$0$19464 core-prim . enum-set-subset?) (g$0$19463 core-prim . enum-set-projection) (g$0$19462 core-prim . enum-set-member?) (g$0$19461 core-prim . enum-set-intersection) (g$0$19460 core-prim . enum-set-indexer) (g$0$19459 core-prim . enum-set-difference) (g$0$19458 core-prim . enum-set-constructor) (g$0$19457 core-prim . enum-set-complement) (g$0$19456 core-prim . enum-set->list) (g$0$19455 core-prim . define-enumeration) (g$0$19454 core-prim . who-condition?) (g$0$19453 core-prim . &who) (g$0$19452 core-prim . warning?) (g$0$19451 core-prim . &warning) (g$0$19450 core-prim . violation?) (g$0$19449 core-prim . &violation) (g$0$19448 core-prim . undefined-violation?) (g$0$19447 core-prim . &undefined) (g$0$19446 core-prim . syntax-violation?) (g$0$19445 core-prim . syntax-violation-subform) (g$0$19444 core-prim . syntax-violation-form) (g$0$19443 core-prim . syntax-violation) (g$0$19442 core-prim . &syntax) (g$0$19441 core-prim . simple-conditions) (g$0$19440 core-prim . serious-condition?) (g$0$19439 core-prim . &serious) (g$0$19438 core-prim . non-continuable-violation?) (g$0$19437 core-prim . &non-continuable) (g$0$19436 core-prim . message-condition?) (g$0$19435 core-prim . &message) (g$0$19434 core-prim . make-who-condition) (g$0$19433 core-prim . make-warning) (g$0$19432 core-prim . make-violation) (g$0$19431 core-prim . make-undefined-violation) (g$0$19430 core-prim . make-syntax-violation) (g$0$19429 core-prim . make-serious-condition) (g$0$19428 core-prim . make-non-continuable-violation) (g$0$19427 core-prim . make-message-condition) (g$0$19426 core-prim . make-lexical-violation) (g$0$19425 core-prim . make-irritants-condition) (g$0$19424 core-prim . make-implementation-restriction-violation) (g$0$19423 core-prim . make-error) (g$0$19422 core-prim . make-assertion-violation) (g$0$19421 core-prim . lexical-violation?) (g$0$19420 core-prim . &lexical) (g$0$19419 core-prim . irritants-condition?) (g$0$19418 core-prim . &irritants) (g$0$19417 core-prim . implementation-restriction-violation?) (g$0$19416 core-prim . &implementation-restriction) (g$0$19415 core-prim . error?) (g$0$19414 core-prim . &error) (g$0$19413 core-prim . define-condition-type) (g$0$19412 core-prim . condition-who) (g$0$19411 core-prim . condition-predicate) (g$0$19410 core-prim . condition-message) (g$0$19409 core-prim . condition-irritants) (g$0$19408 core-prim . condition-accessor) (g$0$19407 core-prim . condition) (g$0$19406 core-prim . &condition) (g$0$19405 core-prim . assertion-violation?) (g$0$19404 core-prim . &assertion) (g$0$19403 core-prim . condition?) (g$0$19402 core-prim . utf32->string) (g$0$19401 core-prim . utf16->string) (g$0$19400 core-prim . utf8->string) (g$0$19399 core-prim . uint-list->bytevector) (g$0$19398 core-prim . u8-list->bytevector) (g$0$19397 core-prim . string->utf8) (g$0$19396 core-prim . string->utf32) (g$0$19395 core-prim . string->utf16) (g$0$19394 core-prim . sint-list->bytevector) (g$0$19393 core-prim . native-endianness) (g$0$19392 core-prim . bytevector?) (g$0$19391 core-prim . bytevector=?) (g$0$19390 core-prim . bytevector-uint-set!) (g$0$19389 core-prim . bytevector-uint-ref) (g$0$19388 core-prim . bytevector-u8-set!) (g$0$19387 core-prim . bytevector-u8-ref) (g$0$19386 core-prim . bytevector-u64-set!) (g$0$19385 core-prim . bytevector-u64-ref) (g$0$19384 core-prim . bytevector-u64-native-set!) (g$0$19383 core-prim . bytevector-u64-native-ref) (g$0$19382 core-prim . bytevector-u32-set!) (g$0$19381 core-prim . bytevector-u32-ref) (g$0$19380 core-prim . bytevector-u32-native-set!) (g$0$19379 core-prim . bytevector-u32-native-ref) (g$0$19378 core-prim . bytevector-u16-set!) (g$0$19377 core-prim . bytevector-u16-ref) (g$0$19376 core-prim . bytevector-u16-native-set!) (g$0$19375 core-prim . bytevector-u16-native-ref) (g$0$19374 core-prim . bytevector-sint-set!) (g$0$19373 core-prim . bytevector-sint-ref) (g$0$19372 core-prim . bytevector-s8-set!) (g$0$19371 core-prim . bytevector-s8-ref) (g$0$19370 core-prim . bytevector-s64-set!) (g$0$19369 core-prim . bytevector-s64-ref) (g$0$19368 core-prim . bytevector-s64-native-set!) (g$0$19367 core-prim . bytevector-s64-native-ref) (g$0$19366 core-prim . bytevector-s32-set!) (g$0$19365 core-prim . bytevector-s32-ref) (g$0$19364 core-prim . bytevector-s32-native-set!) (g$0$19363 core-prim . bytevector-s32-native-ref) (g$0$19362 core-prim . bytevector-s16-set!) (g$0$19361 core-prim . bytevector-s16-ref) (g$0$19360 core-prim . bytevector-s16-native-set!) (g$0$19359 core-prim . bytevector-s16-native-ref) (g$0$19358 core-prim . bytevector-length) (g$0$19357 core-prim . bytevector-ieee-single-ref) (g$0$19356 core-prim . bytevector-ieee-single-native-set!) (g$0$19355 core-prim . bytevector-ieee-single-native-ref) (g$0$19354 core-prim . bytevector-ieee-double-ref) (g$0$19353 core-prim . bytevector-ieee-double-native-set!) (g$0$19352 core-prim . bytevector-ieee-double-native-ref) (g$0$19351 core-prim . bytevector-fill!) (g$0$19350 core-prim . bytevector-copy!) (g$0$19349 core-prim . bytevector-copy) (g$0$19348 core-prim . bytevector->uint-list) (g$0$19347 core-prim . bytevector->u8-list) (g$0$19346 core-prim . bytevector->sint-list) (g$0$19345 core-prim . no-nans-violation?) (g$0$19344 core-prim . &no-nans) (g$0$19343 core-prim . no-infinities-violation?) (g$0$19342 core-prim . &no-infinities) (g$0$19341 core-prim . make-no-nans-violation) (g$0$19340 core-prim . make-no-infinities-violation) (g$0$19339 core-prim . real->flonum) (g$0$19338 core-prim . flzero?) (g$0$19337 core-prim . fltruncate) (g$0$19336 core-prim . fltan) (g$0$19335 core-prim . flsqrt) (g$0$19334 core-prim . flsin) (g$0$19333 core-prim . flround) (g$0$19332 core-prim . flpositive?) (g$0$19331 core-prim . flonum?) (g$0$19330 core-prim . flodd?) (g$0$19329 core-prim . flnumerator) (g$0$19328 core-prim . flnegative?) (g$0$19327 core-prim . flnan?) (g$0$19326 core-prim . flmod0) (g$0$19325 core-prim . flmod) (g$0$19324 core-prim . flmin) (g$0$19323 core-prim . flmax) (g$0$19322 core-prim . fllog) (g$0$19321 core-prim . flinteger?) (g$0$19320 core-prim . flinfinite?) (g$0$19319 core-prim . flfloor) (g$0$19318 core-prim . flfinite?) (g$0$19317 core-prim . flexpt) (g$0$19316 core-prim . flexp) (g$0$19315 core-prim . fleven?) (g$0$19314 core-prim . fldiv0-and-mod0) (g$0$19313 core-prim . fldiv0) (g$0$19312 core-prim . fldiv-and-mod) (g$0$19311 core-prim . fldiv) (g$0$19310 core-prim . fldenominator) (g$0$19309 core-prim . flcos) (g$0$19308 core-prim . flceiling) (g$0$19307 core-prim . flatan) (g$0$19306 core-prim . flasin) (g$0$19305 core-prim . flacos) (g$0$19304 core-prim . flabs) (g$0$19303 core-prim . fl>?) (g$0$19302 core-prim . fl>=?) (g$0$19301 core-prim . fl=?) (g$0$19300 core-prim . fl<?) (g$0$19299 core-prim . fl<=?) (g$0$19298 core-prim . fl/) (g$0$19297 core-prim . fl-) (g$0$19296 core-prim . fl+) (g$0$19295 core-prim . fl*) (g$0$19294 core-prim . fixnum->flonum) (g$0$19293 core-prim . fxzero?) (g$0$19292 core-prim . fxxor) (g$0$19291 core-prim . fxrotate-bit-field) (g$0$19290 core-prim . fxreverse-bit-field) (g$0$19289 core-prim . fxpositive?) (g$0$19288 core-prim . fxodd?) (g$0$19287 core-prim . fxnot) (g$0$19286 core-prim . fxnegative?) (g$0$19285 core-prim . fxmod0) (g$0$19284 core-prim . fxmod) (g$0$19283 core-prim . fxmin) (g$0$19282 core-prim . fxmax) (g$0$19281 core-prim . fxlength) (g$0$19280 core-prim . fxior) (g$0$19279 core-prim . fxif) (g$0$19278 core-prim . fxfirst-bit-set) (g$0$19277 core-prim . fxeven?) (g$0$19276 core-prim . fxdiv0-and-mod0) (g$0$19275 core-prim . fxdiv0) (g$0$19274 core-prim . fxdiv-and-mod) (g$0$19273 core-prim . fxdiv) (g$0$19272 core-prim . fxcopy-bit-field) (g$0$19271 core-prim . fxcopy-bit) (g$0$19270 core-prim . fxbit-set?) (g$0$19269 core-prim . fxbit-field) (g$0$19268 core-prim . fxbit-count) (g$0$19267 core-prim . fxarithmetic-shift-right) (g$0$19266 core-prim . fxarithmetic-shift-left) (g$0$19265 core-prim . fxarithmetic-shift) (g$0$19264 core-prim . fxand) (g$0$19263 core-prim . fx>?) (g$0$19262 core-prim . fx>=?) (g$0$19261 core-prim . fx=?) (g$0$19260 core-prim . fx<?) (g$0$19259 core-prim . fx<=?) (g$0$19258 core-prim . fx-/carry) (g$0$19257 core-prim . fx-) (g$0$19256 core-prim . fx+/carry) (g$0$19255 core-prim . fx+) (g$0$19254 core-prim . fx*/carry) (g$0$19253 core-prim . fx*) (g$0$19252 core-prim . greatest-fixnum) (g$0$19251 core-prim . least-fixnum) (g$0$19250 core-prim . fixnum-width) (g$0$19249 core-prim . fixnum?) (g$0$19248 core-prim . bitwise-rotate-bit-field) (g$0$19247 core-prim . bitwise-reverse-bit-field) (g$0$19246 core-prim . bitwise-length) (g$0$19245 core-prim . bitwise-if) (g$0$19244 core-prim . bitwise-first-bit-set) (g$0$19243 core-prim . bitwise-copy-bit-field) (g$0$19242 core-prim . bitwise-copy-bit) (g$0$19241 core-prim . bitwise-bit-set?) (g$0$19240 core-prim . bitwise-bit-field) (g$0$19239 core-prim . bitwise-bit-count) (g$0$19238 core-prim . bitwise-xor) (g$0$19237 core-prim . bitwise-ior) (g$0$19236 core-prim . bitwise-and) (g$0$19235 core-prim . bitwise-not) (g$0$19234 core-prim . bitwise-arithmetic-shift-right) (g$0$19233 core-prim . bitwise-arithmetic-shift-left) (g$0$19232 core-prim . bitwise-arithmetic-shift) (g$0$19231 core-prim . zero?) (g$0$19230 core-prim . vector?) (g$0$19229 core-prim . vector-set!) (g$0$19228 core-prim . vector-ref) (g$0$19227 core-prim . vector-map) (g$0$19226 core-prim . vector-length) (g$0$19225 core-prim . vector-for-each) (g$0$19224 core-prim . vector-fill!) (g$0$19223 core-prim . vector->list) (g$0$19222 core-prim . vector) (g$0$19221 core-prim . values) (g$0$19220 core-prim . truncate) (g$0$19219 core-prim . tan) (g$0$19218 core-prim . symbol?) (g$0$19217 core-prim . symbol=?) (g$0$19216 core-prim . symbol->string) (g$0$19215 core-prim . substring) (g$0$19214 core-prim . string?) (g$0$19213 core-prim . string>?) (g$0$19212 core-prim . string>=?) (g$0$19211 core-prim . string=?) (g$0$19210 core-prim . string<?) (g$0$19209 core-prim . string<=?) (g$0$19208 core-prim . string-ref) (g$0$19207 core-prim . string-length) (g$0$19206 core-prim . string-for-each) (g$0$19205 core-prim . string-copy) (g$0$19204 core-prim . string-append) (g$0$19203 core-prim . string->symbol) (g$0$19202 core-prim . string->number) (g$0$19201 core-prim . string->list) (g$0$19200 core-prim . string) (g$0$19199 core-prim . sqrt) (g$0$19198 core-prim . sin) (g$0$19197 core-prim . round) (g$0$19196 core-prim . reverse) (g$0$19195 core-prim . real?) (g$0$19194 core-prim . real-valued?) (g$0$19193 core-prim . real-part) (g$0$19192 core-prim . rationalize) (g$0$19191 core-prim . rational?) (g$0$19190 core-prim . rational-valued?) (g$0$19189 core-prim . procedure?) (g$0$19188 core-prim . positive?) (g$0$19187 core-prim . pair?) (g$0$19186 core-prim . odd?) (g$0$19185 core-prim . numerator) (g$0$19184 core-prim . number?) (g$0$19183 core-prim . number->string) (g$0$19182 core-prim . null?) (g$0$19181 core-prim . not) (g$0$19180 core-prim . negative?) (g$0$19179 core-prim . nan?) (g$0$19178 core-prim . min) (g$0$19177 core-prim . max) (g$0$19176 core-prim . map) (g$0$19175 core-prim . make-vector) (g$0$19174 core-prim . make-string) (g$0$19173 core-prim . make-rectangular) (g$0$19172 core-prim . make-polar) (g$0$19171 core-prim . magnitude) (g$0$19170 core-prim . log) (g$0$19169 core-prim . list?) (g$0$19168 core-prim . list-tail) (g$0$19167 core-prim . list-ref) (g$0$19166 core-prim . list->vector) (g$0$19165 core-prim . list->string) (g$0$19164 core-prim . list) (g$0$19163 core-prim . length) (g$0$19162 core-prim . lcm) (g$0$19161 core-prim . integer?) (g$0$19160 core-prim . integer-valued?) (g$0$19159 core-prim . integer->char) (g$0$19158 core-prim . infinite?) (g$0$19157 core-prim . inexact?) (g$0$19156 core-prim . inexact) (g$0$19155 core-prim . imag-part) (g$0$19154 core-prim . gcd) (g$0$19153 core-prim . for-each) (g$0$19152 core-prim . floor) (g$0$19151 core-prim . finite?) (g$0$19150 core-prim . expt) (g$0$19149 core-prim . exp) (g$0$19148 core-prim . exact?) (g$0$19147 core-prim . exact-integer-sqrt) (g$0$19146 core-prim . exact) (g$0$19145 core-prim . even?) (g$0$19144 core-prim . error) (g$0$19143 core-prim . eqv?) (g$0$19142 core-prim . equal?) (g$0$19141 core-prim . eq?) (g$0$19140 core-prim . dynamic-wind) (g$0$19139 core-prim . div0-and-mod0) (g$0$19138 core-prim . mod0) (g$0$19137 core-prim . div0) (g$0$19136 core-prim . div-and-mod) (g$0$19135 core-prim . mod) (g$0$19134 core-prim . div) (g$0$19133 core-prim . denominator) (g$0$19132 core-prim . cos) (g$0$19131 core-prim . cons) (g$0$19130 core-prim . complex?) (g$0$19129 core-prim . char?) (g$0$19128 core-prim . char>?) (g$0$19127 core-prim . char>=?) (g$0$19126 core-prim . char=?) (g$0$19125 core-prim . char<?) (g$0$19124 core-prim . char<=?) (g$0$19123 core-prim . char->integer) (g$0$19122 core-prim . ceiling) (g$0$19121 core-prim . call-with-values) (g$0$19120 core-prim . call/cc) (g$0$19119 core-prim . call-with-current-continuation) (g$0$19118 core-prim . cddddr) (g$0$19117 core-prim . cdddar) (g$0$19116 core-prim . cddadr) (g$0$19115 core-prim . cddaar) (g$0$19114 core-prim . cdaddr) (g$0$19113 core-prim . cdadar) (g$0$19112 core-prim . cdaadr) (g$0$19111 core-prim . cdaaar) (g$0$19110 core-prim . cadddr) (g$0$19109 core-prim . caddar) (g$0$19108 core-prim . cadadr) (g$0$19107 core-prim . cadaar) (g$0$19106 core-prim . caaddr) (g$0$19105 core-prim . caadar) (g$0$19104 core-prim . caaadr) (g$0$19103 core-prim . caaaar) (g$0$19102 core-prim . cdddr) (g$0$19101 core-prim . cddar) (g$0$19100 core-prim . cdadr) (g$0$19099 core-prim . cdaar) (g$0$19098 core-prim . caddr) (g$0$19097 core-prim . cadar) (g$0$19096 core-prim . caadr) (g$0$19095 core-prim . caaar) (g$0$19094 core-prim . cddr) (g$0$19093 core-prim . cdar) (g$0$19092 core-prim . cadr) (g$0$19091 core-prim . caar) (g$0$19090 core-prim . cdr) (g$0$19089 core-prim . car) (g$0$19088 core-prim . boolean?) (g$0$19087 core-prim . boolean=?) (g$0$19086 core-prim . atan) (g$0$19085 core-prim . assertion-violation) (g$0$19084 core-prim . asin) (g$0$19083 core-prim . apply) (g$0$19082 core-prim . append) (g$0$19081 core-prim . angle) (g$0$19080 core-prim . acos) (g$0$19079 core-prim . abs) (g$0$19078 core-prim . /) (g$0$19077 core-prim . *) (g$0$19076 core-prim . -) (g$0$19075 core-prim . +) (g$0$19074 core-prim . >=) (g$0$19073 core-prim . >) (g$0$19072 core-prim . =) (g$0$19071 core-prim . <=) (g$0$19070 core-prim . <) (g$0$19069 core-prim . let*-values) (g$0$19068 macro . trace-define) (g$0$19067 macro . trace-lambda) (g$0$19066 macro . unsyntax-splicing) (g$0$19065 macro . unsyntax) (g$0$19064 macro . unquote-splicing) (g$0$19063 macro . unquote) (g$0$19062 macro . _) (g$0$19061 macro . else) (g$0$19060 macro . =>) (g$0$19059 macro . ...) (g$0$19058 macro . assert) (g$0$19057 macro . endianness) (g$0$19056 macro . delay) (g$0$19055 macro . time) (g$0$19054 macro . or) (g$0$19053 macro . and) (g$0$19052 macro . do) (g$0$19051 macro . cond) (g$0$19050 macro . let*) (g$0$19049 macro . let) (g$0$19048 macro . identifier-syntax) (g$0$19047 macro . with-syntax) (g$0$19046 macro . quasisyntax) (g$0$19045 macro . quasiquote) (g$0$19044 macro . syntax-rules) (g$0$19043 macro . include) (g$0$19042 macro . define-record) (g$0$19041 core-macro . let-values) (g$0$19040 core-macro . case) (g$0$19039 core-macro . parameterize) (g$0$19038 core-macro . unless) (g$0$19037 core-macro . when) (g$0$19036 core-macro . if) (g$0$19035 core-macro . letrec*) (g$0$19034 core-macro . letrec) (g$0$19033 core-macro . type-descriptor) (g$0$19032 core-macro . case-lambda) (g$0$19031 core-macro . lambda) (g$0$19030 core-macro . syntax) (g$0$19029 core-macro . syntax-case) (g$0$19028 core-macro . quote) (g$0$19027 core-macro . foreign-call) (g$0$19026 letrec-syntax) (g$0$19025 let-syntax) (g$0$19024 set!) (g$0$19023 import) (g$0$19022 begin) (g$0$19021 module) (g$0$19020 define-syntax) (g$0$19019 define))) values values (quote #f)) (g$0$10649 (quote g$0$19759) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$0$19726) (eval-core . g$0$19725) (set-symbol-value! . g$0$19724) (symbol-value . g$0$19723) (gensym . g$0$19722) (void . g$0$19721))) (quote ()) values values (quote #f)))


(begin (define g$0$19017 (quote #f)) ((lambda (g$0$19002) (begin (set! g$0$19002 (lambda (g$0$19010) ((lambda (g$0$19012) (g$0$18819 g$0$19012)) (with-input-from-file g$0$19010 (lambda () (letrec ((g$0$19014 (lambda () ((lambda (g$0$19016) (if (eof-object? g$0$19016) (quote ()) (cons g$0$19016 (g$0$19014)))) (read))))) (g$0$19014))))))) (begin (set! g$0$19017 g$0$19002) (display (quote "r6rs psyntax ready\n")) ((lambda (g$0$19004) (begin (if (= (length g$0$19004) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (g$0$19007 g$0$19008) (g$0$19002 (car g$0$19008))) (car g$0$19004) (cdr g$0$19004)))) (command-line)) (exit (quote 0))))) (quote #f)))


