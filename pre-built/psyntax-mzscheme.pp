;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define make-parameter$661$11224 (quote #f)) ((lambda (make-parameter$661$11009) (begin (set! make-parameter$661$11009 (lambda g$661$11220 ((lambda (g$661$11221) (if (= g$661$11221 (quote 1)) (apply (lambda (x$661$11206) (make-parameter$661$11009 x$661$11206 (lambda (x$661$11208) x$661$11208))) g$661$11220) (if (= g$661$11221 (quote 2)) (apply (lambda (x$661$11210 fender$661$11211) (begin (if (procedure? fender$661$11211) (void) (error (quote assert) (quote "~s failed") (quote (procedure? fender)))) ((lambda (x$661$11214) (lambda g$661$11218 ((lambda (g$661$11219) (if (= g$661$11219 (quote 0)) (apply (lambda () x$661$11214) g$661$11218) (if (= g$661$11219 (quote 1)) (apply (lambda (v$661$11216) (set! x$661$11214 (fender$661$11211 v$661$11216))) g$661$11218) (error (quote apply) (quote "invalid arg count"))))) (length g$661$11218)))) (fender$661$11211 x$661$11210)))) g$661$11220) (error (quote apply) (quote "invalid arg count"))))) (length g$661$11220)))) (set! make-parameter$661$11224 make-parameter$661$11009))) (quote #f)))


(begin (define current-primitive-locations$661$11302 (quote #f)) (define mutable?$661$11301 (quote #f)) (define rewriter$661$11300 (quote #f)) (define need-quote-hack?$661$11299 (quote #f)) (define expanded->core$661$11298 (quote #f)) (define compile-core-expr-to-port$661$11297 (quote #f)) ((lambda (current-primitive-locations$661$11226 mutable?$661$11228 rewriter$661$11230 need-quote-hack?$661$11232 expanded->core$661$11234 compile-core-expr-to-port$661$11236) (begin (set! current-primitive-locations$661$11226 (make-parameter$661$11224 (lambda (x$661$11238) (quote #f)) (lambda (p$661$11240) (begin (if (procedure? p$661$11240) (void) (error (quote assert) (quote "~s failed") (quote (procedure? p)))) p$661$11240)))) (set! mutable?$661$11228 (lambda (x$661$11242) ((lambda (simple?$661$11244) (begin (set! simple?$661$11244 (lambda (x$661$11246) ((lambda (t$661$11248) (if t$661$11248 t$661$11248 ((lambda (t$661$11250) (if t$661$11250 t$661$11250 ((lambda (t$661$11252) (if t$661$11252 t$661$11252 ((lambda (t$661$11254) (if t$661$11254 t$661$11254 (begin (quote #f) (number? x$661$11246)))) (boolean? x$661$11246)))) (symbol? x$661$11246)))) (char? x$661$11246)))) (null? x$661$11246)))) (not (simple?$661$11244 x$661$11242)))) (quote #f)))) (set! rewriter$661$11230 (lambda (quote-hack?$661$11256) ((lambda (f$661$11258) (begin (set! f$661$11258 (lambda (x$661$11260) (if (pair? x$661$11260) ((lambda (t$661$11262) (if (memv t$661$11262 (quote (quote))) (if (if quote-hack?$661$11256 (begin (quote #f) (mutable?$661$11228 (cadr x$661$11260))) (quote #f)) ((lambda (g$661$11287) (begin (set-symbol-value! g$661$11287 (cadr x$661$11260)) g$661$11287)) (gensym)) x$661$11260) (if (memv t$661$11262 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (x$661$11285) (cons (car x$661$11285) (map f$661$11258 (cdr x$661$11285)))) (cdr x$661$11260))) (if (memv t$661$11262 (quote (lambda))) (cons* (quote lambda) (cadr x$661$11260) (map f$661$11258 (cddr x$661$11260))) (if (memv t$661$11262 (quote (letrec))) ((lambda (bindings$661$11277 body*$661$11278) ((lambda (lhs*$661$11281 rhs*$661$11282) (cons* (quote letrec) (map list lhs*$661$11281 (map f$661$11258 rhs*$661$11282)) (map f$661$11258 body*$661$11278))) (map car bindings$661$11277) (map cadr bindings$661$11277))) (cadr x$661$11260) (cddr x$661$11260)) (if (memv t$661$11262 (quote (letrec*))) ((lambda (bindings$661$11269 body*$661$11270) ((lambda (lhs*$661$11273 rhs*$661$11274) (cons* (quote letrec*) (map list lhs*$661$11273 (map f$661$11258 rhs*$661$11274)) (map f$661$11258 body*$661$11270))) (map car bindings$661$11269) (map cadr bindings$661$11269))) (cadr x$661$11260) (cddr x$661$11260)) (if (memv t$661$11262 (quote (begin))) (cons (quote begin) (map f$661$11258 (cdr x$661$11260))) (if (memv t$661$11262 (quote (set!))) (list (quote set!) (cadr x$661$11260) (f$661$11258 (caddr x$661$11260))) (if (memv t$661$11262 (quote (primitive))) ((lambda (op$661$11263) ((lambda (t$661$11265) (if t$661$11265 ((lambda (loc$661$11267) loc$661$11267) t$661$11265) op$661$11263)) ((current-primitive-locations$661$11226) op$661$11263))) (cadr x$661$11260)) (if (memv t$661$11262 (quote (define))) x$661$11260 (if (list? x$661$11260) (map f$661$11258 x$661$11260) (error (quote rewrite) (quote "invalid form ~s ~s") x$661$11260 (list? x$661$11260))))))))))))) (car x$661$11260)) x$661$11260))) f$661$11258)) (quote #f)))) (set! need-quote-hack?$661$11232 ((lambda (x$661$11289) (not (eq? (eval-core (list (quote quote) x$661$11289)) (eval-core (list (quote quote) x$661$11289))))) (cons (quote 1) (quote 2)))) (set! expanded->core$661$11234 (lambda (x$661$11291) ((rewriter$661$11230 need-quote-hack?$661$11232) x$661$11291))) (set! compile-core-expr-to-port$661$11236 (lambda (x$661$11293 p$661$11294) (begin (pretty-print ((rewriter$661$11230 (quote #f)) x$661$11293) p$661$11294) (newline p$661$11294)))) (begin (set! compile-core-expr-to-port$661$11297 compile-core-expr-to-port$661$11236) (set! expanded->core$661$11298 expanded->core$661$11234) (set! need-quote-hack?$661$11299 need-quote-hack?$661$11232) (set! rewriter$661$11300 rewriter$661$11230) (set! mutable?$661$11301 mutable?$661$11228) (set! current-primitive-locations$661$11302 current-primitive-locations$661$11226)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define make-collection$661$11790 (quote #f)) (define current-library-collection$661$11789 (quote #f)) (define make-library$661$11788 (quote #f)) (define library?$661$11787 (quote #f)) (define library-id$661$11786 (quote #f)) (define library-name$661$11785 (quote #f)) (define library-ver$661$11784 (quote #f)) (define library-imp*$661$11783 (quote #f)) (define library-vis*$661$11782 (quote #f)) (define library-inv*$661$11781 (quote #f)) (define library-subst$661$11780 (quote #f)) (define library-env$661$11779 (quote #f)) (define library-visit-state$661$11778 (quote #f)) (define library-invoke-state$661$11777 (quote #f)) (define library-visible?$661$11776 (quote #f)) (define set-library-id!$661$11775 (quote #f)) (define set-library-name!$661$11774 (quote #f)) (define set-library-ver!$661$11773 (quote #f)) (define set-library-imp*!$661$11772 (quote #f)) (define set-library-vis*!$661$11771 (quote #f)) (define set-library-inv*!$661$11770 (quote #f)) (define set-library-subst!$661$11769 (quote #f)) (define set-library-env!$661$11768 (quote #f)) (define set-library-visit-state!$661$11767 (quote #f)) (define set-library-invoke-state!$661$11766 (quote #f)) (define set-library-visible?!$661$11765 (quote #f)) (define find-dependencies$661$11764 (quote #f)) (define find-library-by$661$11763 (quote #f)) (define library-path$661$11762 (quote #f)) (define library-name->file-name$661$11761 (quote #f)) (define file-locator$661$11760 (quote #f)) (define library-locator$661$11759 (quote #f)) (define current-library-expander$661$11758 (quote #f)) (define external-pending-libraries$661$11757 (quote #f)) (define find-external-library$661$11756 (quote #f)) (define find-library-by-name$661$11755 (quote #f)) (define library-exists?$661$11754 (quote #f)) (define find-library-by-spec/die$661$11753 (quote #f)) (define label->binding-table$661$11752 (quote #f)) (define install-library-record$661$11751 (quote #f)) (define install-library$661$11750 (quote #f)) (define extend-library-subst!$661$11749 (quote #f)) (define extend-library-env!$661$11748 (quote #f)) (define imported-label->binding$661$11747 (quote #f)) (define invoke-library$661$11746 (quote #f)) (define visit-library$661$11745 (quote #f)) (define invoke-library-by-spec$661$11744 (quote #f)) (define installed-libraries$661$11743 (quote #f)) (define library-spec$661$11742 (quote #f)) ((lambda (make-collection$661$11366 current-library-collection$661$11368 make-library$661$11371 library?$661$11373 library-id$661$11375 library-name$661$11377 library-ver$661$11379 library-imp*$661$11381 library-vis*$661$11383 library-inv*$661$11385 library-subst$661$11387 library-env$661$11389 library-visit-state$661$11391 library-invoke-state$661$11393 library-visible?$661$11395 set-library-id!$661$11397 set-library-name!$661$11399 set-library-ver!$661$11401 set-library-imp*!$661$11403 set-library-vis*!$661$11405 set-library-inv*!$661$11407 set-library-subst!$661$11409 set-library-env!$661$11411 set-library-visit-state!$661$11413 set-library-invoke-state!$661$11415 set-library-visible?!$661$11417 find-dependencies$661$11419 find-library-by$661$11421 library-path$661$11423 library-name->file-name$661$11425 file-locator$661$11427 library-locator$661$11429 current-library-expander$661$11431 external-pending-libraries$661$11433 find-external-library$661$11435 find-library-by-name$661$11437 library-exists?$661$11439 find-library-by-spec/die$661$11441 label->binding-table$661$11443 install-library-record$661$11445 install-library$661$11447 extend-library-subst!$661$11449 extend-library-env!$661$11451 imported-label->binding$661$11453 invoke-library$661$11455 visit-library$661$11457 invoke-library-by-spec$661$11459 installed-libraries$661$11461 library-spec$661$11463) (begin (set! make-collection$661$11366 (lambda () ((lambda (set$661$11465) ((lambda (set-cons$661$11467) (begin (set! set-cons$661$11467 (lambda (x$661$11469 ls$661$11470) (if (memq x$661$11469 ls$661$11470) ls$661$11470 (cons x$661$11469 ls$661$11470)))) (lambda g$661$11475 ((lambda (g$661$11476) (if (= g$661$11476 (quote 0)) (apply (lambda () set$661$11465) g$661$11475) (if (= g$661$11476 (quote 1)) (apply (lambda (x$661$11473) (set! set$661$11465 (set-cons$661$11467 x$661$11473 set$661$11465))) g$661$11475) (error (quote apply) (quote "invalid arg count"))))) (length g$661$11475))))) (quote #f))) (quote ())))) (set! current-library-collection$661$11368 (make-parameter$661$11224 (make-collection$661$11366) (lambda (x$661$11477) (begin (if (procedure? x$661$11477) (void) (error (quote current-library-collection) (quote "~s is not a procedure") x$661$11477)) x$661$11477)))) (set! make-library$661$11371 (lambda (id$661$11479 name$661$11480 ver$661$11481 imp*$661$11482 vis*$661$11483 inv*$661$11484 subst$661$11485 env$661$11486 visit-state$661$11487 invoke-state$661$11488 visible?$661$11489) (vector (quote g$661$11370) id$661$11479 name$661$11480 ver$661$11481 imp*$661$11482 vis*$661$11483 inv*$661$11484 subst$661$11485 env$661$11486 visit-state$661$11487 invoke-state$661$11488 visible?$661$11489))) (set! library?$661$11373 (lambda (x$661$11501) (if (vector? x$661$11501) (if (= (vector-length x$661$11501) (+ (quote 1) (length (quote (id name ver imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref x$661$11501 (quote 0)) (quote g$661$11370))) (quote #f)) (quote #f)))) (set! library-id$661$11375 (lambda (x$661$11503) (if (library?$661$11373 x$661$11503) (vector-ref x$661$11503 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") x$661$11503 (quote library))))) (set! library-name$661$11377 (lambda (x$661$11505) (if (library?$661$11373 x$661$11505) (vector-ref x$661$11505 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") x$661$11505 (quote library))))) (set! library-ver$661$11379 (lambda (x$661$11507) (if (library?$661$11373 x$661$11507) (vector-ref x$661$11507 (quote 3)) (error (quote library-ver) (quote "~s is not of type ~s") x$661$11507 (quote library))))) (set! library-imp*$661$11381 (lambda (x$661$11509) (if (library?$661$11373 x$661$11509) (vector-ref x$661$11509 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") x$661$11509 (quote library))))) (set! library-vis*$661$11383 (lambda (x$661$11511) (if (library?$661$11373 x$661$11511) (vector-ref x$661$11511 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") x$661$11511 (quote library))))) (set! library-inv*$661$11385 (lambda (x$661$11513) (if (library?$661$11373 x$661$11513) (vector-ref x$661$11513 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") x$661$11513 (quote library))))) (set! library-subst$661$11387 (lambda (x$661$11515) (if (library?$661$11373 x$661$11515) (vector-ref x$661$11515 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") x$661$11515 (quote library))))) (set! library-env$661$11389 (lambda (x$661$11517) (if (library?$661$11373 x$661$11517) (vector-ref x$661$11517 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") x$661$11517 (quote library))))) (set! library-visit-state$661$11391 (lambda (x$661$11519) (if (library?$661$11373 x$661$11519) (vector-ref x$661$11519 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") x$661$11519 (quote library))))) (set! library-invoke-state$661$11393 (lambda (x$661$11521) (if (library?$661$11373 x$661$11521) (vector-ref x$661$11521 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") x$661$11521 (quote library))))) (set! library-visible?$661$11395 (lambda (x$661$11523) (if (library?$661$11373 x$661$11523) (vector-ref x$661$11523 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") x$661$11523 (quote library))))) (set! set-library-id!$661$11397 (lambda (x$661$11525 v$661$11526) (if (library?$661$11373 x$661$11525) (vector-set! x$661$11525 (quote 1) v$661$11526) (error (quote set-library-id!) (quote "~s is not of type ~s") x$661$11525 (quote library))))) (set! set-library-name!$661$11399 (lambda (x$661$11529 v$661$11530) (if (library?$661$11373 x$661$11529) (vector-set! x$661$11529 (quote 2) v$661$11530) (error (quote set-library-name!) (quote "~s is not of type ~s") x$661$11529 (quote library))))) (set! set-library-ver!$661$11401 (lambda (x$661$11533 v$661$11534) (if (library?$661$11373 x$661$11533) (vector-set! x$661$11533 (quote 3) v$661$11534) (error (quote set-library-ver!) (quote "~s is not of type ~s") x$661$11533 (quote library))))) (set! set-library-imp*!$661$11403 (lambda (x$661$11537 v$661$11538) (if (library?$661$11373 x$661$11537) (vector-set! x$661$11537 (quote 4) v$661$11538) (error (quote set-library-imp*!) (quote "~s is not of type ~s") x$661$11537 (quote library))))) (set! set-library-vis*!$661$11405 (lambda (x$661$11541 v$661$11542) (if (library?$661$11373 x$661$11541) (vector-set! x$661$11541 (quote 5) v$661$11542) (error (quote set-library-vis*!) (quote "~s is not of type ~s") x$661$11541 (quote library))))) (set! set-library-inv*!$661$11407 (lambda (x$661$11545 v$661$11546) (if (library?$661$11373 x$661$11545) (vector-set! x$661$11545 (quote 6) v$661$11546) (error (quote set-library-inv*!) (quote "~s is not of type ~s") x$661$11545 (quote library))))) (set! set-library-subst!$661$11409 (lambda (x$661$11549 v$661$11550) (if (library?$661$11373 x$661$11549) (vector-set! x$661$11549 (quote 7) v$661$11550) (error (quote set-library-subst!) (quote "~s is not of type ~s") x$661$11549 (quote library))))) (set! set-library-env!$661$11411 (lambda (x$661$11553 v$661$11554) (if (library?$661$11373 x$661$11553) (vector-set! x$661$11553 (quote 8) v$661$11554) (error (quote set-library-env!) (quote "~s is not of type ~s") x$661$11553 (quote library))))) (set! set-library-visit-state!$661$11413 (lambda (x$661$11557 v$661$11558) (if (library?$661$11373 x$661$11557) (vector-set! x$661$11557 (quote 9) v$661$11558) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") x$661$11557 (quote library))))) (set! set-library-invoke-state!$661$11415 (lambda (x$661$11561 v$661$11562) (if (library?$661$11373 x$661$11561) (vector-set! x$661$11561 (quote 10) v$661$11562) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") x$661$11561 (quote library))))) (set! set-library-visible?!$661$11417 (lambda (x$661$11565 v$661$11566) (if (library?$661$11373 x$661$11565) (vector-set! x$661$11565 (quote 11) v$661$11566) (error (quote set-library-visible?!) (quote "~s is not of type ~s") x$661$11565 (quote library))))) (set! find-dependencies$661$11419 (lambda (ls$661$11569) (if (null? ls$661$11569) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! find-library-by$661$11421 (lambda (pred$661$11571) (letrec ((f$661$11573 (lambda (ls$661$11575) (if (null? ls$661$11575) (quote #f) (if (pred$661$11571 (car ls$661$11575)) (car ls$661$11575) (f$661$11573 (cdr ls$661$11575))))))) (f$661$11573 ((current-library-collection$661$11368)))))) (set! library-path$661$11423 (make-parameter$661$11224 (quote (".")) (lambda (x$661$11577) (if (if (list? x$661$11577) (begin (quote #f) (for-all string? x$661$11577)) (quote #f)) (map (lambda (x$661$11579) x$661$11579) x$661$11577) (error (quote library-path) (quote "~s is not a list of strings") x$661$11577))))) (set! library-name->file-name$661$11425 (lambda (x$661$11581) (call-with-values (lambda () (open-string-output-port)) (lambda (p$661$11583 extract$661$11584) ((lambda (display-hex$661$11587) (begin (set! display-hex$661$11587 (lambda (n$661$11589) (if (<= (quote 0) n$661$11589 (quote 9)) (display n$661$11589 p$661$11583) (display (integer->char (+ (char->integer (quote #\A)) (- n$661$11589 (quote 10)))) p$661$11583)))) (begin (letrec ((f$661$11591 (lambda (ls$661$11593) (if (null? ls$661$11593) (display (quote ".ss") p$661$11583) (begin (display (quote "/") p$661$11583) (for-each (lambda (c$661$11595) (if ((lambda (t$661$11597) (if t$661$11597 t$661$11597 ((lambda (t$661$11599) (if t$661$11599 t$661$11599 ((lambda (t$661$11601) (if t$661$11601 t$661$11601 (begin (quote #f) (memv c$661$11595 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) c$661$11595 (quote #\9))))) (char<=? (quote #\A) c$661$11595 (quote #\Z))))) (char<=? (quote #\a) c$661$11595 (quote #\z))) (display c$661$11595 p$661$11583) (begin (display (quote "%") p$661$11583) ((lambda (n$661$11603) (begin (display-hex$661$11587 (quotient n$661$11603 (quote 16))) (display-hex$661$11587 (remainder n$661$11603 (quote 16))))) (char->integer c$661$11595))))) (string->list (symbol->string (car ls$661$11593)))) (f$661$11591 (cdr ls$661$11593))))))) (f$661$11591 x$661$11581)) (extract$661$11584)))) (quote #f)))))) (set! file-locator$661$11427 (make-parameter$661$11224 (lambda (x$661$11605) ((lambda (str$661$11607) (letrec ((f$661$11609 (lambda (ls$661$11611) (if (pair? ls$661$11611) (begin (quote #f) ((lambda (name$661$11613) (if (file-exists? name$661$11613) name$661$11613 (f$661$11609 (cdr ls$661$11611)))) (string-append (car ls$661$11611) str$661$11607))) (quote #f))))) (f$661$11609 (library-path$661$11423)))) (library-name->file-name$661$11425 x$661$11605))) (lambda (f$661$11615) (if (procedure? f$661$11615) f$661$11615 (error (quote file-locator) (quote "~s is not a procedure") f$661$11615))))) (set! library-locator$661$11429 (make-parameter$661$11224 (lambda (x$661$11617) ((lambda (file-name$661$11619) (if (string? file-name$661$11619) (begin (quote #f) (with-input-from-file file-name$661$11619 read)) (quote #f))) ((file-locator$661$11427) x$661$11617))) (lambda (f$661$11621) (if (procedure? f$661$11621) f$661$11621 (error (quote library-locator) (quote "~s is not a procedure") f$661$11621))))) (set! current-library-expander$661$11431 (make-parameter$661$11224 (lambda (x$661$11623) (error (quote library-expander) (quote "not initialized"))) (lambda (f$661$11625) (if (procedure? f$661$11625) f$661$11625 (error (quote library-expander) (quote "~s is not a procedure") f$661$11625))))) (set! external-pending-libraries$661$11433 (make-parameter$661$11224 (quote ()))) (set! find-external-library$661$11435 (lambda (name$661$11627) (begin (if (member name$661$11627 (external-pending-libraries$661$11433)) (error (quote #f) (quote "circular attempt to import library ~s detected") name$661$11627) (void)) ((lambda (t$661$11631 t$661$11632) ((lambda (swap$661$11635) (dynamic-wind swap$661$11635 (lambda () ((lambda (lib-expr$661$11637) (begin (if lib-expr$661$11637 (void) (error (quote #f) (quote "cannot find library ~s") name$661$11627)) ((current-library-expander$661$11431) lib-expr$661$11637) ((lambda (t$661$11639) (if t$661$11639 t$661$11639 (begin (quote #f) (error (quote #f) (quote "handling external library of ~s did not yield the currect library") name$661$11627)))) (find-library-by$661$11421 (lambda (x$661$11641) (equal? (library-name$661$11377 x$661$11641) name$661$11627)))))) ((library-locator$661$11429) name$661$11627))) swap$661$11635)) (lambda () ((lambda (t$661$11643) (begin (t$661$11631 t$661$11632) (set! t$661$11632 t$661$11643))) (t$661$11631))))) external-pending-libraries$661$11433 (cons name$661$11627 (external-pending-libraries$661$11433)))))) (set! find-library-by-name$661$11437 (lambda (name$661$11645) ((lambda (t$661$11647) (if t$661$11647 t$661$11647 (begin (quote #f) (find-external-library$661$11435 name$661$11645)))) (find-library-by$661$11421 (lambda (x$661$11649) (equal? (library-name$661$11377 x$661$11649) name$661$11645)))))) (set! library-exists?$661$11439 (lambda (name$661$11651) (if (find-library-by$661$11421 (lambda (x$661$11653) (equal? (library-name$661$11377 x$661$11653) name$661$11651))) (begin (quote #f) (quote #t)) (quote #f)))) (set! find-library-by-spec/die$661$11441 (lambda (spec$661$11655) ((lambda (id$661$11657) ((lambda (t$661$11659) (if t$661$11659 t$661$11659 (begin (quote #f) (error (quote #f) (quote "cannot find library with spec ~s") spec$661$11655)))) (find-library-by$661$11421 (lambda (x$661$11661) (eq? id$661$11657 (library-id$661$11375 x$661$11661)))))) (car spec$661$11655)))) (set! label->binding-table$661$11443 (make-eq-hashtable)) (set! install-library-record$661$11445 (lambda (lib$661$11663) (begin ((lambda (exp-env$661$11665) (for-each (lambda (x$661$11667) ((lambda (label$661$11669 binding$661$11670) ((lambda (binding$661$11673) (hashtable-set! label->binding-table$661$11443 label$661$11669 binding$661$11673)) ((lambda (t$661$11675) (if (memv t$661$11675 (quote (global))) (cons (quote global) (cons lib$661$11663 (cdr binding$661$11670))) (if (memv t$661$11675 (quote (global-macro))) (cons (quote global-macro) (cons lib$661$11663 (cdr binding$661$11670))) (if (memv t$661$11675 (quote (global-macro!))) (cons (quote global-macro!) (cons lib$661$11663 (cdr binding$661$11670))) binding$661$11670)))) (car binding$661$11670)))) (car x$661$11667) (cdr x$661$11667))) exp-env$661$11665)) (library-env$661$11389 lib$661$11663)) ((current-library-collection$661$11368) lib$661$11663)))) (set! install-library$661$11447 (lambda (id$661$11676 name$661$11677 ver$661$11678 imp*$661$11679 vis*$661$11680 inv*$661$11681 exp-subst$661$11682 exp-env$661$11683 visit-code$661$11684 invoke-code$661$11685 visible?$661$11686) ((lambda (imp-lib*$661$11698 vis-lib*$661$11699 inv-lib*$661$11700) (begin (if (if (symbol? id$661$11676) (if (list? name$661$11677) (begin (quote #f) (list? ver$661$11678)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec ~s ~s ~s") id$661$11676 name$661$11677 ver$661$11678)) (if (library-exists?$661$11439 name$661$11677) (error (quote install-library) (quote "~s is already installed") name$661$11677) (void)) ((lambda (lib$661$11704) (install-library-record$661$11445 lib$661$11704)) (make-library$661$11371 id$661$11676 name$661$11677 ver$661$11678 imp-lib*$661$11698 vis-lib*$661$11699 inv-lib*$661$11700 exp-subst$661$11682 exp-env$661$11683 visit-code$661$11684 invoke-code$661$11685 visible?$661$11686)))) (map find-library-by-spec/die$661$11441 imp*$661$11679) (map find-library-by-spec/die$661$11441 vis*$661$11680) (map find-library-by-spec/die$661$11441 inv*$661$11681)))) (set! extend-library-subst!$661$11449 (lambda (lib$661$11706 sym$661$11707 label$661$11708) (set-library-subst!$661$11409 lib$661$11706 (cons (cons sym$661$11707 label$661$11708) (library-subst$661$11387 lib$661$11706))))) (set! extend-library-env!$661$11451 (lambda (lib$661$11712 label$661$11713 binding$661$11714) (begin (set-library-env!$661$11411 lib$661$11712 (cons (cons label$661$11713 binding$661$11714) (library-env$661$11389 lib$661$11712))) (hashtable-set! label->binding-table$661$11443 label$661$11713 binding$661$11714)))) (set! imported-label->binding$661$11453 (lambda (lab$661$11718) (hashtable-ref label->binding-table$661$11443 lab$661$11718 (quote #f)))) (set! invoke-library$661$11455 (lambda (lib$661$11720) ((lambda (invoke$661$11722) (if (procedure? invoke$661$11722) (begin (set-library-invoke-state!$661$11415 lib$661$11720 (lambda () (error (quote invoke) (quote "circularity detected for ~s") lib$661$11720))) (for-each invoke-library$661$11455 (library-inv*$661$11385 lib$661$11720)) (set-library-invoke-state!$661$11415 lib$661$11720 (lambda () (error (quote invoke) (quote "first invoke did not return for ~s") lib$661$11720))) (invoke$661$11722) (set-library-invoke-state!$661$11415 lib$661$11720 (quote #t))) (void))) (library-invoke-state$661$11393 lib$661$11720)))) (set! visit-library$661$11457 (lambda (lib$661$11724) ((lambda (visit$661$11726) (if (procedure? visit$661$11726) (begin (set-library-visit-state!$661$11413 lib$661$11724 (lambda () (error (quote visit) (quote "circularity detected for ~s") lib$661$11724))) (for-each invoke-library$661$11455 (library-vis*$661$11383 lib$661$11724)) (set-library-visit-state!$661$11413 lib$661$11724 (lambda () (error (quote invoke) (quote "first visit did not return for ~s") lib$661$11724))) (visit$661$11726) (set-library-visit-state!$661$11413 lib$661$11724 (quote #t))) (void))) (library-visit-state$661$11391 lib$661$11724)))) (set! invoke-library-by-spec$661$11459 (lambda (spec$661$11728) (invoke-library$661$11455 (find-library-by-spec/die$661$11441 spec$661$11728)))) (set! installed-libraries$661$11461 (lambda g$661$11738 ((lambda (g$661$11739) (if (= g$661$11739 (quote 1)) (apply (lambda (all?$661$11730) (letrec ((f$661$11732 (lambda (ls$661$11734) (if (null? ls$661$11734) (quote ()) (if ((lambda (t$661$11736) (if t$661$11736 t$661$11736 (begin (quote #f) (library-visible?$661$11395 (car ls$661$11734))))) all?$661$11730) (cons (car ls$661$11734) (f$661$11732 (cdr ls$661$11734))) (f$661$11732 (cdr ls$661$11734))))))) (f$661$11732 ((current-library-collection$661$11368))))) g$661$11738) (if (= g$661$11739 (quote 0)) (apply (lambda () (installed-libraries$661$11461 (quote #f))) g$661$11738) (error (quote apply) (quote "invalid arg count"))))) (length g$661$11738)))) (set! library-spec$661$11463 (lambda (x$661$11740) (begin (if (library?$661$11373 x$661$11740) (void) (error (quote library-spec) (quote "~s is not a library") x$661$11740)) (list (library-id$661$11375 x$661$11740) (library-name$661$11377 x$661$11740) (library-ver$661$11379 x$661$11740))))) (begin (set! library-spec$661$11742 library-spec$661$11463) (set! installed-libraries$661$11743 installed-libraries$661$11461) (set! invoke-library-by-spec$661$11744 invoke-library-by-spec$661$11459) (set! visit-library$661$11745 visit-library$661$11457) (set! invoke-library$661$11746 invoke-library$661$11455) (set! imported-label->binding$661$11747 imported-label->binding$661$11453) (set! extend-library-env!$661$11748 extend-library-env!$661$11451) (set! extend-library-subst!$661$11749 extend-library-subst!$661$11449) (set! install-library$661$11750 install-library$661$11447) (set! install-library-record$661$11751 install-library-record$661$11445) (set! label->binding-table$661$11752 label->binding-table$661$11443) (set! find-library-by-spec/die$661$11753 find-library-by-spec/die$661$11441) (set! library-exists?$661$11754 library-exists?$661$11439) (set! find-library-by-name$661$11755 find-library-by-name$661$11437) (set! find-external-library$661$11756 find-external-library$661$11435) (set! external-pending-libraries$661$11757 external-pending-libraries$661$11433) (set! current-library-expander$661$11758 current-library-expander$661$11431) (set! library-locator$661$11759 library-locator$661$11429) (set! file-locator$661$11760 file-locator$661$11427) (set! library-name->file-name$661$11761 library-name->file-name$661$11425) (set! library-path$661$11762 library-path$661$11423) (set! find-library-by$661$11763 find-library-by$661$11421) (set! find-dependencies$661$11764 find-dependencies$661$11419) (set! set-library-visible?!$661$11765 set-library-visible?!$661$11417) (set! set-library-invoke-state!$661$11766 set-library-invoke-state!$661$11415) (set! set-library-visit-state!$661$11767 set-library-visit-state!$661$11413) (set! set-library-env!$661$11768 set-library-env!$661$11411) (set! set-library-subst!$661$11769 set-library-subst!$661$11409) (set! set-library-inv*!$661$11770 set-library-inv*!$661$11407) (set! set-library-vis*!$661$11771 set-library-vis*!$661$11405) (set! set-library-imp*!$661$11772 set-library-imp*!$661$11403) (set! set-library-ver!$661$11773 set-library-ver!$661$11401) (set! set-library-name!$661$11774 set-library-name!$661$11399) (set! set-library-id!$661$11775 set-library-id!$661$11397) (set! library-visible?$661$11776 library-visible?$661$11395) (set! library-invoke-state$661$11777 library-invoke-state$661$11393) (set! library-visit-state$661$11778 library-visit-state$661$11391) (set! library-env$661$11779 library-env$661$11389) (set! library-subst$661$11780 library-subst$661$11387) (set! library-inv*$661$11781 library-inv*$661$11385) (set! library-vis*$661$11782 library-vis*$661$11383) (set! library-imp*$661$11783 library-imp*$661$11381) (set! library-ver$661$11784 library-ver$661$11379) (set! library-name$661$11785 library-name$661$11377) (set! library-id$661$11786 library-id$661$11375) (set! library?$661$11787 library?$661$11373) (set! make-library$661$11788 make-library$661$11371) (set! current-library-collection$661$11789 current-library-collection$661$11368) (set! make-collection$661$11790 make-collection$661$11366)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define build-global-define$661$12105 (quote #f)) (define build-lambda$661$12097 (quote #f)) (define build-case-lambda$661$12096 (quote #f)) (define build-let$661$12095 (quote #f)) (define build-sequence$661$12091 (quote #f)) (define build-void$661$12090 (quote #f)) (define build-letrec$661$12089 (quote #f)) (define build-letrec*$661$12088 (quote #f)) ((lambda (build-global-define$661$11792 build-lambda$661$11910 build-case-lambda$661$11912 build-let$661$11914 build-sequence$661$11978 build-void$661$11980 build-letrec$661$11982 build-letrec*$661$11984) (begin (set! build-global-define$661$11792 (lambda (x$661$11986) (cons (quote define) (cons x$661$11986 (quote ((quote #f))))))) (set! build-lambda$661$11910 (lambda (ae$661$11988 vars$661$11989 exp$661$11990) (list (quote lambda) vars$661$11989 exp$661$11990))) (set! build-case-lambda$661$11912 (lambda (ae$661$11994 vars*$661$11995 exp*$661$11996) ((lambda (build-error$661$12000 build-pred$661$12002 build-apply$661$12004 expand-case-lambda$661$12006) (begin (set! build-error$661$12000 (lambda (ae$661$12048) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! build-pred$661$12002 (lambda (ae$661$12032 n$661$12033 vars$661$12034) (call-with-values (lambda () (letrec ((f$661$12038 (lambda (vars$661$12040 count$661$12041) (if (pair? vars$661$12040) (f$661$12038 (cdr vars$661$12040) (+ count$661$12041 (quote 1))) (if (null? vars$661$12040) (values count$661$12041 (quote =)) (values count$661$12041 (quote >=))))))) (f$661$12038 vars$661$12034 (quote 0)))) (lambda (count$661$12044 pred$661$12045) (list (list (quote primitive) pred$661$12045) n$661$12033 (list (quote quote) count$661$12044)))))) (set! build-apply$661$12004 (lambda (ae$661$12024 g$661$12025 vars$661$12026 exp$661$12027) (list (quote (primitive apply)) (build-lambda$661$11910 ae$661$12024 vars$661$12026 exp$661$12027) g$661$12025))) (set! expand-case-lambda$661$12006 (lambda (ae$661$12008 vars$661$12009 exp*$661$12010) ((lambda (g$661$12014 n$661$12015) (list (quote lambda) g$661$12014 (build-let$661$11914 ae$661$12008 (list n$661$12015) (list (list (quote (primitive length)) g$661$12014)) (letrec ((f$661$12018 (lambda (vars*$661$12020 exp*$661$12021) (if (null? vars*$661$12020) (build-error$661$12000 ae$661$12008) (list (quote if) (build-pred$661$12002 ae$661$12008 n$661$12015 (car vars*$661$12020)) (build-apply$661$12004 ae$661$12008 g$661$12014 (car vars*$661$12020) (car exp*$661$12021)) (f$661$12018 (cdr vars*$661$12020) (cdr exp*$661$12021))))))) (f$661$12018 vars*$661$11995 exp*$661$12010))))) (gensym) (gensym)))) (if (= (length exp*$661$11996) (quote 1)) (build-lambda$661$11910 ae$661$11994 (car vars*$661$11995) (car exp*$661$11996)) (expand-case-lambda$661$12006 ae$661$11994 vars*$661$11995 exp*$661$11996)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! build-let$661$11914 (lambda (ae$661$12050 lhs*$661$12051 rhs*$661$12052 body$661$12053) (cons (build-lambda$661$11910 ae$661$12050 lhs*$661$12051 body$661$12053) rhs*$661$12052))) (set! build-sequence$661$11978 (lambda (ae$661$12058 exps$661$12059) (letrec ((loop$661$12062 (lambda (exps$661$12064) (if (null? (cdr exps$661$12064)) (car exps$661$12064) (if (equal? (car exps$661$12064) (build-void$661$11980)) (loop$661$12062 (cdr exps$661$12064)) (cons (quote begin) exps$661$12064)))))) (loop$661$12062 exps$661$12059)))) (set! build-void$661$11980 (lambda () (quote ((primitive void))))) (set! build-letrec$661$11982 (lambda (ae$661$12066 vars$661$12067 val-exps$661$12068 body-exp$661$12069) (if (null? vars$661$12067) body-exp$661$12069 (list (quote letrec) (map list vars$661$12067 val-exps$661$12068) body-exp$661$12069)))) (set! build-letrec*$661$11984 (lambda (ae$661$12074 vars$661$12075 val-exps$661$12076 body-exp$661$12077) (if (null? vars$661$12075) body-exp$661$12077 (build-let$661$11914 ae$661$12074 vars$661$12075 (map (lambda (x$661$12082) (list (quote quote) (quote #f))) vars$661$12075) (build-sequence$661$11978 ae$661$12074 (append (map (lambda (lhs$661$12084 rhs$661$12085) (list (quote set!) lhs$661$12084 rhs$661$12085)) vars$661$12075 val-exps$661$12076) (list body-exp$661$12077))))))) (begin (set! build-letrec*$661$12088 build-letrec*$661$11984) (set! build-letrec$661$12089 build-letrec$661$11982) (set! build-void$661$12090 build-void$661$11980) (set! build-sequence$661$12091 build-sequence$661$11978) (set! build-let$661$12095 build-let$661$11914) (set! build-case-lambda$661$12096 build-case-lambda$661$11912) (set! build-lambda$661$12097 build-lambda$661$11910) (set! build-global-define$661$12105 build-global-define$661$11792)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define set-cons$661$20357 (quote #f)) (define set-union$661$20356 (quote #f)) (define top-mark*$661$20354 (quote #f)) (define top-marked?$661$20353 (quote #f)) (define gen-lexical$661$20352 (quote #f)) (define gen-global$661$20351 (quote #f)) (define gen-label$661$20350 (quote #f)) (define make-rib$661$20349 (quote #f)) (define rib?$661$20348 (quote #f)) (define rib-sym*$661$20347 (quote #f)) (define rib-mark**$661$20346 (quote #f)) (define rib-label*$661$20345 (quote #f)) (define rib-sealed/freq$661$20344 (quote #f)) (define set-rib-sym*!$661$20343 (quote #f)) (define set-rib-mark**!$661$20342 (quote #f)) (define set-rib-label*!$661$20341 (quote #f)) (define set-rib-sealed/freq!$661$20340 (quote #f)) (define make-empty-rib$661$20339 (quote #f)) (define extend-rib!$661$20338 (quote #f)) (define seal-rib!$661$20337 (quote #f)) (define unseal-rib!$661$20336 (quote #f)) (define increment-rib-frequency!$661$20335 (quote #f)) (define make-full-rib$661$20334 (quote #f)) (define make-stx$661$20333 (quote #f)) (define stx?$661$20332 (quote #f)) (define stx-expr$661$20331 (quote #f)) (define stx-mark*$661$20330 (quote #f)) (define stx-subst*$661$20329 (quote #f)) (define set-stx-expr!$661$20328 (quote #f)) (define set-stx-mark*!$661$20327 (quote #f)) (define set-stx-subst*!$661$20326 (quote #f)) (define datum->stx$661$20325 (quote #f)) (define gen-mark$661$20324 (quote #f)) (define anti-mark$661$20323 (quote #f)) (define anti-mark?$661$20322 (quote #f)) (define join-wraps$661$20321 (quote #f)) (define mkstx$661$20320 (quote #f)) (define add-mark$661$20319 (quote #f)) (define add-subst$661$20318 (quote #f)) (define syntax-kind?$661$20317 (quote #f)) (define syntax-vector->list$661$20316 (quote #f)) (define syntax-pair?$661$20315 (quote #f)) (define syntax-vector?$661$20314 (quote #f)) (define syntax-null?$661$20313 (quote #f)) (define syntax-list?$661$20312 (quote #f)) (define syntax-car$661$20311 (quote #f)) (define syntax->list$661$20310 (quote #f)) (define syntax-cdr$661$20309 (quote #f)) (define id?$661$20308 (quote #f)) (define id->sym$661$20307 (quote #f)) (define same-marks?$661$20306 (quote #f)) (define bound-id=?$661$20305 (quote #f)) (define free-id=?$661$20304 (quote #f)) (define valid-bound-ids?$661$20303 (quote #f)) (define distinct-bound-ids?$661$20302 (quote #f)) (define bound-id-member?$661$20301 (quote #f)) (define self-evaluating?$661$20300 (quote #f)) (define strip$661$20299 (quote #f)) (define stx->datum$661$20298 (quote #f)) (define id->label$661$20297 (quote #f)) (define label->binding$661$20296 (quote #f)) (define make-binding$661$20295 (quote #f)) (define binding-type$661$20294 (quote #f)) (define binding-value$661$20293 (quote #f)) (define syntax-type$661$20292 (quote #f)) (define sanitize-binding$661$20290 (quote #f)) (define make-variable-transformer$661$20289 (quote #f)) (define make-eval-transformer$661$20288 (quote #f)) (define parse-define$661$20286 (quote #f)) (define parse-define-syntax$661$20285 (quote #f)) (define scheme-stx$661$20284 (quote #f)) (define add-lexical$661$20283 (quote #f)) (define add-lexicals$661$20282 (quote #f)) (define let-values-transformer$661$20281 (quote #f)) (define letrec-helper$661$20280 (quote #f)) (define letrec-transformer$661$20279 (quote #f)) (define letrec*-transformer$661$20278 (quote #f)) (define type-descriptor-transformer$661$20277 (quote #f)) (define when-transformer$661$20276 (quote #f)) (define unless-transformer$661$20275 (quote #f)) (define if-transformer$661$20274 (quote #f)) (define case-transformer$661$20273 (quote #f)) (define quote-transformer$661$20272 (quote #f)) (define case-lambda-transformer$661$20271 (quote #f)) (define lambda-transformer$661$20270 (quote #f)) (define bless$661$20269 (quote #f)) (define with-syntax-macro$661$20268 (quote #f)) (define let-macro$661$20267 (quote #f)) (define trace-lambda-macro$661$20266 (quote #f)) (define trace-define-macro$661$20265 (quote #f)) (define time-macro$661$20264 (quote #f)) (define delay-macro$661$20263 (quote #f)) (define assert-macro$661$20262 (quote #f)) (define endianness-macro$661$20261 (quote #f)) (define identifier-syntax-macro$661$20260 (quote #f)) (define do-macro$661$20259 (quote #f)) (define let*-macro$661$20258 (quote #f)) (define or-macro$661$20257 (quote #f)) (define and-macro$661$20256 (quote #f)) (define cond-macro$661$20255 (quote #f)) (define include-macro$661$20254 (quote #f)) (define syntax-rules-macro$661$20253 (quote #f)) (define quasiquote-macro$661$20252 (quote #f)) (define quasisyntax-macro$661$20251 (quote #f)) (define define-record-macro$661$20250 (quote #f)) (define incorrect-usage-macro$661$20249 (quote #f)) (define parameterize-transformer$661$20248 (quote #f)) (define foreign-call-transformer$661$20247 (quote #f)) (define convert-pattern$661$20246 (quote #f)) (define syntax-dispatch$661$20245 (quote #f)) (define ellipsis?$661$20244 (quote #f)) (define syntax-case-transformer$661$20243 (quote #f)) (define syntax-transformer$661$20242 (quote #f)) (define core-macro-transformer$661$20241 (quote #f)) (define macro-transformer$661$20240 (quote #f)) (define local-macro-transformer$661$20239 (quote #f)) (define chi-macro$661$20238 (quote #f)) (define chi-local-macro$661$20237 (quote #f)) (define chi-global-macro$661$20236 (quote #f)) (define chi-expr*$661$20235 (quote #f)) (define chi-application$661$20234 (quote #f)) (define chi-expr$661$20233 (quote #f)) (define chi-set!$661$20232 (quote #f)) (define chi-lambda-clause$661$20231 (quote #f)) (define chi-lambda-clause*$661$20230 (quote #f)) (define chi-rhs$661$20229 (quote #f)) (define chi-rhs*$661$20228 (quote #f)) (define find-bound=?$661$20227 (quote #f)) (define find-dups$661$20226 (quote #f)) (define chi-internal$661$20225 (quote #f)) (define parse-module$661$20224 (quote #f)) (define chi-internal-module$661$20223 (quote #f)) (define chi-body*$661$20222 (quote #f)) (define set-global-macro-binding!$661$20221 (quote #f)) (define gen-global-macro-binding$661$20220 (quote #f)) (define gen-global-var-binding$661$20219 (quote #f)) (define chi-top-set!$661$20218 (quote #f)) (define chi-top*$661$20217 (quote #f)) (define expand-transformer$661$20216 (quote #f)) (define parse-exports$661$20215 (quote #f)) (define parse-library-name$661$20214 (quote #f)) (define parse-library$661$20213 (quote #f)) (define parse-import-spec*$661$20212 (quote #f)) (define make-top-rib$661$20211 (quote #f)) (define make-collector$661$20210 (quote #f)) (define inv-collector$661$20209 (quote #f)) (define vis-collector$661$20208 (quote #f)) (define chi-library-internal$661$20207 (quote #f)) (define library-body-expander$661$20206 (quote #f)) (define core-library-expander$661$20205 (quote #f)) (define parse-top-level-program$661$20204 (quote #f)) (define top-level-expander$661$20203 (quote #f)) (define make-env$661$20202 (quote #f)) (define env?$661$20201 (quote #f)) (define env-subst$661$20200 (quote #f)) (define env-imp*$661$20199 (quote #f)) (define set-env-subst!$661$20198 (quote #f)) (define set-env-imp*!$661$20197 (quote #f)) (define environment?$661$20196 (quote #f)) (define environment$661$20195 (quote #f)) (define null-environment$661$20194 (quote #f)) (define scheme-report-environment$661$20193 (quote #f)) (define expand$661$20192 (quote #f)) (define eval$661$20191 (quote #f)) (define library-expander$661$20190 (quote #f)) (define boot-library-expand$661$20189 (quote #f)) (define rev-map-append$661$20188 (quote #f)) (define build-exports$661$20187 (quote #f)) (define make-export-subst$661$20186 (quote #f)) (define make-export-env/macros$661$20185 (quote #f)) (define generate-temporaries$661$20184 (quote #f)) (define free-identifier=?$661$20183 (quote #f)) (define bound-identifier=?$661$20182 (quote #f)) (define syntax-error$661$20181 (quote #f)) (define identifier?$661$20180 (quote #f)) (define datum->syntax$661$20179 (quote #f)) (define syntax->datum$661$20178 (quote #f)) (define eval-r6rs-top-level$661$20177 (quote #f)) (define interaction-library$661$20176 (quote #f)) (define interaction-sym->label$661$20175 (quote #f)) (define eval-top-level$661$20174 (quote #f)) ((lambda (set-cons$661$12107 set-union$661$12109 top-mark*$661$12114 top-marked?$661$12116 gen-lexical$661$12118 gen-global$661$12120 gen-label$661$12122 make-rib$661$12125 rib?$661$12127 rib-sym*$661$12129 rib-mark**$661$12131 rib-label*$661$12133 rib-sealed/freq$661$12135 set-rib-sym*!$661$12137 set-rib-mark**!$661$12139 set-rib-label*!$661$12141 set-rib-sealed/freq!$661$12143 make-empty-rib$661$12145 extend-rib!$661$12147 seal-rib!$661$12149 unseal-rib!$661$12151 increment-rib-frequency!$661$12153 make-full-rib$661$12155 make-stx$661$12158 stx?$661$12160 stx-expr$661$12162 stx-mark*$661$12164 stx-subst*$661$12166 set-stx-expr!$661$12168 set-stx-mark*!$661$12170 set-stx-subst*!$661$12172 datum->stx$661$12174 gen-mark$661$12176 anti-mark$661$12178 anti-mark?$661$12180 join-wraps$661$12182 mkstx$661$12184 add-mark$661$12186 add-subst$661$12188 syntax-kind?$661$12190 syntax-vector->list$661$12192 syntax-pair?$661$12194 syntax-vector?$661$12196 syntax-null?$661$12198 syntax-list?$661$12200 syntax-car$661$12202 syntax->list$661$12204 syntax-cdr$661$12206 id?$661$12208 id->sym$661$12210 same-marks?$661$12212 bound-id=?$661$12214 free-id=?$661$12216 valid-bound-ids?$661$12218 distinct-bound-ids?$661$12220 bound-id-member?$661$12222 self-evaluating?$661$12224 strip$661$12226 stx->datum$661$12228 id->label$661$12230 label->binding$661$12232 make-binding$661$12234 binding-type$661$12236 binding-value$661$12238 syntax-type$661$12240 sanitize-binding$661$12268 make-variable-transformer$661$12270 make-eval-transformer$661$12272 parse-define$661$12634 parse-define-syntax$661$12636 scheme-stx$661$12638 add-lexical$661$12640 add-lexicals$661$12642 let-values-transformer$661$12644 letrec-helper$661$12646 letrec-transformer$661$12648 letrec*-transformer$661$12650 type-descriptor-transformer$661$12652 when-transformer$661$12654 unless-transformer$661$12656 if-transformer$661$12658 case-transformer$661$12660 quote-transformer$661$12662 case-lambda-transformer$661$12664 lambda-transformer$661$12666 bless$661$12668 with-syntax-macro$661$12670 let-macro$661$12672 trace-lambda-macro$661$12674 trace-define-macro$661$12676 time-macro$661$12678 delay-macro$661$12680 assert-macro$661$12682 endianness-macro$661$12684 identifier-syntax-macro$661$12686 do-macro$661$12688 let*-macro$661$12690 or-macro$661$12692 and-macro$661$12694 cond-macro$661$12696 include-macro$661$12698 syntax-rules-macro$661$12700 quasiquote-macro$661$12702 quasisyntax-macro$661$12704 define-record-macro$661$12706 incorrect-usage-macro$661$12708 parameterize-transformer$661$12710 foreign-call-transformer$661$12712 convert-pattern$661$12714 syntax-dispatch$661$12716 ellipsis?$661$12718 syntax-case-transformer$661$12720 syntax-transformer$661$12722 core-macro-transformer$661$12724 macro-transformer$661$12726 local-macro-transformer$661$12728 chi-macro$661$12730 chi-local-macro$661$12732 chi-global-macro$661$12734 chi-expr*$661$12736 chi-application$661$12738 chi-expr$661$12740 chi-set!$661$12742 chi-lambda-clause$661$12744 chi-lambda-clause*$661$12746 chi-rhs$661$12748 chi-rhs*$661$12750 find-bound=?$661$12752 find-dups$661$12754 chi-internal$661$12756 parse-module$661$12758 chi-internal-module$661$12760 chi-body*$661$12762 set-global-macro-binding!$661$12764 gen-global-macro-binding$661$12766 gen-global-var-binding$661$12768 chi-top-set!$661$12770 chi-top*$661$12772 expand-transformer$661$12774 parse-exports$661$12776 parse-library-name$661$12778 parse-library$661$12780 parse-import-spec*$661$12782 make-top-rib$661$12784 make-collector$661$12786 inv-collector$661$12788 vis-collector$661$12790 chi-library-internal$661$12792 library-body-expander$661$12794 core-library-expander$661$12796 parse-top-level-program$661$12798 top-level-expander$661$12800 make-env$661$12803 env?$661$12805 env-subst$661$12807 env-imp*$661$12809 set-env-subst!$661$12811 set-env-imp*!$661$12813 environment?$661$12815 environment$661$12817 null-environment$661$12819 scheme-report-environment$661$12821 expand$661$12823 eval$661$12825 library-expander$661$12827 boot-library-expand$661$12829 rev-map-append$661$12831 build-exports$661$12833 make-export-subst$661$12835 make-export-env/macros$661$12837 generate-temporaries$661$12839 free-identifier=?$661$12841 bound-identifier=?$661$12843 syntax-error$661$12845 identifier?$661$12847 datum->syntax$661$12849 syntax->datum$661$12851 eval-r6rs-top-level$661$12853 interaction-library$661$12855 interaction-sym->label$661$12857 eval-top-level$661$12859) (begin (set! set-cons$661$12107 (lambda (x$661$12861 ls$661$12862) (if (memq x$661$12861 ls$661$12862) ls$661$12862 (cons x$661$12861 ls$661$12862)))) (set! set-union$661$12109 (lambda (ls1$661$12865 ls2$661$12866) (if (null? ls1$661$12865) ls2$661$12866 (if (memq (car ls1$661$12865) ls2$661$12866) (set-union$661$12109 (cdr ls1$661$12865) ls2$661$12866) (cons (car ls1$661$12865) (set-union$661$12109 (cdr ls1$661$12865) ls2$661$12866)))))) (set! top-mark*$661$12114 (quote (top))) (set! top-marked?$661$12116 (lambda (m*$661$12869) (memq (quote top) m*$661$12869))) (set! gen-lexical$661$12118 (lambda (sym$661$12871) (if (symbol? sym$661$12871) (gensym sym$661$12871) (if (stx?$661$12160 sym$661$12871) (gen-lexical$661$12118 (id->sym$661$12210 sym$661$12871)) (error (quote gen-lexical) (quote "BUG: invalid arg ~s") sym$661$12871))))) (set! gen-global$661$12120 (lambda (x$661$12873) (gen-lexical$661$12118 x$661$12873))) (set! gen-label$661$12122 (lambda (_$661$12875) (gensym))) (set! make-rib$661$12125 (lambda (sym*$661$12877 mark**$661$12878 label*$661$12879 sealed/freq$661$12880) (vector (quote g$661$12124) sym*$661$12877 mark**$661$12878 label*$661$12879 sealed/freq$661$12880))) (set! rib?$661$12127 (lambda (x$661$12885) (if (vector? x$661$12885) (if (= (vector-length x$661$12885) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref x$661$12885 (quote 0)) (quote g$661$12124))) (quote #f)) (quote #f)))) (set! rib-sym*$661$12129 (lambda (x$661$12887) (if (rib?$661$12127 x$661$12887) (vector-ref x$661$12887 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") x$661$12887 (quote rib))))) (set! rib-mark**$661$12131 (lambda (x$661$12889) (if (rib?$661$12127 x$661$12889) (vector-ref x$661$12889 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") x$661$12889 (quote rib))))) (set! rib-label*$661$12133 (lambda (x$661$12891) (if (rib?$661$12127 x$661$12891) (vector-ref x$661$12891 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") x$661$12891 (quote rib))))) (set! rib-sealed/freq$661$12135 (lambda (x$661$12893) (if (rib?$661$12127 x$661$12893) (vector-ref x$661$12893 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") x$661$12893 (quote rib))))) (set! set-rib-sym*!$661$12137 (lambda (x$661$12895 v$661$12896) (if (rib?$661$12127 x$661$12895) (vector-set! x$661$12895 (quote 1) v$661$12896) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") x$661$12895 (quote rib))))) (set! set-rib-mark**!$661$12139 (lambda (x$661$12899 v$661$12900) (if (rib?$661$12127 x$661$12899) (vector-set! x$661$12899 (quote 2) v$661$12900) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") x$661$12899 (quote rib))))) (set! set-rib-label*!$661$12141 (lambda (x$661$12903 v$661$12904) (if (rib?$661$12127 x$661$12903) (vector-set! x$661$12903 (quote 3) v$661$12904) (error (quote set-rib-label*!) (quote "~s is not of type ~s") x$661$12903 (quote rib))))) (set! set-rib-sealed/freq!$661$12143 (lambda (x$661$12907 v$661$12908) (if (rib?$661$12127 x$661$12907) (vector-set! x$661$12907 (quote 4) v$661$12908) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") x$661$12907 (quote rib))))) (set! make-empty-rib$661$12145 (lambda () (make-rib$661$12125 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! extend-rib!$661$12147 (lambda (rib$661$12911 id$661$12912 label$661$12913) ((lambda (find$661$12917) (begin (set! find$661$12917 (lambda (sym$661$12919 mark*$661$12920 sym*$661$12921 mark**$661$12922) (if (pair? sym*$661$12921) (begin (quote #f) ((lambda (t$661$12927) (if t$661$12927 t$661$12927 (begin (quote #f) (find$661$12917 sym$661$12919 mark*$661$12920 (cdr sym*$661$12921) (cdr mark**$661$12922))))) (if (eq? sym$661$12919 (car sym*$661$12921)) (begin (quote #f) (same-marks?$661$12212 mark*$661$12920 (car mark**$661$12922))) (quote #f)))) (quote #f)))) (begin (if (rib-sealed/freq$661$12135 rib$661$12911) (error (quote extend-rib!) (quote "rib ~s is sealed") rib$661$12911) (void)) ((lambda (sym$661$12929 mark*$661$12930) ((lambda (sym*$661$12933) (begin (if (if (memq sym$661$12929 (rib-sym*$661$12129 rib$661$12911)) (begin (quote #f) (find$661$12917 sym$661$12929 mark*$661$12930 sym*$661$12933 (rib-mark**$661$12131 rib$661$12911))) (quote #f)) (error (quote expander) (quote "~a ~s") (quote "cannot redefine") (strip$661$12226 id$661$12912 (quote ()))) (void)) (set-rib-sym*!$661$12137 rib$661$12911 (cons sym$661$12929 sym*$661$12933)) (set-rib-mark**!$661$12139 rib$661$12911 (cons mark*$661$12930 (rib-mark**$661$12131 rib$661$12911))) (set-rib-label*!$661$12141 rib$661$12911 (cons label$661$12913 (rib-label*$661$12133 rib$661$12911))))) (rib-sym*$661$12129 rib$661$12911))) (id->sym$661$12210 id$661$12912) (stx-mark*$661$12164 id$661$12912))))) (quote #f)))) (set! seal-rib!$661$12149 (lambda (rib$661$12935) ((lambda (sym*$661$12937) (if (null? sym*$661$12937) (void) ((lambda (sym*$661$12939) (begin (set-rib-sym*!$661$12137 rib$661$12935 sym*$661$12939) (set-rib-mark**!$661$12139 rib$661$12935 (list->vector (rib-mark**$661$12131 rib$661$12935))) (set-rib-label*!$661$12141 rib$661$12935 (list->vector (rib-label*$661$12133 rib$661$12935))) (set-rib-sealed/freq!$661$12143 rib$661$12935 (make-vector (vector-length sym*$661$12939) (quote 0))))) (list->vector sym*$661$12937)))) (rib-sym*$661$12129 rib$661$12935)))) (set! unseal-rib!$661$12151 (lambda (rib$661$12941) (if (rib-sealed/freq$661$12135 rib$661$12941) (begin (set-rib-sealed/freq!$661$12143 rib$661$12941 (quote #f)) (set-rib-sym*!$661$12137 rib$661$12941 (vector->list (rib-sym*$661$12129 rib$661$12941))) (set-rib-mark**!$661$12139 rib$661$12941 (vector->list (rib-mark**$661$12131 rib$661$12941))) (set-rib-label*!$661$12141 rib$661$12941 (vector->list (rib-label*$661$12133 rib$661$12941)))) (void)))) (set! increment-rib-frequency!$661$12153 (lambda (rib$661$12943 idx$661$12944) ((lambda (freq*$661$12947) ((lambda (freq$661$12949) ((lambda (i$661$12951) (begin (vector-set! freq*$661$12947 i$661$12951 (+ freq$661$12949 (quote 1))) (if (= i$661$12951 idx$661$12944) (void) ((lambda (sym*$661$12953 mark**$661$12954 label*$661$12955) (begin ((lambda (sym$661$12959) (begin (vector-set! sym*$661$12953 idx$661$12944 (vector-ref sym*$661$12953 i$661$12951)) (vector-set! sym*$661$12953 i$661$12951 sym$661$12959))) (vector-ref sym*$661$12953 idx$661$12944)) ((lambda (mark*$661$12961) (begin (vector-set! mark**$661$12954 idx$661$12944 (vector-ref mark**$661$12954 i$661$12951)) (vector-set! mark**$661$12954 i$661$12951 mark*$661$12961))) (vector-ref mark**$661$12954 idx$661$12944)) ((lambda (label$661$12963) (begin (vector-set! label*$661$12955 idx$661$12944 (vector-ref label*$661$12955 i$661$12951)) (vector-set! label*$661$12955 i$661$12951 label$661$12963))) (vector-ref label*$661$12955 idx$661$12944)))) (rib-sym*$661$12129 rib$661$12943) (rib-mark**$661$12131 rib$661$12943) (rib-label*$661$12133 rib$661$12943))))) (letrec ((f$661$12965 (lambda (i$661$12967) (if (zero? i$661$12967) (quote 0) ((lambda (j$661$12969) (if (= freq$661$12949 (vector-ref freq*$661$12947 j$661$12969)) (f$661$12965 j$661$12969) i$661$12967)) (- i$661$12967 (quote 1))))))) (f$661$12965 idx$661$12944)))) (vector-ref freq*$661$12947 idx$661$12944))) (rib-sealed/freq$661$12135 rib$661$12943)))) (set! make-full-rib$661$12155 (lambda (id*$661$12971 label*$661$12972) (make-rib$661$12125 (map id->sym$661$12210 id*$661$12971) (map stx-mark*$661$12164 id*$661$12971) label*$661$12972 (quote #f)))) (set! make-stx$661$12158 (lambda (expr$661$12975 mark*$661$12976 subst*$661$12977) (vector (quote g$661$12157) expr$661$12975 mark*$661$12976 subst*$661$12977))) (set! stx?$661$12160 (lambda (x$661$12981) (if (vector? x$661$12981) (if (= (vector-length x$661$12981) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref x$661$12981 (quote 0)) (quote g$661$12157))) (quote #f)) (quote #f)))) (set! stx-expr$661$12162 (lambda (x$661$12983) (if (stx?$661$12160 x$661$12983) (vector-ref x$661$12983 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") x$661$12983 (quote stx))))) (set! stx-mark*$661$12164 (lambda (x$661$12985) (if (stx?$661$12160 x$661$12985) (vector-ref x$661$12985 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") x$661$12985 (quote stx))))) (set! stx-subst*$661$12166 (lambda (x$661$12987) (if (stx?$661$12160 x$661$12987) (vector-ref x$661$12987 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") x$661$12987 (quote stx))))) (set! set-stx-expr!$661$12168 (lambda (x$661$12989 v$661$12990) (if (stx?$661$12160 x$661$12989) (vector-set! x$661$12989 (quote 1) v$661$12990) (error (quote set-stx-expr!) (quote "~s is not of type ~s") x$661$12989 (quote stx))))) (set! set-stx-mark*!$661$12170 (lambda (x$661$12993 v$661$12994) (if (stx?$661$12160 x$661$12993) (vector-set! x$661$12993 (quote 2) v$661$12994) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") x$661$12993 (quote stx))))) (set! set-stx-subst*!$661$12172 (lambda (x$661$12997 v$661$12998) (if (stx?$661$12160 x$661$12997) (vector-set! x$661$12997 (quote 3) v$661$12998) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") x$661$12997 (quote stx))))) (set! datum->stx$661$12174 (lambda (id$661$13001 datum$661$13002) (make-stx$661$12158 datum$661$13002 (stx-mark*$661$12164 id$661$13001) (stx-subst*$661$12166 id$661$13001)))) (set! gen-mark$661$12176 (lambda () (string (quote #\m)))) (set! anti-mark$661$12178 (quote #f)) (set! anti-mark?$661$12180 not) (set! join-wraps$661$12182 (lambda (m1*$661$13005 s1*$661$13006 e$661$13007) ((lambda (cancel$661$13011) (begin (set! cancel$661$13011 (lambda (ls1$661$13013 ls2$661$13014) (letrec ((f$661$13017 (lambda (x$661$13019 ls1$661$13020) (if (null? ls1$661$13020) (cdr ls2$661$13014) (cons x$661$13019 (f$661$13017 (car ls1$661$13020) (cdr ls1$661$13020))))))) (f$661$13017 (car ls1$661$13013) (cdr ls1$661$13013))))) ((lambda (m2*$661$13023 s2*$661$13024) (if (if (not (null? m1*$661$13005)) (if (not (null? m2*$661$13023)) (begin (quote #f) (anti-mark?$661$12180 (car m2*$661$13023))) (quote #f)) (quote #f)) (values (cancel$661$13011 m1*$661$13005 m2*$661$13023) (cancel$661$13011 s1*$661$13006 s2*$661$13024)) (values (append m1*$661$13005 m2*$661$13023) (append s1*$661$13006 s2*$661$13024)))) (stx-mark*$661$12164 e$661$13007) (stx-subst*$661$12166 e$661$13007)))) (quote #f)))) (set! mkstx$661$12184 (lambda (e$661$13027 m*$661$13028 s*$661$13029) (if (stx?$661$12160 e$661$13027) (call-with-values (lambda () (join-wraps$661$12182 m*$661$13028 s*$661$13029 e$661$13027)) (lambda (m*$661$13033 s*$661$13034) (make-stx$661$12158 (stx-expr$661$12162 e$661$13027) m*$661$13033 s*$661$13034))) (make-stx$661$12158 e$661$13027 m*$661$13028 s*$661$13029)))) (set! add-mark$661$12186 (lambda (m$661$13037 e$661$13038) (mkstx$661$12184 e$661$13038 (list m$661$13037) (quote (shift))))) (set! add-subst$661$12188 (lambda (subst$661$13041 e$661$13042) (mkstx$661$12184 e$661$13042 (quote ()) (list subst$661$13041)))) (set! syntax-kind?$661$12190 (lambda (x$661$13045 p?$661$13046) (if (stx?$661$12160 x$661$13045) (syntax-kind?$661$12190 (stx-expr$661$12162 x$661$13045) p?$661$13046) (p?$661$13046 x$661$13045)))) (set! syntax-vector->list$661$12192 (lambda (x$661$13049) (if (stx?$661$12160 x$661$13049) ((lambda (ls$661$13051 m*$661$13052 s*$661$13053) (map (lambda (x$661$13057) (mkstx$661$12184 x$661$13057 m*$661$13052 s*$661$13053)) ls$661$13051)) (syntax-vector->list$661$12192 (stx-expr$661$12162 x$661$13049)) (stx-mark*$661$12164 x$661$13049) (stx-subst*$661$12166 x$661$13049)) (if (vector? x$661$13049) (vector->list x$661$13049) (error (quote syntax-vector->list) (quote "not a syntax vector ~s") x$661$13049))))) (set! syntax-pair?$661$12194 (lambda (x$661$13059) (syntax-kind?$661$12190 x$661$13059 pair?))) (set! syntax-vector?$661$12196 (lambda (x$661$13061) (syntax-kind?$661$12190 x$661$13061 vector?))) (set! syntax-null?$661$12198 (lambda (x$661$13063) (syntax-kind?$661$12190 x$661$13063 null?))) (set! syntax-list?$661$12200 (lambda (x$661$13065) ((lambda (t$661$13067) (if t$661$13067 t$661$13067 (begin (quote #f) (if (syntax-pair?$661$12194 x$661$13065) (begin (quote #f) (syntax-list?$661$12200 (syntax-cdr$661$12206 x$661$13065))) (quote #f))))) (syntax-null?$661$12198 x$661$13065)))) (set! syntax-car$661$12202 (lambda (x$661$13069) (if (stx?$661$12160 x$661$13069) (mkstx$661$12184 (syntax-car$661$12202 (stx-expr$661$12162 x$661$13069)) (stx-mark*$661$12164 x$661$13069) (stx-subst*$661$12166 x$661$13069)) (if (pair? x$661$13069) (car x$661$13069) (error (quote syntax-car) (quote "~s is not a pair") x$661$13069))))) (set! syntax->list$661$12204 (lambda (x$661$13071) (if (syntax-pair?$661$12194 x$661$13071) (cons (syntax-car$661$12202 x$661$13071) (syntax->list$661$12204 (syntax-cdr$661$12206 x$661$13071))) (if (syntax-null?$661$12198 x$661$13071) (quote ()) (error (quote syntax->list) (quote "invalid ~s") x$661$13071))))) (set! syntax-cdr$661$12206 (lambda (x$661$13073) (if (stx?$661$12160 x$661$13073) (mkstx$661$12184 (syntax-cdr$661$12206 (stx-expr$661$12162 x$661$13073)) (stx-mark*$661$12164 x$661$13073) (stx-subst*$661$12166 x$661$13073)) (if (pair? x$661$13073) (cdr x$661$13073) (error (quote syntax-cdr) (quote "~s is not a pair") x$661$13073))))) (set! id?$661$12208 (lambda (x$661$13075) (syntax-kind?$661$12190 x$661$13075 symbol?))) (set! id->sym$661$12210 (lambda (x$661$13077) (if (stx?$661$12160 x$661$13077) (id->sym$661$12210 (stx-expr$661$12162 x$661$13077)) (if (symbol? x$661$13077) x$661$13077 (error (quote id->sym) (quote "~s is not an id") x$661$13077))))) (set! same-marks?$661$12212 (lambda (x$661$13079 y$661$13080) ((lambda (t$661$13083) (if t$661$13083 t$661$13083 (begin (quote #f) (if (pair? x$661$13079) (if (pair? y$661$13080) (if (eq? (car x$661$13079) (car y$661$13080)) (begin (quote #f) (same-marks?$661$12212 (cdr x$661$13079) (cdr y$661$13080))) (quote #f)) (quote #f)) (quote #f))))) (if (null? x$661$13079) (begin (quote #f) (null? y$661$13080)) (quote #f))))) (set! bound-id=?$661$12214 (lambda (x$661$13085 y$661$13086) (if (eq? (id->sym$661$12210 x$661$13085) (id->sym$661$12210 y$661$13086)) (begin (quote #f) (same-marks?$661$12212 (stx-mark*$661$12164 x$661$13085) (stx-mark*$661$12164 y$661$13086))) (quote #f)))) (set! free-id=?$661$12216 (lambda (i$661$13089 j$661$13090) ((lambda (t0$661$13093 t1$661$13094) (if ((lambda (t$661$13097) (if t$661$13097 t$661$13097 (begin (quote #f) t1$661$13094))) t0$661$13093) (eq? t0$661$13093 t1$661$13094) (eq? (id->sym$661$12210 i$661$13089) (id->sym$661$12210 j$661$13090)))) (id->label$661$12230 i$661$13089) (id->label$661$12230 j$661$13090)))) (set! valid-bound-ids?$661$12218 (lambda (id*$661$13099) (if (for-all id?$661$12208 id*$661$13099) (begin (quote #f) (distinct-bound-ids?$661$12220 id*$661$13099)) (quote #f)))) (set! distinct-bound-ids?$661$12220 (lambda (id*$661$13101) ((lambda (t$661$13103) (if t$661$13103 t$661$13103 (begin (quote #f) (if (not (bound-id-member?$661$12222 (car id*$661$13101) (cdr id*$661$13101))) (begin (quote #f) (distinct-bound-ids?$661$12220 (cdr id*$661$13101))) (quote #f))))) (null? id*$661$13101)))) (set! bound-id-member?$661$12222 (lambda (id$661$13105 id*$661$13106) (if (pair? id*$661$13106) (begin (quote #f) ((lambda (t$661$13109) (if t$661$13109 t$661$13109 (begin (quote #f) (bound-id-member?$661$12222 id$661$13105 (cdr id*$661$13106))))) (bound-id=?$661$12214 id$661$13105 (car id*$661$13106)))) (quote #f)))) (set! self-evaluating?$661$12224 (lambda (x$661$13111) ((lambda (t$661$13113) (if t$661$13113 t$661$13113 ((lambda (t$661$13115) (if t$661$13115 t$661$13115 ((lambda (t$661$13117) (if t$661$13117 t$661$13117 (begin (quote #f) (boolean? x$661$13111)))) (char? x$661$13111)))) (string? x$661$13111)))) (number? x$661$13111)))) (set! strip$661$12226 (lambda (x$661$13119 m*$661$13120) (if (top-marked?$661$12116 m*$661$13120) x$661$13119 (letrec ((f$661$13123 (lambda (x$661$13125) (if (stx?$661$12160 x$661$13125) (strip$661$12226 (stx-expr$661$12162 x$661$13125) (stx-mark*$661$12164 x$661$13125)) (if (pair? x$661$13125) ((lambda (a$661$13127 d$661$13128) (if (if (eq? a$661$13127 (car x$661$13125)) (begin (quote #f) (eq? d$661$13128 (cdr x$661$13125))) (quote #f)) x$661$13125 (cons a$661$13127 d$661$13128))) (f$661$13123 (car x$661$13125)) (f$661$13123 (cdr x$661$13125))) (if (vector? x$661$13125) ((lambda (old$661$13131) ((lambda (new$661$13133) (if (for-all eq? old$661$13131 new$661$13133) x$661$13125 (list->vector new$661$13133))) (map f$661$13123 old$661$13131))) (vector->list x$661$13125)) x$661$13125)))))) (f$661$13123 x$661$13119))))) (set! stx->datum$661$12228 (lambda (x$661$13135) (strip$661$12226 x$661$13135 (quote ())))) (set! id->label$661$12230 (lambda (id$661$13137) ((lambda (sym$661$13139) (letrec ((search$661$13141 (lambda (subst*$661$13143 mark*$661$13144) (if (null? subst*$661$13143) (interaction-sym->label$661$12857 sym$661$13139) (if (eq? (car subst*$661$13143) (quote shift)) (search$661$13141 (cdr subst*$661$13143) (cdr mark*$661$13144)) ((lambda (rib$661$13147) (if (rib-sealed/freq$661$12135 rib$661$13147) ((lambda (sym*$661$13149) (letrec ((f$661$13151 (lambda (i$661$13153 j$661$13154) (if (= i$661$13153 j$661$13154) (search$661$13141 (cdr subst*$661$13143) mark*$661$13144) (if (if (eq? (vector-ref sym*$661$13149 i$661$13153) sym$661$13139) (begin (quote #f) (same-marks?$661$12212 mark*$661$13144 (vector-ref (rib-mark**$661$12131 rib$661$13147) i$661$13153))) (quote #f)) ((lambda (label$661$13157) (begin (increment-rib-frequency!$661$12153 rib$661$13147 i$661$13153) label$661$13157)) (vector-ref (rib-label*$661$12133 rib$661$13147) i$661$13153)) (f$661$13151 (+ i$661$13153 (quote 1)) j$661$13154)))))) (f$661$13151 (quote 0) (vector-length sym*$661$13149)))) (rib-sym*$661$12129 rib$661$13147)) (letrec ((f$661$13159 (lambda (sym*$661$13161 mark**$661$13162 label*$661$13163) (if (null? sym*$661$13161) (search$661$13141 (cdr subst*$661$13143) mark*$661$13144) (if (if (eq? (car sym*$661$13161) sym$661$13139) (begin (quote #f) (same-marks?$661$12212 (car mark**$661$13162) mark*$661$13144)) (quote #f)) (car label*$661$13163) (f$661$13159 (cdr sym*$661$13161) (cdr mark**$661$13162) (cdr label*$661$13163))))))) (f$661$13159 (rib-sym*$661$12129 rib$661$13147) (rib-mark**$661$12131 rib$661$13147) (rib-label*$661$12133 rib$661$13147))))) (car subst*$661$13143))))))) (search$661$13141 (stx-subst*$661$12166 id$661$13137) (stx-mark*$661$12164 id$661$13137)))) (id->sym$661$12210 id$661$13137)))) (set! label->binding$661$12232 (lambda (x$661$13167 r$661$13168) ((lambda (t$661$13171) (if t$661$13171 t$661$13171 (begin (quote #f) ((lambda (t$661$13173) (if t$661$13173 (cdr t$661$13173) (quote (displaced-lexical . #f)))) (assq x$661$13167 r$661$13168))))) (imported-label->binding$661$11747 x$661$13167)))) (set! make-binding$661$12234 cons) (set! binding-type$661$12236 car) (set! binding-value$661$12238 cdr) (set! syntax-type$661$12240 (lambda (e$661$13175 r$661$13176) (if (id?$661$12208 e$661$13175) ((lambda (id$661$13179) ((lambda (label$661$13181) ((lambda (b$661$13183) ((lambda (type$661$13185) ((lambda () (begin (if label$661$13181 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (strip$661$12226 e$661$13175 (quote ())))) ((lambda (t$661$13187) (if (memv t$661$13187 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module))) (values type$661$13185 (binding-value$661$12238 b$661$13183) id$661$13179) (values (quote other) (quote #f) (quote #f)))) type$661$13185))))) (binding-type$661$12236 b$661$13183))) (label->binding$661$12232 label$661$13181 r$661$13176))) (id->label$661$12230 id$661$13179))) e$661$13175) (if (syntax-pair?$661$12194 e$661$13175) ((lambda (id$661$13188) (if (id?$661$12208 id$661$13188) ((lambda (label$661$13190) ((lambda (b$661$13192) ((lambda (type$661$13194) ((lambda () (begin (if label$661$13190 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (strip$661$12226 e$661$13175 (quote ())))) ((lambda (t$661$13196) (if (memv t$661$13196 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import))) (values type$661$13194 (binding-value$661$12238 b$661$13192) id$661$13188) (values (quote call) (quote #f) (quote #f)))) type$661$13194))))) (binding-type$661$12236 b$661$13192))) (label->binding$661$12232 label$661$13190 r$661$13176))) (id->label$661$12230 id$661$13188)) (values (quote call) (quote #f) (quote #f)))) (syntax-car$661$12202 e$661$13175)) ((lambda (d$661$13197) (if (self-evaluating?$661$12224 d$661$13197) (values (quote constant) d$661$13197 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (stx->datum$661$12228 e$661$13175)))))) (set! sanitize-binding$661$12268 (lambda (x$661$13199 src$661$13200) (if (procedure? x$661$13199) (cons* (quote local-macro) x$661$13199 src$661$13200) (if (if (pair? x$661$13199) (if (eq? (car x$661$13199) (quote macro!)) (begin (quote #f) (procedure? (cdr x$661$13199))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr x$661$13199) src$661$13200) (if (if (pair? x$661$13199) (begin (quote #f) (eq? (car x$661$13199) (quote $rtd))) (quote #f)) x$661$13199 (error (quote expand) (quote "invalid transformer ~s") x$661$13199)))))) (set! make-variable-transformer$661$12270 (lambda (x$661$13203) (if (procedure? x$661$13203) (cons (quote macro!) x$661$13203) (error (quote make-variable-transformer) (quote "~s is not a procedure") x$661$13203)))) (set! make-eval-transformer$661$12272 (lambda (x$661$13205) (sanitize-binding$661$12268 (eval-core (expanded->core$661$11298 x$661$13205)) x$661$13205))) (set! parse-define$661$12634 (lambda (x$661$13207) ((lambda (t$661$13209) ((lambda (ls/false$661$13211) (if (if ls/false$661$13211 (begin (quote #f) (apply (lambda (id$661$13213 fmls$661$13214 b$661$13215 b*$661$13216) (id?$661$12208 id$661$13213)) ls/false$661$13211)) (quote #f)) (apply (lambda (id$661$13221 fmls$661$13222 b$661$13223 b*$661$13224) (values id$661$13221 (cons (quote defun) (cons fmls$661$13222 (cons b$661$13223 b*$661$13224))))) ls/false$661$13211) ((lambda (t$661$13229) ((lambda (ls/false$661$13231) (if (if ls/false$661$13231 (begin (quote #f) (apply (lambda (id$661$13233 val$661$13234) (id?$661$12208 id$661$13233)) ls/false$661$13231)) (quote #f)) (apply (lambda (id$661$13237 val$661$13238) (values id$661$13237 (cons (quote expr) val$661$13238))) ls/false$661$13231) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13229 (quote ()))))) ((lambda (x$661$13241) (if (syntax-pair?$661$12194 x$661$13241) (begin (quote #f) ((lambda (q$661$13243) (if q$661$13243 (begin (quote #f) ((lambda (r$661$13245) (if r$661$13245 (begin (quote #f) (append q$661$13243 r$661$13245)) (quote #f))) ((lambda (x$661$13247) (if (syntax-pair?$661$12194 x$661$13247) (begin (quote #f) ((lambda (q$661$13249) (if q$661$13249 (begin (quote #f) ((lambda (r$661$13251) (if r$661$13251 (begin (quote #f) (append q$661$13249 r$661$13251)) (quote #f))) ((lambda (x$661$13253) (if (syntax-pair?$661$12194 x$661$13253) (begin (quote #f) ((lambda (q$661$13255) (if q$661$13255 (begin (quote #f) ((lambda (r$661$13257) (if r$661$13257 (begin (quote #f) (append q$661$13255 r$661$13257)) (quote #f))) ((lambda (x$661$13259) (if (equal? (stx->datum$661$12228 x$661$13259) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13253)))) (quote #f))) ((lambda (x$661$13261) (list x$661$13261)) (syntax-car$661$12202 x$661$13253)))) (quote #f))) (syntax-cdr$661$12206 x$661$13247)))) (quote #f))) ((lambda (x$661$13263) (list x$661$13263)) (syntax-car$661$12202 x$661$13247)))) (quote #f))) (syntax-cdr$661$12206 x$661$13241)))) (quote #f))) ((lambda (x$661$13265) (quote ())) (syntax-car$661$12202 x$661$13241)))) (quote #f))) t$661$13229))) t$661$13209))) ((lambda (x$661$13267) (if (syntax-pair?$661$12194 x$661$13267) (begin (quote #f) ((lambda (q$661$13269) (if q$661$13269 (begin (quote #f) ((lambda (r$661$13271) (if r$661$13271 (begin (quote #f) (append q$661$13269 r$661$13271)) (quote #f))) ((lambda (x$661$13273) (if (syntax-pair?$661$12194 x$661$13273) (begin (quote #f) ((lambda (q$661$13275) (if q$661$13275 (begin (quote #f) ((lambda (r$661$13277) (if r$661$13277 (begin (quote #f) (append q$661$13275 r$661$13277)) (quote #f))) ((lambda (x$661$13279) (if (syntax-pair?$661$12194 x$661$13279) (begin (quote #f) ((lambda (q$661$13281) (if q$661$13281 (begin (quote #f) ((lambda (r$661$13283) (if r$661$13283 (begin (quote #f) (append q$661$13281 r$661$13283)) (quote #f))) ((letrec ((f$661$13285 (lambda (x$661$13287) (if (syntax-pair?$661$12194 x$661$13287) ((lambda (cars/f$661$13289) (if cars/f$661$13289 (begin (quote #f) ((lambda (cdrs/f$661$13291) (if cdrs/f$661$13291 (begin (quote #f) (map cons cars/f$661$13289 cdrs/f$661$13291)) (quote #f))) (f$661$13285 (syntax-cdr$661$12206 x$661$13287)))) (quote #f))) ((lambda (x$661$13293) (list x$661$13293)) (syntax-car$661$12202 x$661$13287))) (if (syntax-null?$661$12198 x$661$13287) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$13285) (syntax-cdr$661$12206 x$661$13279)))) (quote #f))) ((lambda (x$661$13295) (list x$661$13295)) (syntax-car$661$12202 x$661$13279)))) (quote #f))) (syntax-cdr$661$12206 x$661$13273)))) (quote #f))) ((lambda (x$661$13297) (if (syntax-pair?$661$12194 x$661$13297) (begin (quote #f) ((lambda (q$661$13299) (if q$661$13299 (begin (quote #f) ((lambda (r$661$13301) (if r$661$13301 (begin (quote #f) (append q$661$13299 r$661$13301)) (quote #f))) ((lambda (x$661$13303) (list x$661$13303)) (syntax-cdr$661$12206 x$661$13297)))) (quote #f))) ((lambda (x$661$13305) (list x$661$13305)) (syntax-car$661$12202 x$661$13297)))) (quote #f))) (syntax-car$661$12202 x$661$13273)))) (quote #f))) (syntax-cdr$661$12206 x$661$13267)))) (quote #f))) ((lambda (x$661$13307) (quote ())) (syntax-car$661$12202 x$661$13267)))) (quote #f))) t$661$13209))) x$661$13207))) (set! parse-define-syntax$661$12636 (lambda (x$661$13309) ((lambda (t$661$13311) ((lambda (ls/false$661$13313) (if (if ls/false$661$13313 (begin (quote #f) (apply (lambda (id$661$13315 val$661$13316) (id?$661$12208 id$661$13315)) ls/false$661$13313)) (quote #f)) (apply (lambda (id$661$13319 val$661$13320) (values id$661$13319 val$661$13320)) ls/false$661$13313) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13311 (quote ()))))) ((lambda (x$661$13323) (if (syntax-pair?$661$12194 x$661$13323) (begin (quote #f) ((lambda (q$661$13325) (if q$661$13325 (begin (quote #f) ((lambda (r$661$13327) (if r$661$13327 (begin (quote #f) (append q$661$13325 r$661$13327)) (quote #f))) ((lambda (x$661$13329) (if (syntax-pair?$661$12194 x$661$13329) (begin (quote #f) ((lambda (q$661$13331) (if q$661$13331 (begin (quote #f) ((lambda (r$661$13333) (if r$661$13333 (begin (quote #f) (append q$661$13331 r$661$13333)) (quote #f))) ((lambda (x$661$13335) (if (syntax-pair?$661$12194 x$661$13335) (begin (quote #f) ((lambda (q$661$13337) (if q$661$13337 (begin (quote #f) ((lambda (r$661$13339) (if r$661$13339 (begin (quote #f) (append q$661$13337 r$661$13339)) (quote #f))) ((lambda (x$661$13341) (if (equal? (stx->datum$661$12228 x$661$13341) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13335)))) (quote #f))) ((lambda (x$661$13343) (list x$661$13343)) (syntax-car$661$12202 x$661$13335)))) (quote #f))) (syntax-cdr$661$12206 x$661$13329)))) (quote #f))) ((lambda (x$661$13345) (list x$661$13345)) (syntax-car$661$12202 x$661$13329)))) (quote #f))) (syntax-cdr$661$12206 x$661$13323)))) (quote #f))) ((lambda (x$661$13347) (quote ())) (syntax-car$661$12202 x$661$13323)))) (quote #f))) t$661$13311))) x$661$13309))) (set! scheme-stx$661$12638 (lambda (sym$661$13349) ((lambda (subst$661$13351) ((lambda (t$661$13353) (if t$661$13353 ((lambda (x$661$13355) ((lambda (name$661$13357 label$661$13358) (add-subst$661$12188 (make-rib$661$12125 (list name$661$13357) (list top-mark*$661$12114) (list label$661$13358) (quote #f)) (mkstx$661$12184 sym$661$13349 top-mark*$661$12114 (quote ())))) (car x$661$13355) (cdr x$661$13355))) t$661$13353) (mkstx$661$12184 sym$661$13349 top-mark*$661$12114 (quote ())))) (assq sym$661$13349 subst$661$13351))) (library-subst$661$11780 (find-library-by-name$661$11755 (quote (psyntax system $all))))))) (set! add-lexical$661$12640 (lambda (lab$661$13361 lex$661$13362 r$661$13363) (cons (cons* lab$661$13361 (quote lexical) lex$661$13362) r$661$13363))) (set! add-lexicals$661$12642 (lambda (lab*$661$13367 lex*$661$13368 r$661$13369) (if (null? lab*$661$13367) r$661$13369 (add-lexicals$661$12642 (cdr lab*$661$13367) (cdr lex*$661$13368) (add-lexical$661$12640 (car lab*$661$13367) (car lex*$661$13368) r$661$13369))))) (set! let-values-transformer$661$12644 (lambda (e$661$13373 r$661$13374 mr$661$13375) ((lambda (t$661$13379) ((lambda (ls/false$661$13381) (if (if ls/false$661$13381 (begin (quote #f) (apply (lambda (fml**$661$13383 rhs*$661$13384 b$661$13385 b*$661$13386) (quote #t)) ls/false$661$13381)) (quote #f)) (apply (lambda (fml**$661$13391 rhs*$661$13392 b$661$13393 b*$661$13394) ((lambda (rhs*$661$13399) ((lambda (lex**$661$13401 lab**$661$13402) ((lambda (fml*$661$13405 lab*$661$13406 lex*$661$13407) (letrec ((f$661$13411 (lambda (lex**$661$13413 rhs*$661$13414) (if (null? lex**$661$13413) (chi-internal$661$12756 (add-subst$661$12188 (make-full-rib$661$12155 fml*$661$13405 lab*$661$13406) (cons b$661$13393 b*$661$13394)) (add-lexicals$661$12642 lab*$661$13406 lex*$661$13407 r$661$13374) mr$661$13375) (list (quote (primitive call-with-values)) (build-lambda$661$12097 (quote #f) (quote ()) (car rhs*$661$13414)) (build-lambda$661$12097 (quote #f) (car lex**$661$13413) (f$661$13411 (cdr lex**$661$13413) (cdr rhs*$661$13414)))))))) (f$661$13411 lex**$661$13401 rhs*$661$13399))) (apply append fml**$661$13391) (apply append lab**$661$13402) (apply append lex**$661$13401))) (map (lambda (ls$661$13417) (map gen-lexical$661$12118 ls$661$13417)) fml**$661$13391) (map (lambda (ls$661$13419) (map gen-label$661$12122 ls$661$13419)) fml**$661$13391))) (chi-expr*$661$12736 rhs*$661$13392 r$661$13374 mr$661$13375))) ls/false$661$13381) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13379 (quote ()))))) ((lambda (x$661$13421) (if (syntax-pair?$661$12194 x$661$13421) (begin (quote #f) ((lambda (q$661$13423) (if q$661$13423 (begin (quote #f) ((lambda (r$661$13425) (if r$661$13425 (begin (quote #f) (append q$661$13423 r$661$13425)) (quote #f))) ((lambda (x$661$13427) (if (syntax-pair?$661$12194 x$661$13427) (begin (quote #f) ((lambda (q$661$13429) (if q$661$13429 (begin (quote #f) ((lambda (r$661$13431) (if r$661$13431 (begin (quote #f) (append q$661$13429 r$661$13431)) (quote #f))) ((lambda (x$661$13433) (if (syntax-pair?$661$12194 x$661$13433) (begin (quote #f) ((lambda (q$661$13435) (if q$661$13435 (begin (quote #f) ((lambda (r$661$13437) (if r$661$13437 (begin (quote #f) (append q$661$13435 r$661$13437)) (quote #f))) ((letrec ((f$661$13439 (lambda (x$661$13441) (if (syntax-pair?$661$12194 x$661$13441) ((lambda (cars/f$661$13443) (if cars/f$661$13443 (begin (quote #f) ((lambda (cdrs/f$661$13445) (if cdrs/f$661$13445 (begin (quote #f) (map cons cars/f$661$13443 cdrs/f$661$13445)) (quote #f))) (f$661$13439 (syntax-cdr$661$12206 x$661$13441)))) (quote #f))) ((lambda (x$661$13447) (list x$661$13447)) (syntax-car$661$12202 x$661$13441))) (if (syntax-null?$661$12198 x$661$13441) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$13439) (syntax-cdr$661$12206 x$661$13433)))) (quote #f))) ((lambda (x$661$13449) (list x$661$13449)) (syntax-car$661$12202 x$661$13433)))) (quote #f))) (syntax-cdr$661$12206 x$661$13427)))) (quote #f))) ((letrec ((f$661$13451 (lambda (x$661$13453) (if (syntax-pair?$661$12194 x$661$13453) ((lambda (cars/f$661$13455) (if cars/f$661$13455 (begin (quote #f) ((lambda (cdrs/f$661$13457) (if cdrs/f$661$13457 (begin (quote #f) (map cons cars/f$661$13455 cdrs/f$661$13457)) (quote #f))) (f$661$13451 (syntax-cdr$661$12206 x$661$13453)))) (quote #f))) ((lambda (x$661$13459) (if (syntax-pair?$661$12194 x$661$13459) (begin (quote #f) ((lambda (q$661$13461) (if q$661$13461 (begin (quote #f) ((lambda (r$661$13463) (if r$661$13463 (begin (quote #f) (append q$661$13461 r$661$13463)) (quote #f))) ((lambda (x$661$13465) (if (syntax-pair?$661$12194 x$661$13465) (begin (quote #f) ((lambda (q$661$13467) (if q$661$13467 (begin (quote #f) ((lambda (r$661$13469) (if r$661$13469 (begin (quote #f) (append q$661$13467 r$661$13469)) (quote #f))) ((lambda (x$661$13471) (if (equal? (stx->datum$661$12228 x$661$13471) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13465)))) (quote #f))) ((lambda (x$661$13473) (list x$661$13473)) (syntax-car$661$12202 x$661$13465)))) (quote #f))) (syntax-cdr$661$12206 x$661$13459)))) (quote #f))) ((letrec ((f$661$13475 (lambda (x$661$13477) (if (syntax-pair?$661$12194 x$661$13477) ((lambda (cars/f$661$13479) (if cars/f$661$13479 (begin (quote #f) ((lambda (cdrs/f$661$13481) (if cdrs/f$661$13481 (begin (quote #f) (map cons cars/f$661$13479 cdrs/f$661$13481)) (quote #f))) (f$661$13475 (syntax-cdr$661$12206 x$661$13477)))) (quote #f))) ((lambda (x$661$13483) (list x$661$13483)) (syntax-car$661$12202 x$661$13477))) (if (syntax-null?$661$12198 x$661$13477) (list (begin (quote fml**) (quote ()))) (quote #f)))))) f$661$13475) (syntax-car$661$12202 x$661$13459)))) (quote #f))) (syntax-car$661$12202 x$661$13453))) (if (syntax-null?$661$12198 x$661$13453) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$661$13451) (syntax-car$661$12202 x$661$13427)))) (quote #f))) (syntax-cdr$661$12206 x$661$13421)))) (quote #f))) ((lambda (x$661$13485) (quote ())) (syntax-car$661$12202 x$661$13421)))) (quote #f))) t$661$13379))) e$661$13373))) (set! letrec-helper$661$12646 (lambda (e$661$13487 r$661$13488 mr$661$13489 build$661$13490) ((lambda (t$661$13495) ((lambda (ls/false$661$13497) (if (if ls/false$661$13497 (begin (quote #f) (apply (lambda (lhs*$661$13499 rhs*$661$13500 b$661$13501 b*$661$13502) (quote #t)) ls/false$661$13497)) (quote #f)) (apply (lambda (lhs*$661$13507 rhs*$661$13508 b$661$13509 b*$661$13510) (if (not (valid-bound-ids?$661$12218 lhs*$661$13507)) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (strip$661$12226 e$661$13487 (quote ()))) ((lambda (lex*$661$13515 lab*$661$13516) ((lambda (rib$661$13519 r$661$13520) ((lambda (body$661$13523 rhs*$661$13524) (build$661$13490 (quote #f) lex*$661$13515 rhs*$661$13524 body$661$13523)) (chi-internal$661$12756 (add-subst$661$12188 rib$661$13519 (cons b$661$13509 b*$661$13510)) r$661$13520 mr$661$13489) (chi-expr*$661$12736 (map (lambda (x$661$13527) (add-subst$661$12188 rib$661$13519 x$661$13527)) rhs*$661$13508) r$661$13520 mr$661$13489))) (make-full-rib$661$12155 lhs*$661$13507 lab*$661$13516) (add-lexicals$661$12642 lab*$661$13516 lex*$661$13515 r$661$13488))) (map gen-lexical$661$12118 lhs*$661$13507) (map gen-label$661$12122 lhs*$661$13507)))) ls/false$661$13497) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13495 (quote ()))))) ((lambda (x$661$13529) (if (syntax-pair?$661$12194 x$661$13529) (begin (quote #f) ((lambda (q$661$13531) (if q$661$13531 (begin (quote #f) ((lambda (r$661$13533) (if r$661$13533 (begin (quote #f) (append q$661$13531 r$661$13533)) (quote #f))) ((lambda (x$661$13535) (if (syntax-pair?$661$12194 x$661$13535) (begin (quote #f) ((lambda (q$661$13537) (if q$661$13537 (begin (quote #f) ((lambda (r$661$13539) (if r$661$13539 (begin (quote #f) (append q$661$13537 r$661$13539)) (quote #f))) ((lambda (x$661$13541) (if (syntax-pair?$661$12194 x$661$13541) (begin (quote #f) ((lambda (q$661$13543) (if q$661$13543 (begin (quote #f) ((lambda (r$661$13545) (if r$661$13545 (begin (quote #f) (append q$661$13543 r$661$13545)) (quote #f))) ((letrec ((f$661$13547 (lambda (x$661$13549) (if (syntax-pair?$661$12194 x$661$13549) ((lambda (cars/f$661$13551) (if cars/f$661$13551 (begin (quote #f) ((lambda (cdrs/f$661$13553) (if cdrs/f$661$13553 (begin (quote #f) (map cons cars/f$661$13551 cdrs/f$661$13553)) (quote #f))) (f$661$13547 (syntax-cdr$661$12206 x$661$13549)))) (quote #f))) ((lambda (x$661$13555) (list x$661$13555)) (syntax-car$661$12202 x$661$13549))) (if (syntax-null?$661$12198 x$661$13549) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$13547) (syntax-cdr$661$12206 x$661$13541)))) (quote #f))) ((lambda (x$661$13557) (list x$661$13557)) (syntax-car$661$12202 x$661$13541)))) (quote #f))) (syntax-cdr$661$12206 x$661$13535)))) (quote #f))) ((letrec ((f$661$13559 (lambda (x$661$13561) (if (syntax-pair?$661$12194 x$661$13561) ((lambda (cars/f$661$13563) (if cars/f$661$13563 (begin (quote #f) ((lambda (cdrs/f$661$13565) (if cdrs/f$661$13565 (begin (quote #f) (map cons cars/f$661$13563 cdrs/f$661$13565)) (quote #f))) (f$661$13559 (syntax-cdr$661$12206 x$661$13561)))) (quote #f))) ((lambda (x$661$13567) (if (syntax-pair?$661$12194 x$661$13567) (begin (quote #f) ((lambda (q$661$13569) (if q$661$13569 (begin (quote #f) ((lambda (r$661$13571) (if r$661$13571 (begin (quote #f) (append q$661$13569 r$661$13571)) (quote #f))) ((lambda (x$661$13573) (if (syntax-pair?$661$12194 x$661$13573) (begin (quote #f) ((lambda (q$661$13575) (if q$661$13575 (begin (quote #f) ((lambda (r$661$13577) (if r$661$13577 (begin (quote #f) (append q$661$13575 r$661$13577)) (quote #f))) ((lambda (x$661$13579) (if (equal? (stx->datum$661$12228 x$661$13579) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13573)))) (quote #f))) ((lambda (x$661$13581) (list x$661$13581)) (syntax-car$661$12202 x$661$13573)))) (quote #f))) (syntax-cdr$661$12206 x$661$13567)))) (quote #f))) ((lambda (x$661$13583) (list x$661$13583)) (syntax-car$661$12202 x$661$13567)))) (quote #f))) (syntax-car$661$12202 x$661$13561))) (if (syntax-null?$661$12198 x$661$13561) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$661$13559) (syntax-car$661$12202 x$661$13535)))) (quote #f))) (syntax-cdr$661$12206 x$661$13529)))) (quote #f))) ((lambda (x$661$13585) (quote ())) (syntax-car$661$12202 x$661$13529)))) (quote #f))) t$661$13495))) e$661$13487))) (set! letrec-transformer$661$12648 (lambda (e$661$13587 r$661$13588 mr$661$13589) (letrec-helper$661$12646 e$661$13587 r$661$13588 mr$661$13589 build-letrec$661$12089))) (set! letrec*-transformer$661$12650 (lambda (e$661$13593 r$661$13594 mr$661$13595) (letrec-helper$661$12646 e$661$13593 r$661$13594 mr$661$13595 build-letrec*$661$12088))) (set! type-descriptor-transformer$661$12652 (lambda (e$661$13599 r$661$13600 mr$661$13601) ((lambda (t$661$13605) ((lambda (ls/false$661$13607) (if (if ls/false$661$13607 (begin (quote #f) (apply (lambda (id$661$13609) (id?$661$12208 id$661$13609)) ls/false$661$13607)) (quote #f)) (apply (lambda (id$661$13611) ((lambda (lab$661$13613) ((lambda (b$661$13615) ((lambda (type$661$13617) ((lambda () (begin (if lab$661$13613 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (strip$661$12226 e$661$13599 (quote ())))) ((lambda (t$661$13619) (if (memv t$661$13619 (quote ($rtd))) (list (quote quote) (binding-value$661$12238 b$661$13615)) (error (quote expander) (quote "~a ~s") (quote "invalid type") (strip$661$12226 e$661$13599 (quote ()))))) type$661$13617))))) (binding-type$661$12236 b$661$13615))) (label->binding$661$12232 lab$661$13613 r$661$13600))) (id->label$661$12230 id$661$13611))) ls/false$661$13607) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13605 (quote ()))))) ((lambda (x$661$13620) (if (syntax-pair?$661$12194 x$661$13620) (begin (quote #f) ((lambda (q$661$13622) (if q$661$13622 (begin (quote #f) ((lambda (r$661$13624) (if r$661$13624 (begin (quote #f) (append q$661$13622 r$661$13624)) (quote #f))) ((lambda (x$661$13626) (if (syntax-pair?$661$12194 x$661$13626) (begin (quote #f) ((lambda (q$661$13628) (if q$661$13628 (begin (quote #f) ((lambda (r$661$13630) (if r$661$13630 (begin (quote #f) (append q$661$13628 r$661$13630)) (quote #f))) ((lambda (x$661$13632) (if (equal? (stx->datum$661$12228 x$661$13632) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13626)))) (quote #f))) ((lambda (x$661$13634) (list x$661$13634)) (syntax-car$661$12202 x$661$13626)))) (quote #f))) (syntax-cdr$661$12206 x$661$13620)))) (quote #f))) ((lambda (x$661$13636) (quote ())) (syntax-car$661$12202 x$661$13620)))) (quote #f))) t$661$13605))) e$661$13599))) (set! when-transformer$661$12654 (lambda (e$661$13638 r$661$13639 mr$661$13640) ((lambda (t$661$13644) ((lambda (ls/false$661$13646) (if (if ls/false$661$13646 (begin (quote #f) (apply (lambda (test$661$13648 e$661$13649 e*$661$13650) (quote #t)) ls/false$661$13646)) (quote #f)) (apply (lambda (test$661$13654 e$661$13655 e*$661$13656) (list (quote if) (chi-expr$661$12740 test$661$13654 r$661$13639 mr$661$13640) (build-sequence$661$12091 (quote #f) (chi-expr*$661$12736 (cons e$661$13655 e*$661$13656) r$661$13639 mr$661$13640)) (build-void$661$12090))) ls/false$661$13646) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13644 (quote ()))))) ((lambda (x$661$13660) (if (syntax-pair?$661$12194 x$661$13660) (begin (quote #f) ((lambda (q$661$13662) (if q$661$13662 (begin (quote #f) ((lambda (r$661$13664) (if r$661$13664 (begin (quote #f) (append q$661$13662 r$661$13664)) (quote #f))) ((lambda (x$661$13666) (if (syntax-pair?$661$12194 x$661$13666) (begin (quote #f) ((lambda (q$661$13668) (if q$661$13668 (begin (quote #f) ((lambda (r$661$13670) (if r$661$13670 (begin (quote #f) (append q$661$13668 r$661$13670)) (quote #f))) ((lambda (x$661$13672) (if (syntax-pair?$661$12194 x$661$13672) (begin (quote #f) ((lambda (q$661$13674) (if q$661$13674 (begin (quote #f) ((lambda (r$661$13676) (if r$661$13676 (begin (quote #f) (append q$661$13674 r$661$13676)) (quote #f))) ((letrec ((f$661$13678 (lambda (x$661$13680) (if (syntax-pair?$661$12194 x$661$13680) ((lambda (cars/f$661$13682) (if cars/f$661$13682 (begin (quote #f) ((lambda (cdrs/f$661$13684) (if cdrs/f$661$13684 (begin (quote #f) (map cons cars/f$661$13682 cdrs/f$661$13684)) (quote #f))) (f$661$13678 (syntax-cdr$661$12206 x$661$13680)))) (quote #f))) ((lambda (x$661$13686) (list x$661$13686)) (syntax-car$661$12202 x$661$13680))) (if (syntax-null?$661$12198 x$661$13680) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$13678) (syntax-cdr$661$12206 x$661$13672)))) (quote #f))) ((lambda (x$661$13688) (list x$661$13688)) (syntax-car$661$12202 x$661$13672)))) (quote #f))) (syntax-cdr$661$12206 x$661$13666)))) (quote #f))) ((lambda (x$661$13690) (list x$661$13690)) (syntax-car$661$12202 x$661$13666)))) (quote #f))) (syntax-cdr$661$12206 x$661$13660)))) (quote #f))) ((lambda (x$661$13692) (quote ())) (syntax-car$661$12202 x$661$13660)))) (quote #f))) t$661$13644))) e$661$13638))) (set! unless-transformer$661$12656 (lambda (e$661$13694 r$661$13695 mr$661$13696) ((lambda (t$661$13700) ((lambda (ls/false$661$13702) (if (if ls/false$661$13702 (begin (quote #f) (apply (lambda (test$661$13704 e$661$13705 e*$661$13706) (quote #t)) ls/false$661$13702)) (quote #f)) (apply (lambda (test$661$13710 e$661$13711 e*$661$13712) (list (quote if) (chi-expr$661$12740 test$661$13710 r$661$13695 mr$661$13696) (build-void$661$12090) (build-sequence$661$12091 (quote #f) (chi-expr*$661$12736 (cons e$661$13711 e*$661$13712) r$661$13695 mr$661$13696)))) ls/false$661$13702) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13700 (quote ()))))) ((lambda (x$661$13716) (if (syntax-pair?$661$12194 x$661$13716) (begin (quote #f) ((lambda (q$661$13718) (if q$661$13718 (begin (quote #f) ((lambda (r$661$13720) (if r$661$13720 (begin (quote #f) (append q$661$13718 r$661$13720)) (quote #f))) ((lambda (x$661$13722) (if (syntax-pair?$661$12194 x$661$13722) (begin (quote #f) ((lambda (q$661$13724) (if q$661$13724 (begin (quote #f) ((lambda (r$661$13726) (if r$661$13726 (begin (quote #f) (append q$661$13724 r$661$13726)) (quote #f))) ((lambda (x$661$13728) (if (syntax-pair?$661$12194 x$661$13728) (begin (quote #f) ((lambda (q$661$13730) (if q$661$13730 (begin (quote #f) ((lambda (r$661$13732) (if r$661$13732 (begin (quote #f) (append q$661$13730 r$661$13732)) (quote #f))) ((letrec ((f$661$13734 (lambda (x$661$13736) (if (syntax-pair?$661$12194 x$661$13736) ((lambda (cars/f$661$13738) (if cars/f$661$13738 (begin (quote #f) ((lambda (cdrs/f$661$13740) (if cdrs/f$661$13740 (begin (quote #f) (map cons cars/f$661$13738 cdrs/f$661$13740)) (quote #f))) (f$661$13734 (syntax-cdr$661$12206 x$661$13736)))) (quote #f))) ((lambda (x$661$13742) (list x$661$13742)) (syntax-car$661$12202 x$661$13736))) (if (syntax-null?$661$12198 x$661$13736) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$13734) (syntax-cdr$661$12206 x$661$13728)))) (quote #f))) ((lambda (x$661$13744) (list x$661$13744)) (syntax-car$661$12202 x$661$13728)))) (quote #f))) (syntax-cdr$661$12206 x$661$13722)))) (quote #f))) ((lambda (x$661$13746) (list x$661$13746)) (syntax-car$661$12202 x$661$13722)))) (quote #f))) (syntax-cdr$661$12206 x$661$13716)))) (quote #f))) ((lambda (x$661$13748) (quote ())) (syntax-car$661$12202 x$661$13716)))) (quote #f))) t$661$13700))) e$661$13694))) (set! if-transformer$661$12658 (lambda (e$661$13750 r$661$13751 mr$661$13752) ((lambda (t$661$13756) ((lambda (ls/false$661$13758) (if (if ls/false$661$13758 (begin (quote #f) (apply (lambda (e0$661$13760 e1$661$13761 e2$661$13762) (quote #t)) ls/false$661$13758)) (quote #f)) (apply (lambda (e0$661$13766 e1$661$13767 e2$661$13768) (list (quote if) (chi-expr$661$12740 e0$661$13766 r$661$13751 mr$661$13752) (chi-expr$661$12740 e1$661$13767 r$661$13751 mr$661$13752) (chi-expr$661$12740 e2$661$13768 r$661$13751 mr$661$13752))) ls/false$661$13758) ((lambda (t$661$13772) ((lambda (ls/false$661$13774) (if (if ls/false$661$13774 (begin (quote #f) (apply (lambda (e0$661$13776 e1$661$13777) (quote #t)) ls/false$661$13774)) (quote #f)) (apply (lambda (e0$661$13780 e1$661$13781) (list (quote if) (chi-expr$661$12740 e0$661$13780 r$661$13751 mr$661$13752) (chi-expr$661$12740 e1$661$13781 r$661$13751 mr$661$13752) (build-void$661$12090))) ls/false$661$13774) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13772 (quote ()))))) ((lambda (x$661$13784) (if (syntax-pair?$661$12194 x$661$13784) (begin (quote #f) ((lambda (q$661$13786) (if q$661$13786 (begin (quote #f) ((lambda (r$661$13788) (if r$661$13788 (begin (quote #f) (append q$661$13786 r$661$13788)) (quote #f))) ((lambda (x$661$13790) (if (syntax-pair?$661$12194 x$661$13790) (begin (quote #f) ((lambda (q$661$13792) (if q$661$13792 (begin (quote #f) ((lambda (r$661$13794) (if r$661$13794 (begin (quote #f) (append q$661$13792 r$661$13794)) (quote #f))) ((lambda (x$661$13796) (if (syntax-pair?$661$12194 x$661$13796) (begin (quote #f) ((lambda (q$661$13798) (if q$661$13798 (begin (quote #f) ((lambda (r$661$13800) (if r$661$13800 (begin (quote #f) (append q$661$13798 r$661$13800)) (quote #f))) ((lambda (x$661$13802) (if (equal? (stx->datum$661$12228 x$661$13802) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13796)))) (quote #f))) ((lambda (x$661$13804) (list x$661$13804)) (syntax-car$661$12202 x$661$13796)))) (quote #f))) (syntax-cdr$661$12206 x$661$13790)))) (quote #f))) ((lambda (x$661$13806) (list x$661$13806)) (syntax-car$661$12202 x$661$13790)))) (quote #f))) (syntax-cdr$661$12206 x$661$13784)))) (quote #f))) ((lambda (x$661$13808) (quote ())) (syntax-car$661$12202 x$661$13784)))) (quote #f))) t$661$13772))) t$661$13756))) ((lambda (x$661$13810) (if (syntax-pair?$661$12194 x$661$13810) (begin (quote #f) ((lambda (q$661$13812) (if q$661$13812 (begin (quote #f) ((lambda (r$661$13814) (if r$661$13814 (begin (quote #f) (append q$661$13812 r$661$13814)) (quote #f))) ((lambda (x$661$13816) (if (syntax-pair?$661$12194 x$661$13816) (begin (quote #f) ((lambda (q$661$13818) (if q$661$13818 (begin (quote #f) ((lambda (r$661$13820) (if r$661$13820 (begin (quote #f) (append q$661$13818 r$661$13820)) (quote #f))) ((lambda (x$661$13822) (if (syntax-pair?$661$12194 x$661$13822) (begin (quote #f) ((lambda (q$661$13824) (if q$661$13824 (begin (quote #f) ((lambda (r$661$13826) (if r$661$13826 (begin (quote #f) (append q$661$13824 r$661$13826)) (quote #f))) ((lambda (x$661$13828) (if (syntax-pair?$661$12194 x$661$13828) (begin (quote #f) ((lambda (q$661$13830) (if q$661$13830 (begin (quote #f) ((lambda (r$661$13832) (if r$661$13832 (begin (quote #f) (append q$661$13830 r$661$13832)) (quote #f))) ((lambda (x$661$13834) (if (equal? (stx->datum$661$12228 x$661$13834) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$13828)))) (quote #f))) ((lambda (x$661$13836) (list x$661$13836)) (syntax-car$661$12202 x$661$13828)))) (quote #f))) (syntax-cdr$661$12206 x$661$13822)))) (quote #f))) ((lambda (x$661$13838) (list x$661$13838)) (syntax-car$661$12202 x$661$13822)))) (quote #f))) (syntax-cdr$661$12206 x$661$13816)))) (quote #f))) ((lambda (x$661$13840) (list x$661$13840)) (syntax-car$661$12202 x$661$13816)))) (quote #f))) (syntax-cdr$661$12206 x$661$13810)))) (quote #f))) ((lambda (x$661$13842) (quote ())) (syntax-car$661$12202 x$661$13810)))) (quote #f))) t$661$13756))) e$661$13750))) (set! case-transformer$661$12660 (lambda (e$661$13844 r$661$13845 mr$661$13846) ((lambda (build-one$661$13850 build-last$661$13852) (begin (set! build-one$661$13850 (lambda (t$661$13960 cls$661$13961 rest$661$13962) ((lambda (t$661$13966) ((lambda (ls/false$661$13968) (if (if ls/false$661$13968 (begin (quote #f) (apply (lambda (d*$661$13970 e$661$13971 e*$661$13972) (quote #t)) ls/false$661$13968)) (quote #f)) (apply (lambda (d*$661$13976 e$661$13977 e*$661$13978) (list (quote if) (list (quote (primitive memv)) t$661$13960 (list (quote quote) (stx->datum$661$12228 d*$661$13976))) (build-sequence$661$12091 (quote #f) (chi-expr*$661$12736 (cons e$661$13977 e*$661$13978) r$661$13845 mr$661$13846)) rest$661$13962)) ls/false$661$13968) ((lambda (t$661$13982) ((lambda (ls/false$661$13984) (if (if ls/false$661$13984 (begin (quote #f) (apply (lambda (else$661$13986) (quote #t)) ls/false$661$13984)) (quote #f)) (apply (lambda (else$661$13988) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 e$661$13844))) ls/false$661$13984) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13982 (quote ()))))) ((lambda (x$661$13990) (list x$661$13990)) t$661$13982))) t$661$13966))) ((lambda (x$661$13992) (if (syntax-pair?$661$12194 x$661$13992) (begin (quote #f) ((lambda (q$661$13994) (if q$661$13994 (begin (quote #f) ((lambda (r$661$13996) (if r$661$13996 (begin (quote #f) (append q$661$13994 r$661$13996)) (quote #f))) ((lambda (x$661$13998) (if (syntax-pair?$661$12194 x$661$13998) (begin (quote #f) ((lambda (q$661$14000) (if q$661$14000 (begin (quote #f) ((lambda (r$661$14002) (if r$661$14002 (begin (quote #f) (append q$661$14000 r$661$14002)) (quote #f))) ((letrec ((f$661$14004 (lambda (x$661$14006) (if (syntax-pair?$661$12194 x$661$14006) ((lambda (cars/f$661$14008) (if cars/f$661$14008 (begin (quote #f) ((lambda (cdrs/f$661$14010) (if cdrs/f$661$14010 (begin (quote #f) (map cons cars/f$661$14008 cdrs/f$661$14010)) (quote #f))) (f$661$14004 (syntax-cdr$661$12206 x$661$14006)))) (quote #f))) ((lambda (x$661$14012) (list x$661$14012)) (syntax-car$661$12202 x$661$14006))) (if (syntax-null?$661$12198 x$661$14006) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$14004) (syntax-cdr$661$12206 x$661$13998)))) (quote #f))) ((lambda (x$661$14014) (list x$661$14014)) (syntax-car$661$12202 x$661$13998)))) (quote #f))) (syntax-cdr$661$12206 x$661$13992)))) (quote #f))) ((letrec ((f$661$14016 (lambda (x$661$14018) (if (syntax-pair?$661$12194 x$661$14018) ((lambda (cars/f$661$14020) (if cars/f$661$14020 (begin (quote #f) ((lambda (cdrs/f$661$14022) (if cdrs/f$661$14022 (begin (quote #f) (map cons cars/f$661$14020 cdrs/f$661$14022)) (quote #f))) (f$661$14016 (syntax-cdr$661$12206 x$661$14018)))) (quote #f))) ((lambda (x$661$14024) (list x$661$14024)) (syntax-car$661$12202 x$661$14018))) (if (syntax-null?$661$12198 x$661$14018) (list (begin (quote d*) (quote ()))) (quote #f)))))) f$661$14016) (syntax-car$661$12202 x$661$13992)))) (quote #f))) t$661$13966))) cls$661$13961))) (set! build-last$661$13852 (lambda (t$661$13854 cls$661$13855) ((lambda (t$661$13858) ((lambda (ls/false$661$13860) (if (if ls/false$661$13860 (begin (quote #f) (apply (lambda (d*$661$13862 e$661$13863 e*$661$13864) (quote #t)) ls/false$661$13860)) (quote #f)) (apply (lambda (d*$661$13868 e$661$13869 e*$661$13870) (build-one$661$13850 t$661$13854 cls$661$13855 (build-void$661$12090))) ls/false$661$13860) ((lambda (t$661$13874) ((lambda (ls/false$661$13876) (if (if ls/false$661$13876 (begin (quote #f) (apply (lambda (else-kwd$661$13878 x$661$13879 x*$661$13880) (quote #t)) ls/false$661$13876)) (quote #f)) (apply (lambda (else-kwd$661$13884 x$661$13885 x*$661$13886) (if (if (id?$661$12208 else-kwd$661$13884) (begin (quote #f) (free-id=?$661$12216 else-kwd$661$13884 (scheme-stx$661$12638 (quote else)))) (quote #f)) (build-sequence$661$12091 (quote #f) (chi-expr*$661$12736 (cons x$661$13885 x*$661$13886) r$661$13845 mr$661$13846)) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 e$661$13844)))) ls/false$661$13876) ((lambda (t$661$13890) ((lambda (ls/false$661$13892) (if (if ls/false$661$13892 (begin (quote #f) (apply (lambda (else$661$13894) (quote #t)) ls/false$661$13892)) (quote #f)) (apply (lambda (else$661$13896) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 e$661$13844))) ls/false$661$13892) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$13890 (quote ()))))) ((lambda (x$661$13898) (list x$661$13898)) t$661$13890))) t$661$13874))) ((lambda (x$661$13900) (if (syntax-pair?$661$12194 x$661$13900) (begin (quote #f) ((lambda (q$661$13902) (if q$661$13902 (begin (quote #f) ((lambda (r$661$13904) (if r$661$13904 (begin (quote #f) (append q$661$13902 r$661$13904)) (quote #f))) ((lambda (x$661$13906) (if (syntax-pair?$661$12194 x$661$13906) (begin (quote #f) ((lambda (q$661$13908) (if q$661$13908 (begin (quote #f) ((lambda (r$661$13910) (if r$661$13910 (begin (quote #f) (append q$661$13908 r$661$13910)) (quote #f))) ((letrec ((f$661$13912 (lambda (x$661$13914) (if (syntax-pair?$661$12194 x$661$13914) ((lambda (cars/f$661$13916) (if cars/f$661$13916 (begin (quote #f) ((lambda (cdrs/f$661$13918) (if cdrs/f$661$13918 (begin (quote #f) (map cons cars/f$661$13916 cdrs/f$661$13918)) (quote #f))) (f$661$13912 (syntax-cdr$661$12206 x$661$13914)))) (quote #f))) ((lambda (x$661$13920) (list x$661$13920)) (syntax-car$661$12202 x$661$13914))) (if (syntax-null?$661$12198 x$661$13914) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$13912) (syntax-cdr$661$12206 x$661$13906)))) (quote #f))) ((lambda (x$661$13922) (list x$661$13922)) (syntax-car$661$12202 x$661$13906)))) (quote #f))) (syntax-cdr$661$12206 x$661$13900)))) (quote #f))) ((lambda (x$661$13924) (list x$661$13924)) (syntax-car$661$12202 x$661$13900)))) (quote #f))) t$661$13874))) t$661$13858))) ((lambda (x$661$13926) (if (syntax-pair?$661$12194 x$661$13926) (begin (quote #f) ((lambda (q$661$13928) (if q$661$13928 (begin (quote #f) ((lambda (r$661$13930) (if r$661$13930 (begin (quote #f) (append q$661$13928 r$661$13930)) (quote #f))) ((lambda (x$661$13932) (if (syntax-pair?$661$12194 x$661$13932) (begin (quote #f) ((lambda (q$661$13934) (if q$661$13934 (begin (quote #f) ((lambda (r$661$13936) (if r$661$13936 (begin (quote #f) (append q$661$13934 r$661$13936)) (quote #f))) ((letrec ((f$661$13938 (lambda (x$661$13940) (if (syntax-pair?$661$12194 x$661$13940) ((lambda (cars/f$661$13942) (if cars/f$661$13942 (begin (quote #f) ((lambda (cdrs/f$661$13944) (if cdrs/f$661$13944 (begin (quote #f) (map cons cars/f$661$13942 cdrs/f$661$13944)) (quote #f))) (f$661$13938 (syntax-cdr$661$12206 x$661$13940)))) (quote #f))) ((lambda (x$661$13946) (list x$661$13946)) (syntax-car$661$12202 x$661$13940))) (if (syntax-null?$661$12198 x$661$13940) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$13938) (syntax-cdr$661$12206 x$661$13932)))) (quote #f))) ((lambda (x$661$13948) (list x$661$13948)) (syntax-car$661$12202 x$661$13932)))) (quote #f))) (syntax-cdr$661$12206 x$661$13926)))) (quote #f))) ((letrec ((f$661$13950 (lambda (x$661$13952) (if (syntax-pair?$661$12194 x$661$13952) ((lambda (cars/f$661$13954) (if cars/f$661$13954 (begin (quote #f) ((lambda (cdrs/f$661$13956) (if cdrs/f$661$13956 (begin (quote #f) (map cons cars/f$661$13954 cdrs/f$661$13956)) (quote #f))) (f$661$13950 (syntax-cdr$661$12206 x$661$13952)))) (quote #f))) ((lambda (x$661$13958) (list x$661$13958)) (syntax-car$661$12202 x$661$13952))) (if (syntax-null?$661$12198 x$661$13952) (list (begin (quote d*) (quote ()))) (quote #f)))))) f$661$13950) (syntax-car$661$12202 x$661$13926)))) (quote #f))) t$661$13858))) cls$661$13855))) ((lambda (t$661$14026) ((lambda (ls/false$661$14028) (if (if ls/false$661$14028 (begin (quote #f) (apply (lambda (expr$661$14030) (quote #t)) ls/false$661$14028)) (quote #f)) (apply (lambda (expr$661$14032) (build-sequence$661$12091 (quote #f) (list (chi-expr$661$12740 expr$661$14032 r$661$13845 mr$661$13846) (build-void$661$12090)))) ls/false$661$14028) ((lambda (t$661$14034) ((lambda (ls/false$661$14036) (if (if ls/false$661$14036 (begin (quote #f) (apply (lambda (expr$661$14038 cls$661$14039 cls*$661$14040) (quote #t)) ls/false$661$14036)) (quote #f)) (apply (lambda (expr$661$14044 cls$661$14045 cls*$661$14046) ((lambda (t$661$14050) (build-let$661$12095 (quote #f) (list t$661$14050) (list (chi-expr$661$12740 expr$661$14044 r$661$13845 mr$661$13846)) (letrec ((f$661$14052 (lambda (cls$661$14054 cls*$661$14055) (if (null? cls*$661$14055) (build-last$661$13852 t$661$14050 cls$661$14054) (build-one$661$13850 t$661$14050 cls$661$14054 (f$661$14052 (car cls*$661$14055) (cdr cls*$661$14055))))))) (f$661$14052 cls$661$14045 cls*$661$14046)))) (gen-lexical$661$12118 (quote t)))) ls/false$661$14036) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14034 (quote ()))))) ((lambda (x$661$14058) (if (syntax-pair?$661$12194 x$661$14058) (begin (quote #f) ((lambda (q$661$14060) (if q$661$14060 (begin (quote #f) ((lambda (r$661$14062) (if r$661$14062 (begin (quote #f) (append q$661$14060 r$661$14062)) (quote #f))) ((lambda (x$661$14064) (if (syntax-pair?$661$12194 x$661$14064) (begin (quote #f) ((lambda (q$661$14066) (if q$661$14066 (begin (quote #f) ((lambda (r$661$14068) (if r$661$14068 (begin (quote #f) (append q$661$14066 r$661$14068)) (quote #f))) ((lambda (x$661$14070) (if (syntax-pair?$661$12194 x$661$14070) (begin (quote #f) ((lambda (q$661$14072) (if q$661$14072 (begin (quote #f) ((lambda (r$661$14074) (if r$661$14074 (begin (quote #f) (append q$661$14072 r$661$14074)) (quote #f))) ((letrec ((f$661$14076 (lambda (x$661$14078) (if (syntax-pair?$661$12194 x$661$14078) ((lambda (cars/f$661$14080) (if cars/f$661$14080 (begin (quote #f) ((lambda (cdrs/f$661$14082) (if cdrs/f$661$14082 (begin (quote #f) (map cons cars/f$661$14080 cdrs/f$661$14082)) (quote #f))) (f$661$14076 (syntax-cdr$661$12206 x$661$14078)))) (quote #f))) ((lambda (x$661$14084) (list x$661$14084)) (syntax-car$661$12202 x$661$14078))) (if (syntax-null?$661$12198 x$661$14078) (list (begin (quote cls*) (quote ()))) (quote #f)))))) f$661$14076) (syntax-cdr$661$12206 x$661$14070)))) (quote #f))) ((lambda (x$661$14086) (list x$661$14086)) (syntax-car$661$12202 x$661$14070)))) (quote #f))) (syntax-cdr$661$12206 x$661$14064)))) (quote #f))) ((lambda (x$661$14088) (list x$661$14088)) (syntax-car$661$12202 x$661$14064)))) (quote #f))) (syntax-cdr$661$12206 x$661$14058)))) (quote #f))) ((lambda (x$661$14090) (quote ())) (syntax-car$661$12202 x$661$14058)))) (quote #f))) t$661$14034))) t$661$14026))) ((lambda (x$661$14092) (if (syntax-pair?$661$12194 x$661$14092) (begin (quote #f) ((lambda (q$661$14094) (if q$661$14094 (begin (quote #f) ((lambda (r$661$14096) (if r$661$14096 (begin (quote #f) (append q$661$14094 r$661$14096)) (quote #f))) ((lambda (x$661$14098) (if (syntax-pair?$661$12194 x$661$14098) (begin (quote #f) ((lambda (q$661$14100) (if q$661$14100 (begin (quote #f) ((lambda (r$661$14102) (if r$661$14102 (begin (quote #f) (append q$661$14100 r$661$14102)) (quote #f))) ((lambda (x$661$14104) (if (equal? (stx->datum$661$12228 x$661$14104) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14098)))) (quote #f))) ((lambda (x$661$14106) (list x$661$14106)) (syntax-car$661$12202 x$661$14098)))) (quote #f))) (syntax-cdr$661$12206 x$661$14092)))) (quote #f))) ((lambda (x$661$14108) (quote ())) (syntax-car$661$12202 x$661$14092)))) (quote #f))) t$661$14026))) e$661$13844))) (quote #f) (quote #f)))) (set! quote-transformer$661$12662 (lambda (e$661$14110 r$661$14111 mr$661$14112) ((lambda (t$661$14116) ((lambda (ls/false$661$14118) (if (if ls/false$661$14118 (begin (quote #f) (apply (lambda (datum$661$14120) (quote #t)) ls/false$661$14118)) (quote #f)) (apply (lambda (datum$661$14122) (list (quote quote) (stx->datum$661$12228 datum$661$14122))) ls/false$661$14118) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14116 (quote ()))))) ((lambda (x$661$14124) (if (syntax-pair?$661$12194 x$661$14124) (begin (quote #f) ((lambda (q$661$14126) (if q$661$14126 (begin (quote #f) ((lambda (r$661$14128) (if r$661$14128 (begin (quote #f) (append q$661$14126 r$661$14128)) (quote #f))) ((lambda (x$661$14130) (if (syntax-pair?$661$12194 x$661$14130) (begin (quote #f) ((lambda (q$661$14132) (if q$661$14132 (begin (quote #f) ((lambda (r$661$14134) (if r$661$14134 (begin (quote #f) (append q$661$14132 r$661$14134)) (quote #f))) ((lambda (x$661$14136) (if (equal? (stx->datum$661$12228 x$661$14136) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14130)))) (quote #f))) ((lambda (x$661$14138) (list x$661$14138)) (syntax-car$661$12202 x$661$14130)))) (quote #f))) (syntax-cdr$661$12206 x$661$14124)))) (quote #f))) ((lambda (x$661$14140) (quote ())) (syntax-car$661$12202 x$661$14124)))) (quote #f))) t$661$14116))) e$661$14110))) (set! case-lambda-transformer$661$12664 (lambda (e$661$14142 r$661$14143 mr$661$14144) ((lambda (t$661$14148) ((lambda (ls/false$661$14150) (if (if ls/false$661$14150 (begin (quote #f) (apply (lambda (fmls*$661$14152 b*$661$14153 b**$661$14154) (quote #t)) ls/false$661$14150)) (quote #f)) (apply (lambda (fmls*$661$14158 b*$661$14159 b**$661$14160) (call-with-values (lambda () (chi-lambda-clause*$661$12746 fmls*$661$14158 (map cons b*$661$14159 b**$661$14160) r$661$14143 mr$661$14144)) (lambda (fmls*$661$14164 body*$661$14165) (build-case-lambda$661$12096 (quote #f) fmls*$661$14164 body*$661$14165)))) ls/false$661$14150) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14148 (quote ()))))) ((lambda (x$661$14168) (if (syntax-pair?$661$12194 x$661$14168) (begin (quote #f) ((lambda (q$661$14170) (if q$661$14170 (begin (quote #f) ((lambda (r$661$14172) (if r$661$14172 (begin (quote #f) (append q$661$14170 r$661$14172)) (quote #f))) ((letrec ((f$661$14174 (lambda (x$661$14176) (if (syntax-pair?$661$12194 x$661$14176) ((lambda (cars/f$661$14178) (if cars/f$661$14178 (begin (quote #f) ((lambda (cdrs/f$661$14180) (if cdrs/f$661$14180 (begin (quote #f) (map cons cars/f$661$14178 cdrs/f$661$14180)) (quote #f))) (f$661$14174 (syntax-cdr$661$12206 x$661$14176)))) (quote #f))) ((lambda (x$661$14182) (if (syntax-pair?$661$12194 x$661$14182) (begin (quote #f) ((lambda (q$661$14184) (if q$661$14184 (begin (quote #f) ((lambda (r$661$14186) (if r$661$14186 (begin (quote #f) (append q$661$14184 r$661$14186)) (quote #f))) ((lambda (x$661$14188) (if (syntax-pair?$661$12194 x$661$14188) (begin (quote #f) ((lambda (q$661$14190) (if q$661$14190 (begin (quote #f) ((lambda (r$661$14192) (if r$661$14192 (begin (quote #f) (append q$661$14190 r$661$14192)) (quote #f))) ((letrec ((f$661$14194 (lambda (x$661$14196) (if (syntax-pair?$661$12194 x$661$14196) ((lambda (cars/f$661$14198) (if cars/f$661$14198 (begin (quote #f) ((lambda (cdrs/f$661$14200) (if cdrs/f$661$14200 (begin (quote #f) (map cons cars/f$661$14198 cdrs/f$661$14200)) (quote #f))) (f$661$14194 (syntax-cdr$661$12206 x$661$14196)))) (quote #f))) ((lambda (x$661$14202) (list x$661$14202)) (syntax-car$661$12202 x$661$14196))) (if (syntax-null?$661$12198 x$661$14196) (list (begin (quote b**) (quote ()))) (quote #f)))))) f$661$14194) (syntax-cdr$661$12206 x$661$14188)))) (quote #f))) ((lambda (x$661$14204) (list x$661$14204)) (syntax-car$661$12202 x$661$14188)))) (quote #f))) (syntax-cdr$661$12206 x$661$14182)))) (quote #f))) ((lambda (x$661$14206) (list x$661$14206)) (syntax-car$661$12202 x$661$14182)))) (quote #f))) (syntax-car$661$12202 x$661$14176))) (if (syntax-null?$661$12198 x$661$14176) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) f$661$14174) (syntax-cdr$661$12206 x$661$14168)))) (quote #f))) ((lambda (x$661$14208) (quote ())) (syntax-car$661$12202 x$661$14168)))) (quote #f))) t$661$14148))) e$661$14142))) (set! lambda-transformer$661$12666 (lambda (e$661$14210 r$661$14211 mr$661$14212) ((lambda (t$661$14216) ((lambda (ls/false$661$14218) (if (if ls/false$661$14218 (begin (quote #f) (apply (lambda (fmls$661$14220 b$661$14221 b*$661$14222) (quote #t)) ls/false$661$14218)) (quote #f)) (apply (lambda (fmls$661$14226 b$661$14227 b*$661$14228) (call-with-values (lambda () (chi-lambda-clause$661$12744 fmls$661$14226 (cons b$661$14227 b*$661$14228) r$661$14211 mr$661$14212)) (lambda (fmls$661$14232 body$661$14233) (build-lambda$661$12097 (quote #f) fmls$661$14232 body$661$14233)))) ls/false$661$14218) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14216 (quote ()))))) ((lambda (x$661$14236) (if (syntax-pair?$661$12194 x$661$14236) (begin (quote #f) ((lambda (q$661$14238) (if q$661$14238 (begin (quote #f) ((lambda (r$661$14240) (if r$661$14240 (begin (quote #f) (append q$661$14238 r$661$14240)) (quote #f))) ((lambda (x$661$14242) (if (syntax-pair?$661$12194 x$661$14242) (begin (quote #f) ((lambda (q$661$14244) (if q$661$14244 (begin (quote #f) ((lambda (r$661$14246) (if r$661$14246 (begin (quote #f) (append q$661$14244 r$661$14246)) (quote #f))) ((lambda (x$661$14248) (if (syntax-pair?$661$12194 x$661$14248) (begin (quote #f) ((lambda (q$661$14250) (if q$661$14250 (begin (quote #f) ((lambda (r$661$14252) (if r$661$14252 (begin (quote #f) (append q$661$14250 r$661$14252)) (quote #f))) ((letrec ((f$661$14254 (lambda (x$661$14256) (if (syntax-pair?$661$12194 x$661$14256) ((lambda (cars/f$661$14258) (if cars/f$661$14258 (begin (quote #f) ((lambda (cdrs/f$661$14260) (if cdrs/f$661$14260 (begin (quote #f) (map cons cars/f$661$14258 cdrs/f$661$14260)) (quote #f))) (f$661$14254 (syntax-cdr$661$12206 x$661$14256)))) (quote #f))) ((lambda (x$661$14262) (list x$661$14262)) (syntax-car$661$12202 x$661$14256))) (if (syntax-null?$661$12198 x$661$14256) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14254) (syntax-cdr$661$12206 x$661$14248)))) (quote #f))) ((lambda (x$661$14264) (list x$661$14264)) (syntax-car$661$12202 x$661$14248)))) (quote #f))) (syntax-cdr$661$12206 x$661$14242)))) (quote #f))) ((lambda (x$661$14266) (list x$661$14266)) (syntax-car$661$12202 x$661$14242)))) (quote #f))) (syntax-cdr$661$12206 x$661$14236)))) (quote #f))) ((lambda (x$661$14268) (quote ())) (syntax-car$661$12202 x$661$14236)))) (quote #f))) t$661$14216))) e$661$14210))) (set! bless$661$12668 (lambda (x$661$14270) (mkstx$661$12184 (letrec ((f$661$14272 (lambda (x$661$14274) (if (stx?$661$12160 x$661$14274) x$661$14274 (if (pair? x$661$14274) (cons (f$661$14272 (car x$661$14274)) (f$661$14272 (cdr x$661$14274))) (if (symbol? x$661$14274) (scheme-stx$661$12638 x$661$14274) (if (vector? x$661$14274) (list->vector (map f$661$14272 (vector->list x$661$14274))) x$661$14274))))))) (f$661$14272 x$661$14270)) (quote ()) (quote ())))) (set! with-syntax-macro$661$12670 (lambda (e$661$14276) ((lambda (t$661$14278) ((lambda (ls/false$661$14280) (if (if ls/false$661$14280 (begin (quote #f) (apply (lambda (fml*$661$14282 expr*$661$14283 b$661$14284 b*$661$14285) (quote #t)) ls/false$661$14280)) (quote #f)) (apply (lambda (fml*$661$14290 expr*$661$14291 b$661$14292 b*$661$14293) (bless$661$12668 (list (quote syntax-case) (cons (quote list) expr*$661$14291) (quote ()) (list fml*$661$14290 (cons (quote begin) (cons b$661$14292 b*$661$14293)))))) ls/false$661$14280) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14278 (quote ()))))) ((lambda (x$661$14298) (if (syntax-pair?$661$12194 x$661$14298) (begin (quote #f) ((lambda (q$661$14300) (if q$661$14300 (begin (quote #f) ((lambda (r$661$14302) (if r$661$14302 (begin (quote #f) (append q$661$14300 r$661$14302)) (quote #f))) ((lambda (x$661$14304) (if (syntax-pair?$661$12194 x$661$14304) (begin (quote #f) ((lambda (q$661$14306) (if q$661$14306 (begin (quote #f) ((lambda (r$661$14308) (if r$661$14308 (begin (quote #f) (append q$661$14306 r$661$14308)) (quote #f))) ((lambda (x$661$14310) (if (syntax-pair?$661$12194 x$661$14310) (begin (quote #f) ((lambda (q$661$14312) (if q$661$14312 (begin (quote #f) ((lambda (r$661$14314) (if r$661$14314 (begin (quote #f) (append q$661$14312 r$661$14314)) (quote #f))) ((letrec ((f$661$14316 (lambda (x$661$14318) (if (syntax-pair?$661$12194 x$661$14318) ((lambda (cars/f$661$14320) (if cars/f$661$14320 (begin (quote #f) ((lambda (cdrs/f$661$14322) (if cdrs/f$661$14322 (begin (quote #f) (map cons cars/f$661$14320 cdrs/f$661$14322)) (quote #f))) (f$661$14316 (syntax-cdr$661$12206 x$661$14318)))) (quote #f))) ((lambda (x$661$14324) (list x$661$14324)) (syntax-car$661$12202 x$661$14318))) (if (syntax-null?$661$12198 x$661$14318) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14316) (syntax-cdr$661$12206 x$661$14310)))) (quote #f))) ((lambda (x$661$14326) (list x$661$14326)) (syntax-car$661$12202 x$661$14310)))) (quote #f))) (syntax-cdr$661$12206 x$661$14304)))) (quote #f))) ((letrec ((f$661$14328 (lambda (x$661$14330) (if (syntax-pair?$661$12194 x$661$14330) ((lambda (cars/f$661$14332) (if cars/f$661$14332 (begin (quote #f) ((lambda (cdrs/f$661$14334) (if cdrs/f$661$14334 (begin (quote #f) (map cons cars/f$661$14332 cdrs/f$661$14334)) (quote #f))) (f$661$14328 (syntax-cdr$661$12206 x$661$14330)))) (quote #f))) ((lambda (x$661$14336) (if (syntax-pair?$661$12194 x$661$14336) (begin (quote #f) ((lambda (q$661$14338) (if q$661$14338 (begin (quote #f) ((lambda (r$661$14340) (if r$661$14340 (begin (quote #f) (append q$661$14338 r$661$14340)) (quote #f))) ((lambda (x$661$14342) (if (syntax-pair?$661$12194 x$661$14342) (begin (quote #f) ((lambda (q$661$14344) (if q$661$14344 (begin (quote #f) ((lambda (r$661$14346) (if r$661$14346 (begin (quote #f) (append q$661$14344 r$661$14346)) (quote #f))) ((lambda (x$661$14348) (if (equal? (stx->datum$661$12228 x$661$14348) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14342)))) (quote #f))) ((lambda (x$661$14350) (list x$661$14350)) (syntax-car$661$12202 x$661$14342)))) (quote #f))) (syntax-cdr$661$12206 x$661$14336)))) (quote #f))) ((lambda (x$661$14352) (list x$661$14352)) (syntax-car$661$12202 x$661$14336)))) (quote #f))) (syntax-car$661$12202 x$661$14330))) (if (syntax-null?$661$12198 x$661$14330) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) f$661$14328) (syntax-car$661$12202 x$661$14304)))) (quote #f))) (syntax-cdr$661$12206 x$661$14298)))) (quote #f))) ((lambda (x$661$14354) (quote ())) (syntax-car$661$12202 x$661$14298)))) (quote #f))) t$661$14278))) e$661$14276))) (set! let-macro$661$12672 (lambda (stx$661$14356) ((lambda (t$661$14358) ((lambda (ls/false$661$14360) (if (if ls/false$661$14360 (begin (quote #f) (apply (lambda (lhs*$661$14362 rhs*$661$14363 b$661$14364 b*$661$14365) (quote #t)) ls/false$661$14360)) (quote #f)) (apply (lambda (lhs*$661$14370 rhs*$661$14371 b$661$14372 b*$661$14373) (if (valid-bound-ids?$661$12218 lhs*$661$14370) (bless$661$12668 (cons (cons (quote lambda) (cons lhs*$661$14370 (cons b$661$14372 b*$661$14373))) rhs*$661$14371)) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (strip$661$12226 stx$661$14356 (quote ()))))) ls/false$661$14360) ((lambda (t$661$14378) ((lambda (ls/false$661$14380) (if (if ls/false$661$14380 (begin (quote #f) (apply (lambda (f$661$14382 lhs*$661$14383 rhs*$661$14384 b$661$14385 b*$661$14386) (id?$661$12208 f$661$14382)) ls/false$661$14380)) (quote #f)) (apply (lambda (f$661$14392 lhs*$661$14393 rhs*$661$14394 b$661$14395 b*$661$14396) (if (valid-bound-ids?$661$12218 lhs*$661$14393) (bless$661$12668 (list (quote letrec) (list (list f$661$14392 (cons (quote lambda) (cons lhs*$661$14393 (cons b$661$14395 b*$661$14396))))) (cons f$661$14392 rhs*$661$14394))) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 stx$661$14356 (quote ()))))) ls/false$661$14380) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14378 (quote ()))))) ((lambda (x$661$14402) (if (syntax-pair?$661$12194 x$661$14402) (begin (quote #f) ((lambda (q$661$14404) (if q$661$14404 (begin (quote #f) ((lambda (r$661$14406) (if r$661$14406 (begin (quote #f) (append q$661$14404 r$661$14406)) (quote #f))) ((lambda (x$661$14408) (if (syntax-pair?$661$12194 x$661$14408) (begin (quote #f) ((lambda (q$661$14410) (if q$661$14410 (begin (quote #f) ((lambda (r$661$14412) (if r$661$14412 (begin (quote #f) (append q$661$14410 r$661$14412)) (quote #f))) ((lambda (x$661$14414) (if (syntax-pair?$661$12194 x$661$14414) (begin (quote #f) ((lambda (q$661$14416) (if q$661$14416 (begin (quote #f) ((lambda (r$661$14418) (if r$661$14418 (begin (quote #f) (append q$661$14416 r$661$14418)) (quote #f))) ((lambda (x$661$14420) (if (syntax-pair?$661$12194 x$661$14420) (begin (quote #f) ((lambda (q$661$14422) (if q$661$14422 (begin (quote #f) ((lambda (r$661$14424) (if r$661$14424 (begin (quote #f) (append q$661$14422 r$661$14424)) (quote #f))) ((letrec ((f$661$14426 (lambda (x$661$14428) (if (syntax-pair?$661$12194 x$661$14428) ((lambda (cars/f$661$14430) (if cars/f$661$14430 (begin (quote #f) ((lambda (cdrs/f$661$14432) (if cdrs/f$661$14432 (begin (quote #f) (map cons cars/f$661$14430 cdrs/f$661$14432)) (quote #f))) (f$661$14426 (syntax-cdr$661$12206 x$661$14428)))) (quote #f))) ((lambda (x$661$14434) (list x$661$14434)) (syntax-car$661$12202 x$661$14428))) (if (syntax-null?$661$12198 x$661$14428) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14426) (syntax-cdr$661$12206 x$661$14420)))) (quote #f))) ((lambda (x$661$14436) (list x$661$14436)) (syntax-car$661$12202 x$661$14420)))) (quote #f))) (syntax-cdr$661$12206 x$661$14414)))) (quote #f))) ((letrec ((f$661$14438 (lambda (x$661$14440) (if (syntax-pair?$661$12194 x$661$14440) ((lambda (cars/f$661$14442) (if cars/f$661$14442 (begin (quote #f) ((lambda (cdrs/f$661$14444) (if cdrs/f$661$14444 (begin (quote #f) (map cons cars/f$661$14442 cdrs/f$661$14444)) (quote #f))) (f$661$14438 (syntax-cdr$661$12206 x$661$14440)))) (quote #f))) ((lambda (x$661$14446) (if (syntax-pair?$661$12194 x$661$14446) (begin (quote #f) ((lambda (q$661$14448) (if q$661$14448 (begin (quote #f) ((lambda (r$661$14450) (if r$661$14450 (begin (quote #f) (append q$661$14448 r$661$14450)) (quote #f))) ((lambda (x$661$14452) (if (syntax-pair?$661$12194 x$661$14452) (begin (quote #f) ((lambda (q$661$14454) (if q$661$14454 (begin (quote #f) ((lambda (r$661$14456) (if r$661$14456 (begin (quote #f) (append q$661$14454 r$661$14456)) (quote #f))) ((lambda (x$661$14458) (if (equal? (stx->datum$661$12228 x$661$14458) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14452)))) (quote #f))) ((lambda (x$661$14460) (list x$661$14460)) (syntax-car$661$12202 x$661$14452)))) (quote #f))) (syntax-cdr$661$12206 x$661$14446)))) (quote #f))) ((lambda (x$661$14462) (list x$661$14462)) (syntax-car$661$12202 x$661$14446)))) (quote #f))) (syntax-car$661$12202 x$661$14440))) (if (syntax-null?$661$12198 x$661$14440) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$661$14438) (syntax-car$661$12202 x$661$14414)))) (quote #f))) (syntax-cdr$661$12206 x$661$14408)))) (quote #f))) ((lambda (x$661$14464) (list x$661$14464)) (syntax-car$661$12202 x$661$14408)))) (quote #f))) (syntax-cdr$661$12206 x$661$14402)))) (quote #f))) ((lambda (x$661$14466) (quote ())) (syntax-car$661$12202 x$661$14402)))) (quote #f))) t$661$14378))) t$661$14358))) ((lambda (x$661$14468) (if (syntax-pair?$661$12194 x$661$14468) (begin (quote #f) ((lambda (q$661$14470) (if q$661$14470 (begin (quote #f) ((lambda (r$661$14472) (if r$661$14472 (begin (quote #f) (append q$661$14470 r$661$14472)) (quote #f))) ((lambda (x$661$14474) (if (syntax-pair?$661$12194 x$661$14474) (begin (quote #f) ((lambda (q$661$14476) (if q$661$14476 (begin (quote #f) ((lambda (r$661$14478) (if r$661$14478 (begin (quote #f) (append q$661$14476 r$661$14478)) (quote #f))) ((lambda (x$661$14480) (if (syntax-pair?$661$12194 x$661$14480) (begin (quote #f) ((lambda (q$661$14482) (if q$661$14482 (begin (quote #f) ((lambda (r$661$14484) (if r$661$14484 (begin (quote #f) (append q$661$14482 r$661$14484)) (quote #f))) ((letrec ((f$661$14486 (lambda (x$661$14488) (if (syntax-pair?$661$12194 x$661$14488) ((lambda (cars/f$661$14490) (if cars/f$661$14490 (begin (quote #f) ((lambda (cdrs/f$661$14492) (if cdrs/f$661$14492 (begin (quote #f) (map cons cars/f$661$14490 cdrs/f$661$14492)) (quote #f))) (f$661$14486 (syntax-cdr$661$12206 x$661$14488)))) (quote #f))) ((lambda (x$661$14494) (list x$661$14494)) (syntax-car$661$12202 x$661$14488))) (if (syntax-null?$661$12198 x$661$14488) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14486) (syntax-cdr$661$12206 x$661$14480)))) (quote #f))) ((lambda (x$661$14496) (list x$661$14496)) (syntax-car$661$12202 x$661$14480)))) (quote #f))) (syntax-cdr$661$12206 x$661$14474)))) (quote #f))) ((letrec ((f$661$14498 (lambda (x$661$14500) (if (syntax-pair?$661$12194 x$661$14500) ((lambda (cars/f$661$14502) (if cars/f$661$14502 (begin (quote #f) ((lambda (cdrs/f$661$14504) (if cdrs/f$661$14504 (begin (quote #f) (map cons cars/f$661$14502 cdrs/f$661$14504)) (quote #f))) (f$661$14498 (syntax-cdr$661$12206 x$661$14500)))) (quote #f))) ((lambda (x$661$14506) (if (syntax-pair?$661$12194 x$661$14506) (begin (quote #f) ((lambda (q$661$14508) (if q$661$14508 (begin (quote #f) ((lambda (r$661$14510) (if r$661$14510 (begin (quote #f) (append q$661$14508 r$661$14510)) (quote #f))) ((lambda (x$661$14512) (if (syntax-pair?$661$12194 x$661$14512) (begin (quote #f) ((lambda (q$661$14514) (if q$661$14514 (begin (quote #f) ((lambda (r$661$14516) (if r$661$14516 (begin (quote #f) (append q$661$14514 r$661$14516)) (quote #f))) ((lambda (x$661$14518) (if (equal? (stx->datum$661$12228 x$661$14518) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14512)))) (quote #f))) ((lambda (x$661$14520) (list x$661$14520)) (syntax-car$661$12202 x$661$14512)))) (quote #f))) (syntax-cdr$661$12206 x$661$14506)))) (quote #f))) ((lambda (x$661$14522) (list x$661$14522)) (syntax-car$661$12202 x$661$14506)))) (quote #f))) (syntax-car$661$12202 x$661$14500))) (if (syntax-null?$661$12198 x$661$14500) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$661$14498) (syntax-car$661$12202 x$661$14474)))) (quote #f))) (syntax-cdr$661$12206 x$661$14468)))) (quote #f))) ((lambda (x$661$14524) (quote ())) (syntax-car$661$12202 x$661$14468)))) (quote #f))) t$661$14358))) stx$661$14356))) (set! trace-lambda-macro$661$12674 (lambda (stx$661$14526) ((lambda (t$661$14528) ((lambda (ls/false$661$14530) (if (if ls/false$661$14530 (begin (quote #f) (apply (lambda (who$661$14532 fmls$661$14533 b$661$14534 b*$661$14535) (quote #t)) ls/false$661$14530)) (quote #f)) (apply (lambda (who$661$14540 fmls$661$14541 b$661$14542 b*$661$14543) (if (valid-bound-ids?$661$12218 fmls$661$14541) (bless$661$12668 (list (quote make-traced-procedure) (list (quote quote) who$661$14540) (cons (quote lambda) (cons fmls$661$14541 (cons b$661$14542 b*$661$14543))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$661$12226 stx$661$14526 (quote ()))))) ls/false$661$14530) ((lambda (t$661$14548) ((lambda (ls/false$661$14550) (if (if ls/false$661$14550 (begin (quote #f) (apply (lambda (who$661$14552 fmls$661$14553 last$661$14554 b$661$14555 b*$661$14556) (quote #t)) ls/false$661$14550)) (quote #f)) (apply (lambda (who$661$14562 fmls$661$14563 last$661$14564 b$661$14565 b*$661$14566) (if (valid-bound-ids?$661$12218 (cons last$661$14564 fmls$661$14563)) (bless$661$12668 (list (quote make-traced-procedure) (list (quote quote) who$661$14562) (cons (quote lambda) (cons (append fmls$661$14563 last$661$14564) (cons b$661$14565 b*$661$14566))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$661$12226 stx$661$14526 (quote ()))))) ls/false$661$14550) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14548 (quote ()))))) ((lambda (x$661$14572) (if (syntax-pair?$661$12194 x$661$14572) (begin (quote #f) ((lambda (q$661$14574) (if q$661$14574 (begin (quote #f) ((lambda (r$661$14576) (if r$661$14576 (begin (quote #f) (append q$661$14574 r$661$14576)) (quote #f))) ((lambda (x$661$14578) (if (syntax-pair?$661$12194 x$661$14578) (begin (quote #f) ((lambda (q$661$14580) (if q$661$14580 (begin (quote #f) ((lambda (r$661$14582) (if r$661$14582 (begin (quote #f) (append q$661$14580 r$661$14582)) (quote #f))) ((lambda (x$661$14584) (if (syntax-pair?$661$12194 x$661$14584) (begin (quote #f) ((lambda (q$661$14586) (if q$661$14586 (begin (quote #f) ((lambda (r$661$14588) (if r$661$14588 (begin (quote #f) (append q$661$14586 r$661$14588)) (quote #f))) ((lambda (x$661$14590) (if (syntax-pair?$661$12194 x$661$14590) (begin (quote #f) ((lambda (q$661$14592) (if q$661$14592 (begin (quote #f) ((lambda (r$661$14594) (if r$661$14594 (begin (quote #f) (append q$661$14592 r$661$14594)) (quote #f))) ((letrec ((f$661$14596 (lambda (x$661$14598) (if (syntax-pair?$661$12194 x$661$14598) ((lambda (cars/f$661$14600) (if cars/f$661$14600 (begin (quote #f) ((lambda (cdrs/f$661$14602) (if cdrs/f$661$14602 (begin (quote #f) (map cons cars/f$661$14600 cdrs/f$661$14602)) (quote #f))) (f$661$14596 (syntax-cdr$661$12206 x$661$14598)))) (quote #f))) ((lambda (x$661$14604) (list x$661$14604)) (syntax-car$661$12202 x$661$14598))) (if (syntax-null?$661$12198 x$661$14598) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14596) (syntax-cdr$661$12206 x$661$14590)))) (quote #f))) ((lambda (x$661$14606) (list x$661$14606)) (syntax-car$661$12202 x$661$14590)))) (quote #f))) (syntax-cdr$661$12206 x$661$14584)))) (quote #f))) ((letrec ((f$661$14608 (lambda (x$661$14614) (if (syntax-pair?$661$12194 x$661$14614) ((lambda (cars/f$661$14616) (if cars/f$661$14616 (begin (quote #f) ((lambda (d/f$661$14618) (if d/f$661$14618 (begin (quote #f) (cons (map cons cars/f$661$14616 (car d/f$661$14618)) (cdr d/f$661$14618))) (quote #f))) (f$661$14608 (syntax-cdr$661$12206 x$661$14614)))) (quote #f))) ((lambda (x$661$14620) (list x$661$14620)) (syntax-car$661$12202 x$661$14614))) ((lambda (d$661$14622) (if d$661$14622 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) d$661$14622)) (quote #f))) ((lambda (x$661$14624) (list x$661$14624)) x$661$14614)))))) (lambda (x$661$14610) ((lambda (x$661$14612) (if x$661$14612 (begin (quote #f) (append (car x$661$14612) (cdr x$661$14612))) (quote #f))) (f$661$14608 x$661$14610)))) (syntax-car$661$12202 x$661$14584)))) (quote #f))) (syntax-cdr$661$12206 x$661$14578)))) (quote #f))) ((lambda (x$661$14626) (list x$661$14626)) (syntax-car$661$12202 x$661$14578)))) (quote #f))) (syntax-cdr$661$12206 x$661$14572)))) (quote #f))) ((lambda (x$661$14628) (quote ())) (syntax-car$661$12202 x$661$14572)))) (quote #f))) t$661$14548))) t$661$14528))) ((lambda (x$661$14630) (if (syntax-pair?$661$12194 x$661$14630) (begin (quote #f) ((lambda (q$661$14632) (if q$661$14632 (begin (quote #f) ((lambda (r$661$14634) (if r$661$14634 (begin (quote #f) (append q$661$14632 r$661$14634)) (quote #f))) ((lambda (x$661$14636) (if (syntax-pair?$661$12194 x$661$14636) (begin (quote #f) ((lambda (q$661$14638) (if q$661$14638 (begin (quote #f) ((lambda (r$661$14640) (if r$661$14640 (begin (quote #f) (append q$661$14638 r$661$14640)) (quote #f))) ((lambda (x$661$14642) (if (syntax-pair?$661$12194 x$661$14642) (begin (quote #f) ((lambda (q$661$14644) (if q$661$14644 (begin (quote #f) ((lambda (r$661$14646) (if r$661$14646 (begin (quote #f) (append q$661$14644 r$661$14646)) (quote #f))) ((lambda (x$661$14648) (if (syntax-pair?$661$12194 x$661$14648) (begin (quote #f) ((lambda (q$661$14650) (if q$661$14650 (begin (quote #f) ((lambda (r$661$14652) (if r$661$14652 (begin (quote #f) (append q$661$14650 r$661$14652)) (quote #f))) ((letrec ((f$661$14654 (lambda (x$661$14656) (if (syntax-pair?$661$12194 x$661$14656) ((lambda (cars/f$661$14658) (if cars/f$661$14658 (begin (quote #f) ((lambda (cdrs/f$661$14660) (if cdrs/f$661$14660 (begin (quote #f) (map cons cars/f$661$14658 cdrs/f$661$14660)) (quote #f))) (f$661$14654 (syntax-cdr$661$12206 x$661$14656)))) (quote #f))) ((lambda (x$661$14662) (list x$661$14662)) (syntax-car$661$12202 x$661$14656))) (if (syntax-null?$661$12198 x$661$14656) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14654) (syntax-cdr$661$12206 x$661$14648)))) (quote #f))) ((lambda (x$661$14664) (list x$661$14664)) (syntax-car$661$12202 x$661$14648)))) (quote #f))) (syntax-cdr$661$12206 x$661$14642)))) (quote #f))) ((letrec ((f$661$14666 (lambda (x$661$14668) (if (syntax-pair?$661$12194 x$661$14668) ((lambda (cars/f$661$14670) (if cars/f$661$14670 (begin (quote #f) ((lambda (cdrs/f$661$14672) (if cdrs/f$661$14672 (begin (quote #f) (map cons cars/f$661$14670 cdrs/f$661$14672)) (quote #f))) (f$661$14666 (syntax-cdr$661$12206 x$661$14668)))) (quote #f))) ((lambda (x$661$14674) (list x$661$14674)) (syntax-car$661$12202 x$661$14668))) (if (syntax-null?$661$12198 x$661$14668) (list (begin (quote fmls) (quote ()))) (quote #f)))))) f$661$14666) (syntax-car$661$12202 x$661$14642)))) (quote #f))) (syntax-cdr$661$12206 x$661$14636)))) (quote #f))) ((lambda (x$661$14676) (list x$661$14676)) (syntax-car$661$12202 x$661$14636)))) (quote #f))) (syntax-cdr$661$12206 x$661$14630)))) (quote #f))) ((lambda (x$661$14678) (quote ())) (syntax-car$661$12202 x$661$14630)))) (quote #f))) t$661$14528))) stx$661$14526))) (set! trace-define-macro$661$12676 (lambda (stx$661$14680) ((lambda (t$661$14682) ((lambda (ls/false$661$14684) (if (if ls/false$661$14684 (begin (quote #f) (apply (lambda (who$661$14686 fmls$661$14687 b$661$14688 b*$661$14689) (quote #t)) ls/false$661$14684)) (quote #f)) (apply (lambda (who$661$14694 fmls$661$14695 b$661$14696 b*$661$14697) (if (valid-bound-ids?$661$12218 fmls$661$14695) (bless$661$12668 (list (quote define) who$661$14694 (list (quote make-traced-procedure) (list (quote quote) who$661$14694) (cons (quote lambda) (cons fmls$661$14695 (cons b$661$14696 b*$661$14697)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$661$12226 stx$661$14680 (quote ()))))) ls/false$661$14684) ((lambda (t$661$14702) ((lambda (ls/false$661$14704) (if (if ls/false$661$14704 (begin (quote #f) (apply (lambda (who$661$14706 fmls$661$14707 last$661$14708 b$661$14709 b*$661$14710) (quote #t)) ls/false$661$14704)) (quote #f)) (apply (lambda (who$661$14716 fmls$661$14717 last$661$14718 b$661$14719 b*$661$14720) (if (valid-bound-ids?$661$12218 (cons last$661$14718 fmls$661$14717)) (bless$661$12668 (list (quote define) who$661$14716 (list (quote make-traced-procedure) (list (quote quote) who$661$14716) (cons (quote lambda) (cons (append fmls$661$14717 last$661$14718) (cons b$661$14719 b*$661$14720)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$661$12226 stx$661$14680 (quote ()))))) ls/false$661$14704) ((lambda (t$661$14726) ((lambda (ls/false$661$14728) (if (if ls/false$661$14728 (begin (quote #f) (apply (lambda (who$661$14730 expr$661$14731) (quote #t)) ls/false$661$14728)) (quote #f)) (apply (lambda (who$661$14734 expr$661$14735) (if (id?$661$12208 who$661$14734) (bless$661$12668 (list (quote define) who$661$14734 (list (quote let) (list (list (quote v) expr$661$14735)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) who$661$14734) (quote (v)))) (quote ((error (quote trace-define) "~s is not a procedure" v))))))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$661$12226 stx$661$14680 (quote ()))))) ls/false$661$14728) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14726 (quote ()))))) ((lambda (x$661$14738) (if (syntax-pair?$661$12194 x$661$14738) (begin (quote #f) ((lambda (q$661$14740) (if q$661$14740 (begin (quote #f) ((lambda (r$661$14742) (if r$661$14742 (begin (quote #f) (append q$661$14740 r$661$14742)) (quote #f))) ((lambda (x$661$14744) (if (syntax-pair?$661$12194 x$661$14744) (begin (quote #f) ((lambda (q$661$14746) (if q$661$14746 (begin (quote #f) ((lambda (r$661$14748) (if r$661$14748 (begin (quote #f) (append q$661$14746 r$661$14748)) (quote #f))) ((lambda (x$661$14750) (if (syntax-pair?$661$12194 x$661$14750) (begin (quote #f) ((lambda (q$661$14752) (if q$661$14752 (begin (quote #f) ((lambda (r$661$14754) (if r$661$14754 (begin (quote #f) (append q$661$14752 r$661$14754)) (quote #f))) ((lambda (x$661$14756) (if (equal? (stx->datum$661$12228 x$661$14756) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14750)))) (quote #f))) ((lambda (x$661$14758) (list x$661$14758)) (syntax-car$661$12202 x$661$14750)))) (quote #f))) (syntax-cdr$661$12206 x$661$14744)))) (quote #f))) ((lambda (x$661$14760) (list x$661$14760)) (syntax-car$661$12202 x$661$14744)))) (quote #f))) (syntax-cdr$661$12206 x$661$14738)))) (quote #f))) ((lambda (x$661$14762) (quote ())) (syntax-car$661$12202 x$661$14738)))) (quote #f))) t$661$14726))) t$661$14702))) ((lambda (x$661$14764) (if (syntax-pair?$661$12194 x$661$14764) (begin (quote #f) ((lambda (q$661$14766) (if q$661$14766 (begin (quote #f) ((lambda (r$661$14768) (if r$661$14768 (begin (quote #f) (append q$661$14766 r$661$14768)) (quote #f))) ((lambda (x$661$14770) (if (syntax-pair?$661$12194 x$661$14770) (begin (quote #f) ((lambda (q$661$14772) (if q$661$14772 (begin (quote #f) ((lambda (r$661$14774) (if r$661$14774 (begin (quote #f) (append q$661$14772 r$661$14774)) (quote #f))) ((lambda (x$661$14776) (if (syntax-pair?$661$12194 x$661$14776) (begin (quote #f) ((lambda (q$661$14778) (if q$661$14778 (begin (quote #f) ((lambda (r$661$14780) (if r$661$14780 (begin (quote #f) (append q$661$14778 r$661$14780)) (quote #f))) ((letrec ((f$661$14782 (lambda (x$661$14784) (if (syntax-pair?$661$12194 x$661$14784) ((lambda (cars/f$661$14786) (if cars/f$661$14786 (begin (quote #f) ((lambda (cdrs/f$661$14788) (if cdrs/f$661$14788 (begin (quote #f) (map cons cars/f$661$14786 cdrs/f$661$14788)) (quote #f))) (f$661$14782 (syntax-cdr$661$12206 x$661$14784)))) (quote #f))) ((lambda (x$661$14790) (list x$661$14790)) (syntax-car$661$12202 x$661$14784))) (if (syntax-null?$661$12198 x$661$14784) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14782) (syntax-cdr$661$12206 x$661$14776)))) (quote #f))) ((lambda (x$661$14792) (list x$661$14792)) (syntax-car$661$12202 x$661$14776)))) (quote #f))) (syntax-cdr$661$12206 x$661$14770)))) (quote #f))) ((lambda (x$661$14794) (if (syntax-pair?$661$12194 x$661$14794) (begin (quote #f) ((lambda (q$661$14796) (if q$661$14796 (begin (quote #f) ((lambda (r$661$14798) (if r$661$14798 (begin (quote #f) (append q$661$14796 r$661$14798)) (quote #f))) ((letrec ((f$661$14800 (lambda (x$661$14806) (if (syntax-pair?$661$12194 x$661$14806) ((lambda (cars/f$661$14808) (if cars/f$661$14808 (begin (quote #f) ((lambda (d/f$661$14810) (if d/f$661$14810 (begin (quote #f) (cons (map cons cars/f$661$14808 (car d/f$661$14810)) (cdr d/f$661$14810))) (quote #f))) (f$661$14800 (syntax-cdr$661$12206 x$661$14806)))) (quote #f))) ((lambda (x$661$14812) (list x$661$14812)) (syntax-car$661$12202 x$661$14806))) ((lambda (d$661$14814) (if d$661$14814 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) d$661$14814)) (quote #f))) ((lambda (x$661$14816) (list x$661$14816)) x$661$14806)))))) (lambda (x$661$14802) ((lambda (x$661$14804) (if x$661$14804 (begin (quote #f) (append (car x$661$14804) (cdr x$661$14804))) (quote #f))) (f$661$14800 x$661$14802)))) (syntax-cdr$661$12206 x$661$14794)))) (quote #f))) ((lambda (x$661$14818) (list x$661$14818)) (syntax-car$661$12202 x$661$14794)))) (quote #f))) (syntax-car$661$12202 x$661$14770)))) (quote #f))) (syntax-cdr$661$12206 x$661$14764)))) (quote #f))) ((lambda (x$661$14820) (quote ())) (syntax-car$661$12202 x$661$14764)))) (quote #f))) t$661$14702))) t$661$14682))) ((lambda (x$661$14822) (if (syntax-pair?$661$12194 x$661$14822) (begin (quote #f) ((lambda (q$661$14824) (if q$661$14824 (begin (quote #f) ((lambda (r$661$14826) (if r$661$14826 (begin (quote #f) (append q$661$14824 r$661$14826)) (quote #f))) ((lambda (x$661$14828) (if (syntax-pair?$661$12194 x$661$14828) (begin (quote #f) ((lambda (q$661$14830) (if q$661$14830 (begin (quote #f) ((lambda (r$661$14832) (if r$661$14832 (begin (quote #f) (append q$661$14830 r$661$14832)) (quote #f))) ((lambda (x$661$14834) (if (syntax-pair?$661$12194 x$661$14834) (begin (quote #f) ((lambda (q$661$14836) (if q$661$14836 (begin (quote #f) ((lambda (r$661$14838) (if r$661$14838 (begin (quote #f) (append q$661$14836 r$661$14838)) (quote #f))) ((letrec ((f$661$14840 (lambda (x$661$14842) (if (syntax-pair?$661$12194 x$661$14842) ((lambda (cars/f$661$14844) (if cars/f$661$14844 (begin (quote #f) ((lambda (cdrs/f$661$14846) (if cdrs/f$661$14846 (begin (quote #f) (map cons cars/f$661$14844 cdrs/f$661$14846)) (quote #f))) (f$661$14840 (syntax-cdr$661$12206 x$661$14842)))) (quote #f))) ((lambda (x$661$14848) (list x$661$14848)) (syntax-car$661$12202 x$661$14842))) (if (syntax-null?$661$12198 x$661$14842) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$14840) (syntax-cdr$661$12206 x$661$14834)))) (quote #f))) ((lambda (x$661$14850) (list x$661$14850)) (syntax-car$661$12202 x$661$14834)))) (quote #f))) (syntax-cdr$661$12206 x$661$14828)))) (quote #f))) ((lambda (x$661$14852) (if (syntax-pair?$661$12194 x$661$14852) (begin (quote #f) ((lambda (q$661$14854) (if q$661$14854 (begin (quote #f) ((lambda (r$661$14856) (if r$661$14856 (begin (quote #f) (append q$661$14854 r$661$14856)) (quote #f))) ((letrec ((f$661$14858 (lambda (x$661$14860) (if (syntax-pair?$661$12194 x$661$14860) ((lambda (cars/f$661$14862) (if cars/f$661$14862 (begin (quote #f) ((lambda (cdrs/f$661$14864) (if cdrs/f$661$14864 (begin (quote #f) (map cons cars/f$661$14862 cdrs/f$661$14864)) (quote #f))) (f$661$14858 (syntax-cdr$661$12206 x$661$14860)))) (quote #f))) ((lambda (x$661$14866) (list x$661$14866)) (syntax-car$661$12202 x$661$14860))) (if (syntax-null?$661$12198 x$661$14860) (list (begin (quote fmls) (quote ()))) (quote #f)))))) f$661$14858) (syntax-cdr$661$12206 x$661$14852)))) (quote #f))) ((lambda (x$661$14868) (list x$661$14868)) (syntax-car$661$12202 x$661$14852)))) (quote #f))) (syntax-car$661$12202 x$661$14828)))) (quote #f))) (syntax-cdr$661$12206 x$661$14822)))) (quote #f))) ((lambda (x$661$14870) (quote ())) (syntax-car$661$12202 x$661$14822)))) (quote #f))) t$661$14682))) stx$661$14680))) (set! time-macro$661$12678 (lambda (stx$661$14872) ((lambda (t$661$14874) ((lambda (ls/false$661$14876) (if (if ls/false$661$14876 (begin (quote #f) (apply (lambda (expr$661$14878) (quote #t)) ls/false$661$14876)) (quote #f)) (apply (lambda (expr$661$14880) (bless$661$12668 (list (quote time-it) (list (quote quote) expr$661$14880) (list (quote lambda) (quote ()) expr$661$14880)))) ls/false$661$14876) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14874 (quote ()))))) ((lambda (x$661$14882) (if (syntax-pair?$661$12194 x$661$14882) (begin (quote #f) ((lambda (q$661$14884) (if q$661$14884 (begin (quote #f) ((lambda (r$661$14886) (if r$661$14886 (begin (quote #f) (append q$661$14884 r$661$14886)) (quote #f))) ((lambda (x$661$14888) (if (syntax-pair?$661$12194 x$661$14888) (begin (quote #f) ((lambda (q$661$14890) (if q$661$14890 (begin (quote #f) ((lambda (r$661$14892) (if r$661$14892 (begin (quote #f) (append q$661$14890 r$661$14892)) (quote #f))) ((lambda (x$661$14894) (if (equal? (stx->datum$661$12228 x$661$14894) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14888)))) (quote #f))) ((lambda (x$661$14896) (list x$661$14896)) (syntax-car$661$12202 x$661$14888)))) (quote #f))) (syntax-cdr$661$12206 x$661$14882)))) (quote #f))) ((lambda (x$661$14898) (quote ())) (syntax-car$661$12202 x$661$14882)))) (quote #f))) t$661$14874))) stx$661$14872))) (set! delay-macro$661$12680 (lambda (stx$661$14900) ((lambda (t$661$14902) ((lambda (ls/false$661$14904) (if (if ls/false$661$14904 (begin (quote #f) (apply (lambda (expr$661$14906) (quote #t)) ls/false$661$14904)) (quote #f)) (apply (lambda (expr$661$14908) (bless$661$12668 (list (quote make-promise) (list (quote lambda) (quote ()) expr$661$14908)))) ls/false$661$14904) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14902 (quote ()))))) ((lambda (x$661$14910) (if (syntax-pair?$661$12194 x$661$14910) (begin (quote #f) ((lambda (q$661$14912) (if q$661$14912 (begin (quote #f) ((lambda (r$661$14914) (if r$661$14914 (begin (quote #f) (append q$661$14912 r$661$14914)) (quote #f))) ((lambda (x$661$14916) (if (syntax-pair?$661$12194 x$661$14916) (begin (quote #f) ((lambda (q$661$14918) (if q$661$14918 (begin (quote #f) ((lambda (r$661$14920) (if r$661$14920 (begin (quote #f) (append q$661$14918 r$661$14920)) (quote #f))) ((lambda (x$661$14922) (if (equal? (stx->datum$661$12228 x$661$14922) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14916)))) (quote #f))) ((lambda (x$661$14924) (list x$661$14924)) (syntax-car$661$12202 x$661$14916)))) (quote #f))) (syntax-cdr$661$12206 x$661$14910)))) (quote #f))) ((lambda (x$661$14926) (quote ())) (syntax-car$661$12202 x$661$14910)))) (quote #f))) t$661$14902))) stx$661$14900))) (set! assert-macro$661$12682 (lambda (stx$661$14928) ((lambda (t$661$14930) ((lambda (ls/false$661$14932) (if (if ls/false$661$14932 (begin (quote #f) (apply (lambda (expr$661$14934) (quote #t)) ls/false$661$14932)) (quote #f)) (apply (lambda (expr$661$14936) (bless$661$12668 (list (quote unless) expr$661$14936 (list (quote error) (quote (quote assert)) (quote "~s failed") (list (quote quote) expr$661$14936))))) ls/false$661$14932) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14930 (quote ()))))) ((lambda (x$661$14938) (if (syntax-pair?$661$12194 x$661$14938) (begin (quote #f) ((lambda (q$661$14940) (if q$661$14940 (begin (quote #f) ((lambda (r$661$14942) (if r$661$14942 (begin (quote #f) (append q$661$14940 r$661$14942)) (quote #f))) ((lambda (x$661$14944) (if (syntax-pair?$661$12194 x$661$14944) (begin (quote #f) ((lambda (q$661$14946) (if q$661$14946 (begin (quote #f) ((lambda (r$661$14948) (if r$661$14948 (begin (quote #f) (append q$661$14946 r$661$14948)) (quote #f))) ((lambda (x$661$14950) (if (equal? (stx->datum$661$12228 x$661$14950) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14944)))) (quote #f))) ((lambda (x$661$14952) (list x$661$14952)) (syntax-car$661$12202 x$661$14944)))) (quote #f))) (syntax-cdr$661$12206 x$661$14938)))) (quote #f))) ((lambda (x$661$14954) (quote ())) (syntax-car$661$12202 x$661$14938)))) (quote #f))) t$661$14930))) stx$661$14928))) (set! endianness-macro$661$12684 (lambda (stx$661$14956) ((lambda (t$661$14958) ((lambda (ls/false$661$14960) (if (if ls/false$661$14960 (begin (quote #f) (apply (lambda (e$661$14962) (quote #t)) ls/false$661$14960)) (quote #f)) (apply (lambda (e$661$14964) ((lambda (t$661$14966) (if (memv t$661$14966 (quote (little))) (bless$661$12668 (quote (quote little))) (if (memv t$661$14966 (quote (big))) (bless$661$12668 (quote (quote big))) (error (quote expander) (quote "~a ~s") (quote "endianness must be big or little") (strip$661$12226 stx$661$14956 (quote ())))))) (syntax->datum$661$12851 e$661$14964))) ls/false$661$14960) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14958 (quote ()))))) ((lambda (x$661$14967) (if (syntax-pair?$661$12194 x$661$14967) (begin (quote #f) ((lambda (q$661$14969) (if q$661$14969 (begin (quote #f) ((lambda (r$661$14971) (if r$661$14971 (begin (quote #f) (append q$661$14969 r$661$14971)) (quote #f))) ((lambda (x$661$14973) (if (syntax-pair?$661$12194 x$661$14973) (begin (quote #f) ((lambda (q$661$14975) (if q$661$14975 (begin (quote #f) ((lambda (r$661$14977) (if r$661$14977 (begin (quote #f) (append q$661$14975 r$661$14977)) (quote #f))) ((lambda (x$661$14979) (if (equal? (stx->datum$661$12228 x$661$14979) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$14973)))) (quote #f))) ((lambda (x$661$14981) (list x$661$14981)) (syntax-car$661$12202 x$661$14973)))) (quote #f))) (syntax-cdr$661$12206 x$661$14967)))) (quote #f))) ((lambda (x$661$14983) (quote ())) (syntax-car$661$12202 x$661$14967)))) (quote #f))) t$661$14958))) stx$661$14956))) (set! identifier-syntax-macro$661$12686 (lambda (stx$661$14985) ((lambda (t$661$14987) ((lambda (ls/false$661$14989) (if (if ls/false$661$14989 (begin (quote #f) (apply (lambda (expr$661$14991) (quote #t)) ls/false$661$14989)) (quote #f)) (apply (lambda (expr$661$14993) (bless$661$12668 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) expr$661$14993)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) expr$661$14993) (quote ((syntax (e* ...))))))))))) ls/false$661$14989) ((lambda (t$661$14995) ((lambda (ls/false$661$14997) (if (if ls/false$661$14997 (begin (quote #f) (apply (lambda (id1$661$14999 expr1$661$15000 id2$661$15001 expr2$661$15002 expr3$661$15003) (if (id?$661$12208 id1$661$14999) (if (id?$661$12208 id2$661$15001) (begin (quote #f) (id?$661$12208 expr2$661$15002)) (quote #f)) (quote #f))) ls/false$661$14997)) (quote #f)) (apply (lambda (id1$661$15009 expr1$661$15010 id2$661$15011 expr2$661$15012 expr3$661$15013) (bless$661$12668 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) expr1$661$15010)) (list (list (quote set!) (quote id) expr2$661$15012) (list (quote syntax) expr3$661$15013)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (list (quote syntax) (cons expr1$661$15010 (quote (e* ...)))))))))) ls/false$661$14997) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$14995 (quote ()))))) ((lambda (x$661$15019) (if (syntax-pair?$661$12194 x$661$15019) (begin (quote #f) ((lambda (q$661$15021) (if q$661$15021 (begin (quote #f) ((lambda (r$661$15023) (if r$661$15023 (begin (quote #f) (append q$661$15021 r$661$15023)) (quote #f))) ((lambda (x$661$15025) (if (syntax-pair?$661$12194 x$661$15025) (begin (quote #f) ((lambda (q$661$15027) (if q$661$15027 (begin (quote #f) ((lambda (r$661$15029) (if r$661$15029 (begin (quote #f) (append q$661$15027 r$661$15029)) (quote #f))) ((lambda (x$661$15031) (if (syntax-pair?$661$12194 x$661$15031) (begin (quote #f) ((lambda (q$661$15033) (if q$661$15033 (begin (quote #f) ((lambda (r$661$15035) (if r$661$15035 (begin (quote #f) (append q$661$15033 r$661$15035)) (quote #f))) ((lambda (x$661$15037) (if (equal? (stx->datum$661$12228 x$661$15037) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15031)))) (quote #f))) ((lambda (x$661$15039) (if (syntax-pair?$661$12194 x$661$15039) (begin (quote #f) ((lambda (q$661$15041) (if q$661$15041 (begin (quote #f) ((lambda (r$661$15043) (if r$661$15043 (begin (quote #f) (append q$661$15041 r$661$15043)) (quote #f))) ((lambda (x$661$15045) (if (syntax-pair?$661$12194 x$661$15045) (begin (quote #f) ((lambda (q$661$15047) (if q$661$15047 (begin (quote #f) ((lambda (r$661$15049) (if r$661$15049 (begin (quote #f) (append q$661$15047 r$661$15049)) (quote #f))) ((lambda (x$661$15051) (if (equal? (stx->datum$661$12228 x$661$15051) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15045)))) (quote #f))) ((lambda (x$661$15053) (list x$661$15053)) (syntax-car$661$12202 x$661$15045)))) (quote #f))) (syntax-cdr$661$12206 x$661$15039)))) (quote #f))) ((lambda (x$661$15055) (if (syntax-pair?$661$12194 x$661$15055) (begin (quote #f) ((lambda (q$661$15057) (if q$661$15057 (begin (quote #f) ((lambda (r$661$15059) (if r$661$15059 (begin (quote #f) (append q$661$15057 r$661$15059)) (quote #f))) ((lambda (x$661$15061) (if (syntax-pair?$661$12194 x$661$15061) (begin (quote #f) ((lambda (q$661$15063) (if q$661$15063 (begin (quote #f) ((lambda (r$661$15065) (if r$661$15065 (begin (quote #f) (append q$661$15063 r$661$15065)) (quote #f))) ((lambda (x$661$15067) (if (syntax-pair?$661$12194 x$661$15067) (begin (quote #f) ((lambda (q$661$15069) (if q$661$15069 (begin (quote #f) ((lambda (r$661$15071) (if r$661$15071 (begin (quote #f) (append q$661$15069 r$661$15071)) (quote #f))) ((lambda (x$661$15073) (if (equal? (stx->datum$661$12228 x$661$15073) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15067)))) (quote #f))) ((lambda (x$661$15075) (list x$661$15075)) (syntax-car$661$12202 x$661$15067)))) (quote #f))) (syntax-cdr$661$12206 x$661$15061)))) (quote #f))) ((lambda (x$661$15077) (list x$661$15077)) (syntax-car$661$12202 x$661$15061)))) (quote #f))) (syntax-cdr$661$12206 x$661$15055)))) (quote #f))) ((lambda (x$661$15079) (if (id?$661$12208 x$661$15079) (if (free-id=?$661$12216 x$661$15079 (scheme-stx$661$12638 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$15055)))) (quote #f))) (syntax-car$661$12202 x$661$15039)))) (quote #f))) (syntax-car$661$12202 x$661$15031)))) (quote #f))) (syntax-cdr$661$12206 x$661$15025)))) (quote #f))) ((lambda (x$661$15081) (if (syntax-pair?$661$12194 x$661$15081) (begin (quote #f) ((lambda (q$661$15083) (if q$661$15083 (begin (quote #f) ((lambda (r$661$15085) (if r$661$15085 (begin (quote #f) (append q$661$15083 r$661$15085)) (quote #f))) ((lambda (x$661$15087) (if (syntax-pair?$661$12194 x$661$15087) (begin (quote #f) ((lambda (q$661$15089) (if q$661$15089 (begin (quote #f) ((lambda (r$661$15091) (if r$661$15091 (begin (quote #f) (append q$661$15089 r$661$15091)) (quote #f))) ((lambda (x$661$15093) (if (equal? (stx->datum$661$12228 x$661$15093) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15087)))) (quote #f))) ((lambda (x$661$15095) (list x$661$15095)) (syntax-car$661$12202 x$661$15087)))) (quote #f))) (syntax-cdr$661$12206 x$661$15081)))) (quote #f))) ((lambda (x$661$15097) (list x$661$15097)) (syntax-car$661$12202 x$661$15081)))) (quote #f))) (syntax-car$661$12202 x$661$15025)))) (quote #f))) (syntax-cdr$661$12206 x$661$15019)))) (quote #f))) ((lambda (x$661$15099) (quote ())) (syntax-car$661$12202 x$661$15019)))) (quote #f))) t$661$14995))) t$661$14987))) ((lambda (x$661$15101) (if (syntax-pair?$661$12194 x$661$15101) (begin (quote #f) ((lambda (q$661$15103) (if q$661$15103 (begin (quote #f) ((lambda (r$661$15105) (if r$661$15105 (begin (quote #f) (append q$661$15103 r$661$15105)) (quote #f))) ((lambda (x$661$15107) (if (syntax-pair?$661$12194 x$661$15107) (begin (quote #f) ((lambda (q$661$15109) (if q$661$15109 (begin (quote #f) ((lambda (r$661$15111) (if r$661$15111 (begin (quote #f) (append q$661$15109 r$661$15111)) (quote #f))) ((lambda (x$661$15113) (if (equal? (stx->datum$661$12228 x$661$15113) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15107)))) (quote #f))) ((lambda (x$661$15115) (list x$661$15115)) (syntax-car$661$12202 x$661$15107)))) (quote #f))) (syntax-cdr$661$12206 x$661$15101)))) (quote #f))) ((lambda (x$661$15117) (quote ())) (syntax-car$661$12202 x$661$15101)))) (quote #f))) t$661$14987))) stx$661$14985))) (set! do-macro$661$12688 (lambda (stx$661$15119) ((lambda (bind$661$15121) (begin (set! bind$661$15121 (lambda (x$661$15123) ((lambda (t$661$15125) ((lambda (ls/false$661$15127) (if (if ls/false$661$15127 (begin (quote #f) (apply (lambda (x$661$15129 init$661$15130) (quote #t)) ls/false$661$15127)) (quote #f)) (apply (lambda (x$661$15133 init$661$15134) (list x$661$15133 init$661$15134 x$661$15133)) ls/false$661$15127) ((lambda (t$661$15137) ((lambda (ls/false$661$15139) (if (if ls/false$661$15139 (begin (quote #f) (apply (lambda (x$661$15141 init$661$15142 step$661$15143) (quote #t)) ls/false$661$15139)) (quote #f)) (apply (lambda (x$661$15147 init$661$15148 step$661$15149) (list x$661$15147 init$661$15148 step$661$15149)) ls/false$661$15139) ((lambda (t$661$15153) ((lambda (ls/false$661$15155) (if (if ls/false$661$15155 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$15155)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid binding") (strip$661$12226 stx$661$15119 (quote ())))) ls/false$661$15155) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15153 (quote ()))))) ((lambda (x$661$15157) (quote ())) t$661$15153))) t$661$15137))) ((lambda (x$661$15159) (if (syntax-pair?$661$12194 x$661$15159) (begin (quote #f) ((lambda (q$661$15161) (if q$661$15161 (begin (quote #f) ((lambda (r$661$15163) (if r$661$15163 (begin (quote #f) (append q$661$15161 r$661$15163)) (quote #f))) ((lambda (x$661$15165) (if (syntax-pair?$661$12194 x$661$15165) (begin (quote #f) ((lambda (q$661$15167) (if q$661$15167 (begin (quote #f) ((lambda (r$661$15169) (if r$661$15169 (begin (quote #f) (append q$661$15167 r$661$15169)) (quote #f))) ((lambda (x$661$15171) (if (syntax-pair?$661$12194 x$661$15171) (begin (quote #f) ((lambda (q$661$15173) (if q$661$15173 (begin (quote #f) ((lambda (r$661$15175) (if r$661$15175 (begin (quote #f) (append q$661$15173 r$661$15175)) (quote #f))) ((lambda (x$661$15177) (if (equal? (stx->datum$661$12228 x$661$15177) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15171)))) (quote #f))) ((lambda (x$661$15179) (list x$661$15179)) (syntax-car$661$12202 x$661$15171)))) (quote #f))) (syntax-cdr$661$12206 x$661$15165)))) (quote #f))) ((lambda (x$661$15181) (list x$661$15181)) (syntax-car$661$12202 x$661$15165)))) (quote #f))) (syntax-cdr$661$12206 x$661$15159)))) (quote #f))) ((lambda (x$661$15183) (list x$661$15183)) (syntax-car$661$12202 x$661$15159)))) (quote #f))) t$661$15137))) t$661$15125))) ((lambda (x$661$15185) (if (syntax-pair?$661$12194 x$661$15185) (begin (quote #f) ((lambda (q$661$15187) (if q$661$15187 (begin (quote #f) ((lambda (r$661$15189) (if r$661$15189 (begin (quote #f) (append q$661$15187 r$661$15189)) (quote #f))) ((lambda (x$661$15191) (if (syntax-pair?$661$12194 x$661$15191) (begin (quote #f) ((lambda (q$661$15193) (if q$661$15193 (begin (quote #f) ((lambda (r$661$15195) (if r$661$15195 (begin (quote #f) (append q$661$15193 r$661$15195)) (quote #f))) ((lambda (x$661$15197) (if (equal? (stx->datum$661$12228 x$661$15197) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15191)))) (quote #f))) ((lambda (x$661$15199) (list x$661$15199)) (syntax-car$661$12202 x$661$15191)))) (quote #f))) (syntax-cdr$661$12206 x$661$15185)))) (quote #f))) ((lambda (x$661$15201) (list x$661$15201)) (syntax-car$661$12202 x$661$15185)))) (quote #f))) t$661$15125))) x$661$15123))) ((lambda (t$661$15203) ((lambda (ls/false$661$15205) (if (if ls/false$661$15205 (begin (quote #f) (apply (lambda (binding*$661$15207 test$661$15208 expr*$661$15209 command*$661$15210) (quote #t)) ls/false$661$15205)) (quote #f)) (apply (lambda (binding*$661$15215 test$661$15216 expr*$661$15217 command*$661$15218) ((lambda (t$661$15223) ((lambda (ls/false$661$15225) (if (if ls/false$661$15225 (begin (quote #f) (apply (lambda (x*$661$15227 init*$661$15228 step*$661$15229) (quote #t)) ls/false$661$15225)) (quote #f)) (apply (lambda (x*$661$15233 init*$661$15234 step*$661$15235) (if (valid-bound-ids?$661$12218 x*$661$15233) (bless$661$12668 (list (quote letrec) (list (list (quote loop) (list (quote lambda) x*$661$15233 (list (quote if) test$661$15216 (cons (quote begin) (cons (quote (if #f #f)) expr*$661$15217)) (cons (quote begin) (append command*$661$15218 (list (cons (quote loop) step*$661$15235)))))))) (cons (quote loop) init*$661$15234))) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (strip$661$12226 stx$661$15119 (quote ()))))) ls/false$661$15225) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15223 (quote ()))))) ((letrec ((f$661$15239 (lambda (x$661$15241) (if (syntax-pair?$661$12194 x$661$15241) ((lambda (cars/f$661$15243) (if cars/f$661$15243 (begin (quote #f) ((lambda (cdrs/f$661$15245) (if cdrs/f$661$15245 (begin (quote #f) (map cons cars/f$661$15243 cdrs/f$661$15245)) (quote #f))) (f$661$15239 (syntax-cdr$661$12206 x$661$15241)))) (quote #f))) ((lambda (x$661$15247) (if (syntax-pair?$661$12194 x$661$15247) (begin (quote #f) ((lambda (q$661$15249) (if q$661$15249 (begin (quote #f) ((lambda (r$661$15251) (if r$661$15251 (begin (quote #f) (append q$661$15249 r$661$15251)) (quote #f))) ((lambda (x$661$15253) (if (syntax-pair?$661$12194 x$661$15253) (begin (quote #f) ((lambda (q$661$15255) (if q$661$15255 (begin (quote #f) ((lambda (r$661$15257) (if r$661$15257 (begin (quote #f) (append q$661$15255 r$661$15257)) (quote #f))) ((lambda (x$661$15259) (if (syntax-pair?$661$12194 x$661$15259) (begin (quote #f) ((lambda (q$661$15261) (if q$661$15261 (begin (quote #f) ((lambda (r$661$15263) (if r$661$15263 (begin (quote #f) (append q$661$15261 r$661$15263)) (quote #f))) ((lambda (x$661$15265) (if (equal? (stx->datum$661$12228 x$661$15265) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15259)))) (quote #f))) ((lambda (x$661$15267) (list x$661$15267)) (syntax-car$661$12202 x$661$15259)))) (quote #f))) (syntax-cdr$661$12206 x$661$15253)))) (quote #f))) ((lambda (x$661$15269) (list x$661$15269)) (syntax-car$661$12202 x$661$15253)))) (quote #f))) (syntax-cdr$661$12206 x$661$15247)))) (quote #f))) ((lambda (x$661$15271) (list x$661$15271)) (syntax-car$661$12202 x$661$15247)))) (quote #f))) (syntax-car$661$12202 x$661$15241))) (if (syntax-null?$661$12198 x$661$15241) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) f$661$15239) t$661$15223))) (map bind$661$15121 binding*$661$15215))) ls/false$661$15205) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15203 (quote ()))))) ((lambda (x$661$15273) (if (syntax-pair?$661$12194 x$661$15273) (begin (quote #f) ((lambda (q$661$15275) (if q$661$15275 (begin (quote #f) ((lambda (r$661$15277) (if r$661$15277 (begin (quote #f) (append q$661$15275 r$661$15277)) (quote #f))) ((lambda (x$661$15279) (if (syntax-pair?$661$12194 x$661$15279) (begin (quote #f) ((lambda (q$661$15281) (if q$661$15281 (begin (quote #f) ((lambda (r$661$15283) (if r$661$15283 (begin (quote #f) (append q$661$15281 r$661$15283)) (quote #f))) ((lambda (x$661$15285) (if (syntax-pair?$661$12194 x$661$15285) (begin (quote #f) ((lambda (q$661$15287) (if q$661$15287 (begin (quote #f) ((lambda (r$661$15289) (if r$661$15289 (begin (quote #f) (append q$661$15287 r$661$15289)) (quote #f))) ((letrec ((f$661$15291 (lambda (x$661$15293) (if (syntax-pair?$661$12194 x$661$15293) ((lambda (cars/f$661$15295) (if cars/f$661$15295 (begin (quote #f) ((lambda (cdrs/f$661$15297) (if cdrs/f$661$15297 (begin (quote #f) (map cons cars/f$661$15295 cdrs/f$661$15297)) (quote #f))) (f$661$15291 (syntax-cdr$661$12206 x$661$15293)))) (quote #f))) ((lambda (x$661$15299) (list x$661$15299)) (syntax-car$661$12202 x$661$15293))) (if (syntax-null?$661$12198 x$661$15293) (list (begin (quote command*) (quote ()))) (quote #f)))))) f$661$15291) (syntax-cdr$661$12206 x$661$15285)))) (quote #f))) ((lambda (x$661$15301) (if (syntax-pair?$661$12194 x$661$15301) (begin (quote #f) ((lambda (q$661$15303) (if q$661$15303 (begin (quote #f) ((lambda (r$661$15305) (if r$661$15305 (begin (quote #f) (append q$661$15303 r$661$15305)) (quote #f))) ((letrec ((f$661$15307 (lambda (x$661$15309) (if (syntax-pair?$661$12194 x$661$15309) ((lambda (cars/f$661$15311) (if cars/f$661$15311 (begin (quote #f) ((lambda (cdrs/f$661$15313) (if cdrs/f$661$15313 (begin (quote #f) (map cons cars/f$661$15311 cdrs/f$661$15313)) (quote #f))) (f$661$15307 (syntax-cdr$661$12206 x$661$15309)))) (quote #f))) ((lambda (x$661$15315) (list x$661$15315)) (syntax-car$661$12202 x$661$15309))) (if (syntax-null?$661$12198 x$661$15309) (list (begin (quote expr*) (quote ()))) (quote #f)))))) f$661$15307) (syntax-cdr$661$12206 x$661$15301)))) (quote #f))) ((lambda (x$661$15317) (list x$661$15317)) (syntax-car$661$12202 x$661$15301)))) (quote #f))) (syntax-car$661$12202 x$661$15285)))) (quote #f))) (syntax-cdr$661$12206 x$661$15279)))) (quote #f))) ((letrec ((f$661$15319 (lambda (x$661$15321) (if (syntax-pair?$661$12194 x$661$15321) ((lambda (cars/f$661$15323) (if cars/f$661$15323 (begin (quote #f) ((lambda (cdrs/f$661$15325) (if cdrs/f$661$15325 (begin (quote #f) (map cons cars/f$661$15323 cdrs/f$661$15325)) (quote #f))) (f$661$15319 (syntax-cdr$661$12206 x$661$15321)))) (quote #f))) ((lambda (x$661$15327) (list x$661$15327)) (syntax-car$661$12202 x$661$15321))) (if (syntax-null?$661$12198 x$661$15321) (list (begin (quote binding*) (quote ()))) (quote #f)))))) f$661$15319) (syntax-car$661$12202 x$661$15279)))) (quote #f))) (syntax-cdr$661$12206 x$661$15273)))) (quote #f))) ((lambda (x$661$15329) (quote ())) (syntax-car$661$12202 x$661$15273)))) (quote #f))) t$661$15203))) stx$661$15119))) (quote #f)))) (set! let*-macro$661$12690 (lambda (stx$661$15331) ((lambda (t$661$15333) ((lambda (ls/false$661$15335) (if (if ls/false$661$15335 (begin (quote #f) (apply (lambda (lhs*$661$15337 rhs*$661$15338 b$661$15339 b*$661$15340) (for-all id?$661$12208 lhs*$661$15337)) ls/false$661$15335)) (quote #f)) (apply (lambda (lhs*$661$15345 rhs*$661$15346 b$661$15347 b*$661$15348) (bless$661$12668 (letrec ((f$661$15353 (lambda (x*$661$15355) (if (null? x*$661$15355) (cons (quote let) (cons (quote ()) (cons b$661$15347 b*$661$15348))) (list (quote let) (list (car x*$661$15355)) (f$661$15353 (cdr x*$661$15355))))))) (f$661$15353 (map list lhs*$661$15345 rhs*$661$15346))))) ls/false$661$15335) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15333 (quote ()))))) ((lambda (x$661$15357) (if (syntax-pair?$661$12194 x$661$15357) (begin (quote #f) ((lambda (q$661$15359) (if q$661$15359 (begin (quote #f) ((lambda (r$661$15361) (if r$661$15361 (begin (quote #f) (append q$661$15359 r$661$15361)) (quote #f))) ((lambda (x$661$15363) (if (syntax-pair?$661$12194 x$661$15363) (begin (quote #f) ((lambda (q$661$15365) (if q$661$15365 (begin (quote #f) ((lambda (r$661$15367) (if r$661$15367 (begin (quote #f) (append q$661$15365 r$661$15367)) (quote #f))) ((lambda (x$661$15369) (if (syntax-pair?$661$12194 x$661$15369) (begin (quote #f) ((lambda (q$661$15371) (if q$661$15371 (begin (quote #f) ((lambda (r$661$15373) (if r$661$15373 (begin (quote #f) (append q$661$15371 r$661$15373)) (quote #f))) ((letrec ((f$661$15375 (lambda (x$661$15377) (if (syntax-pair?$661$12194 x$661$15377) ((lambda (cars/f$661$15379) (if cars/f$661$15379 (begin (quote #f) ((lambda (cdrs/f$661$15381) (if cdrs/f$661$15381 (begin (quote #f) (map cons cars/f$661$15379 cdrs/f$661$15381)) (quote #f))) (f$661$15375 (syntax-cdr$661$12206 x$661$15377)))) (quote #f))) ((lambda (x$661$15383) (list x$661$15383)) (syntax-car$661$12202 x$661$15377))) (if (syntax-null?$661$12198 x$661$15377) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$15375) (syntax-cdr$661$12206 x$661$15369)))) (quote #f))) ((lambda (x$661$15385) (list x$661$15385)) (syntax-car$661$12202 x$661$15369)))) (quote #f))) (syntax-cdr$661$12206 x$661$15363)))) (quote #f))) ((letrec ((f$661$15387 (lambda (x$661$15389) (if (syntax-pair?$661$12194 x$661$15389) ((lambda (cars/f$661$15391) (if cars/f$661$15391 (begin (quote #f) ((lambda (cdrs/f$661$15393) (if cdrs/f$661$15393 (begin (quote #f) (map cons cars/f$661$15391 cdrs/f$661$15393)) (quote #f))) (f$661$15387 (syntax-cdr$661$12206 x$661$15389)))) (quote #f))) ((lambda (x$661$15395) (if (syntax-pair?$661$12194 x$661$15395) (begin (quote #f) ((lambda (q$661$15397) (if q$661$15397 (begin (quote #f) ((lambda (r$661$15399) (if r$661$15399 (begin (quote #f) (append q$661$15397 r$661$15399)) (quote #f))) ((lambda (x$661$15401) (if (syntax-pair?$661$12194 x$661$15401) (begin (quote #f) ((lambda (q$661$15403) (if q$661$15403 (begin (quote #f) ((lambda (r$661$15405) (if r$661$15405 (begin (quote #f) (append q$661$15403 r$661$15405)) (quote #f))) ((lambda (x$661$15407) (if (equal? (stx->datum$661$12228 x$661$15407) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15401)))) (quote #f))) ((lambda (x$661$15409) (list x$661$15409)) (syntax-car$661$12202 x$661$15401)))) (quote #f))) (syntax-cdr$661$12206 x$661$15395)))) (quote #f))) ((lambda (x$661$15411) (list x$661$15411)) (syntax-car$661$12202 x$661$15395)))) (quote #f))) (syntax-car$661$12202 x$661$15389))) (if (syntax-null?$661$12198 x$661$15389) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$661$15387) (syntax-car$661$12202 x$661$15363)))) (quote #f))) (syntax-cdr$661$12206 x$661$15357)))) (quote #f))) ((lambda (x$661$15413) (quote ())) (syntax-car$661$12202 x$661$15357)))) (quote #f))) t$661$15333))) stx$661$15331))) (set! or-macro$661$12692 (lambda (stx$661$15415) ((lambda (t$661$15417) ((lambda (ls/false$661$15419) (if (if ls/false$661$15419 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$15419)) (quote #f)) (apply (lambda () (quote #f)) ls/false$661$15419) ((lambda (t$661$15421) ((lambda (ls/false$661$15423) (if (if ls/false$661$15423 (begin (quote #f) (apply (lambda (e$661$15425 e*$661$15426) (quote #t)) ls/false$661$15423)) (quote #f)) (apply (lambda (e$661$15429 e*$661$15430) (bless$661$12668 (letrec ((f$661$15433 (lambda (e$661$15435 e*$661$15436) (if (null? e*$661$15436) (list (quote begin) (quote #f) e$661$15435) (list (quote let) (list (list (quote t) e$661$15435)) (list (quote if) (quote t) (quote t) (f$661$15433 (car e*$661$15436) (cdr e*$661$15436)))))))) (f$661$15433 e$661$15429 e*$661$15430)))) ls/false$661$15423) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15421 (quote ()))))) ((lambda (x$661$15439) (if (syntax-pair?$661$12194 x$661$15439) (begin (quote #f) ((lambda (q$661$15441) (if q$661$15441 (begin (quote #f) ((lambda (r$661$15443) (if r$661$15443 (begin (quote #f) (append q$661$15441 r$661$15443)) (quote #f))) ((lambda (x$661$15445) (if (syntax-pair?$661$12194 x$661$15445) (begin (quote #f) ((lambda (q$661$15447) (if q$661$15447 (begin (quote #f) ((lambda (r$661$15449) (if r$661$15449 (begin (quote #f) (append q$661$15447 r$661$15449)) (quote #f))) ((letrec ((f$661$15451 (lambda (x$661$15453) (if (syntax-pair?$661$12194 x$661$15453) ((lambda (cars/f$661$15455) (if cars/f$661$15455 (begin (quote #f) ((lambda (cdrs/f$661$15457) (if cdrs/f$661$15457 (begin (quote #f) (map cons cars/f$661$15455 cdrs/f$661$15457)) (quote #f))) (f$661$15451 (syntax-cdr$661$12206 x$661$15453)))) (quote #f))) ((lambda (x$661$15459) (list x$661$15459)) (syntax-car$661$12202 x$661$15453))) (if (syntax-null?$661$12198 x$661$15453) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$15451) (syntax-cdr$661$12206 x$661$15445)))) (quote #f))) ((lambda (x$661$15461) (list x$661$15461)) (syntax-car$661$12202 x$661$15445)))) (quote #f))) (syntax-cdr$661$12206 x$661$15439)))) (quote #f))) ((lambda (x$661$15463) (quote ())) (syntax-car$661$12202 x$661$15439)))) (quote #f))) t$661$15421))) t$661$15417))) ((lambda (x$661$15465) (if (syntax-pair?$661$12194 x$661$15465) (begin (quote #f) ((lambda (q$661$15467) (if q$661$15467 (begin (quote #f) ((lambda (r$661$15469) (if r$661$15469 (begin (quote #f) (append q$661$15467 r$661$15469)) (quote #f))) ((lambda (x$661$15471) (if (equal? (stx->datum$661$12228 x$661$15471) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15465)))) (quote #f))) ((lambda (x$661$15473) (quote ())) (syntax-car$661$12202 x$661$15465)))) (quote #f))) t$661$15417))) stx$661$15415))) (set! and-macro$661$12694 (lambda (stx$661$15475) ((lambda (t$661$15477) ((lambda (ls/false$661$15479) (if (if ls/false$661$15479 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$15479)) (quote #f)) (apply (lambda () (quote #t)) ls/false$661$15479) ((lambda (t$661$15481) ((lambda (ls/false$661$15483) (if (if ls/false$661$15483 (begin (quote #f) (apply (lambda (e$661$15485 e*$661$15486) (quote #t)) ls/false$661$15483)) (quote #f)) (apply (lambda (e$661$15489 e*$661$15490) (bless$661$12668 (letrec ((f$661$15493 (lambda (e$661$15495 e*$661$15496) (if (null? e*$661$15496) (list (quote begin) (quote #f) e$661$15495) (cons (quote if) (cons e$661$15495 (cons (f$661$15493 (car e*$661$15496) (cdr e*$661$15496)) (quote (#f))))))))) (f$661$15493 e$661$15489 e*$661$15490)))) ls/false$661$15483) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15481 (quote ()))))) ((lambda (x$661$15499) (if (syntax-pair?$661$12194 x$661$15499) (begin (quote #f) ((lambda (q$661$15501) (if q$661$15501 (begin (quote #f) ((lambda (r$661$15503) (if r$661$15503 (begin (quote #f) (append q$661$15501 r$661$15503)) (quote #f))) ((lambda (x$661$15505) (if (syntax-pair?$661$12194 x$661$15505) (begin (quote #f) ((lambda (q$661$15507) (if q$661$15507 (begin (quote #f) ((lambda (r$661$15509) (if r$661$15509 (begin (quote #f) (append q$661$15507 r$661$15509)) (quote #f))) ((letrec ((f$661$15511 (lambda (x$661$15513) (if (syntax-pair?$661$12194 x$661$15513) ((lambda (cars/f$661$15515) (if cars/f$661$15515 (begin (quote #f) ((lambda (cdrs/f$661$15517) (if cdrs/f$661$15517 (begin (quote #f) (map cons cars/f$661$15515 cdrs/f$661$15517)) (quote #f))) (f$661$15511 (syntax-cdr$661$12206 x$661$15513)))) (quote #f))) ((lambda (x$661$15519) (list x$661$15519)) (syntax-car$661$12202 x$661$15513))) (if (syntax-null?$661$12198 x$661$15513) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$15511) (syntax-cdr$661$12206 x$661$15505)))) (quote #f))) ((lambda (x$661$15521) (list x$661$15521)) (syntax-car$661$12202 x$661$15505)))) (quote #f))) (syntax-cdr$661$12206 x$661$15499)))) (quote #f))) ((lambda (x$661$15523) (quote ())) (syntax-car$661$12202 x$661$15499)))) (quote #f))) t$661$15481))) t$661$15477))) ((lambda (x$661$15525) (if (syntax-pair?$661$12194 x$661$15525) (begin (quote #f) ((lambda (q$661$15527) (if q$661$15527 (begin (quote #f) ((lambda (r$661$15529) (if r$661$15529 (begin (quote #f) (append q$661$15527 r$661$15529)) (quote #f))) ((lambda (x$661$15531) (if (equal? (stx->datum$661$12228 x$661$15531) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15525)))) (quote #f))) ((lambda (x$661$15533) (quote ())) (syntax-car$661$12202 x$661$15525)))) (quote #f))) t$661$15477))) stx$661$15475))) (set! cond-macro$661$12696 (lambda (stx$661$15535) ((lambda (t$661$15537) ((lambda (ls/false$661$15539) (if (if ls/false$661$15539 (begin (quote #f) (apply (lambda (cls$661$15541 cls*$661$15542) (quote #t)) ls/false$661$15539)) (quote #f)) (apply (lambda (cls$661$15545 cls*$661$15546) (bless$661$12668 (letrec ((f$661$15549 (lambda (cls$661$15551 cls*$661$15552) (if (null? cls*$661$15552) ((lambda (t$661$15555) ((lambda (ls/false$661$15557) (if (if ls/false$661$15557 (begin (quote #f) (apply (lambda (e$661$15559 e*$661$15560) (quote #t)) ls/false$661$15557)) (quote #f)) (apply (lambda (e$661$15563 e*$661$15564) (cons (quote begin) (cons e$661$15563 e*$661$15564))) ls/false$661$15557) ((lambda (t$661$15567) ((lambda (ls/false$661$15569) (if (if ls/false$661$15569 (begin (quote #f) (apply (lambda (e$661$15571 p$661$15572) (quote #t)) ls/false$661$15569)) (quote #f)) (apply (lambda (e$661$15575 p$661$15576) (list (quote let) (list (list (quote t) e$661$15575)) (list (quote if) (quote t) (cons p$661$15576 (quote (t)))))) ls/false$661$15569) ((lambda (t$661$15579) ((lambda (ls/false$661$15581) (if (if ls/false$661$15581 (begin (quote #f) (apply (lambda (e$661$15583) (quote #t)) ls/false$661$15581)) (quote #f)) (apply (lambda (e$661$15585) (cons (quote or) (cons e$661$15585 (quote ((if #f #f)))))) ls/false$661$15581) ((lambda (t$661$15587) ((lambda (ls/false$661$15589) (if (if ls/false$661$15589 (begin (quote #f) (apply (lambda (e$661$15591 e*$661$15592) (quote #t)) ls/false$661$15589)) (quote #f)) (apply (lambda (e$661$15595 e*$661$15596) (list (quote if) e$661$15595 (cons (quote begin) e*$661$15596))) ls/false$661$15589) ((lambda (t$661$15599) ((lambda (ls/false$661$15601) (if (if ls/false$661$15601 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$15601)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (strip$661$12226 stx$661$15535 (quote ())))) ls/false$661$15601) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15599 (quote ()))))) ((lambda (x$661$15603) (quote ())) t$661$15599))) t$661$15587))) ((lambda (x$661$15605) (if (syntax-pair?$661$12194 x$661$15605) (begin (quote #f) ((lambda (q$661$15607) (if q$661$15607 (begin (quote #f) ((lambda (r$661$15609) (if r$661$15609 (begin (quote #f) (append q$661$15607 r$661$15609)) (quote #f))) ((letrec ((f$661$15611 (lambda (x$661$15613) (if (syntax-pair?$661$12194 x$661$15613) ((lambda (cars/f$661$15615) (if cars/f$661$15615 (begin (quote #f) ((lambda (cdrs/f$661$15617) (if cdrs/f$661$15617 (begin (quote #f) (map cons cars/f$661$15615 cdrs/f$661$15617)) (quote #f))) (f$661$15611 (syntax-cdr$661$12206 x$661$15613)))) (quote #f))) ((lambda (x$661$15619) (list x$661$15619)) (syntax-car$661$12202 x$661$15613))) (if (syntax-null?$661$12198 x$661$15613) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$15611) (syntax-cdr$661$12206 x$661$15605)))) (quote #f))) ((lambda (x$661$15621) (list x$661$15621)) (syntax-car$661$12202 x$661$15605)))) (quote #f))) t$661$15587))) t$661$15579))) ((lambda (x$661$15623) (if (syntax-pair?$661$12194 x$661$15623) (begin (quote #f) ((lambda (q$661$15625) (if q$661$15625 (begin (quote #f) ((lambda (r$661$15627) (if r$661$15627 (begin (quote #f) (append q$661$15625 r$661$15627)) (quote #f))) ((lambda (x$661$15629) (if (equal? (stx->datum$661$12228 x$661$15629) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15623)))) (quote #f))) ((lambda (x$661$15631) (list x$661$15631)) (syntax-car$661$12202 x$661$15623)))) (quote #f))) t$661$15579))) t$661$15567))) ((lambda (x$661$15633) (if (syntax-pair?$661$12194 x$661$15633) (begin (quote #f) ((lambda (q$661$15635) (if q$661$15635 (begin (quote #f) ((lambda (r$661$15637) (if r$661$15637 (begin (quote #f) (append q$661$15635 r$661$15637)) (quote #f))) ((lambda (x$661$15639) (if (syntax-pair?$661$12194 x$661$15639) (begin (quote #f) ((lambda (q$661$15641) (if q$661$15641 (begin (quote #f) ((lambda (r$661$15643) (if r$661$15643 (begin (quote #f) (append q$661$15641 r$661$15643)) (quote #f))) ((lambda (x$661$15645) (if (syntax-pair?$661$12194 x$661$15645) (begin (quote #f) ((lambda (q$661$15647) (if q$661$15647 (begin (quote #f) ((lambda (r$661$15649) (if r$661$15649 (begin (quote #f) (append q$661$15647 r$661$15649)) (quote #f))) ((lambda (x$661$15651) (if (equal? (stx->datum$661$12228 x$661$15651) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15645)))) (quote #f))) ((lambda (x$661$15653) (list x$661$15653)) (syntax-car$661$12202 x$661$15645)))) (quote #f))) (syntax-cdr$661$12206 x$661$15639)))) (quote #f))) ((lambda (x$661$15655) (if (id?$661$12208 x$661$15655) (if (free-id=?$661$12216 x$661$15655 (scheme-stx$661$12638 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$15639)))) (quote #f))) (syntax-cdr$661$12206 x$661$15633)))) (quote #f))) ((lambda (x$661$15657) (list x$661$15657)) (syntax-car$661$12202 x$661$15633)))) (quote #f))) t$661$15567))) t$661$15555))) ((lambda (x$661$15659) (if (syntax-pair?$661$12194 x$661$15659) (begin (quote #f) ((lambda (q$661$15661) (if q$661$15661 (begin (quote #f) ((lambda (r$661$15663) (if r$661$15663 (begin (quote #f) (append q$661$15661 r$661$15663)) (quote #f))) ((lambda (x$661$15665) (if (syntax-pair?$661$12194 x$661$15665) (begin (quote #f) ((lambda (q$661$15667) (if q$661$15667 (begin (quote #f) ((lambda (r$661$15669) (if r$661$15669 (begin (quote #f) (append q$661$15667 r$661$15669)) (quote #f))) ((letrec ((f$661$15671 (lambda (x$661$15673) (if (syntax-pair?$661$12194 x$661$15673) ((lambda (cars/f$661$15675) (if cars/f$661$15675 (begin (quote #f) ((lambda (cdrs/f$661$15677) (if cdrs/f$661$15677 (begin (quote #f) (map cons cars/f$661$15675 cdrs/f$661$15677)) (quote #f))) (f$661$15671 (syntax-cdr$661$12206 x$661$15673)))) (quote #f))) ((lambda (x$661$15679) (list x$661$15679)) (syntax-car$661$12202 x$661$15673))) (if (syntax-null?$661$12198 x$661$15673) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$15671) (syntax-cdr$661$12206 x$661$15665)))) (quote #f))) ((lambda (x$661$15681) (list x$661$15681)) (syntax-car$661$12202 x$661$15665)))) (quote #f))) (syntax-cdr$661$12206 x$661$15659)))) (quote #f))) ((lambda (x$661$15683) (if (id?$661$12208 x$661$15683) (if (free-id=?$661$12216 x$661$15683 (scheme-stx$661$12638 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$15659)))) (quote #f))) t$661$15555))) cls$661$15551) ((lambda (t$661$15685) ((lambda (ls/false$661$15687) (if (if ls/false$661$15687 (begin (quote #f) (apply (lambda (e$661$15689 e*$661$15690) (quote #t)) ls/false$661$15687)) (quote #f)) (apply (lambda (e$661$15693 e*$661$15694) (error (quote expander) (quote "~a ~s") (quote "incorrect position of keyword else") (strip$661$12226 stx$661$15535 (quote ())))) ls/false$661$15687) ((lambda (t$661$15697) ((lambda (ls/false$661$15699) (if (if ls/false$661$15699 (begin (quote #f) (apply (lambda (e$661$15701 p$661$15702) (quote #t)) ls/false$661$15699)) (quote #f)) (apply (lambda (e$661$15705 p$661$15706) (list (quote let) (list (list (quote t) e$661$15705)) (list (quote if) (quote t) (cons p$661$15706 (quote (t))) (f$661$15549 (car cls*$661$15552) (cdr cls*$661$15552))))) ls/false$661$15699) ((lambda (t$661$15709) ((lambda (ls/false$661$15711) (if (if ls/false$661$15711 (begin (quote #f) (apply (lambda (e$661$15713) (quote #t)) ls/false$661$15711)) (quote #f)) (apply (lambda (e$661$15715) (list (quote or) e$661$15715 (f$661$15549 (car cls*$661$15552) (cdr cls*$661$15552)))) ls/false$661$15711) ((lambda (t$661$15717) ((lambda (ls/false$661$15719) (if (if ls/false$661$15719 (begin (quote #f) (apply (lambda (e$661$15721 e*$661$15722) (quote #t)) ls/false$661$15719)) (quote #f)) (apply (lambda (e$661$15725 e*$661$15726) (list (quote if) e$661$15725 (cons (quote begin) e*$661$15726) (f$661$15549 (car cls*$661$15552) (cdr cls*$661$15552)))) ls/false$661$15719) ((lambda (t$661$15729) ((lambda (ls/false$661$15731) (if (if ls/false$661$15731 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$15731)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (strip$661$12226 stx$661$15535 (quote ())))) ls/false$661$15731) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15729 (quote ()))))) ((lambda (x$661$15733) (quote ())) t$661$15729))) t$661$15717))) ((lambda (x$661$15735) (if (syntax-pair?$661$12194 x$661$15735) (begin (quote #f) ((lambda (q$661$15737) (if q$661$15737 (begin (quote #f) ((lambda (r$661$15739) (if r$661$15739 (begin (quote #f) (append q$661$15737 r$661$15739)) (quote #f))) ((letrec ((f$661$15741 (lambda (x$661$15743) (if (syntax-pair?$661$12194 x$661$15743) ((lambda (cars/f$661$15745) (if cars/f$661$15745 (begin (quote #f) ((lambda (cdrs/f$661$15747) (if cdrs/f$661$15747 (begin (quote #f) (map cons cars/f$661$15745 cdrs/f$661$15747)) (quote #f))) (f$661$15741 (syntax-cdr$661$12206 x$661$15743)))) (quote #f))) ((lambda (x$661$15749) (list x$661$15749)) (syntax-car$661$12202 x$661$15743))) (if (syntax-null?$661$12198 x$661$15743) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$15741) (syntax-cdr$661$12206 x$661$15735)))) (quote #f))) ((lambda (x$661$15751) (list x$661$15751)) (syntax-car$661$12202 x$661$15735)))) (quote #f))) t$661$15717))) t$661$15709))) ((lambda (x$661$15753) (if (syntax-pair?$661$12194 x$661$15753) (begin (quote #f) ((lambda (q$661$15755) (if q$661$15755 (begin (quote #f) ((lambda (r$661$15757) (if r$661$15757 (begin (quote #f) (append q$661$15755 r$661$15757)) (quote #f))) ((lambda (x$661$15759) (if (equal? (stx->datum$661$12228 x$661$15759) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15753)))) (quote #f))) ((lambda (x$661$15761) (list x$661$15761)) (syntax-car$661$12202 x$661$15753)))) (quote #f))) t$661$15709))) t$661$15697))) ((lambda (x$661$15763) (if (syntax-pair?$661$12194 x$661$15763) (begin (quote #f) ((lambda (q$661$15765) (if q$661$15765 (begin (quote #f) ((lambda (r$661$15767) (if r$661$15767 (begin (quote #f) (append q$661$15765 r$661$15767)) (quote #f))) ((lambda (x$661$15769) (if (syntax-pair?$661$12194 x$661$15769) (begin (quote #f) ((lambda (q$661$15771) (if q$661$15771 (begin (quote #f) ((lambda (r$661$15773) (if r$661$15773 (begin (quote #f) (append q$661$15771 r$661$15773)) (quote #f))) ((lambda (x$661$15775) (if (syntax-pair?$661$12194 x$661$15775) (begin (quote #f) ((lambda (q$661$15777) (if q$661$15777 (begin (quote #f) ((lambda (r$661$15779) (if r$661$15779 (begin (quote #f) (append q$661$15777 r$661$15779)) (quote #f))) ((lambda (x$661$15781) (if (equal? (stx->datum$661$12228 x$661$15781) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15775)))) (quote #f))) ((lambda (x$661$15783) (list x$661$15783)) (syntax-car$661$12202 x$661$15775)))) (quote #f))) (syntax-cdr$661$12206 x$661$15769)))) (quote #f))) ((lambda (x$661$15785) (if (id?$661$12208 x$661$15785) (if (free-id=?$661$12216 x$661$15785 (scheme-stx$661$12638 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$15769)))) (quote #f))) (syntax-cdr$661$12206 x$661$15763)))) (quote #f))) ((lambda (x$661$15787) (list x$661$15787)) (syntax-car$661$12202 x$661$15763)))) (quote #f))) t$661$15697))) t$661$15685))) ((lambda (x$661$15789) (if (syntax-pair?$661$12194 x$661$15789) (begin (quote #f) ((lambda (q$661$15791) (if q$661$15791 (begin (quote #f) ((lambda (r$661$15793) (if r$661$15793 (begin (quote #f) (append q$661$15791 r$661$15793)) (quote #f))) ((lambda (x$661$15795) (if (syntax-pair?$661$12194 x$661$15795) (begin (quote #f) ((lambda (q$661$15797) (if q$661$15797 (begin (quote #f) ((lambda (r$661$15799) (if r$661$15799 (begin (quote #f) (append q$661$15797 r$661$15799)) (quote #f))) ((letrec ((f$661$15801 (lambda (x$661$15803) (if (syntax-pair?$661$12194 x$661$15803) ((lambda (cars/f$661$15805) (if cars/f$661$15805 (begin (quote #f) ((lambda (cdrs/f$661$15807) (if cdrs/f$661$15807 (begin (quote #f) (map cons cars/f$661$15805 cdrs/f$661$15807)) (quote #f))) (f$661$15801 (syntax-cdr$661$12206 x$661$15803)))) (quote #f))) ((lambda (x$661$15809) (list x$661$15809)) (syntax-car$661$12202 x$661$15803))) (if (syntax-null?$661$12198 x$661$15803) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$661$15801) (syntax-cdr$661$12206 x$661$15795)))) (quote #f))) ((lambda (x$661$15811) (list x$661$15811)) (syntax-car$661$12202 x$661$15795)))) (quote #f))) (syntax-cdr$661$12206 x$661$15789)))) (quote #f))) ((lambda (x$661$15813) (if (id?$661$12208 x$661$15813) (if (free-id=?$661$12216 x$661$15813 (scheme-stx$661$12638 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$15789)))) (quote #f))) t$661$15685))) cls$661$15551))))) (f$661$15549 cls$661$15545 cls*$661$15546)))) ls/false$661$15539) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15537 (quote ()))))) ((lambda (x$661$15815) (if (syntax-pair?$661$12194 x$661$15815) (begin (quote #f) ((lambda (q$661$15817) (if q$661$15817 (begin (quote #f) ((lambda (r$661$15819) (if r$661$15819 (begin (quote #f) (append q$661$15817 r$661$15819)) (quote #f))) ((lambda (x$661$15821) (if (syntax-pair?$661$12194 x$661$15821) (begin (quote #f) ((lambda (q$661$15823) (if q$661$15823 (begin (quote #f) ((lambda (r$661$15825) (if r$661$15825 (begin (quote #f) (append q$661$15823 r$661$15825)) (quote #f))) ((letrec ((f$661$15827 (lambda (x$661$15829) (if (syntax-pair?$661$12194 x$661$15829) ((lambda (cars/f$661$15831) (if cars/f$661$15831 (begin (quote #f) ((lambda (cdrs/f$661$15833) (if cdrs/f$661$15833 (begin (quote #f) (map cons cars/f$661$15831 cdrs/f$661$15833)) (quote #f))) (f$661$15827 (syntax-cdr$661$12206 x$661$15829)))) (quote #f))) ((lambda (x$661$15835) (list x$661$15835)) (syntax-car$661$12202 x$661$15829))) (if (syntax-null?$661$12198 x$661$15829) (list (begin (quote cls*) (quote ()))) (quote #f)))))) f$661$15827) (syntax-cdr$661$12206 x$661$15821)))) (quote #f))) ((lambda (x$661$15837) (list x$661$15837)) (syntax-car$661$12202 x$661$15821)))) (quote #f))) (syntax-cdr$661$12206 x$661$15815)))) (quote #f))) ((lambda (x$661$15839) (quote ())) (syntax-car$661$12202 x$661$15815)))) (quote #f))) t$661$15537))) stx$661$15535))) (set! include-macro$661$12698 (lambda (e$661$15841) ((lambda (t$661$15843) ((lambda (ls/false$661$15845) (if (if ls/false$661$15845 (begin (quote #f) (apply (lambda (id$661$15847 filename$661$15848) (quote #t)) ls/false$661$15845)) (quote #f)) (apply (lambda (id$661$15851 filename$661$15852) ((lambda (filename$661$15855) (begin (if (string? filename$661$15855) (void) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 e$661$15841))) (with-input-from-file filename$661$15855 (lambda () (letrec ((f$661$15857 (lambda (ls$661$15859) ((lambda (x$661$15861) (if (eof-object? x$661$15861) (cons (bless$661$12668 (quote begin)) (datum->stx$661$12174 id$661$15851 (reverse ls$661$15859))) (f$661$15857 (cons x$661$15861 ls$661$15859)))) (read))))) (f$661$15857 (quote ()))))))) (stx->datum$661$12228 filename$661$15852))) ls/false$661$15845) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15843 (quote ()))))) ((lambda (x$661$15863) (if (syntax-pair?$661$12194 x$661$15863) (begin (quote #f) ((lambda (q$661$15865) (if q$661$15865 (begin (quote #f) ((lambda (r$661$15867) (if r$661$15867 (begin (quote #f) (append q$661$15865 r$661$15867)) (quote #f))) ((lambda (x$661$15869) (if (syntax-pair?$661$12194 x$661$15869) (begin (quote #f) ((lambda (q$661$15871) (if q$661$15871 (begin (quote #f) ((lambda (r$661$15873) (if r$661$15873 (begin (quote #f) (append q$661$15871 r$661$15873)) (quote #f))) ((lambda (x$661$15875) (if (equal? (stx->datum$661$12228 x$661$15875) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15869)))) (quote #f))) ((lambda (x$661$15877) (list x$661$15877)) (syntax-car$661$12202 x$661$15869)))) (quote #f))) (syntax-cdr$661$12206 x$661$15863)))) (quote #f))) ((lambda (x$661$15879) (list x$661$15879)) (syntax-car$661$12202 x$661$15863)))) (quote #f))) t$661$15843))) e$661$15841))) (set! syntax-rules-macro$661$12700 (lambda (e$661$15881) ((lambda (t$661$15883) ((lambda (ls/false$661$15885) (if (if ls/false$661$15885 (begin (quote #f) (apply (lambda (lits$661$15887 pat*$661$15888 tmp*$661$15889) (quote #t)) ls/false$661$15885)) (quote #f)) (apply (lambda (lits$661$15893 pat*$661$15894 tmp*$661$15895) (begin (if (for-all (lambda (x$661$15899) (if (id?$661$12208 x$661$15899) (if (not (free-id=?$661$12216 x$661$15899 (scheme-stx$661$12638 (quote ...)))) (begin (quote #f) (not (free-id=?$661$12216 x$661$15899 (scheme-stx$661$12638 (quote _))))) (quote #f)) (quote #f))) lits$661$15893) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (strip$661$12226 e$661$15881 (quote ())))) (bless$661$12668 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons lits$661$15893 (map (lambda (pat$661$15901 tmp$661$15902) (list pat$661$15901 (list (quote syntax) tmp$661$15902))) pat*$661$15894 tmp*$661$15895)))))))) ls/false$661$15885) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$15883 (quote ()))))) ((lambda (x$661$15905) (if (syntax-pair?$661$12194 x$661$15905) (begin (quote #f) ((lambda (q$661$15907) (if q$661$15907 (begin (quote #f) ((lambda (r$661$15909) (if r$661$15909 (begin (quote #f) (append q$661$15907 r$661$15909)) (quote #f))) ((lambda (x$661$15911) (if (syntax-pair?$661$12194 x$661$15911) (begin (quote #f) ((lambda (q$661$15913) (if q$661$15913 (begin (quote #f) ((lambda (r$661$15915) (if r$661$15915 (begin (quote #f) (append q$661$15913 r$661$15915)) (quote #f))) ((letrec ((f$661$15917 (lambda (x$661$15919) (if (syntax-pair?$661$12194 x$661$15919) ((lambda (cars/f$661$15921) (if cars/f$661$15921 (begin (quote #f) ((lambda (cdrs/f$661$15923) (if cdrs/f$661$15923 (begin (quote #f) (map cons cars/f$661$15921 cdrs/f$661$15923)) (quote #f))) (f$661$15917 (syntax-cdr$661$12206 x$661$15919)))) (quote #f))) ((lambda (x$661$15925) (if (syntax-pair?$661$12194 x$661$15925) (begin (quote #f) ((lambda (q$661$15927) (if q$661$15927 (begin (quote #f) ((lambda (r$661$15929) (if r$661$15929 (begin (quote #f) (append q$661$15927 r$661$15929)) (quote #f))) ((lambda (x$661$15931) (if (syntax-pair?$661$12194 x$661$15931) (begin (quote #f) ((lambda (q$661$15933) (if q$661$15933 (begin (quote #f) ((lambda (r$661$15935) (if r$661$15935 (begin (quote #f) (append q$661$15933 r$661$15935)) (quote #f))) ((lambda (x$661$15937) (if (equal? (stx->datum$661$12228 x$661$15937) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$15931)))) (quote #f))) ((lambda (x$661$15939) (list x$661$15939)) (syntax-car$661$12202 x$661$15931)))) (quote #f))) (syntax-cdr$661$12206 x$661$15925)))) (quote #f))) ((lambda (x$661$15941) (list x$661$15941)) (syntax-car$661$12202 x$661$15925)))) (quote #f))) (syntax-car$661$12202 x$661$15919))) (if (syntax-null?$661$12198 x$661$15919) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) f$661$15917) (syntax-cdr$661$12206 x$661$15911)))) (quote #f))) ((letrec ((f$661$15943 (lambda (x$661$15945) (if (syntax-pair?$661$12194 x$661$15945) ((lambda (cars/f$661$15947) (if cars/f$661$15947 (begin (quote #f) ((lambda (cdrs/f$661$15949) (if cdrs/f$661$15949 (begin (quote #f) (map cons cars/f$661$15947 cdrs/f$661$15949)) (quote #f))) (f$661$15943 (syntax-cdr$661$12206 x$661$15945)))) (quote #f))) ((lambda (x$661$15951) (list x$661$15951)) (syntax-car$661$12202 x$661$15945))) (if (syntax-null?$661$12198 x$661$15945) (list (begin (quote lits) (quote ()))) (quote #f)))))) f$661$15943) (syntax-car$661$12202 x$661$15911)))) (quote #f))) (syntax-cdr$661$12206 x$661$15905)))) (quote #f))) ((lambda (x$661$15953) (quote ())) (syntax-car$661$12202 x$661$15905)))) (quote #f))) t$661$15883))) e$661$15881))) (set! quasiquote-macro$661$12702 ((lambda () ((lambda (quasicons*$661$15990 quasicons$661$15992 quasiappend$661$15994 quasivector$661$15996 vquasi$661$15998 quasi$661$16000) (begin (set! quasicons*$661$15990 (lambda (x$661$16612 y$661$16613) (letrec ((f$661$16616 (lambda (x$661$16618) (if (null? x$661$16618) y$661$16613 (quasicons$661$15992 (car x$661$16618) (f$661$16616 (cdr x$661$16618))))))) (f$661$16616 x$661$16612)))) (set! quasicons$661$15992 (lambda (x$661$16506 y$661$16507) ((lambda (t$661$16510) ((lambda (ls/false$661$16512) (if (if ls/false$661$16512 (begin (quote #f) (apply (lambda (dy$661$16514) (quote #t)) ls/false$661$16512)) (quote #f)) (apply (lambda (dy$661$16516) ((lambda (t$661$16518) ((lambda (ls/false$661$16520) (if (if ls/false$661$16520 (begin (quote #f) (apply (lambda (dx$661$16522) (quote #t)) ls/false$661$16520)) (quote #f)) (apply (lambda (dx$661$16524) (list (scheme-stx$661$12638 (quote quote)) (cons dx$661$16524 dy$661$16516))) ls/false$661$16520) ((lambda (t$661$16526) ((lambda (ls/false$661$16528) (if (if ls/false$661$16528 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16528)) (quote #f)) (apply (lambda () ((lambda (t$661$16530) ((lambda (ls/false$661$16532) (if (if ls/false$661$16532 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16532)) (quote #f)) (apply (lambda () (list (scheme-stx$661$12638 (quote list)) x$661$16506)) ls/false$661$16532) ((lambda (t$661$16534) ((lambda (ls/false$661$16536) (if (if ls/false$661$16536 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16536)) (quote #f)) (apply (lambda () (list (scheme-stx$661$12638 (quote cons)) x$661$16506 y$661$16507)) ls/false$661$16536) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16534 (quote ()))))) ((lambda (x$661$16538) (quote ())) t$661$16534))) t$661$16530))) ((lambda (x$661$16540) (if (equal? (stx->datum$661$12228 x$661$16540) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$661$16530))) dy$661$16516)) ls/false$661$16528) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16526 (quote ()))))) ((lambda (x$661$16542) (quote ())) t$661$16526))) t$661$16518))) ((lambda (x$661$16544) (if (syntax-pair?$661$12194 x$661$16544) (begin (quote #f) ((lambda (q$661$16546) (if q$661$16546 (begin (quote #f) ((lambda (r$661$16548) (if r$661$16548 (begin (quote #f) (append q$661$16546 r$661$16548)) (quote #f))) ((lambda (x$661$16550) (if (syntax-pair?$661$12194 x$661$16550) (begin (quote #f) ((lambda (q$661$16552) (if q$661$16552 (begin (quote #f) ((lambda (r$661$16554) (if r$661$16554 (begin (quote #f) (append q$661$16552 r$661$16554)) (quote #f))) ((lambda (x$661$16556) (if (equal? (stx->datum$661$12228 x$661$16556) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16550)))) (quote #f))) ((lambda (x$661$16558) (list x$661$16558)) (syntax-car$661$12202 x$661$16550)))) (quote #f))) (syntax-cdr$661$12206 x$661$16544)))) (quote #f))) ((lambda (x$661$16560) (if (id?$661$12208 x$661$16560) (if (free-id=?$661$12216 x$661$16560 (scheme-stx$661$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16544)))) (quote #f))) t$661$16518))) x$661$16506)) ls/false$661$16512) ((lambda (t$661$16562) ((lambda (ls/false$661$16564) (if (if ls/false$661$16564 (begin (quote #f) (apply (lambda (stuff$661$16566) (quote #t)) ls/false$661$16564)) (quote #f)) (apply (lambda (stuff$661$16568) (cons* (scheme-stx$661$12638 (quote list)) x$661$16506 stuff$661$16568)) ls/false$661$16564) ((lambda (t$661$16570) ((lambda (ls/false$661$16572) (if (if ls/false$661$16572 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16572)) (quote #f)) (apply (lambda () (list (scheme-stx$661$12638 (quote cons)) x$661$16506 y$661$16507)) ls/false$661$16572) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16570 (quote ()))))) ((lambda (x$661$16574) (quote ())) t$661$16570))) t$661$16562))) ((lambda (x$661$16576) (if (syntax-pair?$661$12194 x$661$16576) (begin (quote #f) ((lambda (q$661$16578) (if q$661$16578 (begin (quote #f) ((lambda (r$661$16580) (if r$661$16580 (begin (quote #f) (append q$661$16578 r$661$16580)) (quote #f))) ((letrec ((f$661$16582 (lambda (x$661$16584) (if (syntax-pair?$661$12194 x$661$16584) ((lambda (cars/f$661$16586) (if cars/f$661$16586 (begin (quote #f) ((lambda (cdrs/f$661$16588) (if cdrs/f$661$16588 (begin (quote #f) (map cons cars/f$661$16586 cdrs/f$661$16588)) (quote #f))) (f$661$16582 (syntax-cdr$661$12206 x$661$16584)))) (quote #f))) ((lambda (x$661$16590) (list x$661$16590)) (syntax-car$661$12202 x$661$16584))) (if (syntax-null?$661$12198 x$661$16584) (list (begin (quote stuff) (quote ()))) (quote #f)))))) f$661$16582) (syntax-cdr$661$12206 x$661$16576)))) (quote #f))) ((lambda (x$661$16592) (if (id?$661$12208 x$661$16592) (if (free-id=?$661$12216 x$661$16592 (scheme-stx$661$12638 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16576)))) (quote #f))) t$661$16562))) t$661$16510))) ((lambda (x$661$16594) (if (syntax-pair?$661$12194 x$661$16594) (begin (quote #f) ((lambda (q$661$16596) (if q$661$16596 (begin (quote #f) ((lambda (r$661$16598) (if r$661$16598 (begin (quote #f) (append q$661$16596 r$661$16598)) (quote #f))) ((lambda (x$661$16600) (if (syntax-pair?$661$12194 x$661$16600) (begin (quote #f) ((lambda (q$661$16602) (if q$661$16602 (begin (quote #f) ((lambda (r$661$16604) (if r$661$16604 (begin (quote #f) (append q$661$16602 r$661$16604)) (quote #f))) ((lambda (x$661$16606) (if (equal? (stx->datum$661$12228 x$661$16606) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16600)))) (quote #f))) ((lambda (x$661$16608) (list x$661$16608)) (syntax-car$661$12202 x$661$16600)))) (quote #f))) (syntax-cdr$661$12206 x$661$16594)))) (quote #f))) ((lambda (x$661$16610) (if (id?$661$12208 x$661$16610) (if (free-id=?$661$12216 x$661$16610 (scheme-stx$661$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16594)))) (quote #f))) t$661$16510))) y$661$16507))) (set! quasiappend$661$15994 (lambda (x$661$16440 y$661$16441) ((lambda (ls$661$16444) (if (null? ls$661$16444) (list (scheme-stx$661$12638 (quote quote)) (quote ())) (if (null? (cdr ls$661$16444)) (car ls$661$16444) (cons* (scheme-stx$661$12638 (quote append)) ls$661$16444)))) (letrec ((f$661$16446 (lambda (x$661$16448) (if (null? x$661$16448) ((lambda (t$661$16450) ((lambda (ls/false$661$16452) (if (if ls/false$661$16452 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16452)) (quote #f)) (apply (lambda () (quote ())) ls/false$661$16452) ((lambda (t$661$16454) ((lambda (ls/false$661$16456) (if (if ls/false$661$16456 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16456)) (quote #f)) (apply (lambda () (list y$661$16441)) ls/false$661$16456) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16454 (quote ()))))) ((lambda (x$661$16458) (quote ())) t$661$16454))) t$661$16450))) ((lambda (x$661$16460) (if (syntax-pair?$661$12194 x$661$16460) (begin (quote #f) ((lambda (q$661$16462) (if q$661$16462 (begin (quote #f) ((lambda (r$661$16464) (if r$661$16464 (begin (quote #f) (append q$661$16462 r$661$16464)) (quote #f))) ((lambda (x$661$16466) (if (syntax-pair?$661$12194 x$661$16466) (begin (quote #f) ((lambda (q$661$16468) (if q$661$16468 (begin (quote #f) ((lambda (r$661$16470) (if r$661$16470 (begin (quote #f) (append q$661$16468 r$661$16470)) (quote #f))) ((lambda (x$661$16472) (if (equal? (stx->datum$661$12228 x$661$16472) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16466)))) (quote #f))) ((lambda (x$661$16474) (if (equal? (stx->datum$661$12228 x$661$16474) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$661$12202 x$661$16466)))) (quote #f))) (syntax-cdr$661$12206 x$661$16460)))) (quote #f))) ((lambda (x$661$16476) (if (id?$661$12208 x$661$16476) (if (free-id=?$661$12216 x$661$16476 (scheme-stx$661$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16460)))) (quote #f))) t$661$16450))) y$661$16441) ((lambda (t$661$16478) ((lambda (ls/false$661$16480) (if (if ls/false$661$16480 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16480)) (quote #f)) (apply (lambda () (f$661$16446 (cdr x$661$16448))) ls/false$661$16480) ((lambda (t$661$16482) ((lambda (ls/false$661$16484) (if (if ls/false$661$16484 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16484)) (quote #f)) (apply (lambda () (cons (car x$661$16448) (f$661$16446 (cdr x$661$16448)))) ls/false$661$16484) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16482 (quote ()))))) ((lambda (x$661$16486) (quote ())) t$661$16482))) t$661$16478))) ((lambda (x$661$16488) (if (syntax-pair?$661$12194 x$661$16488) (begin (quote #f) ((lambda (q$661$16490) (if q$661$16490 (begin (quote #f) ((lambda (r$661$16492) (if r$661$16492 (begin (quote #f) (append q$661$16490 r$661$16492)) (quote #f))) ((lambda (x$661$16494) (if (syntax-pair?$661$12194 x$661$16494) (begin (quote #f) ((lambda (q$661$16496) (if q$661$16496 (begin (quote #f) ((lambda (r$661$16498) (if r$661$16498 (begin (quote #f) (append q$661$16496 r$661$16498)) (quote #f))) ((lambda (x$661$16500) (if (equal? (stx->datum$661$12228 x$661$16500) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16494)))) (quote #f))) ((lambda (x$661$16502) (if (equal? (stx->datum$661$12228 x$661$16502) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$661$12202 x$661$16494)))) (quote #f))) (syntax-cdr$661$12206 x$661$16488)))) (quote #f))) ((lambda (x$661$16504) (if (id?$661$12208 x$661$16504) (if (free-id=?$661$12216 x$661$16504 (scheme-stx$661$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16488)))) (quote #f))) t$661$16478))) (car x$661$16448)))))) (f$661$16446 x$661$16440))))) (set! quasivector$661$15996 (lambda (x$661$16280) ((lambda (pat-x$661$16282) ((lambda (t$661$16284) ((lambda (ls/false$661$16286) (if (if ls/false$661$16286 (begin (quote #f) (apply (lambda (x*$661$16288) (quote #t)) ls/false$661$16286)) (quote #f)) (apply (lambda (x*$661$16290) (list (scheme-stx$661$12638 (quote quote)) (list->vector x*$661$16290))) ls/false$661$16286) ((lambda (t$661$16292) ((lambda (ls/false$661$16294) (if (if ls/false$661$16294 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16294)) (quote #f)) (apply (lambda () (letrec ((f$661$16296 (lambda (x$661$16300 k$661$16301) ((lambda (t$661$16304) ((lambda (ls/false$661$16306) (if (if ls/false$661$16306 (begin (quote #f) (apply (lambda (x*$661$16308) (quote #t)) ls/false$661$16306)) (quote #f)) (apply (lambda (x*$661$16310) (k$661$16301 (map (lambda (x$661$16312) (list (scheme-stx$661$12638 (quote quote)) x$661$16312)) x*$661$16310))) ls/false$661$16306) ((lambda (t$661$16314) ((lambda (ls/false$661$16316) (if (if ls/false$661$16316 (begin (quote #f) (apply (lambda (x*$661$16318) (quote #t)) ls/false$661$16316)) (quote #f)) (apply (lambda (x*$661$16320) (k$661$16301 x*$661$16320)) ls/false$661$16316) ((lambda (t$661$16322) ((lambda (ls/false$661$16324) (if (if ls/false$661$16324 (begin (quote #f) (apply (lambda (x$661$16326 y$661$16327) (quote #t)) ls/false$661$16324)) (quote #f)) (apply (lambda (x$661$16330 y$661$16331) (f$661$16296 y$661$16331 (lambda (ls$661$16334) (k$661$16301 (cons x$661$16330 ls$661$16334))))) ls/false$661$16324) ((lambda (t$661$16336) ((lambda (ls/false$661$16338) (if (if ls/false$661$16338 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16338)) (quote #f)) (apply (lambda () (list (scheme-stx$661$12638 (quote list->vector)) pat-x$661$16282)) ls/false$661$16338) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16336 (quote ()))))) ((lambda (x$661$16340) (quote ())) t$661$16336))) t$661$16322))) ((lambda (x$661$16342) (if (syntax-pair?$661$12194 x$661$16342) (begin (quote #f) ((lambda (q$661$16344) (if q$661$16344 (begin (quote #f) ((lambda (r$661$16346) (if r$661$16346 (begin (quote #f) (append q$661$16344 r$661$16346)) (quote #f))) ((lambda (x$661$16348) (if (syntax-pair?$661$12194 x$661$16348) (begin (quote #f) ((lambda (q$661$16350) (if q$661$16350 (begin (quote #f) ((lambda (r$661$16352) (if r$661$16352 (begin (quote #f) (append q$661$16350 r$661$16352)) (quote #f))) ((lambda (x$661$16354) (if (syntax-pair?$661$12194 x$661$16354) (begin (quote #f) ((lambda (q$661$16356) (if q$661$16356 (begin (quote #f) ((lambda (r$661$16358) (if r$661$16358 (begin (quote #f) (append q$661$16356 r$661$16358)) (quote #f))) ((lambda (x$661$16360) (if (equal? (stx->datum$661$12228 x$661$16360) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16354)))) (quote #f))) ((lambda (x$661$16362) (list x$661$16362)) (syntax-car$661$12202 x$661$16354)))) (quote #f))) (syntax-cdr$661$12206 x$661$16348)))) (quote #f))) ((lambda (x$661$16364) (list x$661$16364)) (syntax-car$661$12202 x$661$16348)))) (quote #f))) (syntax-cdr$661$12206 x$661$16342)))) (quote #f))) ((lambda (x$661$16366) (if (id?$661$12208 x$661$16366) (if (free-id=?$661$12216 x$661$16366 (scheme-stx$661$12638 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16342)))) (quote #f))) t$661$16322))) t$661$16314))) ((lambda (x$661$16368) (if (syntax-pair?$661$12194 x$661$16368) (begin (quote #f) ((lambda (q$661$16370) (if q$661$16370 (begin (quote #f) ((lambda (r$661$16372) (if r$661$16372 (begin (quote #f) (append q$661$16370 r$661$16372)) (quote #f))) ((letrec ((f$661$16374 (lambda (x$661$16376) (if (syntax-pair?$661$12194 x$661$16376) ((lambda (cars/f$661$16378) (if cars/f$661$16378 (begin (quote #f) ((lambda (cdrs/f$661$16380) (if cdrs/f$661$16380 (begin (quote #f) (map cons cars/f$661$16378 cdrs/f$661$16380)) (quote #f))) (f$661$16374 (syntax-cdr$661$12206 x$661$16376)))) (quote #f))) ((lambda (x$661$16382) (list x$661$16382)) (syntax-car$661$12202 x$661$16376))) (if (syntax-null?$661$12198 x$661$16376) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$16374) (syntax-cdr$661$12206 x$661$16368)))) (quote #f))) ((lambda (x$661$16384) (if (id?$661$12208 x$661$16384) (if (free-id=?$661$12216 x$661$16384 (scheme-stx$661$12638 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16368)))) (quote #f))) t$661$16314))) t$661$16304))) ((lambda (x$661$16386) (if (syntax-pair?$661$12194 x$661$16386) (begin (quote #f) ((lambda (q$661$16388) (if q$661$16388 (begin (quote #f) ((lambda (r$661$16390) (if r$661$16390 (begin (quote #f) (append q$661$16388 r$661$16390)) (quote #f))) ((lambda (x$661$16392) (if (syntax-pair?$661$12194 x$661$16392) (begin (quote #f) ((lambda (q$661$16394) (if q$661$16394 (begin (quote #f) ((lambda (r$661$16396) (if r$661$16396 (begin (quote #f) (append q$661$16394 r$661$16396)) (quote #f))) ((lambda (x$661$16398) (if (equal? (stx->datum$661$12228 x$661$16398) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16392)))) (quote #f))) ((letrec ((f$661$16400 (lambda (x$661$16402) (if (syntax-pair?$661$12194 x$661$16402) ((lambda (cars/f$661$16404) (if cars/f$661$16404 (begin (quote #f) ((lambda (cdrs/f$661$16406) (if cdrs/f$661$16406 (begin (quote #f) (map cons cars/f$661$16404 cdrs/f$661$16406)) (quote #f))) (f$661$16400 (syntax-cdr$661$12206 x$661$16402)))) (quote #f))) ((lambda (x$661$16408) (list x$661$16408)) (syntax-car$661$12202 x$661$16402))) (if (syntax-null?$661$12198 x$661$16402) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$16400) (syntax-car$661$12202 x$661$16392)))) (quote #f))) (syntax-cdr$661$12206 x$661$16386)))) (quote #f))) ((lambda (x$661$16410) (if (id?$661$12208 x$661$16410) (if (free-id=?$661$12216 x$661$16410 (scheme-stx$661$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16386)))) (quote #f))) t$661$16304))) x$661$16300)))) (f$661$16296 x$661$16280 (lambda (ls$661$16298) (cons* (scheme-stx$661$12638 (quote vector)) ls$661$16298))))) ls/false$661$16294) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16292 (quote ()))))) ((lambda (x$661$16412) (quote ())) t$661$16292))) t$661$16284))) ((lambda (x$661$16414) (if (syntax-pair?$661$12194 x$661$16414) (begin (quote #f) ((lambda (q$661$16416) (if q$661$16416 (begin (quote #f) ((lambda (r$661$16418) (if r$661$16418 (begin (quote #f) (append q$661$16416 r$661$16418)) (quote #f))) ((lambda (x$661$16420) (if (syntax-pair?$661$12194 x$661$16420) (begin (quote #f) ((lambda (q$661$16422) (if q$661$16422 (begin (quote #f) ((lambda (r$661$16424) (if r$661$16424 (begin (quote #f) (append q$661$16422 r$661$16424)) (quote #f))) ((lambda (x$661$16426) (if (equal? (stx->datum$661$12228 x$661$16426) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16420)))) (quote #f))) ((letrec ((f$661$16428 (lambda (x$661$16430) (if (syntax-pair?$661$12194 x$661$16430) ((lambda (cars/f$661$16432) (if cars/f$661$16432 (begin (quote #f) ((lambda (cdrs/f$661$16434) (if cdrs/f$661$16434 (begin (quote #f) (map cons cars/f$661$16432 cdrs/f$661$16434)) (quote #f))) (f$661$16428 (syntax-cdr$661$12206 x$661$16430)))) (quote #f))) ((lambda (x$661$16436) (list x$661$16436)) (syntax-car$661$12202 x$661$16430))) (if (syntax-null?$661$12198 x$661$16430) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$16428) (syntax-car$661$12202 x$661$16420)))) (quote #f))) (syntax-cdr$661$12206 x$661$16414)))) (quote #f))) ((lambda (x$661$16438) (if (id?$661$12208 x$661$16438) (if (free-id=?$661$12216 x$661$16438 (scheme-stx$661$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16414)))) (quote #f))) t$661$16284))) pat-x$661$16282)) x$661$16280))) (set! vquasi$661$15998 (lambda (p$661$16186 lev$661$16187) ((lambda (t$661$16190) ((lambda (ls/false$661$16192) (if (if ls/false$661$16192 (begin (quote #f) (apply (lambda (p$661$16194 q$661$16195) (quote #t)) ls/false$661$16192)) (quote #f)) (apply (lambda (p$661$16198 q$661$16199) ((lambda (t$661$16202) ((lambda (ls/false$661$16204) (if (if ls/false$661$16204 (begin (quote #f) (apply (lambda (p$661$16206) (quote #t)) ls/false$661$16204)) (quote #f)) (apply (lambda (p$661$16208) (if (= lev$661$16187 (quote 0)) (quasicons*$661$15990 p$661$16208 (vquasi$661$15998 q$661$16199 lev$661$16187)) (quasicons$661$15992 (quasicons$661$15992 (list (scheme-stx$661$12638 (quote quote)) (quote unquote)) (quasi$661$16000 p$661$16208 (- lev$661$16187 (quote 1)))) (vquasi$661$15998 q$661$16199 lev$661$16187)))) ls/false$661$16204) ((lambda (t$661$16210) ((lambda (ls/false$661$16212) (if (if ls/false$661$16212 (begin (quote #f) (apply (lambda (p$661$16214) (quote #t)) ls/false$661$16212)) (quote #f)) (apply (lambda (p$661$16216) (if (= lev$661$16187 (quote 0)) (quasiappend$661$15994 p$661$16216 (vquasi$661$15998 q$661$16199 lev$661$16187)) (quasicons$661$15992 (quasicons$661$15992 (list (scheme-stx$661$12638 (quote quote)) (quote unquote-splicing)) (quasi$661$16000 p$661$16216 (- lev$661$16187 (quote 1)))) (vquasi$661$15998 q$661$16199 lev$661$16187)))) ls/false$661$16212) ((lambda (t$661$16218) ((lambda (ls/false$661$16220) (if (if ls/false$661$16220 (begin (quote #f) (apply (lambda (p$661$16222) (quote #t)) ls/false$661$16220)) (quote #f)) (apply (lambda (p$661$16224) (quasicons$661$15992 (quasi$661$16000 p$661$16224 lev$661$16187) (vquasi$661$15998 q$661$16199 lev$661$16187))) ls/false$661$16220) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16218 (quote ()))))) ((lambda (x$661$16226) (list x$661$16226)) t$661$16218))) t$661$16210))) ((lambda (x$661$16228) (if (syntax-pair?$661$12194 x$661$16228) (begin (quote #f) ((lambda (q$661$16230) (if q$661$16230 (begin (quote #f) ((lambda (r$661$16232) (if r$661$16232 (begin (quote #f) (append q$661$16230 r$661$16232)) (quote #f))) ((letrec ((f$661$16234 (lambda (x$661$16236) (if (syntax-pair?$661$12194 x$661$16236) ((lambda (cars/f$661$16238) (if cars/f$661$16238 (begin (quote #f) ((lambda (cdrs/f$661$16240) (if cdrs/f$661$16240 (begin (quote #f) (map cons cars/f$661$16238 cdrs/f$661$16240)) (quote #f))) (f$661$16234 (syntax-cdr$661$12206 x$661$16236)))) (quote #f))) ((lambda (x$661$16242) (list x$661$16242)) (syntax-car$661$12202 x$661$16236))) (if (syntax-null?$661$12198 x$661$16236) (list (begin (quote p) (quote ()))) (quote #f)))))) f$661$16234) (syntax-cdr$661$12206 x$661$16228)))) (quote #f))) ((lambda (x$661$16244) (if (id?$661$12208 x$661$16244) (if (free-id=?$661$12216 x$661$16244 (scheme-stx$661$12638 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16228)))) (quote #f))) t$661$16210))) t$661$16202))) ((lambda (x$661$16246) (if (syntax-pair?$661$12194 x$661$16246) (begin (quote #f) ((lambda (q$661$16248) (if q$661$16248 (begin (quote #f) ((lambda (r$661$16250) (if r$661$16250 (begin (quote #f) (append q$661$16248 r$661$16250)) (quote #f))) ((letrec ((f$661$16252 (lambda (x$661$16254) (if (syntax-pair?$661$12194 x$661$16254) ((lambda (cars/f$661$16256) (if cars/f$661$16256 (begin (quote #f) ((lambda (cdrs/f$661$16258) (if cdrs/f$661$16258 (begin (quote #f) (map cons cars/f$661$16256 cdrs/f$661$16258)) (quote #f))) (f$661$16252 (syntax-cdr$661$12206 x$661$16254)))) (quote #f))) ((lambda (x$661$16260) (list x$661$16260)) (syntax-car$661$12202 x$661$16254))) (if (syntax-null?$661$12198 x$661$16254) (list (begin (quote p) (quote ()))) (quote #f)))))) f$661$16252) (syntax-cdr$661$12206 x$661$16246)))) (quote #f))) ((lambda (x$661$16262) (if (id?$661$12208 x$661$16262) (if (free-id=?$661$12216 x$661$16262 (scheme-stx$661$12638 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16246)))) (quote #f))) t$661$16202))) p$661$16198)) ls/false$661$16192) ((lambda (t$661$16264) ((lambda (ls/false$661$16266) (if (if ls/false$661$16266 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16266)) (quote #f)) (apply (lambda () (list (scheme-stx$661$12638 (quote quote)) (quote ()))) ls/false$661$16266) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16264 (quote ()))))) ((lambda (x$661$16268) (if (equal? (stx->datum$661$12228 x$661$16268) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$661$16264))) t$661$16190))) ((lambda (x$661$16270) (if (syntax-pair?$661$12194 x$661$16270) (begin (quote #f) ((lambda (q$661$16272) (if q$661$16272 (begin (quote #f) ((lambda (r$661$16274) (if r$661$16274 (begin (quote #f) (append q$661$16272 r$661$16274)) (quote #f))) ((lambda (x$661$16276) (list x$661$16276)) (syntax-cdr$661$12206 x$661$16270)))) (quote #f))) ((lambda (x$661$16278) (list x$661$16278)) (syntax-car$661$12202 x$661$16270)))) (quote #f))) t$661$16190))) p$661$16186))) (set! quasi$661$16000 (lambda (p$661$16002 lev$661$16003) ((lambda (t$661$16006) ((lambda (ls/false$661$16008) (if (if ls/false$661$16008 (begin (quote #f) (apply (lambda (p$661$16010) (quote #t)) ls/false$661$16008)) (quote #f)) (apply (lambda (p$661$16012) (if (= lev$661$16003 (quote 0)) p$661$16012 (quasicons$661$15992 (list (scheme-stx$661$12638 (quote quote)) (quote unquote)) (quasi$661$16000 (list p$661$16012) (- lev$661$16003 (quote 1)))))) ls/false$661$16008) ((lambda (t$661$16014) ((lambda (ls/false$661$16016) (if (if ls/false$661$16016 (begin (quote #f) (apply (lambda (p$661$16018 q$661$16019) (quote #t)) ls/false$661$16016)) (quote #f)) (apply (lambda (p$661$16022 q$661$16023) (if (= lev$661$16003 (quote 0)) (quasicons*$661$15990 p$661$16022 (quasi$661$16000 q$661$16023 lev$661$16003)) (quasicons$661$15992 (quasicons$661$15992 (list (scheme-stx$661$12638 (quote quote)) (quote unquote)) (quasi$661$16000 p$661$16022 (- lev$661$16003 (quote 1)))) (quasi$661$16000 q$661$16023 lev$661$16003)))) ls/false$661$16016) ((lambda (t$661$16026) ((lambda (ls/false$661$16028) (if (if ls/false$661$16028 (begin (quote #f) (apply (lambda (p$661$16030 q$661$16031) (quote #t)) ls/false$661$16028)) (quote #f)) (apply (lambda (p$661$16034 q$661$16035) (if (= lev$661$16003 (quote 0)) (quasiappend$661$15994 p$661$16034 (quasi$661$16000 q$661$16035 lev$661$16003)) (quasicons$661$15992 (quasicons$661$15992 (list (scheme-stx$661$12638 (quote quote)) (quote unquote-splicing)) (quasi$661$16000 p$661$16034 (- lev$661$16003 (quote 1)))) (quasi$661$16000 q$661$16035 lev$661$16003)))) ls/false$661$16028) ((lambda (t$661$16038) ((lambda (ls/false$661$16040) (if (if ls/false$661$16040 (begin (quote #f) (apply (lambda (p$661$16042) (quote #t)) ls/false$661$16040)) (quote #f)) (apply (lambda (p$661$16044) (quasicons$661$15992 (list (scheme-stx$661$12638 (quote quote)) (quote quasiquote)) (quasi$661$16000 (list p$661$16044) (+ lev$661$16003 (quote 1))))) ls/false$661$16040) ((lambda (t$661$16046) ((lambda (ls/false$661$16048) (if (if ls/false$661$16048 (begin (quote #f) (apply (lambda (p$661$16050 q$661$16051) (quote #t)) ls/false$661$16048)) (quote #f)) (apply (lambda (p$661$16054 q$661$16055) (quasicons$661$15992 (quasi$661$16000 p$661$16054 lev$661$16003) (quasi$661$16000 q$661$16055 lev$661$16003))) ls/false$661$16048) ((lambda (t$661$16058) ((lambda (ls/false$661$16060) (if (if ls/false$661$16060 (begin (quote #f) (apply (lambda (x$661$16062) (not (stx?$661$12160 x$661$16062))) ls/false$661$16060)) (quote #f)) (apply (lambda (x$661$16064) (quasivector$661$15996 (vquasi$661$15998 x$661$16064 lev$661$16003))) ls/false$661$16060) ((lambda (t$661$16066) ((lambda (ls/false$661$16068) (if (if ls/false$661$16068 (begin (quote #f) (apply (lambda (p$661$16070) (quote #t)) ls/false$661$16068)) (quote #f)) (apply (lambda (p$661$16072) (list (scheme-stx$661$12638 (quote quote)) p$661$16072)) ls/false$661$16068) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16066 (quote ()))))) ((lambda (x$661$16074) (list x$661$16074)) t$661$16066))) t$661$16058))) ((lambda (x$661$16076) (if (syntax-vector?$661$12196 x$661$16076) (begin (quote #f) ((letrec ((f$661$16078 (lambda (x$661$16080) (if (syntax-pair?$661$12194 x$661$16080) ((lambda (cars/f$661$16082) (if cars/f$661$16082 (begin (quote #f) ((lambda (cdrs/f$661$16084) (if cdrs/f$661$16084 (begin (quote #f) (map cons cars/f$661$16082 cdrs/f$661$16084)) (quote #f))) (f$661$16078 (syntax-cdr$661$12206 x$661$16080)))) (quote #f))) ((lambda (x$661$16086) (list x$661$16086)) (syntax-car$661$12202 x$661$16080))) (if (syntax-null?$661$12198 x$661$16080) (list (begin (quote x) (quote ()))) (quote #f)))))) f$661$16078) (syntax-vector->list$661$12192 x$661$16076))) (quote #f))) t$661$16058))) t$661$16046))) ((lambda (x$661$16088) (if (syntax-pair?$661$12194 x$661$16088) (begin (quote #f) ((lambda (q$661$16090) (if q$661$16090 (begin (quote #f) ((lambda (r$661$16092) (if r$661$16092 (begin (quote #f) (append q$661$16090 r$661$16092)) (quote #f))) ((lambda (x$661$16094) (list x$661$16094)) (syntax-cdr$661$12206 x$661$16088)))) (quote #f))) ((lambda (x$661$16096) (list x$661$16096)) (syntax-car$661$12202 x$661$16088)))) (quote #f))) t$661$16046))) t$661$16038))) ((lambda (x$661$16098) (if (syntax-pair?$661$12194 x$661$16098) (begin (quote #f) ((lambda (q$661$16100) (if q$661$16100 (begin (quote #f) ((lambda (r$661$16102) (if r$661$16102 (begin (quote #f) (append q$661$16100 r$661$16102)) (quote #f))) ((lambda (x$661$16104) (if (syntax-pair?$661$12194 x$661$16104) (begin (quote #f) ((lambda (q$661$16106) (if q$661$16106 (begin (quote #f) ((lambda (r$661$16108) (if r$661$16108 (begin (quote #f) (append q$661$16106 r$661$16108)) (quote #f))) ((lambda (x$661$16110) (if (equal? (stx->datum$661$12228 x$661$16110) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16104)))) (quote #f))) ((lambda (x$661$16112) (list x$661$16112)) (syntax-car$661$12202 x$661$16104)))) (quote #f))) (syntax-cdr$661$12206 x$661$16098)))) (quote #f))) ((lambda (x$661$16114) (if (id?$661$12208 x$661$16114) (if (free-id=?$661$12216 x$661$16114 (scheme-stx$661$12638 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16098)))) (quote #f))) t$661$16038))) t$661$16026))) ((lambda (x$661$16116) (if (syntax-pair?$661$12194 x$661$16116) (begin (quote #f) ((lambda (q$661$16118) (if q$661$16118 (begin (quote #f) ((lambda (r$661$16120) (if r$661$16120 (begin (quote #f) (append q$661$16118 r$661$16120)) (quote #f))) ((lambda (x$661$16122) (list x$661$16122)) (syntax-cdr$661$12206 x$661$16116)))) (quote #f))) ((lambda (x$661$16124) (if (syntax-pair?$661$12194 x$661$16124) (begin (quote #f) ((lambda (q$661$16126) (if q$661$16126 (begin (quote #f) ((lambda (r$661$16128) (if r$661$16128 (begin (quote #f) (append q$661$16126 r$661$16128)) (quote #f))) ((letrec ((f$661$16130 (lambda (x$661$16132) (if (syntax-pair?$661$12194 x$661$16132) ((lambda (cars/f$661$16134) (if cars/f$661$16134 (begin (quote #f) ((lambda (cdrs/f$661$16136) (if cdrs/f$661$16136 (begin (quote #f) (map cons cars/f$661$16134 cdrs/f$661$16136)) (quote #f))) (f$661$16130 (syntax-cdr$661$12206 x$661$16132)))) (quote #f))) ((lambda (x$661$16138) (list x$661$16138)) (syntax-car$661$12202 x$661$16132))) (if (syntax-null?$661$12198 x$661$16132) (list (begin (quote p) (quote ()))) (quote #f)))))) f$661$16130) (syntax-cdr$661$12206 x$661$16124)))) (quote #f))) ((lambda (x$661$16140) (if (id?$661$12208 x$661$16140) (if (free-id=?$661$12216 x$661$16140 (scheme-stx$661$12638 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16124)))) (quote #f))) (syntax-car$661$12202 x$661$16116)))) (quote #f))) t$661$16026))) t$661$16014))) ((lambda (x$661$16142) (if (syntax-pair?$661$12194 x$661$16142) (begin (quote #f) ((lambda (q$661$16144) (if q$661$16144 (begin (quote #f) ((lambda (r$661$16146) (if r$661$16146 (begin (quote #f) (append q$661$16144 r$661$16146)) (quote #f))) ((lambda (x$661$16148) (list x$661$16148)) (syntax-cdr$661$12206 x$661$16142)))) (quote #f))) ((lambda (x$661$16150) (if (syntax-pair?$661$12194 x$661$16150) (begin (quote #f) ((lambda (q$661$16152) (if q$661$16152 (begin (quote #f) ((lambda (r$661$16154) (if r$661$16154 (begin (quote #f) (append q$661$16152 r$661$16154)) (quote #f))) ((letrec ((f$661$16156 (lambda (x$661$16158) (if (syntax-pair?$661$12194 x$661$16158) ((lambda (cars/f$661$16160) (if cars/f$661$16160 (begin (quote #f) ((lambda (cdrs/f$661$16162) (if cdrs/f$661$16162 (begin (quote #f) (map cons cars/f$661$16160 cdrs/f$661$16162)) (quote #f))) (f$661$16156 (syntax-cdr$661$12206 x$661$16158)))) (quote #f))) ((lambda (x$661$16164) (list x$661$16164)) (syntax-car$661$12202 x$661$16158))) (if (syntax-null?$661$12198 x$661$16158) (list (begin (quote p) (quote ()))) (quote #f)))))) f$661$16156) (syntax-cdr$661$12206 x$661$16150)))) (quote #f))) ((lambda (x$661$16166) (if (id?$661$12208 x$661$16166) (if (free-id=?$661$12216 x$661$16166 (scheme-stx$661$12638 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16150)))) (quote #f))) (syntax-car$661$12202 x$661$16142)))) (quote #f))) t$661$16014))) t$661$16006))) ((lambda (x$661$16168) (if (syntax-pair?$661$12194 x$661$16168) (begin (quote #f) ((lambda (q$661$16170) (if q$661$16170 (begin (quote #f) ((lambda (r$661$16172) (if r$661$16172 (begin (quote #f) (append q$661$16170 r$661$16172)) (quote #f))) ((lambda (x$661$16174) (if (syntax-pair?$661$12194 x$661$16174) (begin (quote #f) ((lambda (q$661$16176) (if q$661$16176 (begin (quote #f) ((lambda (r$661$16178) (if r$661$16178 (begin (quote #f) (append q$661$16176 r$661$16178)) (quote #f))) ((lambda (x$661$16180) (if (equal? (stx->datum$661$12228 x$661$16180) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16174)))) (quote #f))) ((lambda (x$661$16182) (list x$661$16182)) (syntax-car$661$12202 x$661$16174)))) (quote #f))) (syntax-cdr$661$12206 x$661$16168)))) (quote #f))) ((lambda (x$661$16184) (if (id?$661$12208 x$661$16184) (if (free-id=?$661$12216 x$661$16184 (scheme-stx$661$12638 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16168)))) (quote #f))) t$661$16006))) p$661$16002))) (lambda (x$661$16620) ((lambda (t$661$16622) ((lambda (ls/false$661$16624) (if (if ls/false$661$16624 (begin (quote #f) (apply (lambda (e$661$16626) (quote #t)) ls/false$661$16624)) (quote #f)) (apply (lambda (e$661$16628) (quasi$661$16000 e$661$16628 (quote 0))) ls/false$661$16624) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16622 (quote ()))))) ((lambda (x$661$16630) (if (syntax-pair?$661$12194 x$661$16630) (begin (quote #f) ((lambda (q$661$16632) (if q$661$16632 (begin (quote #f) ((lambda (r$661$16634) (if r$661$16634 (begin (quote #f) (append q$661$16632 r$661$16634)) (quote #f))) ((lambda (x$661$16636) (if (syntax-pair?$661$12194 x$661$16636) (begin (quote #f) ((lambda (q$661$16638) (if q$661$16638 (begin (quote #f) ((lambda (r$661$16640) (if r$661$16640 (begin (quote #f) (append q$661$16638 r$661$16640)) (quote #f))) ((lambda (x$661$16642) (if (equal? (stx->datum$661$12228 x$661$16642) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16636)))) (quote #f))) ((lambda (x$661$16644) (list x$661$16644)) (syntax-car$661$12202 x$661$16636)))) (quote #f))) (syntax-cdr$661$12206 x$661$16630)))) (quote #f))) ((lambda (x$661$16646) (quote ())) (syntax-car$661$12202 x$661$16630)))) (quote #f))) t$661$16622))) x$661$16620)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! quasisyntax-macro$661$12704 ((lambda () ((lambda (quasi$661$16648) (begin (set! quasi$661$16648 (lambda (p$661$16650 lev$661$16651) ((lambda (t$661$16654) ((lambda (ls/false$661$16656) (if (if ls/false$661$16656 (begin (quote #f) (apply (lambda (p$661$16658) (quote #t)) ls/false$661$16656)) (quote #f)) (apply (lambda (p$661$16660) (if (= lev$661$16651 (quote 0)) ((lambda (g$661$16662) (values (list g$661$16662) (list p$661$16660) g$661$16662)) (gensym)) (call-with-values (lambda () (quasi$661$16648 p$661$16660 (- lev$661$16651 (quote 1)))) (lambda (lhs*$661$16664 rhs*$661$16665 p$661$16666) (values lhs*$661$16664 rhs*$661$16665 (list (quote unsyntax) p$661$16666)))))) ls/false$661$16656) ((lambda (t$661$16670) ((lambda (ls/false$661$16672) (if (if ls/false$661$16672 (begin (quote #f) (apply (lambda () (= lev$661$16651 (quote 0))) ls/false$661$16672)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax") (strip$661$12226 p$661$16650 (quote ())))) ls/false$661$16672) ((lambda (t$661$16674) ((lambda (ls/false$661$16676) (if (if ls/false$661$16676 (begin (quote #f) (apply (lambda (p$661$16678 q$661$16679) (quote #t)) ls/false$661$16676)) (quote #f)) (apply (lambda (p$661$16682 q$661$16683) (call-with-values (lambda () (quasi$661$16648 q$661$16683 lev$661$16651)) (lambda (lhs*$661$16686 rhs*$661$16687 q$661$16688) (if (= lev$661$16651 (quote 0)) ((lambda (g$661$16692) (values (cons (cons g$661$16692 (quote (...))) lhs*$661$16686) (cons p$661$16682 rhs*$661$16687) (cons g$661$16692 (cons (quote ...) q$661$16688)))) (gensym)) (call-with-values (lambda () (quasi$661$16648 p$661$16682 (- lev$661$16651 (quote 1)))) (lambda (lhs2*$661$16694 rhs2*$661$16695 p$661$16696) (values (append lhs2*$661$16694 lhs*$661$16686) (append rhs2*$661$16695 rhs*$661$16687) (cons (list (quote unsyntax-splicing) p$661$16696) q$661$16688)))))))) ls/false$661$16676) ((lambda (t$661$16700) ((lambda (ls/false$661$16702) (if (if ls/false$661$16702 (begin (quote #f) (apply (lambda () (= lev$661$16651 (quote 0))) ls/false$661$16702)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax-splicing") (strip$661$12226 p$661$16650 (quote ())))) ls/false$661$16702) ((lambda (t$661$16704) ((lambda (ls/false$661$16706) (if (if ls/false$661$16706 (begin (quote #f) (apply (lambda (p$661$16708) (quote #t)) ls/false$661$16706)) (quote #f)) (apply (lambda (p$661$16710) (call-with-values (lambda () (quasi$661$16648 p$661$16710 (+ lev$661$16651 (quote 1)))) (lambda (lhs*$661$16712 rhs*$661$16713 p$661$16714) (values lhs*$661$16712 rhs*$661$16713 (list (quote quasisyntax) p$661$16714))))) ls/false$661$16706) ((lambda (t$661$16718) ((lambda (ls/false$661$16720) (if (if ls/false$661$16720 (begin (quote #f) (apply (lambda (p$661$16722 q$661$16723) (quote #t)) ls/false$661$16720)) (quote #f)) (apply (lambda (p$661$16726 q$661$16727) (call-with-values (lambda () (quasi$661$16648 p$661$16726 lev$661$16651)) (lambda (lhs*$661$16730 rhs*$661$16731 p$661$16732) (call-with-values (lambda () (quasi$661$16648 q$661$16727 lev$661$16651)) (lambda (lhs2*$661$16733 rhs2*$661$16734 q$661$16735) (values (append lhs2*$661$16733 lhs*$661$16730) (append rhs2*$661$16734 rhs*$661$16731) (cons p$661$16732 q$661$16735))))))) ls/false$661$16720) ((lambda (t$661$16742) ((lambda (ls/false$661$16744) (if (if ls/false$661$16744 (begin (quote #f) (apply (lambda (x$661$16746) (not (stx?$661$12160 p$661$16650))) ls/false$661$16744)) (quote #f)) (apply (lambda (x$661$16748) (call-with-values (lambda () (letrec ((f$661$16750 (lambda (x$661$16752) (if (null? x$661$16752) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (quasi$661$16648 (car x$661$16752) lev$661$16651)) (lambda (lhs*$661$16754 rhs*$661$16755 a$661$16756) (call-with-values (lambda () (f$661$16750 (cdr x$661$16752))) (lambda (lhs2*$661$16760 rhs2*$661$16761 d$661$16762) (values (append lhs*$661$16754 lhs2*$661$16760) (append rhs*$661$16755 rhs2*$661$16761) (cons a$661$16756 d$661$16762)))))))))) (f$661$16750 x$661$16748))) (lambda (lhs*$661$16766 rhs*$661$16767 x*$661$16768) (values lhs*$661$16766 rhs*$661$16767 (list->vector x*$661$16768))))) ls/false$661$16744) ((lambda (t$661$16772) ((lambda (ls/false$661$16774) (if (if ls/false$661$16774 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$16774)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) p$661$16650)) ls/false$661$16774) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16772 (quote ()))))) ((lambda (x$661$16776) (quote ())) t$661$16772))) t$661$16742))) ((lambda (x$661$16778) (if (syntax-vector?$661$12196 x$661$16778) (begin (quote #f) ((letrec ((f$661$16780 (lambda (x$661$16782) (if (syntax-pair?$661$12194 x$661$16782) ((lambda (cars/f$661$16784) (if cars/f$661$16784 (begin (quote #f) ((lambda (cdrs/f$661$16786) (if cdrs/f$661$16786 (begin (quote #f) (map cons cars/f$661$16784 cdrs/f$661$16786)) (quote #f))) (f$661$16780 (syntax-cdr$661$12206 x$661$16782)))) (quote #f))) ((lambda (x$661$16788) (list x$661$16788)) (syntax-car$661$12202 x$661$16782))) (if (syntax-null?$661$12198 x$661$16782) (list (begin (quote x) (quote ()))) (quote #f)))))) f$661$16780) (syntax-vector->list$661$12192 x$661$16778))) (quote #f))) t$661$16742))) t$661$16718))) ((lambda (x$661$16790) (if (syntax-pair?$661$12194 x$661$16790) (begin (quote #f) ((lambda (q$661$16792) (if q$661$16792 (begin (quote #f) ((lambda (r$661$16794) (if r$661$16794 (begin (quote #f) (append q$661$16792 r$661$16794)) (quote #f))) ((lambda (x$661$16796) (list x$661$16796)) (syntax-cdr$661$12206 x$661$16790)))) (quote #f))) ((lambda (x$661$16798) (list x$661$16798)) (syntax-car$661$12202 x$661$16790)))) (quote #f))) t$661$16718))) t$661$16704))) ((lambda (x$661$16800) (if (syntax-pair?$661$12194 x$661$16800) (begin (quote #f) ((lambda (q$661$16802) (if q$661$16802 (begin (quote #f) ((lambda (r$661$16804) (if r$661$16804 (begin (quote #f) (append q$661$16802 r$661$16804)) (quote #f))) ((lambda (x$661$16806) (if (syntax-pair?$661$12194 x$661$16806) (begin (quote #f) ((lambda (q$661$16808) (if q$661$16808 (begin (quote #f) ((lambda (r$661$16810) (if r$661$16810 (begin (quote #f) (append q$661$16808 r$661$16810)) (quote #f))) ((lambda (x$661$16812) (if (equal? (stx->datum$661$12228 x$661$16812) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16806)))) (quote #f))) ((lambda (x$661$16814) (list x$661$16814)) (syntax-car$661$12202 x$661$16806)))) (quote #f))) (syntax-cdr$661$12206 x$661$16800)))) (quote #f))) ((lambda (x$661$16816) (if (id?$661$12208 x$661$16816) (if (free-id=?$661$12216 x$661$16816 (scheme-stx$661$12638 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16800)))) (quote #f))) t$661$16704))) t$661$16700))) ((lambda (x$661$16818) (if (id?$661$12208 x$661$16818) (if (free-id=?$661$12216 x$661$16818 (scheme-stx$661$12638 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) t$661$16700))) t$661$16674))) ((lambda (x$661$16820) (if (syntax-pair?$661$12194 x$661$16820) (begin (quote #f) ((lambda (q$661$16822) (if q$661$16822 (begin (quote #f) ((lambda (r$661$16824) (if r$661$16824 (begin (quote #f) (append q$661$16822 r$661$16824)) (quote #f))) ((lambda (x$661$16826) (list x$661$16826)) (syntax-cdr$661$12206 x$661$16820)))) (quote #f))) ((lambda (x$661$16828) (if (syntax-pair?$661$12194 x$661$16828) (begin (quote #f) ((lambda (q$661$16830) (if q$661$16830 (begin (quote #f) ((lambda (r$661$16832) (if r$661$16832 (begin (quote #f) (append q$661$16830 r$661$16832)) (quote #f))) ((lambda (x$661$16834) (if (syntax-pair?$661$12194 x$661$16834) (begin (quote #f) ((lambda (q$661$16836) (if q$661$16836 (begin (quote #f) ((lambda (r$661$16838) (if r$661$16838 (begin (quote #f) (append q$661$16836 r$661$16838)) (quote #f))) ((lambda (x$661$16840) (if (equal? (stx->datum$661$12228 x$661$16840) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16834)))) (quote #f))) ((lambda (x$661$16842) (list x$661$16842)) (syntax-car$661$12202 x$661$16834)))) (quote #f))) (syntax-cdr$661$12206 x$661$16828)))) (quote #f))) ((lambda (x$661$16844) (if (id?$661$12208 x$661$16844) (if (free-id=?$661$12216 x$661$16844 (scheme-stx$661$12638 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16828)))) (quote #f))) (syntax-car$661$12202 x$661$16820)))) (quote #f))) t$661$16674))) t$661$16670))) ((lambda (x$661$16846) (if (id?$661$12208 x$661$16846) (if (free-id=?$661$12216 x$661$16846 (scheme-stx$661$12638 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) t$661$16670))) t$661$16654))) ((lambda (x$661$16848) (if (syntax-pair?$661$12194 x$661$16848) (begin (quote #f) ((lambda (q$661$16850) (if q$661$16850 (begin (quote #f) ((lambda (r$661$16852) (if r$661$16852 (begin (quote #f) (append q$661$16850 r$661$16852)) (quote #f))) ((lambda (x$661$16854) (if (syntax-pair?$661$12194 x$661$16854) (begin (quote #f) ((lambda (q$661$16856) (if q$661$16856 (begin (quote #f) ((lambda (r$661$16858) (if r$661$16858 (begin (quote #f) (append q$661$16856 r$661$16858)) (quote #f))) ((lambda (x$661$16860) (if (equal? (stx->datum$661$12228 x$661$16860) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16854)))) (quote #f))) ((lambda (x$661$16862) (list x$661$16862)) (syntax-car$661$12202 x$661$16854)))) (quote #f))) (syntax-cdr$661$12206 x$661$16848)))) (quote #f))) ((lambda (x$661$16864) (if (id?$661$12208 x$661$16864) (if (free-id=?$661$12216 x$661$16864 (scheme-stx$661$12638 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$661$12202 x$661$16848)))) (quote #f))) t$661$16654))) p$661$16650))) (lambda (x$661$16866) ((lambda (t$661$16868) ((lambda (ls/false$661$16870) (if (if ls/false$661$16870 (begin (quote #f) (apply (lambda (e$661$16872) (quote #t)) ls/false$661$16870)) (quote #f)) (apply (lambda (e$661$16874) (call-with-values (lambda () (quasi$661$16648 e$661$16874 (quote 0))) (lambda (lhs*$661$16876 rhs*$661$16877 v$661$16878) (bless$661$12668 (list (quote syntax-case) (cons (quote list) rhs*$661$16877) (quote ()) (list lhs*$661$16876 (list (quote syntax) v$661$16878))))))) ls/false$661$16870) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16868 (quote ()))))) ((lambda (x$661$16882) (if (syntax-pair?$661$12194 x$661$16882) (begin (quote #f) ((lambda (q$661$16884) (if q$661$16884 (begin (quote #f) ((lambda (r$661$16886) (if r$661$16886 (begin (quote #f) (append q$661$16884 r$661$16886)) (quote #f))) ((lambda (x$661$16888) (if (syntax-pair?$661$12194 x$661$16888) (begin (quote #f) ((lambda (q$661$16890) (if q$661$16890 (begin (quote #f) ((lambda (r$661$16892) (if r$661$16892 (begin (quote #f) (append q$661$16890 r$661$16892)) (quote #f))) ((lambda (x$661$16894) (if (equal? (stx->datum$661$12228 x$661$16894) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$16888)))) (quote #f))) ((lambda (x$661$16896) (list x$661$16896)) (syntax-car$661$12202 x$661$16888)))) (quote #f))) (syntax-cdr$661$12206 x$661$16882)))) (quote #f))) ((lambda (x$661$16898) (quote ())) (syntax-car$661$12202 x$661$16882)))) (quote #f))) t$661$16868))) x$661$16866)))) (quote #f))))) (set! define-record-macro$661$12706 (lambda (stx$661$16900) (error (quote expander) (quote "~a ~s") (quote "define-record not supported") (strip$661$12226 stx$661$16900 (quote ()))))) (set! incorrect-usage-macro$661$12708 (lambda (e$661$16902) (error (quote expander) (quote "~a ~s") (quote "incorrect usage of auxilary keyword") (strip$661$12226 e$661$16902 (quote ()))))) (set! parameterize-transformer$661$12710 (lambda (e$661$16904 r$661$16905 mr$661$16906) ((lambda (t$661$16910) ((lambda (ls/false$661$16912) (if (if ls/false$661$16912 (begin (quote #f) (apply (lambda (b$661$16914 b*$661$16915) (quote #t)) ls/false$661$16912)) (quote #f)) (apply (lambda (b$661$16918 b*$661$16919) (chi-internal$661$12756 (cons b$661$16918 b*$661$16919) r$661$16905 mr$661$16906)) ls/false$661$16912) ((lambda (t$661$16922) ((lambda (ls/false$661$16924) (if (if ls/false$661$16924 (begin (quote #f) (apply (lambda (olhs*$661$16926 orhs*$661$16927 b$661$16928 b*$661$16929) (quote #t)) ls/false$661$16924)) (quote #f)) (apply (lambda (olhs*$661$16934 orhs*$661$16935 b$661$16936 b*$661$16937) ((lambda (lhs*$661$16942 rhs*$661$16943 t*$661$16944 swap$661$16945) (build-let$661$12095 (quote #f) (append lhs*$661$16942 rhs*$661$16943) (append (chi-expr*$661$12736 olhs*$661$16934 r$661$16905 mr$661$16906) (chi-expr*$661$12736 orhs*$661$16935 r$661$16905 mr$661$16906)) (build-let$661$12095 (quote #f) (list swap$661$16945) (list (build-lambda$661$12097 (quote #f) (quote ()) (build-sequence$661$12091 (quote #f) (map (lambda (t$661$16950 lhs$661$16951 rhs$661$16952) (build-let$661$12095 (quote #f) (list t$661$16950) (list (list lhs$661$16951)) (build-sequence$661$12091 (quote #f) (list (list lhs$661$16951 rhs$661$16952) (list (quote set!) rhs$661$16952 t$661$16950))))) t*$661$16944 lhs*$661$16942 rhs*$661$16943)))) (list (quote (primitive dynamic-wind)) swap$661$16945 (build-lambda$661$12097 (quote #f) (quote ()) (chi-internal$661$12756 (cons b$661$16936 b*$661$16937) r$661$16905 mr$661$16906)) swap$661$16945)))) (map (lambda (x$661$16956) (gen-lexical$661$12118 (quote lhs))) olhs*$661$16934) (map (lambda (x$661$16958) (gen-lexical$661$12118 (quote rhs))) olhs*$661$16934) (map (lambda (x$661$16960) (gen-lexical$661$12118 (quote t))) olhs*$661$16934) (gen-lexical$661$12118 (quote swap)))) ls/false$661$16924) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$16922 (quote ()))))) ((lambda (x$661$16962) (if (syntax-pair?$661$12194 x$661$16962) (begin (quote #f) ((lambda (q$661$16964) (if q$661$16964 (begin (quote #f) ((lambda (r$661$16966) (if r$661$16966 (begin (quote #f) (append q$661$16964 r$661$16966)) (quote #f))) ((lambda (x$661$16968) (if (syntax-pair?$661$12194 x$661$16968) (begin (quote #f) ((lambda (q$661$16970) (if q$661$16970 (begin (quote #f) ((lambda (r$661$16972) (if r$661$16972 (begin (quote #f) (append q$661$16970 r$661$16972)) (quote #f))) ((lambda (x$661$16974) (if (syntax-pair?$661$12194 x$661$16974) (begin (quote #f) ((lambda (q$661$16976) (if q$661$16976 (begin (quote #f) ((lambda (r$661$16978) (if r$661$16978 (begin (quote #f) (append q$661$16976 r$661$16978)) (quote #f))) ((letrec ((f$661$16980 (lambda (x$661$16982) (if (syntax-pair?$661$12194 x$661$16982) ((lambda (cars/f$661$16984) (if cars/f$661$16984 (begin (quote #f) ((lambda (cdrs/f$661$16986) (if cdrs/f$661$16986 (begin (quote #f) (map cons cars/f$661$16984 cdrs/f$661$16986)) (quote #f))) (f$661$16980 (syntax-cdr$661$12206 x$661$16982)))) (quote #f))) ((lambda (x$661$16988) (list x$661$16988)) (syntax-car$661$12202 x$661$16982))) (if (syntax-null?$661$12198 x$661$16982) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$16980) (syntax-cdr$661$12206 x$661$16974)))) (quote #f))) ((lambda (x$661$16990) (list x$661$16990)) (syntax-car$661$12202 x$661$16974)))) (quote #f))) (syntax-cdr$661$12206 x$661$16968)))) (quote #f))) ((letrec ((f$661$16992 (lambda (x$661$16994) (if (syntax-pair?$661$12194 x$661$16994) ((lambda (cars/f$661$16996) (if cars/f$661$16996 (begin (quote #f) ((lambda (cdrs/f$661$16998) (if cdrs/f$661$16998 (begin (quote #f) (map cons cars/f$661$16996 cdrs/f$661$16998)) (quote #f))) (f$661$16992 (syntax-cdr$661$12206 x$661$16994)))) (quote #f))) ((lambda (x$661$17000) (if (syntax-pair?$661$12194 x$661$17000) (begin (quote #f) ((lambda (q$661$17002) (if q$661$17002 (begin (quote #f) ((lambda (r$661$17004) (if r$661$17004 (begin (quote #f) (append q$661$17002 r$661$17004)) (quote #f))) ((lambda (x$661$17006) (if (syntax-pair?$661$12194 x$661$17006) (begin (quote #f) ((lambda (q$661$17008) (if q$661$17008 (begin (quote #f) ((lambda (r$661$17010) (if r$661$17010 (begin (quote #f) (append q$661$17008 r$661$17010)) (quote #f))) ((lambda (x$661$17012) (if (equal? (stx->datum$661$12228 x$661$17012) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$17006)))) (quote #f))) ((lambda (x$661$17014) (list x$661$17014)) (syntax-car$661$12202 x$661$17006)))) (quote #f))) (syntax-cdr$661$12206 x$661$17000)))) (quote #f))) ((lambda (x$661$17016) (list x$661$17016)) (syntax-car$661$12202 x$661$17000)))) (quote #f))) (syntax-car$661$12202 x$661$16994))) (if (syntax-null?$661$12198 x$661$16994) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) f$661$16992) (syntax-car$661$12202 x$661$16968)))) (quote #f))) (syntax-cdr$661$12206 x$661$16962)))) (quote #f))) ((lambda (x$661$17018) (quote ())) (syntax-car$661$12202 x$661$16962)))) (quote #f))) t$661$16922))) t$661$16910))) ((lambda (x$661$17020) (if (syntax-pair?$661$12194 x$661$17020) (begin (quote #f) ((lambda (q$661$17022) (if q$661$17022 (begin (quote #f) ((lambda (r$661$17024) (if r$661$17024 (begin (quote #f) (append q$661$17022 r$661$17024)) (quote #f))) ((lambda (x$661$17026) (if (syntax-pair?$661$12194 x$661$17026) (begin (quote #f) ((lambda (q$661$17028) (if q$661$17028 (begin (quote #f) ((lambda (r$661$17030) (if r$661$17030 (begin (quote #f) (append q$661$17028 r$661$17030)) (quote #f))) ((lambda (x$661$17032) (if (syntax-pair?$661$12194 x$661$17032) (begin (quote #f) ((lambda (q$661$17034) (if q$661$17034 (begin (quote #f) ((lambda (r$661$17036) (if r$661$17036 (begin (quote #f) (append q$661$17034 r$661$17036)) (quote #f))) ((letrec ((f$661$17038 (lambda (x$661$17040) (if (syntax-pair?$661$12194 x$661$17040) ((lambda (cars/f$661$17042) (if cars/f$661$17042 (begin (quote #f) ((lambda (cdrs/f$661$17044) (if cdrs/f$661$17044 (begin (quote #f) (map cons cars/f$661$17042 cdrs/f$661$17044)) (quote #f))) (f$661$17038 (syntax-cdr$661$12206 x$661$17040)))) (quote #f))) ((lambda (x$661$17046) (list x$661$17046)) (syntax-car$661$12202 x$661$17040))) (if (syntax-null?$661$12198 x$661$17040) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$17038) (syntax-cdr$661$12206 x$661$17032)))) (quote #f))) ((lambda (x$661$17048) (list x$661$17048)) (syntax-car$661$12202 x$661$17032)))) (quote #f))) (syntax-cdr$661$12206 x$661$17026)))) (quote #f))) ((lambda (x$661$17050) (if (equal? (stx->datum$661$12228 x$661$17050) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$661$12202 x$661$17026)))) (quote #f))) (syntax-cdr$661$12206 x$661$17020)))) (quote #f))) ((lambda (x$661$17052) (quote ())) (syntax-car$661$12202 x$661$17020)))) (quote #f))) t$661$16910))) e$661$16904))) (set! foreign-call-transformer$661$12712 (lambda (e$661$17054 r$661$17055 mr$661$17056) ((lambda (t$661$17060) ((lambda (ls/false$661$17062) (if (if ls/false$661$17062 (begin (quote #f) (apply (lambda (name$661$17064 arg*$661$17065) (quote #t)) ls/false$661$17062)) (quote #f)) (apply (lambda (name$661$17068 arg*$661$17069) (cons (quote foreign-call) (cons (chi-expr$661$12740 name$661$17068 r$661$17055 mr$661$17056) (chi-expr*$661$12736 arg*$661$17069 r$661$17055 mr$661$17056)))) ls/false$661$17062) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17060 (quote ()))))) ((lambda (x$661$17072) (if (syntax-pair?$661$12194 x$661$17072) (begin (quote #f) ((lambda (q$661$17074) (if q$661$17074 (begin (quote #f) ((lambda (r$661$17076) (if r$661$17076 (begin (quote #f) (append q$661$17074 r$661$17076)) (quote #f))) ((lambda (x$661$17078) (if (syntax-pair?$661$12194 x$661$17078) (begin (quote #f) ((lambda (q$661$17080) (if q$661$17080 (begin (quote #f) ((lambda (r$661$17082) (if r$661$17082 (begin (quote #f) (append q$661$17080 r$661$17082)) (quote #f))) ((letrec ((f$661$17084 (lambda (x$661$17086) (if (syntax-pair?$661$12194 x$661$17086) ((lambda (cars/f$661$17088) (if cars/f$661$17088 (begin (quote #f) ((lambda (cdrs/f$661$17090) (if cdrs/f$661$17090 (begin (quote #f) (map cons cars/f$661$17088 cdrs/f$661$17090)) (quote #f))) (f$661$17084 (syntax-cdr$661$12206 x$661$17086)))) (quote #f))) ((lambda (x$661$17092) (list x$661$17092)) (syntax-car$661$12202 x$661$17086))) (if (syntax-null?$661$12198 x$661$17086) (list (begin (quote arg*) (quote ()))) (quote #f)))))) f$661$17084) (syntax-cdr$661$12206 x$661$17078)))) (quote #f))) ((lambda (x$661$17094) (list x$661$17094)) (syntax-car$661$12202 x$661$17078)))) (quote #f))) (syntax-cdr$661$12206 x$661$17072)))) (quote #f))) ((lambda (x$661$17096) (quote ())) (syntax-car$661$12202 x$661$17072)))) (quote #f))) t$661$17060))) e$661$17054))) (set! convert-pattern$661$12714 (lambda (pattern$661$17098 keys$661$17099) ((lambda (cvt*$661$17102 cvt$661$17104) (begin (set! cvt*$661$17102 (lambda (p*$661$17292 n$661$17293 ids$661$17294) (if (null? p*$661$17292) (values (quote ()) ids$661$17294) (call-with-values (lambda () (cvt*$661$17102 (cdr p*$661$17292) n$661$17293 ids$661$17294)) (lambda (y$661$17298 ids$661$17299) (call-with-values (lambda () (cvt$661$17104 (car p*$661$17292) n$661$17293 ids$661$17299)) (lambda (x$661$17302 ids$661$17303) (values (cons x$661$17302 y$661$17298) ids$661$17303)))))))) (set! cvt$661$17104 (lambda (p$661$17106 n$661$17107 ids$661$17108) ((lambda (t$661$17112) ((lambda (ls/false$661$17114) (if (if ls/false$661$17114 (begin (quote #f) (apply (lambda (id$661$17116) (id?$661$12208 id$661$17116)) ls/false$661$17114)) (quote #f)) (apply (lambda (id$661$17118) (if (bound-id-member?$661$12222 p$661$17106 keys$661$17099) (values (vector (quote free-id) p$661$17106) ids$661$17108) (if (free-id=?$661$12216 p$661$17106 (scheme-stx$661$12638 (quote _))) (values (quote _) ids$661$17108) (values (quote any) (cons (cons p$661$17106 n$661$17107) ids$661$17108))))) ls/false$661$17114) ((lambda (t$661$17120) ((lambda (ls/false$661$17122) (if (if ls/false$661$17122 (begin (quote #f) (apply (lambda (p$661$17124 dots$661$17125) (ellipsis?$661$12718 dots$661$17125)) ls/false$661$17122)) (quote #f)) (apply (lambda (p$661$17128 dots$661$17129) (call-with-values (lambda () (cvt$661$17104 p$661$17128 (+ n$661$17107 (quote 1)) ids$661$17108)) (lambda (p$661$17132 ids$661$17133) (values (if (eq? p$661$17132 (quote any)) (quote each-any) (vector (quote each) p$661$17132)) ids$661$17133)))) ls/false$661$17122) ((lambda (t$661$17136) ((lambda (ls/false$661$17138) (if (if ls/false$661$17138 (begin (quote #f) (apply (lambda (x$661$17140 dots$661$17141 ys$661$17142 z$661$17143) (ellipsis?$661$12718 dots$661$17141)) ls/false$661$17138)) (quote #f)) (apply (lambda (x$661$17148 dots$661$17149 ys$661$17150 z$661$17151) (call-with-values (lambda () (cvt$661$17104 z$661$17151 n$661$17107 ids$661$17108)) (lambda (z$661$17156 ids$661$17157) (call-with-values (lambda () (cvt*$661$17102 ys$661$17150 n$661$17107 ids$661$17157)) (lambda (ys$661$17160 ids$661$17161) (call-with-values (lambda () (cvt$661$17104 x$661$17148 (+ n$661$17107 (quote 1)) ids$661$17161)) (lambda (x$661$17164 ids$661$17165) (values (vector (quote each+) x$661$17164 (reverse ys$661$17160) z$661$17156) ids$661$17165)))))))) ls/false$661$17138) ((lambda (t$661$17168) ((lambda (ls/false$661$17170) (if (if ls/false$661$17170 (begin (quote #f) (apply (lambda (x$661$17172 y$661$17173) (quote #t)) ls/false$661$17170)) (quote #f)) (apply (lambda (x$661$17176 y$661$17177) (call-with-values (lambda () (cvt$661$17104 y$661$17177 n$661$17107 ids$661$17108)) (lambda (y$661$17180 ids$661$17181) (call-with-values (lambda () (cvt$661$17104 x$661$17176 n$661$17107 ids$661$17181)) (lambda (x$661$17184 ids$661$17185) (values (cons x$661$17184 y$661$17180) ids$661$17185)))))) ls/false$661$17170) ((lambda (t$661$17188) ((lambda (ls/false$661$17190) (if (if ls/false$661$17190 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$17190)) (quote #f)) (apply (lambda () (values (quote ()) ids$661$17108)) ls/false$661$17190) ((lambda (t$661$17192) ((lambda (ls/false$661$17194) (if (if ls/false$661$17194 (begin (quote #f) (apply (lambda (p$661$17196) (not (stx?$661$12160 p$661$17196))) ls/false$661$17194)) (quote #f)) (apply (lambda (p$661$17198) (call-with-values (lambda () (cvt$661$17104 p$661$17198 n$661$17107 ids$661$17108)) (lambda (p$661$17200 ids$661$17201) (values (vector (quote vector) p$661$17200) ids$661$17201)))) ls/false$661$17194) ((lambda (t$661$17204) ((lambda (ls/false$661$17206) (if (if ls/false$661$17206 (begin (quote #f) (apply (lambda (datum$661$17208) (quote #t)) ls/false$661$17206)) (quote #f)) (apply (lambda (datum$661$17210) (values (vector (quote atom) (stx->datum$661$12228 datum$661$17210)) ids$661$17108)) ls/false$661$17206) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17204 (quote ()))))) ((lambda (x$661$17212) (list x$661$17212)) t$661$17204))) t$661$17192))) ((lambda (x$661$17214) (if (syntax-vector?$661$12196 x$661$17214) (begin (quote #f) ((letrec ((f$661$17216 (lambda (x$661$17218) (if (syntax-pair?$661$12194 x$661$17218) ((lambda (cars/f$661$17220) (if cars/f$661$17220 (begin (quote #f) ((lambda (cdrs/f$661$17222) (if cdrs/f$661$17222 (begin (quote #f) (map cons cars/f$661$17220 cdrs/f$661$17222)) (quote #f))) (f$661$17216 (syntax-cdr$661$12206 x$661$17218)))) (quote #f))) ((lambda (x$661$17224) (list x$661$17224)) (syntax-car$661$12202 x$661$17218))) (if (syntax-null?$661$12198 x$661$17218) (list (begin (quote p) (quote ()))) (quote #f)))))) f$661$17216) (syntax-vector->list$661$12192 x$661$17214))) (quote #f))) t$661$17192))) t$661$17188))) ((lambda (x$661$17226) (if (equal? (stx->datum$661$12228 x$661$17226) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$661$17188))) t$661$17168))) ((lambda (x$661$17228) (if (syntax-pair?$661$12194 x$661$17228) (begin (quote #f) ((lambda (q$661$17230) (if q$661$17230 (begin (quote #f) ((lambda (r$661$17232) (if r$661$17232 (begin (quote #f) (append q$661$17230 r$661$17232)) (quote #f))) ((lambda (x$661$17234) (list x$661$17234)) (syntax-cdr$661$12206 x$661$17228)))) (quote #f))) ((lambda (x$661$17236) (list x$661$17236)) (syntax-car$661$12202 x$661$17228)))) (quote #f))) t$661$17168))) t$661$17136))) ((lambda (x$661$17238) (if (syntax-pair?$661$12194 x$661$17238) (begin (quote #f) ((lambda (q$661$17240) (if q$661$17240 (begin (quote #f) ((lambda (r$661$17242) (if r$661$17242 (begin (quote #f) (append q$661$17240 r$661$17242)) (quote #f))) ((lambda (x$661$17244) (if (syntax-pair?$661$12194 x$661$17244) (begin (quote #f) ((lambda (q$661$17246) (if q$661$17246 (begin (quote #f) ((lambda (r$661$17248) (if r$661$17248 (begin (quote #f) (append q$661$17246 r$661$17248)) (quote #f))) ((letrec ((f$661$17250 (lambda (x$661$17256) (if (syntax-pair?$661$12194 x$661$17256) ((lambda (cars/f$661$17258) (if cars/f$661$17258 (begin (quote #f) ((lambda (d/f$661$17260) (if d/f$661$17260 (begin (quote #f) (cons (map cons cars/f$661$17258 (car d/f$661$17260)) (cdr d/f$661$17260))) (quote #f))) (f$661$17250 (syntax-cdr$661$12206 x$661$17256)))) (quote #f))) ((lambda (x$661$17262) (list x$661$17262)) (syntax-car$661$12202 x$661$17256))) ((lambda (d$661$17264) (if d$661$17264 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) d$661$17264)) (quote #f))) ((lambda (x$661$17266) (list x$661$17266)) x$661$17256)))))) (lambda (x$661$17252) ((lambda (x$661$17254) (if x$661$17254 (begin (quote #f) (append (car x$661$17254) (cdr x$661$17254))) (quote #f))) (f$661$17250 x$661$17252)))) (syntax-cdr$661$12206 x$661$17244)))) (quote #f))) ((lambda (x$661$17268) (list x$661$17268)) (syntax-car$661$12202 x$661$17244)))) (quote #f))) (syntax-cdr$661$12206 x$661$17238)))) (quote #f))) ((lambda (x$661$17270) (list x$661$17270)) (syntax-car$661$12202 x$661$17238)))) (quote #f))) t$661$17136))) t$661$17120))) ((lambda (x$661$17272) (if (syntax-pair?$661$12194 x$661$17272) (begin (quote #f) ((lambda (q$661$17274) (if q$661$17274 (begin (quote #f) ((lambda (r$661$17276) (if r$661$17276 (begin (quote #f) (append q$661$17274 r$661$17276)) (quote #f))) ((lambda (x$661$17278) (if (syntax-pair?$661$12194 x$661$17278) (begin (quote #f) ((lambda (q$661$17280) (if q$661$17280 (begin (quote #f) ((lambda (r$661$17282) (if r$661$17282 (begin (quote #f) (append q$661$17280 r$661$17282)) (quote #f))) ((lambda (x$661$17284) (if (equal? (stx->datum$661$12228 x$661$17284) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$17278)))) (quote #f))) ((lambda (x$661$17286) (list x$661$17286)) (syntax-car$661$12202 x$661$17278)))) (quote #f))) (syntax-cdr$661$12206 x$661$17272)))) (quote #f))) ((lambda (x$661$17288) (list x$661$17288)) (syntax-car$661$12202 x$661$17272)))) (quote #f))) t$661$17120))) t$661$17112))) ((lambda (x$661$17290) (list x$661$17290)) t$661$17112))) p$661$17106))) (cvt$661$17104 pattern$661$17098 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! syntax-dispatch$661$12716 (lambda (e$661$17306 p$661$17307) ((lambda (stx^$661$17310 match-each$661$17312 match-each+$661$17314 match-each-any$661$17316 match-empty$661$17318 combine$661$17320 match*$661$17322 match$661$17324) (begin (set! stx^$661$17310 (lambda (e$661$17432 m*$661$17433 s*$661$17434) (if (if (null? m*$661$17433) (begin (quote #f) (null? s*$661$17434)) (quote #f)) e$661$17432 (mkstx$661$12184 e$661$17432 m*$661$17433 s*$661$17434)))) (set! match-each$661$17312 (lambda (e$661$17416 p$661$17417 m*$661$17418 s*$661$17419) (if (pair? e$661$17416) ((lambda (first$661$17424) (if first$661$17424 (begin (quote #f) ((lambda (rest$661$17426) (if rest$661$17426 (begin (quote #f) (cons first$661$17424 rest$661$17426)) (quote #f))) (match-each$661$17312 (cdr e$661$17416) p$661$17417 m*$661$17418 s*$661$17419))) (quote #f))) (match$661$17324 (car e$661$17416) p$661$17417 m*$661$17418 s*$661$17419 (quote ()))) (if (null? e$661$17416) (quote ()) (if (stx?$661$12160 e$661$17416) (call-with-values (lambda () (join-wraps$661$12182 m*$661$17418 s*$661$17419 e$661$17416)) (lambda (m*$661$17428 s*$661$17429) (match-each$661$17312 (stx-expr$661$12162 e$661$17416) p$661$17417 m*$661$17428 s*$661$17429))) (quote #f)))))) (set! match-each+$661$17314 (lambda (e$661$17382 x-pat$661$17383 y-pat$661$17384 z-pat$661$17385 m*$661$17386 s*$661$17387 r$661$17388) (letrec ((f$661$17396 (lambda (e$661$17398 m*$661$17399 s*$661$17400) (if (pair? e$661$17398) (call-with-values (lambda () (f$661$17396 (cdr e$661$17398) m*$661$17399 s*$661$17400)) (lambda (xr*$661$17404 y-pat$661$17405 r$661$17406) (if r$661$17406 (if (null? y-pat$661$17405) ((lambda (xr$661$17410) (if xr$661$17410 (values (cons xr$661$17410 xr*$661$17404) y-pat$661$17405 r$661$17406) (values (quote #f) (quote #f) (quote #f)))) (match$661$17324 (car e$661$17398) x-pat$661$17383 m*$661$17399 s*$661$17400 (quote ()))) (values (quote ()) (cdr y-pat$661$17405) (match$661$17324 (car e$661$17398) (car y-pat$661$17405) m*$661$17399 s*$661$17400 r$661$17406))) (values (quote #f) (quote #f) (quote #f))))) (if (stx?$661$12160 e$661$17398) (call-with-values (lambda () (join-wraps$661$12182 m*$661$17399 s*$661$17400 e$661$17398)) (lambda (m*$661$17412 s*$661$17413) (f$661$17396 (stx-expr$661$12162 e$661$17398) m*$661$17412 s*$661$17413))) (values (quote ()) y-pat$661$17384 (match$661$17324 e$661$17398 z-pat$661$17385 m*$661$17399 s*$661$17400 r$661$17388))))))) (f$661$17396 e$661$17382 m*$661$17386 s*$661$17387)))) (set! match-each-any$661$17316 (lambda (e$661$17370 m*$661$17371 s*$661$17372) (if (pair? e$661$17370) ((lambda (l$661$17376) (if l$661$17376 (begin (quote #f) (cons (stx^$661$17310 (car e$661$17370) m*$661$17371 s*$661$17372) l$661$17376)) (quote #f))) (match-each-any$661$17316 (cdr e$661$17370) m*$661$17371 s*$661$17372)) (if (null? e$661$17370) (quote ()) (if (stx?$661$12160 e$661$17370) (call-with-values (lambda () (join-wraps$661$12182 m*$661$17371 s*$661$17372 e$661$17370)) (lambda (m*$661$17378 s*$661$17379) (match-each-any$661$17316 (stx-expr$661$12162 e$661$17370) m*$661$17378 s*$661$17379))) (quote #f)))))) (set! match-empty$661$17318 (lambda (p$661$17365 r$661$17366) (if (null? p$661$17365) r$661$17366 (if (eq? p$661$17365 (quote _)) r$661$17366 (if (eq? p$661$17365 (quote any)) (cons (quote ()) r$661$17366) (if (pair? p$661$17365) (match-empty$661$17318 (car p$661$17365) (match-empty$661$17318 (cdr p$661$17365) r$661$17366)) (if (eq? p$661$17365 (quote each-any)) (cons (quote ()) r$661$17366) ((lambda (t$661$17369) (if (memv t$661$17369 (quote (each))) (match-empty$661$17318 (vector-ref p$661$17365 (quote 1)) r$661$17366) (if (memv t$661$17369 (quote (each+))) (match-empty$661$17318 (vector-ref p$661$17365 (quote 1)) (match-empty$661$17318 (reverse (vector-ref p$661$17365 (quote 2))) (match-empty$661$17318 (vector-ref p$661$17365 (quote 3)) r$661$17366))) (if (memv t$661$17369 (quote (free-id atom))) r$661$17366 (if (memv t$661$17369 (quote (vector))) (match-empty$661$17318 (vector-ref p$661$17365 (quote 1)) r$661$17366) (error (quote syntax-dispatch) (quote "invalid pattern") p$661$17365)))))) (vector-ref p$661$17365 (quote 0)))))))))) (set! combine$661$17320 (lambda (r*$661$17361 r$661$17362) (if (null? (car r*$661$17361)) r$661$17362 (cons (map car r*$661$17361) (combine$661$17320 (map cdr r*$661$17361) r$661$17362))))) (set! match*$661$17322 (lambda (e$661$17340 p$661$17341 m*$661$17342 s*$661$17343 r$661$17344) (if (null? p$661$17341) (if (null? e$661$17340) (begin (quote #f) r$661$17344) (quote #f)) (if (pair? p$661$17341) (if (pair? e$661$17340) (begin (quote #f) (match$661$17324 (car e$661$17340) (car p$661$17341) m*$661$17342 s*$661$17343 (match$661$17324 (cdr e$661$17340) (cdr p$661$17341) m*$661$17342 s*$661$17343 r$661$17344))) (quote #f)) (if (eq? p$661$17341 (quote each-any)) ((lambda (l$661$17350) (if l$661$17350 (begin (quote #f) (cons l$661$17350 r$661$17344)) (quote #f))) (match-each-any$661$17316 e$661$17340 m*$661$17342 s*$661$17343)) ((lambda (t$661$17352) (if (memv t$661$17352 (quote (each))) (if (null? e$661$17340) (match-empty$661$17318 (vector-ref p$661$17341 (quote 1)) r$661$17344) ((lambda (r*$661$17359) (if r*$661$17359 (begin (quote #f) (combine$661$17320 r*$661$17359 r$661$17344)) (quote #f))) (match-each$661$17312 e$661$17340 (vector-ref p$661$17341 (quote 1)) m*$661$17342 s*$661$17343))) (if (memv t$661$17352 (quote (free-id))) (if (symbol? e$661$17340) (if (free-id=?$661$12216 (stx^$661$17310 e$661$17340 m*$661$17342 s*$661$17343) (vector-ref p$661$17341 (quote 1))) (begin (quote #f) r$661$17344) (quote #f)) (quote #f)) (if (memv t$661$17352 (quote (each+))) (call-with-values (lambda () (match-each+$661$17314 e$661$17340 (vector-ref p$661$17341 (quote 1)) (vector-ref p$661$17341 (quote 2)) (vector-ref p$661$17341 (quote 3)) m*$661$17342 s*$661$17343 r$661$17344)) (lambda (xr*$661$17353 y-pat$661$17354 r$661$17355) (if r$661$17355 (if (null? y-pat$661$17354) (begin (quote #f) (if (null? xr*$661$17353) (match-empty$661$17318 (vector-ref p$661$17341 (quote 1)) r$661$17355) (combine$661$17320 xr*$661$17353 r$661$17355))) (quote #f)) (quote #f)))) (if (memv t$661$17352 (quote (atom))) (if (equal? (vector-ref p$661$17341 (quote 1)) (strip$661$12226 e$661$17340 m*$661$17342)) (begin (quote #f) r$661$17344) (quote #f)) (if (memv t$661$17352 (quote (vector))) (if (vector? e$661$17340) (begin (quote #f) (match$661$17324 (vector->list e$661$17340) (vector-ref p$661$17341 (quote 1)) m*$661$17342 s*$661$17343 r$661$17344)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") p$661$17341))))))) (vector-ref p$661$17341 (quote 0)))))))) (set! match$661$17324 (lambda (e$661$17326 p$661$17327 m*$661$17328 s*$661$17329 r$661$17330) (if (not r$661$17330) (quote #f) (if (eq? p$661$17327 (quote _)) r$661$17330 (if (eq? p$661$17327 (quote any)) (cons (stx^$661$17310 e$661$17326 m*$661$17328 s*$661$17329) r$661$17330) (if (stx?$661$12160 e$661$17326) (call-with-values (lambda () (join-wraps$661$12182 m*$661$17328 s*$661$17329 e$661$17326)) (lambda (m*$661$17336 s*$661$17337) (match$661$17324 (stx-expr$661$12162 e$661$17326) p$661$17327 m*$661$17336 s*$661$17337 r$661$17330))) (match*$661$17322 e$661$17326 p$661$17327 m*$661$17328 s*$661$17329 r$661$17330))))))) (match$661$17324 e$661$17306 p$661$17307 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! ellipsis?$661$12718 (lambda (x$661$17438) (if (id?$661$12208 x$661$17438) (begin (quote #f) (free-id=?$661$12216 x$661$17438 (scheme-stx$661$12638 (quote ...)))) (quote #f)))) (set! syntax-case-transformer$661$12720 ((lambda () ((lambda (build-dispatch-call$661$17440 invalid-ids-error$661$17442 gen-clause$661$17444 gen-syntax-case$661$17446) (begin (set! build-dispatch-call$661$17440 (lambda (pvars$661$17580 expr$661$17581 y$661$17582 r$661$17583 mr$661$17584) ((lambda (ids$661$17590 levels$661$17591) ((lambda (labels$661$17594 new-vars$661$17595) ((lambda (body$661$17598) (list (quote (primitive apply)) (build-lambda$661$12097 (quote #f) new-vars$661$17595 body$661$17598) y$661$17582)) (chi-expr$661$12740 (add-subst$661$12188 (make-full-rib$661$12155 ids$661$17590 labels$661$17594) expr$661$17581) (append (map (lambda (label$661$17600 var$661$17601 level$661$17602) (cons label$661$17600 (make-binding$661$12234 (quote syntax) (cons var$661$17601 level$661$17602)))) labels$661$17594 new-vars$661$17595 (map cdr pvars$661$17580)) r$661$17583) mr$661$17584))) (map gen-label$661$12122 ids$661$17590) (map gen-lexical$661$12118 ids$661$17590))) (map car pvars$661$17580) (map cdr pvars$661$17580)))) (set! invalid-ids-error$661$17442 (lambda (id*$661$17568 e$661$17569 class$661$17570) (letrec ((find$661$17574 (lambda (id*$661$17576 ok*$661$17577) (if (null? id*$661$17576) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 e$661$17569)) (if (id?$661$12208 (car id*$661$17576)) (if (bound-id-member?$661$12222 (car id*$661$17576) ok*$661$17577) (syntax-error$661$12845 (car id*$661$17576) (quote "duplicate ") class$661$17570) (find$661$17574 (cdr id*$661$17576) (cons (car id*$661$17576) ok*$661$17577))) (syntax-error$661$12845 (car id*$661$17576) (quote "invalid ") class$661$17570)))))) (find$661$17574 id*$661$17568 (quote ()))))) (set! gen-clause$661$17444 (lambda (x$661$17536 keys$661$17537 clauses$661$17538 r$661$17539 mr$661$17540 pat$661$17541 fender$661$17542 expr$661$17543) (call-with-values (lambda () (convert-pattern$661$12714 pat$661$17541 keys$661$17537)) (lambda (p$661$17552 pvars$661$17553) (if (not (distinct-bound-ids?$661$12220 (map car pvars$661$17553))) (invalid-ids-error$661$17442 (map car pvars$661$17553) pat$661$17541 (quote "pattern variable")) (if (not (for-all (lambda (x$661$17556) (not (ellipsis?$661$12718 (car x$661$17556)))) pvars$661$17553)) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax-case pattern") (strip$661$12226 pat$661$17541 (quote ()))) ((lambda (y$661$17558) ((lambda (test$661$17560) ((lambda (conseq$661$17562) ((lambda (altern$661$17564) (list (build-lambda$661$12097 (quote #f) (list y$661$17558) (list (quote if) test$661$17560 conseq$661$17562 altern$661$17564)) (list (quote (primitive syntax-dispatch)) x$661$17536 (list (quote quote) p$661$17552)))) (gen-syntax-case$661$17446 x$661$17536 keys$661$17537 clauses$661$17538 r$661$17539 mr$661$17540))) (build-dispatch-call$661$17440 pvars$661$17553 expr$661$17543 y$661$17558 r$661$17539 mr$661$17540))) (if (eq? fender$661$17542 (quote #t)) y$661$17558 ((lambda (call$661$17566) (list (quote if) y$661$17558 call$661$17566 (list (quote quote) (quote #f)))) (build-dispatch-call$661$17440 pvars$661$17553 fender$661$17542 y$661$17558 r$661$17539 mr$661$17540))))) (gen-lexical$661$12118 (quote tmp))))))))) (set! gen-syntax-case$661$17446 (lambda (x$661$17448 keys$661$17449 clauses$661$17450 r$661$17451 mr$661$17452) (if (null? clauses$661$17450) (list (quote (primitive syntax-error)) x$661$17448) ((lambda (t$661$17458) ((lambda (ls/false$661$17460) (if (if ls/false$661$17460 (begin (quote #f) (apply (lambda (pat$661$17462 expr$661$17463) (quote #t)) ls/false$661$17460)) (quote #f)) (apply (lambda (pat$661$17466 expr$661$17467) (if (if (id?$661$12208 pat$661$17466) (if (not (bound-id-member?$661$12222 pat$661$17466 keys$661$17449)) (begin (quote #f) (not (ellipsis?$661$12718 pat$661$17466))) (quote #f)) (quote #f)) (if (free-id=?$661$12216 pat$661$17466 (scheme-stx$661$12638 (quote _))) (chi-expr$661$12740 expr$661$17467 r$661$17451 mr$661$17452) ((lambda (lab$661$17470 lex$661$17471) ((lambda (body$661$17474) (list (build-lambda$661$12097 (quote #f) (list lex$661$17471) body$661$17474) x$661$17448)) (chi-expr$661$12740 (add-subst$661$12188 (make-full-rib$661$12155 (list pat$661$17466) (list lab$661$17470)) expr$661$17467) (cons (cons lab$661$17470 (make-binding$661$12234 (quote syntax) (cons lex$661$17471 (quote 0)))) r$661$17451) mr$661$17452))) (gen-label$661$12122 pat$661$17466) (gen-lexical$661$12118 pat$661$17466))) (gen-clause$661$17444 x$661$17448 keys$661$17449 (cdr clauses$661$17450) r$661$17451 mr$661$17452 pat$661$17466 (quote #t) expr$661$17467))) ls/false$661$17460) ((lambda (t$661$17476) ((lambda (ls/false$661$17478) (if (if ls/false$661$17478 (begin (quote #f) (apply (lambda (pat$661$17480 fender$661$17481 expr$661$17482) (quote #t)) ls/false$661$17478)) (quote #f)) (apply (lambda (pat$661$17486 fender$661$17487 expr$661$17488) (gen-clause$661$17444 x$661$17448 keys$661$17449 (cdr clauses$661$17450) r$661$17451 mr$661$17452 pat$661$17486 fender$661$17487 expr$661$17488)) ls/false$661$17478) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17476 (quote ()))))) ((lambda (x$661$17492) (if (syntax-pair?$661$12194 x$661$17492) (begin (quote #f) ((lambda (q$661$17494) (if q$661$17494 (begin (quote #f) ((lambda (r$661$17496) (if r$661$17496 (begin (quote #f) (append q$661$17494 r$661$17496)) (quote #f))) ((lambda (x$661$17498) (if (syntax-pair?$661$12194 x$661$17498) (begin (quote #f) ((lambda (q$661$17500) (if q$661$17500 (begin (quote #f) ((lambda (r$661$17502) (if r$661$17502 (begin (quote #f) (append q$661$17500 r$661$17502)) (quote #f))) ((lambda (x$661$17504) (if (syntax-pair?$661$12194 x$661$17504) (begin (quote #f) ((lambda (q$661$17506) (if q$661$17506 (begin (quote #f) ((lambda (r$661$17508) (if r$661$17508 (begin (quote #f) (append q$661$17506 r$661$17508)) (quote #f))) ((lambda (x$661$17510) (if (equal? (stx->datum$661$12228 x$661$17510) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$17504)))) (quote #f))) ((lambda (x$661$17512) (list x$661$17512)) (syntax-car$661$12202 x$661$17504)))) (quote #f))) (syntax-cdr$661$12206 x$661$17498)))) (quote #f))) ((lambda (x$661$17514) (list x$661$17514)) (syntax-car$661$12202 x$661$17498)))) (quote #f))) (syntax-cdr$661$12206 x$661$17492)))) (quote #f))) ((lambda (x$661$17516) (list x$661$17516)) (syntax-car$661$12202 x$661$17492)))) (quote #f))) t$661$17476))) t$661$17458))) ((lambda (x$661$17518) (if (syntax-pair?$661$12194 x$661$17518) (begin (quote #f) ((lambda (q$661$17520) (if q$661$17520 (begin (quote #f) ((lambda (r$661$17522) (if r$661$17522 (begin (quote #f) (append q$661$17520 r$661$17522)) (quote #f))) ((lambda (x$661$17524) (if (syntax-pair?$661$12194 x$661$17524) (begin (quote #f) ((lambda (q$661$17526) (if q$661$17526 (begin (quote #f) ((lambda (r$661$17528) (if r$661$17528 (begin (quote #f) (append q$661$17526 r$661$17528)) (quote #f))) ((lambda (x$661$17530) (if (equal? (stx->datum$661$12228 x$661$17530) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$17524)))) (quote #f))) ((lambda (x$661$17532) (list x$661$17532)) (syntax-car$661$12202 x$661$17524)))) (quote #f))) (syntax-cdr$661$12206 x$661$17518)))) (quote #f))) ((lambda (x$661$17534) (list x$661$17534)) (syntax-car$661$12202 x$661$17518)))) (quote #f))) t$661$17458))) (car clauses$661$17450))))) (lambda (e$661$17606 r$661$17607 mr$661$17608) ((lambda (t$661$17612) ((lambda (ls/false$661$17614) (if (if ls/false$661$17614 (begin (quote #f) (apply (lambda (expr$661$17616 keys$661$17617 clauses$661$17618) (quote #t)) ls/false$661$17614)) (quote #f)) (apply (lambda (expr$661$17622 keys$661$17623 clauses$661$17624) (begin (if (for-all (lambda (x$661$17628) (if (id?$661$12208 x$661$17628) (begin (quote #f) (not (ellipsis?$661$12718 x$661$17628))) (quote #f))) keys$661$17623) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (strip$661$12226 e$661$17606 (quote ())))) ((lambda (x$661$17630) ((lambda (body$661$17632) (list (build-lambda$661$12097 (quote #f) (list x$661$17630) body$661$17632) (chi-expr$661$12740 expr$661$17622 r$661$17607 mr$661$17608))) (gen-syntax-case$661$17446 x$661$17630 keys$661$17623 clauses$661$17624 r$661$17607 mr$661$17608))) (gen-lexical$661$12118 (quote tmp))))) ls/false$661$17614) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17612 (quote ()))))) ((lambda (x$661$17634) (if (syntax-pair?$661$12194 x$661$17634) (begin (quote #f) ((lambda (q$661$17636) (if q$661$17636 (begin (quote #f) ((lambda (r$661$17638) (if r$661$17638 (begin (quote #f) (append q$661$17636 r$661$17638)) (quote #f))) ((lambda (x$661$17640) (if (syntax-pair?$661$12194 x$661$17640) (begin (quote #f) ((lambda (q$661$17642) (if q$661$17642 (begin (quote #f) ((lambda (r$661$17644) (if r$661$17644 (begin (quote #f) (append q$661$17642 r$661$17644)) (quote #f))) ((lambda (x$661$17646) (if (syntax-pair?$661$12194 x$661$17646) (begin (quote #f) ((lambda (q$661$17648) (if q$661$17648 (begin (quote #f) ((lambda (r$661$17650) (if r$661$17650 (begin (quote #f) (append q$661$17648 r$661$17650)) (quote #f))) ((letrec ((f$661$17652 (lambda (x$661$17654) (if (syntax-pair?$661$12194 x$661$17654) ((lambda (cars/f$661$17656) (if cars/f$661$17656 (begin (quote #f) ((lambda (cdrs/f$661$17658) (if cdrs/f$661$17658 (begin (quote #f) (map cons cars/f$661$17656 cdrs/f$661$17658)) (quote #f))) (f$661$17652 (syntax-cdr$661$12206 x$661$17654)))) (quote #f))) ((lambda (x$661$17660) (list x$661$17660)) (syntax-car$661$12202 x$661$17654))) (if (syntax-null?$661$12198 x$661$17654) (list (begin (quote clauses) (quote ()))) (quote #f)))))) f$661$17652) (syntax-cdr$661$12206 x$661$17646)))) (quote #f))) ((letrec ((f$661$17662 (lambda (x$661$17664) (if (syntax-pair?$661$12194 x$661$17664) ((lambda (cars/f$661$17666) (if cars/f$661$17666 (begin (quote #f) ((lambda (cdrs/f$661$17668) (if cdrs/f$661$17668 (begin (quote #f) (map cons cars/f$661$17666 cdrs/f$661$17668)) (quote #f))) (f$661$17662 (syntax-cdr$661$12206 x$661$17664)))) (quote #f))) ((lambda (x$661$17670) (list x$661$17670)) (syntax-car$661$12202 x$661$17664))) (if (syntax-null?$661$12198 x$661$17664) (list (begin (quote keys) (quote ()))) (quote #f)))))) f$661$17662) (syntax-car$661$12202 x$661$17646)))) (quote #f))) (syntax-cdr$661$12206 x$661$17640)))) (quote #f))) ((lambda (x$661$17672) (list x$661$17672)) (syntax-car$661$12202 x$661$17640)))) (quote #f))) (syntax-cdr$661$12206 x$661$17634)))) (quote #f))) ((lambda (x$661$17674) (quote ())) (syntax-car$661$12202 x$661$17634)))) (quote #f))) t$661$17612))) e$661$17606)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! syntax-transformer$661$12722 ((lambda () ((lambda (gen-syntax$661$17676 gen-ref$661$17678 gen-append$661$17680 gen-mappend$661$17682 gen-map$661$17684 gen-cons$661$17686 gen-vector$661$17688 regen$661$17690) (begin (set! gen-syntax$661$17676 (lambda (src$661$17762 e$661$17763 r$661$17764 maps$661$17765 ellipsis?$661$17766 vec?$661$17767) ((lambda (t$661$17774) ((lambda (ls/false$661$17776) (if (if ls/false$661$17776 (begin (quote #f) (apply (lambda (dots$661$17778) (ellipsis?$661$17766 dots$661$17778)) ls/false$661$17776)) (quote #f)) (apply (lambda (dots$661$17780) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (strip$661$12226 src$661$17762 (quote ())))) ls/false$661$17776) ((lambda (t$661$17782) ((lambda (ls/false$661$17784) (if (if ls/false$661$17784 (begin (quote #f) (apply (lambda (id$661$17786) (id?$661$12208 id$661$17786)) ls/false$661$17784)) (quote #f)) (apply (lambda (id$661$17788) ((lambda (label$661$17790) ((lambda (b$661$17792) ((lambda () (if (eq? (binding-type$661$12236 b$661$17792) (quote syntax)) (call-with-values (lambda () ((lambda (var.lev$661$17794) (gen-ref$661$17678 src$661$17762 (car var.lev$661$17794) (cdr var.lev$661$17794) maps$661$17765)) (binding-value$661$12238 b$661$17792))) (lambda (var$661$17796 maps$661$17797) (values (list (quote ref) var$661$17796) maps$661$17797))) (values (list (quote quote) e$661$17763) maps$661$17765))))) (label->binding$661$12232 label$661$17790 r$661$17764))) (id->label$661$12230 e$661$17763))) ls/false$661$17784) ((lambda (t$661$17800) ((lambda (ls/false$661$17802) (if (if ls/false$661$17802 (begin (quote #f) (apply (lambda (dots$661$17804 e$661$17805) (ellipsis?$661$17766 dots$661$17804)) ls/false$661$17802)) (quote #f)) (apply (lambda (dots$661$17808 e$661$17809) (if vec?$661$17767 (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (strip$661$12226 src$661$17762 (quote ()))) (gen-syntax$661$17676 src$661$17762 e$661$17809 r$661$17764 maps$661$17765 (lambda (x$661$17812) (quote #f)) (quote #f)))) ls/false$661$17802) ((lambda (t$661$17814) ((lambda (ls/false$661$17816) (if (if ls/false$661$17816 (begin (quote #f) (apply (lambda (x$661$17818 dots$661$17819 y$661$17820) (ellipsis?$661$17766 dots$661$17819)) ls/false$661$17816)) (quote #f)) (apply (lambda (x$661$17824 dots$661$17825 y$661$17826) (letrec ((f$661$17830 (lambda (y$661$17838 k$661$17839) ((lambda (t$661$17842) ((lambda (ls/false$661$17844) (if (if ls/false$661$17844 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$17844)) (quote #f)) (apply (lambda () (k$661$17839 maps$661$17765)) ls/false$661$17844) ((lambda (t$661$17846) ((lambda (ls/false$661$17848) (if (if ls/false$661$17848 (begin (quote #f) (apply (lambda (dots$661$17850 y$661$17851) (ellipsis?$661$17766 dots$661$17850)) ls/false$661$17848)) (quote #f)) (apply (lambda (dots$661$17854 y$661$17855) (f$661$17830 y$661$17855 (lambda (maps$661$17858) (call-with-values (lambda () (k$661$17839 (cons (quote ()) maps$661$17858))) (lambda (x$661$17860 maps$661$17861) (if (null? (car maps$661$17861)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (strip$661$12226 src$661$17762 (quote ()))) (values (gen-mappend$661$17682 x$661$17860 (car maps$661$17861)) (cdr maps$661$17861)))))))) ls/false$661$17848) ((lambda (t$661$17864) ((lambda (ls/false$661$17866) (if (if ls/false$661$17866 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$17866)) (quote #f)) (apply (lambda () (call-with-values (lambda () (gen-syntax$661$17676 src$661$17762 y$661$17838 r$661$17764 maps$661$17765 ellipsis?$661$17766 vec?$661$17767)) (lambda (y$661$17868 maps$661$17869) (call-with-values (lambda () (k$661$17839 maps$661$17869)) (lambda (x$661$17872 maps$661$17873) (values (gen-append$661$17680 x$661$17872 y$661$17868) maps$661$17873)))))) ls/false$661$17866) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17864 (quote ()))))) ((lambda (x$661$17876) (quote ())) t$661$17864))) t$661$17846))) ((lambda (x$661$17878) (if (syntax-pair?$661$12194 x$661$17878) (begin (quote #f) ((lambda (q$661$17880) (if q$661$17880 (begin (quote #f) ((lambda (r$661$17882) (if r$661$17882 (begin (quote #f) (append q$661$17880 r$661$17882)) (quote #f))) ((lambda (x$661$17884) (list x$661$17884)) (syntax-cdr$661$12206 x$661$17878)))) (quote #f))) ((lambda (x$661$17886) (list x$661$17886)) (syntax-car$661$12202 x$661$17878)))) (quote #f))) t$661$17846))) t$661$17842))) ((lambda (x$661$17888) (if (equal? (stx->datum$661$12228 x$661$17888) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$661$17842))) y$661$17838)))) (f$661$17830 y$661$17826 (lambda (maps$661$17832) (call-with-values (lambda () (gen-syntax$661$17676 src$661$17762 x$661$17824 r$661$17764 (cons (quote ()) maps$661$17832) ellipsis?$661$17766 (quote #f))) (lambda (x$661$17834 maps$661$17835) (if (null? (car maps$661$17835)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (strip$661$12226 src$661$17762 (quote ()))) (values (gen-map$661$17684 x$661$17834 (car maps$661$17835)) (cdr maps$661$17835))))))))) ls/false$661$17816) ((lambda (t$661$17890) ((lambda (ls/false$661$17892) (if (if ls/false$661$17892 (begin (quote #f) (apply (lambda (x$661$17894 y$661$17895) (quote #t)) ls/false$661$17892)) (quote #f)) (apply (lambda (x$661$17898 y$661$17899) (call-with-values (lambda () (gen-syntax$661$17676 src$661$17762 x$661$17898 r$661$17764 maps$661$17765 ellipsis?$661$17766 (quote #f))) (lambda (xnew$661$17902 maps$661$17903) (call-with-values (lambda () (gen-syntax$661$17676 src$661$17762 y$661$17899 r$661$17764 maps$661$17903 ellipsis?$661$17766 vec?$661$17767)) (lambda (ynew$661$17906 maps$661$17907) (values (gen-cons$661$17686 e$661$17763 x$661$17898 y$661$17899 xnew$661$17902 ynew$661$17906) maps$661$17907)))))) ls/false$661$17892) ((lambda (t$661$17910) ((lambda (ls/false$661$17912) (if (if ls/false$661$17912 (begin (quote #f) (apply (lambda (ls$661$17914) (not (stx?$661$12160 e$661$17763))) ls/false$661$17912)) (quote #f)) (apply (lambda (ls$661$17916) (call-with-values (lambda () (gen-syntax$661$17676 src$661$17762 ls$661$17916 r$661$17764 maps$661$17765 ellipsis?$661$17766 (quote #t))) (lambda (lsnew$661$17918 maps$661$17919) (values (gen-vector$661$17688 e$661$17763 ls$661$17916 lsnew$661$17918) maps$661$17919)))) ls/false$661$17912) ((lambda (t$661$17922) ((lambda (ls/false$661$17924) (if (if ls/false$661$17924 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$17924)) (quote #f)) (apply (lambda () (values (list (quote quote) e$661$17763) maps$661$17765)) ls/false$661$17924) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17922 (quote ()))))) ((lambda (x$661$17926) (quote ())) t$661$17922))) t$661$17910))) ((lambda (x$661$17928) (if (syntax-vector?$661$12196 x$661$17928) (begin (quote #f) ((letrec ((f$661$17930 (lambda (x$661$17932) (if (syntax-pair?$661$12194 x$661$17932) ((lambda (cars/f$661$17934) (if cars/f$661$17934 (begin (quote #f) ((lambda (cdrs/f$661$17936) (if cdrs/f$661$17936 (begin (quote #f) (map cons cars/f$661$17934 cdrs/f$661$17936)) (quote #f))) (f$661$17930 (syntax-cdr$661$12206 x$661$17932)))) (quote #f))) ((lambda (x$661$17938) (list x$661$17938)) (syntax-car$661$12202 x$661$17932))) (if (syntax-null?$661$12198 x$661$17932) (list (begin (quote ls) (quote ()))) (quote #f)))))) f$661$17930) (syntax-vector->list$661$12192 x$661$17928))) (quote #f))) t$661$17910))) t$661$17890))) ((lambda (x$661$17940) (if (syntax-pair?$661$12194 x$661$17940) (begin (quote #f) ((lambda (q$661$17942) (if q$661$17942 (begin (quote #f) ((lambda (r$661$17944) (if r$661$17944 (begin (quote #f) (append q$661$17942 r$661$17944)) (quote #f))) ((lambda (x$661$17946) (list x$661$17946)) (syntax-cdr$661$12206 x$661$17940)))) (quote #f))) ((lambda (x$661$17948) (list x$661$17948)) (syntax-car$661$12202 x$661$17940)))) (quote #f))) t$661$17890))) t$661$17814))) ((lambda (x$661$17950) (if (syntax-pair?$661$12194 x$661$17950) (begin (quote #f) ((lambda (q$661$17952) (if q$661$17952 (begin (quote #f) ((lambda (r$661$17954) (if r$661$17954 (begin (quote #f) (append q$661$17952 r$661$17954)) (quote #f))) ((lambda (x$661$17956) (if (syntax-pair?$661$12194 x$661$17956) (begin (quote #f) ((lambda (q$661$17958) (if q$661$17958 (begin (quote #f) ((lambda (r$661$17960) (if r$661$17960 (begin (quote #f) (append q$661$17958 r$661$17960)) (quote #f))) ((lambda (x$661$17962) (list x$661$17962)) (syntax-cdr$661$12206 x$661$17956)))) (quote #f))) ((lambda (x$661$17964) (list x$661$17964)) (syntax-car$661$12202 x$661$17956)))) (quote #f))) (syntax-cdr$661$12206 x$661$17950)))) (quote #f))) ((lambda (x$661$17966) (list x$661$17966)) (syntax-car$661$12202 x$661$17950)))) (quote #f))) t$661$17814))) t$661$17800))) ((lambda (x$661$17968) (if (syntax-pair?$661$12194 x$661$17968) (begin (quote #f) ((lambda (q$661$17970) (if q$661$17970 (begin (quote #f) ((lambda (r$661$17972) (if r$661$17972 (begin (quote #f) (append q$661$17970 r$661$17972)) (quote #f))) ((lambda (x$661$17974) (if (syntax-pair?$661$12194 x$661$17974) (begin (quote #f) ((lambda (q$661$17976) (if q$661$17976 (begin (quote #f) ((lambda (r$661$17978) (if r$661$17978 (begin (quote #f) (append q$661$17976 r$661$17978)) (quote #f))) ((lambda (x$661$17980) (if (equal? (stx->datum$661$12228 x$661$17980) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$17974)))) (quote #f))) ((lambda (x$661$17982) (list x$661$17982)) (syntax-car$661$12202 x$661$17974)))) (quote #f))) (syntax-cdr$661$12206 x$661$17968)))) (quote #f))) ((lambda (x$661$17984) (list x$661$17984)) (syntax-car$661$12202 x$661$17968)))) (quote #f))) t$661$17800))) t$661$17782))) ((lambda (x$661$17986) (list x$661$17986)) t$661$17782))) t$661$17774))) ((lambda (x$661$17988) (list x$661$17988)) t$661$17774))) e$661$17763))) (set! gen-ref$661$17678 (lambda (src$661$17744 var$661$17745 level$661$17746 maps$661$17747) (if (= level$661$17746 (quote 0)) (values var$661$17745 maps$661$17747) (if (null? maps$661$17747) (error (quote expander) (quote "~a ~s") (quote "missing ellipsis in syntax form") (strip$661$12226 src$661$17744 (quote ()))) (call-with-values (lambda () (gen-ref$661$17678 src$661$17744 var$661$17745 (- level$661$17746 (quote 1)) (cdr maps$661$17747))) (lambda (outer-var$661$17752 outer-maps$661$17753) ((lambda (t$661$17756) (if t$661$17756 ((lambda (b$661$17758) (values (cdr b$661$17758) maps$661$17747)) t$661$17756) ((lambda (inner-var$661$17760) (values inner-var$661$17760 (cons (cons (cons outer-var$661$17752 inner-var$661$17760) (car maps$661$17747)) outer-maps$661$17753))) (gen-lexical$661$12118 (quote tmp))))) (assq outer-var$661$17752 (car maps$661$17747))))))))) (set! gen-append$661$17680 (lambda (x$661$17740 y$661$17741) (if (equal? y$661$17741 (quote (quote ()))) x$661$17740 (list (quote append) x$661$17740 y$661$17741)))) (set! gen-mappend$661$17682 (lambda (e$661$17736 map-env$661$17737) (list (quote apply) (quote (primitive append)) (gen-map$661$17684 e$661$17736 map-env$661$17737)))) (set! gen-map$661$17684 (lambda (e$661$17718 map-env$661$17719) ((lambda (formals$661$17722 actuals$661$17723) (if (eq? (car e$661$17718) (quote ref)) (car actuals$661$17723) (if (for-all (lambda (x$661$17726) (if (eq? (car x$661$17726) (quote ref)) (begin (quote #f) (memq (cadr x$661$17726) formals$661$17722)) (quote #f))) (cdr e$661$17718)) ((lambda (args$661$17728) (cons (quote map) (cons (list (quote primitive) (car e$661$17718)) args$661$17728))) (map ((lambda (r$661$17730) (lambda (x$661$17732) (cdr (assq (cadr x$661$17732) r$661$17730)))) (map cons formals$661$17722 actuals$661$17723)) (cdr e$661$17718))) (cons* (quote map) (list (quote lambda) formals$661$17722 e$661$17718) actuals$661$17723)))) (map cdr map-env$661$17719) (map (lambda (x$661$17734) (list (quote ref) (car x$661$17734))) map-env$661$17719)))) (set! gen-cons$661$17686 (lambda (e$661$17703 x$661$17704 y$661$17705 xnew$661$17706 ynew$661$17707) ((lambda (t$661$17713) (if (memv t$661$17713 (quote (quote))) (if (eq? (car xnew$661$17706) (quote quote)) ((lambda (xnew$661$17714 ynew$661$17715) (if (if (eq? xnew$661$17714 x$661$17704) (begin (quote #f) (eq? ynew$661$17715 y$661$17705)) (quote #f)) (list (quote quote) e$661$17703) (list (quote quote) (cons xnew$661$17714 ynew$661$17715)))) (cadr xnew$661$17706) (cadr ynew$661$17707)) (if (null? (cadr ynew$661$17707)) (list (quote list) xnew$661$17706) (list (quote cons) xnew$661$17706 ynew$661$17707))) (if (memv t$661$17713 (quote (list))) (cons (quote list) (cons xnew$661$17706 (cdr ynew$661$17707))) (list (quote cons) xnew$661$17706 ynew$661$17707)))) (car ynew$661$17707)))) (set! gen-vector$661$17688 (lambda (e$661$17697 ls$661$17698 lsnew$661$17699) (if (eq? (car lsnew$661$17699) (quote quote)) (if (eq? (cadr lsnew$661$17699) ls$661$17698) (list (quote quote) e$661$17697) (list (quote quote) (list->vector (cadr lsnew$661$17699)))) (if (eq? (car lsnew$661$17699) (quote list)) (cons (quote vector) (cdr lsnew$661$17699)) (list (quote list->vector) lsnew$661$17699))))) (set! regen$661$17690 (lambda (x$661$17692) ((lambda (t$661$17694) (if (memv t$661$17694 (quote (ref))) (cadr x$661$17692) (if (memv t$661$17694 (quote (primitive))) (list (quote primitive) (cadr x$661$17692)) (if (memv t$661$17694 (quote (quote))) (list (quote quote) (cadr x$661$17692)) (if (memv t$661$17694 (quote (lambda))) (build-lambda$661$12097 (quote #f) (cadr x$661$17692) (regen$661$17690 (caddr x$661$17692))) (if (memv t$661$17694 (quote (map))) ((lambda (ls$661$17695) (cons (quote (primitive map)) ls$661$17695)) (map regen$661$17690 (cdr x$661$17692))) (cons (list (quote primitive) (car x$661$17692)) (map regen$661$17690 (cdr x$661$17692))))))))) (car x$661$17692)))) (lambda (e$661$17990 r$661$17991 mr$661$17992) ((lambda (t$661$17996) ((lambda (ls/false$661$17998) (if (if ls/false$661$17998 (begin (quote #f) (apply (lambda (x$661$18000) (quote #t)) ls/false$661$17998)) (quote #f)) (apply (lambda (x$661$18002) (call-with-values (lambda () (gen-syntax$661$17676 e$661$17990 x$661$18002 r$661$17991 (quote ()) ellipsis?$661$12718 (quote #f))) (lambda (e$661$18004 maps$661$18005) (regen$661$17690 e$661$18004)))) ls/false$661$17998) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$17996 (quote ()))))) ((lambda (x$661$18008) (if (syntax-pair?$661$12194 x$661$18008) (begin (quote #f) ((lambda (q$661$18010) (if q$661$18010 (begin (quote #f) ((lambda (r$661$18012) (if r$661$18012 (begin (quote #f) (append q$661$18010 r$661$18012)) (quote #f))) ((lambda (x$661$18014) (if (syntax-pair?$661$12194 x$661$18014) (begin (quote #f) ((lambda (q$661$18016) (if q$661$18016 (begin (quote #f) ((lambda (r$661$18018) (if r$661$18018 (begin (quote #f) (append q$661$18016 r$661$18018)) (quote #f))) ((lambda (x$661$18020) (if (equal? (stx->datum$661$12228 x$661$18020) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$18014)))) (quote #f))) ((lambda (x$661$18022) (list x$661$18022)) (syntax-car$661$12202 x$661$18014)))) (quote #f))) (syntax-cdr$661$12206 x$661$18008)))) (quote #f))) ((lambda (x$661$18024) (quote ())) (syntax-car$661$12202 x$661$18008)))) (quote #f))) t$661$17996))) e$661$17990)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! core-macro-transformer$661$12724 (lambda (name$661$18026) ((lambda (t$661$18028) (if (memv t$661$18028 (quote (quote))) quote-transformer$661$12662 (if (memv t$661$18028 (quote (lambda))) lambda-transformer$661$12666 (if (memv t$661$18028 (quote (case-lambda))) case-lambda-transformer$661$12664 (if (memv t$661$18028 (quote (let-values))) let-values-transformer$661$12644 (if (memv t$661$18028 (quote (letrec))) letrec-transformer$661$12648 (if (memv t$661$18028 (quote (letrec*))) letrec*-transformer$661$12650 (if (memv t$661$18028 (quote (case))) case-transformer$661$12660 (if (memv t$661$18028 (quote (if))) if-transformer$661$12658 (if (memv t$661$18028 (quote (when))) when-transformer$661$12654 (if (memv t$661$18028 (quote (unless))) unless-transformer$661$12656 (if (memv t$661$18028 (quote (parameterize))) parameterize-transformer$661$12710 (if (memv t$661$18028 (quote (foreign-call))) foreign-call-transformer$661$12712 (if (memv t$661$18028 (quote (syntax-case))) syntax-case-transformer$661$12720 (if (memv t$661$18028 (quote (syntax))) syntax-transformer$661$12722 (if (memv t$661$18028 (quote (type-descriptor))) type-descriptor-transformer$661$12652 (error (quote macro-transformer) (quote "cannot find ~s") name$661$18026))))))))))))))))) name$661$18026))) (set! macro-transformer$661$12726 (lambda (x$661$18029) (if (procedure? x$661$18029) x$661$18029 (if (symbol? x$661$18029) ((lambda (t$661$18031) (if (memv t$661$18031 (quote (define-record))) define-record-macro$661$12706 (if (memv t$661$18031 (quote (include))) include-macro$661$12698 (if (memv t$661$18031 (quote (cond))) cond-macro$661$12696 (if (memv t$661$18031 (quote (let))) let-macro$661$12672 (if (memv t$661$18031 (quote (do))) do-macro$661$12688 (if (memv t$661$18031 (quote (or))) or-macro$661$12692 (if (memv t$661$18031 (quote (and))) and-macro$661$12694 (if (memv t$661$18031 (quote (let*))) let*-macro$661$12690 (if (memv t$661$18031 (quote (syntax-rules))) syntax-rules-macro$661$12700 (if (memv t$661$18031 (quote (quasiquote))) quasiquote-macro$661$12702 (if (memv t$661$18031 (quote (quasisyntax))) quasisyntax-macro$661$12704 (if (memv t$661$18031 (quote (with-syntax))) with-syntax-macro$661$12670 (if (memv t$661$18031 (quote (identifier-syntax))) identifier-syntax-macro$661$12686 (if (memv t$661$18031 (quote (time))) time-macro$661$12678 (if (memv t$661$18031 (quote (delay))) delay-macro$661$12680 (if (memv t$661$18031 (quote (assert))) assert-macro$661$12682 (if (memv t$661$18031 (quote (endianness))) endianness-macro$661$12684 (if (memv t$661$18031 (quote (trace-lambda))) trace-lambda-macro$661$12674 (if (memv t$661$18031 (quote (trace-define))) trace-define-macro$661$12676 (if (memv t$661$18031 (quote (... => _ else unquote unquote-splicing unsyntax unsyntax-splicing))) incorrect-usage-macro$661$12708 (error (quote macro-transformer) (quote "invalid macro ~s") x$661$18029)))))))))))))))))))))) x$661$18029) (error (quote core-macro-transformer) (quote "invalid macro ~s") x$661$18029))))) (set! local-macro-transformer$661$12728 (lambda (x$661$18032) (car x$661$18032))) (set! chi-macro$661$12730 (lambda (p$661$18034 e$661$18035) ((lambda (s$661$18038) (add-mark$661$12186 (gen-mark$661$12176) s$661$18038)) ((macro-transformer$661$12726 p$661$18034) (add-mark$661$12186 anti-mark$661$12178 e$661$18035))))) (set! chi-local-macro$661$12732 (lambda (p$661$18040 e$661$18041) ((lambda (s$661$18044) (add-mark$661$12186 (gen-mark$661$12176) s$661$18044)) ((local-macro-transformer$661$12728 p$661$18040) (add-mark$661$12186 anti-mark$661$12178 e$661$18041))))) (set! chi-global-macro$661$12734 (lambda (p$661$18046 e$661$18047) ((lambda (lib$661$18050 loc$661$18051) (begin (visit-library$661$11745 lib$661$18050) ((lambda (x$661$18054) ((lambda (transformer$661$18056) ((lambda (s$661$18058) (add-mark$661$12186 (gen-mark$661$12176) s$661$18058)) (transformer$661$18056 (add-mark$661$12186 anti-mark$661$12178 e$661$18047)))) (if (procedure? x$661$18054) x$661$18054 (error (quote chi-global-macro) (quote "~s is not a procedure"))))) (symbol-value loc$661$18051)))) (car p$661$18046) (cdr p$661$18046)))) (set! chi-expr*$661$12736 (lambda (e*$661$18060 r$661$18061 mr$661$18062) (if (null? e*$661$18060) (quote ()) ((lambda (e$661$18066) (cons e$661$18066 (chi-expr*$661$12736 (cdr e*$661$18060) r$661$18061 mr$661$18062))) (chi-expr$661$12740 (car e*$661$18060) r$661$18061 mr$661$18062))))) (set! chi-application$661$12738 (lambda (e$661$18068 r$661$18069 mr$661$18070) ((lambda (t$661$18074) ((lambda (ls/false$661$18076) (if (if ls/false$661$18076 (begin (quote #f) (apply (lambda (rator$661$18078 rands$661$18079) (quote #t)) ls/false$661$18076)) (quote #f)) (apply (lambda (rator$661$18082 rands$661$18083) ((lambda (rator$661$18086) (cons rator$661$18086 (chi-expr*$661$12736 rands$661$18083 r$661$18069 mr$661$18070))) (chi-expr$661$12740 rator$661$18082 r$661$18069 mr$661$18070))) ls/false$661$18076) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18074 (quote ()))))) ((lambda (x$661$18088) (if (syntax-pair?$661$12194 x$661$18088) (begin (quote #f) ((lambda (q$661$18090) (if q$661$18090 (begin (quote #f) ((lambda (r$661$18092) (if r$661$18092 (begin (quote #f) (append q$661$18090 r$661$18092)) (quote #f))) ((letrec ((f$661$18094 (lambda (x$661$18096) (if (syntax-pair?$661$12194 x$661$18096) ((lambda (cars/f$661$18098) (if cars/f$661$18098 (begin (quote #f) ((lambda (cdrs/f$661$18100) (if cdrs/f$661$18100 (begin (quote #f) (map cons cars/f$661$18098 cdrs/f$661$18100)) (quote #f))) (f$661$18094 (syntax-cdr$661$12206 x$661$18096)))) (quote #f))) ((lambda (x$661$18102) (list x$661$18102)) (syntax-car$661$12202 x$661$18096))) (if (syntax-null?$661$12198 x$661$18096) (list (begin (quote rands) (quote ()))) (quote #f)))))) f$661$18094) (syntax-cdr$661$12206 x$661$18088)))) (quote #f))) ((lambda (x$661$18104) (list x$661$18104)) (syntax-car$661$12202 x$661$18088)))) (quote #f))) t$661$18074))) e$661$18068))) (set! chi-expr$661$12740 (lambda (e$661$18106 r$661$18107 mr$661$18108) (call-with-values (lambda () (syntax-type$661$12240 e$661$18106 r$661$18107)) (lambda (type$661$18112 value$661$18113 kwd$661$18114) ((lambda (t$661$18118) (if (memv t$661$18118 (quote (core-macro))) ((lambda (transformer$661$18255) (transformer$661$18255 e$661$18106 r$661$18107 mr$661$18108)) (core-macro-transformer$661$12724 value$661$18113)) (if (memv t$661$18118 (quote (global))) ((lambda (lib$661$18251) ((lambda (loc$661$18253) ((lambda () (begin ((inv-collector$661$12788) lib$661$18251) loc$661$18253)))) (cdr value$661$18113))) (car value$661$18113)) (if (memv t$661$18118 (quote (core-prim))) ((lambda (name$661$18249) (list (quote primitive) name$661$18249)) value$661$18113) (if (memv t$661$18118 (quote (call))) (chi-application$661$12738 e$661$18106 r$661$18107 mr$661$18108) (if (memv t$661$18118 (quote (lexical))) ((lambda (lex$661$18247) lex$661$18247) value$661$18113) (if (memv t$661$18118 (quote (global-macro global-macro!))) (chi-expr$661$12740 (chi-global-macro$661$12734 value$661$18113 e$661$18106) r$661$18107 mr$661$18108) (if (memv t$661$18118 (quote (local-macro local-macro!))) (chi-expr$661$12740 (chi-local-macro$661$12732 value$661$18113 e$661$18106) r$661$18107 mr$661$18108) (if (memv t$661$18118 (quote (macro macro!))) (chi-expr$661$12740 (chi-macro$661$12730 value$661$18113 e$661$18106) r$661$18107 mr$661$18108) (if (memv t$661$18118 (quote (constant))) ((lambda (datum$661$18245) (list (quote quote) datum$661$18245)) value$661$18113) (if (memv t$661$18118 (quote (set!))) (chi-set!$661$12742 e$661$18106 r$661$18107 mr$661$18108) (if (memv t$661$18118 (quote (begin))) ((lambda (t$661$18207) ((lambda (ls/false$661$18209) (if (if ls/false$661$18209 (begin (quote #f) (apply (lambda (x$661$18211 x*$661$18212) (quote #t)) ls/false$661$18209)) (quote #f)) (apply (lambda (x$661$18215 x*$661$18216) (build-sequence$661$12091 (quote #f) (chi-expr*$661$12736 (cons x$661$18215 x*$661$18216) r$661$18107 mr$661$18108))) ls/false$661$18209) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18207 (quote ()))))) ((lambda (x$661$18219) (if (syntax-pair?$661$12194 x$661$18219) (begin (quote #f) ((lambda (q$661$18221) (if q$661$18221 (begin (quote #f) ((lambda (r$661$18223) (if r$661$18223 (begin (quote #f) (append q$661$18221 r$661$18223)) (quote #f))) ((lambda (x$661$18225) (if (syntax-pair?$661$12194 x$661$18225) (begin (quote #f) ((lambda (q$661$18227) (if q$661$18227 (begin (quote #f) ((lambda (r$661$18229) (if r$661$18229 (begin (quote #f) (append q$661$18227 r$661$18229)) (quote #f))) ((letrec ((f$661$18231 (lambda (x$661$18233) (if (syntax-pair?$661$12194 x$661$18233) ((lambda (cars/f$661$18235) (if cars/f$661$18235 (begin (quote #f) ((lambda (cdrs/f$661$18237) (if cdrs/f$661$18237 (begin (quote #f) (map cons cars/f$661$18235 cdrs/f$661$18237)) (quote #f))) (f$661$18231 (syntax-cdr$661$12206 x$661$18233)))) (quote #f))) ((lambda (x$661$18239) (list x$661$18239)) (syntax-car$661$12202 x$661$18233))) (if (syntax-null?$661$12198 x$661$18233) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$18231) (syntax-cdr$661$12206 x$661$18225)))) (quote #f))) ((lambda (x$661$18241) (list x$661$18241)) (syntax-car$661$12202 x$661$18225)))) (quote #f))) (syntax-cdr$661$12206 x$661$18219)))) (quote #f))) ((lambda (x$661$18243) (quote ())) (syntax-car$661$12202 x$661$18219)))) (quote #f))) t$661$18207))) e$661$18106) (if (memv t$661$18118 (quote (let-syntax letrec-syntax))) ((lambda (t$661$18119) ((lambda (ls/false$661$18121) (if (if ls/false$661$18121 (begin (quote #f) (apply (lambda (xlhs*$661$18123 xrhs*$661$18124 xbody$661$18125 xbody*$661$18126) (if (valid-bound-ids?$661$12218 xlhs*$661$18123) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (strip$661$12226 e$661$18106 (quote ()))))) ls/false$661$18121)) (quote #f)) (apply (lambda (xlhs*$661$18131 xrhs*$661$18132 xbody$661$18133 xbody*$661$18134) ((lambda (xlab*$661$18139) ((lambda (xrib$661$18141) ((lambda (xb*$661$18143) ((lambda () (build-sequence$661$12091 (quote #f) (chi-expr*$661$12736 (map (lambda (x$661$18145) (add-subst$661$12188 xrib$661$18141 x$661$18145)) (cons xbody$661$18133 xbody*$661$18134)) (append (map cons xlab*$661$18139 xb*$661$18143) r$661$18107) (append (map cons xlab*$661$18139 xb*$661$18143) mr$661$18108)))))) (map (lambda (x$661$18147) (make-eval-transformer$661$12272 (expand-transformer$661$12774 (if (eq? type$661$18112 (quote let-syntax)) x$661$18147 (add-subst$661$12188 xrib$661$18141 x$661$18147)) mr$661$18108))) xrhs*$661$18132))) (make-full-rib$661$12155 xlhs*$661$18131 xlab*$661$18139))) (map gen-label$661$12122 xlhs*$661$18131))) ls/false$661$18121) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18119 (quote ()))))) ((lambda (x$661$18149) (if (syntax-pair?$661$12194 x$661$18149) (begin (quote #f) ((lambda (q$661$18151) (if q$661$18151 (begin (quote #f) ((lambda (r$661$18153) (if r$661$18153 (begin (quote #f) (append q$661$18151 r$661$18153)) (quote #f))) ((lambda (x$661$18155) (if (syntax-pair?$661$12194 x$661$18155) (begin (quote #f) ((lambda (q$661$18157) (if q$661$18157 (begin (quote #f) ((lambda (r$661$18159) (if r$661$18159 (begin (quote #f) (append q$661$18157 r$661$18159)) (quote #f))) ((lambda (x$661$18161) (if (syntax-pair?$661$12194 x$661$18161) (begin (quote #f) ((lambda (q$661$18163) (if q$661$18163 (begin (quote #f) ((lambda (r$661$18165) (if r$661$18165 (begin (quote #f) (append q$661$18163 r$661$18165)) (quote #f))) ((letrec ((f$661$18167 (lambda (x$661$18169) (if (syntax-pair?$661$12194 x$661$18169) ((lambda (cars/f$661$18171) (if cars/f$661$18171 (begin (quote #f) ((lambda (cdrs/f$661$18173) (if cdrs/f$661$18173 (begin (quote #f) (map cons cars/f$661$18171 cdrs/f$661$18173)) (quote #f))) (f$661$18167 (syntax-cdr$661$12206 x$661$18169)))) (quote #f))) ((lambda (x$661$18175) (list x$661$18175)) (syntax-car$661$12202 x$661$18169))) (if (syntax-null?$661$12198 x$661$18169) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) f$661$18167) (syntax-cdr$661$12206 x$661$18161)))) (quote #f))) ((lambda (x$661$18177) (list x$661$18177)) (syntax-car$661$12202 x$661$18161)))) (quote #f))) (syntax-cdr$661$12206 x$661$18155)))) (quote #f))) ((letrec ((f$661$18179 (lambda (x$661$18181) (if (syntax-pair?$661$12194 x$661$18181) ((lambda (cars/f$661$18183) (if cars/f$661$18183 (begin (quote #f) ((lambda (cdrs/f$661$18185) (if cdrs/f$661$18185 (begin (quote #f) (map cons cars/f$661$18183 cdrs/f$661$18185)) (quote #f))) (f$661$18179 (syntax-cdr$661$12206 x$661$18181)))) (quote #f))) ((lambda (x$661$18187) (if (syntax-pair?$661$12194 x$661$18187) (begin (quote #f) ((lambda (q$661$18189) (if q$661$18189 (begin (quote #f) ((lambda (r$661$18191) (if r$661$18191 (begin (quote #f) (append q$661$18189 r$661$18191)) (quote #f))) ((lambda (x$661$18193) (if (syntax-pair?$661$12194 x$661$18193) (begin (quote #f) ((lambda (q$661$18195) (if q$661$18195 (begin (quote #f) ((lambda (r$661$18197) (if r$661$18197 (begin (quote #f) (append q$661$18195 r$661$18197)) (quote #f))) ((lambda (x$661$18199) (if (equal? (stx->datum$661$12228 x$661$18199) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$18193)))) (quote #f))) ((lambda (x$661$18201) (list x$661$18201)) (syntax-car$661$12202 x$661$18193)))) (quote #f))) (syntax-cdr$661$12206 x$661$18187)))) (quote #f))) ((lambda (x$661$18203) (list x$661$18203)) (syntax-car$661$12202 x$661$18187)))) (quote #f))) (syntax-car$661$12202 x$661$18181))) (if (syntax-null?$661$12198 x$661$18181) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) f$661$18179) (syntax-car$661$12202 x$661$18155)))) (quote #f))) (syntax-cdr$661$12206 x$661$18149)))) (quote #f))) ((lambda (x$661$18205) (quote ())) (syntax-car$661$12202 x$661$18149)))) (quote #f))) t$661$18119))) e$661$18106) (if (memv t$661$18118 (quote (displaced-lexical))) (error (quote expander) (quote "~a ~s") (quote "identifier out of context") (strip$661$12226 e$661$18106 (quote ()))) (if (memv t$661$18118 (quote (syntax))) (error (quote expander) (quote "~a ~s") (quote "reference to pattern variable outside a syntax form") (strip$661$12226 e$661$18106 (quote ()))) (if (memv t$661$18118 (quote (define define-syntax module import))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (strip$661$12226 e$661$18106 (quote ()))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (strip$661$12226 e$661$18106 (quote ()))))))))))))))))))) type$661$18112))))) (set! chi-set!$661$12742 (lambda (e$661$18257 r$661$18258 mr$661$18259) ((lambda (t$661$18263) ((lambda (ls/false$661$18265) (if (if ls/false$661$18265 (begin (quote #f) (apply (lambda (x$661$18267 v$661$18268) (id?$661$12208 x$661$18267)) ls/false$661$18265)) (quote #f)) (apply (lambda (x$661$18271 v$661$18272) (call-with-values (lambda () (syntax-type$661$12240 x$661$18271 r$661$18258)) (lambda (type$661$18275 value$661$18276 kwd$661$18277) ((lambda (t$661$18281) (if (memv t$661$18281 (quote (lexical))) (list (quote set!) value$661$18276 (chi-expr$661$12740 v$661$18272 r$661$18258 mr$661$18259)) (if (memv t$661$18281 (quote (global core-prim))) (error (quote expander) (quote "~a ~s") (quote "cannot modify imported identifier in") (strip$661$12226 e$661$18257 (quote ()))) (if (memv t$661$18281 (quote (global-macro!))) (chi-expr$661$12740 (chi-global-macro$661$12734 value$661$18276 e$661$18257) r$661$18258 mr$661$18259) (if (memv t$661$18281 (quote (local-macro!))) (chi-expr$661$12740 (chi-local-macro$661$12732 value$661$18276 e$661$18257) r$661$18258 mr$661$18259) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 e$661$18257))))))) type$661$18275)))) ls/false$661$18265) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18263 (quote ()))))) ((lambda (x$661$18282) (if (syntax-pair?$661$12194 x$661$18282) (begin (quote #f) ((lambda (q$661$18284) (if q$661$18284 (begin (quote #f) ((lambda (r$661$18286) (if r$661$18286 (begin (quote #f) (append q$661$18284 r$661$18286)) (quote #f))) ((lambda (x$661$18288) (if (syntax-pair?$661$12194 x$661$18288) (begin (quote #f) ((lambda (q$661$18290) (if q$661$18290 (begin (quote #f) ((lambda (r$661$18292) (if r$661$18292 (begin (quote #f) (append q$661$18290 r$661$18292)) (quote #f))) ((lambda (x$661$18294) (if (syntax-pair?$661$12194 x$661$18294) (begin (quote #f) ((lambda (q$661$18296) (if q$661$18296 (begin (quote #f) ((lambda (r$661$18298) (if r$661$18298 (begin (quote #f) (append q$661$18296 r$661$18298)) (quote #f))) ((lambda (x$661$18300) (if (equal? (stx->datum$661$12228 x$661$18300) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$18294)))) (quote #f))) ((lambda (x$661$18302) (list x$661$18302)) (syntax-car$661$12202 x$661$18294)))) (quote #f))) (syntax-cdr$661$12206 x$661$18288)))) (quote #f))) ((lambda (x$661$18304) (list x$661$18304)) (syntax-car$661$12202 x$661$18288)))) (quote #f))) (syntax-cdr$661$12206 x$661$18282)))) (quote #f))) ((lambda (x$661$18306) (quote ())) (syntax-car$661$12202 x$661$18282)))) (quote #f))) t$661$18263))) e$661$18257))) (set! chi-lambda-clause$661$12744 (lambda (fmls$661$18308 body*$661$18309 r$661$18310 mr$661$18311) ((lambda (t$661$18316) ((lambda (ls/false$661$18318) (if (if ls/false$661$18318 (begin (quote #f) (apply (lambda (x*$661$18320) (quote #t)) ls/false$661$18318)) (quote #f)) (apply (lambda (x*$661$18322) (if (valid-bound-ids?$661$12218 x*$661$18322) ((lambda (lex*$661$18324 lab*$661$18325) (values lex*$661$18324 (chi-internal$661$12756 (add-subst$661$12188 (make-full-rib$661$12155 x*$661$18322 lab*$661$18325) body*$661$18309) (add-lexicals$661$12642 lab*$661$18325 lex*$661$18324 r$661$18310) mr$661$18311))) (map gen-lexical$661$12118 x*$661$18322) (map gen-label$661$12122 x*$661$18322)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (strip$661$12226 fmls$661$18308 (quote ()))))) ls/false$661$18318) ((lambda (t$661$18328) ((lambda (ls/false$661$18330) (if (if ls/false$661$18330 (begin (quote #f) (apply (lambda (x*$661$18332 x$661$18333) (quote #t)) ls/false$661$18330)) (quote #f)) (apply (lambda (x*$661$18336 x$661$18337) (if (valid-bound-ids?$661$12218 (cons x$661$18337 x*$661$18336)) ((lambda (lex*$661$18340 lab*$661$18341 lex$661$18342 lab$661$18343) (values (append lex*$661$18340 lex$661$18342) (chi-internal$661$12756 (add-subst$661$12188 (make-full-rib$661$12155 (cons x$661$18337 x*$661$18336) (cons lab$661$18343 lab*$661$18341)) body*$661$18309) (add-lexicals$661$12642 (cons lab$661$18343 lab*$661$18341) (cons lex$661$18342 lex*$661$18340) r$661$18310) mr$661$18311))) (map gen-lexical$661$12118 x*$661$18336) (map gen-label$661$12122 x*$661$18336) (gen-lexical$661$12118 x$661$18337) (gen-label$661$12122 x$661$18337)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (strip$661$12226 fmls$661$18308 (quote ()))))) ls/false$661$18330) ((lambda (t$661$18348) ((lambda (ls/false$661$18350) (if (if ls/false$661$18350 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$18350)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (strip$661$12226 fmls$661$18308 (quote ())))) ls/false$661$18350) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18348 (quote ()))))) ((lambda (x$661$18352) (quote ())) t$661$18348))) t$661$18328))) ((letrec ((f$661$18354 (lambda (x$661$18360) (if (syntax-pair?$661$12194 x$661$18360) ((lambda (cars/f$661$18362) (if cars/f$661$18362 (begin (quote #f) ((lambda (d/f$661$18364) (if d/f$661$18364 (begin (quote #f) (cons (map cons cars/f$661$18362 (car d/f$661$18364)) (cdr d/f$661$18364))) (quote #f))) (f$661$18354 (syntax-cdr$661$12206 x$661$18360)))) (quote #f))) ((lambda (x$661$18366) (list x$661$18366)) (syntax-car$661$12202 x$661$18360))) ((lambda (d$661$18368) (if d$661$18368 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) d$661$18368)) (quote #f))) ((lambda (x$661$18370) (list x$661$18370)) x$661$18360)))))) (lambda (x$661$18356) ((lambda (x$661$18358) (if x$661$18358 (begin (quote #f) (append (car x$661$18358) (cdr x$661$18358))) (quote #f))) (f$661$18354 x$661$18356)))) t$661$18328))) t$661$18316))) ((letrec ((f$661$18372 (lambda (x$661$18374) (if (syntax-pair?$661$12194 x$661$18374) ((lambda (cars/f$661$18376) (if cars/f$661$18376 (begin (quote #f) ((lambda (cdrs/f$661$18378) (if cdrs/f$661$18378 (begin (quote #f) (map cons cars/f$661$18376 cdrs/f$661$18378)) (quote #f))) (f$661$18372 (syntax-cdr$661$12206 x$661$18374)))) (quote #f))) ((lambda (x$661$18380) (list x$661$18380)) (syntax-car$661$12202 x$661$18374))) (if (syntax-null?$661$12198 x$661$18374) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$18372) t$661$18316))) fmls$661$18308))) (set! chi-lambda-clause*$661$12746 (lambda (fmls*$661$18382 body**$661$18383 r$661$18384 mr$661$18385) (if (null? fmls*$661$18382) (values (quote ()) (quote ())) (call-with-values (lambda () (chi-lambda-clause$661$12744 (car fmls*$661$18382) (car body**$661$18383) r$661$18384 mr$661$18385)) (lambda (a$661$18390 b$661$18391) (call-with-values (lambda () (chi-lambda-clause*$661$12746 (cdr fmls*$661$18382) (cdr body**$661$18383) r$661$18384 mr$661$18385)) (lambda (a*$661$18394 b*$661$18395) (values (cons a$661$18390 a*$661$18394) (cons b$661$18391 b*$661$18395))))))))) (set! chi-rhs$661$12748 (lambda (rhs$661$18398 r$661$18399 mr$661$18400) ((lambda (t$661$18404) (if (memv t$661$18404 (quote (defun))) ((lambda (x$661$18409) ((lambda (fmls$661$18411 body*$661$18412) (call-with-values (lambda () (chi-lambda-clause$661$12744 fmls$661$18411 body*$661$18412 r$661$18399 mr$661$18400)) (lambda (fmls$661$18415 body$661$18416) (build-lambda$661$12097 (quote #f) fmls$661$18415 body$661$18416)))) (car x$661$18409) (cdr x$661$18409))) (cdr rhs$661$18398)) (if (memv t$661$18404 (quote (expr))) ((lambda (expr$661$18407) (chi-expr$661$12740 expr$661$18407 r$661$18399 mr$661$18400)) (cdr rhs$661$18398)) (if (memv t$661$18404 (quote (top-expr))) ((lambda (expr$661$18405) (build-sequence$661$12091 (quote #f) (list (chi-expr$661$12740 expr$661$18405 r$661$18399 mr$661$18400) (build-void$661$12090)))) (cdr rhs$661$18398)) (error (quote chi-rhs) (quote "invalid rhs ~s") rhs$661$18398))))) (car rhs$661$18398)))) (set! chi-rhs*$661$12750 (lambda (rhs*$661$18419 r$661$18420 mr$661$18421) (letrec ((f$661$18425 (lambda (ls$661$18427) (if (null? ls$661$18427) (quote ()) ((lambda (a$661$18429) (cons a$661$18429 (f$661$18425 (cdr ls$661$18427)))) (chi-rhs$661$12748 (car ls$661$18427) r$661$18420 mr$661$18421)))))) (f$661$18425 rhs*$661$18419)))) (set! find-bound=?$661$12752 (lambda (x$661$18431 lhs*$661$18432 rhs*$661$18433) (if (null? lhs*$661$18432) (quote #f) (if (bound-id=?$661$12214 x$661$18431 (car lhs*$661$18432)) (car rhs*$661$18433) (find-bound=?$661$12752 x$661$18431 (cdr lhs*$661$18432) (cdr rhs*$661$18433)))))) (set! find-dups$661$12754 (lambda (ls$661$18437) (letrec ((f$661$18439 (lambda (ls$661$18441 dups$661$18442) (if (null? ls$661$18441) dups$661$18442 ((lambda (t$661$18445) (if t$661$18445 ((lambda (x$661$18447) (f$661$18439 (cdr ls$661$18441) (cons (list (car ls$661$18441) x$661$18447) dups$661$18442))) t$661$18445) (f$661$18439 (cdr ls$661$18441) dups$661$18442))) (find-bound=?$661$12752 (car ls$661$18441) (cdr ls$661$18441) (cdr ls$661$18441))))))) (f$661$18439 ls$661$18437 (quote ()))))) (set! chi-internal$661$12756 (lambda (e*$661$18449 r$661$18450 mr$661$18451) ((lambda (rib$661$18455) (call-with-values (lambda () (chi-body*$661$12762 (map (lambda (x$661$18457) (add-subst$661$12188 rib$661$18455 x$661$18457)) (syntax->list$661$12204 e*$661$18449)) r$661$18450 mr$661$18451 (quote ()) (quote ()) (quote ()) (quote ()) rib$661$18455 (quote #f))) (lambda (e*$661$18459 r$661$18460 mr$661$18461 lex*$661$18462 rhs*$661$18463 mod**$661$18464 kwd*$661$18465) (begin (if (null? e*$661$18459) (error (quote expander) (quote "~a ~s") (quote "no expression in body") (strip$661$12226 e*$661$18459 (quote ()))) (void)) ((lambda (rhs*$661$18473 init*$661$18474) (build-letrec*$661$12088 (quote #f) (reverse lex*$661$18462) (reverse rhs*$661$18473) (build-sequence$661$12091 (quote #f) init*$661$18474))) (chi-rhs*$661$12750 rhs*$661$18463 r$661$18460 mr$661$18461) (chi-expr*$661$12736 (append (apply append (reverse mod**$661$18464)) e*$661$18459) r$661$18460 mr$661$18461)))))) (make-empty-rib$661$12145)))) (set! parse-module$661$12758 (lambda (e$661$18477) ((lambda (t$661$18479) ((lambda (ls/false$661$18481) (if (if ls/false$661$18481 (begin (quote #f) (apply (lambda (export*$661$18483 b*$661$18484) (quote #t)) ls/false$661$18481)) (quote #f)) (apply (lambda (export*$661$18487 b*$661$18488) (begin (if (for-all id?$661$12208 export*$661$18487) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (strip$661$12226 e$661$18477 (quote ())))) (values (quote #f) export*$661$18487 b*$661$18488))) ls/false$661$18481) ((lambda (t$661$18491) ((lambda (ls/false$661$18493) (if (if ls/false$661$18493 (begin (quote #f) (apply (lambda (name$661$18495 export*$661$18496 b*$661$18497) (quote #t)) ls/false$661$18493)) (quote #f)) (apply (lambda (name$661$18501 export*$661$18502 b*$661$18503) (begin (if (id?$661$12208 name$661$18501) (void) (error (quote expander) (quote "~a ~s") (quote "module name must be an identifier") (strip$661$12226 e$661$18477 (quote ())))) (if (for-all id?$661$12208 export*$661$18502) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (strip$661$12226 e$661$18477 (quote ())))) (values name$661$18501 export*$661$18502 b*$661$18503))) ls/false$661$18493) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18491 (quote ()))))) ((lambda (x$661$18507) (if (syntax-pair?$661$12194 x$661$18507) (begin (quote #f) ((lambda (q$661$18509) (if q$661$18509 (begin (quote #f) ((lambda (r$661$18511) (if r$661$18511 (begin (quote #f) (append q$661$18509 r$661$18511)) (quote #f))) ((lambda (x$661$18513) (if (syntax-pair?$661$12194 x$661$18513) (begin (quote #f) ((lambda (q$661$18515) (if q$661$18515 (begin (quote #f) ((lambda (r$661$18517) (if r$661$18517 (begin (quote #f) (append q$661$18515 r$661$18517)) (quote #f))) ((lambda (x$661$18519) (if (syntax-pair?$661$12194 x$661$18519) (begin (quote #f) ((lambda (q$661$18521) (if q$661$18521 (begin (quote #f) ((lambda (r$661$18523) (if r$661$18523 (begin (quote #f) (append q$661$18521 r$661$18523)) (quote #f))) ((letrec ((f$661$18525 (lambda (x$661$18527) (if (syntax-pair?$661$12194 x$661$18527) ((lambda (cars/f$661$18529) (if cars/f$661$18529 (begin (quote #f) ((lambda (cdrs/f$661$18531) (if cdrs/f$661$18531 (begin (quote #f) (map cons cars/f$661$18529 cdrs/f$661$18531)) (quote #f))) (f$661$18525 (syntax-cdr$661$12206 x$661$18527)))) (quote #f))) ((lambda (x$661$18533) (list x$661$18533)) (syntax-car$661$12202 x$661$18527))) (if (syntax-null?$661$12198 x$661$18527) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$18525) (syntax-cdr$661$12206 x$661$18519)))) (quote #f))) ((letrec ((f$661$18535 (lambda (x$661$18537) (if (syntax-pair?$661$12194 x$661$18537) ((lambda (cars/f$661$18539) (if cars/f$661$18539 (begin (quote #f) ((lambda (cdrs/f$661$18541) (if cdrs/f$661$18541 (begin (quote #f) (map cons cars/f$661$18539 cdrs/f$661$18541)) (quote #f))) (f$661$18535 (syntax-cdr$661$12206 x$661$18537)))) (quote #f))) ((lambda (x$661$18543) (list x$661$18543)) (syntax-car$661$12202 x$661$18537))) (if (syntax-null?$661$12198 x$661$18537) (list (begin (quote export*) (quote ()))) (quote #f)))))) f$661$18535) (syntax-car$661$12202 x$661$18519)))) (quote #f))) (syntax-cdr$661$12206 x$661$18513)))) (quote #f))) ((lambda (x$661$18545) (list x$661$18545)) (syntax-car$661$12202 x$661$18513)))) (quote #f))) (syntax-cdr$661$12206 x$661$18507)))) (quote #f))) ((lambda (x$661$18547) (quote ())) (syntax-car$661$12202 x$661$18507)))) (quote #f))) t$661$18491))) t$661$18479))) ((lambda (x$661$18549) (if (syntax-pair?$661$12194 x$661$18549) (begin (quote #f) ((lambda (q$661$18551) (if q$661$18551 (begin (quote #f) ((lambda (r$661$18553) (if r$661$18553 (begin (quote #f) (append q$661$18551 r$661$18553)) (quote #f))) ((lambda (x$661$18555) (if (syntax-pair?$661$12194 x$661$18555) (begin (quote #f) ((lambda (q$661$18557) (if q$661$18557 (begin (quote #f) ((lambda (r$661$18559) (if r$661$18559 (begin (quote #f) (append q$661$18557 r$661$18559)) (quote #f))) ((letrec ((f$661$18561 (lambda (x$661$18563) (if (syntax-pair?$661$12194 x$661$18563) ((lambda (cars/f$661$18565) (if cars/f$661$18565 (begin (quote #f) ((lambda (cdrs/f$661$18567) (if cdrs/f$661$18567 (begin (quote #f) (map cons cars/f$661$18565 cdrs/f$661$18567)) (quote #f))) (f$661$18561 (syntax-cdr$661$12206 x$661$18563)))) (quote #f))) ((lambda (x$661$18569) (list x$661$18569)) (syntax-car$661$12202 x$661$18563))) (if (syntax-null?$661$12198 x$661$18563) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$18561) (syntax-cdr$661$12206 x$661$18555)))) (quote #f))) ((letrec ((f$661$18571 (lambda (x$661$18573) (if (syntax-pair?$661$12194 x$661$18573) ((lambda (cars/f$661$18575) (if cars/f$661$18575 (begin (quote #f) ((lambda (cdrs/f$661$18577) (if cdrs/f$661$18577 (begin (quote #f) (map cons cars/f$661$18575 cdrs/f$661$18577)) (quote #f))) (f$661$18571 (syntax-cdr$661$12206 x$661$18573)))) (quote #f))) ((lambda (x$661$18579) (list x$661$18579)) (syntax-car$661$12202 x$661$18573))) (if (syntax-null?$661$12198 x$661$18573) (list (begin (quote export*) (quote ()))) (quote #f)))))) f$661$18571) (syntax-car$661$12202 x$661$18555)))) (quote #f))) (syntax-cdr$661$12206 x$661$18549)))) (quote #f))) ((lambda (x$661$18581) (quote ())) (syntax-car$661$12202 x$661$18549)))) (quote #f))) t$661$18479))) e$661$18477))) (set! chi-internal-module$661$12760 (lambda (e$661$18583 r$661$18584 mr$661$18585 lex*$661$18586 rhs*$661$18587 mod**$661$18588 kwd*$661$18589) (call-with-values (lambda () (parse-module$661$12758 e$661$18583)) (lambda (name$661$18597 exp-id*$661$18598 e*$661$18599) ((lambda (rib$661$18603) ((lambda (e*$661$18605) ((lambda () (call-with-values (lambda () (chi-body*$661$12762 e*$661$18605 r$661$18584 mr$661$18585 lex*$661$18586 rhs*$661$18587 mod**$661$18588 kwd*$661$18589 rib$661$18603 (quote #f))) (lambda (e*$661$18607 r$661$18608 mr$661$18609 lex*$661$18610 rhs*$661$18611 mod**$661$18612 kwd*$661$18613) ((lambda (exp-lab*$661$18621 mod**$661$18622) (if (not name$661$18597) (values lex*$661$18610 rhs*$661$18611 exp-id*$661$18598 exp-lab*$661$18621 r$661$18608 mr$661$18609 mod**$661$18622 kwd*$661$18613) ((lambda (lab$661$18625 iface$661$18626) (values lex*$661$18610 rhs*$661$18611 (list name$661$18597) (list lab$661$18625) (cons (cons lab$661$18625 (cons (quote $module) iface$661$18626)) r$661$18608) (cons (cons lab$661$18625 (cons (quote $module) iface$661$18626)) mr$661$18609) mod**$661$18622 kwd*$661$18613)) (gen-label$661$12122 (quote module)) (cons exp-id*$661$18598 exp-lab*$661$18621)))) (map (lambda (x$661$18629) ((lambda (t$661$18631) (if t$661$18631 t$661$18631 (begin (quote #f) (error (quote expander) (quote "~a ~s") (quote "cannot find module export") (strip$661$12226 x$661$18629 (quote ())))))) (id->label$661$12230 (add-subst$661$12188 rib$661$18603 x$661$18629)))) exp-id*$661$18598) (cons e*$661$18607 mod**$661$18612))))))) (map (lambda (x$661$18633) (add-subst$661$12188 rib$661$18603 x$661$18633)) (syntax->list$661$12204 e*$661$18599)))) (make-empty-rib$661$12145)))))) (set! chi-body*$661$12762 (lambda (e*$661$18635 r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18641 rib$661$18642 top?$661$18643) (if (null? e*$661$18635) (values e*$661$18635 r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18641) ((lambda (e$661$18653) (call-with-values (lambda () (syntax-type$661$12240 e$661$18653 r$661$18636)) (lambda (type$661$18655 value$661$18656 kwd$661$18657) ((lambda (kwd*$661$18661) ((lambda (t$661$18663) (if (memv t$661$18663 (quote (define))) (call-with-values (lambda () (parse-define$661$12634 e$661$18653)) (lambda (id$661$18849 rhs$661$18850) (begin (if (bound-id-member?$661$12222 id$661$18849 kwd*$661$18661) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (strip$661$12226 e$661$18653 (quote ()))) (void)) ((lambda (lex$661$18853 lab$661$18854) (begin (extend-rib!$661$12147 rib$661$18642 id$661$18849 lab$661$18854) (chi-body*$661$12762 (cdr e*$661$18635) (add-lexical$661$12640 lab$661$18854 lex$661$18853 r$661$18636) mr$661$18637 (cons lex$661$18853 lex*$661$18638) (cons rhs$661$18850 rhs*$661$18639) mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643))) (gen-lexical$661$12118 id$661$18849) (gen-label$661$12122 id$661$18849))))) (if (memv t$661$18663 (quote (define-syntax))) (call-with-values (lambda () (parse-define-syntax$661$12636 e$661$18653)) (lambda (id$661$18839 rhs$661$18840) (begin (if (bound-id-member?$661$12222 id$661$18839 kwd*$661$18661) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (strip$661$12226 e$661$18653 (quote ()))) (void)) ((lambda (lab$661$18843 expanded-rhs$661$18844) (begin (extend-rib!$661$12147 rib$661$18642 id$661$18839 lab$661$18843) ((lambda (b$661$18847) (chi-body*$661$12762 (cdr e*$661$18635) (cons (cons lab$661$18843 b$661$18847) r$661$18636) (cons (cons lab$661$18843 b$661$18847) mr$661$18637) lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643)) (make-eval-transformer$661$12272 expanded-rhs$661$18844)))) (gen-label$661$12122 id$661$18839) (expand-transformer$661$12774 rhs$661$18840 mr$661$18637))))) (if (memv t$661$18663 (quote (let-syntax letrec-syntax))) ((lambda (t$661$18763) ((lambda (ls/false$661$18765) (if (if ls/false$661$18765 (begin (quote #f) (apply (lambda (xlhs*$661$18767 xrhs*$661$18768 xbody*$661$18769) (if (valid-bound-ids?$661$12218 xlhs*$661$18767) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (strip$661$12226 e$661$18653 (quote ()))))) ls/false$661$18765)) (quote #f)) (apply (lambda (xlhs*$661$18773 xrhs*$661$18774 xbody*$661$18775) ((lambda (xlab*$661$18779) ((lambda (xrib$661$18781) ((lambda (xb*$661$18783) ((lambda () (chi-body*$661$12762 (append (map (lambda (x$661$18785) (add-subst$661$12188 xrib$661$18781 x$661$18785)) xbody*$661$18775) (cdr e*$661$18635)) (append (map cons xlab*$661$18779 xb*$661$18783) r$661$18636) (append (map cons xlab*$661$18779 xb*$661$18783) mr$661$18637) lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643)))) (map (lambda (x$661$18787) (make-eval-transformer$661$12272 (expand-transformer$661$12774 (if (eq? type$661$18655 (quote let-syntax)) x$661$18787 (add-subst$661$12188 xrib$661$18781 x$661$18787)) mr$661$18637))) xrhs*$661$18774))) (make-full-rib$661$12155 xlhs*$661$18773 xlab*$661$18779))) (map gen-label$661$12122 xlhs*$661$18773))) ls/false$661$18765) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18763 (quote ()))))) ((lambda (x$661$18789) (if (syntax-pair?$661$12194 x$661$18789) (begin (quote #f) ((lambda (q$661$18791) (if q$661$18791 (begin (quote #f) ((lambda (r$661$18793) (if r$661$18793 (begin (quote #f) (append q$661$18791 r$661$18793)) (quote #f))) ((lambda (x$661$18795) (if (syntax-pair?$661$12194 x$661$18795) (begin (quote #f) ((lambda (q$661$18797) (if q$661$18797 (begin (quote #f) ((lambda (r$661$18799) (if r$661$18799 (begin (quote #f) (append q$661$18797 r$661$18799)) (quote #f))) ((letrec ((f$661$18801 (lambda (x$661$18803) (if (syntax-pair?$661$12194 x$661$18803) ((lambda (cars/f$661$18805) (if cars/f$661$18805 (begin (quote #f) ((lambda (cdrs/f$661$18807) (if cdrs/f$661$18807 (begin (quote #f) (map cons cars/f$661$18805 cdrs/f$661$18807)) (quote #f))) (f$661$18801 (syntax-cdr$661$12206 x$661$18803)))) (quote #f))) ((lambda (x$661$18809) (list x$661$18809)) (syntax-car$661$12202 x$661$18803))) (if (syntax-null?$661$12198 x$661$18803) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) f$661$18801) (syntax-cdr$661$12206 x$661$18795)))) (quote #f))) ((letrec ((f$661$18811 (lambda (x$661$18813) (if (syntax-pair?$661$12194 x$661$18813) ((lambda (cars/f$661$18815) (if cars/f$661$18815 (begin (quote #f) ((lambda (cdrs/f$661$18817) (if cdrs/f$661$18817 (begin (quote #f) (map cons cars/f$661$18815 cdrs/f$661$18817)) (quote #f))) (f$661$18811 (syntax-cdr$661$12206 x$661$18813)))) (quote #f))) ((lambda (x$661$18819) (if (syntax-pair?$661$12194 x$661$18819) (begin (quote #f) ((lambda (q$661$18821) (if q$661$18821 (begin (quote #f) ((lambda (r$661$18823) (if r$661$18823 (begin (quote #f) (append q$661$18821 r$661$18823)) (quote #f))) ((lambda (x$661$18825) (if (syntax-pair?$661$12194 x$661$18825) (begin (quote #f) ((lambda (q$661$18827) (if q$661$18827 (begin (quote #f) ((lambda (r$661$18829) (if r$661$18829 (begin (quote #f) (append q$661$18827 r$661$18829)) (quote #f))) ((lambda (x$661$18831) (if (equal? (stx->datum$661$12228 x$661$18831) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$18825)))) (quote #f))) ((lambda (x$661$18833) (list x$661$18833)) (syntax-car$661$12202 x$661$18825)))) (quote #f))) (syntax-cdr$661$12206 x$661$18819)))) (quote #f))) ((lambda (x$661$18835) (list x$661$18835)) (syntax-car$661$12202 x$661$18819)))) (quote #f))) (syntax-car$661$12202 x$661$18813))) (if (syntax-null?$661$12198 x$661$18813) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) f$661$18811) (syntax-car$661$12202 x$661$18795)))) (quote #f))) (syntax-cdr$661$12206 x$661$18789)))) (quote #f))) ((lambda (x$661$18837) (quote ())) (syntax-car$661$12202 x$661$18789)))) (quote #f))) t$661$18763))) e$661$18653) (if (memv t$661$18663 (quote (begin))) ((lambda (t$661$18737) ((lambda (ls/false$661$18739) (if (if ls/false$661$18739 (begin (quote #f) (apply (lambda (x*$661$18741) (quote #t)) ls/false$661$18739)) (quote #f)) (apply (lambda (x*$661$18743) (chi-body*$661$12762 (append x*$661$18743 (cdr e*$661$18635)) r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643)) ls/false$661$18739) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18737 (quote ()))))) ((lambda (x$661$18745) (if (syntax-pair?$661$12194 x$661$18745) (begin (quote #f) ((lambda (q$661$18747) (if q$661$18747 (begin (quote #f) ((lambda (r$661$18749) (if r$661$18749 (begin (quote #f) (append q$661$18747 r$661$18749)) (quote #f))) ((letrec ((f$661$18751 (lambda (x$661$18753) (if (syntax-pair?$661$12194 x$661$18753) ((lambda (cars/f$661$18755) (if cars/f$661$18755 (begin (quote #f) ((lambda (cdrs/f$661$18757) (if cdrs/f$661$18757 (begin (quote #f) (map cons cars/f$661$18755 cdrs/f$661$18757)) (quote #f))) (f$661$18751 (syntax-cdr$661$12206 x$661$18753)))) (quote #f))) ((lambda (x$661$18759) (list x$661$18759)) (syntax-car$661$12202 x$661$18753))) (if (syntax-null?$661$12198 x$661$18753) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$18751) (syntax-cdr$661$12206 x$661$18745)))) (quote #f))) ((lambda (x$661$18761) (quote ())) (syntax-car$661$12202 x$661$18745)))) (quote #f))) t$661$18737))) e$661$18653) (if (memv t$661$18663 (quote (global-macro global-macro!))) (chi-body*$661$12762 (cons (add-subst$661$12188 rib$661$18642 (chi-global-macro$661$12734 value$661$18656 e$661$18653)) (cdr e*$661$18635)) r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643) (if (memv t$661$18663 (quote (local-macro local-macro!))) (chi-body*$661$12762 (cons (add-subst$661$12188 rib$661$18642 (chi-local-macro$661$12732 value$661$18656 e$661$18653)) (cdr e*$661$18635)) r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643) (if (memv t$661$18663 (quote (macro macro!))) (chi-body*$661$12762 (cons (add-subst$661$12188 rib$661$18642 (chi-macro$661$12730 value$661$18656 e$661$18653)) (cdr e*$661$18635)) r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643) (if (memv t$661$18663 (quote (module))) (call-with-values (lambda () (chi-internal-module$661$12760 e$661$18653 r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661)) (lambda (lex*$661$18717 rhs*$661$18718 m-exp-id*$661$18719 m-exp-lab*$661$18720 r$661$18721 mr$661$18722 mod**$661$18723 kwd*$661$18724) (begin (for-each (lambda (id$661$18733 lab$661$18734) (extend-rib!$661$12147 rib$661$18642 id$661$18733 lab$661$18734)) m-exp-id*$661$18719 m-exp-lab*$661$18720) (chi-body*$661$12762 (cdr e*$661$18635) r$661$18721 mr$661$18722 lex*$661$18717 rhs*$661$18718 mod**$661$18723 kwd*$661$18724 rib$661$18642 top?$661$18643)))) (if (memv t$661$18663 (quote (import))) (begin ((lambda () ((lambda (module-import$661$18664) (begin (set! module-import$661$18664 (lambda (e$661$18666 r$661$18667) ((lambda (t$661$18670) ((lambda (ls/false$661$18672) (if (if ls/false$661$18672 (begin (quote #f) (apply (lambda (id$661$18674) (id?$661$12208 id$661$18674)) ls/false$661$18672)) (quote #f)) (apply (lambda (id$661$18676) (call-with-values (lambda () (syntax-type$661$12240 id$661$18676 r$661$18667)) (lambda (type$661$18678 value$661$18679 kwd$661$18680) ((lambda (t$661$18684) (if (memv t$661$18684 (quote ($module))) ((lambda (iface$661$18685) ((lambda (id*$661$18687 lab*$661$18688) (values id*$661$18687 lab*$661$18688)) (car iface$661$18685) (cdr iface$661$18685))) value$661$18679) (error (quote expander) (quote "~a ~s") (quote "invalid import") (strip$661$12226 e$661$18666 (quote ()))))) type$661$18678)))) ls/false$661$18672) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18670 (quote ()))))) ((lambda (x$661$18691) (if (syntax-pair?$661$12194 x$661$18691) (begin (quote #f) ((lambda (q$661$18693) (if q$661$18693 (begin (quote #f) ((lambda (r$661$18695) (if r$661$18695 (begin (quote #f) (append q$661$18693 r$661$18695)) (quote #f))) ((lambda (x$661$18697) (if (syntax-pair?$661$12194 x$661$18697) (begin (quote #f) ((lambda (q$661$18699) (if q$661$18699 (begin (quote #f) ((lambda (r$661$18701) (if r$661$18701 (begin (quote #f) (append q$661$18699 r$661$18701)) (quote #f))) ((lambda (x$661$18703) (if (equal? (stx->datum$661$12228 x$661$18703) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$18697)))) (quote #f))) ((lambda (x$661$18705) (list x$661$18705)) (syntax-car$661$12202 x$661$18697)))) (quote #f))) (syntax-cdr$661$12206 x$661$18691)))) (quote #f))) ((lambda (x$661$18707) (quote ())) (syntax-car$661$12202 x$661$18691)))) (quote #f))) t$661$18670))) e$661$18666))) (call-with-values (lambda () (module-import$661$18664 e$661$18653 r$661$18636)) (lambda (id*$661$18709 lab*$661$18710) (for-each (lambda (id$661$18713 lab$661$18714) (extend-rib!$661$12147 rib$661$18642 id$661$18713 lab$661$18714)) id*$661$18709 lab*$661$18710))))) (quote #f)))) (chi-body*$661$12762 (cdr e*$661$18635) r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643)) (if top?$661$18643 (chi-body*$661$12762 (cdr e*$661$18635) r$661$18636 mr$661$18637 (cons (gen-lexical$661$12118 (quote dummy)) lex*$661$18638) (cons (cons (quote top-expr) e$661$18653) rhs*$661$18639) mod**$661$18640 kwd*$661$18661 rib$661$18642 top?$661$18643) (values e*$661$18635 r$661$18636 mr$661$18637 lex*$661$18638 rhs*$661$18639 mod**$661$18640 kwd*$661$18661)))))))))))) type$661$18655)) (if (id?$661$12208 kwd$661$18657) (cons kwd$661$18657 kwd*$661$18641) kwd*$661$18641))))) (car e*$661$18635))))) (set! set-global-macro-binding!$661$12764 (lambda (sym$661$18857 loc$661$18858 b$661$18859) (begin (extend-library-subst!$661$11749 (interaction-library$661$12855) sym$661$18857 loc$661$18858) (extend-library-env!$661$11748 (interaction-library$661$12855) loc$661$18858 b$661$18859)))) (set! gen-global-macro-binding$661$12766 (lambda (id$661$18863 ctxt$661$18864) (gen-global-var-binding$661$12768 id$661$18863 ctxt$661$18864))) (set! gen-global-var-binding$661$12768 (lambda (id$661$18867 ctxt$661$18868) ((lambda (label$661$18871) ((lambda (b$661$18873) ((lambda (t$661$18875) (if (memv t$661$18875 (quote (global))) ((lambda (x$661$18876) ((lambda (lib$661$18878 loc$661$18879) (if (eq? lib$661$18878 (interaction-library$661$12855)) loc$661$18879 (error (quote expander) (quote "~a ~s") (quote "cannot modify imported binding") (strip$661$12226 ctxt$661$18868 (quote ()))))) (car x$661$18876) (cdr x$661$18876))) (binding-value$661$12238 b$661$18873)) (error (quote expander) (quote "~a ~s") (quote "cannot modify binding in") (strip$661$12226 ctxt$661$18868 (quote ()))))) (binding-type$661$12236 b$661$18873))) (imported-label->binding$661$11747 label$661$18871))) (id->label$661$12230 id$661$18867)))) (set! chi-top-set!$661$12770 (lambda (e$661$18882) ((lambda (t$661$18884) ((lambda (ls/false$661$18886) (if (if ls/false$661$18886 (begin (quote #f) (apply (lambda (id$661$18888 rhs$661$18889) (id?$661$12208 id$661$18888)) ls/false$661$18886)) (quote #f)) (apply (lambda (id$661$18892 rhs$661$18893) ((lambda (loc$661$18896) ((lambda (rhs$661$18898) (values loc$661$18896 rhs$661$18898)) (chi-expr$661$12740 rhs$661$18893 (quote ()) (quote ())))) (gen-global-var-binding$661$12768 id$661$18892 e$661$18882))) ls/false$661$18886) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18884 (quote ()))))) ((lambda (x$661$18900) (if (syntax-pair?$661$12194 x$661$18900) (begin (quote #f) ((lambda (q$661$18902) (if q$661$18902 (begin (quote #f) ((lambda (r$661$18904) (if r$661$18904 (begin (quote #f) (append q$661$18902 r$661$18904)) (quote #f))) ((lambda (x$661$18906) (if (syntax-pair?$661$12194 x$661$18906) (begin (quote #f) ((lambda (q$661$18908) (if q$661$18908 (begin (quote #f) ((lambda (r$661$18910) (if r$661$18910 (begin (quote #f) (append q$661$18908 r$661$18910)) (quote #f))) ((lambda (x$661$18912) (if (syntax-pair?$661$12194 x$661$18912) (begin (quote #f) ((lambda (q$661$18914) (if q$661$18914 (begin (quote #f) ((lambda (r$661$18916) (if r$661$18916 (begin (quote #f) (append q$661$18914 r$661$18916)) (quote #f))) ((lambda (x$661$18918) (if (equal? (stx->datum$661$12228 x$661$18918) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$18912)))) (quote #f))) ((lambda (x$661$18920) (list x$661$18920)) (syntax-car$661$12202 x$661$18912)))) (quote #f))) (syntax-cdr$661$12206 x$661$18906)))) (quote #f))) ((lambda (x$661$18922) (list x$661$18922)) (syntax-car$661$12202 x$661$18906)))) (quote #f))) (syntax-cdr$661$12206 x$661$18900)))) (quote #f))) ((lambda (x$661$18924) (quote ())) (syntax-car$661$12202 x$661$18900)))) (quote #f))) t$661$18884))) e$661$18882))) (set! chi-top*$661$12772 (lambda (e*$661$18926 init*$661$18927) (if (null? e*$661$18926) init*$661$18927 ((lambda (e$661$18930) (call-with-values (lambda () (syntax-type$661$12240 e$661$18930 (quote ()))) (lambda (type$661$18932 value$661$18933 kwd$661$18934) ((lambda (t$661$18938) (if (memv t$661$18938 (quote (define))) (call-with-values (lambda () (parse-define$661$12634 e$661$18930)) (lambda (id$661$18979 rhs$661$18980) ((lambda (loc$661$18983) ((lambda (rhs$661$18985) (chi-top*$661$12772 (cdr e*$661$18926) (cons (cons loc$661$18983 rhs$661$18985) init*$661$18927))) (chi-rhs$661$12748 rhs$661$18980 (quote ()) (quote ())))) (gen-global-var-binding$661$12768 id$661$18979 e$661$18930)))) (if (memv t$661$18938 (quote (set!))) (call-with-values (lambda () (chi-top-set!$661$12770 e$661$18930)) (lambda (loc$661$18975 rhs$661$18976) (chi-top*$661$12772 (cdr e*$661$18926) (cons (cons loc$661$18975 rhs$661$18976) init*$661$18927)))) (if (memv t$661$18938 (quote (define-syntax))) (call-with-values (lambda () (parse-define-syntax$661$12636 e$661$18930)) (lambda (id$661$18965 rhs$661$18966) ((lambda (loc$661$18969) ((lambda (expanded-rhs$661$18971) ((lambda (b$661$18973) (begin (set-global-macro-binding!$661$12764 (id->sym$661$12210 id$661$18965) loc$661$18969 b$661$18973) (chi-top*$661$12772 (cdr e*$661$18926) init*$661$18927))) (make-eval-transformer$661$12272 expanded-rhs$661$18971))) (expand-transformer$661$12774 rhs$661$18966 (quote ())))) (gen-global-macro-binding$661$12766 id$661$18965 e$661$18930)))) (if (memv t$661$18938 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "~s is not supported yet at top level") type$661$18932) (if (memv t$661$18938 (quote (begin))) ((lambda (t$661$18939) ((lambda (ls/false$661$18941) (if (if ls/false$661$18941 (begin (quote #f) (apply (lambda (x*$661$18943) (quote #t)) ls/false$661$18941)) (quote #f)) (apply (lambda (x*$661$18945) (chi-top*$661$12772 (append x*$661$18945 (cdr e*$661$18926)) init*$661$18927)) ls/false$661$18941) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$18939 (quote ()))))) ((lambda (x$661$18947) (if (syntax-pair?$661$12194 x$661$18947) (begin (quote #f) ((lambda (q$661$18949) (if q$661$18949 (begin (quote #f) ((lambda (r$661$18951) (if r$661$18951 (begin (quote #f) (append q$661$18949 r$661$18951)) (quote #f))) ((letrec ((f$661$18953 (lambda (x$661$18955) (if (syntax-pair?$661$12194 x$661$18955) ((lambda (cars/f$661$18957) (if cars/f$661$18957 (begin (quote #f) ((lambda (cdrs/f$661$18959) (if cdrs/f$661$18959 (begin (quote #f) (map cons cars/f$661$18957 cdrs/f$661$18959)) (quote #f))) (f$661$18953 (syntax-cdr$661$12206 x$661$18955)))) (quote #f))) ((lambda (x$661$18961) (list x$661$18961)) (syntax-car$661$12202 x$661$18955))) (if (syntax-null?$661$12198 x$661$18955) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$18953) (syntax-cdr$661$12206 x$661$18947)))) (quote #f))) ((lambda (x$661$18963) (quote ())) (syntax-car$661$12202 x$661$18947)))) (quote #f))) t$661$18939))) e$661$18930) (if (memv t$661$18938 (quote (global-macro global-macro!))) (chi-top*$661$12772 (cons (chi-global-macro$661$12734 value$661$18933 e$661$18930) (cdr e*$661$18926)) init*$661$18927) (if (memv t$661$18938 (quote (local-macro local-macro!))) (chi-top*$661$12772 (cons (chi-local-macro$661$12732 value$661$18933 e$661$18930) (cdr e*$661$18926)) init*$661$18927) (if (memv t$661$18938 (quote (macro macro!))) (chi-top*$661$12772 (cons (chi-macro$661$12730 value$661$18933 e$661$18930) (cdr e*$661$18926)) init*$661$18927) (chi-top*$661$12772 (cdr e*$661$18926) (cons (cons (quote #f) (chi-expr$661$12740 e$661$18930 (quote ()) (quote ()))) init*$661$18927))))))))))) type$661$18932)))) (car e*$661$18926))))) (set! expand-transformer$661$12774 (lambda (expr$661$18987 r$661$18988) ((lambda (rtc$661$18991) ((lambda (expanded-rhs$661$18993) (begin (for-each ((lambda (mark-visit$661$18995) (lambda (x$661$18997) (begin (invoke-library$661$11746 x$661$18997) (mark-visit$661$18995 x$661$18997)))) (vis-collector$661$12790)) (rtc$661$18991)) expanded-rhs$661$18993)) ((lambda (t$661$19003 t$661$19004 t$661$19005 t$661$19006) ((lambda (swap$661$19011) (dynamic-wind swap$661$19011 (lambda () (chi-expr$661$12740 expr$661$18987 r$661$18988 r$661$18988)) swap$661$19011)) (lambda () (begin ((lambda (t$661$19013) (begin (t$661$19003 t$661$19005) (set! t$661$19005 t$661$19013))) (t$661$19003)) ((lambda (t$661$19015) (begin (t$661$19004 t$661$19006) (set! t$661$19006 t$661$19015))) (t$661$19004)))))) inv-collector$661$12788 vis-collector$661$12790 rtc$661$18991 (lambda (x$661$19017) (values))))) (make-collector$661$12786)))) (set! parse-exports$661$12776 (lambda (exp*$661$19019) (letrec ((f$661$19021 (lambda (exp*$661$19023 int*$661$19024 ext*$661$19025) (if (null? exp*$661$19023) (begin ((lambda (id*$661$19029) (if (valid-bound-ids?$661$12218 id*$661$19029) (void) (error (quote expander) (quote "invalid exports of ~s") (find-dups$661$12754 id*$661$19029)))) (map (lambda (x$661$19031) (mkstx$661$12184 x$661$19031 top-mark*$661$12114 (quote ()))) ext*$661$19025)) (values int*$661$19024 ext*$661$19025)) ((lambda (t$661$19033) ((lambda (ls/false$661$19035) (if (if ls/false$661$19035 (begin (quote #f) (apply (lambda (rename$661$19037 i*$661$19038 e*$661$19039) (quote #t)) ls/false$661$19035)) (quote #f)) (apply (lambda (rename$661$19043 i*$661$19044 e*$661$19045) (begin (if (if (eq? rename$661$19043 (quote rename)) (if (for-all symbol? i*$661$19044) (begin (quote #f) (for-all symbol? e*$661$19045)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier ~s") (car exp*$661$19023))) (f$661$19021 (cdr exp*$661$19023) (append i*$661$19044 int*$661$19024) (append e*$661$19045 ext*$661$19025)))) ls/false$661$19035) ((lambda (t$661$19049) ((lambda (ls/false$661$19051) (if (if ls/false$661$19051 (begin (quote #f) (apply (lambda (ie$661$19053) (quote #t)) ls/false$661$19051)) (quote #f)) (apply (lambda (ie$661$19055) (begin (if (symbol? ie$661$19055) (void) (error (quote expander) (quote "invalid export ~s") ie$661$19055)) (f$661$19021 (cdr exp*$661$19023) (cons ie$661$19055 int*$661$19024) (cons ie$661$19055 ext*$661$19025)))) ls/false$661$19051) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$19049 (quote ()))))) ((lambda (x$661$19057) (list x$661$19057)) t$661$19049))) t$661$19033))) ((lambda (x$661$19059) (if (syntax-pair?$661$12194 x$661$19059) (begin (quote #f) ((lambda (q$661$19061) (if q$661$19061 (begin (quote #f) ((lambda (r$661$19063) (if r$661$19063 (begin (quote #f) (append q$661$19061 r$661$19063)) (quote #f))) ((letrec ((f$661$19065 (lambda (x$661$19067) (if (syntax-pair?$661$12194 x$661$19067) ((lambda (cars/f$661$19069) (if cars/f$661$19069 (begin (quote #f) ((lambda (cdrs/f$661$19071) (if cdrs/f$661$19071 (begin (quote #f) (map cons cars/f$661$19069 cdrs/f$661$19071)) (quote #f))) (f$661$19065 (syntax-cdr$661$12206 x$661$19067)))) (quote #f))) ((lambda (x$661$19073) (if (syntax-pair?$661$12194 x$661$19073) (begin (quote #f) ((lambda (q$661$19075) (if q$661$19075 (begin (quote #f) ((lambda (r$661$19077) (if r$661$19077 (begin (quote #f) (append q$661$19075 r$661$19077)) (quote #f))) ((lambda (x$661$19079) (if (syntax-pair?$661$12194 x$661$19079) (begin (quote #f) ((lambda (q$661$19081) (if q$661$19081 (begin (quote #f) ((lambda (r$661$19083) (if r$661$19083 (begin (quote #f) (append q$661$19081 r$661$19083)) (quote #f))) ((lambda (x$661$19085) (if (equal? (stx->datum$661$12228 x$661$19085) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$19079)))) (quote #f))) ((lambda (x$661$19087) (list x$661$19087)) (syntax-car$661$12202 x$661$19079)))) (quote #f))) (syntax-cdr$661$12206 x$661$19073)))) (quote #f))) ((lambda (x$661$19089) (list x$661$19089)) (syntax-car$661$12202 x$661$19073)))) (quote #f))) (syntax-car$661$12202 x$661$19067))) (if (syntax-null?$661$12198 x$661$19067) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) f$661$19065) (syntax-cdr$661$12206 x$661$19059)))) (quote #f))) ((lambda (x$661$19091) (list x$661$19091)) (syntax-car$661$12202 x$661$19059)))) (quote #f))) t$661$19033))) (car exp*$661$19023)))))) (f$661$19021 exp*$661$19019 (quote ()) (quote ()))))) (set! parse-library-name$661$12778 (lambda (x$661$19093) ((lambda (parse$661$19095) (begin (set! parse$661$19095 (lambda (x$661$19097) ((lambda (t$661$19099) ((lambda (ls/false$661$19101) (if (if ls/false$661$19101 (begin (quote #f) (apply (lambda (x*$661$19103 v*$661$19104) (if (for-all symbol? x*$661$19103) (begin (quote #f) (for-all (lambda (x$661$19107) (if (integer? x$661$19107) (begin (quote #f) (exact? x$661$19107)) (quote #f))) v*$661$19104)) (quote #f))) ls/false$661$19101)) (quote #f)) (apply (lambda (x*$661$19109 v*$661$19110) (values x*$661$19109 v*$661$19110)) ls/false$661$19101) ((lambda (t$661$19113) ((lambda (ls/false$661$19115) (if (if ls/false$661$19115 (begin (quote #f) (apply (lambda (x*$661$19117) (for-all symbol? x*$661$19117)) ls/false$661$19115)) (quote #f)) (apply (lambda (x*$661$19119) (values x*$661$19119 (quote ()))) ls/false$661$19115) ((lambda (t$661$19121) ((lambda (ls/false$661$19123) (if (if ls/false$661$19123 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$19123)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid library name") (strip$661$12226 x$661$19097 (quote ())))) ls/false$661$19123) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$19121 (quote ()))))) ((lambda (x$661$19125) (quote ())) t$661$19121))) t$661$19113))) ((letrec ((f$661$19127 (lambda (x$661$19129) (if (syntax-pair?$661$12194 x$661$19129) ((lambda (cars/f$661$19131) (if cars/f$661$19131 (begin (quote #f) ((lambda (cdrs/f$661$19133) (if cdrs/f$661$19133 (begin (quote #f) (map cons cars/f$661$19131 cdrs/f$661$19133)) (quote #f))) (f$661$19127 (syntax-cdr$661$12206 x$661$19129)))) (quote #f))) ((lambda (x$661$19135) (list x$661$19135)) (syntax-car$661$12202 x$661$19129))) (if (syntax-null?$661$12198 x$661$19129) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$19127) t$661$19113))) t$661$19099))) ((letrec ((f$661$19137 (lambda (x$661$19143) (if (syntax-pair?$661$12194 x$661$19143) ((lambda (cars/f$661$19145) (if cars/f$661$19145 (begin (quote #f) ((lambda (d/f$661$19147) (if d/f$661$19147 (begin (quote #f) (cons (map cons cars/f$661$19145 (car d/f$661$19147)) (cdr d/f$661$19147))) (quote #f))) (f$661$19137 (syntax-cdr$661$12206 x$661$19143)))) (quote #f))) ((lambda (x$661$19149) (list x$661$19149)) (syntax-car$661$12202 x$661$19143))) ((lambda (d$661$19151) (if d$661$19151 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) d$661$19151)) (quote #f))) ((lambda (x$661$19153) (if (syntax-pair?$661$12194 x$661$19153) (begin (quote #f) ((lambda (q$661$19155) (if q$661$19155 (begin (quote #f) ((lambda (r$661$19157) (if r$661$19157 (begin (quote #f) (append q$661$19155 r$661$19157)) (quote #f))) ((lambda (x$661$19159) (if (equal? (stx->datum$661$12228 x$661$19159) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$19153)))) (quote #f))) ((letrec ((f$661$19161 (lambda (x$661$19163) (if (syntax-pair?$661$12194 x$661$19163) ((lambda (cars/f$661$19165) (if cars/f$661$19165 (begin (quote #f) ((lambda (cdrs/f$661$19167) (if cdrs/f$661$19167 (begin (quote #f) (map cons cars/f$661$19165 cdrs/f$661$19167)) (quote #f))) (f$661$19161 (syntax-cdr$661$12206 x$661$19163)))) (quote #f))) ((lambda (x$661$19169) (list x$661$19169)) (syntax-car$661$12202 x$661$19163))) (if (syntax-null?$661$12198 x$661$19163) (list (begin (quote v*) (quote ()))) (quote #f)))))) f$661$19161) (syntax-car$661$12202 x$661$19153)))) (quote #f))) x$661$19143)))))) (lambda (x$661$19139) ((lambda (x$661$19141) (if x$661$19141 (begin (quote #f) (append (car x$661$19141) (cdr x$661$19141))) (quote #f))) (f$661$19137 x$661$19139)))) t$661$19099))) x$661$19097))) (call-with-values (lambda () (parse$661$19095 x$661$19093)) (lambda (name*$661$19171 ver*$661$19172) (begin (if (null? name*$661$19171) (error (quote expander) (quote "~a ~s") (quote "empty library name") (strip$661$12226 x$661$19093 (quote ()))) (void)) (values name*$661$19171 ver*$661$19172)))))) (quote #f)))) (set! parse-library$661$12780 (lambda (e$661$19175) ((lambda (t$661$19177) ((lambda (ls/false$661$19179) (if (if ls/false$661$19179 (begin (quote #f) (apply (lambda (library$661$19181 name*$661$19182 export$661$19183 exp*$661$19184 import$661$19185 imp*$661$19186 b*$661$19187) (if (eq? export$661$19183 (quote export)) (if (eq? import$661$19185 (quote import)) (begin (quote #f) (eq? library$661$19181 (quote library))) (quote #f)) (quote #f))) ls/false$661$19179)) (quote #f)) (apply (lambda (library$661$19195 name*$661$19196 export$661$19197 exp*$661$19198 import$661$19199 imp*$661$19200 b*$661$19201) (values name*$661$19196 exp*$661$19198 imp*$661$19200 b*$661$19201)) ls/false$661$19179) ((lambda (t$661$19209) ((lambda (ls/false$661$19211) (if (if ls/false$661$19211 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$19211)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "malformed library") (strip$661$12226 e$661$19175 (quote ())))) ls/false$661$19211) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$19209 (quote ()))))) ((lambda (x$661$19213) (quote ())) t$661$19209))) t$661$19177))) ((lambda (x$661$19215) (if (syntax-pair?$661$12194 x$661$19215) (begin (quote #f) ((lambda (q$661$19217) (if q$661$19217 (begin (quote #f) ((lambda (r$661$19219) (if r$661$19219 (begin (quote #f) (append q$661$19217 r$661$19219)) (quote #f))) ((lambda (x$661$19221) (if (syntax-pair?$661$12194 x$661$19221) (begin (quote #f) ((lambda (q$661$19223) (if q$661$19223 (begin (quote #f) ((lambda (r$661$19225) (if r$661$19225 (begin (quote #f) (append q$661$19223 r$661$19225)) (quote #f))) ((lambda (x$661$19227) (if (syntax-pair?$661$12194 x$661$19227) (begin (quote #f) ((lambda (q$661$19229) (if q$661$19229 (begin (quote #f) ((lambda (r$661$19231) (if r$661$19231 (begin (quote #f) (append q$661$19229 r$661$19231)) (quote #f))) ((lambda (x$661$19233) (if (syntax-pair?$661$12194 x$661$19233) (begin (quote #f) ((lambda (q$661$19235) (if q$661$19235 (begin (quote #f) ((lambda (r$661$19237) (if r$661$19237 (begin (quote #f) (append q$661$19235 r$661$19237)) (quote #f))) ((letrec ((f$661$19239 (lambda (x$661$19241) (if (syntax-pair?$661$12194 x$661$19241) ((lambda (cars/f$661$19243) (if cars/f$661$19243 (begin (quote #f) ((lambda (cdrs/f$661$19245) (if cdrs/f$661$19245 (begin (quote #f) (map cons cars/f$661$19243 cdrs/f$661$19245)) (quote #f))) (f$661$19239 (syntax-cdr$661$12206 x$661$19241)))) (quote #f))) ((lambda (x$661$19247) (list x$661$19247)) (syntax-car$661$12202 x$661$19241))) (if (syntax-null?$661$12198 x$661$19241) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$19239) (syntax-cdr$661$12206 x$661$19233)))) (quote #f))) ((lambda (x$661$19249) (if (syntax-pair?$661$12194 x$661$19249) (begin (quote #f) ((lambda (q$661$19251) (if q$661$19251 (begin (quote #f) ((lambda (r$661$19253) (if r$661$19253 (begin (quote #f) (append q$661$19251 r$661$19253)) (quote #f))) ((letrec ((f$661$19255 (lambda (x$661$19257) (if (syntax-pair?$661$12194 x$661$19257) ((lambda (cars/f$661$19259) (if cars/f$661$19259 (begin (quote #f) ((lambda (cdrs/f$661$19261) (if cdrs/f$661$19261 (begin (quote #f) (map cons cars/f$661$19259 cdrs/f$661$19261)) (quote #f))) (f$661$19255 (syntax-cdr$661$12206 x$661$19257)))) (quote #f))) ((lambda (x$661$19263) (list x$661$19263)) (syntax-car$661$12202 x$661$19257))) (if (syntax-null?$661$12198 x$661$19257) (list (begin (quote imp*) (quote ()))) (quote #f)))))) f$661$19255) (syntax-cdr$661$12206 x$661$19249)))) (quote #f))) ((lambda (x$661$19265) (list x$661$19265)) (syntax-car$661$12202 x$661$19249)))) (quote #f))) (syntax-car$661$12202 x$661$19233)))) (quote #f))) (syntax-cdr$661$12206 x$661$19227)))) (quote #f))) ((lambda (x$661$19267) (if (syntax-pair?$661$12194 x$661$19267) (begin (quote #f) ((lambda (q$661$19269) (if q$661$19269 (begin (quote #f) ((lambda (r$661$19271) (if r$661$19271 (begin (quote #f) (append q$661$19269 r$661$19271)) (quote #f))) ((letrec ((f$661$19273 (lambda (x$661$19275) (if (syntax-pair?$661$12194 x$661$19275) ((lambda (cars/f$661$19277) (if cars/f$661$19277 (begin (quote #f) ((lambda (cdrs/f$661$19279) (if cdrs/f$661$19279 (begin (quote #f) (map cons cars/f$661$19277 cdrs/f$661$19279)) (quote #f))) (f$661$19273 (syntax-cdr$661$12206 x$661$19275)))) (quote #f))) ((lambda (x$661$19281) (list x$661$19281)) (syntax-car$661$12202 x$661$19275))) (if (syntax-null?$661$12198 x$661$19275) (list (begin (quote exp*) (quote ()))) (quote #f)))))) f$661$19273) (syntax-cdr$661$12206 x$661$19267)))) (quote #f))) ((lambda (x$661$19283) (list x$661$19283)) (syntax-car$661$12202 x$661$19267)))) (quote #f))) (syntax-car$661$12202 x$661$19227)))) (quote #f))) (syntax-cdr$661$12206 x$661$19221)))) (quote #f))) ((letrec ((f$661$19285 (lambda (x$661$19287) (if (syntax-pair?$661$12194 x$661$19287) ((lambda (cars/f$661$19289) (if cars/f$661$19289 (begin (quote #f) ((lambda (cdrs/f$661$19291) (if cdrs/f$661$19291 (begin (quote #f) (map cons cars/f$661$19289 cdrs/f$661$19291)) (quote #f))) (f$661$19285 (syntax-cdr$661$12206 x$661$19287)))) (quote #f))) ((lambda (x$661$19293) (list x$661$19293)) (syntax-car$661$12202 x$661$19287))) (if (syntax-null?$661$12198 x$661$19287) (list (begin (quote name*) (quote ()))) (quote #f)))))) f$661$19285) (syntax-car$661$12202 x$661$19221)))) (quote #f))) (syntax-cdr$661$12206 x$661$19215)))) (quote #f))) ((lambda (x$661$19295) (list x$661$19295)) (syntax-car$661$12202 x$661$19215)))) (quote #f))) t$661$19177))) e$661$19175))) (set! parse-import-spec*$661$12782 (lambda (imp*$661$19297) ((lambda (imp-collector$661$19299 merge-substs$661$19301 exclude*$661$19303 find*$661$19305 rem*$661$19307 remove-dups$661$19309 get-import$661$19311) (begin (set! imp-collector$661$19299 (make-collector$661$12786)) (set! merge-substs$661$19301 (lambda (s$661$19635 subst$661$19636) ((lambda (insert-to-subst$661$19639) (begin (set! insert-to-subst$661$19639 (lambda (a$661$19641 subst$661$19642) ((lambda (name$661$19645 label$661$19646) ((lambda (t$661$19649) (if t$661$19649 ((lambda (x$661$19651) (if (eq? (cdr x$661$19651) label$661$19646) subst$661$19642 (error (quote import) (quote "two imports of ~s with different bindings") name$661$19645))) t$661$19649) (cons a$661$19641 subst$661$19642))) (assq name$661$19645 subst$661$19642))) (car a$661$19641) (cdr a$661$19641)))) (if (null? s$661$19635) subst$661$19636 (insert-to-subst$661$19639 (car s$661$19635) (merge-substs$661$19301 (cdr s$661$19635) subst$661$19636))))) (quote #f)))) (set! exclude*$661$19303 (lambda (sym*$661$19611 subst$661$19612) ((lambda (exclude$661$19615) (begin (set! exclude$661$19615 (lambda (sym$661$19617 subst$661$19618) (if (null? subst$661$19618) (error (quote import) (quote "cannot rename unbound identifier ~s") sym$661$19617) (if (eq? sym$661$19617 (caar subst$661$19618)) (values (cdar subst$661$19618) (cdr subst$661$19618)) ((lambda (a$661$19621) (call-with-values (lambda () (exclude$661$19615 sym$661$19617 (cdr subst$661$19618))) (lambda (old$661$19623 subst$661$19624) (values old$661$19623 (cons a$661$19621 subst$661$19624))))) (car subst$661$19618)))))) (if (null? sym*$661$19611) (values (quote ()) subst$661$19612) (call-with-values (lambda () (exclude$661$19615 (car sym*$661$19611) subst$661$19612)) (lambda (old$661$19627 subst$661$19628) (call-with-values (lambda () (exclude*$661$19303 (cdr sym*$661$19611) subst$661$19628)) (lambda (old*$661$19631 subst$661$19632) (values (cons old$661$19627 old*$661$19631) subst$661$19632)))))))) (quote #f)))) (set! find*$661$19305 (lambda (sym*$661$19603 subst$661$19604) (map (lambda (x$661$19607) ((lambda (t$661$19609) (if t$661$19609 (cdr t$661$19609) (error (quote import) (quote "cannot find identifier ~s") x$661$19607))) (assq x$661$19607 subst$661$19604))) sym*$661$19603))) (set! rem*$661$19307 (lambda (sym*$661$19595 subst$661$19596) (letrec ((f$661$19599 (lambda (subst$661$19601) (if (null? subst$661$19601) (quote ()) (if (memq (caar subst$661$19601) sym*$661$19595) (f$661$19599 (cdr subst$661$19601)) (cons (car subst$661$19601) (f$661$19599 (cdr subst$661$19601)))))))) (f$661$19599 subst$661$19596)))) (set! remove-dups$661$19309 (lambda (ls$661$19593) (if (null? ls$661$19593) (quote ()) (if (memq (car ls$661$19593) (cdr ls$661$19593)) (remove-dups$661$19309 (cdr ls$661$19593)) (cons (car ls$661$19593) (remove-dups$661$19309 (cdr ls$661$19593))))))) (set! get-import$661$19311 (lambda (spec$661$19313) ((lambda (t$661$19315) ((lambda (ls/false$661$19317) (if (if ls/false$661$19317 (begin (quote #f) (apply (lambda (rename$661$19319 isp$661$19320 old*$661$19321 new*$661$19322) (if (eq? rename$661$19319 (quote rename)) (if (for-all symbol? old*$661$19321) (begin (quote #f) (for-all symbol? new*$661$19322)) (quote #f)) (quote #f))) ls/false$661$19317)) (quote #f)) (apply (lambda (rename$661$19327 isp$661$19328 old*$661$19329 new*$661$19330) ((lambda (subst$661$19335) ((lambda (old-label*$661$19337) ((lambda (subst$661$19339) (merge-substs$661$19301 (map cons new*$661$19330 old-label*$661$19337) subst$661$19339)) (rem*$661$19307 old*$661$19329 subst$661$19335))) (find*$661$19305 old*$661$19329 subst$661$19335))) (get-import$661$19311 isp$661$19328))) ls/false$661$19317) ((lambda (t$661$19341) ((lambda (ls/false$661$19343) (if (if ls/false$661$19343 (begin (quote #f) (apply (lambda (except$661$19345 isp$661$19346 sym*$661$19347) (if (eq? except$661$19345 (quote except)) (begin (quote #f) (for-all symbol? sym*$661$19347)) (quote #f))) ls/false$661$19343)) (quote #f)) (apply (lambda (except$661$19351 isp$661$19352 sym*$661$19353) ((lambda (subst$661$19357) (rem*$661$19307 sym*$661$19353 subst$661$19357)) (get-import$661$19311 isp$661$19352))) ls/false$661$19343) ((lambda (t$661$19359) ((lambda (ls/false$661$19361) (if (if ls/false$661$19361 (begin (quote #f) (apply (lambda (only$661$19363 isp$661$19364 sym*$661$19365) (if (eq? only$661$19363 (quote only)) (begin (quote #f) (for-all symbol? sym*$661$19365)) (quote #f))) ls/false$661$19361)) (quote #f)) (apply (lambda (only$661$19369 isp$661$19370 sym*$661$19371) ((lambda (subst$661$19375) ((lambda (sym*$661$19377) ((lambda (lab*$661$19379) (map cons sym*$661$19377 lab*$661$19379)) (find*$661$19305 sym*$661$19377 subst$661$19375))) (remove-dups$661$19309 sym*$661$19371))) (get-import$661$19311 isp$661$19370))) ls/false$661$19361) ((lambda (t$661$19381) ((lambda (ls/false$661$19383) (if (if ls/false$661$19383 (begin (quote #f) (apply (lambda (prefix$661$19385 isp$661$19386 p$661$19387) (if (eq? prefix$661$19385 (quote prefix)) (begin (quote #f) (symbol? p$661$19387)) (quote #f))) ls/false$661$19383)) (quote #f)) (apply (lambda (prefix$661$19391 isp$661$19392 p$661$19393) ((lambda (subst$661$19397) (map (lambda (x$661$19399) (cons (string->symbol (string-append (symbol->string p$661$19393) (symbol->string (car x$661$19399)))) (cdr x$661$19399))) subst$661$19397)) (get-import$661$19311 isp$661$19392))) ls/false$661$19383) ((lambda (t$661$19401) ((lambda (ls/false$661$19403) (if (if ls/false$661$19403 (begin (quote #f) (apply (lambda (library$661$19405 name$661$19406) (eq? library$661$19405 (quote library))) ls/false$661$19403)) (quote #f)) (apply (lambda (library$661$19409 name$661$19410) ((lambda (lib$661$19413) (begin (if lib$661$19413 (void) (error (quote import) (quote "cannot find library satisfying ~s") name$661$19410)) (imp-collector$661$19299 lib$661$19413) (library-subst$661$11780 lib$661$19413))) (find-library-by-name$661$11755 name$661$19410))) ls/false$661$19403) ((lambda (t$661$19415) ((lambda (ls/false$661$19417) (if (if ls/false$661$19417 (begin (quote #f) (apply (lambda (x$661$19419 x*$661$19420) (not (memq x$661$19419 (quote (rename except only prefix library))))) ls/false$661$19417)) (quote #f)) (apply (lambda (x$661$19423 x*$661$19424) (get-import$661$19311 (list (quote library) (cons x$661$19423 x*$661$19424)))) ls/false$661$19417) ((lambda (t$661$19427) ((lambda (ls/false$661$19429) (if (if ls/false$661$19429 (begin (quote #f) (apply (lambda (spec$661$19431) (quote #t)) ls/false$661$19429)) (quote #f)) (apply (lambda (spec$661$19433) (error (quote import) (quote "invalid import spec ~s") spec$661$19433)) ls/false$661$19429) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$19427 (quote ()))))) ((lambda (x$661$19435) (list x$661$19435)) t$661$19427))) t$661$19415))) ((lambda (x$661$19437) (if (syntax-pair?$661$12194 x$661$19437) (begin (quote #f) ((lambda (q$661$19439) (if q$661$19439 (begin (quote #f) ((lambda (r$661$19441) (if r$661$19441 (begin (quote #f) (append q$661$19439 r$661$19441)) (quote #f))) ((letrec ((f$661$19443 (lambda (x$661$19445) (if (syntax-pair?$661$12194 x$661$19445) ((lambda (cars/f$661$19447) (if cars/f$661$19447 (begin (quote #f) ((lambda (cdrs/f$661$19449) (if cdrs/f$661$19449 (begin (quote #f) (map cons cars/f$661$19447 cdrs/f$661$19449)) (quote #f))) (f$661$19443 (syntax-cdr$661$12206 x$661$19445)))) (quote #f))) ((lambda (x$661$19451) (list x$661$19451)) (syntax-car$661$12202 x$661$19445))) (if (syntax-null?$661$12198 x$661$19445) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$661$19443) (syntax-cdr$661$12206 x$661$19437)))) (quote #f))) ((lambda (x$661$19453) (list x$661$19453)) (syntax-car$661$12202 x$661$19437)))) (quote #f))) t$661$19415))) t$661$19401))) ((lambda (x$661$19455) (if (syntax-pair?$661$12194 x$661$19455) (begin (quote #f) ((lambda (q$661$19457) (if q$661$19457 (begin (quote #f) ((lambda (r$661$19459) (if r$661$19459 (begin (quote #f) (append q$661$19457 r$661$19459)) (quote #f))) ((lambda (x$661$19461) (if (syntax-pair?$661$12194 x$661$19461) (begin (quote #f) ((lambda (q$661$19463) (if q$661$19463 (begin (quote #f) ((lambda (r$661$19465) (if r$661$19465 (begin (quote #f) (append q$661$19463 r$661$19465)) (quote #f))) ((lambda (x$661$19467) (if (equal? (stx->datum$661$12228 x$661$19467) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$19461)))) (quote #f))) ((lambda (x$661$19469) (list x$661$19469)) (syntax-car$661$12202 x$661$19461)))) (quote #f))) (syntax-cdr$661$12206 x$661$19455)))) (quote #f))) ((lambda (x$661$19471) (list x$661$19471)) (syntax-car$661$12202 x$661$19455)))) (quote #f))) t$661$19401))) t$661$19381))) ((lambda (x$661$19473) (if (syntax-pair?$661$12194 x$661$19473) (begin (quote #f) ((lambda (q$661$19475) (if q$661$19475 (begin (quote #f) ((lambda (r$661$19477) (if r$661$19477 (begin (quote #f) (append q$661$19475 r$661$19477)) (quote #f))) ((lambda (x$661$19479) (if (syntax-pair?$661$12194 x$661$19479) (begin (quote #f) ((lambda (q$661$19481) (if q$661$19481 (begin (quote #f) ((lambda (r$661$19483) (if r$661$19483 (begin (quote #f) (append q$661$19481 r$661$19483)) (quote #f))) ((lambda (x$661$19485) (if (syntax-pair?$661$12194 x$661$19485) (begin (quote #f) ((lambda (q$661$19487) (if q$661$19487 (begin (quote #f) ((lambda (r$661$19489) (if r$661$19489 (begin (quote #f) (append q$661$19487 r$661$19489)) (quote #f))) ((lambda (x$661$19491) (if (equal? (stx->datum$661$12228 x$661$19491) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$19485)))) (quote #f))) ((lambda (x$661$19493) (list x$661$19493)) (syntax-car$661$12202 x$661$19485)))) (quote #f))) (syntax-cdr$661$12206 x$661$19479)))) (quote #f))) ((lambda (x$661$19495) (list x$661$19495)) (syntax-car$661$12202 x$661$19479)))) (quote #f))) (syntax-cdr$661$12206 x$661$19473)))) (quote #f))) ((lambda (x$661$19497) (list x$661$19497)) (syntax-car$661$12202 x$661$19473)))) (quote #f))) t$661$19381))) t$661$19359))) ((lambda (x$661$19499) (if (syntax-pair?$661$12194 x$661$19499) (begin (quote #f) ((lambda (q$661$19501) (if q$661$19501 (begin (quote #f) ((lambda (r$661$19503) (if r$661$19503 (begin (quote #f) (append q$661$19501 r$661$19503)) (quote #f))) ((lambda (x$661$19505) (if (syntax-pair?$661$12194 x$661$19505) (begin (quote #f) ((lambda (q$661$19507) (if q$661$19507 (begin (quote #f) ((lambda (r$661$19509) (if r$661$19509 (begin (quote #f) (append q$661$19507 r$661$19509)) (quote #f))) ((letrec ((f$661$19511 (lambda (x$661$19513) (if (syntax-pair?$661$12194 x$661$19513) ((lambda (cars/f$661$19515) (if cars/f$661$19515 (begin (quote #f) ((lambda (cdrs/f$661$19517) (if cdrs/f$661$19517 (begin (quote #f) (map cons cars/f$661$19515 cdrs/f$661$19517)) (quote #f))) (f$661$19511 (syntax-cdr$661$12206 x$661$19513)))) (quote #f))) ((lambda (x$661$19519) (list x$661$19519)) (syntax-car$661$12202 x$661$19513))) (if (syntax-null?$661$12198 x$661$19513) (list (begin (quote sym*) (quote ()))) (quote #f)))))) f$661$19511) (syntax-cdr$661$12206 x$661$19505)))) (quote #f))) ((lambda (x$661$19521) (list x$661$19521)) (syntax-car$661$12202 x$661$19505)))) (quote #f))) (syntax-cdr$661$12206 x$661$19499)))) (quote #f))) ((lambda (x$661$19523) (list x$661$19523)) (syntax-car$661$12202 x$661$19499)))) (quote #f))) t$661$19359))) t$661$19341))) ((lambda (x$661$19525) (if (syntax-pair?$661$12194 x$661$19525) (begin (quote #f) ((lambda (q$661$19527) (if q$661$19527 (begin (quote #f) ((lambda (r$661$19529) (if r$661$19529 (begin (quote #f) (append q$661$19527 r$661$19529)) (quote #f))) ((lambda (x$661$19531) (if (syntax-pair?$661$12194 x$661$19531) (begin (quote #f) ((lambda (q$661$19533) (if q$661$19533 (begin (quote #f) ((lambda (r$661$19535) (if r$661$19535 (begin (quote #f) (append q$661$19533 r$661$19535)) (quote #f))) ((letrec ((f$661$19537 (lambda (x$661$19539) (if (syntax-pair?$661$12194 x$661$19539) ((lambda (cars/f$661$19541) (if cars/f$661$19541 (begin (quote #f) ((lambda (cdrs/f$661$19543) (if cdrs/f$661$19543 (begin (quote #f) (map cons cars/f$661$19541 cdrs/f$661$19543)) (quote #f))) (f$661$19537 (syntax-cdr$661$12206 x$661$19539)))) (quote #f))) ((lambda (x$661$19545) (list x$661$19545)) (syntax-car$661$12202 x$661$19539))) (if (syntax-null?$661$12198 x$661$19539) (list (begin (quote sym*) (quote ()))) (quote #f)))))) f$661$19537) (syntax-cdr$661$12206 x$661$19531)))) (quote #f))) ((lambda (x$661$19547) (list x$661$19547)) (syntax-car$661$12202 x$661$19531)))) (quote #f))) (syntax-cdr$661$12206 x$661$19525)))) (quote #f))) ((lambda (x$661$19549) (list x$661$19549)) (syntax-car$661$12202 x$661$19525)))) (quote #f))) t$661$19341))) t$661$19315))) ((lambda (x$661$19551) (if (syntax-pair?$661$12194 x$661$19551) (begin (quote #f) ((lambda (q$661$19553) (if q$661$19553 (begin (quote #f) ((lambda (r$661$19555) (if r$661$19555 (begin (quote #f) (append q$661$19553 r$661$19555)) (quote #f))) ((lambda (x$661$19557) (if (syntax-pair?$661$12194 x$661$19557) (begin (quote #f) ((lambda (q$661$19559) (if q$661$19559 (begin (quote #f) ((lambda (r$661$19561) (if r$661$19561 (begin (quote #f) (append q$661$19559 r$661$19561)) (quote #f))) ((letrec ((f$661$19563 (lambda (x$661$19565) (if (syntax-pair?$661$12194 x$661$19565) ((lambda (cars/f$661$19567) (if cars/f$661$19567 (begin (quote #f) ((lambda (cdrs/f$661$19569) (if cdrs/f$661$19569 (begin (quote #f) (map cons cars/f$661$19567 cdrs/f$661$19569)) (quote #f))) (f$661$19563 (syntax-cdr$661$12206 x$661$19565)))) (quote #f))) ((lambda (x$661$19571) (if (syntax-pair?$661$12194 x$661$19571) (begin (quote #f) ((lambda (q$661$19573) (if q$661$19573 (begin (quote #f) ((lambda (r$661$19575) (if r$661$19575 (begin (quote #f) (append q$661$19573 r$661$19575)) (quote #f))) ((lambda (x$661$19577) (if (syntax-pair?$661$12194 x$661$19577) (begin (quote #f) ((lambda (q$661$19579) (if q$661$19579 (begin (quote #f) ((lambda (r$661$19581) (if r$661$19581 (begin (quote #f) (append q$661$19579 r$661$19581)) (quote #f))) ((lambda (x$661$19583) (if (equal? (stx->datum$661$12228 x$661$19583) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$661$12206 x$661$19577)))) (quote #f))) ((lambda (x$661$19585) (list x$661$19585)) (syntax-car$661$12202 x$661$19577)))) (quote #f))) (syntax-cdr$661$12206 x$661$19571)))) (quote #f))) ((lambda (x$661$19587) (list x$661$19587)) (syntax-car$661$12202 x$661$19571)))) (quote #f))) (syntax-car$661$12202 x$661$19565))) (if (syntax-null?$661$12198 x$661$19565) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) f$661$19563) (syntax-cdr$661$12206 x$661$19557)))) (quote #f))) ((lambda (x$661$19589) (list x$661$19589)) (syntax-car$661$12202 x$661$19557)))) (quote #f))) (syntax-cdr$661$12206 x$661$19551)))) (quote #f))) ((lambda (x$661$19591) (list x$661$19591)) (syntax-car$661$12202 x$661$19551)))) (quote #f))) t$661$19315))) spec$661$19313))) (letrec ((f$661$19653 (lambda (imp*$661$19655 subst$661$19656) (if (null? imp*$661$19655) (values subst$661$19656 (imp-collector$661$19299)) (f$661$19653 (cdr imp*$661$19655) (merge-substs$661$19301 (get-import$661$19311 (car imp*$661$19655)) subst$661$19656)))))) (f$661$19653 imp*$661$19297 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! make-top-rib$661$12784 (lambda (subst$661$19659) ((lambda (rib$661$19661) (begin (for-each (lambda (x$661$19663) ((lambda (name$661$19665 label$661$19666) (extend-rib!$661$12147 rib$661$19661 (mkstx$661$12184 name$661$19665 top-mark*$661$12114 (quote ())) label$661$19666)) (car x$661$19663) (cdr x$661$19663))) subst$661$19659) rib$661$19661)) (make-empty-rib$661$12145)))) (set! make-collector$661$12786 (lambda () ((lambda (ls$661$19669) (lambda g$661$19673 ((lambda (g$661$19674) (if (= g$661$19674 (quote 0)) (apply (lambda () ls$661$19669) g$661$19673) (if (= g$661$19674 (quote 1)) (apply (lambda (x$661$19671) (set! ls$661$19669 (set-cons$661$12107 x$661$19671 ls$661$19669))) g$661$19673) (error (quote apply) (quote "invalid arg count"))))) (length g$661$19673)))) (quote ())))) (set! inv-collector$661$12788 (make-parameter$661$11224 (lambda args$661$19675 (error (quote inv-collector) (quote "not initialized"))) (lambda (x$661$19677) (begin (if (procedure? x$661$19677) (void) (error (quote inv-collector) (quote "~s is not a procedure") x$661$19677)) x$661$19677)))) (set! vis-collector$661$12790 (make-parameter$661$11224 (lambda args$661$19679 (error (quote vis-collector) (quote "not initialized"))) (lambda (x$661$19681) (begin (if (procedure? x$661$19681) (void) (error (quote vis-collector) (quote "~s is not a procedure") x$661$19681)) x$661$19681)))) (set! chi-library-internal$661$12792 (lambda (e*$661$19683 rib$661$19684 top?$661$19685) (call-with-values (lambda () (chi-body*$661$12762 e*$661$19683 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) rib$661$19684 top?$661$19685)) (lambda (e*$661$19689 r$661$19690 mr$661$19691 lex*$661$19692 rhs*$661$19693 mod**$661$19694 _kwd*$661$19695) (values (append (apply append (reverse mod**$661$19694)) e*$661$19689) r$661$19690 mr$661$19691 (reverse lex*$661$19692) (reverse rhs*$661$19693)))))) (set! library-body-expander$661$12794 (lambda (exp*$661$19703 imp*$661$19704 b*$661$19705) (call-with-values (lambda () (parse-exports$661$12776 exp*$661$19703)) (lambda (exp-int*$661$19709 exp-ext*$661$19710) (call-with-values (lambda () (parse-import-spec*$661$12782 imp*$661$19704)) (lambda (subst$661$19711 imp*$661$19712) ((lambda (rib$661$19717) ((lambda (b*$661$19719 rtc$661$19720 vtc$661$19721) ((lambda (t$661$19729 t$661$19730 t$661$19731 t$661$19732) ((lambda (swap$661$19737) (dynamic-wind swap$661$19737 (lambda () (call-with-values (lambda () (chi-library-internal$661$12792 b*$661$19719 rib$661$19717 (quote #f))) (lambda (init*$661$19739 r$661$19740 mr$661$19741 lex*$661$19742 rhs*$661$19743) (begin (seal-rib!$661$12149 rib$661$19717) ((lambda (rhs*$661$19749 init*$661$19750) (begin (unseal-rib!$661$12151 rib$661$19717) ((lambda (export-subst$661$19753) (call-with-values (lambda () (make-export-env/macros$661$12837 r$661$19740)) (lambda (export-env$661$19755 global*$661$19756 macro*$661$19757) ((lambda (invoke-body$661$19761 invoke-definitions$661$19762) (values imp*$661$19712 (rtc$661$19720) (vtc$661$19721) (build-sequence$661$12091 (quote #f) (append invoke-definitions$661$19762 (list invoke-body$661$19761))) macro*$661$19757 export-subst$661$19753 export-env$661$19755)) (build-letrec*$661$12088 (quote #f) lex*$661$19742 rhs*$661$19749 (build-exports$661$12833 global*$661$19756 init*$661$19750)) (map build-global-define$661$12105 (map cdr global*$661$19756)))))) (make-export-subst$661$12835 exp-int*$661$19709 exp-ext*$661$19710 rib$661$19717)))) (chi-rhs*$661$12750 rhs*$661$19743 r$661$19740 mr$661$19741) (chi-expr*$661$12736 init*$661$19739 r$661$19740 mr$661$19741)))))) swap$661$19737)) (lambda () (begin ((lambda (t$661$19765) (begin (t$661$19729 t$661$19731) (set! t$661$19731 t$661$19765))) (t$661$19729)) ((lambda (t$661$19767) (begin (t$661$19730 t$661$19732) (set! t$661$19732 t$661$19767))) (t$661$19730)))))) inv-collector$661$12788 vis-collector$661$12790 rtc$661$19720 vtc$661$19721)) (map (lambda (x$661$19769) (mkstx$661$12184 x$661$19769 top-mark*$661$12114 (list rib$661$19717))) b*$661$19705) (make-collector$661$12786) (make-collector$661$12786))) (make-top-rib$661$12784 subst$661$19711)))))))) (set! core-library-expander$661$12796 (lambda (e$661$19771) (call-with-values (lambda () (parse-library$661$12780 e$661$19771)) (lambda (name*$661$19773 exp*$661$19774 imp*$661$19775 b*$661$19776) (call-with-values (lambda () (parse-library-name$661$12778 name*$661$19773)) (lambda (name$661$19781 ver$661$19782) (call-with-values (lambda () (library-body-expander$661$12794 exp*$661$19774 imp*$661$19775 b*$661$19776)) (lambda (imp*$661$19785 invoke-req*$661$19786 visit-req*$661$19787 invoke-code$661$19788 visit-code$661$19789 export-subst$661$19790 export-env$661$19791) (values name$661$19781 imp*$661$19785 invoke-req*$661$19786 visit-req*$661$19787 invoke-code$661$19788 visit-code$661$19789 export-subst$661$19790 export-env$661$19791))))))))) (set! parse-top-level-program$661$12798 (lambda (e*$661$19799) ((lambda (t$661$19801) ((lambda (ls/false$661$19803) (if (if ls/false$661$19803 (begin (quote #f) (apply (lambda (import$661$19805 imp*$661$19806 b*$661$19807) (eq? import$661$19805 (quote import))) ls/false$661$19803)) (quote #f)) (apply (lambda (import$661$19811 imp*$661$19812 b*$661$19813) (values imp*$661$19812 b*$661$19813)) ls/false$661$19803) ((lambda (t$661$19817) ((lambda (ls/false$661$19819) (if (if ls/false$661$19819 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$19819)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) ls/false$661$19819) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$19817 (quote ()))))) ((lambda (x$661$19821) (quote ())) t$661$19817))) t$661$19801))) ((lambda (x$661$19823) (if (syntax-pair?$661$12194 x$661$19823) (begin (quote #f) ((lambda (q$661$19825) (if q$661$19825 (begin (quote #f) ((lambda (r$661$19827) (if r$661$19827 (begin (quote #f) (append q$661$19825 r$661$19827)) (quote #f))) ((letrec ((f$661$19829 (lambda (x$661$19831) (if (syntax-pair?$661$12194 x$661$19831) ((lambda (cars/f$661$19833) (if cars/f$661$19833 (begin (quote #f) ((lambda (cdrs/f$661$19835) (if cdrs/f$661$19835 (begin (quote #f) (map cons cars/f$661$19833 cdrs/f$661$19835)) (quote #f))) (f$661$19829 (syntax-cdr$661$12206 x$661$19831)))) (quote #f))) ((lambda (x$661$19837) (list x$661$19837)) (syntax-car$661$12202 x$661$19831))) (if (syntax-null?$661$12198 x$661$19831) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$661$19829) (syntax-cdr$661$12206 x$661$19823)))) (quote #f))) ((lambda (x$661$19839) (if (syntax-pair?$661$12194 x$661$19839) (begin (quote #f) ((lambda (q$661$19841) (if q$661$19841 (begin (quote #f) ((lambda (r$661$19843) (if r$661$19843 (begin (quote #f) (append q$661$19841 r$661$19843)) (quote #f))) ((letrec ((f$661$19845 (lambda (x$661$19847) (if (syntax-pair?$661$12194 x$661$19847) ((lambda (cars/f$661$19849) (if cars/f$661$19849 (begin (quote #f) ((lambda (cdrs/f$661$19851) (if cdrs/f$661$19851 (begin (quote #f) (map cons cars/f$661$19849 cdrs/f$661$19851)) (quote #f))) (f$661$19845 (syntax-cdr$661$12206 x$661$19847)))) (quote #f))) ((lambda (x$661$19853) (list x$661$19853)) (syntax-car$661$12202 x$661$19847))) (if (syntax-null?$661$12198 x$661$19847) (list (begin (quote imp*) (quote ()))) (quote #f)))))) f$661$19845) (syntax-cdr$661$12206 x$661$19839)))) (quote #f))) ((lambda (x$661$19855) (list x$661$19855)) (syntax-car$661$12202 x$661$19839)))) (quote #f))) (syntax-car$661$12202 x$661$19823)))) (quote #f))) t$661$19801))) e*$661$19799))) (set! top-level-expander$661$12800 (lambda (e*$661$19857) (call-with-values (lambda () (parse-top-level-program$661$12798 e*$661$19857)) (lambda (imp*$661$19859 b*$661$19860) (call-with-values (lambda () (library-body-expander$661$12794 (quote ()) imp*$661$19859 b*$661$19860)) (lambda (imp*$661$19863 invoke-req*$661$19864 visit-req*$661$19865 invoke-code$661$19866 visit-code$661$19867 export-subst$661$19868 export-env$661$19869) (values invoke-req*$661$19864 invoke-code$661$19866))))))) (set! make-env$661$12803 (lambda (subst$661$19877 imp*$661$19878) (vector (quote g$661$12802) subst$661$19877 imp*$661$19878))) (set! env?$661$12805 (lambda (x$661$19881) (if (vector? x$661$19881) (if (= (vector-length x$661$19881) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref x$661$19881 (quote 0)) (quote g$661$12802))) (quote #f)) (quote #f)))) (set! env-subst$661$12807 (lambda (x$661$19883) (if (env?$661$12805 x$661$19883) (vector-ref x$661$19883 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") x$661$19883 (quote env))))) (set! env-imp*$661$12809 (lambda (x$661$19885) (if (env?$661$12805 x$661$19885) (vector-ref x$661$19885 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") x$661$19885 (quote env))))) (set! set-env-subst!$661$12811 (lambda (x$661$19887 v$661$19888) (if (env?$661$12805 x$661$19887) (vector-set! x$661$19887 (quote 1) v$661$19888) (error (quote set-env-subst!) (quote "~s is not of type ~s") x$661$19887 (quote env))))) (set! set-env-imp*!$661$12813 (lambda (x$661$19891 v$661$19892) (if (env?$661$12805 x$661$19891) (vector-set! x$661$19891 (quote 2) v$661$19892) (error (quote set-env-imp*!) (quote "~s is not of type ~s") x$661$19891 (quote env))))) (set! environment?$661$12815 (lambda (x$661$19895) (env?$661$12805 x$661$19895))) (set! environment$661$12817 (lambda imp*$661$19897 (call-with-values (lambda () (parse-import-spec*$661$12782 imp*$661$19897)) (lambda (subst$661$19899 imp*$661$19900) (make-env$661$12803 subst$661$19899 imp*$661$19900))))) (set! null-environment$661$12819 (lambda (n$661$19903) (begin (if (eqv? n$661$19903 (quote 5)) (void) (error (quote null-environment) (quote "~s is not 5") n$661$19903)) (environment$661$12817 (quote (psyntax null-environment-5)))))) (set! scheme-report-environment$661$12821 (lambda (n$661$19905) (begin (if (eqv? n$661$19905 (quote 5)) (void) (error (quote scheme-report-environment) (quote "~s is not 5") n$661$19905)) (environment$661$12817 (quote (psyntax scheme-report-environment-5)))))) (set! expand$661$12823 (lambda (x$661$19907 env$661$19908) (begin (if (env?$661$12805 env$661$19908) (void) (error (quote expand) (quote "~s is not an environment") env$661$19908)) ((lambda (subst$661$19911) ((lambda (rib$661$19913) ((lambda (x$661$19915 rtc$661$19916 vtc$661$19917) ((lambda (x$661$19921) (begin (seal-rib!$661$12149 rib$661$19913) (values x$661$19921 (rtc$661$19916)))) ((lambda (t$661$19927 t$661$19928 t$661$19929 t$661$19930) ((lambda (swap$661$19935) (dynamic-wind swap$661$19935 (lambda () (chi-expr$661$12740 x$661$19915 (quote ()) (quote ()))) swap$661$19935)) (lambda () (begin ((lambda (t$661$19937) (begin (t$661$19927 t$661$19929) (set! t$661$19929 t$661$19937))) (t$661$19927)) ((lambda (t$661$19939) (begin (t$661$19928 t$661$19930) (set! t$661$19930 t$661$19939))) (t$661$19928)))))) inv-collector$661$12788 vis-collector$661$12790 rtc$661$19916 vtc$661$19917))) (mkstx$661$12184 x$661$19907 top-mark*$661$12114 (list rib$661$19913)) (make-collector$661$12786) (make-collector$661$12786))) (make-top-rib$661$12784 subst$661$19911))) (env-subst$661$12807 env$661$19908))))) (set! eval$661$12825 (lambda (x$661$19941 env$661$19942) (begin (if (env?$661$12805 env$661$19942) (void) (error (quote eval) (quote "~s is not an environment") env$661$19942)) (call-with-values (lambda () (expand$661$12823 x$661$19941 env$661$19942)) (lambda (x$661$19945 invoke-req*$661$19946) (begin (for-each invoke-library$661$11746 invoke-req*$661$19946) (eval-core (expanded->core$661$11298 x$661$19945)))))))) (set! library-expander$661$12827 (lambda (x$661$19949) ((lambda (build-visit-code$661$19951 visit!$661$19953) (begin (set! build-visit-code$661$19951 (lambda (macro*$661$19963) (if (null? macro*$661$19963) (build-void$661$12090) (build-sequence$661$12091 (quote #f) (map (lambda (x$661$19965) ((lambda (loc$661$19967 src$661$19968) (list (quote set!) loc$661$19967 src$661$19968)) (car x$661$19965) (cddr x$661$19965))) macro*$661$19963))))) (set! visit!$661$19953 (lambda (macro*$661$19955) (for-each (lambda (x$661$19957) ((lambda (loc$661$19959 proc$661$19960) (set-symbol-value! loc$661$19959 proc$661$19960)) (car x$661$19957) (cadr x$661$19957))) macro*$661$19955))) (call-with-values (lambda () (core-library-expander$661$12796 x$661$19949)) (lambda (name$661$19971 imp*$661$19972 inv*$661$19973 vis*$661$19974 invoke-code$661$19975 macro*$661$19976 export-subst$661$19977 export-env$661$19978) ((lambda (id$661$19987 name$661$19988 ver$661$19989 imp*$661$19990 vis*$661$19991 inv*$661$19992) (begin (install-library$661$11750 id$661$19987 name$661$19988 ver$661$19989 imp*$661$19990 vis*$661$19991 inv*$661$19992 export-subst$661$19977 export-env$661$19978 (lambda () (visit!$661$19953 macro*$661$19976)) (lambda () (eval-core (expanded->core$661$11298 invoke-code$661$19975))) (quote #t)) (values invoke-code$661$19975 (build-visit-code$661$19951 macro*$661$19976) export-subst$661$19977 export-env$661$19978))) (gensym) name$661$19971 (quote ()) (map library-spec$661$11742 imp*$661$19972) (map library-spec$661$11742 vis*$661$19974) (map library-spec$661$11742 inv*$661$19973)))))) (quote #f) (quote #f)))) (set! boot-library-expand$661$12829 (lambda (x$661$19999) (call-with-values (lambda () (library-expander$661$12827 x$661$19999)) (lambda (invoke-code$661$20001 visit-code$661$20002 export-subst$661$20003 export-env$661$20004) (values invoke-code$661$20001 export-subst$661$20003 export-env$661$20004))))) (set! rev-map-append$661$12831 (lambda (f$661$20009 ls$661$20010 ac$661$20011) (if (null? ls$661$20010) ac$661$20011 (rev-map-append$661$12831 f$661$20009 (cdr ls$661$20010) (cons (f$661$20009 (car ls$661$20010)) ac$661$20011))))) (set! build-exports$661$12833 (lambda (lex*+loc*$661$20015 init*$661$20016) (build-sequence$661$12091 (quote #f) (cons (build-void$661$12090) (rev-map-append$661$12831 (lambda (x$661$20019) (list (quote set!) (cdr x$661$20019) (car x$661$20019))) lex*+loc*$661$20015 init*$661$20016))))) (set! make-export-subst$661$12835 (lambda (int*$661$20021 ext*$661$20022 rib$661$20023) (map (lambda (int$661$20027 ext$661$20028) ((lambda (id$661$20031) ((lambda (label$661$20033) ((lambda () (begin (if label$661$20033 (void) (error (quote expander) (quote "~a ~s") (quote "cannot export unbound identifier") (strip$661$12226 id$661$20031 (quote ())))) (cons ext$661$20028 label$661$20033))))) (id->label$661$12230 id$661$20031))) (mkstx$661$12184 int$661$20027 top-mark*$661$12114 (list rib$661$20023)))) int*$661$20021 ext*$661$20022))) (set! make-export-env/macros$661$12837 (lambda (r$661$20035) (letrec ((f$661$20037 (lambda (r$661$20039 env$661$20040 global*$661$20041 macro*$661$20042) (if (null? r$661$20039) (values env$661$20040 global*$661$20041 macro*$661$20042) ((lambda (x$661$20047) ((lambda (label$661$20049 b$661$20050) ((lambda (t$661$20053) (if (memv t$661$20053 (quote (lexical))) ((lambda (loc$661$20058) (f$661$20037 (cdr r$661$20039) (cons (cons* label$661$20049 (quote global) loc$661$20058) env$661$20040) (cons (cons (binding-value$661$12238 b$661$20050) loc$661$20058) global*$661$20041) macro*$661$20042)) (gen-global$661$12120 (binding-value$661$12238 b$661$20050))) (if (memv t$661$20053 (quote (local-macro))) ((lambda (loc$661$20056) (f$661$20037 (cdr r$661$20039) (cons (cons* label$661$20049 (quote global-macro) loc$661$20056) env$661$20040) global*$661$20041 (cons (cons loc$661$20056 (binding-value$661$12238 b$661$20050)) macro*$661$20042))) (gensym)) (if (memv t$661$20053 (quote (local-macro!))) ((lambda (loc$661$20054) (f$661$20037 (cdr r$661$20039) (cons (cons* label$661$20049 (quote global-macro!) loc$661$20054) env$661$20040) global*$661$20041 (cons (cons loc$661$20054 (binding-value$661$12238 b$661$20050)) macro*$661$20042))) (gensym)) (if (memv t$661$20053 (quote ($rtd $module))) (f$661$20037 (cdr r$661$20039) (cons x$661$20047 env$661$20040) global*$661$20041 macro*$661$20042) (error (quote expander) (quote "BUG: do not know how to export ~s ~s") (binding-type$661$12236 b$661$20050) (binding-value$661$12238 b$661$20050))))))) (binding-type$661$12236 b$661$20050))) (car x$661$20047) (cdr x$661$20047))) (car r$661$20039)))))) (f$661$20037 r$661$20035 (quote ()) (quote ()) (quote ()))))) (set! generate-temporaries$661$12839 (lambda (ls$661$20060) ((lambda (t$661$20062) ((lambda (ls/false$661$20064) (if (if ls/false$661$20064 (begin (quote #f) (apply (lambda (ls$661$20066) (quote #t)) ls/false$661$20064)) (quote #f)) (apply (lambda (ls$661$20068) (map (lambda (x$661$20070) (make-stx$661$12158 (gensym (quote t)) top-mark*$661$12114 (quote ()))) ls$661$20068)) ls/false$661$20064) ((lambda (t$661$20072) ((lambda (ls/false$661$20074) (if (if ls/false$661$20074 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$661$20074)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "~s is not a list"))) ls/false$661$20074) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$661$12226 t$661$20072 (quote ()))))) ((lambda (x$661$20076) (quote ())) t$661$20072))) t$661$20062))) ((letrec ((f$661$20078 (lambda (x$661$20080) (if (syntax-pair?$661$12194 x$661$20080) ((lambda (cars/f$661$20082) (if cars/f$661$20082 (begin (quote #f) ((lambda (cdrs/f$661$20084) (if cdrs/f$661$20084 (begin (quote #f) (map cons cars/f$661$20082 cdrs/f$661$20084)) (quote #f))) (f$661$20078 (syntax-cdr$661$12206 x$661$20080)))) (quote #f))) ((lambda (x$661$20086) (list x$661$20086)) (syntax-car$661$12202 x$661$20080))) (if (syntax-null?$661$12198 x$661$20080) (list (begin (quote ls) (quote ()))) (quote #f)))))) f$661$20078) t$661$20062))) ls$661$20060))) (set! free-identifier=?$661$12841 (lambda (x$661$20088 y$661$20089) (if (id?$661$12208 x$661$20088) (if (id?$661$12208 y$661$20089) (free-id=?$661$12216 x$661$20088 y$661$20089) (error (quote free-identifier=?) (quote "~s is not an identifier") y$661$20089)) (error (quote free-identifier=?) (quote "~s is not an identifier") x$661$20088)))) (set! bound-identifier=?$661$12843 (lambda (x$661$20092 y$661$20093) (if (id?$661$12208 x$661$20092) (if (id?$661$12208 y$661$20093) (bound-id=?$661$12214 x$661$20092 y$661$20093) (error (quote bound-identifier=?) (quote "~s is not an identifier") y$661$20093)) (error (quote bound-identifier=?) (quote "~s is not an identifier") x$661$20092)))) (set! syntax-error$661$12845 (lambda (x$661$20096 . args$661$20098) (begin (if (for-all string? args$661$20098) (void) (error (quote syntax-error) (quote "invalid argument ~s") args$661$20098)) (if (null? args$661$20098) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$661$12228 x$661$20096)) (error (quote expander) (quote "~s ~a") (stx->datum$661$12228 x$661$20096) (apply string-append args$661$20098)))))) (set! identifier?$661$12847 (lambda (x$661$20100) (id?$661$12208 x$661$20100))) (set! datum->syntax$661$12849 (lambda (id$661$20102 datum$661$20103) (if (id?$661$12208 id$661$20102) (datum->stx$661$12174 id$661$20102 datum$661$20103) (error (quote datum->syntax) (quote "~s is not an identifier") id$661$20102)))) (set! syntax->datum$661$12851 (lambda (x$661$20106) (stx->datum$661$12228 x$661$20106))) (set! eval-r6rs-top-level$661$12853 (lambda (x*$661$20108) (call-with-values (lambda () (top-level-expander$661$12800 x*$661$20108)) (lambda (lib*$661$20110 invoke-code$661$20111) (begin (for-each invoke-library$661$11746 lib*$661$20110) (eval-core (expanded->core$661$11298 invoke-code$661$20111))))))) (set! interaction-library$661$12855 (make-parameter$661$11224 (quote #f))) (set! interaction-sym->label$661$12857 (lambda (sym$661$20114) ((lambda (t$661$20116) (if t$661$20116 ((lambda (lib$661$20118) ((lambda (t$661$20120) (if t$661$20120 (cdr t$661$20120) ((lambda (subst$661$20122) ((lambda (t$661$20124) (if t$661$20124 ((lambda (sym/lab$661$20126) ((lambda (label$661$20128) (begin (extend-library-subst!$661$11749 lib$661$20118 sym$661$20114 label$661$20128) label$661$20128)) (cdr sym/lab$661$20126))) t$661$20124) ((lambda (label$661$20130) (begin (extend-library-subst!$661$11749 lib$661$20118 sym$661$20114 label$661$20130) (extend-library-env!$661$11748 lib$661$20118 label$661$20130 (cons (quote global) (cons lib$661$20118 (gen-global$661$12120 sym$661$20114)))) label$661$20130)) (gen-label$661$12122 sym$661$20114)))) (assq sym$661$20114 subst$661$20122))) (if (library-exists?$661$11754 (quote (ikarus))) (library-subst$661$11780 (find-library-by-name$661$11755 (quote (ikarus)))) (quote ()))))) (assq sym$661$20114 (library-subst$661$11780 lib$661$20118)))) t$661$20116) (quote #f))) (interaction-library$661$12855)))) (set! eval-top-level$661$12859 (lambda (x$661$20132) ((lambda (eval-binding$661$20134) (begin (set! eval-binding$661$20134 (lambda (x$661$20136) ((lambda (loc$661$20138 expr$661$20139) (if loc$661$20138 (set-symbol-value! loc$661$20138 (eval-core (expanded->core$661$11298 expr$661$20139))) (eval-core (expanded->core$661$11298 expr$661$20139)))) (car x$661$20136) (cdr x$661$20136)))) ((lambda (rtc$661$20142 vtc$661$20143) ((lambda (init*$661$20146) (begin (for-each invoke-library$661$11746 (rtc$661$20142)) (if (null? init*$661$20146) (void) (begin (for-each eval-binding$661$20134 (reverse (cdr init*$661$20146))) (eval-binding$661$20134 (car init*$661$20146)))))) ((lambda (t$661$20154 t$661$20155 t$661$20156 t$661$20157 t$661$20158 t$661$20159) ((lambda (swap$661$20166) (dynamic-wind swap$661$20166 (lambda () (chi-top*$661$12772 (list (mkstx$661$12184 x$661$20132 top-mark*$661$12114 (quote ()))) (quote ()))) swap$661$20166)) (lambda () (begin ((lambda (t$661$20168) (begin (t$661$20154 t$661$20157) (set! t$661$20157 t$661$20168))) (t$661$20154)) ((lambda (t$661$20170) (begin (t$661$20155 t$661$20158) (set! t$661$20158 t$661$20170))) (t$661$20155)) ((lambda (t$661$20172) (begin (t$661$20156 t$661$20159) (set! t$661$20159 t$661$20172))) (t$661$20156)))))) inv-collector$661$12788 vis-collector$661$12790 interaction-library$661$12855 rtc$661$20142 vtc$661$20143 (find-library-by-name$661$11755 (quote (ikarus interaction)))))) (make-collector$661$12786) (make-collector$661$12786)))) (quote #f)))) (begin (set! eval-top-level$661$20174 eval-top-level$661$12859) (set! interaction-sym->label$661$20175 interaction-sym->label$661$12857) (set! interaction-library$661$20176 interaction-library$661$12855) (set! eval-r6rs-top-level$661$20177 eval-r6rs-top-level$661$12853) (set! syntax->datum$661$20178 syntax->datum$661$12851) (set! datum->syntax$661$20179 datum->syntax$661$12849) (set! identifier?$661$20180 identifier?$661$12847) (set! syntax-error$661$20181 syntax-error$661$12845) (set! bound-identifier=?$661$20182 bound-identifier=?$661$12843) (set! free-identifier=?$661$20183 free-identifier=?$661$12841) (set! generate-temporaries$661$20184 generate-temporaries$661$12839) (set! make-export-env/macros$661$20185 make-export-env/macros$661$12837) (set! make-export-subst$661$20186 make-export-subst$661$12835) (set! build-exports$661$20187 build-exports$661$12833) (set! rev-map-append$661$20188 rev-map-append$661$12831) (set! boot-library-expand$661$20189 boot-library-expand$661$12829) (set! library-expander$661$20190 library-expander$661$12827) (set! eval$661$20191 eval$661$12825) (set! expand$661$20192 expand$661$12823) (set! scheme-report-environment$661$20193 scheme-report-environment$661$12821) (set! null-environment$661$20194 null-environment$661$12819) (set! environment$661$20195 environment$661$12817) (set! environment?$661$20196 environment?$661$12815) (set! set-env-imp*!$661$20197 set-env-imp*!$661$12813) (set! set-env-subst!$661$20198 set-env-subst!$661$12811) (set! env-imp*$661$20199 env-imp*$661$12809) (set! env-subst$661$20200 env-subst$661$12807) (set! env?$661$20201 env?$661$12805) (set! make-env$661$20202 make-env$661$12803) (set! top-level-expander$661$20203 top-level-expander$661$12800) (set! parse-top-level-program$661$20204 parse-top-level-program$661$12798) (set! core-library-expander$661$20205 core-library-expander$661$12796) (set! library-body-expander$661$20206 library-body-expander$661$12794) (set! chi-library-internal$661$20207 chi-library-internal$661$12792) (set! vis-collector$661$20208 vis-collector$661$12790) (set! inv-collector$661$20209 inv-collector$661$12788) (set! make-collector$661$20210 make-collector$661$12786) (set! make-top-rib$661$20211 make-top-rib$661$12784) (set! parse-import-spec*$661$20212 parse-import-spec*$661$12782) (set! parse-library$661$20213 parse-library$661$12780) (set! parse-library-name$661$20214 parse-library-name$661$12778) (set! parse-exports$661$20215 parse-exports$661$12776) (set! expand-transformer$661$20216 expand-transformer$661$12774) (set! chi-top*$661$20217 chi-top*$661$12772) (set! chi-top-set!$661$20218 chi-top-set!$661$12770) (set! gen-global-var-binding$661$20219 gen-global-var-binding$661$12768) (set! gen-global-macro-binding$661$20220 gen-global-macro-binding$661$12766) (set! set-global-macro-binding!$661$20221 set-global-macro-binding!$661$12764) (set! chi-body*$661$20222 chi-body*$661$12762) (set! chi-internal-module$661$20223 chi-internal-module$661$12760) (set! parse-module$661$20224 parse-module$661$12758) (set! chi-internal$661$20225 chi-internal$661$12756) (set! find-dups$661$20226 find-dups$661$12754) (set! find-bound=?$661$20227 find-bound=?$661$12752) (set! chi-rhs*$661$20228 chi-rhs*$661$12750) (set! chi-rhs$661$20229 chi-rhs$661$12748) (set! chi-lambda-clause*$661$20230 chi-lambda-clause*$661$12746) (set! chi-lambda-clause$661$20231 chi-lambda-clause$661$12744) (set! chi-set!$661$20232 chi-set!$661$12742) (set! chi-expr$661$20233 chi-expr$661$12740) (set! chi-application$661$20234 chi-application$661$12738) (set! chi-expr*$661$20235 chi-expr*$661$12736) (set! chi-global-macro$661$20236 chi-global-macro$661$12734) (set! chi-local-macro$661$20237 chi-local-macro$661$12732) (set! chi-macro$661$20238 chi-macro$661$12730) (set! local-macro-transformer$661$20239 local-macro-transformer$661$12728) (set! macro-transformer$661$20240 macro-transformer$661$12726) (set! core-macro-transformer$661$20241 core-macro-transformer$661$12724) (set! syntax-transformer$661$20242 syntax-transformer$661$12722) (set! syntax-case-transformer$661$20243 syntax-case-transformer$661$12720) (set! ellipsis?$661$20244 ellipsis?$661$12718) (set! syntax-dispatch$661$20245 syntax-dispatch$661$12716) (set! convert-pattern$661$20246 convert-pattern$661$12714) (set! foreign-call-transformer$661$20247 foreign-call-transformer$661$12712) (set! parameterize-transformer$661$20248 parameterize-transformer$661$12710) (set! incorrect-usage-macro$661$20249 incorrect-usage-macro$661$12708) (set! define-record-macro$661$20250 define-record-macro$661$12706) (set! quasisyntax-macro$661$20251 quasisyntax-macro$661$12704) (set! quasiquote-macro$661$20252 quasiquote-macro$661$12702) (set! syntax-rules-macro$661$20253 syntax-rules-macro$661$12700) (set! include-macro$661$20254 include-macro$661$12698) (set! cond-macro$661$20255 cond-macro$661$12696) (set! and-macro$661$20256 and-macro$661$12694) (set! or-macro$661$20257 or-macro$661$12692) (set! let*-macro$661$20258 let*-macro$661$12690) (set! do-macro$661$20259 do-macro$661$12688) (set! identifier-syntax-macro$661$20260 identifier-syntax-macro$661$12686) (set! endianness-macro$661$20261 endianness-macro$661$12684) (set! assert-macro$661$20262 assert-macro$661$12682) (set! delay-macro$661$20263 delay-macro$661$12680) (set! time-macro$661$20264 time-macro$661$12678) (set! trace-define-macro$661$20265 trace-define-macro$661$12676) (set! trace-lambda-macro$661$20266 trace-lambda-macro$661$12674) (set! let-macro$661$20267 let-macro$661$12672) (set! with-syntax-macro$661$20268 with-syntax-macro$661$12670) (set! bless$661$20269 bless$661$12668) (set! lambda-transformer$661$20270 lambda-transformer$661$12666) (set! case-lambda-transformer$661$20271 case-lambda-transformer$661$12664) (set! quote-transformer$661$20272 quote-transformer$661$12662) (set! case-transformer$661$20273 case-transformer$661$12660) (set! if-transformer$661$20274 if-transformer$661$12658) (set! unless-transformer$661$20275 unless-transformer$661$12656) (set! when-transformer$661$20276 when-transformer$661$12654) (set! type-descriptor-transformer$661$20277 type-descriptor-transformer$661$12652) (set! letrec*-transformer$661$20278 letrec*-transformer$661$12650) (set! letrec-transformer$661$20279 letrec-transformer$661$12648) (set! letrec-helper$661$20280 letrec-helper$661$12646) (set! let-values-transformer$661$20281 let-values-transformer$661$12644) (set! add-lexicals$661$20282 add-lexicals$661$12642) (set! add-lexical$661$20283 add-lexical$661$12640) (set! scheme-stx$661$20284 scheme-stx$661$12638) (set! parse-define-syntax$661$20285 parse-define-syntax$661$12636) (set! parse-define$661$20286 parse-define$661$12634) (set! make-eval-transformer$661$20288 make-eval-transformer$661$12272) (set! make-variable-transformer$661$20289 make-variable-transformer$661$12270) (set! sanitize-binding$661$20290 sanitize-binding$661$12268) (set! syntax-type$661$20292 syntax-type$661$12240) (set! binding-value$661$20293 binding-value$661$12238) (set! binding-type$661$20294 binding-type$661$12236) (set! make-binding$661$20295 make-binding$661$12234) (set! label->binding$661$20296 label->binding$661$12232) (set! id->label$661$20297 id->label$661$12230) (set! stx->datum$661$20298 stx->datum$661$12228) (set! strip$661$20299 strip$661$12226) (set! self-evaluating?$661$20300 self-evaluating?$661$12224) (set! bound-id-member?$661$20301 bound-id-member?$661$12222) (set! distinct-bound-ids?$661$20302 distinct-bound-ids?$661$12220) (set! valid-bound-ids?$661$20303 valid-bound-ids?$661$12218) (set! free-id=?$661$20304 free-id=?$661$12216) (set! bound-id=?$661$20305 bound-id=?$661$12214) (set! same-marks?$661$20306 same-marks?$661$12212) (set! id->sym$661$20307 id->sym$661$12210) (set! id?$661$20308 id?$661$12208) (set! syntax-cdr$661$20309 syntax-cdr$661$12206) (set! syntax->list$661$20310 syntax->list$661$12204) (set! syntax-car$661$20311 syntax-car$661$12202) (set! syntax-list?$661$20312 syntax-list?$661$12200) (set! syntax-null?$661$20313 syntax-null?$661$12198) (set! syntax-vector?$661$20314 syntax-vector?$661$12196) (set! syntax-pair?$661$20315 syntax-pair?$661$12194) (set! syntax-vector->list$661$20316 syntax-vector->list$661$12192) (set! syntax-kind?$661$20317 syntax-kind?$661$12190) (set! add-subst$661$20318 add-subst$661$12188) (set! add-mark$661$20319 add-mark$661$12186) (set! mkstx$661$20320 mkstx$661$12184) (set! join-wraps$661$20321 join-wraps$661$12182) (set! anti-mark?$661$20322 anti-mark?$661$12180) (set! anti-mark$661$20323 anti-mark$661$12178) (set! gen-mark$661$20324 gen-mark$661$12176) (set! datum->stx$661$20325 datum->stx$661$12174) (set! set-stx-subst*!$661$20326 set-stx-subst*!$661$12172) (set! set-stx-mark*!$661$20327 set-stx-mark*!$661$12170) (set! set-stx-expr!$661$20328 set-stx-expr!$661$12168) (set! stx-subst*$661$20329 stx-subst*$661$12166) (set! stx-mark*$661$20330 stx-mark*$661$12164) (set! stx-expr$661$20331 stx-expr$661$12162) (set! stx?$661$20332 stx?$661$12160) (set! make-stx$661$20333 make-stx$661$12158) (set! make-full-rib$661$20334 make-full-rib$661$12155) (set! increment-rib-frequency!$661$20335 increment-rib-frequency!$661$12153) (set! unseal-rib!$661$20336 unseal-rib!$661$12151) (set! seal-rib!$661$20337 seal-rib!$661$12149) (set! extend-rib!$661$20338 extend-rib!$661$12147) (set! make-empty-rib$661$20339 make-empty-rib$661$12145) (set! set-rib-sealed/freq!$661$20340 set-rib-sealed/freq!$661$12143) (set! set-rib-label*!$661$20341 set-rib-label*!$661$12141) (set! set-rib-mark**!$661$20342 set-rib-mark**!$661$12139) (set! set-rib-sym*!$661$20343 set-rib-sym*!$661$12137) (set! rib-sealed/freq$661$20344 rib-sealed/freq$661$12135) (set! rib-label*$661$20345 rib-label*$661$12133) (set! rib-mark**$661$20346 rib-mark**$661$12131) (set! rib-sym*$661$20347 rib-sym*$661$12129) (set! rib?$661$20348 rib?$661$12127) (set! make-rib$661$20349 make-rib$661$12125) (set! gen-label$661$20350 gen-label$661$12122) (set! gen-global$661$20351 gen-global$661$12120) (set! gen-lexical$661$20352 gen-lexical$661$12118) (set! top-marked?$661$20353 top-marked?$661$12116) (set! top-mark*$661$20354 top-mark*$661$12114) (set! set-union$661$20356 set-union$661$12109) (set! set-cons$661$20357 set-cons$661$12107) (current-library-expander$661$11758 library-expander$661$12827)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (current-primitive-locations$661$11302 (lambda (x$661$21118) ((lambda (t$661$21120) (if t$661$21120 (cdr t$661$21120) (quote #f))) (assq x$661$21118 (quote ((syntax-error . syntax-error$661$20181) (syntax-dispatch . syntax-dispatch$661$20245) (make-variable-transformer . make-variable-transformer$661$20289) (identifier? . identifier?$661$20180) (generate-temporaries . generate-temporaries$661$20184) (free-identifier=? . free-identifier=?$661$20183) (syntax->datum . syntax->datum$661$20178) (datum->syntax . datum->syntax$661$20179) (bound-identifier=? . bound-identifier=?$661$20182) (null-environment . null-environment$661$20194) (eval . eval$661$20191) (environment . environment$661$20195))))))) (install-library$661$11750 (quote g$661$21085) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21086) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$661$20422) (unquote . g$661$20421) (delay . g$661$20414) (or . g$661$20412) (and . g$661$20411) (do . g$661$20410) (cond . g$661$20409) (let* . g$661$20408) (let . g$661$20407) (quasiquote . g$661$20403) (syntax-rules . g$661$20402) (case . g$661$20398) (if . g$661$20394) (letrec . g$661$20392) (lambda . g$661$20389) (quote . g$661$20386) (letrec-syntax . g$661$20384) (let-syntax . g$661$20383) (set! . g$661$20382) (begin . g$661$20380) (define-syntax . g$661$20378) (define . g$661$20377))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21087) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$661$21067) (string-ci>=? . g$661$21066) (string-ci=? . g$661$21065) (string-ci<? . g$661$21064) (string-ci<=? . g$661$21063) (char-whitespace? . g$661$21062) (char-upper-case? . g$661$21061) (char-numeric? . g$661$21059) (char-lower-case? . g$661$21058) (char-upcase . g$661$21056) (char-downcase . g$661$21053) (char-ci>? . g$661$21052) (char-ci>=? . g$661$21051) (char-ci=? . g$661$21050) (char-ci<? . g$661$21049) (char-ci<=? . g$661$21048) (char-alphabetic? . g$661$21047) (call-with-output-file . g$661$20991) (call-with-input-file . g$661$20990) (write-char . g$661$20989) (write . g$661$20988) (with-output-to-file . g$661$20987) (with-input-from-file . g$661$20986) (read-char . g$661$20985) (read . g$661$20984) (peek-char . g$661$20983) (open-output-file . g$661$20982) (open-input-file . g$661$20981) (newline . g$661$20980) (display . g$661$20979) (close-output-port . g$661$20978) (close-input-port . g$661$20977) (eof-object . g$661$20975) (current-output-port . g$661$20973) (current-input-port . g$661$20972) (output-port? . g$661$20971) (input-port? . g$661$20970) (scheme-report-environment . g$661$20870) (quotient . g$661$20869) (null-environment . g$661$12820) (remainder . g$661$20868) (modulo . g$661$20867) (inexact->exact . g$661$20866) (force . g$661$20865) (exact->inexact . g$661$20864) (string-fill! . g$661$20861) (string-set! . g$661$20860) (set-cdr! . g$661$20859) (set-car! . g$661$20858) (memv . g$661$20852) (memq . g$661$20851) (member . g$661$20849) (assv . g$661$20841) (assq . g$661$20840) (assoc . g$661$20838) (eval . g$661$12826) (zero? . g$661$20589) (vector? . g$661$20588) (vector-set! . g$661$20587) (vector-ref . g$661$20586) (vector-length . g$661$20584) (vector-fill! . g$661$20582) (vector->list . g$661$20581) (vector . g$661$20580) (values . g$661$20579) (truncate . g$661$20578) (tan . g$661$20577) (symbol? . g$661$20576) (symbol->string . g$661$20574) (substring . g$661$20573) (string? . g$661$20572) (string>? . g$661$20571) (string>=? . g$661$20570) (string=? . g$661$20569) (string<? . g$661$20568) (string<=? . g$661$20567) (string-ref . g$661$20566) (string-length . g$661$20565) (string-copy . g$661$20563) (string-append . g$661$20562) (string->symbol . g$661$20561) (string->number . g$661$20560) (string->list . g$661$20559) (string . g$661$20558) (sqrt . g$661$20557) (sin . g$661$20556) (round . g$661$20555) (reverse . g$661$20554) (real? . g$661$20553) (real-part . g$661$20551) (rationalize . g$661$20550) (rational? . g$661$20549) (procedure? . g$661$20547) (positive? . g$661$20546) (pair? . g$661$20545) (odd? . g$661$20544) (numerator . g$661$20543) (number? . g$661$20542) (number->string . g$661$20541) (not . g$661$20539) (negative? . g$661$20538) (min . g$661$20536) (max . g$661$20535) (map . g$661$20534) (make-vector . g$661$20533) (make-string . g$661$20532) (make-rectangular . g$661$20531) (make-polar . g$661$20530) (magnitude . g$661$20529) (log . g$661$20528) (list? . g$661$20527) (list-tail . g$661$20526) (list-ref . g$661$20525) (list->vector . g$661$20524) (list->string . g$661$20523) (list . g$661$20522) (length . g$661$20521) (lcm . g$661$20520) (integer? . g$661$20519) (integer->char . g$661$20517) (inexact? . g$661$20515) (imag-part . g$661$20513) (gcd . g$661$20512) (for-each . g$661$20511) (floor . g$661$20510) (expt . g$661$20508) (exp . g$661$20507) (exact? . g$661$20506) (even? . g$661$20503) (eqv? . g$661$20501) (equal? . g$661$20500) (eq? . g$661$20499) (dynamic-wind . g$661$20498) (denominator . g$661$20491) (cos . g$661$20490) (cons . g$661$20489) (complex? . g$661$20488) (char? . g$661$20487) (char>? . g$661$20486) (char>=? . g$661$20485) (char=? . g$661$20484) (char<? . g$661$20483) (char<=? . g$661$20482) (char->integer . g$661$20481) (ceiling . g$661$20480) (call-with-values . g$661$20479) (call-with-current-continuation . g$661$20477) (cddddr . g$661$20476) (cdddar . g$661$20475) (cddadr . g$661$20474) (cddaar . g$661$20473) (cdaddr . g$661$20472) (cdadar . g$661$20471) (cdaadr . g$661$20470) (cdaaar . g$661$20469) (cadddr . g$661$20468) (caddar . g$661$20467) (cadadr . g$661$20466) (cadaar . g$661$20465) (caaddr . g$661$20464) (caadar . g$661$20463) (caaadr . g$661$20462) (caaaar . g$661$20461) (cdddr . g$661$20460) (cddar . g$661$20459) (cdadr . g$661$20458) (cdaar . g$661$20457) (caddr . g$661$20456) (cadar . g$661$20455) (caadr . g$661$20454) (caaar . g$661$20453) (cddr . g$661$20452) (cdar . g$661$20451) (cadr . g$661$20450) (caar . g$661$20449) (cdr . g$661$20448) (car . g$661$20447) (boolean? . g$661$20446) (atan . g$661$20444) (asin . g$661$20442) (apply . g$661$20441) (append . g$661$20440) (angle . g$661$20439) (acos . g$661$20438) (abs . g$661$20437) (/ . g$661$20436) (* . g$661$20435) (- . g$661$20434) (+ . g$661$20433) (>= . g$661$20432) (> . g$661$20431) (= . g$661$20430) (<= . g$661$20429) (< . g$661$20428) (unquote-splicing . g$661$20422) (unquote . g$661$20421) (delay . g$661$20414) (or . g$661$20412) (and . g$661$20411) (do . g$661$20410) (cond . g$661$20409) (let* . g$661$20408) (let . g$661$20407) (quasiquote . g$661$20403) (syntax-rules . g$661$20402) (case . g$661$20398) (if . g$661$20394) (letrec . g$661$20392) (lambda . g$661$20389) (quote . g$661$20386) (letrec-syntax . g$661$20384) (let-syntax . g$661$20383) (set! . g$661$20382) (begin . g$661$20380) (define-syntax . g$661$20378) (define . g$661$20377))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21088) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$661$20379))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21089) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21090) (quote (rnrs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$661$21075) (string-titlecase . g$661$21074) (string-normalize-nfkd . g$661$21073) (string-normalize-nfkc . g$661$21072) (string-normalize-nfd . g$661$21071) (string-normalize-nfc . g$661$21070) (string-foldcase . g$661$21069) (string-downcase . g$661$21068) (string-ci>? . g$661$21067) (string-ci>=? . g$661$21066) (string-ci=? . g$661$21065) (string-ci<? . g$661$21064) (string-ci<=? . g$661$21063) (char-whitespace? . g$661$21062) (char-upper-case? . g$661$21061) (char-title-case? . g$661$21060) (char-numeric? . g$661$21059) (char-lower-case? . g$661$21058) (char-general-category . g$661$21057) (char-upcase . g$661$21056) (char-titlecase . g$661$21055) (char-foldcase . g$661$21054) (char-downcase . g$661$21053) (char-ci>? . g$661$21052) (char-ci>=? . g$661$21051) (char-ci=? . g$661$21050) (char-ci<? . g$661$21049) (char-ci<=? . g$661$21048) (char-alphabetic? . g$661$21047) (make-variable-transformer . g$661$12271) (identifier? . g$661$12848) (generate-temporaries . g$661$12840) (free-identifier=? . g$661$12842) (syntax->datum . g$661$12852) (datum->syntax . g$661$12850) (bound-identifier=? . g$661$12844) (record-type-descriptor? . g$661$21046) (record-predicate . g$661$21045) (record-mutator . g$661$21044) (record-constructor . g$661$21043) (record-accessor . g$661$21042) (make-record-type-descriptor . g$661$21041) (make-record-constructor-descriptor . g$661$21040) (record? . g$661$21039) (record-type-uid . g$661$21038) (record-type-sealed? . g$661$21037) (record-type-parent . g$661$21036) (record-type-opaque? . g$661$21035) (record-type-name . g$661$21034) (record-type-generative? . g$661$21033) (record-type-field-names . g$661$21032) (record-rtd . g$661$21031) (record-field-mutable? . g$661$21030) (nongenerative . g$661$21029) (sealed . g$661$21028) (record-type-descriptor . g$661$21027) (record-constructor-descriptor . g$661$21026) (protocol . g$661$21025) (parent-rtd . g$661$21024) (parent . g$661$21023) (opaque . g$661$21022) (mutable . g$661$21021) (immutable . g$661$21020) (fields . g$661$21019) (define-record-type . g$661$21018) (delete-file . g$661$21017) (file-exists? . g$661$21016) (vector-sort! . g$661$21015) (vector-sort . g$661$21014) (list-sort . g$661$21013) (symbol-hash . g$661$21012) (string-ci-hash . g$661$21011) (string-hash . g$661$21010) (equal-hash . g$661$21009) (hashtable-equivalence-function . g$661$21008) (make-hashtable . g$661$21007) (hashtable-hash-function . g$661$21006) (make-eqv-hashtable . g$661$21005) (make-eq-hashtable . g$661$21004) (hashtable? . g$661$21003) (hashtable-update! . g$661$21002) (hashtable-size . g$661$21001) (hashtable-set! . g$661$21000) (hashtable-ref . g$661$20999) (hashtable-mutable? . g$661$20998) (hashtable-keys . g$661$20997) (hashtable-entries . g$661$20996) (hashtable-delete! . g$661$20995) (hashtable-copy . g$661$20994) (hashtable-contains? . g$661$20993) (hashtable-clear! . g$661$20992) (call-with-output-file . g$661$20991) (call-with-input-file . g$661$20990) (write-char . g$661$20989) (write . g$661$20988) (with-output-to-file . g$661$20987) (with-input-from-file . g$661$20986) (read-char . g$661$20985) (read . g$661$20984) (peek-char . g$661$20983) (open-output-file . g$661$20982) (open-input-file . g$661$20981) (newline . g$661$20980) (display . g$661$20979) (close-output-port . g$661$20978) (close-input-port . g$661$20977) (eof-object? . g$661$20976) (eof-object . g$661$20975) (current-error-port . g$661$20974) (current-output-port . g$661$20973) (current-input-port . g$661$20972) (output-port? . g$661$20971) (input-port? . g$661$20970) (utf-8-codec . g$661$20969) (utf-16-codec . g$661$20968) (transcoder-error-handling-mode . g$661$20967) (transcoder-eol-style . g$661$20966) (transcoder-codec . g$661$20965) (transcoded-port . g$661$20964) (textual-port? . g$661$20963) (string->bytevector . g$661$20962) (standard-output-port . g$661$20961) (standard-input-port . g$661$20960) (standard-error-port . g$661$20959) (set-port-position! . g$661$20958) (put-u8 . g$661$20957) (put-string . g$661$20956) (put-datum . g$661$20955) (put-char . g$661$20954) (put-bytevector . g$661$20953) (port? . g$661$20952) (port-transcoder . g$661$20951) (port-position . g$661$20950) (port-has-set-port-position!? . g$661$20949) (port-has-port-position? . g$661$20948) (port-eof? . g$661$20947) (output-port-buffer-mode . g$661$20946) (open-string-output-port . g$661$20945) (open-string-input-port . g$661$20944) (open-file-output-port . g$661$20943) (open-file-input/output-port . g$661$20942) (open-file-input-port . g$661$20941) (open-bytevector-output-port . g$661$20940) (open-bytevector-input-port . g$661$20939) (native-transcoder . g$661$20938) (native-eol-style . g$661$20937) (make-transcoder . g$661$20936) (latin-1-codec . g$661$20935) (make-i/o-write-error . g$661$20934) (make-i/o-read-error . g$661$20933) (make-i/o-port-error . g$661$20932) (make-i/o-invalid-position-error . g$661$20931) (make-i/o-filename-error . g$661$20930) (make-i/o-file-protection-error . g$661$20929) (make-i/o-file-is-read-only-error . g$661$20928) (make-i/o-file-does-not-exist-error . g$661$20927) (make-i/o-file-already-exists-error . g$661$20926) (make-i/o-error . g$661$20925) (make-i/o-encoding-error . g$661$20924) (make-i/o-decoding-error . g$661$20923) (make-custom-textual-output-port . g$661$20922) (make-custom-textual-input/output-port . g$661$20921) (make-custom-textual-input-port . g$661$20920) (make-custom-binary-output-port . g$661$20919) (make-custom-binary-input/output-port . g$661$20918) (make-custom-binary-input-port . g$661$20917) (make-bytevector . g$661$20916) (lookahead-u8 . g$661$20915) (lookahead-char . g$661$20914) (i/o-write-error? . g$661$20913) (&i/o-write . g$661$20912) (i/o-read-error? . g$661$20911) (&i/o-read . g$661$20910) (i/o-port-error? . g$661$20909) (&i/o-port . g$661$20908) (i/o-invalid-position-error? . g$661$20907) (&i/o-invalid-position . g$661$20906) (i/o-filename-error? . g$661$20905) (&i/o-filename . g$661$20904) (i/o-file-protection-error? . g$661$20903) (&i/o-file-protection . g$661$20902) (i/o-file-is-read-only-error? . g$661$20901) (&i/o-file-is-read-only . g$661$20900) (i/o-file-does-not-exist-error? . g$661$20899) (&i/o-file-does-not-exist . g$661$20898) (i/o-file-already-exists-error? . g$661$20897) (&i/o-file-already-exists . g$661$20896) (i/o-error? . g$661$20895) (i/o-error-port . g$661$20894) (i/o-error-filename . g$661$20893) (i/o-encoding-error? . g$661$20892) (i/o-encoding-error-char . g$661$20891) (&i/o-encoding . g$661$20890) (i/o-decoding-error? . g$661$20889) (&i/o-decoding . g$661$20888) (&i/o . g$661$20887) (get-u8 . g$661$20886) (get-string-n! . g$661$20885) (get-string-n . g$661$20884) (get-string-all . g$661$20883) (get-line . g$661$20882) (get-datum . g$661$20881) (get-char . g$661$20880) (get-bytevector-some . g$661$20879) (get-bytevector-n! . g$661$20878) (get-bytevector-n . g$661$20877) (get-bytevector-all . g$661$20876) (flush-output-port . g$661$20875) (file-options . g$661$20874) (error-handling-mode . g$661$20873) (eol-style . g$661$20872) (close-port . g$661$20871) (exit . g$661$20863) (command-line . g$661$20862) (remove . g$661$20857) (remv . g$661$20856) (remp . g$661$20855) (remq . g$661$20854) (partition . g$661$20853) (memv . g$661$20852) (memq . g$661$20851) (memp . g$661$20850) (member . g$661$20849) (exists . g$661$20848) (for-all . g$661$20847) (fold-right . g$661$20846) (fold-left . g$661$20845) (find . g$661$20844) (filter . g$661$20843) (cons* . g$661$20842) (assv . g$661$20841) (assq . g$661$20840) (assp . g$661$20839) (assoc . g$661$20838) (call-with-string-output-port . g$661$20837) (call-with-port . g$661$20836) (call-with-bytevector-output-port . g$661$20835) (bytevector->string . g$661$20834) (buffer-mode? . g$661$20833) (buffer-mode . g$661$20832) (binary-port? . g$661$20831) (guard . g$661$20830) (with-exception-handler . g$661$20829) (raise-continuable . g$661$20828) (raise . g$661$20827) (make-enumeration . g$661$20826) (enum-set=? . g$661$20825) (enum-set-universe . g$661$20824) (enum-set-union . g$661$20823) (enum-set-subset? . g$661$20822) (enum-set-projection . g$661$20821) (enum-set-member? . g$661$20820) (enum-set-intersection . g$661$20819) (enum-set-indexer . g$661$20818) (enum-set-difference . g$661$20817) (enum-set-constructor . g$661$20816) (enum-set-complement . g$661$20815) (enum-set->list . g$661$20814) (define-enumeration . g$661$20813) (who-condition? . g$661$20812) (&who . g$661$20811) (warning? . g$661$20810) (&warning . g$661$20809) (violation? . g$661$20808) (&violation . g$661$20807) (undefined-violation? . g$661$20806) (&undefined . g$661$20805) (syntax-violation? . g$661$20804) (syntax-violation-subform . g$661$20803) (syntax-violation-form . g$661$20802) (syntax-violation . g$661$20801) (&syntax . g$661$20800) (simple-conditions . g$661$20799) (serious-condition? . g$661$20798) (&serious . g$661$20797) (non-continuable-violation? . g$661$20796) (&non-continuable . g$661$20795) (message-condition? . g$661$20794) (&message . g$661$20793) (make-who-condition . g$661$20792) (make-warning . g$661$20791) (make-violation . g$661$20790) (make-undefined-violation . g$661$20789) (make-syntax-violation . g$661$20788) (make-serious-condition . g$661$20787) (make-non-continuable-violation . g$661$20786) (make-message-condition . g$661$20785) (make-lexical-violation . g$661$20784) (make-irritants-condition . g$661$20783) (make-implementation-restriction-violation . g$661$20782) (make-error . g$661$20781) (make-assertion-violation . g$661$20780) (lexical-violation? . g$661$20779) (&lexical . g$661$20778) (irritants-condition? . g$661$20777) (&irritants . g$661$20776) (implementation-restriction-violation? . g$661$20775) (&implementation-restriction . g$661$20774) (error? . g$661$20773) (&error . g$661$20772) (define-condition-type . g$661$20771) (condition-who . g$661$20770) (condition-predicate . g$661$20769) (condition-message . g$661$20768) (condition-irritants . g$661$20767) (condition-accessor . g$661$20766) (condition . g$661$20765) (&condition . g$661$20764) (assertion-violation? . g$661$20763) (&assertion . g$661$20762) (condition? . g$661$20761) (utf32->string . g$661$20760) (utf16->string . g$661$20759) (utf8->string . g$661$20758) (uint-list->bytevector . g$661$20757) (u8-list->bytevector . g$661$20756) (string->utf8 . g$661$20755) (string->utf32 . g$661$20754) (string->utf16 . g$661$20753) (sint-list->bytevector . g$661$20752) (native-endianness . g$661$20751) (bytevector? . g$661$20750) (bytevector=? . g$661$20749) (bytevector-uint-set! . g$661$20748) (bytevector-uint-ref . g$661$20747) (bytevector-u8-set! . g$661$20746) (bytevector-u8-ref . g$661$20745) (bytevector-u64-set! . g$661$20744) (bytevector-u64-ref . g$661$20743) (bytevector-u64-native-set! . g$661$20742) (bytevector-u64-native-ref . g$661$20741) (bytevector-u32-set! . g$661$20740) (bytevector-u32-ref . g$661$20739) (bytevector-u32-native-set! . g$661$20738) (bytevector-u32-native-ref . g$661$20737) (bytevector-u16-set! . g$661$20736) (bytevector-u16-ref . g$661$20735) (bytevector-u16-native-set! . g$661$20734) (bytevector-u16-native-ref . g$661$20733) (bytevector-sint-set! . g$661$20732) (bytevector-sint-ref . g$661$20731) (bytevector-s8-set! . g$661$20730) (bytevector-s8-ref . g$661$20729) (bytevector-s64-set! . g$661$20728) (bytevector-s64-ref . g$661$20727) (bytevector-s64-native-set! . g$661$20726) (bytevector-s64-native-ref . g$661$20725) (bytevector-s32-set! . g$661$20724) (bytevector-s32-ref . g$661$20723) (bytevector-s32-native-set! . g$661$20722) (bytevector-s32-native-ref . g$661$20721) (bytevector-s16-set! . g$661$20720) (bytevector-s16-ref . g$661$20719) (bytevector-s16-native-set! . g$661$20718) (bytevector-s16-native-ref . g$661$20717) (bytevector-length . g$661$20716) (bytevector-ieee-single-ref . g$661$20715) (bytevector-ieee-single-native-set! . g$661$20714) (bytevector-ieee-single-native-ref . g$661$20713) (bytevector-ieee-double-ref . g$661$20712) (bytevector-ieee-double-native-set! . g$661$20711) (bytevector-ieee-double-native-ref . g$661$20710) (bytevector-fill! . g$661$20709) (bytevector-copy! . g$661$20708) (bytevector-copy . g$661$20707) (bytevector->uint-list . g$661$20706) (bytevector->u8-list . g$661$20705) (bytevector->sint-list . g$661$20704) (no-nans-violation? . g$661$20703) (&no-nans . g$661$20702) (no-infinities-violation? . g$661$20701) (&no-infinities . g$661$20700) (make-no-nans-violation . g$661$20699) (make-no-infinities-violation . g$661$20698) (real->flonum . g$661$20697) (flzero? . g$661$20696) (fltruncate . g$661$20695) (fltan . g$661$20694) (flsqrt . g$661$20693) (flsin . g$661$20692) (flround . g$661$20691) (flpositive? . g$661$20690) (flonum? . g$661$20689) (flodd? . g$661$20688) (flnumerator . g$661$20687) (flnegative? . g$661$20686) (flnan? . g$661$20685) (flmod0 . g$661$20684) (flmod . g$661$20683) (flmin . g$661$20682) (flmax . g$661$20681) (fllog . g$661$20680) (flinteger? . g$661$20679) (flinfinite? . g$661$20678) (flfloor . g$661$20677) (flfinite? . g$661$20676) (flexpt . g$661$20675) (flexp . g$661$20674) (fleven? . g$661$20673) (fldiv0-and-mod0 . g$661$20672) (fldiv0 . g$661$20671) (fldiv-and-mod . g$661$20670) (fldiv . g$661$20669) (fldenominator . g$661$20668) (flcos . g$661$20667) (flceiling . g$661$20666) (flatan . g$661$20665) (flasin . g$661$20664) (flacos . g$661$20663) (flabs . g$661$20662) (fl>? . g$661$20661) (fl>=? . g$661$20660) (fl=? . g$661$20659) (fl<? . g$661$20658) (fl<=? . g$661$20657) (fl/ . g$661$20656) (fl- . g$661$20655) (fl+ . g$661$20654) (fl* . g$661$20653) (fixnum->flonum . g$661$20652) (fxzero? . g$661$20651) (fxxor . g$661$20650) (fxrotate-bit-field . g$661$20649) (fxreverse-bit-field . g$661$20648) (fxpositive? . g$661$20647) (fxodd? . g$661$20646) (fxnot . g$661$20645) (fxnegative? . g$661$20644) (fxmod0 . g$661$20643) (fxmod . g$661$20642) (fxmin . g$661$20641) (fxmax . g$661$20640) (fxlength . g$661$20639) (fxior . g$661$20638) (fxif . g$661$20637) (fxfirst-bit-set . g$661$20636) (fxeven? . g$661$20635) (fxdiv0-and-mod0 . g$661$20634) (fxdiv0 . g$661$20633) (fxdiv-and-mod . g$661$20632) (fxdiv . g$661$20631) (fxcopy-bit-field . g$661$20630) (fxcopy-bit . g$661$20629) (fxbit-set? . g$661$20628) (fxbit-field . g$661$20627) (fxbit-count . g$661$20626) (fxarithmetic-shift-right . g$661$20625) (fxarithmetic-shift-left . g$661$20624) (fxarithmetic-shift . g$661$20623) (fxand . g$661$20622) (fx>? . g$661$20621) (fx>=? . g$661$20620) (fx=? . g$661$20619) (fx<? . g$661$20618) (fx<=? . g$661$20617) (fx-/carry . g$661$20616) (fx- . g$661$20615) (fx+/carry . g$661$20614) (fx+ . g$661$20613) (fx*/carry . g$661$20612) (fx* . g$661$20611) (greatest-fixnum . g$661$20610) (least-fixnum . g$661$20609) (fixnum-width . g$661$20608) (fixnum? . g$661$20607) (bitwise-rotate-bit-field . g$661$20606) (bitwise-reverse-bit-field . g$661$20605) (bitwise-length . g$661$20604) (bitwise-if . g$661$20603) (bitwise-first-bit-set . g$661$20602) (bitwise-copy-bit-field . g$661$20601) (bitwise-copy-bit . g$661$20600) (bitwise-bit-set? . g$661$20599) (bitwise-bit-field . g$661$20598) (bitwise-bit-count . g$661$20597) (bitwise-xor . g$661$20596) (bitwise-ior . g$661$20595) (bitwise-and . g$661$20594) (bitwise-not . g$661$20593) (bitwise-arithmetic-shift-right . g$661$20592) (bitwise-arithmetic-shift-left . g$661$20591) (bitwise-arithmetic-shift . g$661$20590) (zero? . g$661$20589) (vector? . g$661$20588) (vector-set! . g$661$20587) (vector-ref . g$661$20586) (vector-map . g$661$20585) (vector-length . g$661$20584) (vector-for-each . g$661$20583) (vector-fill! . g$661$20582) (vector->list . g$661$20581) (vector . g$661$20580) (values . g$661$20579) (truncate . g$661$20578) (tan . g$661$20577) (symbol? . g$661$20576) (symbol=? . g$661$20575) (symbol->string . g$661$20574) (substring . g$661$20573) (string? . g$661$20572) (string>? . g$661$20571) (string>=? . g$661$20570) (string=? . g$661$20569) (string<? . g$661$20568) (string<=? . g$661$20567) (string-ref . g$661$20566) (string-length . g$661$20565) (string-for-each . g$661$20564) (string-copy . g$661$20563) (string-append . g$661$20562) (string->symbol . g$661$20561) (string->number . g$661$20560) (string->list . g$661$20559) (string . g$661$20558) (sqrt . g$661$20557) (sin . g$661$20556) (round . g$661$20555) (reverse . g$661$20554) (real? . g$661$20553) (real-valued? . g$661$20552) (real-part . g$661$20551) (rationalize . g$661$20550) (rational? . g$661$20549) (rational-valued? . g$661$20548) (procedure? . g$661$20547) (positive? . g$661$20546) (pair? . g$661$20545) (odd? . g$661$20544) (numerator . g$661$20543) (number? . g$661$20542) (number->string . g$661$20541) (null? . g$661$20540) (not . g$661$20539) (negative? . g$661$20538) (nan? . g$661$20537) (min . g$661$20536) (max . g$661$20535) (map . g$661$20534) (make-vector . g$661$20533) (make-string . g$661$20532) (make-rectangular . g$661$20531) (make-polar . g$661$20530) (magnitude . g$661$20529) (log . g$661$20528) (list? . g$661$20527) (list-tail . g$661$20526) (list-ref . g$661$20525) (list->vector . g$661$20524) (list->string . g$661$20523) (list . g$661$20522) (length . g$661$20521) (lcm . g$661$20520) (integer? . g$661$20519) (integer-valued? . g$661$20518) (integer->char . g$661$20517) (infinite? . g$661$20516) (inexact? . g$661$20515) (inexact . g$661$20514) (imag-part . g$661$20513) (gcd . g$661$20512) (for-each . g$661$20511) (floor . g$661$20510) (finite? . g$661$20509) (expt . g$661$20508) (exp . g$661$20507) (exact? . g$661$20506) (exact-integer-sqrt . g$661$20505) (exact . g$661$20504) (even? . g$661$20503) (error . g$661$20502) (eqv? . g$661$20501) (equal? . g$661$20500) (eq? . g$661$20499) (dynamic-wind . g$661$20498) (div0-and-mod0 . g$661$20497) (mod0 . g$661$20496) (div0 . g$661$20495) (div-and-mod . g$661$20494) (mod . g$661$20493) (div . g$661$20492) (denominator . g$661$20491) (cos . g$661$20490) (cons . g$661$20489) (complex? . g$661$20488) (char? . g$661$20487) (char>? . g$661$20486) (char>=? . g$661$20485) (char=? . g$661$20484) (char<? . g$661$20483) (char<=? . g$661$20482) (char->integer . g$661$20481) (ceiling . g$661$20480) (call-with-values . g$661$20479) (call/cc . g$661$20478) (call-with-current-continuation . g$661$20477) (cddddr . g$661$20476) (cdddar . g$661$20475) (cddadr . g$661$20474) (cddaar . g$661$20473) (cdaddr . g$661$20472) (cdadar . g$661$20471) (cdaadr . g$661$20470) (cdaaar . g$661$20469) (cadddr . g$661$20468) (caddar . g$661$20467) (cadadr . g$661$20466) (cadaar . g$661$20465) (caaddr . g$661$20464) (caadar . g$661$20463) (caaadr . g$661$20462) (caaaar . g$661$20461) (cdddr . g$661$20460) (cddar . g$661$20459) (cdadr . g$661$20458) (cdaar . g$661$20457) (caddr . g$661$20456) (cadar . g$661$20455) (caadr . g$661$20454) (caaar . g$661$20453) (cddr . g$661$20452) (cdar . g$661$20451) (cadr . g$661$20450) (caar . g$661$20449) (cdr . g$661$20448) (car . g$661$20447) (boolean? . g$661$20446) (boolean=? . g$661$20445) (atan . g$661$20444) (assertion-violation . g$661$20443) (asin . g$661$20442) (apply . g$661$20441) (append . g$661$20440) (angle . g$661$20439) (acos . g$661$20438) (abs . g$661$20437) (/ . g$661$20436) (* . g$661$20435) (- . g$661$20434) (+ . g$661$20433) (>= . g$661$20432) (> . g$661$20431) (= . g$661$20430) (<= . g$661$20429) (< . g$661$20428) (let*-values . g$661$20427) (unsyntax-splicing . g$661$20424) (unsyntax . g$661$20423) (unquote-splicing . g$661$20422) (unquote . g$661$20421) (_ . g$661$20420) (else . g$661$20419) (=> . g$661$20418) (... . g$661$20417) (assert . g$661$20416) (endianness . g$661$20415) (or . g$661$20412) (and . g$661$20411) (do . g$661$20410) (cond . g$661$20409) (let* . g$661$20408) (let . g$661$20407) (identifier-syntax . g$661$20406) (with-syntax . g$661$20405) (quasisyntax . g$661$20404) (quasiquote . g$661$20403) (syntax-rules . g$661$20402) (let-values . g$661$20399) (case . g$661$20398) (unless . g$661$20396) (when . g$661$20395) (if . g$661$20394) (letrec* . g$661$20393) (letrec . g$661$20392) (case-lambda . g$661$20390) (lambda . g$661$20389) (syntax . g$661$20388) (syntax-case . g$661$20387) (quote . g$661$20386) (letrec-syntax . g$661$20384) (let-syntax . g$661$20383) (set! . g$661$20382) (begin . g$661$20380) (define-syntax . g$661$20378) (define . g$661$20377))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21091) (quote (rnrs r5rs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$661$20870) (quotient . g$661$20869) (null-environment . g$661$12820) (remainder . g$661$20868) (modulo . g$661$20867) (inexact->exact . g$661$20866) (force . g$661$20865) (exact->inexact . g$661$20864) (delay . g$661$20414))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21092) (quote (rnrs control)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((do . g$661$20410) (unless . g$661$20396) (when . g$661$20395) (case-lambda . g$661$20390))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21093) (quote (rnrs eval)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eval . g$661$12826) (environment . g$661$12818))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21094) (quote (rnrs mutable-pairs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$661$20859) (set-car! . g$661$20858))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21095) (quote (rnrs mutable-strings)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$661$20861) (string-set! . g$661$20860))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21096) (quote (rnrs programs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((exit . g$661$20863) (command-line . g$661$20862))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21097) (quote (rnrs syntax-case)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$661$12271) (identifier? . g$661$12848) (generate-temporaries . g$661$12840) (free-identifier=? . g$661$12842) (syntax->datum . g$661$12852) (datum->syntax . g$661$12850) (bound-identifier=? . g$661$12844) (syntax-violation . g$661$20801) (unsyntax-splicing . g$661$20424) (unsyntax . g$661$20423) (_ . g$661$20420) (... . g$661$20417) (with-syntax . g$661$20405) (quasisyntax . g$661$20404) (syntax . g$661$20388) (syntax-case . g$661$20387))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21098) (quote (rnrs files)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$661$21017) (file-exists? . g$661$21016) (make-i/o-write-error . g$661$20934) (make-i/o-read-error . g$661$20933) (make-i/o-port-error . g$661$20932) (make-i/o-invalid-position-error . g$661$20931) (make-i/o-filename-error . g$661$20930) (make-i/o-file-protection-error . g$661$20929) (make-i/o-file-is-read-only-error . g$661$20928) (make-i/o-file-does-not-exist-error . g$661$20927) (make-i/o-file-already-exists-error . g$661$20926) (make-i/o-error . g$661$20925) (i/o-write-error? . g$661$20913) (&i/o-write . g$661$20912) (i/o-read-error? . g$661$20911) (&i/o-read . g$661$20910) (i/o-port-error? . g$661$20909) (&i/o-port . g$661$20908) (i/o-invalid-position-error? . g$661$20907) (&i/o-invalid-position . g$661$20906) (i/o-filename-error? . g$661$20905) (&i/o-filename . g$661$20904) (i/o-file-protection-error? . g$661$20903) (&i/o-file-protection . g$661$20902) (i/o-file-is-read-only-error? . g$661$20901) (&i/o-file-is-read-only . g$661$20900) (i/o-file-does-not-exist-error? . g$661$20899) (&i/o-file-does-not-exist . g$661$20898) (i/o-file-already-exists-error? . g$661$20897) (&i/o-file-already-exists . g$661$20896) (i/o-error? . g$661$20895) (i/o-error-port . g$661$20894) (i/o-error-filename . g$661$20893) (&i/o . g$661$20887))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21099) (quote (rnrs sorting)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$661$21015) (vector-sort . g$661$21014) (list-sort . g$661$21013))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21100) (quote (rnrs base)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$661$20589) (vector? . g$661$20588) (vector-set! . g$661$20587) (vector-ref . g$661$20586) (vector-map . g$661$20585) (vector-length . g$661$20584) (vector-for-each . g$661$20583) (vector-fill! . g$661$20582) (vector->list . g$661$20581) (vector . g$661$20580) (values . g$661$20579) (truncate . g$661$20578) (tan . g$661$20577) (symbol? . g$661$20576) (symbol=? . g$661$20575) (symbol->string . g$661$20574) (substring . g$661$20573) (string? . g$661$20572) (string>? . g$661$20571) (string>=? . g$661$20570) (string=? . g$661$20569) (string<? . g$661$20568) (string<=? . g$661$20567) (string-ref . g$661$20566) (string-length . g$661$20565) (string-for-each . g$661$20564) (string-copy . g$661$20563) (string-append . g$661$20562) (string->symbol . g$661$20561) (string->number . g$661$20560) (string->list . g$661$20559) (string . g$661$20558) (sqrt . g$661$20557) (sin . g$661$20556) (round . g$661$20555) (reverse . g$661$20554) (real? . g$661$20553) (real-valued? . g$661$20552) (real-part . g$661$20551) (rationalize . g$661$20550) (rational? . g$661$20549) (rational-valued? . g$661$20548) (procedure? . g$661$20547) (positive? . g$661$20546) (pair? . g$661$20545) (odd? . g$661$20544) (numerator . g$661$20543) (number? . g$661$20542) (number->string . g$661$20541) (null? . g$661$20540) (not . g$661$20539) (negative? . g$661$20538) (nan? . g$661$20537) (min . g$661$20536) (max . g$661$20535) (map . g$661$20534) (make-vector . g$661$20533) (make-string . g$661$20532) (make-rectangular . g$661$20531) (make-polar . g$661$20530) (magnitude . g$661$20529) (log . g$661$20528) (list? . g$661$20527) (list-tail . g$661$20526) (list-ref . g$661$20525) (list->vector . g$661$20524) (list->string . g$661$20523) (list . g$661$20522) (length . g$661$20521) (lcm . g$661$20520) (integer? . g$661$20519) (integer-valued? . g$661$20518) (integer->char . g$661$20517) (infinite? . g$661$20516) (inexact? . g$661$20515) (inexact . g$661$20514) (imag-part . g$661$20513) (gcd . g$661$20512) (for-each . g$661$20511) (floor . g$661$20510) (finite? . g$661$20509) (expt . g$661$20508) (exp . g$661$20507) (exact? . g$661$20506) (exact-integer-sqrt . g$661$20505) (exact . g$661$20504) (even? . g$661$20503) (error . g$661$20502) (eqv? . g$661$20501) (equal? . g$661$20500) (eq? . g$661$20499) (dynamic-wind . g$661$20498) (div0-and-mod0 . g$661$20497) (mod0 . g$661$20496) (div0 . g$661$20495) (div-and-mod . g$661$20494) (mod . g$661$20493) (div . g$661$20492) (denominator . g$661$20491) (cos . g$661$20490) (cons . g$661$20489) (complex? . g$661$20488) (char? . g$661$20487) (char>? . g$661$20486) (char>=? . g$661$20485) (char=? . g$661$20484) (char<? . g$661$20483) (char<=? . g$661$20482) (char->integer . g$661$20481) (ceiling . g$661$20480) (call-with-values . g$661$20479) (call/cc . g$661$20478) (call-with-current-continuation . g$661$20477) (cddddr . g$661$20476) (cdddar . g$661$20475) (cddadr . g$661$20474) (cddaar . g$661$20473) (cdaddr . g$661$20472) (cdadar . g$661$20471) (cdaadr . g$661$20470) (cdaaar . g$661$20469) (cadddr . g$661$20468) (caddar . g$661$20467) (cadadr . g$661$20466) (cadaar . g$661$20465) (caaddr . g$661$20464) (caadar . g$661$20463) (caaadr . g$661$20462) (caaaar . g$661$20461) (cdddr . g$661$20460) (cddar . g$661$20459) (cdadr . g$661$20458) (cdaar . g$661$20457) (caddr . g$661$20456) (cadar . g$661$20455) (caadr . g$661$20454) (caaar . g$661$20453) (cddr . g$661$20452) (cdar . g$661$20451) (cadr . g$661$20450) (caar . g$661$20449) (cdr . g$661$20448) (car . g$661$20447) (boolean? . g$661$20446) (boolean=? . g$661$20445) (atan . g$661$20444) (assertion-violation . g$661$20443) (asin . g$661$20442) (apply . g$661$20441) (append . g$661$20440) (angle . g$661$20439) (acos . g$661$20438) (abs . g$661$20437) (/ . g$661$20436) (* . g$661$20435) (- . g$661$20434) (+ . g$661$20433) (>= . g$661$20432) (> . g$661$20431) (= . g$661$20430) (<= . g$661$20429) (< . g$661$20428) (let*-values . g$661$20427) (unquote-splicing . g$661$20422) (unquote . g$661$20421) (_ . g$661$20420) (else . g$661$20419) (=> . g$661$20418) (... . g$661$20417) (assert . g$661$20416) (or . g$661$20412) (and . g$661$20411) (cond . g$661$20409) (let* . g$661$20408) (let . g$661$20407) (identifier-syntax . g$661$20406) (quasiquote . g$661$20403) (syntax-rules . g$661$20402) (let-values . g$661$20399) (case . g$661$20398) (if . g$661$20394) (letrec* . g$661$20393) (letrec . g$661$20392) (lambda . g$661$20389) (quote . g$661$20386) (letrec-syntax . g$661$20384) (let-syntax . g$661$20383) (set! . g$661$20382) (begin . g$661$20380) (define-syntax . g$661$20378) (define . g$661$20377))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21101) (quote (rnrs lists)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((remove . g$661$20857) (remv . g$661$20856) (remp . g$661$20855) (remq . g$661$20854) (partition . g$661$20853) (memv . g$661$20852) (memq . g$661$20851) (memp . g$661$20850) (member . g$661$20849) (exists . g$661$20848) (for-all . g$661$20847) (fold-right . g$661$20846) (fold-left . g$661$20845) (find . g$661$20844) (filter . g$661$20843) (cons* . g$661$20842) (assv . g$661$20841) (assq . g$661$20840) (assp . g$661$20839) (assoc . g$661$20838))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21102) (quote (rnrs io simple)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$661$20991) (call-with-input-file . g$661$20990) (write-char . g$661$20989) (write . g$661$20988) (with-output-to-file . g$661$20987) (with-input-from-file . g$661$20986) (read-char . g$661$20985) (read . g$661$20984) (peek-char . g$661$20983) (open-output-file . g$661$20982) (open-input-file . g$661$20981) (newline . g$661$20980) (display . g$661$20979) (close-output-port . g$661$20978) (close-input-port . g$661$20977) (eof-object? . g$661$20976) (eof-object . g$661$20975) (current-error-port . g$661$20974) (current-output-port . g$661$20973) (current-input-port . g$661$20972) (output-port? . g$661$20971) (input-port? . g$661$20970) (make-i/o-write-error . g$661$20934) (make-i/o-read-error . g$661$20933) (make-i/o-port-error . g$661$20932) (make-i/o-invalid-position-error . g$661$20931) (make-i/o-filename-error . g$661$20930) (make-i/o-file-protection-error . g$661$20929) (make-i/o-file-is-read-only-error . g$661$20928) (make-i/o-file-does-not-exist-error . g$661$20927) (make-i/o-file-already-exists-error . g$661$20926) (make-i/o-error . g$661$20925) (i/o-write-error? . g$661$20913) (&i/o-write . g$661$20912) (i/o-read-error? . g$661$20911) (&i/o-read . g$661$20910) (i/o-port-error? . g$661$20909) (&i/o-port . g$661$20908) (i/o-invalid-position-error? . g$661$20907) (&i/o-invalid-position . g$661$20906) (i/o-filename-error? . g$661$20905) (&i/o-filename . g$661$20904) (i/o-file-protection-error? . g$661$20903) (&i/o-file-protection . g$661$20902) (i/o-file-is-read-only-error? . g$661$20901) (&i/o-file-is-read-only . g$661$20900) (i/o-file-does-not-exist-error? . g$661$20899) (&i/o-file-does-not-exist . g$661$20898) (i/o-file-already-exists-error? . g$661$20897) (&i/o-file-already-exists . g$661$20896) (i/o-error? . g$661$20895) (i/o-error-port . g$661$20894) (i/o-error-filename . g$661$20893) (&i/o . g$661$20887))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21103) (quote (rnrs bytevectors)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$661$20916) (utf32->string . g$661$20760) (utf16->string . g$661$20759) (utf8->string . g$661$20758) (uint-list->bytevector . g$661$20757) (u8-list->bytevector . g$661$20756) (string->utf8 . g$661$20755) (string->utf32 . g$661$20754) (string->utf16 . g$661$20753) (sint-list->bytevector . g$661$20752) (native-endianness . g$661$20751) (bytevector? . g$661$20750) (bytevector=? . g$661$20749) (bytevector-uint-set! . g$661$20748) (bytevector-uint-ref . g$661$20747) (bytevector-u8-set! . g$661$20746) (bytevector-u8-ref . g$661$20745) (bytevector-u64-set! . g$661$20744) (bytevector-u64-ref . g$661$20743) (bytevector-u64-native-set! . g$661$20742) (bytevector-u64-native-ref . g$661$20741) (bytevector-u32-set! . g$661$20740) (bytevector-u32-ref . g$661$20739) (bytevector-u32-native-set! . g$661$20738) (bytevector-u32-native-ref . g$661$20737) (bytevector-u16-set! . g$661$20736) (bytevector-u16-ref . g$661$20735) (bytevector-u16-native-set! . g$661$20734) (bytevector-u16-native-ref . g$661$20733) (bytevector-sint-set! . g$661$20732) (bytevector-sint-ref . g$661$20731) (bytevector-s8-set! . g$661$20730) (bytevector-s8-ref . g$661$20729) (bytevector-s64-set! . g$661$20728) (bytevector-s64-ref . g$661$20727) (bytevector-s64-native-set! . g$661$20726) (bytevector-s64-native-ref . g$661$20725) (bytevector-s32-set! . g$661$20724) (bytevector-s32-ref . g$661$20723) (bytevector-s32-native-set! . g$661$20722) (bytevector-s32-native-ref . g$661$20721) (bytevector-s16-set! . g$661$20720) (bytevector-s16-ref . g$661$20719) (bytevector-s16-native-set! . g$661$20718) (bytevector-s16-native-ref . g$661$20717) (bytevector-length . g$661$20716) (bytevector-ieee-single-ref . g$661$20715) (bytevector-ieee-single-native-set! . g$661$20714) (bytevector-ieee-single-native-ref . g$661$20713) (bytevector-ieee-double-ref . g$661$20712) (bytevector-ieee-double-native-set! . g$661$20711) (bytevector-ieee-double-native-ref . g$661$20710) (bytevector-fill! . g$661$20709) (bytevector-copy! . g$661$20708) (bytevector-copy . g$661$20707) (bytevector->uint-list . g$661$20706) (bytevector->u8-list . g$661$20705) (bytevector->sint-list . g$661$20704) (endianness . g$661$20415))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21104) (quote (rnrs unicode)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$661$21075) (string-titlecase . g$661$21074) (string-normalize-nfkd . g$661$21073) (string-normalize-nfkc . g$661$21072) (string-normalize-nfd . g$661$21071) (string-normalize-nfc . g$661$21070) (string-foldcase . g$661$21069) (string-downcase . g$661$21068) (string-ci>? . g$661$21067) (string-ci>=? . g$661$21066) (string-ci=? . g$661$21065) (string-ci<? . g$661$21064) (string-ci<=? . g$661$21063) (char-whitespace? . g$661$21062) (char-upper-case? . g$661$21061) (char-title-case? . g$661$21060) (char-numeric? . g$661$21059) (char-lower-case? . g$661$21058) (char-general-category . g$661$21057) (char-upcase . g$661$21056) (char-titlecase . g$661$21055) (char-foldcase . g$661$21054) (char-downcase . g$661$21053) (char-ci>? . g$661$21052) (char-ci>=? . g$661$21051) (char-ci=? . g$661$21050) (char-ci<? . g$661$21049) (char-ci<=? . g$661$21048) (char-alphabetic? . g$661$21047))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21105) (quote (rnrs exceptions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((guard . g$661$20830) (with-exception-handler . g$661$20829) (raise-continuable . g$661$20828) (raise . g$661$20827) (else . g$661$20419) (=> . g$661$20418))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21106) (quote (rnrs arithmetic bitwise)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$661$20606) (bitwise-reverse-bit-field . g$661$20605) (bitwise-length . g$661$20604) (bitwise-if . g$661$20603) (bitwise-first-bit-set . g$661$20602) (bitwise-copy-bit-field . g$661$20601) (bitwise-copy-bit . g$661$20600) (bitwise-bit-set? . g$661$20599) (bitwise-bit-field . g$661$20598) (bitwise-bit-count . g$661$20597) (bitwise-xor . g$661$20596) (bitwise-ior . g$661$20595) (bitwise-and . g$661$20594) (bitwise-not . g$661$20593) (bitwise-arithmetic-shift-right . g$661$20592) (bitwise-arithmetic-shift-left . g$661$20591) (bitwise-arithmetic-shift . g$661$20590))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21107) (quote (rnrs arithmetic fixnums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$661$20651) (fxxor . g$661$20650) (fxrotate-bit-field . g$661$20649) (fxreverse-bit-field . g$661$20648) (fxpositive? . g$661$20647) (fxodd? . g$661$20646) (fxnot . g$661$20645) (fxnegative? . g$661$20644) (fxmod0 . g$661$20643) (fxmod . g$661$20642) (fxmin . g$661$20641) (fxmax . g$661$20640) (fxlength . g$661$20639) (fxior . g$661$20638) (fxif . g$661$20637) (fxfirst-bit-set . g$661$20636) (fxeven? . g$661$20635) (fxdiv0-and-mod0 . g$661$20634) (fxdiv0 . g$661$20633) (fxdiv-and-mod . g$661$20632) (fxdiv . g$661$20631) (fxcopy-bit-field . g$661$20630) (fxcopy-bit . g$661$20629) (fxbit-set? . g$661$20628) (fxbit-field . g$661$20627) (fxbit-count . g$661$20626) (fxarithmetic-shift-right . g$661$20625) (fxarithmetic-shift-left . g$661$20624) (fxarithmetic-shift . g$661$20623) (fxand . g$661$20622) (fx>? . g$661$20621) (fx>=? . g$661$20620) (fx=? . g$661$20619) (fx<? . g$661$20618) (fx<=? . g$661$20617) (fx-/carry . g$661$20616) (fx- . g$661$20615) (fx+/carry . g$661$20614) (fx+ . g$661$20613) (fx*/carry . g$661$20612) (fx* . g$661$20611) (greatest-fixnum . g$661$20610) (least-fixnum . g$661$20609) (fixnum-width . g$661$20608) (fixnum? . g$661$20607))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21108) (quote (rnrs arithmetic flonums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$661$20703) (&no-nans . g$661$20702) (no-infinities-violation? . g$661$20701) (&no-infinities . g$661$20700) (make-no-nans-violation . g$661$20699) (make-no-infinities-violation . g$661$20698) (real->flonum . g$661$20697) (flzero? . g$661$20696) (fltruncate . g$661$20695) (fltan . g$661$20694) (flsqrt . g$661$20693) (flsin . g$661$20692) (flround . g$661$20691) (flpositive? . g$661$20690) (flonum? . g$661$20689) (flodd? . g$661$20688) (flnumerator . g$661$20687) (flnegative? . g$661$20686) (flnan? . g$661$20685) (flmod0 . g$661$20684) (flmod . g$661$20683) (flmin . g$661$20682) (flmax . g$661$20681) (fllog . g$661$20680) (flinteger? . g$661$20679) (flinfinite? . g$661$20678) (flfloor . g$661$20677) (flfinite? . g$661$20676) (flexpt . g$661$20675) (flexp . g$661$20674) (fleven? . g$661$20673) (fldiv0-and-mod0 . g$661$20672) (fldiv0 . g$661$20671) (fldiv-and-mod . g$661$20670) (fldiv . g$661$20669) (fldenominator . g$661$20668) (flcos . g$661$20667) (flceiling . g$661$20666) (flatan . g$661$20665) (flasin . g$661$20664) (flacos . g$661$20663) (flabs . g$661$20662) (fl>? . g$661$20661) (fl>=? . g$661$20660) (fl=? . g$661$20659) (fl<? . g$661$20658) (fl<=? . g$661$20657) (fl/ . g$661$20656) (fl- . g$661$20655) (fl+ . g$661$20654) (fl* . g$661$20653) (fixnum->flonum . g$661$20652))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21109) (quote (rnrs hashtables)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$661$21012) (string-ci-hash . g$661$21011) (string-hash . g$661$21010) (equal-hash . g$661$21009) (hashtable-equivalence-function . g$661$21008) (make-hashtable . g$661$21007) (hashtable-hash-function . g$661$21006) (make-eqv-hashtable . g$661$21005) (make-eq-hashtable . g$661$21004) (hashtable? . g$661$21003) (hashtable-update! . g$661$21002) (hashtable-size . g$661$21001) (hashtable-set! . g$661$21000) (hashtable-ref . g$661$20999) (hashtable-mutable? . g$661$20998) (hashtable-keys . g$661$20997) (hashtable-entries . g$661$20996) (hashtable-delete! . g$661$20995) (hashtable-copy . g$661$20994) (hashtable-contains? . g$661$20993) (hashtable-clear! . g$661$20992))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21110) (quote (rnrs io ports)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$661$20976) (eof-object . g$661$20975) (current-error-port . g$661$20974) (current-output-port . g$661$20973) (current-input-port . g$661$20972) (output-port? . g$661$20971) (input-port? . g$661$20970) (utf-8-codec . g$661$20969) (utf-16-codec . g$661$20968) (transcoder-error-handling-mode . g$661$20967) (transcoder-eol-style . g$661$20966) (transcoder-codec . g$661$20965) (transcoded-port . g$661$20964) (textual-port? . g$661$20963) (string->bytevector . g$661$20962) (standard-output-port . g$661$20961) (standard-input-port . g$661$20960) (standard-error-port . g$661$20959) (set-port-position! . g$661$20958) (put-u8 . g$661$20957) (put-string . g$661$20956) (put-datum . g$661$20955) (put-char . g$661$20954) (put-bytevector . g$661$20953) (port? . g$661$20952) (port-transcoder . g$661$20951) (port-position . g$661$20950) (port-has-set-port-position!? . g$661$20949) (port-has-port-position? . g$661$20948) (port-eof? . g$661$20947) (output-port-buffer-mode . g$661$20946) (open-string-output-port . g$661$20945) (open-string-input-port . g$661$20944) (open-file-output-port . g$661$20943) (open-file-input/output-port . g$661$20942) (open-file-input-port . g$661$20941) (open-bytevector-output-port . g$661$20940) (open-bytevector-input-port . g$661$20939) (native-transcoder . g$661$20938) (native-eol-style . g$661$20937) (make-transcoder . g$661$20936) (latin-1-codec . g$661$20935) (make-i/o-write-error . g$661$20934) (make-i/o-read-error . g$661$20933) (make-i/o-port-error . g$661$20932) (make-i/o-invalid-position-error . g$661$20931) (make-i/o-filename-error . g$661$20930) (make-i/o-file-protection-error . g$661$20929) (make-i/o-file-is-read-only-error . g$661$20928) (make-i/o-file-does-not-exist-error . g$661$20927) (make-i/o-file-already-exists-error . g$661$20926) (make-i/o-error . g$661$20925) (make-i/o-encoding-error . g$661$20924) (make-i/o-decoding-error . g$661$20923) (make-custom-textual-output-port . g$661$20922) (make-custom-textual-input/output-port . g$661$20921) (make-custom-textual-input-port . g$661$20920) (make-custom-binary-output-port . g$661$20919) (make-custom-binary-input/output-port . g$661$20918) (make-custom-binary-input-port . g$661$20917) (lookahead-u8 . g$661$20915) (lookahead-char . g$661$20914) (i/o-write-error? . g$661$20913) (&i/o-write . g$661$20912) (i/o-read-error? . g$661$20911) (&i/o-read . g$661$20910) (i/o-port-error? . g$661$20909) (&i/o-port . g$661$20908) (i/o-invalid-position-error? . g$661$20907) (&i/o-invalid-position . g$661$20906) (i/o-filename-error? . g$661$20905) (&i/o-filename . g$661$20904) (i/o-file-protection-error? . g$661$20903) (&i/o-file-protection . g$661$20902) (i/o-file-is-read-only-error? . g$661$20901) (&i/o-file-is-read-only . g$661$20900) (i/o-file-does-not-exist-error? . g$661$20899) (&i/o-file-does-not-exist . g$661$20898) (i/o-file-already-exists-error? . g$661$20897) (&i/o-file-already-exists . g$661$20896) (i/o-error? . g$661$20895) (i/o-error-port . g$661$20894) (i/o-error-filename . g$661$20893) (i/o-encoding-error? . g$661$20892) (i/o-encoding-error-char . g$661$20891) (&i/o-encoding . g$661$20890) (i/o-decoding-error? . g$661$20889) (&i/o-decoding . g$661$20888) (&i/o . g$661$20887) (get-u8 . g$661$20886) (get-string-n! . g$661$20885) (get-string-n . g$661$20884) (get-string-all . g$661$20883) (get-line . g$661$20882) (get-datum . g$661$20881) (get-char . g$661$20880) (get-bytevector-some . g$661$20879) (get-bytevector-n! . g$661$20878) (get-bytevector-n . g$661$20877) (get-bytevector-all . g$661$20876) (flush-output-port . g$661$20875) (file-options . g$661$20874) (error-handling-mode . g$661$20873) (eol-style . g$661$20872) (close-port . g$661$20871) (call-with-string-output-port . g$661$20837) (call-with-port . g$661$20836) (call-with-bytevector-output-port . g$661$20835) (bytevector->string . g$661$20834) (buffer-mode? . g$661$20833) (buffer-mode . g$661$20832) (binary-port? . g$661$20831))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21111) (quote (rnrs enums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$661$20826) (enum-set=? . g$661$20825) (enum-set-universe . g$661$20824) (enum-set-union . g$661$20823) (enum-set-subset? . g$661$20822) (enum-set-projection . g$661$20821) (enum-set-member? . g$661$20820) (enum-set-intersection . g$661$20819) (enum-set-indexer . g$661$20818) (enum-set-difference . g$661$20817) (enum-set-constructor . g$661$20816) (enum-set-complement . g$661$20815) (enum-set->list . g$661$20814) (define-enumeration . g$661$20813))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21112) (quote (rnrs conditions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$661$20812) (&who . g$661$20811) (warning? . g$661$20810) (&warning . g$661$20809) (violation? . g$661$20808) (&violation . g$661$20807) (undefined-violation? . g$661$20806) (&undefined . g$661$20805) (syntax-violation? . g$661$20804) (syntax-violation-subform . g$661$20803) (syntax-violation-form . g$661$20802) (syntax-violation . g$661$20801) (&syntax . g$661$20800) (simple-conditions . g$661$20799) (serious-condition? . g$661$20798) (&serious . g$661$20797) (non-continuable-violation? . g$661$20796) (&non-continuable . g$661$20795) (message-condition? . g$661$20794) (&message . g$661$20793) (make-who-condition . g$661$20792) (make-warning . g$661$20791) (make-violation . g$661$20790) (make-undefined-violation . g$661$20789) (make-syntax-violation . g$661$20788) (make-serious-condition . g$661$20787) (make-non-continuable-violation . g$661$20786) (make-message-condition . g$661$20785) (make-lexical-violation . g$661$20784) (make-irritants-condition . g$661$20783) (make-implementation-restriction-violation . g$661$20782) (make-error . g$661$20781) (make-assertion-violation . g$661$20780) (lexical-violation? . g$661$20779) (&lexical . g$661$20778) (irritants-condition? . g$661$20777) (&irritants . g$661$20776) (implementation-restriction-violation? . g$661$20775) (&implementation-restriction . g$661$20774) (error? . g$661$20773) (&error . g$661$20772) (define-condition-type . g$661$20771) (condition-who . g$661$20770) (condition-predicate . g$661$20769) (condition-message . g$661$20768) (condition-irritants . g$661$20767) (condition-accessor . g$661$20766) (condition . g$661$20765) (&condition . g$661$20764) (assertion-violation? . g$661$20763) (&assertion . g$661$20762) (condition? . g$661$20761))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21113) (quote (rnrs records inspection)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record? . g$661$21039) (record-type-uid . g$661$21038) (record-type-sealed? . g$661$21037) (record-type-parent . g$661$21036) (record-type-opaque? . g$661$21035) (record-type-name . g$661$21034) (record-type-generative? . g$661$21033) (record-type-field-names . g$661$21032) (record-rtd . g$661$21031) (record-field-mutable? . g$661$21030))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21114) (quote (rnrs records procedural)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$661$21046) (record-predicate . g$661$21045) (record-mutator . g$661$21044) (record-constructor . g$661$21043) (record-accessor . g$661$21042) (make-record-type-descriptor . g$661$21041) (make-record-constructor-descriptor . g$661$21040))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21115) (quote (rnrs records syntactic)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((nongenerative . g$661$21029) (sealed . g$661$21028) (record-type-descriptor . g$661$21027) (record-constructor-descriptor . g$661$21026) (protocol . g$661$21025) (parent-rtd . g$661$21024) (parent . g$661$21023) (opaque . g$661$21022) (mutable . g$661$21021) (immutable . g$661$21020) (fields . g$661$21019) (define-record-type . g$661$21018))) (quote ()) values values (quote #t)) (install-library$661$11750 (quote g$661$21116) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$661$12846) (syntax-dispatch . g$661$12717) (pretty-print . g$661$21084) (eval-core . g$661$21083) (set-symbol-value! . g$661$21082) (symbol-value . g$661$21081) (gensym . g$661$21080) (void . g$661$21079) (load . g$661$21078) (interaction-environment . g$661$21077) (char-ready? . g$661$21076) (string-upcase . g$661$21075) (string-titlecase . g$661$21074) (string-normalize-nfkd . g$661$21073) (string-normalize-nfkc . g$661$21072) (string-normalize-nfd . g$661$21071) (string-normalize-nfc . g$661$21070) (string-foldcase . g$661$21069) (string-downcase . g$661$21068) (string-ci>? . g$661$21067) (string-ci>=? . g$661$21066) (string-ci=? . g$661$21065) (string-ci<? . g$661$21064) (string-ci<=? . g$661$21063) (char-whitespace? . g$661$21062) (char-upper-case? . g$661$21061) (char-title-case? . g$661$21060) (char-numeric? . g$661$21059) (char-lower-case? . g$661$21058) (char-general-category . g$661$21057) (char-upcase . g$661$21056) (char-titlecase . g$661$21055) (char-foldcase . g$661$21054) (char-downcase . g$661$21053) (char-ci>? . g$661$21052) (char-ci>=? . g$661$21051) (char-ci=? . g$661$21050) (char-ci<? . g$661$21049) (char-ci<=? . g$661$21048) (char-alphabetic? . g$661$21047) (make-variable-transformer . g$661$12271) (identifier? . g$661$12848) (generate-temporaries . g$661$12840) (free-identifier=? . g$661$12842) (syntax->datum . g$661$12852) (datum->syntax . g$661$12850) (bound-identifier=? . g$661$12844) (record-type-descriptor? . g$661$21046) (record-predicate . g$661$21045) (record-mutator . g$661$21044) (record-constructor . g$661$21043) (record-accessor . g$661$21042) (make-record-type-descriptor . g$661$21041) (make-record-constructor-descriptor . g$661$21040) (record? . g$661$21039) (record-type-uid . g$661$21038) (record-type-sealed? . g$661$21037) (record-type-parent . g$661$21036) (record-type-opaque? . g$661$21035) (record-type-name . g$661$21034) (record-type-generative? . g$661$21033) (record-type-field-names . g$661$21032) (record-rtd . g$661$21031) (record-field-mutable? . g$661$21030) (nongenerative . g$661$21029) (sealed . g$661$21028) (record-type-descriptor . g$661$21027) (record-constructor-descriptor . g$661$21026) (protocol . g$661$21025) (parent-rtd . g$661$21024) (parent . g$661$21023) (opaque . g$661$21022) (mutable . g$661$21021) (immutable . g$661$21020) (fields . g$661$21019) (define-record-type . g$661$21018) (delete-file . g$661$21017) (file-exists? . g$661$21016) (vector-sort! . g$661$21015) (vector-sort . g$661$21014) (list-sort . g$661$21013) (symbol-hash . g$661$21012) (string-ci-hash . g$661$21011) (string-hash . g$661$21010) (equal-hash . g$661$21009) (hashtable-equivalence-function . g$661$21008) (make-hashtable . g$661$21007) (hashtable-hash-function . g$661$21006) (make-eqv-hashtable . g$661$21005) (make-eq-hashtable . g$661$21004) (hashtable? . g$661$21003) (hashtable-update! . g$661$21002) (hashtable-size . g$661$21001) (hashtable-set! . g$661$21000) (hashtable-ref . g$661$20999) (hashtable-mutable? . g$661$20998) (hashtable-keys . g$661$20997) (hashtable-entries . g$661$20996) (hashtable-delete! . g$661$20995) (hashtable-copy . g$661$20994) (hashtable-contains? . g$661$20993) (hashtable-clear! . g$661$20992) (call-with-output-file . g$661$20991) (call-with-input-file . g$661$20990) (write-char . g$661$20989) (write . g$661$20988) (with-output-to-file . g$661$20987) (with-input-from-file . g$661$20986) (read-char . g$661$20985) (read . g$661$20984) (peek-char . g$661$20983) (open-output-file . g$661$20982) (open-input-file . g$661$20981) (newline . g$661$20980) (display . g$661$20979) (close-output-port . g$661$20978) (close-input-port . g$661$20977) (eof-object? . g$661$20976) (eof-object . g$661$20975) (current-error-port . g$661$20974) (current-output-port . g$661$20973) (current-input-port . g$661$20972) (output-port? . g$661$20971) (input-port? . g$661$20970) (utf-8-codec . g$661$20969) (utf-16-codec . g$661$20968) (transcoder-error-handling-mode . g$661$20967) (transcoder-eol-style . g$661$20966) (transcoder-codec . g$661$20965) (transcoded-port . g$661$20964) (textual-port? . g$661$20963) (string->bytevector . g$661$20962) (standard-output-port . g$661$20961) (standard-input-port . g$661$20960) (standard-error-port . g$661$20959) (set-port-position! . g$661$20958) (put-u8 . g$661$20957) (put-string . g$661$20956) (put-datum . g$661$20955) (put-char . g$661$20954) (put-bytevector . g$661$20953) (port? . g$661$20952) (port-transcoder . g$661$20951) (port-position . g$661$20950) (port-has-set-port-position!? . g$661$20949) (port-has-port-position? . g$661$20948) (port-eof? . g$661$20947) (output-port-buffer-mode . g$661$20946) (open-string-output-port . g$661$20945) (open-string-input-port . g$661$20944) (open-file-output-port . g$661$20943) (open-file-input/output-port . g$661$20942) (open-file-input-port . g$661$20941) (open-bytevector-output-port . g$661$20940) (open-bytevector-input-port . g$661$20939) (native-transcoder . g$661$20938) (native-eol-style . g$661$20937) (make-transcoder . g$661$20936) (latin-1-codec . g$661$20935) (make-i/o-write-error . g$661$20934) (make-i/o-read-error . g$661$20933) (make-i/o-port-error . g$661$20932) (make-i/o-invalid-position-error . g$661$20931) (make-i/o-filename-error . g$661$20930) (make-i/o-file-protection-error . g$661$20929) (make-i/o-file-is-read-only-error . g$661$20928) (make-i/o-file-does-not-exist-error . g$661$20927) (make-i/o-file-already-exists-error . g$661$20926) (make-i/o-error . g$661$20925) (make-i/o-encoding-error . g$661$20924) (make-i/o-decoding-error . g$661$20923) (make-custom-textual-output-port . g$661$20922) (make-custom-textual-input/output-port . g$661$20921) (make-custom-textual-input-port . g$661$20920) (make-custom-binary-output-port . g$661$20919) (make-custom-binary-input/output-port . g$661$20918) (make-custom-binary-input-port . g$661$20917) (make-bytevector . g$661$20916) (lookahead-u8 . g$661$20915) (lookahead-char . g$661$20914) (i/o-write-error? . g$661$20913) (&i/o-write . g$661$20912) (i/o-read-error? . g$661$20911) (&i/o-read . g$661$20910) (i/o-port-error? . g$661$20909) (&i/o-port . g$661$20908) (i/o-invalid-position-error? . g$661$20907) (&i/o-invalid-position . g$661$20906) (i/o-filename-error? . g$661$20905) (&i/o-filename . g$661$20904) (i/o-file-protection-error? . g$661$20903) (&i/o-file-protection . g$661$20902) (i/o-file-is-read-only-error? . g$661$20901) (&i/o-file-is-read-only . g$661$20900) (i/o-file-does-not-exist-error? . g$661$20899) (&i/o-file-does-not-exist . g$661$20898) (i/o-file-already-exists-error? . g$661$20897) (&i/o-file-already-exists . g$661$20896) (i/o-error? . g$661$20895) (i/o-error-port . g$661$20894) (i/o-error-filename . g$661$20893) (i/o-encoding-error? . g$661$20892) (i/o-encoding-error-char . g$661$20891) (&i/o-encoding . g$661$20890) (i/o-decoding-error? . g$661$20889) (&i/o-decoding . g$661$20888) (&i/o . g$661$20887) (get-u8 . g$661$20886) (get-string-n! . g$661$20885) (get-string-n . g$661$20884) (get-string-all . g$661$20883) (get-line . g$661$20882) (get-datum . g$661$20881) (get-char . g$661$20880) (get-bytevector-some . g$661$20879) (get-bytevector-n! . g$661$20878) (get-bytevector-n . g$661$20877) (get-bytevector-all . g$661$20876) (flush-output-port . g$661$20875) (file-options . g$661$20874) (error-handling-mode . g$661$20873) (eol-style . g$661$20872) (close-port . g$661$20871) (scheme-report-environment . g$661$20870) (quotient . g$661$20869) (null-environment . g$661$12820) (remainder . g$661$20868) (modulo . g$661$20867) (inexact->exact . g$661$20866) (force . g$661$20865) (exact->inexact . g$661$20864) (exit . g$661$20863) (command-line . g$661$20862) (string-fill! . g$661$20861) (string-set! . g$661$20860) (set-cdr! . g$661$20859) (set-car! . g$661$20858) (remove . g$661$20857) (remv . g$661$20856) (remp . g$661$20855) (remq . g$661$20854) (partition . g$661$20853) (memv . g$661$20852) (memq . g$661$20851) (memp . g$661$20850) (member . g$661$20849) (exists . g$661$20848) (for-all . g$661$20847) (fold-right . g$661$20846) (fold-left . g$661$20845) (find . g$661$20844) (filter . g$661$20843) (cons* . g$661$20842) (assv . g$661$20841) (assq . g$661$20840) (assp . g$661$20839) (assoc . g$661$20838) (call-with-string-output-port . g$661$20837) (call-with-port . g$661$20836) (call-with-bytevector-output-port . g$661$20835) (bytevector->string . g$661$20834) (buffer-mode? . g$661$20833) (buffer-mode . g$661$20832) (binary-port? . g$661$20831) (guard . g$661$20830) (with-exception-handler . g$661$20829) (raise-continuable . g$661$20828) (raise . g$661$20827) (eval . g$661$12826) (environment . g$661$12818) (make-enumeration . g$661$20826) (enum-set=? . g$661$20825) (enum-set-universe . g$661$20824) (enum-set-union . g$661$20823) (enum-set-subset? . g$661$20822) (enum-set-projection . g$661$20821) (enum-set-member? . g$661$20820) (enum-set-intersection . g$661$20819) (enum-set-indexer . g$661$20818) (enum-set-difference . g$661$20817) (enum-set-constructor . g$661$20816) (enum-set-complement . g$661$20815) (enum-set->list . g$661$20814) (define-enumeration . g$661$20813) (who-condition? . g$661$20812) (&who . g$661$20811) (warning? . g$661$20810) (&warning . g$661$20809) (violation? . g$661$20808) (&violation . g$661$20807) (undefined-violation? . g$661$20806) (&undefined . g$661$20805) (syntax-violation? . g$661$20804) (syntax-violation-subform . g$661$20803) (syntax-violation-form . g$661$20802) (syntax-violation . g$661$20801) (&syntax . g$661$20800) (simple-conditions . g$661$20799) (serious-condition? . g$661$20798) (&serious . g$661$20797) (non-continuable-violation? . g$661$20796) (&non-continuable . g$661$20795) (message-condition? . g$661$20794) (&message . g$661$20793) (make-who-condition . g$661$20792) (make-warning . g$661$20791) (make-violation . g$661$20790) (make-undefined-violation . g$661$20789) (make-syntax-violation . g$661$20788) (make-serious-condition . g$661$20787) (make-non-continuable-violation . g$661$20786) (make-message-condition . g$661$20785) (make-lexical-violation . g$661$20784) (make-irritants-condition . g$661$20783) (make-implementation-restriction-violation . g$661$20782) (make-error . g$661$20781) (make-assertion-violation . g$661$20780) (lexical-violation? . g$661$20779) (&lexical . g$661$20778) (irritants-condition? . g$661$20777) (&irritants . g$661$20776) (implementation-restriction-violation? . g$661$20775) (&implementation-restriction . g$661$20774) (error? . g$661$20773) (&error . g$661$20772) (define-condition-type . g$661$20771) (condition-who . g$661$20770) (condition-predicate . g$661$20769) (condition-message . g$661$20768) (condition-irritants . g$661$20767) (condition-accessor . g$661$20766) (condition . g$661$20765) (&condition . g$661$20764) (assertion-violation? . g$661$20763) (&assertion . g$661$20762) (condition? . g$661$20761) (utf32->string . g$661$20760) (utf16->string . g$661$20759) (utf8->string . g$661$20758) (uint-list->bytevector . g$661$20757) (u8-list->bytevector . g$661$20756) (string->utf8 . g$661$20755) (string->utf32 . g$661$20754) (string->utf16 . g$661$20753) (sint-list->bytevector . g$661$20752) (native-endianness . g$661$20751) (bytevector? . g$661$20750) (bytevector=? . g$661$20749) (bytevector-uint-set! . g$661$20748) (bytevector-uint-ref . g$661$20747) (bytevector-u8-set! . g$661$20746) (bytevector-u8-ref . g$661$20745) (bytevector-u64-set! . g$661$20744) (bytevector-u64-ref . g$661$20743) (bytevector-u64-native-set! . g$661$20742) (bytevector-u64-native-ref . g$661$20741) (bytevector-u32-set! . g$661$20740) (bytevector-u32-ref . g$661$20739) (bytevector-u32-native-set! . g$661$20738) (bytevector-u32-native-ref . g$661$20737) (bytevector-u16-set! . g$661$20736) (bytevector-u16-ref . g$661$20735) (bytevector-u16-native-set! . g$661$20734) (bytevector-u16-native-ref . g$661$20733) (bytevector-sint-set! . g$661$20732) (bytevector-sint-ref . g$661$20731) (bytevector-s8-set! . g$661$20730) (bytevector-s8-ref . g$661$20729) (bytevector-s64-set! . g$661$20728) (bytevector-s64-ref . g$661$20727) (bytevector-s64-native-set! . g$661$20726) (bytevector-s64-native-ref . g$661$20725) (bytevector-s32-set! . g$661$20724) (bytevector-s32-ref . g$661$20723) (bytevector-s32-native-set! . g$661$20722) (bytevector-s32-native-ref . g$661$20721) (bytevector-s16-set! . g$661$20720) (bytevector-s16-ref . g$661$20719) (bytevector-s16-native-set! . g$661$20718) (bytevector-s16-native-ref . g$661$20717) (bytevector-length . g$661$20716) (bytevector-ieee-single-ref . g$661$20715) (bytevector-ieee-single-native-set! . g$661$20714) (bytevector-ieee-single-native-ref . g$661$20713) (bytevector-ieee-double-ref . g$661$20712) (bytevector-ieee-double-native-set! . g$661$20711) (bytevector-ieee-double-native-ref . g$661$20710) (bytevector-fill! . g$661$20709) (bytevector-copy! . g$661$20708) (bytevector-copy . g$661$20707) (bytevector->uint-list . g$661$20706) (bytevector->u8-list . g$661$20705) (bytevector->sint-list . g$661$20704) (no-nans-violation? . g$661$20703) (&no-nans . g$661$20702) (no-infinities-violation? . g$661$20701) (&no-infinities . g$661$20700) (make-no-nans-violation . g$661$20699) (make-no-infinities-violation . g$661$20698) (real->flonum . g$661$20697) (flzero? . g$661$20696) (fltruncate . g$661$20695) (fltan . g$661$20694) (flsqrt . g$661$20693) (flsin . g$661$20692) (flround . g$661$20691) (flpositive? . g$661$20690) (flonum? . g$661$20689) (flodd? . g$661$20688) (flnumerator . g$661$20687) (flnegative? . g$661$20686) (flnan? . g$661$20685) (flmod0 . g$661$20684) (flmod . g$661$20683) (flmin . g$661$20682) (flmax . g$661$20681) (fllog . g$661$20680) (flinteger? . g$661$20679) (flinfinite? . g$661$20678) (flfloor . g$661$20677) (flfinite? . g$661$20676) (flexpt . g$661$20675) (flexp . g$661$20674) (fleven? . g$661$20673) (fldiv0-and-mod0 . g$661$20672) (fldiv0 . g$661$20671) (fldiv-and-mod . g$661$20670) (fldiv . g$661$20669) (fldenominator . g$661$20668) (flcos . g$661$20667) (flceiling . g$661$20666) (flatan . g$661$20665) (flasin . g$661$20664) (flacos . g$661$20663) (flabs . g$661$20662) (fl>? . g$661$20661) (fl>=? . g$661$20660) (fl=? . g$661$20659) (fl<? . g$661$20658) (fl<=? . g$661$20657) (fl/ . g$661$20656) (fl- . g$661$20655) (fl+ . g$661$20654) (fl* . g$661$20653) (fixnum->flonum . g$661$20652) (fxzero? . g$661$20651) (fxxor . g$661$20650) (fxrotate-bit-field . g$661$20649) (fxreverse-bit-field . g$661$20648) (fxpositive? . g$661$20647) (fxodd? . g$661$20646) (fxnot . g$661$20645) (fxnegative? . g$661$20644) (fxmod0 . g$661$20643) (fxmod . g$661$20642) (fxmin . g$661$20641) (fxmax . g$661$20640) (fxlength . g$661$20639) (fxior . g$661$20638) (fxif . g$661$20637) (fxfirst-bit-set . g$661$20636) (fxeven? . g$661$20635) (fxdiv0-and-mod0 . g$661$20634) (fxdiv0 . g$661$20633) (fxdiv-and-mod . g$661$20632) (fxdiv . g$661$20631) (fxcopy-bit-field . g$661$20630) (fxcopy-bit . g$661$20629) (fxbit-set? . g$661$20628) (fxbit-field . g$661$20627) (fxbit-count . g$661$20626) (fxarithmetic-shift-right . g$661$20625) (fxarithmetic-shift-left . g$661$20624) (fxarithmetic-shift . g$661$20623) (fxand . g$661$20622) (fx>? . g$661$20621) (fx>=? . g$661$20620) (fx=? . g$661$20619) (fx<? . g$661$20618) (fx<=? . g$661$20617) (fx-/carry . g$661$20616) (fx- . g$661$20615) (fx+/carry . g$661$20614) (fx+ . g$661$20613) (fx*/carry . g$661$20612) (fx* . g$661$20611) (greatest-fixnum . g$661$20610) (least-fixnum . g$661$20609) (fixnum-width . g$661$20608) (fixnum? . g$661$20607) (bitwise-rotate-bit-field . g$661$20606) (bitwise-reverse-bit-field . g$661$20605) (bitwise-length . g$661$20604) (bitwise-if . g$661$20603) (bitwise-first-bit-set . g$661$20602) (bitwise-copy-bit-field . g$661$20601) (bitwise-copy-bit . g$661$20600) (bitwise-bit-set? . g$661$20599) (bitwise-bit-field . g$661$20598) (bitwise-bit-count . g$661$20597) (bitwise-xor . g$661$20596) (bitwise-ior . g$661$20595) (bitwise-and . g$661$20594) (bitwise-not . g$661$20593) (bitwise-arithmetic-shift-right . g$661$20592) (bitwise-arithmetic-shift-left . g$661$20591) (bitwise-arithmetic-shift . g$661$20590) (zero? . g$661$20589) (vector? . g$661$20588) (vector-set! . g$661$20587) (vector-ref . g$661$20586) (vector-map . g$661$20585) (vector-length . g$661$20584) (vector-for-each . g$661$20583) (vector-fill! . g$661$20582) (vector->list . g$661$20581) (vector . g$661$20580) (values . g$661$20579) (truncate . g$661$20578) (tan . g$661$20577) (symbol? . g$661$20576) (symbol=? . g$661$20575) (symbol->string . g$661$20574) (substring . g$661$20573) (string? . g$661$20572) (string>? . g$661$20571) (string>=? . g$661$20570) (string=? . g$661$20569) (string<? . g$661$20568) (string<=? . g$661$20567) (string-ref . g$661$20566) (string-length . g$661$20565) (string-for-each . g$661$20564) (string-copy . g$661$20563) (string-append . g$661$20562) (string->symbol . g$661$20561) (string->number . g$661$20560) (string->list . g$661$20559) (string . g$661$20558) (sqrt . g$661$20557) (sin . g$661$20556) (round . g$661$20555) (reverse . g$661$20554) (real? . g$661$20553) (real-valued? . g$661$20552) (real-part . g$661$20551) (rationalize . g$661$20550) (rational? . g$661$20549) (rational-valued? . g$661$20548) (procedure? . g$661$20547) (positive? . g$661$20546) (pair? . g$661$20545) (odd? . g$661$20544) (numerator . g$661$20543) (number? . g$661$20542) (number->string . g$661$20541) (null? . g$661$20540) (not . g$661$20539) (negative? . g$661$20538) (nan? . g$661$20537) (min . g$661$20536) (max . g$661$20535) (map . g$661$20534) (make-vector . g$661$20533) (make-string . g$661$20532) (make-rectangular . g$661$20531) (make-polar . g$661$20530) (magnitude . g$661$20529) (log . g$661$20528) (list? . g$661$20527) (list-tail . g$661$20526) (list-ref . g$661$20525) (list->vector . g$661$20524) (list->string . g$661$20523) (list . g$661$20522) (length . g$661$20521) (lcm . g$661$20520) (integer? . g$661$20519) (integer-valued? . g$661$20518) (integer->char . g$661$20517) (infinite? . g$661$20516) (inexact? . g$661$20515) (inexact . g$661$20514) (imag-part . g$661$20513) (gcd . g$661$20512) (for-each . g$661$20511) (floor . g$661$20510) (finite? . g$661$20509) (expt . g$661$20508) (exp . g$661$20507) (exact? . g$661$20506) (exact-integer-sqrt . g$661$20505) (exact . g$661$20504) (even? . g$661$20503) (error . g$661$20502) (eqv? . g$661$20501) (equal? . g$661$20500) (eq? . g$661$20499) (dynamic-wind . g$661$20498) (div0-and-mod0 . g$661$20497) (mod0 . g$661$20496) (div0 . g$661$20495) (div-and-mod . g$661$20494) (mod . g$661$20493) (div . g$661$20492) (denominator . g$661$20491) (cos . g$661$20490) (cons . g$661$20489) (complex? . g$661$20488) (char? . g$661$20487) (char>? . g$661$20486) (char>=? . g$661$20485) (char=? . g$661$20484) (char<? . g$661$20483) (char<=? . g$661$20482) (char->integer . g$661$20481) (ceiling . g$661$20480) (call-with-values . g$661$20479) (call/cc . g$661$20478) (call-with-current-continuation . g$661$20477) (cddddr . g$661$20476) (cdddar . g$661$20475) (cddadr . g$661$20474) (cddaar . g$661$20473) (cdaddr . g$661$20472) (cdadar . g$661$20471) (cdaadr . g$661$20470) (cdaaar . g$661$20469) (cadddr . g$661$20468) (caddar . g$661$20467) (cadadr . g$661$20466) (cadaar . g$661$20465) (caaddr . g$661$20464) (caadar . g$661$20463) (caaadr . g$661$20462) (caaaar . g$661$20461) (cdddr . g$661$20460) (cddar . g$661$20459) (cdadr . g$661$20458) (cdaar . g$661$20457) (caddr . g$661$20456) (cadar . g$661$20455) (caadr . g$661$20454) (caaar . g$661$20453) (cddr . g$661$20452) (cdar . g$661$20451) (cadr . g$661$20450) (caar . g$661$20449) (cdr . g$661$20448) (car . g$661$20447) (boolean? . g$661$20446) (boolean=? . g$661$20445) (atan . g$661$20444) (assertion-violation . g$661$20443) (asin . g$661$20442) (apply . g$661$20441) (append . g$661$20440) (angle . g$661$20439) (acos . g$661$20438) (abs . g$661$20437) (/ . g$661$20436) (* . g$661$20435) (- . g$661$20434) (+ . g$661$20433) (>= . g$661$20432) (> . g$661$20431) (= . g$661$20430) (<= . g$661$20429) (< . g$661$20428) (let*-values . g$661$20427) (trace-define . g$661$20426) (trace-lambda . g$661$20425) (unsyntax-splicing . g$661$20424) (unsyntax . g$661$20423) (unquote-splicing . g$661$20422) (unquote . g$661$20421) (_ . g$661$20420) (else . g$661$20419) (=> . g$661$20418) (... . g$661$20417) (assert . g$661$20416) (endianness . g$661$20415) (delay . g$661$20414) (time . g$661$20413) (or . g$661$20412) (and . g$661$20411) (do . g$661$20410) (cond . g$661$20409) (let* . g$661$20408) (let . g$661$20407) (identifier-syntax . g$661$20406) (with-syntax . g$661$20405) (quasisyntax . g$661$20404) (quasiquote . g$661$20403) (syntax-rules . g$661$20402) (include . g$661$20401) (define-record . g$661$20400) (let-values . g$661$20399) (case . g$661$20398) (parameterize . g$661$20397) (unless . g$661$20396) (when . g$661$20395) (if . g$661$20394) (letrec* . g$661$20393) (letrec . g$661$20392) (type-descriptor . g$661$20391) (case-lambda . g$661$20390) (lambda . g$661$20389) (syntax . g$661$20388) (syntax-case . g$661$20387) (quote . g$661$20386) (foreign-call . g$661$20385) (letrec-syntax . g$661$20384) (let-syntax . g$661$20383) (set! . g$661$20382) (import . g$661$20381) (begin . g$661$20380) (module . g$661$20379) (define-syntax . g$661$20378) (define . g$661$20377))) (quote ((g$661$12846 core-prim . syntax-error) (g$661$12717 core-prim . syntax-dispatch) (g$661$21084 core-prim . pretty-print) (g$661$21083 core-prim . eval-core) (g$661$21082 core-prim . set-symbol-value!) (g$661$21081 core-prim . symbol-value) (g$661$21080 core-prim . gensym) (g$661$21079 core-prim . void) (g$661$21078 core-prim . load) (g$661$21077 core-prim . interaction-environment) (g$661$21076 core-prim . char-ready?) (g$661$21075 core-prim . string-upcase) (g$661$21074 core-prim . string-titlecase) (g$661$21073 core-prim . string-normalize-nfkd) (g$661$21072 core-prim . string-normalize-nfkc) (g$661$21071 core-prim . string-normalize-nfd) (g$661$21070 core-prim . string-normalize-nfc) (g$661$21069 core-prim . string-foldcase) (g$661$21068 core-prim . string-downcase) (g$661$21067 core-prim . string-ci>?) (g$661$21066 core-prim . string-ci>=?) (g$661$21065 core-prim . string-ci=?) (g$661$21064 core-prim . string-ci<?) (g$661$21063 core-prim . string-ci<=?) (g$661$21062 core-prim . char-whitespace?) (g$661$21061 core-prim . char-upper-case?) (g$661$21060 core-prim . char-title-case?) (g$661$21059 core-prim . char-numeric?) (g$661$21058 core-prim . char-lower-case?) (g$661$21057 core-prim . char-general-category) (g$661$21056 core-prim . char-upcase) (g$661$21055 core-prim . char-titlecase) (g$661$21054 core-prim . char-foldcase) (g$661$21053 core-prim . char-downcase) (g$661$21052 core-prim . char-ci>?) (g$661$21051 core-prim . char-ci>=?) (g$661$21050 core-prim . char-ci=?) (g$661$21049 core-prim . char-ci<?) (g$661$21048 core-prim . char-ci<=?) (g$661$21047 core-prim . char-alphabetic?) (g$661$12271 core-prim . make-variable-transformer) (g$661$12848 core-prim . identifier?) (g$661$12840 core-prim . generate-temporaries) (g$661$12842 core-prim . free-identifier=?) (g$661$12852 core-prim . syntax->datum) (g$661$12850 core-prim . datum->syntax) (g$661$12844 core-prim . bound-identifier=?) (g$661$21046 core-prim . record-type-descriptor?) (g$661$21045 core-prim . record-predicate) (g$661$21044 core-prim . record-mutator) (g$661$21043 core-prim . record-constructor) (g$661$21042 core-prim . record-accessor) (g$661$21041 core-prim . make-record-type-descriptor) (g$661$21040 core-prim . make-record-constructor-descriptor) (g$661$21039 core-prim . record?) (g$661$21038 core-prim . record-type-uid) (g$661$21037 core-prim . record-type-sealed?) (g$661$21036 core-prim . record-type-parent) (g$661$21035 core-prim . record-type-opaque?) (g$661$21034 core-prim . record-type-name) (g$661$21033 core-prim . record-type-generative?) (g$661$21032 core-prim . record-type-field-names) (g$661$21031 core-prim . record-rtd) (g$661$21030 core-prim . record-field-mutable?) (g$661$21029 core-prim . nongenerative) (g$661$21028 core-prim . sealed) (g$661$21027 core-prim . record-type-descriptor) (g$661$21026 core-prim . record-constructor-descriptor) (g$661$21025 core-prim . protocol) (g$661$21024 core-prim . parent-rtd) (g$661$21023 core-prim . parent) (g$661$21022 core-prim . opaque) (g$661$21021 core-prim . mutable) (g$661$21020 core-prim . immutable) (g$661$21019 core-prim . fields) (g$661$21018 core-prim . define-record-type) (g$661$21017 core-prim . delete-file) (g$661$21016 core-prim . file-exists?) (g$661$21015 core-prim . vector-sort!) (g$661$21014 core-prim . vector-sort) (g$661$21013 core-prim . list-sort) (g$661$21012 core-prim . symbol-hash) (g$661$21011 core-prim . string-ci-hash) (g$661$21010 core-prim . string-hash) (g$661$21009 core-prim . equal-hash) (g$661$21008 core-prim . hashtable-equivalence-function) (g$661$21007 core-prim . make-hashtable) (g$661$21006 core-prim . hashtable-hash-function) (g$661$21005 core-prim . make-eqv-hashtable) (g$661$21004 core-prim . make-eq-hashtable) (g$661$21003 core-prim . hashtable?) (g$661$21002 core-prim . hashtable-update!) (g$661$21001 core-prim . hashtable-size) (g$661$21000 core-prim . hashtable-set!) (g$661$20999 core-prim . hashtable-ref) (g$661$20998 core-prim . hashtable-mutable?) (g$661$20997 core-prim . hashtable-keys) (g$661$20996 core-prim . hashtable-entries) (g$661$20995 core-prim . hashtable-delete!) (g$661$20994 core-prim . hashtable-copy) (g$661$20993 core-prim . hashtable-contains?) (g$661$20992 core-prim . hashtable-clear!) (g$661$20991 core-prim . call-with-output-file) (g$661$20990 core-prim . call-with-input-file) (g$661$20989 core-prim . write-char) (g$661$20988 core-prim . write) (g$661$20987 core-prim . with-output-to-file) (g$661$20986 core-prim . with-input-from-file) (g$661$20985 core-prim . read-char) (g$661$20984 core-prim . read) (g$661$20983 core-prim . peek-char) (g$661$20982 core-prim . open-output-file) (g$661$20981 core-prim . open-input-file) (g$661$20980 core-prim . newline) (g$661$20979 core-prim . display) (g$661$20978 core-prim . close-output-port) (g$661$20977 core-prim . close-input-port) (g$661$20976 core-prim . eof-object?) (g$661$20975 core-prim . eof-object) (g$661$20974 core-prim . current-error-port) (g$661$20973 core-prim . current-output-port) (g$661$20972 core-prim . current-input-port) (g$661$20971 core-prim . output-port?) (g$661$20970 core-prim . input-port?) (g$661$20969 core-prim . utf-8-codec) (g$661$20968 core-prim . utf-16-codec) (g$661$20967 core-prim . transcoder-error-handling-mode) (g$661$20966 core-prim . transcoder-eol-style) (g$661$20965 core-prim . transcoder-codec) (g$661$20964 core-prim . transcoded-port) (g$661$20963 core-prim . textual-port?) (g$661$20962 core-prim . string->bytevector) (g$661$20961 core-prim . standard-output-port) (g$661$20960 core-prim . standard-input-port) (g$661$20959 core-prim . standard-error-port) (g$661$20958 core-prim . set-port-position!) (g$661$20957 core-prim . put-u8) (g$661$20956 core-prim . put-string) (g$661$20955 core-prim . put-datum) (g$661$20954 core-prim . put-char) (g$661$20953 core-prim . put-bytevector) (g$661$20952 core-prim . port?) (g$661$20951 core-prim . port-transcoder) (g$661$20950 core-prim . port-position) (g$661$20949 core-prim . port-has-set-port-position!?) (g$661$20948 core-prim . port-has-port-position?) (g$661$20947 core-prim . port-eof?) (g$661$20946 core-prim . output-port-buffer-mode) (g$661$20945 core-prim . open-string-output-port) (g$661$20944 core-prim . open-string-input-port) (g$661$20943 core-prim . open-file-output-port) (g$661$20942 core-prim . open-file-input/output-port) (g$661$20941 core-prim . open-file-input-port) (g$661$20940 core-prim . open-bytevector-output-port) (g$661$20939 core-prim . open-bytevector-input-port) (g$661$20938 core-prim . native-transcoder) (g$661$20937 core-prim . native-eol-style) (g$661$20936 core-prim . make-transcoder) (g$661$20935 core-prim . latin-1-codec) (g$661$20934 core-prim . make-i/o-write-error) (g$661$20933 core-prim . make-i/o-read-error) (g$661$20932 core-prim . make-i/o-port-error) (g$661$20931 core-prim . make-i/o-invalid-position-error) (g$661$20930 core-prim . make-i/o-filename-error) (g$661$20929 core-prim . make-i/o-file-protection-error) (g$661$20928 core-prim . make-i/o-file-is-read-only-error) (g$661$20927 core-prim . make-i/o-file-does-not-exist-error) (g$661$20926 core-prim . make-i/o-file-already-exists-error) (g$661$20925 core-prim . make-i/o-error) (g$661$20924 core-prim . make-i/o-encoding-error) (g$661$20923 core-prim . make-i/o-decoding-error) (g$661$20922 core-prim . make-custom-textual-output-port) (g$661$20921 core-prim . make-custom-textual-input/output-port) (g$661$20920 core-prim . make-custom-textual-input-port) (g$661$20919 core-prim . make-custom-binary-output-port) (g$661$20918 core-prim . make-custom-binary-input/output-port) (g$661$20917 core-prim . make-custom-binary-input-port) (g$661$20916 core-prim . make-bytevector) (g$661$20915 core-prim . lookahead-u8) (g$661$20914 core-prim . lookahead-char) (g$661$20913 core-prim . i/o-write-error?) (g$661$20912 core-prim . &i/o-write) (g$661$20911 core-prim . i/o-read-error?) (g$661$20910 core-prim . &i/o-read) (g$661$20909 core-prim . i/o-port-error?) (g$661$20908 core-prim . &i/o-port) (g$661$20907 core-prim . i/o-invalid-position-error?) (g$661$20906 core-prim . &i/o-invalid-position) (g$661$20905 core-prim . i/o-filename-error?) (g$661$20904 core-prim . &i/o-filename) (g$661$20903 core-prim . i/o-file-protection-error?) (g$661$20902 core-prim . &i/o-file-protection) (g$661$20901 core-prim . i/o-file-is-read-only-error?) (g$661$20900 core-prim . &i/o-file-is-read-only) (g$661$20899 core-prim . i/o-file-does-not-exist-error?) (g$661$20898 core-prim . &i/o-file-does-not-exist) (g$661$20897 core-prim . i/o-file-already-exists-error?) (g$661$20896 core-prim . &i/o-file-already-exists) (g$661$20895 core-prim . i/o-error?) (g$661$20894 core-prim . i/o-error-port) (g$661$20893 core-prim . i/o-error-filename) (g$661$20892 core-prim . i/o-encoding-error?) (g$661$20891 core-prim . i/o-encoding-error-char) (g$661$20890 core-prim . &i/o-encoding) (g$661$20889 core-prim . i/o-decoding-error?) (g$661$20888 core-prim . &i/o-decoding) (g$661$20887 core-prim . &i/o) (g$661$20886 core-prim . get-u8) (g$661$20885 core-prim . get-string-n!) (g$661$20884 core-prim . get-string-n) (g$661$20883 core-prim . get-string-all) (g$661$20882 core-prim . get-line) (g$661$20881 core-prim . get-datum) (g$661$20880 core-prim . get-char) (g$661$20879 core-prim . get-bytevector-some) (g$661$20878 core-prim . get-bytevector-n!) (g$661$20877 core-prim . get-bytevector-n) (g$661$20876 core-prim . get-bytevector-all) (g$661$20875 core-prim . flush-output-port) (g$661$20874 core-prim . file-options) (g$661$20873 core-prim . error-handling-mode) (g$661$20872 core-prim . eol-style) (g$661$20871 core-prim . close-port) (g$661$20870 core-prim . scheme-report-environment) (g$661$20869 core-prim . quotient) (g$661$12820 core-prim . null-environment) (g$661$20868 core-prim . remainder) (g$661$20867 core-prim . modulo) (g$661$20866 core-prim . inexact->exact) (g$661$20865 core-prim . force) (g$661$20864 core-prim . exact->inexact) (g$661$20863 core-prim . exit) (g$661$20862 core-prim . command-line) (g$661$20861 core-prim . string-fill!) (g$661$20860 core-prim . string-set!) (g$661$20859 core-prim . set-cdr!) (g$661$20858 core-prim . set-car!) (g$661$20857 core-prim . remove) (g$661$20856 core-prim . remv) (g$661$20855 core-prim . remp) (g$661$20854 core-prim . remq) (g$661$20853 core-prim . partition) (g$661$20852 core-prim . memv) (g$661$20851 core-prim . memq) (g$661$20850 core-prim . memp) (g$661$20849 core-prim . member) (g$661$20848 core-prim . exists) (g$661$20847 core-prim . for-all) (g$661$20846 core-prim . fold-right) (g$661$20845 core-prim . fold-left) (g$661$20844 core-prim . find) (g$661$20843 core-prim . filter) (g$661$20842 core-prim . cons*) (g$661$20841 core-prim . assv) (g$661$20840 core-prim . assq) (g$661$20839 core-prim . assp) (g$661$20838 core-prim . assoc) (g$661$20837 core-prim . call-with-string-output-port) (g$661$20836 core-prim . call-with-port) (g$661$20835 core-prim . call-with-bytevector-output-port) (g$661$20834 core-prim . bytevector->string) (g$661$20833 core-prim . buffer-mode?) (g$661$20832 core-prim . buffer-mode) (g$661$20831 core-prim . binary-port?) (g$661$20830 core-prim . guard) (g$661$20829 core-prim . with-exception-handler) (g$661$20828 core-prim . raise-continuable) (g$661$20827 core-prim . raise) (g$661$12826 core-prim . eval) (g$661$12818 core-prim . environment) (g$661$20826 core-prim . make-enumeration) (g$661$20825 core-prim . enum-set=?) (g$661$20824 core-prim . enum-set-universe) (g$661$20823 core-prim . enum-set-union) (g$661$20822 core-prim . enum-set-subset?) (g$661$20821 core-prim . enum-set-projection) (g$661$20820 core-prim . enum-set-member?) (g$661$20819 core-prim . enum-set-intersection) (g$661$20818 core-prim . enum-set-indexer) (g$661$20817 core-prim . enum-set-difference) (g$661$20816 core-prim . enum-set-constructor) (g$661$20815 core-prim . enum-set-complement) (g$661$20814 core-prim . enum-set->list) (g$661$20813 core-prim . define-enumeration) (g$661$20812 core-prim . who-condition?) (g$661$20811 core-prim . &who) (g$661$20810 core-prim . warning?) (g$661$20809 core-prim . &warning) (g$661$20808 core-prim . violation?) (g$661$20807 core-prim . &violation) (g$661$20806 core-prim . undefined-violation?) (g$661$20805 core-prim . &undefined) (g$661$20804 core-prim . syntax-violation?) (g$661$20803 core-prim . syntax-violation-subform) (g$661$20802 core-prim . syntax-violation-form) (g$661$20801 core-prim . syntax-violation) (g$661$20800 core-prim . &syntax) (g$661$20799 core-prim . simple-conditions) (g$661$20798 core-prim . serious-condition?) (g$661$20797 core-prim . &serious) (g$661$20796 core-prim . non-continuable-violation?) (g$661$20795 core-prim . &non-continuable) (g$661$20794 core-prim . message-condition?) (g$661$20793 core-prim . &message) (g$661$20792 core-prim . make-who-condition) (g$661$20791 core-prim . make-warning) (g$661$20790 core-prim . make-violation) (g$661$20789 core-prim . make-undefined-violation) (g$661$20788 core-prim . make-syntax-violation) (g$661$20787 core-prim . make-serious-condition) (g$661$20786 core-prim . make-non-continuable-violation) (g$661$20785 core-prim . make-message-condition) (g$661$20784 core-prim . make-lexical-violation) (g$661$20783 core-prim . make-irritants-condition) (g$661$20782 core-prim . make-implementation-restriction-violation) (g$661$20781 core-prim . make-error) (g$661$20780 core-prim . make-assertion-violation) (g$661$20779 core-prim . lexical-violation?) (g$661$20778 core-prim . &lexical) (g$661$20777 core-prim . irritants-condition?) (g$661$20776 core-prim . &irritants) (g$661$20775 core-prim . implementation-restriction-violation?) (g$661$20774 core-prim . &implementation-restriction) (g$661$20773 core-prim . error?) (g$661$20772 core-prim . &error) (g$661$20771 core-prim . define-condition-type) (g$661$20770 core-prim . condition-who) (g$661$20769 core-prim . condition-predicate) (g$661$20768 core-prim . condition-message) (g$661$20767 core-prim . condition-irritants) (g$661$20766 core-prim . condition-accessor) (g$661$20765 core-prim . condition) (g$661$20764 core-prim . &condition) (g$661$20763 core-prim . assertion-violation?) (g$661$20762 core-prim . &assertion) (g$661$20761 core-prim . condition?) (g$661$20760 core-prim . utf32->string) (g$661$20759 core-prim . utf16->string) (g$661$20758 core-prim . utf8->string) (g$661$20757 core-prim . uint-list->bytevector) (g$661$20756 core-prim . u8-list->bytevector) (g$661$20755 core-prim . string->utf8) (g$661$20754 core-prim . string->utf32) (g$661$20753 core-prim . string->utf16) (g$661$20752 core-prim . sint-list->bytevector) (g$661$20751 core-prim . native-endianness) (g$661$20750 core-prim . bytevector?) (g$661$20749 core-prim . bytevector=?) (g$661$20748 core-prim . bytevector-uint-set!) (g$661$20747 core-prim . bytevector-uint-ref) (g$661$20746 core-prim . bytevector-u8-set!) (g$661$20745 core-prim . bytevector-u8-ref) (g$661$20744 core-prim . bytevector-u64-set!) (g$661$20743 core-prim . bytevector-u64-ref) (g$661$20742 core-prim . bytevector-u64-native-set!) (g$661$20741 core-prim . bytevector-u64-native-ref) (g$661$20740 core-prim . bytevector-u32-set!) (g$661$20739 core-prim . bytevector-u32-ref) (g$661$20738 core-prim . bytevector-u32-native-set!) (g$661$20737 core-prim . bytevector-u32-native-ref) (g$661$20736 core-prim . bytevector-u16-set!) (g$661$20735 core-prim . bytevector-u16-ref) (g$661$20734 core-prim . bytevector-u16-native-set!) (g$661$20733 core-prim . bytevector-u16-native-ref) (g$661$20732 core-prim . bytevector-sint-set!) (g$661$20731 core-prim . bytevector-sint-ref) (g$661$20730 core-prim . bytevector-s8-set!) (g$661$20729 core-prim . bytevector-s8-ref) (g$661$20728 core-prim . bytevector-s64-set!) (g$661$20727 core-prim . bytevector-s64-ref) (g$661$20726 core-prim . bytevector-s64-native-set!) (g$661$20725 core-prim . bytevector-s64-native-ref) (g$661$20724 core-prim . bytevector-s32-set!) (g$661$20723 core-prim . bytevector-s32-ref) (g$661$20722 core-prim . bytevector-s32-native-set!) (g$661$20721 core-prim . bytevector-s32-native-ref) (g$661$20720 core-prim . bytevector-s16-set!) (g$661$20719 core-prim . bytevector-s16-ref) (g$661$20718 core-prim . bytevector-s16-native-set!) (g$661$20717 core-prim . bytevector-s16-native-ref) (g$661$20716 core-prim . bytevector-length) (g$661$20715 core-prim . bytevector-ieee-single-ref) (g$661$20714 core-prim . bytevector-ieee-single-native-set!) (g$661$20713 core-prim . bytevector-ieee-single-native-ref) (g$661$20712 core-prim . bytevector-ieee-double-ref) (g$661$20711 core-prim . bytevector-ieee-double-native-set!) (g$661$20710 core-prim . bytevector-ieee-double-native-ref) (g$661$20709 core-prim . bytevector-fill!) (g$661$20708 core-prim . bytevector-copy!) (g$661$20707 core-prim . bytevector-copy) (g$661$20706 core-prim . bytevector->uint-list) (g$661$20705 core-prim . bytevector->u8-list) (g$661$20704 core-prim . bytevector->sint-list) (g$661$20703 core-prim . no-nans-violation?) (g$661$20702 core-prim . &no-nans) (g$661$20701 core-prim . no-infinities-violation?) (g$661$20700 core-prim . &no-infinities) (g$661$20699 core-prim . make-no-nans-violation) (g$661$20698 core-prim . make-no-infinities-violation) (g$661$20697 core-prim . real->flonum) (g$661$20696 core-prim . flzero?) (g$661$20695 core-prim . fltruncate) (g$661$20694 core-prim . fltan) (g$661$20693 core-prim . flsqrt) (g$661$20692 core-prim . flsin) (g$661$20691 core-prim . flround) (g$661$20690 core-prim . flpositive?) (g$661$20689 core-prim . flonum?) (g$661$20688 core-prim . flodd?) (g$661$20687 core-prim . flnumerator) (g$661$20686 core-prim . flnegative?) (g$661$20685 core-prim . flnan?) (g$661$20684 core-prim . flmod0) (g$661$20683 core-prim . flmod) (g$661$20682 core-prim . flmin) (g$661$20681 core-prim . flmax) (g$661$20680 core-prim . fllog) (g$661$20679 core-prim . flinteger?) (g$661$20678 core-prim . flinfinite?) (g$661$20677 core-prim . flfloor) (g$661$20676 core-prim . flfinite?) (g$661$20675 core-prim . flexpt) (g$661$20674 core-prim . flexp) (g$661$20673 core-prim . fleven?) (g$661$20672 core-prim . fldiv0-and-mod0) (g$661$20671 core-prim . fldiv0) (g$661$20670 core-prim . fldiv-and-mod) (g$661$20669 core-prim . fldiv) (g$661$20668 core-prim . fldenominator) (g$661$20667 core-prim . flcos) (g$661$20666 core-prim . flceiling) (g$661$20665 core-prim . flatan) (g$661$20664 core-prim . flasin) (g$661$20663 core-prim . flacos) (g$661$20662 core-prim . flabs) (g$661$20661 core-prim . fl>?) (g$661$20660 core-prim . fl>=?) (g$661$20659 core-prim . fl=?) (g$661$20658 core-prim . fl<?) (g$661$20657 core-prim . fl<=?) (g$661$20656 core-prim . fl/) (g$661$20655 core-prim . fl-) (g$661$20654 core-prim . fl+) (g$661$20653 core-prim . fl*) (g$661$20652 core-prim . fixnum->flonum) (g$661$20651 core-prim . fxzero?) (g$661$20650 core-prim . fxxor) (g$661$20649 core-prim . fxrotate-bit-field) (g$661$20648 core-prim . fxreverse-bit-field) (g$661$20647 core-prim . fxpositive?) (g$661$20646 core-prim . fxodd?) (g$661$20645 core-prim . fxnot) (g$661$20644 core-prim . fxnegative?) (g$661$20643 core-prim . fxmod0) (g$661$20642 core-prim . fxmod) (g$661$20641 core-prim . fxmin) (g$661$20640 core-prim . fxmax) (g$661$20639 core-prim . fxlength) (g$661$20638 core-prim . fxior) (g$661$20637 core-prim . fxif) (g$661$20636 core-prim . fxfirst-bit-set) (g$661$20635 core-prim . fxeven?) (g$661$20634 core-prim . fxdiv0-and-mod0) (g$661$20633 core-prim . fxdiv0) (g$661$20632 core-prim . fxdiv-and-mod) (g$661$20631 core-prim . fxdiv) (g$661$20630 core-prim . fxcopy-bit-field) (g$661$20629 core-prim . fxcopy-bit) (g$661$20628 core-prim . fxbit-set?) (g$661$20627 core-prim . fxbit-field) (g$661$20626 core-prim . fxbit-count) (g$661$20625 core-prim . fxarithmetic-shift-right) (g$661$20624 core-prim . fxarithmetic-shift-left) (g$661$20623 core-prim . fxarithmetic-shift) (g$661$20622 core-prim . fxand) (g$661$20621 core-prim . fx>?) (g$661$20620 core-prim . fx>=?) (g$661$20619 core-prim . fx=?) (g$661$20618 core-prim . fx<?) (g$661$20617 core-prim . fx<=?) (g$661$20616 core-prim . fx-/carry) (g$661$20615 core-prim . fx-) (g$661$20614 core-prim . fx+/carry) (g$661$20613 core-prim . fx+) (g$661$20612 core-prim . fx*/carry) (g$661$20611 core-prim . fx*) (g$661$20610 core-prim . greatest-fixnum) (g$661$20609 core-prim . least-fixnum) (g$661$20608 core-prim . fixnum-width) (g$661$20607 core-prim . fixnum?) (g$661$20606 core-prim . bitwise-rotate-bit-field) (g$661$20605 core-prim . bitwise-reverse-bit-field) (g$661$20604 core-prim . bitwise-length) (g$661$20603 core-prim . bitwise-if) (g$661$20602 core-prim . bitwise-first-bit-set) (g$661$20601 core-prim . bitwise-copy-bit-field) (g$661$20600 core-prim . bitwise-copy-bit) (g$661$20599 core-prim . bitwise-bit-set?) (g$661$20598 core-prim . bitwise-bit-field) (g$661$20597 core-prim . bitwise-bit-count) (g$661$20596 core-prim . bitwise-xor) (g$661$20595 core-prim . bitwise-ior) (g$661$20594 core-prim . bitwise-and) (g$661$20593 core-prim . bitwise-not) (g$661$20592 core-prim . bitwise-arithmetic-shift-right) (g$661$20591 core-prim . bitwise-arithmetic-shift-left) (g$661$20590 core-prim . bitwise-arithmetic-shift) (g$661$20589 core-prim . zero?) (g$661$20588 core-prim . vector?) (g$661$20587 core-prim . vector-set!) (g$661$20586 core-prim . vector-ref) (g$661$20585 core-prim . vector-map) (g$661$20584 core-prim . vector-length) (g$661$20583 core-prim . vector-for-each) (g$661$20582 core-prim . vector-fill!) (g$661$20581 core-prim . vector->list) (g$661$20580 core-prim . vector) (g$661$20579 core-prim . values) (g$661$20578 core-prim . truncate) (g$661$20577 core-prim . tan) (g$661$20576 core-prim . symbol?) (g$661$20575 core-prim . symbol=?) (g$661$20574 core-prim . symbol->string) (g$661$20573 core-prim . substring) (g$661$20572 core-prim . string?) (g$661$20571 core-prim . string>?) (g$661$20570 core-prim . string>=?) (g$661$20569 core-prim . string=?) (g$661$20568 core-prim . string<?) (g$661$20567 core-prim . string<=?) (g$661$20566 core-prim . string-ref) (g$661$20565 core-prim . string-length) (g$661$20564 core-prim . string-for-each) (g$661$20563 core-prim . string-copy) (g$661$20562 core-prim . string-append) (g$661$20561 core-prim . string->symbol) (g$661$20560 core-prim . string->number) (g$661$20559 core-prim . string->list) (g$661$20558 core-prim . string) (g$661$20557 core-prim . sqrt) (g$661$20556 core-prim . sin) (g$661$20555 core-prim . round) (g$661$20554 core-prim . reverse) (g$661$20553 core-prim . real?) (g$661$20552 core-prim . real-valued?) (g$661$20551 core-prim . real-part) (g$661$20550 core-prim . rationalize) (g$661$20549 core-prim . rational?) (g$661$20548 core-prim . rational-valued?) (g$661$20547 core-prim . procedure?) (g$661$20546 core-prim . positive?) (g$661$20545 core-prim . pair?) (g$661$20544 core-prim . odd?) (g$661$20543 core-prim . numerator) (g$661$20542 core-prim . number?) (g$661$20541 core-prim . number->string) (g$661$20540 core-prim . null?) (g$661$20539 core-prim . not) (g$661$20538 core-prim . negative?) (g$661$20537 core-prim . nan?) (g$661$20536 core-prim . min) (g$661$20535 core-prim . max) (g$661$20534 core-prim . map) (g$661$20533 core-prim . make-vector) (g$661$20532 core-prim . make-string) (g$661$20531 core-prim . make-rectangular) (g$661$20530 core-prim . make-polar) (g$661$20529 core-prim . magnitude) (g$661$20528 core-prim . log) (g$661$20527 core-prim . list?) (g$661$20526 core-prim . list-tail) (g$661$20525 core-prim . list-ref) (g$661$20524 core-prim . list->vector) (g$661$20523 core-prim . list->string) (g$661$20522 core-prim . list) (g$661$20521 core-prim . length) (g$661$20520 core-prim . lcm) (g$661$20519 core-prim . integer?) (g$661$20518 core-prim . integer-valued?) (g$661$20517 core-prim . integer->char) (g$661$20516 core-prim . infinite?) (g$661$20515 core-prim . inexact?) (g$661$20514 core-prim . inexact) (g$661$20513 core-prim . imag-part) (g$661$20512 core-prim . gcd) (g$661$20511 core-prim . for-each) (g$661$20510 core-prim . floor) (g$661$20509 core-prim . finite?) (g$661$20508 core-prim . expt) (g$661$20507 core-prim . exp) (g$661$20506 core-prim . exact?) (g$661$20505 core-prim . exact-integer-sqrt) (g$661$20504 core-prim . exact) (g$661$20503 core-prim . even?) (g$661$20502 core-prim . error) (g$661$20501 core-prim . eqv?) (g$661$20500 core-prim . equal?) (g$661$20499 core-prim . eq?) (g$661$20498 core-prim . dynamic-wind) (g$661$20497 core-prim . div0-and-mod0) (g$661$20496 core-prim . mod0) (g$661$20495 core-prim . div0) (g$661$20494 core-prim . div-and-mod) (g$661$20493 core-prim . mod) (g$661$20492 core-prim . div) (g$661$20491 core-prim . denominator) (g$661$20490 core-prim . cos) (g$661$20489 core-prim . cons) (g$661$20488 core-prim . complex?) (g$661$20487 core-prim . char?) (g$661$20486 core-prim . char>?) (g$661$20485 core-prim . char>=?) (g$661$20484 core-prim . char=?) (g$661$20483 core-prim . char<?) (g$661$20482 core-prim . char<=?) (g$661$20481 core-prim . char->integer) (g$661$20480 core-prim . ceiling) (g$661$20479 core-prim . call-with-values) (g$661$20478 core-prim . call/cc) (g$661$20477 core-prim . call-with-current-continuation) (g$661$20476 core-prim . cddddr) (g$661$20475 core-prim . cdddar) (g$661$20474 core-prim . cddadr) (g$661$20473 core-prim . cddaar) (g$661$20472 core-prim . cdaddr) (g$661$20471 core-prim . cdadar) (g$661$20470 core-prim . cdaadr) (g$661$20469 core-prim . cdaaar) (g$661$20468 core-prim . cadddr) (g$661$20467 core-prim . caddar) (g$661$20466 core-prim . cadadr) (g$661$20465 core-prim . cadaar) (g$661$20464 core-prim . caaddr) (g$661$20463 core-prim . caadar) (g$661$20462 core-prim . caaadr) (g$661$20461 core-prim . caaaar) (g$661$20460 core-prim . cdddr) (g$661$20459 core-prim . cddar) (g$661$20458 core-prim . cdadr) (g$661$20457 core-prim . cdaar) (g$661$20456 core-prim . caddr) (g$661$20455 core-prim . cadar) (g$661$20454 core-prim . caadr) (g$661$20453 core-prim . caaar) (g$661$20452 core-prim . cddr) (g$661$20451 core-prim . cdar) (g$661$20450 core-prim . cadr) (g$661$20449 core-prim . caar) (g$661$20448 core-prim . cdr) (g$661$20447 core-prim . car) (g$661$20446 core-prim . boolean?) (g$661$20445 core-prim . boolean=?) (g$661$20444 core-prim . atan) (g$661$20443 core-prim . assertion-violation) (g$661$20442 core-prim . asin) (g$661$20441 core-prim . apply) (g$661$20440 core-prim . append) (g$661$20439 core-prim . angle) (g$661$20438 core-prim . acos) (g$661$20437 core-prim . abs) (g$661$20436 core-prim . /) (g$661$20435 core-prim . *) (g$661$20434 core-prim . -) (g$661$20433 core-prim . +) (g$661$20432 core-prim . >=) (g$661$20431 core-prim . >) (g$661$20430 core-prim . =) (g$661$20429 core-prim . <=) (g$661$20428 core-prim . <) (g$661$20427 core-prim . let*-values) (g$661$20426 macro . trace-define) (g$661$20425 macro . trace-lambda) (g$661$20424 macro . unsyntax-splicing) (g$661$20423 macro . unsyntax) (g$661$20422 macro . unquote-splicing) (g$661$20421 macro . unquote) (g$661$20420 macro . _) (g$661$20419 macro . else) (g$661$20418 macro . =>) (g$661$20417 macro . ...) (g$661$20416 macro . assert) (g$661$20415 macro . endianness) (g$661$20414 macro . delay) (g$661$20413 macro . time) (g$661$20412 macro . or) (g$661$20411 macro . and) (g$661$20410 macro . do) (g$661$20409 macro . cond) (g$661$20408 macro . let*) (g$661$20407 macro . let) (g$661$20406 macro . identifier-syntax) (g$661$20405 macro . with-syntax) (g$661$20404 macro . quasisyntax) (g$661$20403 macro . quasiquote) (g$661$20402 macro . syntax-rules) (g$661$20401 macro . include) (g$661$20400 macro . define-record) (g$661$20399 core-macro . let-values) (g$661$20398 core-macro . case) (g$661$20397 core-macro . parameterize) (g$661$20396 core-macro . unless) (g$661$20395 core-macro . when) (g$661$20394 core-macro . if) (g$661$20393 core-macro . letrec*) (g$661$20392 core-macro . letrec) (g$661$20391 core-macro . type-descriptor) (g$661$20390 core-macro . case-lambda) (g$661$20389 core-macro . lambda) (g$661$20388 core-macro . syntax) (g$661$20387 core-macro . syntax-case) (g$661$20386 core-macro . quote) (g$661$20385 core-macro . foreign-call) (g$661$20384 letrec-syntax) (g$661$20383 let-syntax) (g$661$20382 set!) (g$661$20381 import) (g$661$20380 begin) (g$661$20379 module) (g$661$20378 define-syntax) (g$661$20377 define))) values values (quote #f)) (install-library$661$11750 (quote g$661$21117) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$661$21084) (eval-core . g$661$21083) (set-symbol-value! . g$661$21082) (symbol-value . g$661$21081) (gensym . g$661$21080) (void . g$661$21079))) (quote ()) values values (quote #f)))


(begin (define load-r6rs-top-level$661$20375 (quote #f)) ((lambda (load-r6rs-top-level$661$20359) (begin (set! load-r6rs-top-level$661$20359 (lambda (filename$661$20361) ((lambda (x*$661$20363) (eval-r6rs-top-level$661$20177 x*$661$20363)) (with-input-from-file filename$661$20361 (lambda () (letrec ((f$661$20365 (lambda () ((lambda (x$661$20367) (if (eof-object? x$661$20367) (quote ()) (cons x$661$20367 (f$661$20365)))) (read))))) (f$661$20365))))))) (begin (set! load-r6rs-top-level$661$20375 load-r6rs-top-level$661$20359) (display (quote "r6rs psyntax ready\n")) ((lambda (args$661$20369) (begin (if (= (length args$661$20369) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (script-name$661$20371 args$661$20372) (load-r6rs-top-level$661$20359 (car args$661$20372))) (car args$661$20369) (cdr args$661$20369)))) (command-line)) (exit (quote 0))))) (quote #f)))


