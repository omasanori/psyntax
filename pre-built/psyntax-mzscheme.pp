;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define make-parameter$645$11224 (quote #f)) ((lambda (make-parameter$645$11009) (begin (set! make-parameter$645$11009 (lambda g$645$11220 ((lambda (g$645$11221) (if (= g$645$11221 (quote 1)) (apply (lambda (x$645$11206) (make-parameter$645$11009 x$645$11206 (lambda (x$645$11208) x$645$11208))) g$645$11220) (if (= g$645$11221 (quote 2)) (apply (lambda (x$645$11210 fender$645$11211) (begin (if (procedure? fender$645$11211) (void) (error (quote assert) (quote "~s failed") (quote (procedure? fender)))) ((lambda (x$645$11214) (lambda g$645$11218 ((lambda (g$645$11219) (if (= g$645$11219 (quote 0)) (apply (lambda () x$645$11214) g$645$11218) (if (= g$645$11219 (quote 1)) (apply (lambda (v$645$11216) (set! x$645$11214 (fender$645$11211 v$645$11216))) g$645$11218) (error (quote apply) (quote "invalid arg count"))))) (length g$645$11218)))) (fender$645$11211 x$645$11210)))) g$645$11220) (error (quote apply) (quote "invalid arg count"))))) (length g$645$11220)))) (set! make-parameter$645$11224 make-parameter$645$11009))) (quote #f)))


(begin (define current-primitive-locations$645$11302 (quote #f)) (define mutable?$645$11301 (quote #f)) (define rewriter$645$11300 (quote #f)) (define need-quote-hack?$645$11299 (quote #f)) (define expanded->core$645$11298 (quote #f)) (define compile-core-expr-to-port$645$11297 (quote #f)) ((lambda (current-primitive-locations$645$11226 mutable?$645$11228 rewriter$645$11230 need-quote-hack?$645$11232 expanded->core$645$11234 compile-core-expr-to-port$645$11236) (begin (set! current-primitive-locations$645$11226 (make-parameter$645$11224 (lambda (x$645$11238) (quote #f)) (lambda (p$645$11240) (begin (if (procedure? p$645$11240) (void) (error (quote assert) (quote "~s failed") (quote (procedure? p)))) p$645$11240)))) (set! mutable?$645$11228 (lambda (x$645$11242) ((lambda (simple?$645$11244) (begin (set! simple?$645$11244 (lambda (x$645$11246) ((lambda (t$645$11248) (if t$645$11248 t$645$11248 ((lambda (t$645$11250) (if t$645$11250 t$645$11250 ((lambda (t$645$11252) (if t$645$11252 t$645$11252 ((lambda (t$645$11254) (if t$645$11254 t$645$11254 (begin (quote #f) (number? x$645$11246)))) (boolean? x$645$11246)))) (symbol? x$645$11246)))) (char? x$645$11246)))) (null? x$645$11246)))) (not (simple?$645$11244 x$645$11242)))) (quote #f)))) (set! rewriter$645$11230 (lambda (quote-hack?$645$11256) ((lambda (f$645$11258) (begin (set! f$645$11258 (lambda (x$645$11260) (if (pair? x$645$11260) ((lambda (t$645$11262) (if (memv t$645$11262 (quote (quote))) (if (if quote-hack?$645$11256 (begin (quote #f) (mutable?$645$11228 (cadr x$645$11260))) (quote #f)) ((lambda (g$645$11287) (begin (set-symbol-value! g$645$11287 (cadr x$645$11260)) g$645$11287)) (gensym)) x$645$11260) (if (memv t$645$11262 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (x$645$11285) (cons (car x$645$11285) (map f$645$11258 (cdr x$645$11285)))) (cdr x$645$11260))) (if (memv t$645$11262 (quote (lambda))) (cons* (quote lambda) (cadr x$645$11260) (map f$645$11258 (cddr x$645$11260))) (if (memv t$645$11262 (quote (letrec))) ((lambda (bindings$645$11277 body*$645$11278) ((lambda (lhs*$645$11281 rhs*$645$11282) (cons* (quote letrec) (map list lhs*$645$11281 (map f$645$11258 rhs*$645$11282)) (map f$645$11258 body*$645$11278))) (map car bindings$645$11277) (map cadr bindings$645$11277))) (cadr x$645$11260) (cddr x$645$11260)) (if (memv t$645$11262 (quote (letrec*))) ((lambda (bindings$645$11269 body*$645$11270) ((lambda (lhs*$645$11273 rhs*$645$11274) (cons* (quote letrec*) (map list lhs*$645$11273 (map f$645$11258 rhs*$645$11274)) (map f$645$11258 body*$645$11270))) (map car bindings$645$11269) (map cadr bindings$645$11269))) (cadr x$645$11260) (cddr x$645$11260)) (if (memv t$645$11262 (quote (begin))) (cons (quote begin) (map f$645$11258 (cdr x$645$11260))) (if (memv t$645$11262 (quote (set!))) (list (quote set!) (cadr x$645$11260) (f$645$11258 (caddr x$645$11260))) (if (memv t$645$11262 (quote (primitive))) ((lambda (op$645$11263) ((lambda (t$645$11265) (if t$645$11265 ((lambda (loc$645$11267) loc$645$11267) t$645$11265) op$645$11263)) ((current-primitive-locations$645$11226) op$645$11263))) (cadr x$645$11260)) (if (memv t$645$11262 (quote (define))) x$645$11260 (if (list? x$645$11260) (map f$645$11258 x$645$11260) (error (quote rewrite) (quote "invalid form ~s ~s") x$645$11260 (list? x$645$11260))))))))))))) (car x$645$11260)) x$645$11260))) f$645$11258)) (quote #f)))) (set! need-quote-hack?$645$11232 ((lambda (x$645$11289) (not (eq? (eval-core (list (quote quote) x$645$11289)) (eval-core (list (quote quote) x$645$11289))))) (cons (quote 1) (quote 2)))) (set! expanded->core$645$11234 (lambda (x$645$11291) ((rewriter$645$11230 need-quote-hack?$645$11232) x$645$11291))) (set! compile-core-expr-to-port$645$11236 (lambda (x$645$11293 p$645$11294) (begin (pretty-print ((rewriter$645$11230 (quote #f)) x$645$11293) p$645$11294) (newline p$645$11294)))) (begin (set! compile-core-expr-to-port$645$11297 compile-core-expr-to-port$645$11236) (set! expanded->core$645$11298 expanded->core$645$11234) (set! need-quote-hack?$645$11299 need-quote-hack?$645$11232) (set! rewriter$645$11300 rewriter$645$11230) (set! mutable?$645$11301 mutable?$645$11228) (set! current-primitive-locations$645$11302 current-primitive-locations$645$11226)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define make-collection$645$11790 (quote #f)) (define current-library-collection$645$11789 (quote #f)) (define make-library$645$11788 (quote #f)) (define library?$645$11787 (quote #f)) (define library-id$645$11786 (quote #f)) (define library-name$645$11785 (quote #f)) (define library-ver$645$11784 (quote #f)) (define library-imp*$645$11783 (quote #f)) (define library-vis*$645$11782 (quote #f)) (define library-inv*$645$11781 (quote #f)) (define library-subst$645$11780 (quote #f)) (define library-env$645$11779 (quote #f)) (define library-visit-state$645$11778 (quote #f)) (define library-invoke-state$645$11777 (quote #f)) (define library-visible?$645$11776 (quote #f)) (define set-library-id!$645$11775 (quote #f)) (define set-library-name!$645$11774 (quote #f)) (define set-library-ver!$645$11773 (quote #f)) (define set-library-imp*!$645$11772 (quote #f)) (define set-library-vis*!$645$11771 (quote #f)) (define set-library-inv*!$645$11770 (quote #f)) (define set-library-subst!$645$11769 (quote #f)) (define set-library-env!$645$11768 (quote #f)) (define set-library-visit-state!$645$11767 (quote #f)) (define set-library-invoke-state!$645$11766 (quote #f)) (define set-library-visible?!$645$11765 (quote #f)) (define find-dependencies$645$11764 (quote #f)) (define find-library-by$645$11763 (quote #f)) (define library-path$645$11762 (quote #f)) (define library-name->file-name$645$11761 (quote #f)) (define file-locator$645$11760 (quote #f)) (define library-locator$645$11759 (quote #f)) (define current-library-expander$645$11758 (quote #f)) (define external-pending-libraries$645$11757 (quote #f)) (define find-external-library$645$11756 (quote #f)) (define find-library-by-name$645$11755 (quote #f)) (define library-exists?$645$11754 (quote #f)) (define find-library-by-spec/die$645$11753 (quote #f)) (define label->binding-table$645$11752 (quote #f)) (define install-library-record$645$11751 (quote #f)) (define install-library$645$11750 (quote #f)) (define extend-library-subst!$645$11749 (quote #f)) (define extend-library-env!$645$11748 (quote #f)) (define imported-label->binding$645$11747 (quote #f)) (define invoke-library$645$11746 (quote #f)) (define visit-library$645$11745 (quote #f)) (define invoke-library-by-spec$645$11744 (quote #f)) (define installed-libraries$645$11743 (quote #f)) (define library-spec$645$11742 (quote #f)) ((lambda (make-collection$645$11366 current-library-collection$645$11368 make-library$645$11371 library?$645$11373 library-id$645$11375 library-name$645$11377 library-ver$645$11379 library-imp*$645$11381 library-vis*$645$11383 library-inv*$645$11385 library-subst$645$11387 library-env$645$11389 library-visit-state$645$11391 library-invoke-state$645$11393 library-visible?$645$11395 set-library-id!$645$11397 set-library-name!$645$11399 set-library-ver!$645$11401 set-library-imp*!$645$11403 set-library-vis*!$645$11405 set-library-inv*!$645$11407 set-library-subst!$645$11409 set-library-env!$645$11411 set-library-visit-state!$645$11413 set-library-invoke-state!$645$11415 set-library-visible?!$645$11417 find-dependencies$645$11419 find-library-by$645$11421 library-path$645$11423 library-name->file-name$645$11425 file-locator$645$11427 library-locator$645$11429 current-library-expander$645$11431 external-pending-libraries$645$11433 find-external-library$645$11435 find-library-by-name$645$11437 library-exists?$645$11439 find-library-by-spec/die$645$11441 label->binding-table$645$11443 install-library-record$645$11445 install-library$645$11447 extend-library-subst!$645$11449 extend-library-env!$645$11451 imported-label->binding$645$11453 invoke-library$645$11455 visit-library$645$11457 invoke-library-by-spec$645$11459 installed-libraries$645$11461 library-spec$645$11463) (begin (set! make-collection$645$11366 (lambda () ((lambda (set$645$11465) ((lambda (set-cons$645$11467) (begin (set! set-cons$645$11467 (lambda (x$645$11469 ls$645$11470) (if (memq x$645$11469 ls$645$11470) ls$645$11470 (cons x$645$11469 ls$645$11470)))) (lambda g$645$11475 ((lambda (g$645$11476) (if (= g$645$11476 (quote 0)) (apply (lambda () set$645$11465) g$645$11475) (if (= g$645$11476 (quote 1)) (apply (lambda (x$645$11473) (set! set$645$11465 (set-cons$645$11467 x$645$11473 set$645$11465))) g$645$11475) (error (quote apply) (quote "invalid arg count"))))) (length g$645$11475))))) (quote #f))) (quote ())))) (set! current-library-collection$645$11368 (make-parameter$645$11224 (make-collection$645$11366) (lambda (x$645$11477) (begin (if (procedure? x$645$11477) (void) (error (quote current-library-collection) (quote "~s is not a procedure") x$645$11477)) x$645$11477)))) (set! make-library$645$11371 (lambda (id$645$11479 name$645$11480 ver$645$11481 imp*$645$11482 vis*$645$11483 inv*$645$11484 subst$645$11485 env$645$11486 visit-state$645$11487 invoke-state$645$11488 visible?$645$11489) (vector (quote g$645$11370) id$645$11479 name$645$11480 ver$645$11481 imp*$645$11482 vis*$645$11483 inv*$645$11484 subst$645$11485 env$645$11486 visit-state$645$11487 invoke-state$645$11488 visible?$645$11489))) (set! library?$645$11373 (lambda (x$645$11501) (if (vector? x$645$11501) (if (= (vector-length x$645$11501) (+ (quote 1) (length (quote (id name ver imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref x$645$11501 (quote 0)) (quote g$645$11370))) (quote #f)) (quote #f)))) (set! library-id$645$11375 (lambda (x$645$11503) (if (library?$645$11373 x$645$11503) (vector-ref x$645$11503 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") x$645$11503 (quote library))))) (set! library-name$645$11377 (lambda (x$645$11505) (if (library?$645$11373 x$645$11505) (vector-ref x$645$11505 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") x$645$11505 (quote library))))) (set! library-ver$645$11379 (lambda (x$645$11507) (if (library?$645$11373 x$645$11507) (vector-ref x$645$11507 (quote 3)) (error (quote library-ver) (quote "~s is not of type ~s") x$645$11507 (quote library))))) (set! library-imp*$645$11381 (lambda (x$645$11509) (if (library?$645$11373 x$645$11509) (vector-ref x$645$11509 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") x$645$11509 (quote library))))) (set! library-vis*$645$11383 (lambda (x$645$11511) (if (library?$645$11373 x$645$11511) (vector-ref x$645$11511 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") x$645$11511 (quote library))))) (set! library-inv*$645$11385 (lambda (x$645$11513) (if (library?$645$11373 x$645$11513) (vector-ref x$645$11513 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") x$645$11513 (quote library))))) (set! library-subst$645$11387 (lambda (x$645$11515) (if (library?$645$11373 x$645$11515) (vector-ref x$645$11515 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") x$645$11515 (quote library))))) (set! library-env$645$11389 (lambda (x$645$11517) (if (library?$645$11373 x$645$11517) (vector-ref x$645$11517 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") x$645$11517 (quote library))))) (set! library-visit-state$645$11391 (lambda (x$645$11519) (if (library?$645$11373 x$645$11519) (vector-ref x$645$11519 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") x$645$11519 (quote library))))) (set! library-invoke-state$645$11393 (lambda (x$645$11521) (if (library?$645$11373 x$645$11521) (vector-ref x$645$11521 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") x$645$11521 (quote library))))) (set! library-visible?$645$11395 (lambda (x$645$11523) (if (library?$645$11373 x$645$11523) (vector-ref x$645$11523 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") x$645$11523 (quote library))))) (set! set-library-id!$645$11397 (lambda (x$645$11525 v$645$11526) (if (library?$645$11373 x$645$11525) (vector-set! x$645$11525 (quote 1) v$645$11526) (error (quote set-library-id!) (quote "~s is not of type ~s") x$645$11525 (quote library))))) (set! set-library-name!$645$11399 (lambda (x$645$11529 v$645$11530) (if (library?$645$11373 x$645$11529) (vector-set! x$645$11529 (quote 2) v$645$11530) (error (quote set-library-name!) (quote "~s is not of type ~s") x$645$11529 (quote library))))) (set! set-library-ver!$645$11401 (lambda (x$645$11533 v$645$11534) (if (library?$645$11373 x$645$11533) (vector-set! x$645$11533 (quote 3) v$645$11534) (error (quote set-library-ver!) (quote "~s is not of type ~s") x$645$11533 (quote library))))) (set! set-library-imp*!$645$11403 (lambda (x$645$11537 v$645$11538) (if (library?$645$11373 x$645$11537) (vector-set! x$645$11537 (quote 4) v$645$11538) (error (quote set-library-imp*!) (quote "~s is not of type ~s") x$645$11537 (quote library))))) (set! set-library-vis*!$645$11405 (lambda (x$645$11541 v$645$11542) (if (library?$645$11373 x$645$11541) (vector-set! x$645$11541 (quote 5) v$645$11542) (error (quote set-library-vis*!) (quote "~s is not of type ~s") x$645$11541 (quote library))))) (set! set-library-inv*!$645$11407 (lambda (x$645$11545 v$645$11546) (if (library?$645$11373 x$645$11545) (vector-set! x$645$11545 (quote 6) v$645$11546) (error (quote set-library-inv*!) (quote "~s is not of type ~s") x$645$11545 (quote library))))) (set! set-library-subst!$645$11409 (lambda (x$645$11549 v$645$11550) (if (library?$645$11373 x$645$11549) (vector-set! x$645$11549 (quote 7) v$645$11550) (error (quote set-library-subst!) (quote "~s is not of type ~s") x$645$11549 (quote library))))) (set! set-library-env!$645$11411 (lambda (x$645$11553 v$645$11554) (if (library?$645$11373 x$645$11553) (vector-set! x$645$11553 (quote 8) v$645$11554) (error (quote set-library-env!) (quote "~s is not of type ~s") x$645$11553 (quote library))))) (set! set-library-visit-state!$645$11413 (lambda (x$645$11557 v$645$11558) (if (library?$645$11373 x$645$11557) (vector-set! x$645$11557 (quote 9) v$645$11558) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") x$645$11557 (quote library))))) (set! set-library-invoke-state!$645$11415 (lambda (x$645$11561 v$645$11562) (if (library?$645$11373 x$645$11561) (vector-set! x$645$11561 (quote 10) v$645$11562) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") x$645$11561 (quote library))))) (set! set-library-visible?!$645$11417 (lambda (x$645$11565 v$645$11566) (if (library?$645$11373 x$645$11565) (vector-set! x$645$11565 (quote 11) v$645$11566) (error (quote set-library-visible?!) (quote "~s is not of type ~s") x$645$11565 (quote library))))) (set! find-dependencies$645$11419 (lambda (ls$645$11569) (if (null? ls$645$11569) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! find-library-by$645$11421 (lambda (pred$645$11571) (letrec ((f$645$11573 (lambda (ls$645$11575) (if (null? ls$645$11575) (quote #f) (if (pred$645$11571 (car ls$645$11575)) (car ls$645$11575) (f$645$11573 (cdr ls$645$11575))))))) (f$645$11573 ((current-library-collection$645$11368)))))) (set! library-path$645$11423 (make-parameter$645$11224 (quote (".")) (lambda (x$645$11577) (if (if (list? x$645$11577) (begin (quote #f) (for-all string? x$645$11577)) (quote #f)) (map (lambda (x$645$11579) x$645$11579) x$645$11577) (error (quote library-path) (quote "~s is not a list of strings") x$645$11577))))) (set! library-name->file-name$645$11425 (lambda (x$645$11581) (call-with-values (lambda () (open-string-output-port)) (lambda (p$645$11583 extract$645$11584) ((lambda (display-hex$645$11587) (begin (set! display-hex$645$11587 (lambda (n$645$11589) (if (<= (quote 0) n$645$11589 (quote 9)) (display n$645$11589 p$645$11583) (display (integer->char (+ (char->integer (quote #\A)) (- n$645$11589 (quote 10)))) p$645$11583)))) (begin (letrec ((f$645$11591 (lambda (ls$645$11593) (if (null? ls$645$11593) (display (quote ".ss") p$645$11583) (begin (display (quote "/") p$645$11583) (for-each (lambda (c$645$11595) (if ((lambda (t$645$11597) (if t$645$11597 t$645$11597 ((lambda (t$645$11599) (if t$645$11599 t$645$11599 ((lambda (t$645$11601) (if t$645$11601 t$645$11601 (begin (quote #f) (memv c$645$11595 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) c$645$11595 (quote #\9))))) (char<=? (quote #\A) c$645$11595 (quote #\Z))))) (char<=? (quote #\a) c$645$11595 (quote #\z))) (display c$645$11595 p$645$11583) (begin (display (quote "%") p$645$11583) ((lambda (n$645$11603) (begin (display-hex$645$11587 (quotient n$645$11603 (quote 16))) (display-hex$645$11587 (remainder n$645$11603 (quote 16))))) (char->integer c$645$11595))))) (string->list (symbol->string (car ls$645$11593)))) (f$645$11591 (cdr ls$645$11593))))))) (f$645$11591 x$645$11581)) (extract$645$11584)))) (quote #f)))))) (set! file-locator$645$11427 (make-parameter$645$11224 (lambda (x$645$11605) ((lambda (str$645$11607) (letrec ((f$645$11609 (lambda (ls$645$11611) (if (pair? ls$645$11611) (begin (quote #f) ((lambda (name$645$11613) (if (file-exists? name$645$11613) name$645$11613 (f$645$11609 (cdr ls$645$11611)))) (string-append (car ls$645$11611) str$645$11607))) (quote #f))))) (f$645$11609 (library-path$645$11423)))) (library-name->file-name$645$11425 x$645$11605))) (lambda (f$645$11615) (if (procedure? f$645$11615) f$645$11615 (error (quote file-locator) (quote "~s is not a procedure") f$645$11615))))) (set! library-locator$645$11429 (make-parameter$645$11224 (lambda (x$645$11617) ((lambda (file-name$645$11619) (if (string? file-name$645$11619) (begin (quote #f) (with-input-from-file file-name$645$11619 read)) (quote #f))) ((file-locator$645$11427) x$645$11617))) (lambda (f$645$11621) (if (procedure? f$645$11621) f$645$11621 (error (quote library-locator) (quote "~s is not a procedure") f$645$11621))))) (set! current-library-expander$645$11431 (make-parameter$645$11224 (lambda (x$645$11623) (error (quote library-expander) (quote "not initialized"))) (lambda (f$645$11625) (if (procedure? f$645$11625) f$645$11625 (error (quote library-expander) (quote "~s is not a procedure") f$645$11625))))) (set! external-pending-libraries$645$11433 (make-parameter$645$11224 (quote ()))) (set! find-external-library$645$11435 (lambda (name$645$11627) (begin (if (member name$645$11627 (external-pending-libraries$645$11433)) (error (quote #f) (quote "circular attempt to import library ~s detected") name$645$11627) (void)) ((lambda (t$645$11631 t$645$11632) ((lambda (swap$645$11635) (dynamic-wind swap$645$11635 (lambda () ((lambda (lib-expr$645$11637) (begin (if lib-expr$645$11637 (void) (error (quote #f) (quote "cannot find library ~s") name$645$11627)) ((current-library-expander$645$11431) lib-expr$645$11637) ((lambda (t$645$11639) (if t$645$11639 t$645$11639 (begin (quote #f) (error (quote #f) (quote "handling external library of ~s did not yield the currect library") name$645$11627)))) (find-library-by$645$11421 (lambda (x$645$11641) (equal? (library-name$645$11377 x$645$11641) name$645$11627)))))) ((library-locator$645$11429) name$645$11627))) swap$645$11635)) (lambda () ((lambda (t$645$11643) (begin (t$645$11631 t$645$11632) (set! t$645$11632 t$645$11643))) (t$645$11631))))) external-pending-libraries$645$11433 (cons name$645$11627 (external-pending-libraries$645$11433)))))) (set! find-library-by-name$645$11437 (lambda (name$645$11645) ((lambda (t$645$11647) (if t$645$11647 t$645$11647 (begin (quote #f) (find-external-library$645$11435 name$645$11645)))) (find-library-by$645$11421 (lambda (x$645$11649) (equal? (library-name$645$11377 x$645$11649) name$645$11645)))))) (set! library-exists?$645$11439 (lambda (name$645$11651) (if (find-library-by$645$11421 (lambda (x$645$11653) (equal? (library-name$645$11377 x$645$11653) name$645$11651))) (begin (quote #f) (quote #t)) (quote #f)))) (set! find-library-by-spec/die$645$11441 (lambda (spec$645$11655) ((lambda (id$645$11657) ((lambda (t$645$11659) (if t$645$11659 t$645$11659 (begin (quote #f) (error (quote #f) (quote "cannot find library with spec ~s") spec$645$11655)))) (find-library-by$645$11421 (lambda (x$645$11661) (eq? id$645$11657 (library-id$645$11375 x$645$11661)))))) (car spec$645$11655)))) (set! label->binding-table$645$11443 (make-hashtable)) (set! install-library-record$645$11445 (lambda (lib$645$11663) (begin ((lambda (exp-env$645$11665) (for-each (lambda (x$645$11667) ((lambda (label$645$11669 binding$645$11670) ((lambda (binding$645$11673) (hashtable-set! label->binding-table$645$11443 label$645$11669 binding$645$11673)) ((lambda (t$645$11675) (if (memv t$645$11675 (quote (global))) (cons (quote global) (cons lib$645$11663 (cdr binding$645$11670))) (if (memv t$645$11675 (quote (global-macro))) (cons (quote global-macro) (cons lib$645$11663 (cdr binding$645$11670))) (if (memv t$645$11675 (quote (global-macro!))) (cons (quote global-macro!) (cons lib$645$11663 (cdr binding$645$11670))) binding$645$11670)))) (car binding$645$11670)))) (car x$645$11667) (cdr x$645$11667))) exp-env$645$11665)) (library-env$645$11389 lib$645$11663)) ((current-library-collection$645$11368) lib$645$11663)))) (set! install-library$645$11447 (lambda (id$645$11676 name$645$11677 ver$645$11678 imp*$645$11679 vis*$645$11680 inv*$645$11681 exp-subst$645$11682 exp-env$645$11683 visit-code$645$11684 invoke-code$645$11685 visible?$645$11686) ((lambda (imp-lib*$645$11698 vis-lib*$645$11699 inv-lib*$645$11700) (begin (if (if (symbol? id$645$11676) (if (list? name$645$11677) (begin (quote #f) (list? ver$645$11678)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec ~s ~s ~s") id$645$11676 name$645$11677 ver$645$11678)) (if (library-exists?$645$11439 name$645$11677) (error (quote install-library) (quote "~s is already installed") name$645$11677) (void)) ((lambda (lib$645$11704) (install-library-record$645$11445 lib$645$11704)) (make-library$645$11371 id$645$11676 name$645$11677 ver$645$11678 imp-lib*$645$11698 vis-lib*$645$11699 inv-lib*$645$11700 exp-subst$645$11682 exp-env$645$11683 visit-code$645$11684 invoke-code$645$11685 visible?$645$11686)))) (map find-library-by-spec/die$645$11441 imp*$645$11679) (map find-library-by-spec/die$645$11441 vis*$645$11680) (map find-library-by-spec/die$645$11441 inv*$645$11681)))) (set! extend-library-subst!$645$11449 (lambda (lib$645$11706 sym$645$11707 label$645$11708) (set-library-subst!$645$11409 lib$645$11706 (cons (cons sym$645$11707 label$645$11708) (library-subst$645$11387 lib$645$11706))))) (set! extend-library-env!$645$11451 (lambda (lib$645$11712 label$645$11713 binding$645$11714) (begin (set-library-env!$645$11411 lib$645$11712 (cons (cons label$645$11713 binding$645$11714) (library-env$645$11389 lib$645$11712))) (hashtable-set! label->binding-table$645$11443 label$645$11713 binding$645$11714)))) (set! imported-label->binding$645$11453 (lambda (lab$645$11718) (hashtable-ref label->binding-table$645$11443 lab$645$11718 (quote #f)))) (set! invoke-library$645$11455 (lambda (lib$645$11720) ((lambda (invoke$645$11722) (if (procedure? invoke$645$11722) (begin (set-library-invoke-state!$645$11415 lib$645$11720 (lambda () (error (quote invoke) (quote "circularity detected for ~s") lib$645$11720))) (for-each invoke-library$645$11455 (library-inv*$645$11385 lib$645$11720)) (set-library-invoke-state!$645$11415 lib$645$11720 (lambda () (error (quote invoke) (quote "first invoke did not return for ~s") lib$645$11720))) (invoke$645$11722) (set-library-invoke-state!$645$11415 lib$645$11720 (quote #t))) (void))) (library-invoke-state$645$11393 lib$645$11720)))) (set! visit-library$645$11457 (lambda (lib$645$11724) ((lambda (visit$645$11726) (if (procedure? visit$645$11726) (begin (set-library-visit-state!$645$11413 lib$645$11724 (lambda () (error (quote visit) (quote "circularity detected for ~s") lib$645$11724))) (for-each invoke-library$645$11455 (library-vis*$645$11383 lib$645$11724)) (set-library-visit-state!$645$11413 lib$645$11724 (lambda () (error (quote invoke) (quote "first visit did not return for ~s") lib$645$11724))) (visit$645$11726) (set-library-visit-state!$645$11413 lib$645$11724 (quote #t))) (void))) (library-visit-state$645$11391 lib$645$11724)))) (set! invoke-library-by-spec$645$11459 (lambda (spec$645$11728) (invoke-library$645$11455 (find-library-by-spec/die$645$11441 spec$645$11728)))) (set! installed-libraries$645$11461 (lambda g$645$11738 ((lambda (g$645$11739) (if (= g$645$11739 (quote 1)) (apply (lambda (all?$645$11730) (letrec ((f$645$11732 (lambda (ls$645$11734) (if (null? ls$645$11734) (quote ()) (if ((lambda (t$645$11736) (if t$645$11736 t$645$11736 (begin (quote #f) (library-visible?$645$11395 (car ls$645$11734))))) all?$645$11730) (cons (car ls$645$11734) (f$645$11732 (cdr ls$645$11734))) (f$645$11732 (cdr ls$645$11734))))))) (f$645$11732 ((current-library-collection$645$11368))))) g$645$11738) (if (= g$645$11739 (quote 0)) (apply (lambda () (installed-libraries$645$11461 (quote #f))) g$645$11738) (error (quote apply) (quote "invalid arg count"))))) (length g$645$11738)))) (set! library-spec$645$11463 (lambda (x$645$11740) (begin (if (library?$645$11373 x$645$11740) (void) (error (quote library-spec) (quote "~s is not a library") x$645$11740)) (list (library-id$645$11375 x$645$11740) (library-name$645$11377 x$645$11740) (library-ver$645$11379 x$645$11740))))) (begin (set! library-spec$645$11742 library-spec$645$11463) (set! installed-libraries$645$11743 installed-libraries$645$11461) (set! invoke-library-by-spec$645$11744 invoke-library-by-spec$645$11459) (set! visit-library$645$11745 visit-library$645$11457) (set! invoke-library$645$11746 invoke-library$645$11455) (set! imported-label->binding$645$11747 imported-label->binding$645$11453) (set! extend-library-env!$645$11748 extend-library-env!$645$11451) (set! extend-library-subst!$645$11749 extend-library-subst!$645$11449) (set! install-library$645$11750 install-library$645$11447) (set! install-library-record$645$11751 install-library-record$645$11445) (set! label->binding-table$645$11752 label->binding-table$645$11443) (set! find-library-by-spec/die$645$11753 find-library-by-spec/die$645$11441) (set! library-exists?$645$11754 library-exists?$645$11439) (set! find-library-by-name$645$11755 find-library-by-name$645$11437) (set! find-external-library$645$11756 find-external-library$645$11435) (set! external-pending-libraries$645$11757 external-pending-libraries$645$11433) (set! current-library-expander$645$11758 current-library-expander$645$11431) (set! library-locator$645$11759 library-locator$645$11429) (set! file-locator$645$11760 file-locator$645$11427) (set! library-name->file-name$645$11761 library-name->file-name$645$11425) (set! library-path$645$11762 library-path$645$11423) (set! find-library-by$645$11763 find-library-by$645$11421) (set! find-dependencies$645$11764 find-dependencies$645$11419) (set! set-library-visible?!$645$11765 set-library-visible?!$645$11417) (set! set-library-invoke-state!$645$11766 set-library-invoke-state!$645$11415) (set! set-library-visit-state!$645$11767 set-library-visit-state!$645$11413) (set! set-library-env!$645$11768 set-library-env!$645$11411) (set! set-library-subst!$645$11769 set-library-subst!$645$11409) (set! set-library-inv*!$645$11770 set-library-inv*!$645$11407) (set! set-library-vis*!$645$11771 set-library-vis*!$645$11405) (set! set-library-imp*!$645$11772 set-library-imp*!$645$11403) (set! set-library-ver!$645$11773 set-library-ver!$645$11401) (set! set-library-name!$645$11774 set-library-name!$645$11399) (set! set-library-id!$645$11775 set-library-id!$645$11397) (set! library-visible?$645$11776 library-visible?$645$11395) (set! library-invoke-state$645$11777 library-invoke-state$645$11393) (set! library-visit-state$645$11778 library-visit-state$645$11391) (set! library-env$645$11779 library-env$645$11389) (set! library-subst$645$11780 library-subst$645$11387) (set! library-inv*$645$11781 library-inv*$645$11385) (set! library-vis*$645$11782 library-vis*$645$11383) (set! library-imp*$645$11783 library-imp*$645$11381) (set! library-ver$645$11784 library-ver$645$11379) (set! library-name$645$11785 library-name$645$11377) (set! library-id$645$11786 library-id$645$11375) (set! library?$645$11787 library?$645$11373) (set! make-library$645$11788 make-library$645$11371) (set! current-library-collection$645$11789 current-library-collection$645$11368) (set! make-collection$645$11790 make-collection$645$11366)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define build-global-define$645$12105 (quote #f)) (define build-lambda$645$12097 (quote #f)) (define build-case-lambda$645$12096 (quote #f)) (define build-let$645$12095 (quote #f)) (define build-sequence$645$12091 (quote #f)) (define build-void$645$12090 (quote #f)) (define build-letrec$645$12089 (quote #f)) (define build-letrec*$645$12088 (quote #f)) ((lambda (build-global-define$645$11792 build-lambda$645$11910 build-case-lambda$645$11912 build-let$645$11914 build-sequence$645$11978 build-void$645$11980 build-letrec$645$11982 build-letrec*$645$11984) (begin (set! build-global-define$645$11792 (lambda (x$645$11986) (cons (quote define) (cons x$645$11986 (quote ((quote #f))))))) (set! build-lambda$645$11910 (lambda (ae$645$11988 vars$645$11989 exp$645$11990) (list (quote lambda) vars$645$11989 exp$645$11990))) (set! build-case-lambda$645$11912 (lambda (ae$645$11994 vars*$645$11995 exp*$645$11996) ((lambda (build-error$645$12000 build-pred$645$12002 build-apply$645$12004 expand-case-lambda$645$12006) (begin (set! build-error$645$12000 (lambda (ae$645$12048) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! build-pred$645$12002 (lambda (ae$645$12032 n$645$12033 vars$645$12034) (call-with-values (lambda () (letrec ((f$645$12038 (lambda (vars$645$12040 count$645$12041) (if (pair? vars$645$12040) (f$645$12038 (cdr vars$645$12040) (+ count$645$12041 (quote 1))) (if (null? vars$645$12040) (values count$645$12041 (quote =)) (values count$645$12041 (quote >=))))))) (f$645$12038 vars$645$12034 (quote 0)))) (lambda (count$645$12044 pred$645$12045) (list (list (quote primitive) pred$645$12045) n$645$12033 (list (quote quote) count$645$12044)))))) (set! build-apply$645$12004 (lambda (ae$645$12024 g$645$12025 vars$645$12026 exp$645$12027) (list (quote (primitive apply)) (build-lambda$645$11910 ae$645$12024 vars$645$12026 exp$645$12027) g$645$12025))) (set! expand-case-lambda$645$12006 (lambda (ae$645$12008 vars$645$12009 exp*$645$12010) ((lambda (g$645$12014 n$645$12015) (list (quote lambda) g$645$12014 (build-let$645$11914 ae$645$12008 (list n$645$12015) (list (list (quote (primitive length)) g$645$12014)) (letrec ((f$645$12018 (lambda (vars*$645$12020 exp*$645$12021) (if (null? vars*$645$12020) (build-error$645$12000 ae$645$12008) (list (quote if) (build-pred$645$12002 ae$645$12008 n$645$12015 (car vars*$645$12020)) (build-apply$645$12004 ae$645$12008 g$645$12014 (car vars*$645$12020) (car exp*$645$12021)) (f$645$12018 (cdr vars*$645$12020) (cdr exp*$645$12021))))))) (f$645$12018 vars*$645$11995 exp*$645$12010))))) (gensym) (gensym)))) (if (= (length exp*$645$11996) (quote 1)) (build-lambda$645$11910 ae$645$11994 (car vars*$645$11995) (car exp*$645$11996)) (expand-case-lambda$645$12006 ae$645$11994 vars*$645$11995 exp*$645$11996)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! build-let$645$11914 (lambda (ae$645$12050 lhs*$645$12051 rhs*$645$12052 body$645$12053) (cons (build-lambda$645$11910 ae$645$12050 lhs*$645$12051 body$645$12053) rhs*$645$12052))) (set! build-sequence$645$11978 (lambda (ae$645$12058 exps$645$12059) (letrec ((loop$645$12062 (lambda (exps$645$12064) (if (null? (cdr exps$645$12064)) (car exps$645$12064) (if (equal? (car exps$645$12064) (build-void$645$11980)) (loop$645$12062 (cdr exps$645$12064)) (cons (quote begin) exps$645$12064)))))) (loop$645$12062 exps$645$12059)))) (set! build-void$645$11980 (lambda () (quote ((primitive void))))) (set! build-letrec$645$11982 (lambda (ae$645$12066 vars$645$12067 val-exps$645$12068 body-exp$645$12069) (if (null? vars$645$12067) body-exp$645$12069 (list (quote letrec) (map list vars$645$12067 val-exps$645$12068) body-exp$645$12069)))) (set! build-letrec*$645$11984 (lambda (ae$645$12074 vars$645$12075 val-exps$645$12076 body-exp$645$12077) (if (null? vars$645$12075) body-exp$645$12077 (build-let$645$11914 ae$645$12074 vars$645$12075 (map (lambda (x$645$12082) (list (quote quote) (quote #f))) vars$645$12075) (build-sequence$645$11978 ae$645$12074 (append (map (lambda (lhs$645$12084 rhs$645$12085) (list (quote set!) lhs$645$12084 rhs$645$12085)) vars$645$12075 val-exps$645$12076) (list body-exp$645$12077))))))) (begin (set! build-letrec*$645$12088 build-letrec*$645$11984) (set! build-letrec$645$12089 build-letrec$645$11982) (set! build-void$645$12090 build-void$645$11980) (set! build-sequence$645$12091 build-sequence$645$11978) (set! build-let$645$12095 build-let$645$11914) (set! build-case-lambda$645$12096 build-case-lambda$645$11912) (set! build-lambda$645$12097 build-lambda$645$11910) (set! build-global-define$645$12105 build-global-define$645$11792)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define set-cons$645$20357 (quote #f)) (define set-union$645$20356 (quote #f)) (define top-mark*$645$20354 (quote #f)) (define top-marked?$645$20353 (quote #f)) (define gen-lexical$645$20352 (quote #f)) (define gen-global$645$20351 (quote #f)) (define gen-label$645$20350 (quote #f)) (define make-rib$645$20349 (quote #f)) (define rib?$645$20348 (quote #f)) (define rib-sym*$645$20347 (quote #f)) (define rib-mark**$645$20346 (quote #f)) (define rib-label*$645$20345 (quote #f)) (define rib-sealed/freq$645$20344 (quote #f)) (define set-rib-sym*!$645$20343 (quote #f)) (define set-rib-mark**!$645$20342 (quote #f)) (define set-rib-label*!$645$20341 (quote #f)) (define set-rib-sealed/freq!$645$20340 (quote #f)) (define make-empty-rib$645$20339 (quote #f)) (define extend-rib!$645$20338 (quote #f)) (define seal-rib!$645$20337 (quote #f)) (define unseal-rib!$645$20336 (quote #f)) (define increment-rib-frequency!$645$20335 (quote #f)) (define make-full-rib$645$20334 (quote #f)) (define make-stx$645$20333 (quote #f)) (define stx?$645$20332 (quote #f)) (define stx-expr$645$20331 (quote #f)) (define stx-mark*$645$20330 (quote #f)) (define stx-subst*$645$20329 (quote #f)) (define set-stx-expr!$645$20328 (quote #f)) (define set-stx-mark*!$645$20327 (quote #f)) (define set-stx-subst*!$645$20326 (quote #f)) (define datum->stx$645$20325 (quote #f)) (define gen-mark$645$20324 (quote #f)) (define anti-mark$645$20323 (quote #f)) (define anti-mark?$645$20322 (quote #f)) (define join-wraps$645$20321 (quote #f)) (define mkstx$645$20320 (quote #f)) (define add-mark$645$20319 (quote #f)) (define add-subst$645$20318 (quote #f)) (define syntax-kind?$645$20317 (quote #f)) (define syntax-vector->list$645$20316 (quote #f)) (define syntax-pair?$645$20315 (quote #f)) (define syntax-vector?$645$20314 (quote #f)) (define syntax-null?$645$20313 (quote #f)) (define syntax-list?$645$20312 (quote #f)) (define syntax-car$645$20311 (quote #f)) (define syntax->list$645$20310 (quote #f)) (define syntax-cdr$645$20309 (quote #f)) (define id?$645$20308 (quote #f)) (define id->sym$645$20307 (quote #f)) (define same-marks?$645$20306 (quote #f)) (define bound-id=?$645$20305 (quote #f)) (define free-id=?$645$20304 (quote #f)) (define valid-bound-ids?$645$20303 (quote #f)) (define distinct-bound-ids?$645$20302 (quote #f)) (define bound-id-member?$645$20301 (quote #f)) (define self-evaluating?$645$20300 (quote #f)) (define strip$645$20299 (quote #f)) (define stx->datum$645$20298 (quote #f)) (define id->label$645$20297 (quote #f)) (define label->binding$645$20296 (quote #f)) (define make-binding$645$20295 (quote #f)) (define binding-type$645$20294 (quote #f)) (define binding-value$645$20293 (quote #f)) (define syntax-type$645$20292 (quote #f)) (define sanitize-binding$645$20290 (quote #f)) (define make-variable-transformer$645$20289 (quote #f)) (define make-eval-transformer$645$20288 (quote #f)) (define parse-define$645$20286 (quote #f)) (define parse-define-syntax$645$20285 (quote #f)) (define scheme-stx$645$20284 (quote #f)) (define add-lexical$645$20283 (quote #f)) (define add-lexicals$645$20282 (quote #f)) (define let-values-transformer$645$20281 (quote #f)) (define letrec-helper$645$20280 (quote #f)) (define letrec-transformer$645$20279 (quote #f)) (define letrec*-transformer$645$20278 (quote #f)) (define type-descriptor-transformer$645$20277 (quote #f)) (define when-transformer$645$20276 (quote #f)) (define unless-transformer$645$20275 (quote #f)) (define if-transformer$645$20274 (quote #f)) (define case-transformer$645$20273 (quote #f)) (define quote-transformer$645$20272 (quote #f)) (define case-lambda-transformer$645$20271 (quote #f)) (define lambda-transformer$645$20270 (quote #f)) (define bless$645$20269 (quote #f)) (define with-syntax-macro$645$20268 (quote #f)) (define let-macro$645$20267 (quote #f)) (define trace-lambda-macro$645$20266 (quote #f)) (define trace-define-macro$645$20265 (quote #f)) (define time-macro$645$20264 (quote #f)) (define delay-macro$645$20263 (quote #f)) (define assert-macro$645$20262 (quote #f)) (define endianness-macro$645$20261 (quote #f)) (define identifier-syntax-macro$645$20260 (quote #f)) (define do-macro$645$20259 (quote #f)) (define let*-macro$645$20258 (quote #f)) (define or-macro$645$20257 (quote #f)) (define and-macro$645$20256 (quote #f)) (define cond-macro$645$20255 (quote #f)) (define include-macro$645$20254 (quote #f)) (define syntax-rules-macro$645$20253 (quote #f)) (define quasiquote-macro$645$20252 (quote #f)) (define quasisyntax-macro$645$20251 (quote #f)) (define define-record-macro$645$20250 (quote #f)) (define incorrect-usage-macro$645$20249 (quote #f)) (define parameterize-transformer$645$20248 (quote #f)) (define foreign-call-transformer$645$20247 (quote #f)) (define convert-pattern$645$20246 (quote #f)) (define syntax-dispatch$645$20245 (quote #f)) (define ellipsis?$645$20244 (quote #f)) (define syntax-case-transformer$645$20243 (quote #f)) (define syntax-transformer$645$20242 (quote #f)) (define core-macro-transformer$645$20241 (quote #f)) (define macro-transformer$645$20240 (quote #f)) (define local-macro-transformer$645$20239 (quote #f)) (define chi-macro$645$20238 (quote #f)) (define chi-local-macro$645$20237 (quote #f)) (define chi-global-macro$645$20236 (quote #f)) (define chi-expr*$645$20235 (quote #f)) (define chi-application$645$20234 (quote #f)) (define chi-expr$645$20233 (quote #f)) (define chi-set!$645$20232 (quote #f)) (define chi-lambda-clause$645$20231 (quote #f)) (define chi-lambda-clause*$645$20230 (quote #f)) (define chi-rhs$645$20229 (quote #f)) (define chi-rhs*$645$20228 (quote #f)) (define find-bound=?$645$20227 (quote #f)) (define find-dups$645$20226 (quote #f)) (define chi-internal$645$20225 (quote #f)) (define parse-module$645$20224 (quote #f)) (define chi-internal-module$645$20223 (quote #f)) (define chi-body*$645$20222 (quote #f)) (define set-global-macro-binding!$645$20221 (quote #f)) (define gen-global-macro-binding$645$20220 (quote #f)) (define gen-global-var-binding$645$20219 (quote #f)) (define chi-top-set!$645$20218 (quote #f)) (define chi-top*$645$20217 (quote #f)) (define expand-transformer$645$20216 (quote #f)) (define parse-exports$645$20215 (quote #f)) (define parse-library-name$645$20214 (quote #f)) (define parse-library$645$20213 (quote #f)) (define parse-import-spec*$645$20212 (quote #f)) (define make-top-rib$645$20211 (quote #f)) (define make-collector$645$20210 (quote #f)) (define inv-collector$645$20209 (quote #f)) (define vis-collector$645$20208 (quote #f)) (define chi-library-internal$645$20207 (quote #f)) (define library-body-expander$645$20206 (quote #f)) (define core-library-expander$645$20205 (quote #f)) (define parse-top-level-program$645$20204 (quote #f)) (define top-level-expander$645$20203 (quote #f)) (define make-env$645$20202 (quote #f)) (define env?$645$20201 (quote #f)) (define env-subst$645$20200 (quote #f)) (define env-imp*$645$20199 (quote #f)) (define set-env-subst!$645$20198 (quote #f)) (define set-env-imp*!$645$20197 (quote #f)) (define environment?$645$20196 (quote #f)) (define environment$645$20195 (quote #f)) (define null-environment$645$20194 (quote #f)) (define scheme-report-environment$645$20193 (quote #f)) (define expand$645$20192 (quote #f)) (define eval$645$20191 (quote #f)) (define library-expander$645$20190 (quote #f)) (define boot-library-expand$645$20189 (quote #f)) (define rev-map-append$645$20188 (quote #f)) (define build-exports$645$20187 (quote #f)) (define make-export-subst$645$20186 (quote #f)) (define make-export-env/macros$645$20185 (quote #f)) (define generate-temporaries$645$20184 (quote #f)) (define free-identifier=?$645$20183 (quote #f)) (define bound-identifier=?$645$20182 (quote #f)) (define syntax-error$645$20181 (quote #f)) (define identifier?$645$20180 (quote #f)) (define datum->syntax$645$20179 (quote #f)) (define syntax->datum$645$20178 (quote #f)) (define eval-r6rs-top-level$645$20177 (quote #f)) (define interaction-library$645$20176 (quote #f)) (define interaction-sym->label$645$20175 (quote #f)) (define eval-top-level$645$20174 (quote #f)) ((lambda (set-cons$645$12107 set-union$645$12109 top-mark*$645$12114 top-marked?$645$12116 gen-lexical$645$12118 gen-global$645$12120 gen-label$645$12122 make-rib$645$12125 rib?$645$12127 rib-sym*$645$12129 rib-mark**$645$12131 rib-label*$645$12133 rib-sealed/freq$645$12135 set-rib-sym*!$645$12137 set-rib-mark**!$645$12139 set-rib-label*!$645$12141 set-rib-sealed/freq!$645$12143 make-empty-rib$645$12145 extend-rib!$645$12147 seal-rib!$645$12149 unseal-rib!$645$12151 increment-rib-frequency!$645$12153 make-full-rib$645$12155 make-stx$645$12158 stx?$645$12160 stx-expr$645$12162 stx-mark*$645$12164 stx-subst*$645$12166 set-stx-expr!$645$12168 set-stx-mark*!$645$12170 set-stx-subst*!$645$12172 datum->stx$645$12174 gen-mark$645$12176 anti-mark$645$12178 anti-mark?$645$12180 join-wraps$645$12182 mkstx$645$12184 add-mark$645$12186 add-subst$645$12188 syntax-kind?$645$12190 syntax-vector->list$645$12192 syntax-pair?$645$12194 syntax-vector?$645$12196 syntax-null?$645$12198 syntax-list?$645$12200 syntax-car$645$12202 syntax->list$645$12204 syntax-cdr$645$12206 id?$645$12208 id->sym$645$12210 same-marks?$645$12212 bound-id=?$645$12214 free-id=?$645$12216 valid-bound-ids?$645$12218 distinct-bound-ids?$645$12220 bound-id-member?$645$12222 self-evaluating?$645$12224 strip$645$12226 stx->datum$645$12228 id->label$645$12230 label->binding$645$12232 make-binding$645$12234 binding-type$645$12236 binding-value$645$12238 syntax-type$645$12240 sanitize-binding$645$12268 make-variable-transformer$645$12270 make-eval-transformer$645$12272 parse-define$645$12634 parse-define-syntax$645$12636 scheme-stx$645$12638 add-lexical$645$12640 add-lexicals$645$12642 let-values-transformer$645$12644 letrec-helper$645$12646 letrec-transformer$645$12648 letrec*-transformer$645$12650 type-descriptor-transformer$645$12652 when-transformer$645$12654 unless-transformer$645$12656 if-transformer$645$12658 case-transformer$645$12660 quote-transformer$645$12662 case-lambda-transformer$645$12664 lambda-transformer$645$12666 bless$645$12668 with-syntax-macro$645$12670 let-macro$645$12672 trace-lambda-macro$645$12674 trace-define-macro$645$12676 time-macro$645$12678 delay-macro$645$12680 assert-macro$645$12682 endianness-macro$645$12684 identifier-syntax-macro$645$12686 do-macro$645$12688 let*-macro$645$12690 or-macro$645$12692 and-macro$645$12694 cond-macro$645$12696 include-macro$645$12698 syntax-rules-macro$645$12700 quasiquote-macro$645$12702 quasisyntax-macro$645$12704 define-record-macro$645$12706 incorrect-usage-macro$645$12708 parameterize-transformer$645$12710 foreign-call-transformer$645$12712 convert-pattern$645$12714 syntax-dispatch$645$12716 ellipsis?$645$12718 syntax-case-transformer$645$12720 syntax-transformer$645$12722 core-macro-transformer$645$12724 macro-transformer$645$12726 local-macro-transformer$645$12728 chi-macro$645$12730 chi-local-macro$645$12732 chi-global-macro$645$12734 chi-expr*$645$12736 chi-application$645$12738 chi-expr$645$12740 chi-set!$645$12742 chi-lambda-clause$645$12744 chi-lambda-clause*$645$12746 chi-rhs$645$12748 chi-rhs*$645$12750 find-bound=?$645$12752 find-dups$645$12754 chi-internal$645$12756 parse-module$645$12758 chi-internal-module$645$12760 chi-body*$645$12762 set-global-macro-binding!$645$12764 gen-global-macro-binding$645$12766 gen-global-var-binding$645$12768 chi-top-set!$645$12770 chi-top*$645$12772 expand-transformer$645$12774 parse-exports$645$12776 parse-library-name$645$12778 parse-library$645$12780 parse-import-spec*$645$12782 make-top-rib$645$12784 make-collector$645$12786 inv-collector$645$12788 vis-collector$645$12790 chi-library-internal$645$12792 library-body-expander$645$12794 core-library-expander$645$12796 parse-top-level-program$645$12798 top-level-expander$645$12800 make-env$645$12803 env?$645$12805 env-subst$645$12807 env-imp*$645$12809 set-env-subst!$645$12811 set-env-imp*!$645$12813 environment?$645$12815 environment$645$12817 null-environment$645$12819 scheme-report-environment$645$12821 expand$645$12823 eval$645$12825 library-expander$645$12827 boot-library-expand$645$12829 rev-map-append$645$12831 build-exports$645$12833 make-export-subst$645$12835 make-export-env/macros$645$12837 generate-temporaries$645$12839 free-identifier=?$645$12841 bound-identifier=?$645$12843 syntax-error$645$12845 identifier?$645$12847 datum->syntax$645$12849 syntax->datum$645$12851 eval-r6rs-top-level$645$12853 interaction-library$645$12855 interaction-sym->label$645$12857 eval-top-level$645$12859) (begin (set! set-cons$645$12107 (lambda (x$645$12861 ls$645$12862) (if (memq x$645$12861 ls$645$12862) ls$645$12862 (cons x$645$12861 ls$645$12862)))) (set! set-union$645$12109 (lambda (ls1$645$12865 ls2$645$12866) (if (null? ls1$645$12865) ls2$645$12866 (if (memq (car ls1$645$12865) ls2$645$12866) (set-union$645$12109 (cdr ls1$645$12865) ls2$645$12866) (cons (car ls1$645$12865) (set-union$645$12109 (cdr ls1$645$12865) ls2$645$12866)))))) (set! top-mark*$645$12114 (quote (top))) (set! top-marked?$645$12116 (lambda (m*$645$12869) (memq (quote top) m*$645$12869))) (set! gen-lexical$645$12118 (lambda (sym$645$12871) (if (symbol? sym$645$12871) (gensym sym$645$12871) (if (stx?$645$12160 sym$645$12871) (gen-lexical$645$12118 (id->sym$645$12210 sym$645$12871)) (error (quote gen-lexical) (quote "BUG: invalid arg ~s") sym$645$12871))))) (set! gen-global$645$12120 (lambda (x$645$12873) (gen-lexical$645$12118 x$645$12873))) (set! gen-label$645$12122 (lambda (_$645$12875) (gensym))) (set! make-rib$645$12125 (lambda (sym*$645$12877 mark**$645$12878 label*$645$12879 sealed/freq$645$12880) (vector (quote g$645$12124) sym*$645$12877 mark**$645$12878 label*$645$12879 sealed/freq$645$12880))) (set! rib?$645$12127 (lambda (x$645$12885) (if (vector? x$645$12885) (if (= (vector-length x$645$12885) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref x$645$12885 (quote 0)) (quote g$645$12124))) (quote #f)) (quote #f)))) (set! rib-sym*$645$12129 (lambda (x$645$12887) (if (rib?$645$12127 x$645$12887) (vector-ref x$645$12887 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") x$645$12887 (quote rib))))) (set! rib-mark**$645$12131 (lambda (x$645$12889) (if (rib?$645$12127 x$645$12889) (vector-ref x$645$12889 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") x$645$12889 (quote rib))))) (set! rib-label*$645$12133 (lambda (x$645$12891) (if (rib?$645$12127 x$645$12891) (vector-ref x$645$12891 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") x$645$12891 (quote rib))))) (set! rib-sealed/freq$645$12135 (lambda (x$645$12893) (if (rib?$645$12127 x$645$12893) (vector-ref x$645$12893 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") x$645$12893 (quote rib))))) (set! set-rib-sym*!$645$12137 (lambda (x$645$12895 v$645$12896) (if (rib?$645$12127 x$645$12895) (vector-set! x$645$12895 (quote 1) v$645$12896) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") x$645$12895 (quote rib))))) (set! set-rib-mark**!$645$12139 (lambda (x$645$12899 v$645$12900) (if (rib?$645$12127 x$645$12899) (vector-set! x$645$12899 (quote 2) v$645$12900) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") x$645$12899 (quote rib))))) (set! set-rib-label*!$645$12141 (lambda (x$645$12903 v$645$12904) (if (rib?$645$12127 x$645$12903) (vector-set! x$645$12903 (quote 3) v$645$12904) (error (quote set-rib-label*!) (quote "~s is not of type ~s") x$645$12903 (quote rib))))) (set! set-rib-sealed/freq!$645$12143 (lambda (x$645$12907 v$645$12908) (if (rib?$645$12127 x$645$12907) (vector-set! x$645$12907 (quote 4) v$645$12908) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") x$645$12907 (quote rib))))) (set! make-empty-rib$645$12145 (lambda () (make-rib$645$12125 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! extend-rib!$645$12147 (lambda (rib$645$12911 id$645$12912 label$645$12913) ((lambda (find$645$12917) (begin (set! find$645$12917 (lambda (sym$645$12919 mark*$645$12920 sym*$645$12921 mark**$645$12922) (if (pair? sym*$645$12921) (begin (quote #f) ((lambda (t$645$12927) (if t$645$12927 t$645$12927 (begin (quote #f) (find$645$12917 sym$645$12919 mark*$645$12920 (cdr sym*$645$12921) (cdr mark**$645$12922))))) (if (eq? sym$645$12919 (car sym*$645$12921)) (begin (quote #f) (same-marks?$645$12212 mark*$645$12920 (car mark**$645$12922))) (quote #f)))) (quote #f)))) (begin (if (rib-sealed/freq$645$12135 rib$645$12911) (error (quote extend-rib!) (quote "rib ~s is sealed") rib$645$12911) (void)) ((lambda (sym$645$12929 mark*$645$12930) ((lambda (sym*$645$12933) (begin (if (if (memq sym$645$12929 (rib-sym*$645$12129 rib$645$12911)) (begin (quote #f) (find$645$12917 sym$645$12929 mark*$645$12930 sym*$645$12933 (rib-mark**$645$12131 rib$645$12911))) (quote #f)) (error (quote expander) (quote "~a ~s") (quote "cannot redefine") (strip$645$12226 id$645$12912 (quote ()))) (void)) (set-rib-sym*!$645$12137 rib$645$12911 (cons sym$645$12929 sym*$645$12933)) (set-rib-mark**!$645$12139 rib$645$12911 (cons mark*$645$12930 (rib-mark**$645$12131 rib$645$12911))) (set-rib-label*!$645$12141 rib$645$12911 (cons label$645$12913 (rib-label*$645$12133 rib$645$12911))))) (rib-sym*$645$12129 rib$645$12911))) (id->sym$645$12210 id$645$12912) (stx-mark*$645$12164 id$645$12912))))) (quote #f)))) (set! seal-rib!$645$12149 (lambda (rib$645$12935) ((lambda (sym*$645$12937) (if (null? sym*$645$12937) (void) ((lambda (sym*$645$12939) (begin (set-rib-sym*!$645$12137 rib$645$12935 sym*$645$12939) (set-rib-mark**!$645$12139 rib$645$12935 (list->vector (rib-mark**$645$12131 rib$645$12935))) (set-rib-label*!$645$12141 rib$645$12935 (list->vector (rib-label*$645$12133 rib$645$12935))) (set-rib-sealed/freq!$645$12143 rib$645$12935 (make-vector (vector-length sym*$645$12939) (quote 0))))) (list->vector sym*$645$12937)))) (rib-sym*$645$12129 rib$645$12935)))) (set! unseal-rib!$645$12151 (lambda (rib$645$12941) (if (rib-sealed/freq$645$12135 rib$645$12941) (begin (set-rib-sealed/freq!$645$12143 rib$645$12941 (quote #f)) (set-rib-sym*!$645$12137 rib$645$12941 (vector->list (rib-sym*$645$12129 rib$645$12941))) (set-rib-mark**!$645$12139 rib$645$12941 (vector->list (rib-mark**$645$12131 rib$645$12941))) (set-rib-label*!$645$12141 rib$645$12941 (vector->list (rib-label*$645$12133 rib$645$12941)))) (void)))) (set! increment-rib-frequency!$645$12153 (lambda (rib$645$12943 idx$645$12944) ((lambda (freq*$645$12947) ((lambda (freq$645$12949) ((lambda (i$645$12951) (begin (vector-set! freq*$645$12947 i$645$12951 (+ freq$645$12949 (quote 1))) (if (= i$645$12951 idx$645$12944) (void) ((lambda (sym*$645$12953 mark**$645$12954 label*$645$12955) (begin ((lambda (sym$645$12959) (begin (vector-set! sym*$645$12953 idx$645$12944 (vector-ref sym*$645$12953 i$645$12951)) (vector-set! sym*$645$12953 i$645$12951 sym$645$12959))) (vector-ref sym*$645$12953 idx$645$12944)) ((lambda (mark*$645$12961) (begin (vector-set! mark**$645$12954 idx$645$12944 (vector-ref mark**$645$12954 i$645$12951)) (vector-set! mark**$645$12954 i$645$12951 mark*$645$12961))) (vector-ref mark**$645$12954 idx$645$12944)) ((lambda (label$645$12963) (begin (vector-set! label*$645$12955 idx$645$12944 (vector-ref label*$645$12955 i$645$12951)) (vector-set! label*$645$12955 i$645$12951 label$645$12963))) (vector-ref label*$645$12955 idx$645$12944)))) (rib-sym*$645$12129 rib$645$12943) (rib-mark**$645$12131 rib$645$12943) (rib-label*$645$12133 rib$645$12943))))) (letrec ((f$645$12965 (lambda (i$645$12967) (if (zero? i$645$12967) (quote 0) ((lambda (j$645$12969) (if (= freq$645$12949 (vector-ref freq*$645$12947 j$645$12969)) (f$645$12965 j$645$12969) i$645$12967)) (- i$645$12967 (quote 1))))))) (f$645$12965 idx$645$12944)))) (vector-ref freq*$645$12947 idx$645$12944))) (rib-sealed/freq$645$12135 rib$645$12943)))) (set! make-full-rib$645$12155 (lambda (id*$645$12971 label*$645$12972) (make-rib$645$12125 (map id->sym$645$12210 id*$645$12971) (map stx-mark*$645$12164 id*$645$12971) label*$645$12972 (quote #f)))) (set! make-stx$645$12158 (lambda (expr$645$12975 mark*$645$12976 subst*$645$12977) (vector (quote g$645$12157) expr$645$12975 mark*$645$12976 subst*$645$12977))) (set! stx?$645$12160 (lambda (x$645$12981) (if (vector? x$645$12981) (if (= (vector-length x$645$12981) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref x$645$12981 (quote 0)) (quote g$645$12157))) (quote #f)) (quote #f)))) (set! stx-expr$645$12162 (lambda (x$645$12983) (if (stx?$645$12160 x$645$12983) (vector-ref x$645$12983 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") x$645$12983 (quote stx))))) (set! stx-mark*$645$12164 (lambda (x$645$12985) (if (stx?$645$12160 x$645$12985) (vector-ref x$645$12985 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") x$645$12985 (quote stx))))) (set! stx-subst*$645$12166 (lambda (x$645$12987) (if (stx?$645$12160 x$645$12987) (vector-ref x$645$12987 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") x$645$12987 (quote stx))))) (set! set-stx-expr!$645$12168 (lambda (x$645$12989 v$645$12990) (if (stx?$645$12160 x$645$12989) (vector-set! x$645$12989 (quote 1) v$645$12990) (error (quote set-stx-expr!) (quote "~s is not of type ~s") x$645$12989 (quote stx))))) (set! set-stx-mark*!$645$12170 (lambda (x$645$12993 v$645$12994) (if (stx?$645$12160 x$645$12993) (vector-set! x$645$12993 (quote 2) v$645$12994) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") x$645$12993 (quote stx))))) (set! set-stx-subst*!$645$12172 (lambda (x$645$12997 v$645$12998) (if (stx?$645$12160 x$645$12997) (vector-set! x$645$12997 (quote 3) v$645$12998) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") x$645$12997 (quote stx))))) (set! datum->stx$645$12174 (lambda (id$645$13001 datum$645$13002) (make-stx$645$12158 datum$645$13002 (stx-mark*$645$12164 id$645$13001) (stx-subst*$645$12166 id$645$13001)))) (set! gen-mark$645$12176 (lambda () (string (quote #\m)))) (set! anti-mark$645$12178 (quote #f)) (set! anti-mark?$645$12180 not) (set! join-wraps$645$12182 (lambda (m1*$645$13005 s1*$645$13006 e$645$13007) ((lambda (cancel$645$13011) (begin (set! cancel$645$13011 (lambda (ls1$645$13013 ls2$645$13014) (letrec ((f$645$13017 (lambda (x$645$13019 ls1$645$13020) (if (null? ls1$645$13020) (cdr ls2$645$13014) (cons x$645$13019 (f$645$13017 (car ls1$645$13020) (cdr ls1$645$13020))))))) (f$645$13017 (car ls1$645$13013) (cdr ls1$645$13013))))) ((lambda (m2*$645$13023 s2*$645$13024) (if (if (not (null? m1*$645$13005)) (if (not (null? m2*$645$13023)) (begin (quote #f) (anti-mark?$645$12180 (car m2*$645$13023))) (quote #f)) (quote #f)) (values (cancel$645$13011 m1*$645$13005 m2*$645$13023) (cancel$645$13011 s1*$645$13006 s2*$645$13024)) (values (append m1*$645$13005 m2*$645$13023) (append s1*$645$13006 s2*$645$13024)))) (stx-mark*$645$12164 e$645$13007) (stx-subst*$645$12166 e$645$13007)))) (quote #f)))) (set! mkstx$645$12184 (lambda (e$645$13027 m*$645$13028 s*$645$13029) (if (stx?$645$12160 e$645$13027) (call-with-values (lambda () (join-wraps$645$12182 m*$645$13028 s*$645$13029 e$645$13027)) (lambda (m*$645$13033 s*$645$13034) (make-stx$645$12158 (stx-expr$645$12162 e$645$13027) m*$645$13033 s*$645$13034))) (make-stx$645$12158 e$645$13027 m*$645$13028 s*$645$13029)))) (set! add-mark$645$12186 (lambda (m$645$13037 e$645$13038) (mkstx$645$12184 e$645$13038 (list m$645$13037) (quote (shift))))) (set! add-subst$645$12188 (lambda (subst$645$13041 e$645$13042) (mkstx$645$12184 e$645$13042 (quote ()) (list subst$645$13041)))) (set! syntax-kind?$645$12190 (lambda (x$645$13045 p?$645$13046) (if (stx?$645$12160 x$645$13045) (syntax-kind?$645$12190 (stx-expr$645$12162 x$645$13045) p?$645$13046) (p?$645$13046 x$645$13045)))) (set! syntax-vector->list$645$12192 (lambda (x$645$13049) (if (stx?$645$12160 x$645$13049) ((lambda (ls$645$13051 m*$645$13052 s*$645$13053) (map (lambda (x$645$13057) (mkstx$645$12184 x$645$13057 m*$645$13052 s*$645$13053)) ls$645$13051)) (syntax-vector->list$645$12192 (stx-expr$645$12162 x$645$13049)) (stx-mark*$645$12164 x$645$13049) (stx-subst*$645$12166 x$645$13049)) (if (vector? x$645$13049) (vector->list x$645$13049) (error (quote syntax-vector->list) (quote "not a syntax vector ~s") x$645$13049))))) (set! syntax-pair?$645$12194 (lambda (x$645$13059) (syntax-kind?$645$12190 x$645$13059 pair?))) (set! syntax-vector?$645$12196 (lambda (x$645$13061) (syntax-kind?$645$12190 x$645$13061 vector?))) (set! syntax-null?$645$12198 (lambda (x$645$13063) (syntax-kind?$645$12190 x$645$13063 null?))) (set! syntax-list?$645$12200 (lambda (x$645$13065) ((lambda (t$645$13067) (if t$645$13067 t$645$13067 (begin (quote #f) (if (syntax-pair?$645$12194 x$645$13065) (begin (quote #f) (syntax-list?$645$12200 (syntax-cdr$645$12206 x$645$13065))) (quote #f))))) (syntax-null?$645$12198 x$645$13065)))) (set! syntax-car$645$12202 (lambda (x$645$13069) (if (stx?$645$12160 x$645$13069) (mkstx$645$12184 (syntax-car$645$12202 (stx-expr$645$12162 x$645$13069)) (stx-mark*$645$12164 x$645$13069) (stx-subst*$645$12166 x$645$13069)) (if (pair? x$645$13069) (car x$645$13069) (error (quote syntax-car) (quote "~s is not a pair") x$645$13069))))) (set! syntax->list$645$12204 (lambda (x$645$13071) (if (syntax-pair?$645$12194 x$645$13071) (cons (syntax-car$645$12202 x$645$13071) (syntax->list$645$12204 (syntax-cdr$645$12206 x$645$13071))) (if (syntax-null?$645$12198 x$645$13071) (quote ()) (error (quote syntax->list) (quote "invalid ~s") x$645$13071))))) (set! syntax-cdr$645$12206 (lambda (x$645$13073) (if (stx?$645$12160 x$645$13073) (mkstx$645$12184 (syntax-cdr$645$12206 (stx-expr$645$12162 x$645$13073)) (stx-mark*$645$12164 x$645$13073) (stx-subst*$645$12166 x$645$13073)) (if (pair? x$645$13073) (cdr x$645$13073) (error (quote syntax-cdr) (quote "~s is not a pair") x$645$13073))))) (set! id?$645$12208 (lambda (x$645$13075) (syntax-kind?$645$12190 x$645$13075 symbol?))) (set! id->sym$645$12210 (lambda (x$645$13077) (if (stx?$645$12160 x$645$13077) (id->sym$645$12210 (stx-expr$645$12162 x$645$13077)) (if (symbol? x$645$13077) x$645$13077 (error (quote id->sym) (quote "~s is not an id") x$645$13077))))) (set! same-marks?$645$12212 (lambda (x$645$13079 y$645$13080) ((lambda (t$645$13083) (if t$645$13083 t$645$13083 (begin (quote #f) (if (pair? x$645$13079) (if (pair? y$645$13080) (if (eq? (car x$645$13079) (car y$645$13080)) (begin (quote #f) (same-marks?$645$12212 (cdr x$645$13079) (cdr y$645$13080))) (quote #f)) (quote #f)) (quote #f))))) (if (null? x$645$13079) (begin (quote #f) (null? y$645$13080)) (quote #f))))) (set! bound-id=?$645$12214 (lambda (x$645$13085 y$645$13086) (if (eq? (id->sym$645$12210 x$645$13085) (id->sym$645$12210 y$645$13086)) (begin (quote #f) (same-marks?$645$12212 (stx-mark*$645$12164 x$645$13085) (stx-mark*$645$12164 y$645$13086))) (quote #f)))) (set! free-id=?$645$12216 (lambda (i$645$13089 j$645$13090) ((lambda (t0$645$13093 t1$645$13094) (if ((lambda (t$645$13097) (if t$645$13097 t$645$13097 (begin (quote #f) t1$645$13094))) t0$645$13093) (eq? t0$645$13093 t1$645$13094) (eq? (id->sym$645$12210 i$645$13089) (id->sym$645$12210 j$645$13090)))) (id->label$645$12230 i$645$13089) (id->label$645$12230 j$645$13090)))) (set! valid-bound-ids?$645$12218 (lambda (id*$645$13099) (if (for-all id?$645$12208 id*$645$13099) (begin (quote #f) (distinct-bound-ids?$645$12220 id*$645$13099)) (quote #f)))) (set! distinct-bound-ids?$645$12220 (lambda (id*$645$13101) ((lambda (t$645$13103) (if t$645$13103 t$645$13103 (begin (quote #f) (if (not (bound-id-member?$645$12222 (car id*$645$13101) (cdr id*$645$13101))) (begin (quote #f) (distinct-bound-ids?$645$12220 (cdr id*$645$13101))) (quote #f))))) (null? id*$645$13101)))) (set! bound-id-member?$645$12222 (lambda (id$645$13105 id*$645$13106) (if (pair? id*$645$13106) (begin (quote #f) ((lambda (t$645$13109) (if t$645$13109 t$645$13109 (begin (quote #f) (bound-id-member?$645$12222 id$645$13105 (cdr id*$645$13106))))) (bound-id=?$645$12214 id$645$13105 (car id*$645$13106)))) (quote #f)))) (set! self-evaluating?$645$12224 (lambda (x$645$13111) ((lambda (t$645$13113) (if t$645$13113 t$645$13113 ((lambda (t$645$13115) (if t$645$13115 t$645$13115 ((lambda (t$645$13117) (if t$645$13117 t$645$13117 (begin (quote #f) (boolean? x$645$13111)))) (char? x$645$13111)))) (string? x$645$13111)))) (number? x$645$13111)))) (set! strip$645$12226 (lambda (x$645$13119 m*$645$13120) (if (top-marked?$645$12116 m*$645$13120) x$645$13119 (letrec ((f$645$13123 (lambda (x$645$13125) (if (stx?$645$12160 x$645$13125) (strip$645$12226 (stx-expr$645$12162 x$645$13125) (stx-mark*$645$12164 x$645$13125)) (if (pair? x$645$13125) ((lambda (a$645$13127 d$645$13128) (if (if (eq? a$645$13127 (car x$645$13125)) (begin (quote #f) (eq? d$645$13128 (cdr x$645$13125))) (quote #f)) x$645$13125 (cons a$645$13127 d$645$13128))) (f$645$13123 (car x$645$13125)) (f$645$13123 (cdr x$645$13125))) (if (vector? x$645$13125) ((lambda (old$645$13131) ((lambda (new$645$13133) (if (for-all eq? old$645$13131 new$645$13133) x$645$13125 (list->vector new$645$13133))) (map f$645$13123 old$645$13131))) (vector->list x$645$13125)) x$645$13125)))))) (f$645$13123 x$645$13119))))) (set! stx->datum$645$12228 (lambda (x$645$13135) (strip$645$12226 x$645$13135 (quote ())))) (set! id->label$645$12230 (lambda (id$645$13137) ((lambda (sym$645$13139) (letrec ((search$645$13141 (lambda (subst*$645$13143 mark*$645$13144) (if (null? subst*$645$13143) (interaction-sym->label$645$12857 sym$645$13139) (if (eq? (car subst*$645$13143) (quote shift)) (search$645$13141 (cdr subst*$645$13143) (cdr mark*$645$13144)) ((lambda (rib$645$13147) (if (rib-sealed/freq$645$12135 rib$645$13147) ((lambda (sym*$645$13149) (letrec ((f$645$13151 (lambda (i$645$13153 j$645$13154) (if (= i$645$13153 j$645$13154) (search$645$13141 (cdr subst*$645$13143) mark*$645$13144) (if (if (eq? (vector-ref sym*$645$13149 i$645$13153) sym$645$13139) (begin (quote #f) (same-marks?$645$12212 mark*$645$13144 (vector-ref (rib-mark**$645$12131 rib$645$13147) i$645$13153))) (quote #f)) ((lambda (label$645$13157) (begin (increment-rib-frequency!$645$12153 rib$645$13147 i$645$13153) label$645$13157)) (vector-ref (rib-label*$645$12133 rib$645$13147) i$645$13153)) (f$645$13151 (+ i$645$13153 (quote 1)) j$645$13154)))))) (f$645$13151 (quote 0) (vector-length sym*$645$13149)))) (rib-sym*$645$12129 rib$645$13147)) (letrec ((f$645$13159 (lambda (sym*$645$13161 mark**$645$13162 label*$645$13163) (if (null? sym*$645$13161) (search$645$13141 (cdr subst*$645$13143) mark*$645$13144) (if (if (eq? (car sym*$645$13161) sym$645$13139) (begin (quote #f) (same-marks?$645$12212 (car mark**$645$13162) mark*$645$13144)) (quote #f)) (car label*$645$13163) (f$645$13159 (cdr sym*$645$13161) (cdr mark**$645$13162) (cdr label*$645$13163))))))) (f$645$13159 (rib-sym*$645$12129 rib$645$13147) (rib-mark**$645$12131 rib$645$13147) (rib-label*$645$12133 rib$645$13147))))) (car subst*$645$13143))))))) (search$645$13141 (stx-subst*$645$12166 id$645$13137) (stx-mark*$645$12164 id$645$13137)))) (id->sym$645$12210 id$645$13137)))) (set! label->binding$645$12232 (lambda (x$645$13167 r$645$13168) ((lambda (t$645$13171) (if t$645$13171 t$645$13171 (begin (quote #f) ((lambda (t$645$13173) (if t$645$13173 (cdr t$645$13173) (quote (displaced-lexical . #f)))) (assq x$645$13167 r$645$13168))))) (imported-label->binding$645$11747 x$645$13167)))) (set! make-binding$645$12234 cons) (set! binding-type$645$12236 car) (set! binding-value$645$12238 cdr) (set! syntax-type$645$12240 (lambda (e$645$13175 r$645$13176) (if (id?$645$12208 e$645$13175) ((lambda (id$645$13179) ((lambda (label$645$13181) ((lambda (b$645$13183) ((lambda (type$645$13185) ((lambda () (begin (if label$645$13181 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (strip$645$12226 e$645$13175 (quote ())))) ((lambda (t$645$13187) (if (memv t$645$13187 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module))) (values type$645$13185 (binding-value$645$12238 b$645$13183) id$645$13179) (values (quote other) (quote #f) (quote #f)))) type$645$13185))))) (binding-type$645$12236 b$645$13183))) (label->binding$645$12232 label$645$13181 r$645$13176))) (id->label$645$12230 id$645$13179))) e$645$13175) (if (syntax-pair?$645$12194 e$645$13175) ((lambda (id$645$13188) (if (id?$645$12208 id$645$13188) ((lambda (label$645$13190) ((lambda (b$645$13192) ((lambda (type$645$13194) ((lambda () (begin (if label$645$13190 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (strip$645$12226 e$645$13175 (quote ())))) ((lambda (t$645$13196) (if (memv t$645$13196 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import))) (values type$645$13194 (binding-value$645$12238 b$645$13192) id$645$13188) (values (quote call) (quote #f) (quote #f)))) type$645$13194))))) (binding-type$645$12236 b$645$13192))) (label->binding$645$12232 label$645$13190 r$645$13176))) (id->label$645$12230 id$645$13188)) (values (quote call) (quote #f) (quote #f)))) (syntax-car$645$12202 e$645$13175)) ((lambda (d$645$13197) (if (self-evaluating?$645$12224 d$645$13197) (values (quote constant) d$645$13197 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (stx->datum$645$12228 e$645$13175)))))) (set! sanitize-binding$645$12268 (lambda (x$645$13199 src$645$13200) (if (procedure? x$645$13199) (cons* (quote local-macro) x$645$13199 src$645$13200) (if (if (pair? x$645$13199) (if (eq? (car x$645$13199) (quote macro!)) (begin (quote #f) (procedure? (cdr x$645$13199))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr x$645$13199) src$645$13200) (if (if (pair? x$645$13199) (begin (quote #f) (eq? (car x$645$13199) (quote $rtd))) (quote #f)) x$645$13199 (error (quote expand) (quote "invalid transformer ~s") x$645$13199)))))) (set! make-variable-transformer$645$12270 (lambda (x$645$13203) (if (procedure? x$645$13203) (cons (quote macro!) x$645$13203) (error (quote make-variable-transformer) (quote "~s is not a procedure") x$645$13203)))) (set! make-eval-transformer$645$12272 (lambda (x$645$13205) (sanitize-binding$645$12268 (eval-core (expanded->core$645$11298 x$645$13205)) x$645$13205))) (set! parse-define$645$12634 (lambda (x$645$13207) ((lambda (t$645$13209) ((lambda (ls/false$645$13211) (if (if ls/false$645$13211 (begin (quote #f) (apply (lambda (id$645$13213 fmls$645$13214 b$645$13215 b*$645$13216) (id?$645$12208 id$645$13213)) ls/false$645$13211)) (quote #f)) (apply (lambda (id$645$13221 fmls$645$13222 b$645$13223 b*$645$13224) (values id$645$13221 (cons (quote defun) (cons fmls$645$13222 (cons b$645$13223 b*$645$13224))))) ls/false$645$13211) ((lambda (t$645$13229) ((lambda (ls/false$645$13231) (if (if ls/false$645$13231 (begin (quote #f) (apply (lambda (id$645$13233 val$645$13234) (id?$645$12208 id$645$13233)) ls/false$645$13231)) (quote #f)) (apply (lambda (id$645$13237 val$645$13238) (values id$645$13237 (cons (quote expr) val$645$13238))) ls/false$645$13231) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13229 (quote ()))))) ((lambda (x$645$13241) (if (syntax-pair?$645$12194 x$645$13241) (begin (quote #f) ((lambda (q$645$13243) (if q$645$13243 (begin (quote #f) ((lambda (r$645$13245) (if r$645$13245 (begin (quote #f) (append q$645$13243 r$645$13245)) (quote #f))) ((lambda (x$645$13247) (if (syntax-pair?$645$12194 x$645$13247) (begin (quote #f) ((lambda (q$645$13249) (if q$645$13249 (begin (quote #f) ((lambda (r$645$13251) (if r$645$13251 (begin (quote #f) (append q$645$13249 r$645$13251)) (quote #f))) ((lambda (x$645$13253) (if (syntax-pair?$645$12194 x$645$13253) (begin (quote #f) ((lambda (q$645$13255) (if q$645$13255 (begin (quote #f) ((lambda (r$645$13257) (if r$645$13257 (begin (quote #f) (append q$645$13255 r$645$13257)) (quote #f))) ((lambda (x$645$13259) (if (equal? (stx->datum$645$12228 x$645$13259) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13253)))) (quote #f))) ((lambda (x$645$13261) (list x$645$13261)) (syntax-car$645$12202 x$645$13253)))) (quote #f))) (syntax-cdr$645$12206 x$645$13247)))) (quote #f))) ((lambda (x$645$13263) (list x$645$13263)) (syntax-car$645$12202 x$645$13247)))) (quote #f))) (syntax-cdr$645$12206 x$645$13241)))) (quote #f))) ((lambda (x$645$13265) (quote ())) (syntax-car$645$12202 x$645$13241)))) (quote #f))) t$645$13229))) t$645$13209))) ((lambda (x$645$13267) (if (syntax-pair?$645$12194 x$645$13267) (begin (quote #f) ((lambda (q$645$13269) (if q$645$13269 (begin (quote #f) ((lambda (r$645$13271) (if r$645$13271 (begin (quote #f) (append q$645$13269 r$645$13271)) (quote #f))) ((lambda (x$645$13273) (if (syntax-pair?$645$12194 x$645$13273) (begin (quote #f) ((lambda (q$645$13275) (if q$645$13275 (begin (quote #f) ((lambda (r$645$13277) (if r$645$13277 (begin (quote #f) (append q$645$13275 r$645$13277)) (quote #f))) ((lambda (x$645$13279) (if (syntax-pair?$645$12194 x$645$13279) (begin (quote #f) ((lambda (q$645$13281) (if q$645$13281 (begin (quote #f) ((lambda (r$645$13283) (if r$645$13283 (begin (quote #f) (append q$645$13281 r$645$13283)) (quote #f))) ((letrec ((f$645$13285 (lambda (x$645$13287) (if (syntax-pair?$645$12194 x$645$13287) ((lambda (cars/f$645$13289) (if cars/f$645$13289 (begin (quote #f) ((lambda (cdrs/f$645$13291) (if cdrs/f$645$13291 (begin (quote #f) (map cons cars/f$645$13289 cdrs/f$645$13291)) (quote #f))) (f$645$13285 (syntax-cdr$645$12206 x$645$13287)))) (quote #f))) ((lambda (x$645$13293) (list x$645$13293)) (syntax-car$645$12202 x$645$13287))) (if (syntax-null?$645$12198 x$645$13287) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$13285) (syntax-cdr$645$12206 x$645$13279)))) (quote #f))) ((lambda (x$645$13295) (list x$645$13295)) (syntax-car$645$12202 x$645$13279)))) (quote #f))) (syntax-cdr$645$12206 x$645$13273)))) (quote #f))) ((lambda (x$645$13297) (if (syntax-pair?$645$12194 x$645$13297) (begin (quote #f) ((lambda (q$645$13299) (if q$645$13299 (begin (quote #f) ((lambda (r$645$13301) (if r$645$13301 (begin (quote #f) (append q$645$13299 r$645$13301)) (quote #f))) ((lambda (x$645$13303) (list x$645$13303)) (syntax-cdr$645$12206 x$645$13297)))) (quote #f))) ((lambda (x$645$13305) (list x$645$13305)) (syntax-car$645$12202 x$645$13297)))) (quote #f))) (syntax-car$645$12202 x$645$13273)))) (quote #f))) (syntax-cdr$645$12206 x$645$13267)))) (quote #f))) ((lambda (x$645$13307) (quote ())) (syntax-car$645$12202 x$645$13267)))) (quote #f))) t$645$13209))) x$645$13207))) (set! parse-define-syntax$645$12636 (lambda (x$645$13309) ((lambda (t$645$13311) ((lambda (ls/false$645$13313) (if (if ls/false$645$13313 (begin (quote #f) (apply (lambda (id$645$13315 val$645$13316) (id?$645$12208 id$645$13315)) ls/false$645$13313)) (quote #f)) (apply (lambda (id$645$13319 val$645$13320) (values id$645$13319 val$645$13320)) ls/false$645$13313) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13311 (quote ()))))) ((lambda (x$645$13323) (if (syntax-pair?$645$12194 x$645$13323) (begin (quote #f) ((lambda (q$645$13325) (if q$645$13325 (begin (quote #f) ((lambda (r$645$13327) (if r$645$13327 (begin (quote #f) (append q$645$13325 r$645$13327)) (quote #f))) ((lambda (x$645$13329) (if (syntax-pair?$645$12194 x$645$13329) (begin (quote #f) ((lambda (q$645$13331) (if q$645$13331 (begin (quote #f) ((lambda (r$645$13333) (if r$645$13333 (begin (quote #f) (append q$645$13331 r$645$13333)) (quote #f))) ((lambda (x$645$13335) (if (syntax-pair?$645$12194 x$645$13335) (begin (quote #f) ((lambda (q$645$13337) (if q$645$13337 (begin (quote #f) ((lambda (r$645$13339) (if r$645$13339 (begin (quote #f) (append q$645$13337 r$645$13339)) (quote #f))) ((lambda (x$645$13341) (if (equal? (stx->datum$645$12228 x$645$13341) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13335)))) (quote #f))) ((lambda (x$645$13343) (list x$645$13343)) (syntax-car$645$12202 x$645$13335)))) (quote #f))) (syntax-cdr$645$12206 x$645$13329)))) (quote #f))) ((lambda (x$645$13345) (list x$645$13345)) (syntax-car$645$12202 x$645$13329)))) (quote #f))) (syntax-cdr$645$12206 x$645$13323)))) (quote #f))) ((lambda (x$645$13347) (quote ())) (syntax-car$645$12202 x$645$13323)))) (quote #f))) t$645$13311))) x$645$13309))) (set! scheme-stx$645$12638 (lambda (sym$645$13349) ((lambda (subst$645$13351) ((lambda (t$645$13353) (if t$645$13353 ((lambda (x$645$13355) ((lambda (name$645$13357 label$645$13358) (add-subst$645$12188 (make-rib$645$12125 (list name$645$13357) (list top-mark*$645$12114) (list label$645$13358) (quote #f)) (mkstx$645$12184 sym$645$13349 top-mark*$645$12114 (quote ())))) (car x$645$13355) (cdr x$645$13355))) t$645$13353) (mkstx$645$12184 sym$645$13349 top-mark*$645$12114 (quote ())))) (assq sym$645$13349 subst$645$13351))) (library-subst$645$11780 (find-library-by-name$645$11755 (quote (psyntax system $all))))))) (set! add-lexical$645$12640 (lambda (lab$645$13361 lex$645$13362 r$645$13363) (cons (cons* lab$645$13361 (quote lexical) lex$645$13362) r$645$13363))) (set! add-lexicals$645$12642 (lambda (lab*$645$13367 lex*$645$13368 r$645$13369) (if (null? lab*$645$13367) r$645$13369 (add-lexicals$645$12642 (cdr lab*$645$13367) (cdr lex*$645$13368) (add-lexical$645$12640 (car lab*$645$13367) (car lex*$645$13368) r$645$13369))))) (set! let-values-transformer$645$12644 (lambda (e$645$13373 r$645$13374 mr$645$13375) ((lambda (t$645$13379) ((lambda (ls/false$645$13381) (if (if ls/false$645$13381 (begin (quote #f) (apply (lambda (fml**$645$13383 rhs*$645$13384 b$645$13385 b*$645$13386) (quote #t)) ls/false$645$13381)) (quote #f)) (apply (lambda (fml**$645$13391 rhs*$645$13392 b$645$13393 b*$645$13394) ((lambda (rhs*$645$13399) ((lambda (lex**$645$13401 lab**$645$13402) ((lambda (fml*$645$13405 lab*$645$13406 lex*$645$13407) (letrec ((f$645$13411 (lambda (lex**$645$13413 rhs*$645$13414) (if (null? lex**$645$13413) (chi-internal$645$12756 (add-subst$645$12188 (make-full-rib$645$12155 fml*$645$13405 lab*$645$13406) (cons b$645$13393 b*$645$13394)) (add-lexicals$645$12642 lab*$645$13406 lex*$645$13407 r$645$13374) mr$645$13375) (list (quote (primitive call-with-values)) (build-lambda$645$12097 (quote #f) (quote ()) (car rhs*$645$13414)) (build-lambda$645$12097 (quote #f) (car lex**$645$13413) (f$645$13411 (cdr lex**$645$13413) (cdr rhs*$645$13414)))))))) (f$645$13411 lex**$645$13401 rhs*$645$13399))) (apply append fml**$645$13391) (apply append lab**$645$13402) (apply append lex**$645$13401))) (map (lambda (ls$645$13417) (map gen-lexical$645$12118 ls$645$13417)) fml**$645$13391) (map (lambda (ls$645$13419) (map gen-label$645$12122 ls$645$13419)) fml**$645$13391))) (chi-expr*$645$12736 rhs*$645$13392 r$645$13374 mr$645$13375))) ls/false$645$13381) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13379 (quote ()))))) ((lambda (x$645$13421) (if (syntax-pair?$645$12194 x$645$13421) (begin (quote #f) ((lambda (q$645$13423) (if q$645$13423 (begin (quote #f) ((lambda (r$645$13425) (if r$645$13425 (begin (quote #f) (append q$645$13423 r$645$13425)) (quote #f))) ((lambda (x$645$13427) (if (syntax-pair?$645$12194 x$645$13427) (begin (quote #f) ((lambda (q$645$13429) (if q$645$13429 (begin (quote #f) ((lambda (r$645$13431) (if r$645$13431 (begin (quote #f) (append q$645$13429 r$645$13431)) (quote #f))) ((lambda (x$645$13433) (if (syntax-pair?$645$12194 x$645$13433) (begin (quote #f) ((lambda (q$645$13435) (if q$645$13435 (begin (quote #f) ((lambda (r$645$13437) (if r$645$13437 (begin (quote #f) (append q$645$13435 r$645$13437)) (quote #f))) ((letrec ((f$645$13439 (lambda (x$645$13441) (if (syntax-pair?$645$12194 x$645$13441) ((lambda (cars/f$645$13443) (if cars/f$645$13443 (begin (quote #f) ((lambda (cdrs/f$645$13445) (if cdrs/f$645$13445 (begin (quote #f) (map cons cars/f$645$13443 cdrs/f$645$13445)) (quote #f))) (f$645$13439 (syntax-cdr$645$12206 x$645$13441)))) (quote #f))) ((lambda (x$645$13447) (list x$645$13447)) (syntax-car$645$12202 x$645$13441))) (if (syntax-null?$645$12198 x$645$13441) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$13439) (syntax-cdr$645$12206 x$645$13433)))) (quote #f))) ((lambda (x$645$13449) (list x$645$13449)) (syntax-car$645$12202 x$645$13433)))) (quote #f))) (syntax-cdr$645$12206 x$645$13427)))) (quote #f))) ((letrec ((f$645$13451 (lambda (x$645$13453) (if (syntax-pair?$645$12194 x$645$13453) ((lambda (cars/f$645$13455) (if cars/f$645$13455 (begin (quote #f) ((lambda (cdrs/f$645$13457) (if cdrs/f$645$13457 (begin (quote #f) (map cons cars/f$645$13455 cdrs/f$645$13457)) (quote #f))) (f$645$13451 (syntax-cdr$645$12206 x$645$13453)))) (quote #f))) ((lambda (x$645$13459) (if (syntax-pair?$645$12194 x$645$13459) (begin (quote #f) ((lambda (q$645$13461) (if q$645$13461 (begin (quote #f) ((lambda (r$645$13463) (if r$645$13463 (begin (quote #f) (append q$645$13461 r$645$13463)) (quote #f))) ((lambda (x$645$13465) (if (syntax-pair?$645$12194 x$645$13465) (begin (quote #f) ((lambda (q$645$13467) (if q$645$13467 (begin (quote #f) ((lambda (r$645$13469) (if r$645$13469 (begin (quote #f) (append q$645$13467 r$645$13469)) (quote #f))) ((lambda (x$645$13471) (if (equal? (stx->datum$645$12228 x$645$13471) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13465)))) (quote #f))) ((lambda (x$645$13473) (list x$645$13473)) (syntax-car$645$12202 x$645$13465)))) (quote #f))) (syntax-cdr$645$12206 x$645$13459)))) (quote #f))) ((letrec ((f$645$13475 (lambda (x$645$13477) (if (syntax-pair?$645$12194 x$645$13477) ((lambda (cars/f$645$13479) (if cars/f$645$13479 (begin (quote #f) ((lambda (cdrs/f$645$13481) (if cdrs/f$645$13481 (begin (quote #f) (map cons cars/f$645$13479 cdrs/f$645$13481)) (quote #f))) (f$645$13475 (syntax-cdr$645$12206 x$645$13477)))) (quote #f))) ((lambda (x$645$13483) (list x$645$13483)) (syntax-car$645$12202 x$645$13477))) (if (syntax-null?$645$12198 x$645$13477) (list (begin (quote fml**) (quote ()))) (quote #f)))))) f$645$13475) (syntax-car$645$12202 x$645$13459)))) (quote #f))) (syntax-car$645$12202 x$645$13453))) (if (syntax-null?$645$12198 x$645$13453) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$645$13451) (syntax-car$645$12202 x$645$13427)))) (quote #f))) (syntax-cdr$645$12206 x$645$13421)))) (quote #f))) ((lambda (x$645$13485) (quote ())) (syntax-car$645$12202 x$645$13421)))) (quote #f))) t$645$13379))) e$645$13373))) (set! letrec-helper$645$12646 (lambda (e$645$13487 r$645$13488 mr$645$13489 build$645$13490) ((lambda (t$645$13495) ((lambda (ls/false$645$13497) (if (if ls/false$645$13497 (begin (quote #f) (apply (lambda (lhs*$645$13499 rhs*$645$13500 b$645$13501 b*$645$13502) (quote #t)) ls/false$645$13497)) (quote #f)) (apply (lambda (lhs*$645$13507 rhs*$645$13508 b$645$13509 b*$645$13510) (if (not (valid-bound-ids?$645$12218 lhs*$645$13507)) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (strip$645$12226 e$645$13487 (quote ()))) ((lambda (lex*$645$13515 lab*$645$13516) ((lambda (rib$645$13519 r$645$13520) ((lambda (body$645$13523 rhs*$645$13524) (build$645$13490 (quote #f) lex*$645$13515 rhs*$645$13524 body$645$13523)) (chi-internal$645$12756 (add-subst$645$12188 rib$645$13519 (cons b$645$13509 b*$645$13510)) r$645$13520 mr$645$13489) (chi-expr*$645$12736 (map (lambda (x$645$13527) (add-subst$645$12188 rib$645$13519 x$645$13527)) rhs*$645$13508) r$645$13520 mr$645$13489))) (make-full-rib$645$12155 lhs*$645$13507 lab*$645$13516) (add-lexicals$645$12642 lab*$645$13516 lex*$645$13515 r$645$13488))) (map gen-lexical$645$12118 lhs*$645$13507) (map gen-label$645$12122 lhs*$645$13507)))) ls/false$645$13497) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13495 (quote ()))))) ((lambda (x$645$13529) (if (syntax-pair?$645$12194 x$645$13529) (begin (quote #f) ((lambda (q$645$13531) (if q$645$13531 (begin (quote #f) ((lambda (r$645$13533) (if r$645$13533 (begin (quote #f) (append q$645$13531 r$645$13533)) (quote #f))) ((lambda (x$645$13535) (if (syntax-pair?$645$12194 x$645$13535) (begin (quote #f) ((lambda (q$645$13537) (if q$645$13537 (begin (quote #f) ((lambda (r$645$13539) (if r$645$13539 (begin (quote #f) (append q$645$13537 r$645$13539)) (quote #f))) ((lambda (x$645$13541) (if (syntax-pair?$645$12194 x$645$13541) (begin (quote #f) ((lambda (q$645$13543) (if q$645$13543 (begin (quote #f) ((lambda (r$645$13545) (if r$645$13545 (begin (quote #f) (append q$645$13543 r$645$13545)) (quote #f))) ((letrec ((f$645$13547 (lambda (x$645$13549) (if (syntax-pair?$645$12194 x$645$13549) ((lambda (cars/f$645$13551) (if cars/f$645$13551 (begin (quote #f) ((lambda (cdrs/f$645$13553) (if cdrs/f$645$13553 (begin (quote #f) (map cons cars/f$645$13551 cdrs/f$645$13553)) (quote #f))) (f$645$13547 (syntax-cdr$645$12206 x$645$13549)))) (quote #f))) ((lambda (x$645$13555) (list x$645$13555)) (syntax-car$645$12202 x$645$13549))) (if (syntax-null?$645$12198 x$645$13549) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$13547) (syntax-cdr$645$12206 x$645$13541)))) (quote #f))) ((lambda (x$645$13557) (list x$645$13557)) (syntax-car$645$12202 x$645$13541)))) (quote #f))) (syntax-cdr$645$12206 x$645$13535)))) (quote #f))) ((letrec ((f$645$13559 (lambda (x$645$13561) (if (syntax-pair?$645$12194 x$645$13561) ((lambda (cars/f$645$13563) (if cars/f$645$13563 (begin (quote #f) ((lambda (cdrs/f$645$13565) (if cdrs/f$645$13565 (begin (quote #f) (map cons cars/f$645$13563 cdrs/f$645$13565)) (quote #f))) (f$645$13559 (syntax-cdr$645$12206 x$645$13561)))) (quote #f))) ((lambda (x$645$13567) (if (syntax-pair?$645$12194 x$645$13567) (begin (quote #f) ((lambda (q$645$13569) (if q$645$13569 (begin (quote #f) ((lambda (r$645$13571) (if r$645$13571 (begin (quote #f) (append q$645$13569 r$645$13571)) (quote #f))) ((lambda (x$645$13573) (if (syntax-pair?$645$12194 x$645$13573) (begin (quote #f) ((lambda (q$645$13575) (if q$645$13575 (begin (quote #f) ((lambda (r$645$13577) (if r$645$13577 (begin (quote #f) (append q$645$13575 r$645$13577)) (quote #f))) ((lambda (x$645$13579) (if (equal? (stx->datum$645$12228 x$645$13579) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13573)))) (quote #f))) ((lambda (x$645$13581) (list x$645$13581)) (syntax-car$645$12202 x$645$13573)))) (quote #f))) (syntax-cdr$645$12206 x$645$13567)))) (quote #f))) ((lambda (x$645$13583) (list x$645$13583)) (syntax-car$645$12202 x$645$13567)))) (quote #f))) (syntax-car$645$12202 x$645$13561))) (if (syntax-null?$645$12198 x$645$13561) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$645$13559) (syntax-car$645$12202 x$645$13535)))) (quote #f))) (syntax-cdr$645$12206 x$645$13529)))) (quote #f))) ((lambda (x$645$13585) (quote ())) (syntax-car$645$12202 x$645$13529)))) (quote #f))) t$645$13495))) e$645$13487))) (set! letrec-transformer$645$12648 (lambda (e$645$13587 r$645$13588 mr$645$13589) (letrec-helper$645$12646 e$645$13587 r$645$13588 mr$645$13589 build-letrec$645$12089))) (set! letrec*-transformer$645$12650 (lambda (e$645$13593 r$645$13594 mr$645$13595) (letrec-helper$645$12646 e$645$13593 r$645$13594 mr$645$13595 build-letrec*$645$12088))) (set! type-descriptor-transformer$645$12652 (lambda (e$645$13599 r$645$13600 mr$645$13601) ((lambda (t$645$13605) ((lambda (ls/false$645$13607) (if (if ls/false$645$13607 (begin (quote #f) (apply (lambda (id$645$13609) (id?$645$12208 id$645$13609)) ls/false$645$13607)) (quote #f)) (apply (lambda (id$645$13611) ((lambda (lab$645$13613) ((lambda (b$645$13615) ((lambda (type$645$13617) ((lambda () (begin (if lab$645$13613 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (strip$645$12226 e$645$13599 (quote ())))) ((lambda (t$645$13619) (if (memv t$645$13619 (quote ($rtd))) (list (quote quote) (binding-value$645$12238 b$645$13615)) (error (quote expander) (quote "~a ~s") (quote "invalid type") (strip$645$12226 e$645$13599 (quote ()))))) type$645$13617))))) (binding-type$645$12236 b$645$13615))) (label->binding$645$12232 lab$645$13613 r$645$13600))) (id->label$645$12230 id$645$13611))) ls/false$645$13607) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13605 (quote ()))))) ((lambda (x$645$13620) (if (syntax-pair?$645$12194 x$645$13620) (begin (quote #f) ((lambda (q$645$13622) (if q$645$13622 (begin (quote #f) ((lambda (r$645$13624) (if r$645$13624 (begin (quote #f) (append q$645$13622 r$645$13624)) (quote #f))) ((lambda (x$645$13626) (if (syntax-pair?$645$12194 x$645$13626) (begin (quote #f) ((lambda (q$645$13628) (if q$645$13628 (begin (quote #f) ((lambda (r$645$13630) (if r$645$13630 (begin (quote #f) (append q$645$13628 r$645$13630)) (quote #f))) ((lambda (x$645$13632) (if (equal? (stx->datum$645$12228 x$645$13632) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13626)))) (quote #f))) ((lambda (x$645$13634) (list x$645$13634)) (syntax-car$645$12202 x$645$13626)))) (quote #f))) (syntax-cdr$645$12206 x$645$13620)))) (quote #f))) ((lambda (x$645$13636) (quote ())) (syntax-car$645$12202 x$645$13620)))) (quote #f))) t$645$13605))) e$645$13599))) (set! when-transformer$645$12654 (lambda (e$645$13638 r$645$13639 mr$645$13640) ((lambda (t$645$13644) ((lambda (ls/false$645$13646) (if (if ls/false$645$13646 (begin (quote #f) (apply (lambda (test$645$13648 e$645$13649 e*$645$13650) (quote #t)) ls/false$645$13646)) (quote #f)) (apply (lambda (test$645$13654 e$645$13655 e*$645$13656) (list (quote if) (chi-expr$645$12740 test$645$13654 r$645$13639 mr$645$13640) (build-sequence$645$12091 (quote #f) (chi-expr*$645$12736 (cons e$645$13655 e*$645$13656) r$645$13639 mr$645$13640)) (build-void$645$12090))) ls/false$645$13646) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13644 (quote ()))))) ((lambda (x$645$13660) (if (syntax-pair?$645$12194 x$645$13660) (begin (quote #f) ((lambda (q$645$13662) (if q$645$13662 (begin (quote #f) ((lambda (r$645$13664) (if r$645$13664 (begin (quote #f) (append q$645$13662 r$645$13664)) (quote #f))) ((lambda (x$645$13666) (if (syntax-pair?$645$12194 x$645$13666) (begin (quote #f) ((lambda (q$645$13668) (if q$645$13668 (begin (quote #f) ((lambda (r$645$13670) (if r$645$13670 (begin (quote #f) (append q$645$13668 r$645$13670)) (quote #f))) ((lambda (x$645$13672) (if (syntax-pair?$645$12194 x$645$13672) (begin (quote #f) ((lambda (q$645$13674) (if q$645$13674 (begin (quote #f) ((lambda (r$645$13676) (if r$645$13676 (begin (quote #f) (append q$645$13674 r$645$13676)) (quote #f))) ((letrec ((f$645$13678 (lambda (x$645$13680) (if (syntax-pair?$645$12194 x$645$13680) ((lambda (cars/f$645$13682) (if cars/f$645$13682 (begin (quote #f) ((lambda (cdrs/f$645$13684) (if cdrs/f$645$13684 (begin (quote #f) (map cons cars/f$645$13682 cdrs/f$645$13684)) (quote #f))) (f$645$13678 (syntax-cdr$645$12206 x$645$13680)))) (quote #f))) ((lambda (x$645$13686) (list x$645$13686)) (syntax-car$645$12202 x$645$13680))) (if (syntax-null?$645$12198 x$645$13680) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$13678) (syntax-cdr$645$12206 x$645$13672)))) (quote #f))) ((lambda (x$645$13688) (list x$645$13688)) (syntax-car$645$12202 x$645$13672)))) (quote #f))) (syntax-cdr$645$12206 x$645$13666)))) (quote #f))) ((lambda (x$645$13690) (list x$645$13690)) (syntax-car$645$12202 x$645$13666)))) (quote #f))) (syntax-cdr$645$12206 x$645$13660)))) (quote #f))) ((lambda (x$645$13692) (quote ())) (syntax-car$645$12202 x$645$13660)))) (quote #f))) t$645$13644))) e$645$13638))) (set! unless-transformer$645$12656 (lambda (e$645$13694 r$645$13695 mr$645$13696) ((lambda (t$645$13700) ((lambda (ls/false$645$13702) (if (if ls/false$645$13702 (begin (quote #f) (apply (lambda (test$645$13704 e$645$13705 e*$645$13706) (quote #t)) ls/false$645$13702)) (quote #f)) (apply (lambda (test$645$13710 e$645$13711 e*$645$13712) (list (quote if) (chi-expr$645$12740 test$645$13710 r$645$13695 mr$645$13696) (build-void$645$12090) (build-sequence$645$12091 (quote #f) (chi-expr*$645$12736 (cons e$645$13711 e*$645$13712) r$645$13695 mr$645$13696)))) ls/false$645$13702) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13700 (quote ()))))) ((lambda (x$645$13716) (if (syntax-pair?$645$12194 x$645$13716) (begin (quote #f) ((lambda (q$645$13718) (if q$645$13718 (begin (quote #f) ((lambda (r$645$13720) (if r$645$13720 (begin (quote #f) (append q$645$13718 r$645$13720)) (quote #f))) ((lambda (x$645$13722) (if (syntax-pair?$645$12194 x$645$13722) (begin (quote #f) ((lambda (q$645$13724) (if q$645$13724 (begin (quote #f) ((lambda (r$645$13726) (if r$645$13726 (begin (quote #f) (append q$645$13724 r$645$13726)) (quote #f))) ((lambda (x$645$13728) (if (syntax-pair?$645$12194 x$645$13728) (begin (quote #f) ((lambda (q$645$13730) (if q$645$13730 (begin (quote #f) ((lambda (r$645$13732) (if r$645$13732 (begin (quote #f) (append q$645$13730 r$645$13732)) (quote #f))) ((letrec ((f$645$13734 (lambda (x$645$13736) (if (syntax-pair?$645$12194 x$645$13736) ((lambda (cars/f$645$13738) (if cars/f$645$13738 (begin (quote #f) ((lambda (cdrs/f$645$13740) (if cdrs/f$645$13740 (begin (quote #f) (map cons cars/f$645$13738 cdrs/f$645$13740)) (quote #f))) (f$645$13734 (syntax-cdr$645$12206 x$645$13736)))) (quote #f))) ((lambda (x$645$13742) (list x$645$13742)) (syntax-car$645$12202 x$645$13736))) (if (syntax-null?$645$12198 x$645$13736) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$13734) (syntax-cdr$645$12206 x$645$13728)))) (quote #f))) ((lambda (x$645$13744) (list x$645$13744)) (syntax-car$645$12202 x$645$13728)))) (quote #f))) (syntax-cdr$645$12206 x$645$13722)))) (quote #f))) ((lambda (x$645$13746) (list x$645$13746)) (syntax-car$645$12202 x$645$13722)))) (quote #f))) (syntax-cdr$645$12206 x$645$13716)))) (quote #f))) ((lambda (x$645$13748) (quote ())) (syntax-car$645$12202 x$645$13716)))) (quote #f))) t$645$13700))) e$645$13694))) (set! if-transformer$645$12658 (lambda (e$645$13750 r$645$13751 mr$645$13752) ((lambda (t$645$13756) ((lambda (ls/false$645$13758) (if (if ls/false$645$13758 (begin (quote #f) (apply (lambda (e0$645$13760 e1$645$13761 e2$645$13762) (quote #t)) ls/false$645$13758)) (quote #f)) (apply (lambda (e0$645$13766 e1$645$13767 e2$645$13768) (list (quote if) (chi-expr$645$12740 e0$645$13766 r$645$13751 mr$645$13752) (chi-expr$645$12740 e1$645$13767 r$645$13751 mr$645$13752) (chi-expr$645$12740 e2$645$13768 r$645$13751 mr$645$13752))) ls/false$645$13758) ((lambda (t$645$13772) ((lambda (ls/false$645$13774) (if (if ls/false$645$13774 (begin (quote #f) (apply (lambda (e0$645$13776 e1$645$13777) (quote #t)) ls/false$645$13774)) (quote #f)) (apply (lambda (e0$645$13780 e1$645$13781) (list (quote if) (chi-expr$645$12740 e0$645$13780 r$645$13751 mr$645$13752) (chi-expr$645$12740 e1$645$13781 r$645$13751 mr$645$13752) (build-void$645$12090))) ls/false$645$13774) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13772 (quote ()))))) ((lambda (x$645$13784) (if (syntax-pair?$645$12194 x$645$13784) (begin (quote #f) ((lambda (q$645$13786) (if q$645$13786 (begin (quote #f) ((lambda (r$645$13788) (if r$645$13788 (begin (quote #f) (append q$645$13786 r$645$13788)) (quote #f))) ((lambda (x$645$13790) (if (syntax-pair?$645$12194 x$645$13790) (begin (quote #f) ((lambda (q$645$13792) (if q$645$13792 (begin (quote #f) ((lambda (r$645$13794) (if r$645$13794 (begin (quote #f) (append q$645$13792 r$645$13794)) (quote #f))) ((lambda (x$645$13796) (if (syntax-pair?$645$12194 x$645$13796) (begin (quote #f) ((lambda (q$645$13798) (if q$645$13798 (begin (quote #f) ((lambda (r$645$13800) (if r$645$13800 (begin (quote #f) (append q$645$13798 r$645$13800)) (quote #f))) ((lambda (x$645$13802) (if (equal? (stx->datum$645$12228 x$645$13802) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13796)))) (quote #f))) ((lambda (x$645$13804) (list x$645$13804)) (syntax-car$645$12202 x$645$13796)))) (quote #f))) (syntax-cdr$645$12206 x$645$13790)))) (quote #f))) ((lambda (x$645$13806) (list x$645$13806)) (syntax-car$645$12202 x$645$13790)))) (quote #f))) (syntax-cdr$645$12206 x$645$13784)))) (quote #f))) ((lambda (x$645$13808) (quote ())) (syntax-car$645$12202 x$645$13784)))) (quote #f))) t$645$13772))) t$645$13756))) ((lambda (x$645$13810) (if (syntax-pair?$645$12194 x$645$13810) (begin (quote #f) ((lambda (q$645$13812) (if q$645$13812 (begin (quote #f) ((lambda (r$645$13814) (if r$645$13814 (begin (quote #f) (append q$645$13812 r$645$13814)) (quote #f))) ((lambda (x$645$13816) (if (syntax-pair?$645$12194 x$645$13816) (begin (quote #f) ((lambda (q$645$13818) (if q$645$13818 (begin (quote #f) ((lambda (r$645$13820) (if r$645$13820 (begin (quote #f) (append q$645$13818 r$645$13820)) (quote #f))) ((lambda (x$645$13822) (if (syntax-pair?$645$12194 x$645$13822) (begin (quote #f) ((lambda (q$645$13824) (if q$645$13824 (begin (quote #f) ((lambda (r$645$13826) (if r$645$13826 (begin (quote #f) (append q$645$13824 r$645$13826)) (quote #f))) ((lambda (x$645$13828) (if (syntax-pair?$645$12194 x$645$13828) (begin (quote #f) ((lambda (q$645$13830) (if q$645$13830 (begin (quote #f) ((lambda (r$645$13832) (if r$645$13832 (begin (quote #f) (append q$645$13830 r$645$13832)) (quote #f))) ((lambda (x$645$13834) (if (equal? (stx->datum$645$12228 x$645$13834) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$13828)))) (quote #f))) ((lambda (x$645$13836) (list x$645$13836)) (syntax-car$645$12202 x$645$13828)))) (quote #f))) (syntax-cdr$645$12206 x$645$13822)))) (quote #f))) ((lambda (x$645$13838) (list x$645$13838)) (syntax-car$645$12202 x$645$13822)))) (quote #f))) (syntax-cdr$645$12206 x$645$13816)))) (quote #f))) ((lambda (x$645$13840) (list x$645$13840)) (syntax-car$645$12202 x$645$13816)))) (quote #f))) (syntax-cdr$645$12206 x$645$13810)))) (quote #f))) ((lambda (x$645$13842) (quote ())) (syntax-car$645$12202 x$645$13810)))) (quote #f))) t$645$13756))) e$645$13750))) (set! case-transformer$645$12660 (lambda (e$645$13844 r$645$13845 mr$645$13846) ((lambda (build-one$645$13850 build-last$645$13852) (begin (set! build-one$645$13850 (lambda (t$645$13960 cls$645$13961 rest$645$13962) ((lambda (t$645$13966) ((lambda (ls/false$645$13968) (if (if ls/false$645$13968 (begin (quote #f) (apply (lambda (d*$645$13970 e$645$13971 e*$645$13972) (quote #t)) ls/false$645$13968)) (quote #f)) (apply (lambda (d*$645$13976 e$645$13977 e*$645$13978) (list (quote if) (list (quote (primitive memv)) t$645$13960 (list (quote quote) (stx->datum$645$12228 d*$645$13976))) (build-sequence$645$12091 (quote #f) (chi-expr*$645$12736 (cons e$645$13977 e*$645$13978) r$645$13845 mr$645$13846)) rest$645$13962)) ls/false$645$13968) ((lambda (t$645$13982) ((lambda (ls/false$645$13984) (if (if ls/false$645$13984 (begin (quote #f) (apply (lambda (else$645$13986) (quote #t)) ls/false$645$13984)) (quote #f)) (apply (lambda (else$645$13988) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 e$645$13844))) ls/false$645$13984) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13982 (quote ()))))) ((lambda (x$645$13990) (list x$645$13990)) t$645$13982))) t$645$13966))) ((lambda (x$645$13992) (if (syntax-pair?$645$12194 x$645$13992) (begin (quote #f) ((lambda (q$645$13994) (if q$645$13994 (begin (quote #f) ((lambda (r$645$13996) (if r$645$13996 (begin (quote #f) (append q$645$13994 r$645$13996)) (quote #f))) ((lambda (x$645$13998) (if (syntax-pair?$645$12194 x$645$13998) (begin (quote #f) ((lambda (q$645$14000) (if q$645$14000 (begin (quote #f) ((lambda (r$645$14002) (if r$645$14002 (begin (quote #f) (append q$645$14000 r$645$14002)) (quote #f))) ((letrec ((f$645$14004 (lambda (x$645$14006) (if (syntax-pair?$645$12194 x$645$14006) ((lambda (cars/f$645$14008) (if cars/f$645$14008 (begin (quote #f) ((lambda (cdrs/f$645$14010) (if cdrs/f$645$14010 (begin (quote #f) (map cons cars/f$645$14008 cdrs/f$645$14010)) (quote #f))) (f$645$14004 (syntax-cdr$645$12206 x$645$14006)))) (quote #f))) ((lambda (x$645$14012) (list x$645$14012)) (syntax-car$645$12202 x$645$14006))) (if (syntax-null?$645$12198 x$645$14006) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$14004) (syntax-cdr$645$12206 x$645$13998)))) (quote #f))) ((lambda (x$645$14014) (list x$645$14014)) (syntax-car$645$12202 x$645$13998)))) (quote #f))) (syntax-cdr$645$12206 x$645$13992)))) (quote #f))) ((letrec ((f$645$14016 (lambda (x$645$14018) (if (syntax-pair?$645$12194 x$645$14018) ((lambda (cars/f$645$14020) (if cars/f$645$14020 (begin (quote #f) ((lambda (cdrs/f$645$14022) (if cdrs/f$645$14022 (begin (quote #f) (map cons cars/f$645$14020 cdrs/f$645$14022)) (quote #f))) (f$645$14016 (syntax-cdr$645$12206 x$645$14018)))) (quote #f))) ((lambda (x$645$14024) (list x$645$14024)) (syntax-car$645$12202 x$645$14018))) (if (syntax-null?$645$12198 x$645$14018) (list (begin (quote d*) (quote ()))) (quote #f)))))) f$645$14016) (syntax-car$645$12202 x$645$13992)))) (quote #f))) t$645$13966))) cls$645$13961))) (set! build-last$645$13852 (lambda (t$645$13854 cls$645$13855) ((lambda (t$645$13858) ((lambda (ls/false$645$13860) (if (if ls/false$645$13860 (begin (quote #f) (apply (lambda (d*$645$13862 e$645$13863 e*$645$13864) (quote #t)) ls/false$645$13860)) (quote #f)) (apply (lambda (d*$645$13868 e$645$13869 e*$645$13870) (build-one$645$13850 t$645$13854 cls$645$13855 (build-void$645$12090))) ls/false$645$13860) ((lambda (t$645$13874) ((lambda (ls/false$645$13876) (if (if ls/false$645$13876 (begin (quote #f) (apply (lambda (else-kwd$645$13878 x$645$13879 x*$645$13880) (quote #t)) ls/false$645$13876)) (quote #f)) (apply (lambda (else-kwd$645$13884 x$645$13885 x*$645$13886) (if (if (id?$645$12208 else-kwd$645$13884) (begin (quote #f) (free-id=?$645$12216 else-kwd$645$13884 (scheme-stx$645$12638 (quote else)))) (quote #f)) (build-sequence$645$12091 (quote #f) (chi-expr*$645$12736 (cons x$645$13885 x*$645$13886) r$645$13845 mr$645$13846)) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 e$645$13844)))) ls/false$645$13876) ((lambda (t$645$13890) ((lambda (ls/false$645$13892) (if (if ls/false$645$13892 (begin (quote #f) (apply (lambda (else$645$13894) (quote #t)) ls/false$645$13892)) (quote #f)) (apply (lambda (else$645$13896) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 e$645$13844))) ls/false$645$13892) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$13890 (quote ()))))) ((lambda (x$645$13898) (list x$645$13898)) t$645$13890))) t$645$13874))) ((lambda (x$645$13900) (if (syntax-pair?$645$12194 x$645$13900) (begin (quote #f) ((lambda (q$645$13902) (if q$645$13902 (begin (quote #f) ((lambda (r$645$13904) (if r$645$13904 (begin (quote #f) (append q$645$13902 r$645$13904)) (quote #f))) ((lambda (x$645$13906) (if (syntax-pair?$645$12194 x$645$13906) (begin (quote #f) ((lambda (q$645$13908) (if q$645$13908 (begin (quote #f) ((lambda (r$645$13910) (if r$645$13910 (begin (quote #f) (append q$645$13908 r$645$13910)) (quote #f))) ((letrec ((f$645$13912 (lambda (x$645$13914) (if (syntax-pair?$645$12194 x$645$13914) ((lambda (cars/f$645$13916) (if cars/f$645$13916 (begin (quote #f) ((lambda (cdrs/f$645$13918) (if cdrs/f$645$13918 (begin (quote #f) (map cons cars/f$645$13916 cdrs/f$645$13918)) (quote #f))) (f$645$13912 (syntax-cdr$645$12206 x$645$13914)))) (quote #f))) ((lambda (x$645$13920) (list x$645$13920)) (syntax-car$645$12202 x$645$13914))) (if (syntax-null?$645$12198 x$645$13914) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$13912) (syntax-cdr$645$12206 x$645$13906)))) (quote #f))) ((lambda (x$645$13922) (list x$645$13922)) (syntax-car$645$12202 x$645$13906)))) (quote #f))) (syntax-cdr$645$12206 x$645$13900)))) (quote #f))) ((lambda (x$645$13924) (list x$645$13924)) (syntax-car$645$12202 x$645$13900)))) (quote #f))) t$645$13874))) t$645$13858))) ((lambda (x$645$13926) (if (syntax-pair?$645$12194 x$645$13926) (begin (quote #f) ((lambda (q$645$13928) (if q$645$13928 (begin (quote #f) ((lambda (r$645$13930) (if r$645$13930 (begin (quote #f) (append q$645$13928 r$645$13930)) (quote #f))) ((lambda (x$645$13932) (if (syntax-pair?$645$12194 x$645$13932) (begin (quote #f) ((lambda (q$645$13934) (if q$645$13934 (begin (quote #f) ((lambda (r$645$13936) (if r$645$13936 (begin (quote #f) (append q$645$13934 r$645$13936)) (quote #f))) ((letrec ((f$645$13938 (lambda (x$645$13940) (if (syntax-pair?$645$12194 x$645$13940) ((lambda (cars/f$645$13942) (if cars/f$645$13942 (begin (quote #f) ((lambda (cdrs/f$645$13944) (if cdrs/f$645$13944 (begin (quote #f) (map cons cars/f$645$13942 cdrs/f$645$13944)) (quote #f))) (f$645$13938 (syntax-cdr$645$12206 x$645$13940)))) (quote #f))) ((lambda (x$645$13946) (list x$645$13946)) (syntax-car$645$12202 x$645$13940))) (if (syntax-null?$645$12198 x$645$13940) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$13938) (syntax-cdr$645$12206 x$645$13932)))) (quote #f))) ((lambda (x$645$13948) (list x$645$13948)) (syntax-car$645$12202 x$645$13932)))) (quote #f))) (syntax-cdr$645$12206 x$645$13926)))) (quote #f))) ((letrec ((f$645$13950 (lambda (x$645$13952) (if (syntax-pair?$645$12194 x$645$13952) ((lambda (cars/f$645$13954) (if cars/f$645$13954 (begin (quote #f) ((lambda (cdrs/f$645$13956) (if cdrs/f$645$13956 (begin (quote #f) (map cons cars/f$645$13954 cdrs/f$645$13956)) (quote #f))) (f$645$13950 (syntax-cdr$645$12206 x$645$13952)))) (quote #f))) ((lambda (x$645$13958) (list x$645$13958)) (syntax-car$645$12202 x$645$13952))) (if (syntax-null?$645$12198 x$645$13952) (list (begin (quote d*) (quote ()))) (quote #f)))))) f$645$13950) (syntax-car$645$12202 x$645$13926)))) (quote #f))) t$645$13858))) cls$645$13855))) ((lambda (t$645$14026) ((lambda (ls/false$645$14028) (if (if ls/false$645$14028 (begin (quote #f) (apply (lambda (expr$645$14030) (quote #t)) ls/false$645$14028)) (quote #f)) (apply (lambda (expr$645$14032) (build-sequence$645$12091 (quote #f) (list (chi-expr$645$12740 expr$645$14032 r$645$13845 mr$645$13846) (build-void$645$12090)))) ls/false$645$14028) ((lambda (t$645$14034) ((lambda (ls/false$645$14036) (if (if ls/false$645$14036 (begin (quote #f) (apply (lambda (expr$645$14038 cls$645$14039 cls*$645$14040) (quote #t)) ls/false$645$14036)) (quote #f)) (apply (lambda (expr$645$14044 cls$645$14045 cls*$645$14046) ((lambda (t$645$14050) (build-let$645$12095 (quote #f) (list t$645$14050) (list (chi-expr$645$12740 expr$645$14044 r$645$13845 mr$645$13846)) (letrec ((f$645$14052 (lambda (cls$645$14054 cls*$645$14055) (if (null? cls*$645$14055) (build-last$645$13852 t$645$14050 cls$645$14054) (build-one$645$13850 t$645$14050 cls$645$14054 (f$645$14052 (car cls*$645$14055) (cdr cls*$645$14055))))))) (f$645$14052 cls$645$14045 cls*$645$14046)))) (gen-lexical$645$12118 (quote t)))) ls/false$645$14036) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14034 (quote ()))))) ((lambda (x$645$14058) (if (syntax-pair?$645$12194 x$645$14058) (begin (quote #f) ((lambda (q$645$14060) (if q$645$14060 (begin (quote #f) ((lambda (r$645$14062) (if r$645$14062 (begin (quote #f) (append q$645$14060 r$645$14062)) (quote #f))) ((lambda (x$645$14064) (if (syntax-pair?$645$12194 x$645$14064) (begin (quote #f) ((lambda (q$645$14066) (if q$645$14066 (begin (quote #f) ((lambda (r$645$14068) (if r$645$14068 (begin (quote #f) (append q$645$14066 r$645$14068)) (quote #f))) ((lambda (x$645$14070) (if (syntax-pair?$645$12194 x$645$14070) (begin (quote #f) ((lambda (q$645$14072) (if q$645$14072 (begin (quote #f) ((lambda (r$645$14074) (if r$645$14074 (begin (quote #f) (append q$645$14072 r$645$14074)) (quote #f))) ((letrec ((f$645$14076 (lambda (x$645$14078) (if (syntax-pair?$645$12194 x$645$14078) ((lambda (cars/f$645$14080) (if cars/f$645$14080 (begin (quote #f) ((lambda (cdrs/f$645$14082) (if cdrs/f$645$14082 (begin (quote #f) (map cons cars/f$645$14080 cdrs/f$645$14082)) (quote #f))) (f$645$14076 (syntax-cdr$645$12206 x$645$14078)))) (quote #f))) ((lambda (x$645$14084) (list x$645$14084)) (syntax-car$645$12202 x$645$14078))) (if (syntax-null?$645$12198 x$645$14078) (list (begin (quote cls*) (quote ()))) (quote #f)))))) f$645$14076) (syntax-cdr$645$12206 x$645$14070)))) (quote #f))) ((lambda (x$645$14086) (list x$645$14086)) (syntax-car$645$12202 x$645$14070)))) (quote #f))) (syntax-cdr$645$12206 x$645$14064)))) (quote #f))) ((lambda (x$645$14088) (list x$645$14088)) (syntax-car$645$12202 x$645$14064)))) (quote #f))) (syntax-cdr$645$12206 x$645$14058)))) (quote #f))) ((lambda (x$645$14090) (quote ())) (syntax-car$645$12202 x$645$14058)))) (quote #f))) t$645$14034))) t$645$14026))) ((lambda (x$645$14092) (if (syntax-pair?$645$12194 x$645$14092) (begin (quote #f) ((lambda (q$645$14094) (if q$645$14094 (begin (quote #f) ((lambda (r$645$14096) (if r$645$14096 (begin (quote #f) (append q$645$14094 r$645$14096)) (quote #f))) ((lambda (x$645$14098) (if (syntax-pair?$645$12194 x$645$14098) (begin (quote #f) ((lambda (q$645$14100) (if q$645$14100 (begin (quote #f) ((lambda (r$645$14102) (if r$645$14102 (begin (quote #f) (append q$645$14100 r$645$14102)) (quote #f))) ((lambda (x$645$14104) (if (equal? (stx->datum$645$12228 x$645$14104) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14098)))) (quote #f))) ((lambda (x$645$14106) (list x$645$14106)) (syntax-car$645$12202 x$645$14098)))) (quote #f))) (syntax-cdr$645$12206 x$645$14092)))) (quote #f))) ((lambda (x$645$14108) (quote ())) (syntax-car$645$12202 x$645$14092)))) (quote #f))) t$645$14026))) e$645$13844))) (quote #f) (quote #f)))) (set! quote-transformer$645$12662 (lambda (e$645$14110 r$645$14111 mr$645$14112) ((lambda (t$645$14116) ((lambda (ls/false$645$14118) (if (if ls/false$645$14118 (begin (quote #f) (apply (lambda (datum$645$14120) (quote #t)) ls/false$645$14118)) (quote #f)) (apply (lambda (datum$645$14122) (list (quote quote) (stx->datum$645$12228 datum$645$14122))) ls/false$645$14118) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14116 (quote ()))))) ((lambda (x$645$14124) (if (syntax-pair?$645$12194 x$645$14124) (begin (quote #f) ((lambda (q$645$14126) (if q$645$14126 (begin (quote #f) ((lambda (r$645$14128) (if r$645$14128 (begin (quote #f) (append q$645$14126 r$645$14128)) (quote #f))) ((lambda (x$645$14130) (if (syntax-pair?$645$12194 x$645$14130) (begin (quote #f) ((lambda (q$645$14132) (if q$645$14132 (begin (quote #f) ((lambda (r$645$14134) (if r$645$14134 (begin (quote #f) (append q$645$14132 r$645$14134)) (quote #f))) ((lambda (x$645$14136) (if (equal? (stx->datum$645$12228 x$645$14136) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14130)))) (quote #f))) ((lambda (x$645$14138) (list x$645$14138)) (syntax-car$645$12202 x$645$14130)))) (quote #f))) (syntax-cdr$645$12206 x$645$14124)))) (quote #f))) ((lambda (x$645$14140) (quote ())) (syntax-car$645$12202 x$645$14124)))) (quote #f))) t$645$14116))) e$645$14110))) (set! case-lambda-transformer$645$12664 (lambda (e$645$14142 r$645$14143 mr$645$14144) ((lambda (t$645$14148) ((lambda (ls/false$645$14150) (if (if ls/false$645$14150 (begin (quote #f) (apply (lambda (fmls*$645$14152 b*$645$14153 b**$645$14154) (quote #t)) ls/false$645$14150)) (quote #f)) (apply (lambda (fmls*$645$14158 b*$645$14159 b**$645$14160) (call-with-values (lambda () (chi-lambda-clause*$645$12746 fmls*$645$14158 (map cons b*$645$14159 b**$645$14160) r$645$14143 mr$645$14144)) (lambda (fmls*$645$14164 body*$645$14165) (build-case-lambda$645$12096 (quote #f) fmls*$645$14164 body*$645$14165)))) ls/false$645$14150) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14148 (quote ()))))) ((lambda (x$645$14168) (if (syntax-pair?$645$12194 x$645$14168) (begin (quote #f) ((lambda (q$645$14170) (if q$645$14170 (begin (quote #f) ((lambda (r$645$14172) (if r$645$14172 (begin (quote #f) (append q$645$14170 r$645$14172)) (quote #f))) ((letrec ((f$645$14174 (lambda (x$645$14176) (if (syntax-pair?$645$12194 x$645$14176) ((lambda (cars/f$645$14178) (if cars/f$645$14178 (begin (quote #f) ((lambda (cdrs/f$645$14180) (if cdrs/f$645$14180 (begin (quote #f) (map cons cars/f$645$14178 cdrs/f$645$14180)) (quote #f))) (f$645$14174 (syntax-cdr$645$12206 x$645$14176)))) (quote #f))) ((lambda (x$645$14182) (if (syntax-pair?$645$12194 x$645$14182) (begin (quote #f) ((lambda (q$645$14184) (if q$645$14184 (begin (quote #f) ((lambda (r$645$14186) (if r$645$14186 (begin (quote #f) (append q$645$14184 r$645$14186)) (quote #f))) ((lambda (x$645$14188) (if (syntax-pair?$645$12194 x$645$14188) (begin (quote #f) ((lambda (q$645$14190) (if q$645$14190 (begin (quote #f) ((lambda (r$645$14192) (if r$645$14192 (begin (quote #f) (append q$645$14190 r$645$14192)) (quote #f))) ((letrec ((f$645$14194 (lambda (x$645$14196) (if (syntax-pair?$645$12194 x$645$14196) ((lambda (cars/f$645$14198) (if cars/f$645$14198 (begin (quote #f) ((lambda (cdrs/f$645$14200) (if cdrs/f$645$14200 (begin (quote #f) (map cons cars/f$645$14198 cdrs/f$645$14200)) (quote #f))) (f$645$14194 (syntax-cdr$645$12206 x$645$14196)))) (quote #f))) ((lambda (x$645$14202) (list x$645$14202)) (syntax-car$645$12202 x$645$14196))) (if (syntax-null?$645$12198 x$645$14196) (list (begin (quote b**) (quote ()))) (quote #f)))))) f$645$14194) (syntax-cdr$645$12206 x$645$14188)))) (quote #f))) ((lambda (x$645$14204) (list x$645$14204)) (syntax-car$645$12202 x$645$14188)))) (quote #f))) (syntax-cdr$645$12206 x$645$14182)))) (quote #f))) ((lambda (x$645$14206) (list x$645$14206)) (syntax-car$645$12202 x$645$14182)))) (quote #f))) (syntax-car$645$12202 x$645$14176))) (if (syntax-null?$645$12198 x$645$14176) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) f$645$14174) (syntax-cdr$645$12206 x$645$14168)))) (quote #f))) ((lambda (x$645$14208) (quote ())) (syntax-car$645$12202 x$645$14168)))) (quote #f))) t$645$14148))) e$645$14142))) (set! lambda-transformer$645$12666 (lambda (e$645$14210 r$645$14211 mr$645$14212) ((lambda (t$645$14216) ((lambda (ls/false$645$14218) (if (if ls/false$645$14218 (begin (quote #f) (apply (lambda (fmls$645$14220 b$645$14221 b*$645$14222) (quote #t)) ls/false$645$14218)) (quote #f)) (apply (lambda (fmls$645$14226 b$645$14227 b*$645$14228) (call-with-values (lambda () (chi-lambda-clause$645$12744 fmls$645$14226 (cons b$645$14227 b*$645$14228) r$645$14211 mr$645$14212)) (lambda (fmls$645$14232 body$645$14233) (build-lambda$645$12097 (quote #f) fmls$645$14232 body$645$14233)))) ls/false$645$14218) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14216 (quote ()))))) ((lambda (x$645$14236) (if (syntax-pair?$645$12194 x$645$14236) (begin (quote #f) ((lambda (q$645$14238) (if q$645$14238 (begin (quote #f) ((lambda (r$645$14240) (if r$645$14240 (begin (quote #f) (append q$645$14238 r$645$14240)) (quote #f))) ((lambda (x$645$14242) (if (syntax-pair?$645$12194 x$645$14242) (begin (quote #f) ((lambda (q$645$14244) (if q$645$14244 (begin (quote #f) ((lambda (r$645$14246) (if r$645$14246 (begin (quote #f) (append q$645$14244 r$645$14246)) (quote #f))) ((lambda (x$645$14248) (if (syntax-pair?$645$12194 x$645$14248) (begin (quote #f) ((lambda (q$645$14250) (if q$645$14250 (begin (quote #f) ((lambda (r$645$14252) (if r$645$14252 (begin (quote #f) (append q$645$14250 r$645$14252)) (quote #f))) ((letrec ((f$645$14254 (lambda (x$645$14256) (if (syntax-pair?$645$12194 x$645$14256) ((lambda (cars/f$645$14258) (if cars/f$645$14258 (begin (quote #f) ((lambda (cdrs/f$645$14260) (if cdrs/f$645$14260 (begin (quote #f) (map cons cars/f$645$14258 cdrs/f$645$14260)) (quote #f))) (f$645$14254 (syntax-cdr$645$12206 x$645$14256)))) (quote #f))) ((lambda (x$645$14262) (list x$645$14262)) (syntax-car$645$12202 x$645$14256))) (if (syntax-null?$645$12198 x$645$14256) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14254) (syntax-cdr$645$12206 x$645$14248)))) (quote #f))) ((lambda (x$645$14264) (list x$645$14264)) (syntax-car$645$12202 x$645$14248)))) (quote #f))) (syntax-cdr$645$12206 x$645$14242)))) (quote #f))) ((lambda (x$645$14266) (list x$645$14266)) (syntax-car$645$12202 x$645$14242)))) (quote #f))) (syntax-cdr$645$12206 x$645$14236)))) (quote #f))) ((lambda (x$645$14268) (quote ())) (syntax-car$645$12202 x$645$14236)))) (quote #f))) t$645$14216))) e$645$14210))) (set! bless$645$12668 (lambda (x$645$14270) (mkstx$645$12184 (letrec ((f$645$14272 (lambda (x$645$14274) (if (stx?$645$12160 x$645$14274) x$645$14274 (if (pair? x$645$14274) (cons (f$645$14272 (car x$645$14274)) (f$645$14272 (cdr x$645$14274))) (if (symbol? x$645$14274) (scheme-stx$645$12638 x$645$14274) (if (vector? x$645$14274) (list->vector (map f$645$14272 (vector->list x$645$14274))) x$645$14274))))))) (f$645$14272 x$645$14270)) (quote ()) (quote ())))) (set! with-syntax-macro$645$12670 (lambda (e$645$14276) ((lambda (t$645$14278) ((lambda (ls/false$645$14280) (if (if ls/false$645$14280 (begin (quote #f) (apply (lambda (fml*$645$14282 expr*$645$14283 b$645$14284 b*$645$14285) (quote #t)) ls/false$645$14280)) (quote #f)) (apply (lambda (fml*$645$14290 expr*$645$14291 b$645$14292 b*$645$14293) (bless$645$12668 (list (quote syntax-case) (cons (quote list) expr*$645$14291) (quote ()) (list fml*$645$14290 (cons (quote begin) (cons b$645$14292 b*$645$14293)))))) ls/false$645$14280) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14278 (quote ()))))) ((lambda (x$645$14298) (if (syntax-pair?$645$12194 x$645$14298) (begin (quote #f) ((lambda (q$645$14300) (if q$645$14300 (begin (quote #f) ((lambda (r$645$14302) (if r$645$14302 (begin (quote #f) (append q$645$14300 r$645$14302)) (quote #f))) ((lambda (x$645$14304) (if (syntax-pair?$645$12194 x$645$14304) (begin (quote #f) ((lambda (q$645$14306) (if q$645$14306 (begin (quote #f) ((lambda (r$645$14308) (if r$645$14308 (begin (quote #f) (append q$645$14306 r$645$14308)) (quote #f))) ((lambda (x$645$14310) (if (syntax-pair?$645$12194 x$645$14310) (begin (quote #f) ((lambda (q$645$14312) (if q$645$14312 (begin (quote #f) ((lambda (r$645$14314) (if r$645$14314 (begin (quote #f) (append q$645$14312 r$645$14314)) (quote #f))) ((letrec ((f$645$14316 (lambda (x$645$14318) (if (syntax-pair?$645$12194 x$645$14318) ((lambda (cars/f$645$14320) (if cars/f$645$14320 (begin (quote #f) ((lambda (cdrs/f$645$14322) (if cdrs/f$645$14322 (begin (quote #f) (map cons cars/f$645$14320 cdrs/f$645$14322)) (quote #f))) (f$645$14316 (syntax-cdr$645$12206 x$645$14318)))) (quote #f))) ((lambda (x$645$14324) (list x$645$14324)) (syntax-car$645$12202 x$645$14318))) (if (syntax-null?$645$12198 x$645$14318) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14316) (syntax-cdr$645$12206 x$645$14310)))) (quote #f))) ((lambda (x$645$14326) (list x$645$14326)) (syntax-car$645$12202 x$645$14310)))) (quote #f))) (syntax-cdr$645$12206 x$645$14304)))) (quote #f))) ((letrec ((f$645$14328 (lambda (x$645$14330) (if (syntax-pair?$645$12194 x$645$14330) ((lambda (cars/f$645$14332) (if cars/f$645$14332 (begin (quote #f) ((lambda (cdrs/f$645$14334) (if cdrs/f$645$14334 (begin (quote #f) (map cons cars/f$645$14332 cdrs/f$645$14334)) (quote #f))) (f$645$14328 (syntax-cdr$645$12206 x$645$14330)))) (quote #f))) ((lambda (x$645$14336) (if (syntax-pair?$645$12194 x$645$14336) (begin (quote #f) ((lambda (q$645$14338) (if q$645$14338 (begin (quote #f) ((lambda (r$645$14340) (if r$645$14340 (begin (quote #f) (append q$645$14338 r$645$14340)) (quote #f))) ((lambda (x$645$14342) (if (syntax-pair?$645$12194 x$645$14342) (begin (quote #f) ((lambda (q$645$14344) (if q$645$14344 (begin (quote #f) ((lambda (r$645$14346) (if r$645$14346 (begin (quote #f) (append q$645$14344 r$645$14346)) (quote #f))) ((lambda (x$645$14348) (if (equal? (stx->datum$645$12228 x$645$14348) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14342)))) (quote #f))) ((lambda (x$645$14350) (list x$645$14350)) (syntax-car$645$12202 x$645$14342)))) (quote #f))) (syntax-cdr$645$12206 x$645$14336)))) (quote #f))) ((lambda (x$645$14352) (list x$645$14352)) (syntax-car$645$12202 x$645$14336)))) (quote #f))) (syntax-car$645$12202 x$645$14330))) (if (syntax-null?$645$12198 x$645$14330) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) f$645$14328) (syntax-car$645$12202 x$645$14304)))) (quote #f))) (syntax-cdr$645$12206 x$645$14298)))) (quote #f))) ((lambda (x$645$14354) (quote ())) (syntax-car$645$12202 x$645$14298)))) (quote #f))) t$645$14278))) e$645$14276))) (set! let-macro$645$12672 (lambda (stx$645$14356) ((lambda (t$645$14358) ((lambda (ls/false$645$14360) (if (if ls/false$645$14360 (begin (quote #f) (apply (lambda (lhs*$645$14362 rhs*$645$14363 b$645$14364 b*$645$14365) (quote #t)) ls/false$645$14360)) (quote #f)) (apply (lambda (lhs*$645$14370 rhs*$645$14371 b$645$14372 b*$645$14373) (if (valid-bound-ids?$645$12218 lhs*$645$14370) (bless$645$12668 (cons (cons (quote lambda) (cons lhs*$645$14370 (cons b$645$14372 b*$645$14373))) rhs*$645$14371)) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (strip$645$12226 stx$645$14356 (quote ()))))) ls/false$645$14360) ((lambda (t$645$14378) ((lambda (ls/false$645$14380) (if (if ls/false$645$14380 (begin (quote #f) (apply (lambda (f$645$14382 lhs*$645$14383 rhs*$645$14384 b$645$14385 b*$645$14386) (id?$645$12208 f$645$14382)) ls/false$645$14380)) (quote #f)) (apply (lambda (f$645$14392 lhs*$645$14393 rhs*$645$14394 b$645$14395 b*$645$14396) (if (valid-bound-ids?$645$12218 lhs*$645$14393) (bless$645$12668 (list (quote letrec) (list (list f$645$14392 (cons (quote lambda) (cons lhs*$645$14393 (cons b$645$14395 b*$645$14396))))) (cons f$645$14392 rhs*$645$14394))) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 stx$645$14356 (quote ()))))) ls/false$645$14380) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14378 (quote ()))))) ((lambda (x$645$14402) (if (syntax-pair?$645$12194 x$645$14402) (begin (quote #f) ((lambda (q$645$14404) (if q$645$14404 (begin (quote #f) ((lambda (r$645$14406) (if r$645$14406 (begin (quote #f) (append q$645$14404 r$645$14406)) (quote #f))) ((lambda (x$645$14408) (if (syntax-pair?$645$12194 x$645$14408) (begin (quote #f) ((lambda (q$645$14410) (if q$645$14410 (begin (quote #f) ((lambda (r$645$14412) (if r$645$14412 (begin (quote #f) (append q$645$14410 r$645$14412)) (quote #f))) ((lambda (x$645$14414) (if (syntax-pair?$645$12194 x$645$14414) (begin (quote #f) ((lambda (q$645$14416) (if q$645$14416 (begin (quote #f) ((lambda (r$645$14418) (if r$645$14418 (begin (quote #f) (append q$645$14416 r$645$14418)) (quote #f))) ((lambda (x$645$14420) (if (syntax-pair?$645$12194 x$645$14420) (begin (quote #f) ((lambda (q$645$14422) (if q$645$14422 (begin (quote #f) ((lambda (r$645$14424) (if r$645$14424 (begin (quote #f) (append q$645$14422 r$645$14424)) (quote #f))) ((letrec ((f$645$14426 (lambda (x$645$14428) (if (syntax-pair?$645$12194 x$645$14428) ((lambda (cars/f$645$14430) (if cars/f$645$14430 (begin (quote #f) ((lambda (cdrs/f$645$14432) (if cdrs/f$645$14432 (begin (quote #f) (map cons cars/f$645$14430 cdrs/f$645$14432)) (quote #f))) (f$645$14426 (syntax-cdr$645$12206 x$645$14428)))) (quote #f))) ((lambda (x$645$14434) (list x$645$14434)) (syntax-car$645$12202 x$645$14428))) (if (syntax-null?$645$12198 x$645$14428) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14426) (syntax-cdr$645$12206 x$645$14420)))) (quote #f))) ((lambda (x$645$14436) (list x$645$14436)) (syntax-car$645$12202 x$645$14420)))) (quote #f))) (syntax-cdr$645$12206 x$645$14414)))) (quote #f))) ((letrec ((f$645$14438 (lambda (x$645$14440) (if (syntax-pair?$645$12194 x$645$14440) ((lambda (cars/f$645$14442) (if cars/f$645$14442 (begin (quote #f) ((lambda (cdrs/f$645$14444) (if cdrs/f$645$14444 (begin (quote #f) (map cons cars/f$645$14442 cdrs/f$645$14444)) (quote #f))) (f$645$14438 (syntax-cdr$645$12206 x$645$14440)))) (quote #f))) ((lambda (x$645$14446) (if (syntax-pair?$645$12194 x$645$14446) (begin (quote #f) ((lambda (q$645$14448) (if q$645$14448 (begin (quote #f) ((lambda (r$645$14450) (if r$645$14450 (begin (quote #f) (append q$645$14448 r$645$14450)) (quote #f))) ((lambda (x$645$14452) (if (syntax-pair?$645$12194 x$645$14452) (begin (quote #f) ((lambda (q$645$14454) (if q$645$14454 (begin (quote #f) ((lambda (r$645$14456) (if r$645$14456 (begin (quote #f) (append q$645$14454 r$645$14456)) (quote #f))) ((lambda (x$645$14458) (if (equal? (stx->datum$645$12228 x$645$14458) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14452)))) (quote #f))) ((lambda (x$645$14460) (list x$645$14460)) (syntax-car$645$12202 x$645$14452)))) (quote #f))) (syntax-cdr$645$12206 x$645$14446)))) (quote #f))) ((lambda (x$645$14462) (list x$645$14462)) (syntax-car$645$12202 x$645$14446)))) (quote #f))) (syntax-car$645$12202 x$645$14440))) (if (syntax-null?$645$12198 x$645$14440) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$645$14438) (syntax-car$645$12202 x$645$14414)))) (quote #f))) (syntax-cdr$645$12206 x$645$14408)))) (quote #f))) ((lambda (x$645$14464) (list x$645$14464)) (syntax-car$645$12202 x$645$14408)))) (quote #f))) (syntax-cdr$645$12206 x$645$14402)))) (quote #f))) ((lambda (x$645$14466) (quote ())) (syntax-car$645$12202 x$645$14402)))) (quote #f))) t$645$14378))) t$645$14358))) ((lambda (x$645$14468) (if (syntax-pair?$645$12194 x$645$14468) (begin (quote #f) ((lambda (q$645$14470) (if q$645$14470 (begin (quote #f) ((lambda (r$645$14472) (if r$645$14472 (begin (quote #f) (append q$645$14470 r$645$14472)) (quote #f))) ((lambda (x$645$14474) (if (syntax-pair?$645$12194 x$645$14474) (begin (quote #f) ((lambda (q$645$14476) (if q$645$14476 (begin (quote #f) ((lambda (r$645$14478) (if r$645$14478 (begin (quote #f) (append q$645$14476 r$645$14478)) (quote #f))) ((lambda (x$645$14480) (if (syntax-pair?$645$12194 x$645$14480) (begin (quote #f) ((lambda (q$645$14482) (if q$645$14482 (begin (quote #f) ((lambda (r$645$14484) (if r$645$14484 (begin (quote #f) (append q$645$14482 r$645$14484)) (quote #f))) ((letrec ((f$645$14486 (lambda (x$645$14488) (if (syntax-pair?$645$12194 x$645$14488) ((lambda (cars/f$645$14490) (if cars/f$645$14490 (begin (quote #f) ((lambda (cdrs/f$645$14492) (if cdrs/f$645$14492 (begin (quote #f) (map cons cars/f$645$14490 cdrs/f$645$14492)) (quote #f))) (f$645$14486 (syntax-cdr$645$12206 x$645$14488)))) (quote #f))) ((lambda (x$645$14494) (list x$645$14494)) (syntax-car$645$12202 x$645$14488))) (if (syntax-null?$645$12198 x$645$14488) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14486) (syntax-cdr$645$12206 x$645$14480)))) (quote #f))) ((lambda (x$645$14496) (list x$645$14496)) (syntax-car$645$12202 x$645$14480)))) (quote #f))) (syntax-cdr$645$12206 x$645$14474)))) (quote #f))) ((letrec ((f$645$14498 (lambda (x$645$14500) (if (syntax-pair?$645$12194 x$645$14500) ((lambda (cars/f$645$14502) (if cars/f$645$14502 (begin (quote #f) ((lambda (cdrs/f$645$14504) (if cdrs/f$645$14504 (begin (quote #f) (map cons cars/f$645$14502 cdrs/f$645$14504)) (quote #f))) (f$645$14498 (syntax-cdr$645$12206 x$645$14500)))) (quote #f))) ((lambda (x$645$14506) (if (syntax-pair?$645$12194 x$645$14506) (begin (quote #f) ((lambda (q$645$14508) (if q$645$14508 (begin (quote #f) ((lambda (r$645$14510) (if r$645$14510 (begin (quote #f) (append q$645$14508 r$645$14510)) (quote #f))) ((lambda (x$645$14512) (if (syntax-pair?$645$12194 x$645$14512) (begin (quote #f) ((lambda (q$645$14514) (if q$645$14514 (begin (quote #f) ((lambda (r$645$14516) (if r$645$14516 (begin (quote #f) (append q$645$14514 r$645$14516)) (quote #f))) ((lambda (x$645$14518) (if (equal? (stx->datum$645$12228 x$645$14518) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14512)))) (quote #f))) ((lambda (x$645$14520) (list x$645$14520)) (syntax-car$645$12202 x$645$14512)))) (quote #f))) (syntax-cdr$645$12206 x$645$14506)))) (quote #f))) ((lambda (x$645$14522) (list x$645$14522)) (syntax-car$645$12202 x$645$14506)))) (quote #f))) (syntax-car$645$12202 x$645$14500))) (if (syntax-null?$645$12198 x$645$14500) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$645$14498) (syntax-car$645$12202 x$645$14474)))) (quote #f))) (syntax-cdr$645$12206 x$645$14468)))) (quote #f))) ((lambda (x$645$14524) (quote ())) (syntax-car$645$12202 x$645$14468)))) (quote #f))) t$645$14358))) stx$645$14356))) (set! trace-lambda-macro$645$12674 (lambda (stx$645$14526) ((lambda (t$645$14528) ((lambda (ls/false$645$14530) (if (if ls/false$645$14530 (begin (quote #f) (apply (lambda (who$645$14532 fmls$645$14533 b$645$14534 b*$645$14535) (quote #t)) ls/false$645$14530)) (quote #f)) (apply (lambda (who$645$14540 fmls$645$14541 b$645$14542 b*$645$14543) (if (valid-bound-ids?$645$12218 fmls$645$14541) (bless$645$12668 (list (quote make-traced-procedure) (list (quote quote) who$645$14540) (cons (quote lambda) (cons fmls$645$14541 (cons b$645$14542 b*$645$14543))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$645$12226 stx$645$14526 (quote ()))))) ls/false$645$14530) ((lambda (t$645$14548) ((lambda (ls/false$645$14550) (if (if ls/false$645$14550 (begin (quote #f) (apply (lambda (who$645$14552 fmls$645$14553 last$645$14554 b$645$14555 b*$645$14556) (quote #t)) ls/false$645$14550)) (quote #f)) (apply (lambda (who$645$14562 fmls$645$14563 last$645$14564 b$645$14565 b*$645$14566) (if (valid-bound-ids?$645$12218 (cons last$645$14564 fmls$645$14563)) (bless$645$12668 (list (quote make-traced-procedure) (list (quote quote) who$645$14562) (cons (quote lambda) (cons (append fmls$645$14563 last$645$14564) (cons b$645$14565 b*$645$14566))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$645$12226 stx$645$14526 (quote ()))))) ls/false$645$14550) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14548 (quote ()))))) ((lambda (x$645$14572) (if (syntax-pair?$645$12194 x$645$14572) (begin (quote #f) ((lambda (q$645$14574) (if q$645$14574 (begin (quote #f) ((lambda (r$645$14576) (if r$645$14576 (begin (quote #f) (append q$645$14574 r$645$14576)) (quote #f))) ((lambda (x$645$14578) (if (syntax-pair?$645$12194 x$645$14578) (begin (quote #f) ((lambda (q$645$14580) (if q$645$14580 (begin (quote #f) ((lambda (r$645$14582) (if r$645$14582 (begin (quote #f) (append q$645$14580 r$645$14582)) (quote #f))) ((lambda (x$645$14584) (if (syntax-pair?$645$12194 x$645$14584) (begin (quote #f) ((lambda (q$645$14586) (if q$645$14586 (begin (quote #f) ((lambda (r$645$14588) (if r$645$14588 (begin (quote #f) (append q$645$14586 r$645$14588)) (quote #f))) ((lambda (x$645$14590) (if (syntax-pair?$645$12194 x$645$14590) (begin (quote #f) ((lambda (q$645$14592) (if q$645$14592 (begin (quote #f) ((lambda (r$645$14594) (if r$645$14594 (begin (quote #f) (append q$645$14592 r$645$14594)) (quote #f))) ((letrec ((f$645$14596 (lambda (x$645$14598) (if (syntax-pair?$645$12194 x$645$14598) ((lambda (cars/f$645$14600) (if cars/f$645$14600 (begin (quote #f) ((lambda (cdrs/f$645$14602) (if cdrs/f$645$14602 (begin (quote #f) (map cons cars/f$645$14600 cdrs/f$645$14602)) (quote #f))) (f$645$14596 (syntax-cdr$645$12206 x$645$14598)))) (quote #f))) ((lambda (x$645$14604) (list x$645$14604)) (syntax-car$645$12202 x$645$14598))) (if (syntax-null?$645$12198 x$645$14598) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14596) (syntax-cdr$645$12206 x$645$14590)))) (quote #f))) ((lambda (x$645$14606) (list x$645$14606)) (syntax-car$645$12202 x$645$14590)))) (quote #f))) (syntax-cdr$645$12206 x$645$14584)))) (quote #f))) ((letrec ((f$645$14608 (lambda (x$645$14614) (if (syntax-pair?$645$12194 x$645$14614) ((lambda (cars/f$645$14616) (if cars/f$645$14616 (begin (quote #f) ((lambda (d/f$645$14618) (if d/f$645$14618 (begin (quote #f) (cons (map cons cars/f$645$14616 (car d/f$645$14618)) (cdr d/f$645$14618))) (quote #f))) (f$645$14608 (syntax-cdr$645$12206 x$645$14614)))) (quote #f))) ((lambda (x$645$14620) (list x$645$14620)) (syntax-car$645$12202 x$645$14614))) ((lambda (d$645$14622) (if d$645$14622 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) d$645$14622)) (quote #f))) ((lambda (x$645$14624) (list x$645$14624)) x$645$14614)))))) (lambda (x$645$14610) ((lambda (x$645$14612) (if x$645$14612 (begin (quote #f) (append (car x$645$14612) (cdr x$645$14612))) (quote #f))) (f$645$14608 x$645$14610)))) (syntax-car$645$12202 x$645$14584)))) (quote #f))) (syntax-cdr$645$12206 x$645$14578)))) (quote #f))) ((lambda (x$645$14626) (list x$645$14626)) (syntax-car$645$12202 x$645$14578)))) (quote #f))) (syntax-cdr$645$12206 x$645$14572)))) (quote #f))) ((lambda (x$645$14628) (quote ())) (syntax-car$645$12202 x$645$14572)))) (quote #f))) t$645$14548))) t$645$14528))) ((lambda (x$645$14630) (if (syntax-pair?$645$12194 x$645$14630) (begin (quote #f) ((lambda (q$645$14632) (if q$645$14632 (begin (quote #f) ((lambda (r$645$14634) (if r$645$14634 (begin (quote #f) (append q$645$14632 r$645$14634)) (quote #f))) ((lambda (x$645$14636) (if (syntax-pair?$645$12194 x$645$14636) (begin (quote #f) ((lambda (q$645$14638) (if q$645$14638 (begin (quote #f) ((lambda (r$645$14640) (if r$645$14640 (begin (quote #f) (append q$645$14638 r$645$14640)) (quote #f))) ((lambda (x$645$14642) (if (syntax-pair?$645$12194 x$645$14642) (begin (quote #f) ((lambda (q$645$14644) (if q$645$14644 (begin (quote #f) ((lambda (r$645$14646) (if r$645$14646 (begin (quote #f) (append q$645$14644 r$645$14646)) (quote #f))) ((lambda (x$645$14648) (if (syntax-pair?$645$12194 x$645$14648) (begin (quote #f) ((lambda (q$645$14650) (if q$645$14650 (begin (quote #f) ((lambda (r$645$14652) (if r$645$14652 (begin (quote #f) (append q$645$14650 r$645$14652)) (quote #f))) ((letrec ((f$645$14654 (lambda (x$645$14656) (if (syntax-pair?$645$12194 x$645$14656) ((lambda (cars/f$645$14658) (if cars/f$645$14658 (begin (quote #f) ((lambda (cdrs/f$645$14660) (if cdrs/f$645$14660 (begin (quote #f) (map cons cars/f$645$14658 cdrs/f$645$14660)) (quote #f))) (f$645$14654 (syntax-cdr$645$12206 x$645$14656)))) (quote #f))) ((lambda (x$645$14662) (list x$645$14662)) (syntax-car$645$12202 x$645$14656))) (if (syntax-null?$645$12198 x$645$14656) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14654) (syntax-cdr$645$12206 x$645$14648)))) (quote #f))) ((lambda (x$645$14664) (list x$645$14664)) (syntax-car$645$12202 x$645$14648)))) (quote #f))) (syntax-cdr$645$12206 x$645$14642)))) (quote #f))) ((letrec ((f$645$14666 (lambda (x$645$14668) (if (syntax-pair?$645$12194 x$645$14668) ((lambda (cars/f$645$14670) (if cars/f$645$14670 (begin (quote #f) ((lambda (cdrs/f$645$14672) (if cdrs/f$645$14672 (begin (quote #f) (map cons cars/f$645$14670 cdrs/f$645$14672)) (quote #f))) (f$645$14666 (syntax-cdr$645$12206 x$645$14668)))) (quote #f))) ((lambda (x$645$14674) (list x$645$14674)) (syntax-car$645$12202 x$645$14668))) (if (syntax-null?$645$12198 x$645$14668) (list (begin (quote fmls) (quote ()))) (quote #f)))))) f$645$14666) (syntax-car$645$12202 x$645$14642)))) (quote #f))) (syntax-cdr$645$12206 x$645$14636)))) (quote #f))) ((lambda (x$645$14676) (list x$645$14676)) (syntax-car$645$12202 x$645$14636)))) (quote #f))) (syntax-cdr$645$12206 x$645$14630)))) (quote #f))) ((lambda (x$645$14678) (quote ())) (syntax-car$645$12202 x$645$14630)))) (quote #f))) t$645$14528))) stx$645$14526))) (set! trace-define-macro$645$12676 (lambda (stx$645$14680) ((lambda (t$645$14682) ((lambda (ls/false$645$14684) (if (if ls/false$645$14684 (begin (quote #f) (apply (lambda (who$645$14686 fmls$645$14687 b$645$14688 b*$645$14689) (quote #t)) ls/false$645$14684)) (quote #f)) (apply (lambda (who$645$14694 fmls$645$14695 b$645$14696 b*$645$14697) (if (valid-bound-ids?$645$12218 fmls$645$14695) (bless$645$12668 (list (quote define) who$645$14694 (list (quote make-traced-procedure) (list (quote quote) who$645$14694) (cons (quote lambda) (cons fmls$645$14695 (cons b$645$14696 b*$645$14697)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$645$12226 stx$645$14680 (quote ()))))) ls/false$645$14684) ((lambda (t$645$14702) ((lambda (ls/false$645$14704) (if (if ls/false$645$14704 (begin (quote #f) (apply (lambda (who$645$14706 fmls$645$14707 last$645$14708 b$645$14709 b*$645$14710) (quote #t)) ls/false$645$14704)) (quote #f)) (apply (lambda (who$645$14716 fmls$645$14717 last$645$14718 b$645$14719 b*$645$14720) (if (valid-bound-ids?$645$12218 (cons last$645$14718 fmls$645$14717)) (bless$645$12668 (list (quote define) who$645$14716 (list (quote make-traced-procedure) (list (quote quote) who$645$14716) (cons (quote lambda) (cons (append fmls$645$14717 last$645$14718) (cons b$645$14719 b*$645$14720)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$645$12226 stx$645$14680 (quote ()))))) ls/false$645$14704) ((lambda (t$645$14726) ((lambda (ls/false$645$14728) (if (if ls/false$645$14728 (begin (quote #f) (apply (lambda (who$645$14730 expr$645$14731) (quote #t)) ls/false$645$14728)) (quote #f)) (apply (lambda (who$645$14734 expr$645$14735) (if (id?$645$12208 who$645$14734) (bless$645$12668 (list (quote define) who$645$14734 (list (quote let) (list (list (quote v) expr$645$14735)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) who$645$14734) (quote (v)))) (quote ((error (quote trace-define) "~s is not a procedure" v))))))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (strip$645$12226 stx$645$14680 (quote ()))))) ls/false$645$14728) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14726 (quote ()))))) ((lambda (x$645$14738) (if (syntax-pair?$645$12194 x$645$14738) (begin (quote #f) ((lambda (q$645$14740) (if q$645$14740 (begin (quote #f) ((lambda (r$645$14742) (if r$645$14742 (begin (quote #f) (append q$645$14740 r$645$14742)) (quote #f))) ((lambda (x$645$14744) (if (syntax-pair?$645$12194 x$645$14744) (begin (quote #f) ((lambda (q$645$14746) (if q$645$14746 (begin (quote #f) ((lambda (r$645$14748) (if r$645$14748 (begin (quote #f) (append q$645$14746 r$645$14748)) (quote #f))) ((lambda (x$645$14750) (if (syntax-pair?$645$12194 x$645$14750) (begin (quote #f) ((lambda (q$645$14752) (if q$645$14752 (begin (quote #f) ((lambda (r$645$14754) (if r$645$14754 (begin (quote #f) (append q$645$14752 r$645$14754)) (quote #f))) ((lambda (x$645$14756) (if (equal? (stx->datum$645$12228 x$645$14756) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14750)))) (quote #f))) ((lambda (x$645$14758) (list x$645$14758)) (syntax-car$645$12202 x$645$14750)))) (quote #f))) (syntax-cdr$645$12206 x$645$14744)))) (quote #f))) ((lambda (x$645$14760) (list x$645$14760)) (syntax-car$645$12202 x$645$14744)))) (quote #f))) (syntax-cdr$645$12206 x$645$14738)))) (quote #f))) ((lambda (x$645$14762) (quote ())) (syntax-car$645$12202 x$645$14738)))) (quote #f))) t$645$14726))) t$645$14702))) ((lambda (x$645$14764) (if (syntax-pair?$645$12194 x$645$14764) (begin (quote #f) ((lambda (q$645$14766) (if q$645$14766 (begin (quote #f) ((lambda (r$645$14768) (if r$645$14768 (begin (quote #f) (append q$645$14766 r$645$14768)) (quote #f))) ((lambda (x$645$14770) (if (syntax-pair?$645$12194 x$645$14770) (begin (quote #f) ((lambda (q$645$14772) (if q$645$14772 (begin (quote #f) ((lambda (r$645$14774) (if r$645$14774 (begin (quote #f) (append q$645$14772 r$645$14774)) (quote #f))) ((lambda (x$645$14776) (if (syntax-pair?$645$12194 x$645$14776) (begin (quote #f) ((lambda (q$645$14778) (if q$645$14778 (begin (quote #f) ((lambda (r$645$14780) (if r$645$14780 (begin (quote #f) (append q$645$14778 r$645$14780)) (quote #f))) ((letrec ((f$645$14782 (lambda (x$645$14784) (if (syntax-pair?$645$12194 x$645$14784) ((lambda (cars/f$645$14786) (if cars/f$645$14786 (begin (quote #f) ((lambda (cdrs/f$645$14788) (if cdrs/f$645$14788 (begin (quote #f) (map cons cars/f$645$14786 cdrs/f$645$14788)) (quote #f))) (f$645$14782 (syntax-cdr$645$12206 x$645$14784)))) (quote #f))) ((lambda (x$645$14790) (list x$645$14790)) (syntax-car$645$12202 x$645$14784))) (if (syntax-null?$645$12198 x$645$14784) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14782) (syntax-cdr$645$12206 x$645$14776)))) (quote #f))) ((lambda (x$645$14792) (list x$645$14792)) (syntax-car$645$12202 x$645$14776)))) (quote #f))) (syntax-cdr$645$12206 x$645$14770)))) (quote #f))) ((lambda (x$645$14794) (if (syntax-pair?$645$12194 x$645$14794) (begin (quote #f) ((lambda (q$645$14796) (if q$645$14796 (begin (quote #f) ((lambda (r$645$14798) (if r$645$14798 (begin (quote #f) (append q$645$14796 r$645$14798)) (quote #f))) ((letrec ((f$645$14800 (lambda (x$645$14806) (if (syntax-pair?$645$12194 x$645$14806) ((lambda (cars/f$645$14808) (if cars/f$645$14808 (begin (quote #f) ((lambda (d/f$645$14810) (if d/f$645$14810 (begin (quote #f) (cons (map cons cars/f$645$14808 (car d/f$645$14810)) (cdr d/f$645$14810))) (quote #f))) (f$645$14800 (syntax-cdr$645$12206 x$645$14806)))) (quote #f))) ((lambda (x$645$14812) (list x$645$14812)) (syntax-car$645$12202 x$645$14806))) ((lambda (d$645$14814) (if d$645$14814 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) d$645$14814)) (quote #f))) ((lambda (x$645$14816) (list x$645$14816)) x$645$14806)))))) (lambda (x$645$14802) ((lambda (x$645$14804) (if x$645$14804 (begin (quote #f) (append (car x$645$14804) (cdr x$645$14804))) (quote #f))) (f$645$14800 x$645$14802)))) (syntax-cdr$645$12206 x$645$14794)))) (quote #f))) ((lambda (x$645$14818) (list x$645$14818)) (syntax-car$645$12202 x$645$14794)))) (quote #f))) (syntax-car$645$12202 x$645$14770)))) (quote #f))) (syntax-cdr$645$12206 x$645$14764)))) (quote #f))) ((lambda (x$645$14820) (quote ())) (syntax-car$645$12202 x$645$14764)))) (quote #f))) t$645$14702))) t$645$14682))) ((lambda (x$645$14822) (if (syntax-pair?$645$12194 x$645$14822) (begin (quote #f) ((lambda (q$645$14824) (if q$645$14824 (begin (quote #f) ((lambda (r$645$14826) (if r$645$14826 (begin (quote #f) (append q$645$14824 r$645$14826)) (quote #f))) ((lambda (x$645$14828) (if (syntax-pair?$645$12194 x$645$14828) (begin (quote #f) ((lambda (q$645$14830) (if q$645$14830 (begin (quote #f) ((lambda (r$645$14832) (if r$645$14832 (begin (quote #f) (append q$645$14830 r$645$14832)) (quote #f))) ((lambda (x$645$14834) (if (syntax-pair?$645$12194 x$645$14834) (begin (quote #f) ((lambda (q$645$14836) (if q$645$14836 (begin (quote #f) ((lambda (r$645$14838) (if r$645$14838 (begin (quote #f) (append q$645$14836 r$645$14838)) (quote #f))) ((letrec ((f$645$14840 (lambda (x$645$14842) (if (syntax-pair?$645$12194 x$645$14842) ((lambda (cars/f$645$14844) (if cars/f$645$14844 (begin (quote #f) ((lambda (cdrs/f$645$14846) (if cdrs/f$645$14846 (begin (quote #f) (map cons cars/f$645$14844 cdrs/f$645$14846)) (quote #f))) (f$645$14840 (syntax-cdr$645$12206 x$645$14842)))) (quote #f))) ((lambda (x$645$14848) (list x$645$14848)) (syntax-car$645$12202 x$645$14842))) (if (syntax-null?$645$12198 x$645$14842) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$14840) (syntax-cdr$645$12206 x$645$14834)))) (quote #f))) ((lambda (x$645$14850) (list x$645$14850)) (syntax-car$645$12202 x$645$14834)))) (quote #f))) (syntax-cdr$645$12206 x$645$14828)))) (quote #f))) ((lambda (x$645$14852) (if (syntax-pair?$645$12194 x$645$14852) (begin (quote #f) ((lambda (q$645$14854) (if q$645$14854 (begin (quote #f) ((lambda (r$645$14856) (if r$645$14856 (begin (quote #f) (append q$645$14854 r$645$14856)) (quote #f))) ((letrec ((f$645$14858 (lambda (x$645$14860) (if (syntax-pair?$645$12194 x$645$14860) ((lambda (cars/f$645$14862) (if cars/f$645$14862 (begin (quote #f) ((lambda (cdrs/f$645$14864) (if cdrs/f$645$14864 (begin (quote #f) (map cons cars/f$645$14862 cdrs/f$645$14864)) (quote #f))) (f$645$14858 (syntax-cdr$645$12206 x$645$14860)))) (quote #f))) ((lambda (x$645$14866) (list x$645$14866)) (syntax-car$645$12202 x$645$14860))) (if (syntax-null?$645$12198 x$645$14860) (list (begin (quote fmls) (quote ()))) (quote #f)))))) f$645$14858) (syntax-cdr$645$12206 x$645$14852)))) (quote #f))) ((lambda (x$645$14868) (list x$645$14868)) (syntax-car$645$12202 x$645$14852)))) (quote #f))) (syntax-car$645$12202 x$645$14828)))) (quote #f))) (syntax-cdr$645$12206 x$645$14822)))) (quote #f))) ((lambda (x$645$14870) (quote ())) (syntax-car$645$12202 x$645$14822)))) (quote #f))) t$645$14682))) stx$645$14680))) (set! time-macro$645$12678 (lambda (stx$645$14872) ((lambda (t$645$14874) ((lambda (ls/false$645$14876) (if (if ls/false$645$14876 (begin (quote #f) (apply (lambda (expr$645$14878) (quote #t)) ls/false$645$14876)) (quote #f)) (apply (lambda (expr$645$14880) (bless$645$12668 (list (quote time-it) (list (quote quote) expr$645$14880) (list (quote lambda) (quote ()) expr$645$14880)))) ls/false$645$14876) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14874 (quote ()))))) ((lambda (x$645$14882) (if (syntax-pair?$645$12194 x$645$14882) (begin (quote #f) ((lambda (q$645$14884) (if q$645$14884 (begin (quote #f) ((lambda (r$645$14886) (if r$645$14886 (begin (quote #f) (append q$645$14884 r$645$14886)) (quote #f))) ((lambda (x$645$14888) (if (syntax-pair?$645$12194 x$645$14888) (begin (quote #f) ((lambda (q$645$14890) (if q$645$14890 (begin (quote #f) ((lambda (r$645$14892) (if r$645$14892 (begin (quote #f) (append q$645$14890 r$645$14892)) (quote #f))) ((lambda (x$645$14894) (if (equal? (stx->datum$645$12228 x$645$14894) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14888)))) (quote #f))) ((lambda (x$645$14896) (list x$645$14896)) (syntax-car$645$12202 x$645$14888)))) (quote #f))) (syntax-cdr$645$12206 x$645$14882)))) (quote #f))) ((lambda (x$645$14898) (quote ())) (syntax-car$645$12202 x$645$14882)))) (quote #f))) t$645$14874))) stx$645$14872))) (set! delay-macro$645$12680 (lambda (stx$645$14900) ((lambda (t$645$14902) ((lambda (ls/false$645$14904) (if (if ls/false$645$14904 (begin (quote #f) (apply (lambda (expr$645$14906) (quote #t)) ls/false$645$14904)) (quote #f)) (apply (lambda (expr$645$14908) (bless$645$12668 (list (quote make-promise) (list (quote lambda) (quote ()) expr$645$14908)))) ls/false$645$14904) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14902 (quote ()))))) ((lambda (x$645$14910) (if (syntax-pair?$645$12194 x$645$14910) (begin (quote #f) ((lambda (q$645$14912) (if q$645$14912 (begin (quote #f) ((lambda (r$645$14914) (if r$645$14914 (begin (quote #f) (append q$645$14912 r$645$14914)) (quote #f))) ((lambda (x$645$14916) (if (syntax-pair?$645$12194 x$645$14916) (begin (quote #f) ((lambda (q$645$14918) (if q$645$14918 (begin (quote #f) ((lambda (r$645$14920) (if r$645$14920 (begin (quote #f) (append q$645$14918 r$645$14920)) (quote #f))) ((lambda (x$645$14922) (if (equal? (stx->datum$645$12228 x$645$14922) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14916)))) (quote #f))) ((lambda (x$645$14924) (list x$645$14924)) (syntax-car$645$12202 x$645$14916)))) (quote #f))) (syntax-cdr$645$12206 x$645$14910)))) (quote #f))) ((lambda (x$645$14926) (quote ())) (syntax-car$645$12202 x$645$14910)))) (quote #f))) t$645$14902))) stx$645$14900))) (set! assert-macro$645$12682 (lambda (stx$645$14928) ((lambda (t$645$14930) ((lambda (ls/false$645$14932) (if (if ls/false$645$14932 (begin (quote #f) (apply (lambda (expr$645$14934) (quote #t)) ls/false$645$14932)) (quote #f)) (apply (lambda (expr$645$14936) (bless$645$12668 (list (quote unless) expr$645$14936 (list (quote error) (quote (quote assert)) (quote "~s failed") (list (quote quote) expr$645$14936))))) ls/false$645$14932) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14930 (quote ()))))) ((lambda (x$645$14938) (if (syntax-pair?$645$12194 x$645$14938) (begin (quote #f) ((lambda (q$645$14940) (if q$645$14940 (begin (quote #f) ((lambda (r$645$14942) (if r$645$14942 (begin (quote #f) (append q$645$14940 r$645$14942)) (quote #f))) ((lambda (x$645$14944) (if (syntax-pair?$645$12194 x$645$14944) (begin (quote #f) ((lambda (q$645$14946) (if q$645$14946 (begin (quote #f) ((lambda (r$645$14948) (if r$645$14948 (begin (quote #f) (append q$645$14946 r$645$14948)) (quote #f))) ((lambda (x$645$14950) (if (equal? (stx->datum$645$12228 x$645$14950) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14944)))) (quote #f))) ((lambda (x$645$14952) (list x$645$14952)) (syntax-car$645$12202 x$645$14944)))) (quote #f))) (syntax-cdr$645$12206 x$645$14938)))) (quote #f))) ((lambda (x$645$14954) (quote ())) (syntax-car$645$12202 x$645$14938)))) (quote #f))) t$645$14930))) stx$645$14928))) (set! endianness-macro$645$12684 (lambda (stx$645$14956) ((lambda (t$645$14958) ((lambda (ls/false$645$14960) (if (if ls/false$645$14960 (begin (quote #f) (apply (lambda (e$645$14962) (quote #t)) ls/false$645$14960)) (quote #f)) (apply (lambda (e$645$14964) ((lambda (t$645$14966) (if (memv t$645$14966 (quote (little))) (bless$645$12668 (quote (quote little))) (if (memv t$645$14966 (quote (big))) (bless$645$12668 (quote (quote big))) (error (quote expander) (quote "~a ~s") (quote "endianness must be big or little") (strip$645$12226 stx$645$14956 (quote ())))))) (syntax->datum$645$12851 e$645$14964))) ls/false$645$14960) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14958 (quote ()))))) ((lambda (x$645$14967) (if (syntax-pair?$645$12194 x$645$14967) (begin (quote #f) ((lambda (q$645$14969) (if q$645$14969 (begin (quote #f) ((lambda (r$645$14971) (if r$645$14971 (begin (quote #f) (append q$645$14969 r$645$14971)) (quote #f))) ((lambda (x$645$14973) (if (syntax-pair?$645$12194 x$645$14973) (begin (quote #f) ((lambda (q$645$14975) (if q$645$14975 (begin (quote #f) ((lambda (r$645$14977) (if r$645$14977 (begin (quote #f) (append q$645$14975 r$645$14977)) (quote #f))) ((lambda (x$645$14979) (if (equal? (stx->datum$645$12228 x$645$14979) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$14973)))) (quote #f))) ((lambda (x$645$14981) (list x$645$14981)) (syntax-car$645$12202 x$645$14973)))) (quote #f))) (syntax-cdr$645$12206 x$645$14967)))) (quote #f))) ((lambda (x$645$14983) (quote ())) (syntax-car$645$12202 x$645$14967)))) (quote #f))) t$645$14958))) stx$645$14956))) (set! identifier-syntax-macro$645$12686 (lambda (stx$645$14985) ((lambda (t$645$14987) ((lambda (ls/false$645$14989) (if (if ls/false$645$14989 (begin (quote #f) (apply (lambda (expr$645$14991) (quote #t)) ls/false$645$14989)) (quote #f)) (apply (lambda (expr$645$14993) (bless$645$12668 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) expr$645$14993)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) expr$645$14993) (quote ((syntax (e* ...))))))))))) ls/false$645$14989) ((lambda (t$645$14995) ((lambda (ls/false$645$14997) (if (if ls/false$645$14997 (begin (quote #f) (apply (lambda (id1$645$14999 expr1$645$15000 id2$645$15001 expr2$645$15002 expr3$645$15003) (if (id?$645$12208 id1$645$14999) (if (id?$645$12208 id2$645$15001) (begin (quote #f) (id?$645$12208 expr2$645$15002)) (quote #f)) (quote #f))) ls/false$645$14997)) (quote #f)) (apply (lambda (id1$645$15009 expr1$645$15010 id2$645$15011 expr2$645$15012 expr3$645$15013) (bless$645$12668 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) expr1$645$15010)) (list (list (quote set!) (quote id) expr2$645$15012) (list (quote syntax) expr3$645$15013)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (list (quote syntax) (cons expr1$645$15010 (quote (e* ...)))))))))) ls/false$645$14997) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$14995 (quote ()))))) ((lambda (x$645$15019) (if (syntax-pair?$645$12194 x$645$15019) (begin (quote #f) ((lambda (q$645$15021) (if q$645$15021 (begin (quote #f) ((lambda (r$645$15023) (if r$645$15023 (begin (quote #f) (append q$645$15021 r$645$15023)) (quote #f))) ((lambda (x$645$15025) (if (syntax-pair?$645$12194 x$645$15025) (begin (quote #f) ((lambda (q$645$15027) (if q$645$15027 (begin (quote #f) ((lambda (r$645$15029) (if r$645$15029 (begin (quote #f) (append q$645$15027 r$645$15029)) (quote #f))) ((lambda (x$645$15031) (if (syntax-pair?$645$12194 x$645$15031) (begin (quote #f) ((lambda (q$645$15033) (if q$645$15033 (begin (quote #f) ((lambda (r$645$15035) (if r$645$15035 (begin (quote #f) (append q$645$15033 r$645$15035)) (quote #f))) ((lambda (x$645$15037) (if (equal? (stx->datum$645$12228 x$645$15037) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15031)))) (quote #f))) ((lambda (x$645$15039) (if (syntax-pair?$645$12194 x$645$15039) (begin (quote #f) ((lambda (q$645$15041) (if q$645$15041 (begin (quote #f) ((lambda (r$645$15043) (if r$645$15043 (begin (quote #f) (append q$645$15041 r$645$15043)) (quote #f))) ((lambda (x$645$15045) (if (syntax-pair?$645$12194 x$645$15045) (begin (quote #f) ((lambda (q$645$15047) (if q$645$15047 (begin (quote #f) ((lambda (r$645$15049) (if r$645$15049 (begin (quote #f) (append q$645$15047 r$645$15049)) (quote #f))) ((lambda (x$645$15051) (if (equal? (stx->datum$645$12228 x$645$15051) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15045)))) (quote #f))) ((lambda (x$645$15053) (list x$645$15053)) (syntax-car$645$12202 x$645$15045)))) (quote #f))) (syntax-cdr$645$12206 x$645$15039)))) (quote #f))) ((lambda (x$645$15055) (if (syntax-pair?$645$12194 x$645$15055) (begin (quote #f) ((lambda (q$645$15057) (if q$645$15057 (begin (quote #f) ((lambda (r$645$15059) (if r$645$15059 (begin (quote #f) (append q$645$15057 r$645$15059)) (quote #f))) ((lambda (x$645$15061) (if (syntax-pair?$645$12194 x$645$15061) (begin (quote #f) ((lambda (q$645$15063) (if q$645$15063 (begin (quote #f) ((lambda (r$645$15065) (if r$645$15065 (begin (quote #f) (append q$645$15063 r$645$15065)) (quote #f))) ((lambda (x$645$15067) (if (syntax-pair?$645$12194 x$645$15067) (begin (quote #f) ((lambda (q$645$15069) (if q$645$15069 (begin (quote #f) ((lambda (r$645$15071) (if r$645$15071 (begin (quote #f) (append q$645$15069 r$645$15071)) (quote #f))) ((lambda (x$645$15073) (if (equal? (stx->datum$645$12228 x$645$15073) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15067)))) (quote #f))) ((lambda (x$645$15075) (list x$645$15075)) (syntax-car$645$12202 x$645$15067)))) (quote #f))) (syntax-cdr$645$12206 x$645$15061)))) (quote #f))) ((lambda (x$645$15077) (list x$645$15077)) (syntax-car$645$12202 x$645$15061)))) (quote #f))) (syntax-cdr$645$12206 x$645$15055)))) (quote #f))) ((lambda (x$645$15079) (if (id?$645$12208 x$645$15079) (if (free-id=?$645$12216 x$645$15079 (scheme-stx$645$12638 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$15055)))) (quote #f))) (syntax-car$645$12202 x$645$15039)))) (quote #f))) (syntax-car$645$12202 x$645$15031)))) (quote #f))) (syntax-cdr$645$12206 x$645$15025)))) (quote #f))) ((lambda (x$645$15081) (if (syntax-pair?$645$12194 x$645$15081) (begin (quote #f) ((lambda (q$645$15083) (if q$645$15083 (begin (quote #f) ((lambda (r$645$15085) (if r$645$15085 (begin (quote #f) (append q$645$15083 r$645$15085)) (quote #f))) ((lambda (x$645$15087) (if (syntax-pair?$645$12194 x$645$15087) (begin (quote #f) ((lambda (q$645$15089) (if q$645$15089 (begin (quote #f) ((lambda (r$645$15091) (if r$645$15091 (begin (quote #f) (append q$645$15089 r$645$15091)) (quote #f))) ((lambda (x$645$15093) (if (equal? (stx->datum$645$12228 x$645$15093) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15087)))) (quote #f))) ((lambda (x$645$15095) (list x$645$15095)) (syntax-car$645$12202 x$645$15087)))) (quote #f))) (syntax-cdr$645$12206 x$645$15081)))) (quote #f))) ((lambda (x$645$15097) (list x$645$15097)) (syntax-car$645$12202 x$645$15081)))) (quote #f))) (syntax-car$645$12202 x$645$15025)))) (quote #f))) (syntax-cdr$645$12206 x$645$15019)))) (quote #f))) ((lambda (x$645$15099) (quote ())) (syntax-car$645$12202 x$645$15019)))) (quote #f))) t$645$14995))) t$645$14987))) ((lambda (x$645$15101) (if (syntax-pair?$645$12194 x$645$15101) (begin (quote #f) ((lambda (q$645$15103) (if q$645$15103 (begin (quote #f) ((lambda (r$645$15105) (if r$645$15105 (begin (quote #f) (append q$645$15103 r$645$15105)) (quote #f))) ((lambda (x$645$15107) (if (syntax-pair?$645$12194 x$645$15107) (begin (quote #f) ((lambda (q$645$15109) (if q$645$15109 (begin (quote #f) ((lambda (r$645$15111) (if r$645$15111 (begin (quote #f) (append q$645$15109 r$645$15111)) (quote #f))) ((lambda (x$645$15113) (if (equal? (stx->datum$645$12228 x$645$15113) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15107)))) (quote #f))) ((lambda (x$645$15115) (list x$645$15115)) (syntax-car$645$12202 x$645$15107)))) (quote #f))) (syntax-cdr$645$12206 x$645$15101)))) (quote #f))) ((lambda (x$645$15117) (quote ())) (syntax-car$645$12202 x$645$15101)))) (quote #f))) t$645$14987))) stx$645$14985))) (set! do-macro$645$12688 (lambda (stx$645$15119) ((lambda (bind$645$15121) (begin (set! bind$645$15121 (lambda (x$645$15123) ((lambda (t$645$15125) ((lambda (ls/false$645$15127) (if (if ls/false$645$15127 (begin (quote #f) (apply (lambda (x$645$15129 init$645$15130) (quote #t)) ls/false$645$15127)) (quote #f)) (apply (lambda (x$645$15133 init$645$15134) (list x$645$15133 init$645$15134 x$645$15133)) ls/false$645$15127) ((lambda (t$645$15137) ((lambda (ls/false$645$15139) (if (if ls/false$645$15139 (begin (quote #f) (apply (lambda (x$645$15141 init$645$15142 step$645$15143) (quote #t)) ls/false$645$15139)) (quote #f)) (apply (lambda (x$645$15147 init$645$15148 step$645$15149) (list x$645$15147 init$645$15148 step$645$15149)) ls/false$645$15139) ((lambda (t$645$15153) ((lambda (ls/false$645$15155) (if (if ls/false$645$15155 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$15155)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid binding") (strip$645$12226 stx$645$15119 (quote ())))) ls/false$645$15155) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15153 (quote ()))))) ((lambda (x$645$15157) (quote ())) t$645$15153))) t$645$15137))) ((lambda (x$645$15159) (if (syntax-pair?$645$12194 x$645$15159) (begin (quote #f) ((lambda (q$645$15161) (if q$645$15161 (begin (quote #f) ((lambda (r$645$15163) (if r$645$15163 (begin (quote #f) (append q$645$15161 r$645$15163)) (quote #f))) ((lambda (x$645$15165) (if (syntax-pair?$645$12194 x$645$15165) (begin (quote #f) ((lambda (q$645$15167) (if q$645$15167 (begin (quote #f) ((lambda (r$645$15169) (if r$645$15169 (begin (quote #f) (append q$645$15167 r$645$15169)) (quote #f))) ((lambda (x$645$15171) (if (syntax-pair?$645$12194 x$645$15171) (begin (quote #f) ((lambda (q$645$15173) (if q$645$15173 (begin (quote #f) ((lambda (r$645$15175) (if r$645$15175 (begin (quote #f) (append q$645$15173 r$645$15175)) (quote #f))) ((lambda (x$645$15177) (if (equal? (stx->datum$645$12228 x$645$15177) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15171)))) (quote #f))) ((lambda (x$645$15179) (list x$645$15179)) (syntax-car$645$12202 x$645$15171)))) (quote #f))) (syntax-cdr$645$12206 x$645$15165)))) (quote #f))) ((lambda (x$645$15181) (list x$645$15181)) (syntax-car$645$12202 x$645$15165)))) (quote #f))) (syntax-cdr$645$12206 x$645$15159)))) (quote #f))) ((lambda (x$645$15183) (list x$645$15183)) (syntax-car$645$12202 x$645$15159)))) (quote #f))) t$645$15137))) t$645$15125))) ((lambda (x$645$15185) (if (syntax-pair?$645$12194 x$645$15185) (begin (quote #f) ((lambda (q$645$15187) (if q$645$15187 (begin (quote #f) ((lambda (r$645$15189) (if r$645$15189 (begin (quote #f) (append q$645$15187 r$645$15189)) (quote #f))) ((lambda (x$645$15191) (if (syntax-pair?$645$12194 x$645$15191) (begin (quote #f) ((lambda (q$645$15193) (if q$645$15193 (begin (quote #f) ((lambda (r$645$15195) (if r$645$15195 (begin (quote #f) (append q$645$15193 r$645$15195)) (quote #f))) ((lambda (x$645$15197) (if (equal? (stx->datum$645$12228 x$645$15197) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15191)))) (quote #f))) ((lambda (x$645$15199) (list x$645$15199)) (syntax-car$645$12202 x$645$15191)))) (quote #f))) (syntax-cdr$645$12206 x$645$15185)))) (quote #f))) ((lambda (x$645$15201) (list x$645$15201)) (syntax-car$645$12202 x$645$15185)))) (quote #f))) t$645$15125))) x$645$15123))) ((lambda (t$645$15203) ((lambda (ls/false$645$15205) (if (if ls/false$645$15205 (begin (quote #f) (apply (lambda (binding*$645$15207 test$645$15208 expr*$645$15209 command*$645$15210) (quote #t)) ls/false$645$15205)) (quote #f)) (apply (lambda (binding*$645$15215 test$645$15216 expr*$645$15217 command*$645$15218) ((lambda (t$645$15223) ((lambda (ls/false$645$15225) (if (if ls/false$645$15225 (begin (quote #f) (apply (lambda (x*$645$15227 init*$645$15228 step*$645$15229) (quote #t)) ls/false$645$15225)) (quote #f)) (apply (lambda (x*$645$15233 init*$645$15234 step*$645$15235) (if (valid-bound-ids?$645$12218 x*$645$15233) (bless$645$12668 (list (quote letrec) (list (list (quote loop) (list (quote lambda) x*$645$15233 (list (quote if) test$645$15216 (cons (quote begin) (cons (quote (if #f #f)) expr*$645$15217)) (cons (quote begin) (append command*$645$15218 (list (cons (quote loop) step*$645$15235)))))))) (cons (quote loop) init*$645$15234))) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (strip$645$12226 stx$645$15119 (quote ()))))) ls/false$645$15225) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15223 (quote ()))))) ((letrec ((f$645$15239 (lambda (x$645$15241) (if (syntax-pair?$645$12194 x$645$15241) ((lambda (cars/f$645$15243) (if cars/f$645$15243 (begin (quote #f) ((lambda (cdrs/f$645$15245) (if cdrs/f$645$15245 (begin (quote #f) (map cons cars/f$645$15243 cdrs/f$645$15245)) (quote #f))) (f$645$15239 (syntax-cdr$645$12206 x$645$15241)))) (quote #f))) ((lambda (x$645$15247) (if (syntax-pair?$645$12194 x$645$15247) (begin (quote #f) ((lambda (q$645$15249) (if q$645$15249 (begin (quote #f) ((lambda (r$645$15251) (if r$645$15251 (begin (quote #f) (append q$645$15249 r$645$15251)) (quote #f))) ((lambda (x$645$15253) (if (syntax-pair?$645$12194 x$645$15253) (begin (quote #f) ((lambda (q$645$15255) (if q$645$15255 (begin (quote #f) ((lambda (r$645$15257) (if r$645$15257 (begin (quote #f) (append q$645$15255 r$645$15257)) (quote #f))) ((lambda (x$645$15259) (if (syntax-pair?$645$12194 x$645$15259) (begin (quote #f) ((lambda (q$645$15261) (if q$645$15261 (begin (quote #f) ((lambda (r$645$15263) (if r$645$15263 (begin (quote #f) (append q$645$15261 r$645$15263)) (quote #f))) ((lambda (x$645$15265) (if (equal? (stx->datum$645$12228 x$645$15265) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15259)))) (quote #f))) ((lambda (x$645$15267) (list x$645$15267)) (syntax-car$645$12202 x$645$15259)))) (quote #f))) (syntax-cdr$645$12206 x$645$15253)))) (quote #f))) ((lambda (x$645$15269) (list x$645$15269)) (syntax-car$645$12202 x$645$15253)))) (quote #f))) (syntax-cdr$645$12206 x$645$15247)))) (quote #f))) ((lambda (x$645$15271) (list x$645$15271)) (syntax-car$645$12202 x$645$15247)))) (quote #f))) (syntax-car$645$12202 x$645$15241))) (if (syntax-null?$645$12198 x$645$15241) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) f$645$15239) t$645$15223))) (map bind$645$15121 binding*$645$15215))) ls/false$645$15205) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15203 (quote ()))))) ((lambda (x$645$15273) (if (syntax-pair?$645$12194 x$645$15273) (begin (quote #f) ((lambda (q$645$15275) (if q$645$15275 (begin (quote #f) ((lambda (r$645$15277) (if r$645$15277 (begin (quote #f) (append q$645$15275 r$645$15277)) (quote #f))) ((lambda (x$645$15279) (if (syntax-pair?$645$12194 x$645$15279) (begin (quote #f) ((lambda (q$645$15281) (if q$645$15281 (begin (quote #f) ((lambda (r$645$15283) (if r$645$15283 (begin (quote #f) (append q$645$15281 r$645$15283)) (quote #f))) ((lambda (x$645$15285) (if (syntax-pair?$645$12194 x$645$15285) (begin (quote #f) ((lambda (q$645$15287) (if q$645$15287 (begin (quote #f) ((lambda (r$645$15289) (if r$645$15289 (begin (quote #f) (append q$645$15287 r$645$15289)) (quote #f))) ((letrec ((f$645$15291 (lambda (x$645$15293) (if (syntax-pair?$645$12194 x$645$15293) ((lambda (cars/f$645$15295) (if cars/f$645$15295 (begin (quote #f) ((lambda (cdrs/f$645$15297) (if cdrs/f$645$15297 (begin (quote #f) (map cons cars/f$645$15295 cdrs/f$645$15297)) (quote #f))) (f$645$15291 (syntax-cdr$645$12206 x$645$15293)))) (quote #f))) ((lambda (x$645$15299) (list x$645$15299)) (syntax-car$645$12202 x$645$15293))) (if (syntax-null?$645$12198 x$645$15293) (list (begin (quote command*) (quote ()))) (quote #f)))))) f$645$15291) (syntax-cdr$645$12206 x$645$15285)))) (quote #f))) ((lambda (x$645$15301) (if (syntax-pair?$645$12194 x$645$15301) (begin (quote #f) ((lambda (q$645$15303) (if q$645$15303 (begin (quote #f) ((lambda (r$645$15305) (if r$645$15305 (begin (quote #f) (append q$645$15303 r$645$15305)) (quote #f))) ((letrec ((f$645$15307 (lambda (x$645$15309) (if (syntax-pair?$645$12194 x$645$15309) ((lambda (cars/f$645$15311) (if cars/f$645$15311 (begin (quote #f) ((lambda (cdrs/f$645$15313) (if cdrs/f$645$15313 (begin (quote #f) (map cons cars/f$645$15311 cdrs/f$645$15313)) (quote #f))) (f$645$15307 (syntax-cdr$645$12206 x$645$15309)))) (quote #f))) ((lambda (x$645$15315) (list x$645$15315)) (syntax-car$645$12202 x$645$15309))) (if (syntax-null?$645$12198 x$645$15309) (list (begin (quote expr*) (quote ()))) (quote #f)))))) f$645$15307) (syntax-cdr$645$12206 x$645$15301)))) (quote #f))) ((lambda (x$645$15317) (list x$645$15317)) (syntax-car$645$12202 x$645$15301)))) (quote #f))) (syntax-car$645$12202 x$645$15285)))) (quote #f))) (syntax-cdr$645$12206 x$645$15279)))) (quote #f))) ((letrec ((f$645$15319 (lambda (x$645$15321) (if (syntax-pair?$645$12194 x$645$15321) ((lambda (cars/f$645$15323) (if cars/f$645$15323 (begin (quote #f) ((lambda (cdrs/f$645$15325) (if cdrs/f$645$15325 (begin (quote #f) (map cons cars/f$645$15323 cdrs/f$645$15325)) (quote #f))) (f$645$15319 (syntax-cdr$645$12206 x$645$15321)))) (quote #f))) ((lambda (x$645$15327) (list x$645$15327)) (syntax-car$645$12202 x$645$15321))) (if (syntax-null?$645$12198 x$645$15321) (list (begin (quote binding*) (quote ()))) (quote #f)))))) f$645$15319) (syntax-car$645$12202 x$645$15279)))) (quote #f))) (syntax-cdr$645$12206 x$645$15273)))) (quote #f))) ((lambda (x$645$15329) (quote ())) (syntax-car$645$12202 x$645$15273)))) (quote #f))) t$645$15203))) stx$645$15119))) (quote #f)))) (set! let*-macro$645$12690 (lambda (stx$645$15331) ((lambda (t$645$15333) ((lambda (ls/false$645$15335) (if (if ls/false$645$15335 (begin (quote #f) (apply (lambda (lhs*$645$15337 rhs*$645$15338 b$645$15339 b*$645$15340) (for-all id?$645$12208 lhs*$645$15337)) ls/false$645$15335)) (quote #f)) (apply (lambda (lhs*$645$15345 rhs*$645$15346 b$645$15347 b*$645$15348) (bless$645$12668 (letrec ((f$645$15353 (lambda (x*$645$15355) (if (null? x*$645$15355) (cons (quote let) (cons (quote ()) (cons b$645$15347 b*$645$15348))) (list (quote let) (list (car x*$645$15355)) (f$645$15353 (cdr x*$645$15355))))))) (f$645$15353 (map list lhs*$645$15345 rhs*$645$15346))))) ls/false$645$15335) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15333 (quote ()))))) ((lambda (x$645$15357) (if (syntax-pair?$645$12194 x$645$15357) (begin (quote #f) ((lambda (q$645$15359) (if q$645$15359 (begin (quote #f) ((lambda (r$645$15361) (if r$645$15361 (begin (quote #f) (append q$645$15359 r$645$15361)) (quote #f))) ((lambda (x$645$15363) (if (syntax-pair?$645$12194 x$645$15363) (begin (quote #f) ((lambda (q$645$15365) (if q$645$15365 (begin (quote #f) ((lambda (r$645$15367) (if r$645$15367 (begin (quote #f) (append q$645$15365 r$645$15367)) (quote #f))) ((lambda (x$645$15369) (if (syntax-pair?$645$12194 x$645$15369) (begin (quote #f) ((lambda (q$645$15371) (if q$645$15371 (begin (quote #f) ((lambda (r$645$15373) (if r$645$15373 (begin (quote #f) (append q$645$15371 r$645$15373)) (quote #f))) ((letrec ((f$645$15375 (lambda (x$645$15377) (if (syntax-pair?$645$12194 x$645$15377) ((lambda (cars/f$645$15379) (if cars/f$645$15379 (begin (quote #f) ((lambda (cdrs/f$645$15381) (if cdrs/f$645$15381 (begin (quote #f) (map cons cars/f$645$15379 cdrs/f$645$15381)) (quote #f))) (f$645$15375 (syntax-cdr$645$12206 x$645$15377)))) (quote #f))) ((lambda (x$645$15383) (list x$645$15383)) (syntax-car$645$12202 x$645$15377))) (if (syntax-null?$645$12198 x$645$15377) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$15375) (syntax-cdr$645$12206 x$645$15369)))) (quote #f))) ((lambda (x$645$15385) (list x$645$15385)) (syntax-car$645$12202 x$645$15369)))) (quote #f))) (syntax-cdr$645$12206 x$645$15363)))) (quote #f))) ((letrec ((f$645$15387 (lambda (x$645$15389) (if (syntax-pair?$645$12194 x$645$15389) ((lambda (cars/f$645$15391) (if cars/f$645$15391 (begin (quote #f) ((lambda (cdrs/f$645$15393) (if cdrs/f$645$15393 (begin (quote #f) (map cons cars/f$645$15391 cdrs/f$645$15393)) (quote #f))) (f$645$15387 (syntax-cdr$645$12206 x$645$15389)))) (quote #f))) ((lambda (x$645$15395) (if (syntax-pair?$645$12194 x$645$15395) (begin (quote #f) ((lambda (q$645$15397) (if q$645$15397 (begin (quote #f) ((lambda (r$645$15399) (if r$645$15399 (begin (quote #f) (append q$645$15397 r$645$15399)) (quote #f))) ((lambda (x$645$15401) (if (syntax-pair?$645$12194 x$645$15401) (begin (quote #f) ((lambda (q$645$15403) (if q$645$15403 (begin (quote #f) ((lambda (r$645$15405) (if r$645$15405 (begin (quote #f) (append q$645$15403 r$645$15405)) (quote #f))) ((lambda (x$645$15407) (if (equal? (stx->datum$645$12228 x$645$15407) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15401)))) (quote #f))) ((lambda (x$645$15409) (list x$645$15409)) (syntax-car$645$12202 x$645$15401)))) (quote #f))) (syntax-cdr$645$12206 x$645$15395)))) (quote #f))) ((lambda (x$645$15411) (list x$645$15411)) (syntax-car$645$12202 x$645$15395)))) (quote #f))) (syntax-car$645$12202 x$645$15389))) (if (syntax-null?$645$12198 x$645$15389) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) f$645$15387) (syntax-car$645$12202 x$645$15363)))) (quote #f))) (syntax-cdr$645$12206 x$645$15357)))) (quote #f))) ((lambda (x$645$15413) (quote ())) (syntax-car$645$12202 x$645$15357)))) (quote #f))) t$645$15333))) stx$645$15331))) (set! or-macro$645$12692 (lambda (stx$645$15415) ((lambda (t$645$15417) ((lambda (ls/false$645$15419) (if (if ls/false$645$15419 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$15419)) (quote #f)) (apply (lambda () (quote #f)) ls/false$645$15419) ((lambda (t$645$15421) ((lambda (ls/false$645$15423) (if (if ls/false$645$15423 (begin (quote #f) (apply (lambda (e$645$15425 e*$645$15426) (quote #t)) ls/false$645$15423)) (quote #f)) (apply (lambda (e$645$15429 e*$645$15430) (bless$645$12668 (letrec ((f$645$15433 (lambda (e$645$15435 e*$645$15436) (if (null? e*$645$15436) (list (quote begin) (quote #f) e$645$15435) (list (quote let) (list (list (quote t) e$645$15435)) (list (quote if) (quote t) (quote t) (f$645$15433 (car e*$645$15436) (cdr e*$645$15436)))))))) (f$645$15433 e$645$15429 e*$645$15430)))) ls/false$645$15423) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15421 (quote ()))))) ((lambda (x$645$15439) (if (syntax-pair?$645$12194 x$645$15439) (begin (quote #f) ((lambda (q$645$15441) (if q$645$15441 (begin (quote #f) ((lambda (r$645$15443) (if r$645$15443 (begin (quote #f) (append q$645$15441 r$645$15443)) (quote #f))) ((lambda (x$645$15445) (if (syntax-pair?$645$12194 x$645$15445) (begin (quote #f) ((lambda (q$645$15447) (if q$645$15447 (begin (quote #f) ((lambda (r$645$15449) (if r$645$15449 (begin (quote #f) (append q$645$15447 r$645$15449)) (quote #f))) ((letrec ((f$645$15451 (lambda (x$645$15453) (if (syntax-pair?$645$12194 x$645$15453) ((lambda (cars/f$645$15455) (if cars/f$645$15455 (begin (quote #f) ((lambda (cdrs/f$645$15457) (if cdrs/f$645$15457 (begin (quote #f) (map cons cars/f$645$15455 cdrs/f$645$15457)) (quote #f))) (f$645$15451 (syntax-cdr$645$12206 x$645$15453)))) (quote #f))) ((lambda (x$645$15459) (list x$645$15459)) (syntax-car$645$12202 x$645$15453))) (if (syntax-null?$645$12198 x$645$15453) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$15451) (syntax-cdr$645$12206 x$645$15445)))) (quote #f))) ((lambda (x$645$15461) (list x$645$15461)) (syntax-car$645$12202 x$645$15445)))) (quote #f))) (syntax-cdr$645$12206 x$645$15439)))) (quote #f))) ((lambda (x$645$15463) (quote ())) (syntax-car$645$12202 x$645$15439)))) (quote #f))) t$645$15421))) t$645$15417))) ((lambda (x$645$15465) (if (syntax-pair?$645$12194 x$645$15465) (begin (quote #f) ((lambda (q$645$15467) (if q$645$15467 (begin (quote #f) ((lambda (r$645$15469) (if r$645$15469 (begin (quote #f) (append q$645$15467 r$645$15469)) (quote #f))) ((lambda (x$645$15471) (if (equal? (stx->datum$645$12228 x$645$15471) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15465)))) (quote #f))) ((lambda (x$645$15473) (quote ())) (syntax-car$645$12202 x$645$15465)))) (quote #f))) t$645$15417))) stx$645$15415))) (set! and-macro$645$12694 (lambda (stx$645$15475) ((lambda (t$645$15477) ((lambda (ls/false$645$15479) (if (if ls/false$645$15479 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$15479)) (quote #f)) (apply (lambda () (quote #t)) ls/false$645$15479) ((lambda (t$645$15481) ((lambda (ls/false$645$15483) (if (if ls/false$645$15483 (begin (quote #f) (apply (lambda (e$645$15485 e*$645$15486) (quote #t)) ls/false$645$15483)) (quote #f)) (apply (lambda (e$645$15489 e*$645$15490) (bless$645$12668 (letrec ((f$645$15493 (lambda (e$645$15495 e*$645$15496) (if (null? e*$645$15496) (list (quote begin) (quote #f) e$645$15495) (cons (quote if) (cons e$645$15495 (cons (f$645$15493 (car e*$645$15496) (cdr e*$645$15496)) (quote (#f))))))))) (f$645$15493 e$645$15489 e*$645$15490)))) ls/false$645$15483) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15481 (quote ()))))) ((lambda (x$645$15499) (if (syntax-pair?$645$12194 x$645$15499) (begin (quote #f) ((lambda (q$645$15501) (if q$645$15501 (begin (quote #f) ((lambda (r$645$15503) (if r$645$15503 (begin (quote #f) (append q$645$15501 r$645$15503)) (quote #f))) ((lambda (x$645$15505) (if (syntax-pair?$645$12194 x$645$15505) (begin (quote #f) ((lambda (q$645$15507) (if q$645$15507 (begin (quote #f) ((lambda (r$645$15509) (if r$645$15509 (begin (quote #f) (append q$645$15507 r$645$15509)) (quote #f))) ((letrec ((f$645$15511 (lambda (x$645$15513) (if (syntax-pair?$645$12194 x$645$15513) ((lambda (cars/f$645$15515) (if cars/f$645$15515 (begin (quote #f) ((lambda (cdrs/f$645$15517) (if cdrs/f$645$15517 (begin (quote #f) (map cons cars/f$645$15515 cdrs/f$645$15517)) (quote #f))) (f$645$15511 (syntax-cdr$645$12206 x$645$15513)))) (quote #f))) ((lambda (x$645$15519) (list x$645$15519)) (syntax-car$645$12202 x$645$15513))) (if (syntax-null?$645$12198 x$645$15513) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$15511) (syntax-cdr$645$12206 x$645$15505)))) (quote #f))) ((lambda (x$645$15521) (list x$645$15521)) (syntax-car$645$12202 x$645$15505)))) (quote #f))) (syntax-cdr$645$12206 x$645$15499)))) (quote #f))) ((lambda (x$645$15523) (quote ())) (syntax-car$645$12202 x$645$15499)))) (quote #f))) t$645$15481))) t$645$15477))) ((lambda (x$645$15525) (if (syntax-pair?$645$12194 x$645$15525) (begin (quote #f) ((lambda (q$645$15527) (if q$645$15527 (begin (quote #f) ((lambda (r$645$15529) (if r$645$15529 (begin (quote #f) (append q$645$15527 r$645$15529)) (quote #f))) ((lambda (x$645$15531) (if (equal? (stx->datum$645$12228 x$645$15531) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15525)))) (quote #f))) ((lambda (x$645$15533) (quote ())) (syntax-car$645$12202 x$645$15525)))) (quote #f))) t$645$15477))) stx$645$15475))) (set! cond-macro$645$12696 (lambda (stx$645$15535) ((lambda (t$645$15537) ((lambda (ls/false$645$15539) (if (if ls/false$645$15539 (begin (quote #f) (apply (lambda (cls$645$15541 cls*$645$15542) (quote #t)) ls/false$645$15539)) (quote #f)) (apply (lambda (cls$645$15545 cls*$645$15546) (bless$645$12668 (letrec ((f$645$15549 (lambda (cls$645$15551 cls*$645$15552) (if (null? cls*$645$15552) ((lambda (t$645$15555) ((lambda (ls/false$645$15557) (if (if ls/false$645$15557 (begin (quote #f) (apply (lambda (e$645$15559 e*$645$15560) (quote #t)) ls/false$645$15557)) (quote #f)) (apply (lambda (e$645$15563 e*$645$15564) (cons (quote begin) (cons e$645$15563 e*$645$15564))) ls/false$645$15557) ((lambda (t$645$15567) ((lambda (ls/false$645$15569) (if (if ls/false$645$15569 (begin (quote #f) (apply (lambda (e$645$15571 p$645$15572) (quote #t)) ls/false$645$15569)) (quote #f)) (apply (lambda (e$645$15575 p$645$15576) (list (quote let) (list (list (quote t) e$645$15575)) (list (quote if) (quote t) (cons p$645$15576 (quote (t)))))) ls/false$645$15569) ((lambda (t$645$15579) ((lambda (ls/false$645$15581) (if (if ls/false$645$15581 (begin (quote #f) (apply (lambda (e$645$15583) (quote #t)) ls/false$645$15581)) (quote #f)) (apply (lambda (e$645$15585) (cons (quote or) (cons e$645$15585 (quote ((if #f #f)))))) ls/false$645$15581) ((lambda (t$645$15587) ((lambda (ls/false$645$15589) (if (if ls/false$645$15589 (begin (quote #f) (apply (lambda (e$645$15591 e*$645$15592) (quote #t)) ls/false$645$15589)) (quote #f)) (apply (lambda (e$645$15595 e*$645$15596) (list (quote if) e$645$15595 (cons (quote begin) e*$645$15596))) ls/false$645$15589) ((lambda (t$645$15599) ((lambda (ls/false$645$15601) (if (if ls/false$645$15601 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$15601)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (strip$645$12226 stx$645$15535 (quote ())))) ls/false$645$15601) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15599 (quote ()))))) ((lambda (x$645$15603) (quote ())) t$645$15599))) t$645$15587))) ((lambda (x$645$15605) (if (syntax-pair?$645$12194 x$645$15605) (begin (quote #f) ((lambda (q$645$15607) (if q$645$15607 (begin (quote #f) ((lambda (r$645$15609) (if r$645$15609 (begin (quote #f) (append q$645$15607 r$645$15609)) (quote #f))) ((letrec ((f$645$15611 (lambda (x$645$15613) (if (syntax-pair?$645$12194 x$645$15613) ((lambda (cars/f$645$15615) (if cars/f$645$15615 (begin (quote #f) ((lambda (cdrs/f$645$15617) (if cdrs/f$645$15617 (begin (quote #f) (map cons cars/f$645$15615 cdrs/f$645$15617)) (quote #f))) (f$645$15611 (syntax-cdr$645$12206 x$645$15613)))) (quote #f))) ((lambda (x$645$15619) (list x$645$15619)) (syntax-car$645$12202 x$645$15613))) (if (syntax-null?$645$12198 x$645$15613) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$15611) (syntax-cdr$645$12206 x$645$15605)))) (quote #f))) ((lambda (x$645$15621) (list x$645$15621)) (syntax-car$645$12202 x$645$15605)))) (quote #f))) t$645$15587))) t$645$15579))) ((lambda (x$645$15623) (if (syntax-pair?$645$12194 x$645$15623) (begin (quote #f) ((lambda (q$645$15625) (if q$645$15625 (begin (quote #f) ((lambda (r$645$15627) (if r$645$15627 (begin (quote #f) (append q$645$15625 r$645$15627)) (quote #f))) ((lambda (x$645$15629) (if (equal? (stx->datum$645$12228 x$645$15629) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15623)))) (quote #f))) ((lambda (x$645$15631) (list x$645$15631)) (syntax-car$645$12202 x$645$15623)))) (quote #f))) t$645$15579))) t$645$15567))) ((lambda (x$645$15633) (if (syntax-pair?$645$12194 x$645$15633) (begin (quote #f) ((lambda (q$645$15635) (if q$645$15635 (begin (quote #f) ((lambda (r$645$15637) (if r$645$15637 (begin (quote #f) (append q$645$15635 r$645$15637)) (quote #f))) ((lambda (x$645$15639) (if (syntax-pair?$645$12194 x$645$15639) (begin (quote #f) ((lambda (q$645$15641) (if q$645$15641 (begin (quote #f) ((lambda (r$645$15643) (if r$645$15643 (begin (quote #f) (append q$645$15641 r$645$15643)) (quote #f))) ((lambda (x$645$15645) (if (syntax-pair?$645$12194 x$645$15645) (begin (quote #f) ((lambda (q$645$15647) (if q$645$15647 (begin (quote #f) ((lambda (r$645$15649) (if r$645$15649 (begin (quote #f) (append q$645$15647 r$645$15649)) (quote #f))) ((lambda (x$645$15651) (if (equal? (stx->datum$645$12228 x$645$15651) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15645)))) (quote #f))) ((lambda (x$645$15653) (list x$645$15653)) (syntax-car$645$12202 x$645$15645)))) (quote #f))) (syntax-cdr$645$12206 x$645$15639)))) (quote #f))) ((lambda (x$645$15655) (if (id?$645$12208 x$645$15655) (if (free-id=?$645$12216 x$645$15655 (scheme-stx$645$12638 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$15639)))) (quote #f))) (syntax-cdr$645$12206 x$645$15633)))) (quote #f))) ((lambda (x$645$15657) (list x$645$15657)) (syntax-car$645$12202 x$645$15633)))) (quote #f))) t$645$15567))) t$645$15555))) ((lambda (x$645$15659) (if (syntax-pair?$645$12194 x$645$15659) (begin (quote #f) ((lambda (q$645$15661) (if q$645$15661 (begin (quote #f) ((lambda (r$645$15663) (if r$645$15663 (begin (quote #f) (append q$645$15661 r$645$15663)) (quote #f))) ((lambda (x$645$15665) (if (syntax-pair?$645$12194 x$645$15665) (begin (quote #f) ((lambda (q$645$15667) (if q$645$15667 (begin (quote #f) ((lambda (r$645$15669) (if r$645$15669 (begin (quote #f) (append q$645$15667 r$645$15669)) (quote #f))) ((letrec ((f$645$15671 (lambda (x$645$15673) (if (syntax-pair?$645$12194 x$645$15673) ((lambda (cars/f$645$15675) (if cars/f$645$15675 (begin (quote #f) ((lambda (cdrs/f$645$15677) (if cdrs/f$645$15677 (begin (quote #f) (map cons cars/f$645$15675 cdrs/f$645$15677)) (quote #f))) (f$645$15671 (syntax-cdr$645$12206 x$645$15673)))) (quote #f))) ((lambda (x$645$15679) (list x$645$15679)) (syntax-car$645$12202 x$645$15673))) (if (syntax-null?$645$12198 x$645$15673) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$15671) (syntax-cdr$645$12206 x$645$15665)))) (quote #f))) ((lambda (x$645$15681) (list x$645$15681)) (syntax-car$645$12202 x$645$15665)))) (quote #f))) (syntax-cdr$645$12206 x$645$15659)))) (quote #f))) ((lambda (x$645$15683) (if (id?$645$12208 x$645$15683) (if (free-id=?$645$12216 x$645$15683 (scheme-stx$645$12638 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$15659)))) (quote #f))) t$645$15555))) cls$645$15551) ((lambda (t$645$15685) ((lambda (ls/false$645$15687) (if (if ls/false$645$15687 (begin (quote #f) (apply (lambda (e$645$15689 e*$645$15690) (quote #t)) ls/false$645$15687)) (quote #f)) (apply (lambda (e$645$15693 e*$645$15694) (error (quote expander) (quote "~a ~s") (quote "incorrect position of keyword else") (strip$645$12226 stx$645$15535 (quote ())))) ls/false$645$15687) ((lambda (t$645$15697) ((lambda (ls/false$645$15699) (if (if ls/false$645$15699 (begin (quote #f) (apply (lambda (e$645$15701 p$645$15702) (quote #t)) ls/false$645$15699)) (quote #f)) (apply (lambda (e$645$15705 p$645$15706) (list (quote let) (list (list (quote t) e$645$15705)) (list (quote if) (quote t) (cons p$645$15706 (quote (t))) (f$645$15549 (car cls*$645$15552) (cdr cls*$645$15552))))) ls/false$645$15699) ((lambda (t$645$15709) ((lambda (ls/false$645$15711) (if (if ls/false$645$15711 (begin (quote #f) (apply (lambda (e$645$15713) (quote #t)) ls/false$645$15711)) (quote #f)) (apply (lambda (e$645$15715) (list (quote or) e$645$15715 (f$645$15549 (car cls*$645$15552) (cdr cls*$645$15552)))) ls/false$645$15711) ((lambda (t$645$15717) ((lambda (ls/false$645$15719) (if (if ls/false$645$15719 (begin (quote #f) (apply (lambda (e$645$15721 e*$645$15722) (quote #t)) ls/false$645$15719)) (quote #f)) (apply (lambda (e$645$15725 e*$645$15726) (list (quote if) e$645$15725 (cons (quote begin) e*$645$15726) (f$645$15549 (car cls*$645$15552) (cdr cls*$645$15552)))) ls/false$645$15719) ((lambda (t$645$15729) ((lambda (ls/false$645$15731) (if (if ls/false$645$15731 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$15731)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (strip$645$12226 stx$645$15535 (quote ())))) ls/false$645$15731) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15729 (quote ()))))) ((lambda (x$645$15733) (quote ())) t$645$15729))) t$645$15717))) ((lambda (x$645$15735) (if (syntax-pair?$645$12194 x$645$15735) (begin (quote #f) ((lambda (q$645$15737) (if q$645$15737 (begin (quote #f) ((lambda (r$645$15739) (if r$645$15739 (begin (quote #f) (append q$645$15737 r$645$15739)) (quote #f))) ((letrec ((f$645$15741 (lambda (x$645$15743) (if (syntax-pair?$645$12194 x$645$15743) ((lambda (cars/f$645$15745) (if cars/f$645$15745 (begin (quote #f) ((lambda (cdrs/f$645$15747) (if cdrs/f$645$15747 (begin (quote #f) (map cons cars/f$645$15745 cdrs/f$645$15747)) (quote #f))) (f$645$15741 (syntax-cdr$645$12206 x$645$15743)))) (quote #f))) ((lambda (x$645$15749) (list x$645$15749)) (syntax-car$645$12202 x$645$15743))) (if (syntax-null?$645$12198 x$645$15743) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$15741) (syntax-cdr$645$12206 x$645$15735)))) (quote #f))) ((lambda (x$645$15751) (list x$645$15751)) (syntax-car$645$12202 x$645$15735)))) (quote #f))) t$645$15717))) t$645$15709))) ((lambda (x$645$15753) (if (syntax-pair?$645$12194 x$645$15753) (begin (quote #f) ((lambda (q$645$15755) (if q$645$15755 (begin (quote #f) ((lambda (r$645$15757) (if r$645$15757 (begin (quote #f) (append q$645$15755 r$645$15757)) (quote #f))) ((lambda (x$645$15759) (if (equal? (stx->datum$645$12228 x$645$15759) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15753)))) (quote #f))) ((lambda (x$645$15761) (list x$645$15761)) (syntax-car$645$12202 x$645$15753)))) (quote #f))) t$645$15709))) t$645$15697))) ((lambda (x$645$15763) (if (syntax-pair?$645$12194 x$645$15763) (begin (quote #f) ((lambda (q$645$15765) (if q$645$15765 (begin (quote #f) ((lambda (r$645$15767) (if r$645$15767 (begin (quote #f) (append q$645$15765 r$645$15767)) (quote #f))) ((lambda (x$645$15769) (if (syntax-pair?$645$12194 x$645$15769) (begin (quote #f) ((lambda (q$645$15771) (if q$645$15771 (begin (quote #f) ((lambda (r$645$15773) (if r$645$15773 (begin (quote #f) (append q$645$15771 r$645$15773)) (quote #f))) ((lambda (x$645$15775) (if (syntax-pair?$645$12194 x$645$15775) (begin (quote #f) ((lambda (q$645$15777) (if q$645$15777 (begin (quote #f) ((lambda (r$645$15779) (if r$645$15779 (begin (quote #f) (append q$645$15777 r$645$15779)) (quote #f))) ((lambda (x$645$15781) (if (equal? (stx->datum$645$12228 x$645$15781) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15775)))) (quote #f))) ((lambda (x$645$15783) (list x$645$15783)) (syntax-car$645$12202 x$645$15775)))) (quote #f))) (syntax-cdr$645$12206 x$645$15769)))) (quote #f))) ((lambda (x$645$15785) (if (id?$645$12208 x$645$15785) (if (free-id=?$645$12216 x$645$15785 (scheme-stx$645$12638 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$15769)))) (quote #f))) (syntax-cdr$645$12206 x$645$15763)))) (quote #f))) ((lambda (x$645$15787) (list x$645$15787)) (syntax-car$645$12202 x$645$15763)))) (quote #f))) t$645$15697))) t$645$15685))) ((lambda (x$645$15789) (if (syntax-pair?$645$12194 x$645$15789) (begin (quote #f) ((lambda (q$645$15791) (if q$645$15791 (begin (quote #f) ((lambda (r$645$15793) (if r$645$15793 (begin (quote #f) (append q$645$15791 r$645$15793)) (quote #f))) ((lambda (x$645$15795) (if (syntax-pair?$645$12194 x$645$15795) (begin (quote #f) ((lambda (q$645$15797) (if q$645$15797 (begin (quote #f) ((lambda (r$645$15799) (if r$645$15799 (begin (quote #f) (append q$645$15797 r$645$15799)) (quote #f))) ((letrec ((f$645$15801 (lambda (x$645$15803) (if (syntax-pair?$645$12194 x$645$15803) ((lambda (cars/f$645$15805) (if cars/f$645$15805 (begin (quote #f) ((lambda (cdrs/f$645$15807) (if cdrs/f$645$15807 (begin (quote #f) (map cons cars/f$645$15805 cdrs/f$645$15807)) (quote #f))) (f$645$15801 (syntax-cdr$645$12206 x$645$15803)))) (quote #f))) ((lambda (x$645$15809) (list x$645$15809)) (syntax-car$645$12202 x$645$15803))) (if (syntax-null?$645$12198 x$645$15803) (list (begin (quote e*) (quote ()))) (quote #f)))))) f$645$15801) (syntax-cdr$645$12206 x$645$15795)))) (quote #f))) ((lambda (x$645$15811) (list x$645$15811)) (syntax-car$645$12202 x$645$15795)))) (quote #f))) (syntax-cdr$645$12206 x$645$15789)))) (quote #f))) ((lambda (x$645$15813) (if (id?$645$12208 x$645$15813) (if (free-id=?$645$12216 x$645$15813 (scheme-stx$645$12638 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$15789)))) (quote #f))) t$645$15685))) cls$645$15551))))) (f$645$15549 cls$645$15545 cls*$645$15546)))) ls/false$645$15539) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15537 (quote ()))))) ((lambda (x$645$15815) (if (syntax-pair?$645$12194 x$645$15815) (begin (quote #f) ((lambda (q$645$15817) (if q$645$15817 (begin (quote #f) ((lambda (r$645$15819) (if r$645$15819 (begin (quote #f) (append q$645$15817 r$645$15819)) (quote #f))) ((lambda (x$645$15821) (if (syntax-pair?$645$12194 x$645$15821) (begin (quote #f) ((lambda (q$645$15823) (if q$645$15823 (begin (quote #f) ((lambda (r$645$15825) (if r$645$15825 (begin (quote #f) (append q$645$15823 r$645$15825)) (quote #f))) ((letrec ((f$645$15827 (lambda (x$645$15829) (if (syntax-pair?$645$12194 x$645$15829) ((lambda (cars/f$645$15831) (if cars/f$645$15831 (begin (quote #f) ((lambda (cdrs/f$645$15833) (if cdrs/f$645$15833 (begin (quote #f) (map cons cars/f$645$15831 cdrs/f$645$15833)) (quote #f))) (f$645$15827 (syntax-cdr$645$12206 x$645$15829)))) (quote #f))) ((lambda (x$645$15835) (list x$645$15835)) (syntax-car$645$12202 x$645$15829))) (if (syntax-null?$645$12198 x$645$15829) (list (begin (quote cls*) (quote ()))) (quote #f)))))) f$645$15827) (syntax-cdr$645$12206 x$645$15821)))) (quote #f))) ((lambda (x$645$15837) (list x$645$15837)) (syntax-car$645$12202 x$645$15821)))) (quote #f))) (syntax-cdr$645$12206 x$645$15815)))) (quote #f))) ((lambda (x$645$15839) (quote ())) (syntax-car$645$12202 x$645$15815)))) (quote #f))) t$645$15537))) stx$645$15535))) (set! include-macro$645$12698 (lambda (e$645$15841) ((lambda (t$645$15843) ((lambda (ls/false$645$15845) (if (if ls/false$645$15845 (begin (quote #f) (apply (lambda (id$645$15847 filename$645$15848) (quote #t)) ls/false$645$15845)) (quote #f)) (apply (lambda (id$645$15851 filename$645$15852) ((lambda (filename$645$15855) (begin (if (string? filename$645$15855) (void) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 e$645$15841))) (with-input-from-file filename$645$15855 (lambda () (letrec ((f$645$15857 (lambda (ls$645$15859) ((lambda (x$645$15861) (if (eof-object? x$645$15861) (cons (bless$645$12668 (quote begin)) (datum->stx$645$12174 id$645$15851 (reverse ls$645$15859))) (f$645$15857 (cons x$645$15861 ls$645$15859)))) (read))))) (f$645$15857 (quote ()))))))) (stx->datum$645$12228 filename$645$15852))) ls/false$645$15845) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15843 (quote ()))))) ((lambda (x$645$15863) (if (syntax-pair?$645$12194 x$645$15863) (begin (quote #f) ((lambda (q$645$15865) (if q$645$15865 (begin (quote #f) ((lambda (r$645$15867) (if r$645$15867 (begin (quote #f) (append q$645$15865 r$645$15867)) (quote #f))) ((lambda (x$645$15869) (if (syntax-pair?$645$12194 x$645$15869) (begin (quote #f) ((lambda (q$645$15871) (if q$645$15871 (begin (quote #f) ((lambda (r$645$15873) (if r$645$15873 (begin (quote #f) (append q$645$15871 r$645$15873)) (quote #f))) ((lambda (x$645$15875) (if (equal? (stx->datum$645$12228 x$645$15875) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15869)))) (quote #f))) ((lambda (x$645$15877) (list x$645$15877)) (syntax-car$645$12202 x$645$15869)))) (quote #f))) (syntax-cdr$645$12206 x$645$15863)))) (quote #f))) ((lambda (x$645$15879) (list x$645$15879)) (syntax-car$645$12202 x$645$15863)))) (quote #f))) t$645$15843))) e$645$15841))) (set! syntax-rules-macro$645$12700 (lambda (e$645$15881) ((lambda (t$645$15883) ((lambda (ls/false$645$15885) (if (if ls/false$645$15885 (begin (quote #f) (apply (lambda (lits$645$15887 pat*$645$15888 tmp*$645$15889) (quote #t)) ls/false$645$15885)) (quote #f)) (apply (lambda (lits$645$15893 pat*$645$15894 tmp*$645$15895) (begin (if (for-all (lambda (x$645$15899) (if (id?$645$12208 x$645$15899) (if (not (free-id=?$645$12216 x$645$15899 (scheme-stx$645$12638 (quote ...)))) (begin (quote #f) (not (free-id=?$645$12216 x$645$15899 (scheme-stx$645$12638 (quote _))))) (quote #f)) (quote #f))) lits$645$15893) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (strip$645$12226 e$645$15881 (quote ())))) (bless$645$12668 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons lits$645$15893 (map (lambda (pat$645$15901 tmp$645$15902) (list pat$645$15901 (list (quote syntax) tmp$645$15902))) pat*$645$15894 tmp*$645$15895)))))))) ls/false$645$15885) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$15883 (quote ()))))) ((lambda (x$645$15905) (if (syntax-pair?$645$12194 x$645$15905) (begin (quote #f) ((lambda (q$645$15907) (if q$645$15907 (begin (quote #f) ((lambda (r$645$15909) (if r$645$15909 (begin (quote #f) (append q$645$15907 r$645$15909)) (quote #f))) ((lambda (x$645$15911) (if (syntax-pair?$645$12194 x$645$15911) (begin (quote #f) ((lambda (q$645$15913) (if q$645$15913 (begin (quote #f) ((lambda (r$645$15915) (if r$645$15915 (begin (quote #f) (append q$645$15913 r$645$15915)) (quote #f))) ((letrec ((f$645$15917 (lambda (x$645$15919) (if (syntax-pair?$645$12194 x$645$15919) ((lambda (cars/f$645$15921) (if cars/f$645$15921 (begin (quote #f) ((lambda (cdrs/f$645$15923) (if cdrs/f$645$15923 (begin (quote #f) (map cons cars/f$645$15921 cdrs/f$645$15923)) (quote #f))) (f$645$15917 (syntax-cdr$645$12206 x$645$15919)))) (quote #f))) ((lambda (x$645$15925) (if (syntax-pair?$645$12194 x$645$15925) (begin (quote #f) ((lambda (q$645$15927) (if q$645$15927 (begin (quote #f) ((lambda (r$645$15929) (if r$645$15929 (begin (quote #f) (append q$645$15927 r$645$15929)) (quote #f))) ((lambda (x$645$15931) (if (syntax-pair?$645$12194 x$645$15931) (begin (quote #f) ((lambda (q$645$15933) (if q$645$15933 (begin (quote #f) ((lambda (r$645$15935) (if r$645$15935 (begin (quote #f) (append q$645$15933 r$645$15935)) (quote #f))) ((lambda (x$645$15937) (if (equal? (stx->datum$645$12228 x$645$15937) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$15931)))) (quote #f))) ((lambda (x$645$15939) (list x$645$15939)) (syntax-car$645$12202 x$645$15931)))) (quote #f))) (syntax-cdr$645$12206 x$645$15925)))) (quote #f))) ((lambda (x$645$15941) (list x$645$15941)) (syntax-car$645$12202 x$645$15925)))) (quote #f))) (syntax-car$645$12202 x$645$15919))) (if (syntax-null?$645$12198 x$645$15919) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) f$645$15917) (syntax-cdr$645$12206 x$645$15911)))) (quote #f))) ((letrec ((f$645$15943 (lambda (x$645$15945) (if (syntax-pair?$645$12194 x$645$15945) ((lambda (cars/f$645$15947) (if cars/f$645$15947 (begin (quote #f) ((lambda (cdrs/f$645$15949) (if cdrs/f$645$15949 (begin (quote #f) (map cons cars/f$645$15947 cdrs/f$645$15949)) (quote #f))) (f$645$15943 (syntax-cdr$645$12206 x$645$15945)))) (quote #f))) ((lambda (x$645$15951) (list x$645$15951)) (syntax-car$645$12202 x$645$15945))) (if (syntax-null?$645$12198 x$645$15945) (list (begin (quote lits) (quote ()))) (quote #f)))))) f$645$15943) (syntax-car$645$12202 x$645$15911)))) (quote #f))) (syntax-cdr$645$12206 x$645$15905)))) (quote #f))) ((lambda (x$645$15953) (quote ())) (syntax-car$645$12202 x$645$15905)))) (quote #f))) t$645$15883))) e$645$15881))) (set! quasiquote-macro$645$12702 ((lambda () ((lambda (quasicons*$645$15990 quasicons$645$15992 quasiappend$645$15994 quasivector$645$15996 vquasi$645$15998 quasi$645$16000) (begin (set! quasicons*$645$15990 (lambda (x$645$16612 y$645$16613) (letrec ((f$645$16616 (lambda (x$645$16618) (if (null? x$645$16618) y$645$16613 (quasicons$645$15992 (car x$645$16618) (f$645$16616 (cdr x$645$16618))))))) (f$645$16616 x$645$16612)))) (set! quasicons$645$15992 (lambda (x$645$16506 y$645$16507) ((lambda (t$645$16510) ((lambda (ls/false$645$16512) (if (if ls/false$645$16512 (begin (quote #f) (apply (lambda (dy$645$16514) (quote #t)) ls/false$645$16512)) (quote #f)) (apply (lambda (dy$645$16516) ((lambda (t$645$16518) ((lambda (ls/false$645$16520) (if (if ls/false$645$16520 (begin (quote #f) (apply (lambda (dx$645$16522) (quote #t)) ls/false$645$16520)) (quote #f)) (apply (lambda (dx$645$16524) (list (scheme-stx$645$12638 (quote quote)) (cons dx$645$16524 dy$645$16516))) ls/false$645$16520) ((lambda (t$645$16526) ((lambda (ls/false$645$16528) (if (if ls/false$645$16528 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16528)) (quote #f)) (apply (lambda () ((lambda (t$645$16530) ((lambda (ls/false$645$16532) (if (if ls/false$645$16532 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16532)) (quote #f)) (apply (lambda () (list (scheme-stx$645$12638 (quote list)) x$645$16506)) ls/false$645$16532) ((lambda (t$645$16534) ((lambda (ls/false$645$16536) (if (if ls/false$645$16536 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16536)) (quote #f)) (apply (lambda () (list (scheme-stx$645$12638 (quote cons)) x$645$16506 y$645$16507)) ls/false$645$16536) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16534 (quote ()))))) ((lambda (x$645$16538) (quote ())) t$645$16534))) t$645$16530))) ((lambda (x$645$16540) (if (equal? (stx->datum$645$12228 x$645$16540) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$645$16530))) dy$645$16516)) ls/false$645$16528) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16526 (quote ()))))) ((lambda (x$645$16542) (quote ())) t$645$16526))) t$645$16518))) ((lambda (x$645$16544) (if (syntax-pair?$645$12194 x$645$16544) (begin (quote #f) ((lambda (q$645$16546) (if q$645$16546 (begin (quote #f) ((lambda (r$645$16548) (if r$645$16548 (begin (quote #f) (append q$645$16546 r$645$16548)) (quote #f))) ((lambda (x$645$16550) (if (syntax-pair?$645$12194 x$645$16550) (begin (quote #f) ((lambda (q$645$16552) (if q$645$16552 (begin (quote #f) ((lambda (r$645$16554) (if r$645$16554 (begin (quote #f) (append q$645$16552 r$645$16554)) (quote #f))) ((lambda (x$645$16556) (if (equal? (stx->datum$645$12228 x$645$16556) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16550)))) (quote #f))) ((lambda (x$645$16558) (list x$645$16558)) (syntax-car$645$12202 x$645$16550)))) (quote #f))) (syntax-cdr$645$12206 x$645$16544)))) (quote #f))) ((lambda (x$645$16560) (if (id?$645$12208 x$645$16560) (if (free-id=?$645$12216 x$645$16560 (scheme-stx$645$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16544)))) (quote #f))) t$645$16518))) x$645$16506)) ls/false$645$16512) ((lambda (t$645$16562) ((lambda (ls/false$645$16564) (if (if ls/false$645$16564 (begin (quote #f) (apply (lambda (stuff$645$16566) (quote #t)) ls/false$645$16564)) (quote #f)) (apply (lambda (stuff$645$16568) (cons* (scheme-stx$645$12638 (quote list)) x$645$16506 stuff$645$16568)) ls/false$645$16564) ((lambda (t$645$16570) ((lambda (ls/false$645$16572) (if (if ls/false$645$16572 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16572)) (quote #f)) (apply (lambda () (list (scheme-stx$645$12638 (quote cons)) x$645$16506 y$645$16507)) ls/false$645$16572) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16570 (quote ()))))) ((lambda (x$645$16574) (quote ())) t$645$16570))) t$645$16562))) ((lambda (x$645$16576) (if (syntax-pair?$645$12194 x$645$16576) (begin (quote #f) ((lambda (q$645$16578) (if q$645$16578 (begin (quote #f) ((lambda (r$645$16580) (if r$645$16580 (begin (quote #f) (append q$645$16578 r$645$16580)) (quote #f))) ((letrec ((f$645$16582 (lambda (x$645$16584) (if (syntax-pair?$645$12194 x$645$16584) ((lambda (cars/f$645$16586) (if cars/f$645$16586 (begin (quote #f) ((lambda (cdrs/f$645$16588) (if cdrs/f$645$16588 (begin (quote #f) (map cons cars/f$645$16586 cdrs/f$645$16588)) (quote #f))) (f$645$16582 (syntax-cdr$645$12206 x$645$16584)))) (quote #f))) ((lambda (x$645$16590) (list x$645$16590)) (syntax-car$645$12202 x$645$16584))) (if (syntax-null?$645$12198 x$645$16584) (list (begin (quote stuff) (quote ()))) (quote #f)))))) f$645$16582) (syntax-cdr$645$12206 x$645$16576)))) (quote #f))) ((lambda (x$645$16592) (if (id?$645$12208 x$645$16592) (if (free-id=?$645$12216 x$645$16592 (scheme-stx$645$12638 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16576)))) (quote #f))) t$645$16562))) t$645$16510))) ((lambda (x$645$16594) (if (syntax-pair?$645$12194 x$645$16594) (begin (quote #f) ((lambda (q$645$16596) (if q$645$16596 (begin (quote #f) ((lambda (r$645$16598) (if r$645$16598 (begin (quote #f) (append q$645$16596 r$645$16598)) (quote #f))) ((lambda (x$645$16600) (if (syntax-pair?$645$12194 x$645$16600) (begin (quote #f) ((lambda (q$645$16602) (if q$645$16602 (begin (quote #f) ((lambda (r$645$16604) (if r$645$16604 (begin (quote #f) (append q$645$16602 r$645$16604)) (quote #f))) ((lambda (x$645$16606) (if (equal? (stx->datum$645$12228 x$645$16606) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16600)))) (quote #f))) ((lambda (x$645$16608) (list x$645$16608)) (syntax-car$645$12202 x$645$16600)))) (quote #f))) (syntax-cdr$645$12206 x$645$16594)))) (quote #f))) ((lambda (x$645$16610) (if (id?$645$12208 x$645$16610) (if (free-id=?$645$12216 x$645$16610 (scheme-stx$645$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16594)))) (quote #f))) t$645$16510))) y$645$16507))) (set! quasiappend$645$15994 (lambda (x$645$16440 y$645$16441) ((lambda (ls$645$16444) (if (null? ls$645$16444) (list (scheme-stx$645$12638 (quote quote)) (quote ())) (if (null? (cdr ls$645$16444)) (car ls$645$16444) (cons* (scheme-stx$645$12638 (quote append)) ls$645$16444)))) (letrec ((f$645$16446 (lambda (x$645$16448) (if (null? x$645$16448) ((lambda (t$645$16450) ((lambda (ls/false$645$16452) (if (if ls/false$645$16452 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16452)) (quote #f)) (apply (lambda () (quote ())) ls/false$645$16452) ((lambda (t$645$16454) ((lambda (ls/false$645$16456) (if (if ls/false$645$16456 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16456)) (quote #f)) (apply (lambda () (list y$645$16441)) ls/false$645$16456) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16454 (quote ()))))) ((lambda (x$645$16458) (quote ())) t$645$16454))) t$645$16450))) ((lambda (x$645$16460) (if (syntax-pair?$645$12194 x$645$16460) (begin (quote #f) ((lambda (q$645$16462) (if q$645$16462 (begin (quote #f) ((lambda (r$645$16464) (if r$645$16464 (begin (quote #f) (append q$645$16462 r$645$16464)) (quote #f))) ((lambda (x$645$16466) (if (syntax-pair?$645$12194 x$645$16466) (begin (quote #f) ((lambda (q$645$16468) (if q$645$16468 (begin (quote #f) ((lambda (r$645$16470) (if r$645$16470 (begin (quote #f) (append q$645$16468 r$645$16470)) (quote #f))) ((lambda (x$645$16472) (if (equal? (stx->datum$645$12228 x$645$16472) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16466)))) (quote #f))) ((lambda (x$645$16474) (if (equal? (stx->datum$645$12228 x$645$16474) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$645$12202 x$645$16466)))) (quote #f))) (syntax-cdr$645$12206 x$645$16460)))) (quote #f))) ((lambda (x$645$16476) (if (id?$645$12208 x$645$16476) (if (free-id=?$645$12216 x$645$16476 (scheme-stx$645$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16460)))) (quote #f))) t$645$16450))) y$645$16441) ((lambda (t$645$16478) ((lambda (ls/false$645$16480) (if (if ls/false$645$16480 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16480)) (quote #f)) (apply (lambda () (f$645$16446 (cdr x$645$16448))) ls/false$645$16480) ((lambda (t$645$16482) ((lambda (ls/false$645$16484) (if (if ls/false$645$16484 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16484)) (quote #f)) (apply (lambda () (cons (car x$645$16448) (f$645$16446 (cdr x$645$16448)))) ls/false$645$16484) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16482 (quote ()))))) ((lambda (x$645$16486) (quote ())) t$645$16482))) t$645$16478))) ((lambda (x$645$16488) (if (syntax-pair?$645$12194 x$645$16488) (begin (quote #f) ((lambda (q$645$16490) (if q$645$16490 (begin (quote #f) ((lambda (r$645$16492) (if r$645$16492 (begin (quote #f) (append q$645$16490 r$645$16492)) (quote #f))) ((lambda (x$645$16494) (if (syntax-pair?$645$12194 x$645$16494) (begin (quote #f) ((lambda (q$645$16496) (if q$645$16496 (begin (quote #f) ((lambda (r$645$16498) (if r$645$16498 (begin (quote #f) (append q$645$16496 r$645$16498)) (quote #f))) ((lambda (x$645$16500) (if (equal? (stx->datum$645$12228 x$645$16500) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16494)))) (quote #f))) ((lambda (x$645$16502) (if (equal? (stx->datum$645$12228 x$645$16502) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$645$12202 x$645$16494)))) (quote #f))) (syntax-cdr$645$12206 x$645$16488)))) (quote #f))) ((lambda (x$645$16504) (if (id?$645$12208 x$645$16504) (if (free-id=?$645$12216 x$645$16504 (scheme-stx$645$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16488)))) (quote #f))) t$645$16478))) (car x$645$16448)))))) (f$645$16446 x$645$16440))))) (set! quasivector$645$15996 (lambda (x$645$16280) ((lambda (pat-x$645$16282) ((lambda (t$645$16284) ((lambda (ls/false$645$16286) (if (if ls/false$645$16286 (begin (quote #f) (apply (lambda (x*$645$16288) (quote #t)) ls/false$645$16286)) (quote #f)) (apply (lambda (x*$645$16290) (list (scheme-stx$645$12638 (quote quote)) (list->vector x*$645$16290))) ls/false$645$16286) ((lambda (t$645$16292) ((lambda (ls/false$645$16294) (if (if ls/false$645$16294 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16294)) (quote #f)) (apply (lambda () (letrec ((f$645$16296 (lambda (x$645$16300 k$645$16301) ((lambda (t$645$16304) ((lambda (ls/false$645$16306) (if (if ls/false$645$16306 (begin (quote #f) (apply (lambda (x*$645$16308) (quote #t)) ls/false$645$16306)) (quote #f)) (apply (lambda (x*$645$16310) (k$645$16301 (map (lambda (x$645$16312) (list (scheme-stx$645$12638 (quote quote)) x$645$16312)) x*$645$16310))) ls/false$645$16306) ((lambda (t$645$16314) ((lambda (ls/false$645$16316) (if (if ls/false$645$16316 (begin (quote #f) (apply (lambda (x*$645$16318) (quote #t)) ls/false$645$16316)) (quote #f)) (apply (lambda (x*$645$16320) (k$645$16301 x*$645$16320)) ls/false$645$16316) ((lambda (t$645$16322) ((lambda (ls/false$645$16324) (if (if ls/false$645$16324 (begin (quote #f) (apply (lambda (x$645$16326 y$645$16327) (quote #t)) ls/false$645$16324)) (quote #f)) (apply (lambda (x$645$16330 y$645$16331) (f$645$16296 y$645$16331 (lambda (ls$645$16334) (k$645$16301 (cons x$645$16330 ls$645$16334))))) ls/false$645$16324) ((lambda (t$645$16336) ((lambda (ls/false$645$16338) (if (if ls/false$645$16338 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16338)) (quote #f)) (apply (lambda () (list (scheme-stx$645$12638 (quote list->vector)) pat-x$645$16282)) ls/false$645$16338) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16336 (quote ()))))) ((lambda (x$645$16340) (quote ())) t$645$16336))) t$645$16322))) ((lambda (x$645$16342) (if (syntax-pair?$645$12194 x$645$16342) (begin (quote #f) ((lambda (q$645$16344) (if q$645$16344 (begin (quote #f) ((lambda (r$645$16346) (if r$645$16346 (begin (quote #f) (append q$645$16344 r$645$16346)) (quote #f))) ((lambda (x$645$16348) (if (syntax-pair?$645$12194 x$645$16348) (begin (quote #f) ((lambda (q$645$16350) (if q$645$16350 (begin (quote #f) ((lambda (r$645$16352) (if r$645$16352 (begin (quote #f) (append q$645$16350 r$645$16352)) (quote #f))) ((lambda (x$645$16354) (if (syntax-pair?$645$12194 x$645$16354) (begin (quote #f) ((lambda (q$645$16356) (if q$645$16356 (begin (quote #f) ((lambda (r$645$16358) (if r$645$16358 (begin (quote #f) (append q$645$16356 r$645$16358)) (quote #f))) ((lambda (x$645$16360) (if (equal? (stx->datum$645$12228 x$645$16360) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16354)))) (quote #f))) ((lambda (x$645$16362) (list x$645$16362)) (syntax-car$645$12202 x$645$16354)))) (quote #f))) (syntax-cdr$645$12206 x$645$16348)))) (quote #f))) ((lambda (x$645$16364) (list x$645$16364)) (syntax-car$645$12202 x$645$16348)))) (quote #f))) (syntax-cdr$645$12206 x$645$16342)))) (quote #f))) ((lambda (x$645$16366) (if (id?$645$12208 x$645$16366) (if (free-id=?$645$12216 x$645$16366 (scheme-stx$645$12638 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16342)))) (quote #f))) t$645$16322))) t$645$16314))) ((lambda (x$645$16368) (if (syntax-pair?$645$12194 x$645$16368) (begin (quote #f) ((lambda (q$645$16370) (if q$645$16370 (begin (quote #f) ((lambda (r$645$16372) (if r$645$16372 (begin (quote #f) (append q$645$16370 r$645$16372)) (quote #f))) ((letrec ((f$645$16374 (lambda (x$645$16376) (if (syntax-pair?$645$12194 x$645$16376) ((lambda (cars/f$645$16378) (if cars/f$645$16378 (begin (quote #f) ((lambda (cdrs/f$645$16380) (if cdrs/f$645$16380 (begin (quote #f) (map cons cars/f$645$16378 cdrs/f$645$16380)) (quote #f))) (f$645$16374 (syntax-cdr$645$12206 x$645$16376)))) (quote #f))) ((lambda (x$645$16382) (list x$645$16382)) (syntax-car$645$12202 x$645$16376))) (if (syntax-null?$645$12198 x$645$16376) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$16374) (syntax-cdr$645$12206 x$645$16368)))) (quote #f))) ((lambda (x$645$16384) (if (id?$645$12208 x$645$16384) (if (free-id=?$645$12216 x$645$16384 (scheme-stx$645$12638 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16368)))) (quote #f))) t$645$16314))) t$645$16304))) ((lambda (x$645$16386) (if (syntax-pair?$645$12194 x$645$16386) (begin (quote #f) ((lambda (q$645$16388) (if q$645$16388 (begin (quote #f) ((lambda (r$645$16390) (if r$645$16390 (begin (quote #f) (append q$645$16388 r$645$16390)) (quote #f))) ((lambda (x$645$16392) (if (syntax-pair?$645$12194 x$645$16392) (begin (quote #f) ((lambda (q$645$16394) (if q$645$16394 (begin (quote #f) ((lambda (r$645$16396) (if r$645$16396 (begin (quote #f) (append q$645$16394 r$645$16396)) (quote #f))) ((lambda (x$645$16398) (if (equal? (stx->datum$645$12228 x$645$16398) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16392)))) (quote #f))) ((letrec ((f$645$16400 (lambda (x$645$16402) (if (syntax-pair?$645$12194 x$645$16402) ((lambda (cars/f$645$16404) (if cars/f$645$16404 (begin (quote #f) ((lambda (cdrs/f$645$16406) (if cdrs/f$645$16406 (begin (quote #f) (map cons cars/f$645$16404 cdrs/f$645$16406)) (quote #f))) (f$645$16400 (syntax-cdr$645$12206 x$645$16402)))) (quote #f))) ((lambda (x$645$16408) (list x$645$16408)) (syntax-car$645$12202 x$645$16402))) (if (syntax-null?$645$12198 x$645$16402) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$16400) (syntax-car$645$12202 x$645$16392)))) (quote #f))) (syntax-cdr$645$12206 x$645$16386)))) (quote #f))) ((lambda (x$645$16410) (if (id?$645$12208 x$645$16410) (if (free-id=?$645$12216 x$645$16410 (scheme-stx$645$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16386)))) (quote #f))) t$645$16304))) x$645$16300)))) (f$645$16296 x$645$16280 (lambda (ls$645$16298) (cons* (scheme-stx$645$12638 (quote vector)) ls$645$16298))))) ls/false$645$16294) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16292 (quote ()))))) ((lambda (x$645$16412) (quote ())) t$645$16292))) t$645$16284))) ((lambda (x$645$16414) (if (syntax-pair?$645$12194 x$645$16414) (begin (quote #f) ((lambda (q$645$16416) (if q$645$16416 (begin (quote #f) ((lambda (r$645$16418) (if r$645$16418 (begin (quote #f) (append q$645$16416 r$645$16418)) (quote #f))) ((lambda (x$645$16420) (if (syntax-pair?$645$12194 x$645$16420) (begin (quote #f) ((lambda (q$645$16422) (if q$645$16422 (begin (quote #f) ((lambda (r$645$16424) (if r$645$16424 (begin (quote #f) (append q$645$16422 r$645$16424)) (quote #f))) ((lambda (x$645$16426) (if (equal? (stx->datum$645$12228 x$645$16426) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16420)))) (quote #f))) ((letrec ((f$645$16428 (lambda (x$645$16430) (if (syntax-pair?$645$12194 x$645$16430) ((lambda (cars/f$645$16432) (if cars/f$645$16432 (begin (quote #f) ((lambda (cdrs/f$645$16434) (if cdrs/f$645$16434 (begin (quote #f) (map cons cars/f$645$16432 cdrs/f$645$16434)) (quote #f))) (f$645$16428 (syntax-cdr$645$12206 x$645$16430)))) (quote #f))) ((lambda (x$645$16436) (list x$645$16436)) (syntax-car$645$12202 x$645$16430))) (if (syntax-null?$645$12198 x$645$16430) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$16428) (syntax-car$645$12202 x$645$16420)))) (quote #f))) (syntax-cdr$645$12206 x$645$16414)))) (quote #f))) ((lambda (x$645$16438) (if (id?$645$12208 x$645$16438) (if (free-id=?$645$12216 x$645$16438 (scheme-stx$645$12638 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16414)))) (quote #f))) t$645$16284))) pat-x$645$16282)) x$645$16280))) (set! vquasi$645$15998 (lambda (p$645$16186 lev$645$16187) ((lambda (t$645$16190) ((lambda (ls/false$645$16192) (if (if ls/false$645$16192 (begin (quote #f) (apply (lambda (p$645$16194 q$645$16195) (quote #t)) ls/false$645$16192)) (quote #f)) (apply (lambda (p$645$16198 q$645$16199) ((lambda (t$645$16202) ((lambda (ls/false$645$16204) (if (if ls/false$645$16204 (begin (quote #f) (apply (lambda (p$645$16206) (quote #t)) ls/false$645$16204)) (quote #f)) (apply (lambda (p$645$16208) (if (= lev$645$16187 (quote 0)) (quasicons*$645$15990 p$645$16208 (vquasi$645$15998 q$645$16199 lev$645$16187)) (quasicons$645$15992 (quasicons$645$15992 (list (scheme-stx$645$12638 (quote quote)) (quote unquote)) (quasi$645$16000 p$645$16208 (- lev$645$16187 (quote 1)))) (vquasi$645$15998 q$645$16199 lev$645$16187)))) ls/false$645$16204) ((lambda (t$645$16210) ((lambda (ls/false$645$16212) (if (if ls/false$645$16212 (begin (quote #f) (apply (lambda (p$645$16214) (quote #t)) ls/false$645$16212)) (quote #f)) (apply (lambda (p$645$16216) (if (= lev$645$16187 (quote 0)) (quasiappend$645$15994 p$645$16216 (vquasi$645$15998 q$645$16199 lev$645$16187)) (quasicons$645$15992 (quasicons$645$15992 (list (scheme-stx$645$12638 (quote quote)) (quote unquote-splicing)) (quasi$645$16000 p$645$16216 (- lev$645$16187 (quote 1)))) (vquasi$645$15998 q$645$16199 lev$645$16187)))) ls/false$645$16212) ((lambda (t$645$16218) ((lambda (ls/false$645$16220) (if (if ls/false$645$16220 (begin (quote #f) (apply (lambda (p$645$16222) (quote #t)) ls/false$645$16220)) (quote #f)) (apply (lambda (p$645$16224) (quasicons$645$15992 (quasi$645$16000 p$645$16224 lev$645$16187) (vquasi$645$15998 q$645$16199 lev$645$16187))) ls/false$645$16220) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16218 (quote ()))))) ((lambda (x$645$16226) (list x$645$16226)) t$645$16218))) t$645$16210))) ((lambda (x$645$16228) (if (syntax-pair?$645$12194 x$645$16228) (begin (quote #f) ((lambda (q$645$16230) (if q$645$16230 (begin (quote #f) ((lambda (r$645$16232) (if r$645$16232 (begin (quote #f) (append q$645$16230 r$645$16232)) (quote #f))) ((letrec ((f$645$16234 (lambda (x$645$16236) (if (syntax-pair?$645$12194 x$645$16236) ((lambda (cars/f$645$16238) (if cars/f$645$16238 (begin (quote #f) ((lambda (cdrs/f$645$16240) (if cdrs/f$645$16240 (begin (quote #f) (map cons cars/f$645$16238 cdrs/f$645$16240)) (quote #f))) (f$645$16234 (syntax-cdr$645$12206 x$645$16236)))) (quote #f))) ((lambda (x$645$16242) (list x$645$16242)) (syntax-car$645$12202 x$645$16236))) (if (syntax-null?$645$12198 x$645$16236) (list (begin (quote p) (quote ()))) (quote #f)))))) f$645$16234) (syntax-cdr$645$12206 x$645$16228)))) (quote #f))) ((lambda (x$645$16244) (if (id?$645$12208 x$645$16244) (if (free-id=?$645$12216 x$645$16244 (scheme-stx$645$12638 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16228)))) (quote #f))) t$645$16210))) t$645$16202))) ((lambda (x$645$16246) (if (syntax-pair?$645$12194 x$645$16246) (begin (quote #f) ((lambda (q$645$16248) (if q$645$16248 (begin (quote #f) ((lambda (r$645$16250) (if r$645$16250 (begin (quote #f) (append q$645$16248 r$645$16250)) (quote #f))) ((letrec ((f$645$16252 (lambda (x$645$16254) (if (syntax-pair?$645$12194 x$645$16254) ((lambda (cars/f$645$16256) (if cars/f$645$16256 (begin (quote #f) ((lambda (cdrs/f$645$16258) (if cdrs/f$645$16258 (begin (quote #f) (map cons cars/f$645$16256 cdrs/f$645$16258)) (quote #f))) (f$645$16252 (syntax-cdr$645$12206 x$645$16254)))) (quote #f))) ((lambda (x$645$16260) (list x$645$16260)) (syntax-car$645$12202 x$645$16254))) (if (syntax-null?$645$12198 x$645$16254) (list (begin (quote p) (quote ()))) (quote #f)))))) f$645$16252) (syntax-cdr$645$12206 x$645$16246)))) (quote #f))) ((lambda (x$645$16262) (if (id?$645$12208 x$645$16262) (if (free-id=?$645$12216 x$645$16262 (scheme-stx$645$12638 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16246)))) (quote #f))) t$645$16202))) p$645$16198)) ls/false$645$16192) ((lambda (t$645$16264) ((lambda (ls/false$645$16266) (if (if ls/false$645$16266 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16266)) (quote #f)) (apply (lambda () (list (scheme-stx$645$12638 (quote quote)) (quote ()))) ls/false$645$16266) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16264 (quote ()))))) ((lambda (x$645$16268) (if (equal? (stx->datum$645$12228 x$645$16268) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$645$16264))) t$645$16190))) ((lambda (x$645$16270) (if (syntax-pair?$645$12194 x$645$16270) (begin (quote #f) ((lambda (q$645$16272) (if q$645$16272 (begin (quote #f) ((lambda (r$645$16274) (if r$645$16274 (begin (quote #f) (append q$645$16272 r$645$16274)) (quote #f))) ((lambda (x$645$16276) (list x$645$16276)) (syntax-cdr$645$12206 x$645$16270)))) (quote #f))) ((lambda (x$645$16278) (list x$645$16278)) (syntax-car$645$12202 x$645$16270)))) (quote #f))) t$645$16190))) p$645$16186))) (set! quasi$645$16000 (lambda (p$645$16002 lev$645$16003) ((lambda (t$645$16006) ((lambda (ls/false$645$16008) (if (if ls/false$645$16008 (begin (quote #f) (apply (lambda (p$645$16010) (quote #t)) ls/false$645$16008)) (quote #f)) (apply (lambda (p$645$16012) (if (= lev$645$16003 (quote 0)) p$645$16012 (quasicons$645$15992 (list (scheme-stx$645$12638 (quote quote)) (quote unquote)) (quasi$645$16000 (list p$645$16012) (- lev$645$16003 (quote 1)))))) ls/false$645$16008) ((lambda (t$645$16014) ((lambda (ls/false$645$16016) (if (if ls/false$645$16016 (begin (quote #f) (apply (lambda (p$645$16018 q$645$16019) (quote #t)) ls/false$645$16016)) (quote #f)) (apply (lambda (p$645$16022 q$645$16023) (if (= lev$645$16003 (quote 0)) (quasicons*$645$15990 p$645$16022 (quasi$645$16000 q$645$16023 lev$645$16003)) (quasicons$645$15992 (quasicons$645$15992 (list (scheme-stx$645$12638 (quote quote)) (quote unquote)) (quasi$645$16000 p$645$16022 (- lev$645$16003 (quote 1)))) (quasi$645$16000 q$645$16023 lev$645$16003)))) ls/false$645$16016) ((lambda (t$645$16026) ((lambda (ls/false$645$16028) (if (if ls/false$645$16028 (begin (quote #f) (apply (lambda (p$645$16030 q$645$16031) (quote #t)) ls/false$645$16028)) (quote #f)) (apply (lambda (p$645$16034 q$645$16035) (if (= lev$645$16003 (quote 0)) (quasiappend$645$15994 p$645$16034 (quasi$645$16000 q$645$16035 lev$645$16003)) (quasicons$645$15992 (quasicons$645$15992 (list (scheme-stx$645$12638 (quote quote)) (quote unquote-splicing)) (quasi$645$16000 p$645$16034 (- lev$645$16003 (quote 1)))) (quasi$645$16000 q$645$16035 lev$645$16003)))) ls/false$645$16028) ((lambda (t$645$16038) ((lambda (ls/false$645$16040) (if (if ls/false$645$16040 (begin (quote #f) (apply (lambda (p$645$16042) (quote #t)) ls/false$645$16040)) (quote #f)) (apply (lambda (p$645$16044) (quasicons$645$15992 (list (scheme-stx$645$12638 (quote quote)) (quote quasiquote)) (quasi$645$16000 (list p$645$16044) (+ lev$645$16003 (quote 1))))) ls/false$645$16040) ((lambda (t$645$16046) ((lambda (ls/false$645$16048) (if (if ls/false$645$16048 (begin (quote #f) (apply (lambda (p$645$16050 q$645$16051) (quote #t)) ls/false$645$16048)) (quote #f)) (apply (lambda (p$645$16054 q$645$16055) (quasicons$645$15992 (quasi$645$16000 p$645$16054 lev$645$16003) (quasi$645$16000 q$645$16055 lev$645$16003))) ls/false$645$16048) ((lambda (t$645$16058) ((lambda (ls/false$645$16060) (if (if ls/false$645$16060 (begin (quote #f) (apply (lambda (x$645$16062) (not (stx?$645$12160 x$645$16062))) ls/false$645$16060)) (quote #f)) (apply (lambda (x$645$16064) (quasivector$645$15996 (vquasi$645$15998 x$645$16064 lev$645$16003))) ls/false$645$16060) ((lambda (t$645$16066) ((lambda (ls/false$645$16068) (if (if ls/false$645$16068 (begin (quote #f) (apply (lambda (p$645$16070) (quote #t)) ls/false$645$16068)) (quote #f)) (apply (lambda (p$645$16072) (list (scheme-stx$645$12638 (quote quote)) p$645$16072)) ls/false$645$16068) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16066 (quote ()))))) ((lambda (x$645$16074) (list x$645$16074)) t$645$16066))) t$645$16058))) ((lambda (x$645$16076) (if (syntax-vector?$645$12196 x$645$16076) (begin (quote #f) ((letrec ((f$645$16078 (lambda (x$645$16080) (if (syntax-pair?$645$12194 x$645$16080) ((lambda (cars/f$645$16082) (if cars/f$645$16082 (begin (quote #f) ((lambda (cdrs/f$645$16084) (if cdrs/f$645$16084 (begin (quote #f) (map cons cars/f$645$16082 cdrs/f$645$16084)) (quote #f))) (f$645$16078 (syntax-cdr$645$12206 x$645$16080)))) (quote #f))) ((lambda (x$645$16086) (list x$645$16086)) (syntax-car$645$12202 x$645$16080))) (if (syntax-null?$645$12198 x$645$16080) (list (begin (quote x) (quote ()))) (quote #f)))))) f$645$16078) (syntax-vector->list$645$12192 x$645$16076))) (quote #f))) t$645$16058))) t$645$16046))) ((lambda (x$645$16088) (if (syntax-pair?$645$12194 x$645$16088) (begin (quote #f) ((lambda (q$645$16090) (if q$645$16090 (begin (quote #f) ((lambda (r$645$16092) (if r$645$16092 (begin (quote #f) (append q$645$16090 r$645$16092)) (quote #f))) ((lambda (x$645$16094) (list x$645$16094)) (syntax-cdr$645$12206 x$645$16088)))) (quote #f))) ((lambda (x$645$16096) (list x$645$16096)) (syntax-car$645$12202 x$645$16088)))) (quote #f))) t$645$16046))) t$645$16038))) ((lambda (x$645$16098) (if (syntax-pair?$645$12194 x$645$16098) (begin (quote #f) ((lambda (q$645$16100) (if q$645$16100 (begin (quote #f) ((lambda (r$645$16102) (if r$645$16102 (begin (quote #f) (append q$645$16100 r$645$16102)) (quote #f))) ((lambda (x$645$16104) (if (syntax-pair?$645$12194 x$645$16104) (begin (quote #f) ((lambda (q$645$16106) (if q$645$16106 (begin (quote #f) ((lambda (r$645$16108) (if r$645$16108 (begin (quote #f) (append q$645$16106 r$645$16108)) (quote #f))) ((lambda (x$645$16110) (if (equal? (stx->datum$645$12228 x$645$16110) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16104)))) (quote #f))) ((lambda (x$645$16112) (list x$645$16112)) (syntax-car$645$12202 x$645$16104)))) (quote #f))) (syntax-cdr$645$12206 x$645$16098)))) (quote #f))) ((lambda (x$645$16114) (if (id?$645$12208 x$645$16114) (if (free-id=?$645$12216 x$645$16114 (scheme-stx$645$12638 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16098)))) (quote #f))) t$645$16038))) t$645$16026))) ((lambda (x$645$16116) (if (syntax-pair?$645$12194 x$645$16116) (begin (quote #f) ((lambda (q$645$16118) (if q$645$16118 (begin (quote #f) ((lambda (r$645$16120) (if r$645$16120 (begin (quote #f) (append q$645$16118 r$645$16120)) (quote #f))) ((lambda (x$645$16122) (list x$645$16122)) (syntax-cdr$645$12206 x$645$16116)))) (quote #f))) ((lambda (x$645$16124) (if (syntax-pair?$645$12194 x$645$16124) (begin (quote #f) ((lambda (q$645$16126) (if q$645$16126 (begin (quote #f) ((lambda (r$645$16128) (if r$645$16128 (begin (quote #f) (append q$645$16126 r$645$16128)) (quote #f))) ((letrec ((f$645$16130 (lambda (x$645$16132) (if (syntax-pair?$645$12194 x$645$16132) ((lambda (cars/f$645$16134) (if cars/f$645$16134 (begin (quote #f) ((lambda (cdrs/f$645$16136) (if cdrs/f$645$16136 (begin (quote #f) (map cons cars/f$645$16134 cdrs/f$645$16136)) (quote #f))) (f$645$16130 (syntax-cdr$645$12206 x$645$16132)))) (quote #f))) ((lambda (x$645$16138) (list x$645$16138)) (syntax-car$645$12202 x$645$16132))) (if (syntax-null?$645$12198 x$645$16132) (list (begin (quote p) (quote ()))) (quote #f)))))) f$645$16130) (syntax-cdr$645$12206 x$645$16124)))) (quote #f))) ((lambda (x$645$16140) (if (id?$645$12208 x$645$16140) (if (free-id=?$645$12216 x$645$16140 (scheme-stx$645$12638 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16124)))) (quote #f))) (syntax-car$645$12202 x$645$16116)))) (quote #f))) t$645$16026))) t$645$16014))) ((lambda (x$645$16142) (if (syntax-pair?$645$12194 x$645$16142) (begin (quote #f) ((lambda (q$645$16144) (if q$645$16144 (begin (quote #f) ((lambda (r$645$16146) (if r$645$16146 (begin (quote #f) (append q$645$16144 r$645$16146)) (quote #f))) ((lambda (x$645$16148) (list x$645$16148)) (syntax-cdr$645$12206 x$645$16142)))) (quote #f))) ((lambda (x$645$16150) (if (syntax-pair?$645$12194 x$645$16150) (begin (quote #f) ((lambda (q$645$16152) (if q$645$16152 (begin (quote #f) ((lambda (r$645$16154) (if r$645$16154 (begin (quote #f) (append q$645$16152 r$645$16154)) (quote #f))) ((letrec ((f$645$16156 (lambda (x$645$16158) (if (syntax-pair?$645$12194 x$645$16158) ((lambda (cars/f$645$16160) (if cars/f$645$16160 (begin (quote #f) ((lambda (cdrs/f$645$16162) (if cdrs/f$645$16162 (begin (quote #f) (map cons cars/f$645$16160 cdrs/f$645$16162)) (quote #f))) (f$645$16156 (syntax-cdr$645$12206 x$645$16158)))) (quote #f))) ((lambda (x$645$16164) (list x$645$16164)) (syntax-car$645$12202 x$645$16158))) (if (syntax-null?$645$12198 x$645$16158) (list (begin (quote p) (quote ()))) (quote #f)))))) f$645$16156) (syntax-cdr$645$12206 x$645$16150)))) (quote #f))) ((lambda (x$645$16166) (if (id?$645$12208 x$645$16166) (if (free-id=?$645$12216 x$645$16166 (scheme-stx$645$12638 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16150)))) (quote #f))) (syntax-car$645$12202 x$645$16142)))) (quote #f))) t$645$16014))) t$645$16006))) ((lambda (x$645$16168) (if (syntax-pair?$645$12194 x$645$16168) (begin (quote #f) ((lambda (q$645$16170) (if q$645$16170 (begin (quote #f) ((lambda (r$645$16172) (if r$645$16172 (begin (quote #f) (append q$645$16170 r$645$16172)) (quote #f))) ((lambda (x$645$16174) (if (syntax-pair?$645$12194 x$645$16174) (begin (quote #f) ((lambda (q$645$16176) (if q$645$16176 (begin (quote #f) ((lambda (r$645$16178) (if r$645$16178 (begin (quote #f) (append q$645$16176 r$645$16178)) (quote #f))) ((lambda (x$645$16180) (if (equal? (stx->datum$645$12228 x$645$16180) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16174)))) (quote #f))) ((lambda (x$645$16182) (list x$645$16182)) (syntax-car$645$12202 x$645$16174)))) (quote #f))) (syntax-cdr$645$12206 x$645$16168)))) (quote #f))) ((lambda (x$645$16184) (if (id?$645$12208 x$645$16184) (if (free-id=?$645$12216 x$645$16184 (scheme-stx$645$12638 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16168)))) (quote #f))) t$645$16006))) p$645$16002))) (lambda (x$645$16620) ((lambda (t$645$16622) ((lambda (ls/false$645$16624) (if (if ls/false$645$16624 (begin (quote #f) (apply (lambda (e$645$16626) (quote #t)) ls/false$645$16624)) (quote #f)) (apply (lambda (e$645$16628) (quasi$645$16000 e$645$16628 (quote 0))) ls/false$645$16624) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16622 (quote ()))))) ((lambda (x$645$16630) (if (syntax-pair?$645$12194 x$645$16630) (begin (quote #f) ((lambda (q$645$16632) (if q$645$16632 (begin (quote #f) ((lambda (r$645$16634) (if r$645$16634 (begin (quote #f) (append q$645$16632 r$645$16634)) (quote #f))) ((lambda (x$645$16636) (if (syntax-pair?$645$12194 x$645$16636) (begin (quote #f) ((lambda (q$645$16638) (if q$645$16638 (begin (quote #f) ((lambda (r$645$16640) (if r$645$16640 (begin (quote #f) (append q$645$16638 r$645$16640)) (quote #f))) ((lambda (x$645$16642) (if (equal? (stx->datum$645$12228 x$645$16642) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16636)))) (quote #f))) ((lambda (x$645$16644) (list x$645$16644)) (syntax-car$645$12202 x$645$16636)))) (quote #f))) (syntax-cdr$645$12206 x$645$16630)))) (quote #f))) ((lambda (x$645$16646) (quote ())) (syntax-car$645$12202 x$645$16630)))) (quote #f))) t$645$16622))) x$645$16620)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! quasisyntax-macro$645$12704 ((lambda () ((lambda (quasi$645$16648) (begin (set! quasi$645$16648 (lambda (p$645$16650 lev$645$16651) ((lambda (t$645$16654) ((lambda (ls/false$645$16656) (if (if ls/false$645$16656 (begin (quote #f) (apply (lambda (p$645$16658) (quote #t)) ls/false$645$16656)) (quote #f)) (apply (lambda (p$645$16660) (if (= lev$645$16651 (quote 0)) ((lambda (g$645$16662) (values (list g$645$16662) (list p$645$16660) g$645$16662)) (gensym)) (call-with-values (lambda () (quasi$645$16648 p$645$16660 (- lev$645$16651 (quote 1)))) (lambda (lhs*$645$16664 rhs*$645$16665 p$645$16666) (values lhs*$645$16664 rhs*$645$16665 (list (quote unsyntax) p$645$16666)))))) ls/false$645$16656) ((lambda (t$645$16670) ((lambda (ls/false$645$16672) (if (if ls/false$645$16672 (begin (quote #f) (apply (lambda () (= lev$645$16651 (quote 0))) ls/false$645$16672)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax") (strip$645$12226 p$645$16650 (quote ())))) ls/false$645$16672) ((lambda (t$645$16674) ((lambda (ls/false$645$16676) (if (if ls/false$645$16676 (begin (quote #f) (apply (lambda (p$645$16678 q$645$16679) (quote #t)) ls/false$645$16676)) (quote #f)) (apply (lambda (p$645$16682 q$645$16683) (call-with-values (lambda () (quasi$645$16648 q$645$16683 lev$645$16651)) (lambda (lhs*$645$16686 rhs*$645$16687 q$645$16688) (if (= lev$645$16651 (quote 0)) ((lambda (g$645$16692) (values (cons (cons g$645$16692 (quote (...))) lhs*$645$16686) (cons p$645$16682 rhs*$645$16687) (cons g$645$16692 (cons (quote ...) q$645$16688)))) (gensym)) (call-with-values (lambda () (quasi$645$16648 p$645$16682 (- lev$645$16651 (quote 1)))) (lambda (lhs2*$645$16694 rhs2*$645$16695 p$645$16696) (values (append lhs2*$645$16694 lhs*$645$16686) (append rhs2*$645$16695 rhs*$645$16687) (cons (list (quote unsyntax-splicing) p$645$16696) q$645$16688)))))))) ls/false$645$16676) ((lambda (t$645$16700) ((lambda (ls/false$645$16702) (if (if ls/false$645$16702 (begin (quote #f) (apply (lambda () (= lev$645$16651 (quote 0))) ls/false$645$16702)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax-splicing") (strip$645$12226 p$645$16650 (quote ())))) ls/false$645$16702) ((lambda (t$645$16704) ((lambda (ls/false$645$16706) (if (if ls/false$645$16706 (begin (quote #f) (apply (lambda (p$645$16708) (quote #t)) ls/false$645$16706)) (quote #f)) (apply (lambda (p$645$16710) (call-with-values (lambda () (quasi$645$16648 p$645$16710 (+ lev$645$16651 (quote 1)))) (lambda (lhs*$645$16712 rhs*$645$16713 p$645$16714) (values lhs*$645$16712 rhs*$645$16713 (list (quote quasisyntax) p$645$16714))))) ls/false$645$16706) ((lambda (t$645$16718) ((lambda (ls/false$645$16720) (if (if ls/false$645$16720 (begin (quote #f) (apply (lambda (p$645$16722 q$645$16723) (quote #t)) ls/false$645$16720)) (quote #f)) (apply (lambda (p$645$16726 q$645$16727) (call-with-values (lambda () (quasi$645$16648 p$645$16726 lev$645$16651)) (lambda (lhs*$645$16730 rhs*$645$16731 p$645$16732) (call-with-values (lambda () (quasi$645$16648 q$645$16727 lev$645$16651)) (lambda (lhs2*$645$16733 rhs2*$645$16734 q$645$16735) (values (append lhs2*$645$16733 lhs*$645$16730) (append rhs2*$645$16734 rhs*$645$16731) (cons p$645$16732 q$645$16735))))))) ls/false$645$16720) ((lambda (t$645$16742) ((lambda (ls/false$645$16744) (if (if ls/false$645$16744 (begin (quote #f) (apply (lambda (x$645$16746) (not (stx?$645$12160 p$645$16650))) ls/false$645$16744)) (quote #f)) (apply (lambda (x$645$16748) (call-with-values (lambda () (letrec ((f$645$16750 (lambda (x$645$16752) (if (null? x$645$16752) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (quasi$645$16648 (car x$645$16752) lev$645$16651)) (lambda (lhs*$645$16754 rhs*$645$16755 a$645$16756) (call-with-values (lambda () (f$645$16750 (cdr x$645$16752))) (lambda (lhs2*$645$16760 rhs2*$645$16761 d$645$16762) (values (append lhs*$645$16754 lhs2*$645$16760) (append rhs*$645$16755 rhs2*$645$16761) (cons a$645$16756 d$645$16762)))))))))) (f$645$16750 x$645$16748))) (lambda (lhs*$645$16766 rhs*$645$16767 x*$645$16768) (values lhs*$645$16766 rhs*$645$16767 (list->vector x*$645$16768))))) ls/false$645$16744) ((lambda (t$645$16772) ((lambda (ls/false$645$16774) (if (if ls/false$645$16774 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$16774)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) p$645$16650)) ls/false$645$16774) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16772 (quote ()))))) ((lambda (x$645$16776) (quote ())) t$645$16772))) t$645$16742))) ((lambda (x$645$16778) (if (syntax-vector?$645$12196 x$645$16778) (begin (quote #f) ((letrec ((f$645$16780 (lambda (x$645$16782) (if (syntax-pair?$645$12194 x$645$16782) ((lambda (cars/f$645$16784) (if cars/f$645$16784 (begin (quote #f) ((lambda (cdrs/f$645$16786) (if cdrs/f$645$16786 (begin (quote #f) (map cons cars/f$645$16784 cdrs/f$645$16786)) (quote #f))) (f$645$16780 (syntax-cdr$645$12206 x$645$16782)))) (quote #f))) ((lambda (x$645$16788) (list x$645$16788)) (syntax-car$645$12202 x$645$16782))) (if (syntax-null?$645$12198 x$645$16782) (list (begin (quote x) (quote ()))) (quote #f)))))) f$645$16780) (syntax-vector->list$645$12192 x$645$16778))) (quote #f))) t$645$16742))) t$645$16718))) ((lambda (x$645$16790) (if (syntax-pair?$645$12194 x$645$16790) (begin (quote #f) ((lambda (q$645$16792) (if q$645$16792 (begin (quote #f) ((lambda (r$645$16794) (if r$645$16794 (begin (quote #f) (append q$645$16792 r$645$16794)) (quote #f))) ((lambda (x$645$16796) (list x$645$16796)) (syntax-cdr$645$12206 x$645$16790)))) (quote #f))) ((lambda (x$645$16798) (list x$645$16798)) (syntax-car$645$12202 x$645$16790)))) (quote #f))) t$645$16718))) t$645$16704))) ((lambda (x$645$16800) (if (syntax-pair?$645$12194 x$645$16800) (begin (quote #f) ((lambda (q$645$16802) (if q$645$16802 (begin (quote #f) ((lambda (r$645$16804) (if r$645$16804 (begin (quote #f) (append q$645$16802 r$645$16804)) (quote #f))) ((lambda (x$645$16806) (if (syntax-pair?$645$12194 x$645$16806) (begin (quote #f) ((lambda (q$645$16808) (if q$645$16808 (begin (quote #f) ((lambda (r$645$16810) (if r$645$16810 (begin (quote #f) (append q$645$16808 r$645$16810)) (quote #f))) ((lambda (x$645$16812) (if (equal? (stx->datum$645$12228 x$645$16812) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16806)))) (quote #f))) ((lambda (x$645$16814) (list x$645$16814)) (syntax-car$645$12202 x$645$16806)))) (quote #f))) (syntax-cdr$645$12206 x$645$16800)))) (quote #f))) ((lambda (x$645$16816) (if (id?$645$12208 x$645$16816) (if (free-id=?$645$12216 x$645$16816 (scheme-stx$645$12638 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16800)))) (quote #f))) t$645$16704))) t$645$16700))) ((lambda (x$645$16818) (if (id?$645$12208 x$645$16818) (if (free-id=?$645$12216 x$645$16818 (scheme-stx$645$12638 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) t$645$16700))) t$645$16674))) ((lambda (x$645$16820) (if (syntax-pair?$645$12194 x$645$16820) (begin (quote #f) ((lambda (q$645$16822) (if q$645$16822 (begin (quote #f) ((lambda (r$645$16824) (if r$645$16824 (begin (quote #f) (append q$645$16822 r$645$16824)) (quote #f))) ((lambda (x$645$16826) (list x$645$16826)) (syntax-cdr$645$12206 x$645$16820)))) (quote #f))) ((lambda (x$645$16828) (if (syntax-pair?$645$12194 x$645$16828) (begin (quote #f) ((lambda (q$645$16830) (if q$645$16830 (begin (quote #f) ((lambda (r$645$16832) (if r$645$16832 (begin (quote #f) (append q$645$16830 r$645$16832)) (quote #f))) ((lambda (x$645$16834) (if (syntax-pair?$645$12194 x$645$16834) (begin (quote #f) ((lambda (q$645$16836) (if q$645$16836 (begin (quote #f) ((lambda (r$645$16838) (if r$645$16838 (begin (quote #f) (append q$645$16836 r$645$16838)) (quote #f))) ((lambda (x$645$16840) (if (equal? (stx->datum$645$12228 x$645$16840) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16834)))) (quote #f))) ((lambda (x$645$16842) (list x$645$16842)) (syntax-car$645$12202 x$645$16834)))) (quote #f))) (syntax-cdr$645$12206 x$645$16828)))) (quote #f))) ((lambda (x$645$16844) (if (id?$645$12208 x$645$16844) (if (free-id=?$645$12216 x$645$16844 (scheme-stx$645$12638 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16828)))) (quote #f))) (syntax-car$645$12202 x$645$16820)))) (quote #f))) t$645$16674))) t$645$16670))) ((lambda (x$645$16846) (if (id?$645$12208 x$645$16846) (if (free-id=?$645$12216 x$645$16846 (scheme-stx$645$12638 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) t$645$16670))) t$645$16654))) ((lambda (x$645$16848) (if (syntax-pair?$645$12194 x$645$16848) (begin (quote #f) ((lambda (q$645$16850) (if q$645$16850 (begin (quote #f) ((lambda (r$645$16852) (if r$645$16852 (begin (quote #f) (append q$645$16850 r$645$16852)) (quote #f))) ((lambda (x$645$16854) (if (syntax-pair?$645$12194 x$645$16854) (begin (quote #f) ((lambda (q$645$16856) (if q$645$16856 (begin (quote #f) ((lambda (r$645$16858) (if r$645$16858 (begin (quote #f) (append q$645$16856 r$645$16858)) (quote #f))) ((lambda (x$645$16860) (if (equal? (stx->datum$645$12228 x$645$16860) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16854)))) (quote #f))) ((lambda (x$645$16862) (list x$645$16862)) (syntax-car$645$12202 x$645$16854)))) (quote #f))) (syntax-cdr$645$12206 x$645$16848)))) (quote #f))) ((lambda (x$645$16864) (if (id?$645$12208 x$645$16864) (if (free-id=?$645$12216 x$645$16864 (scheme-stx$645$12638 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (syntax-car$645$12202 x$645$16848)))) (quote #f))) t$645$16654))) p$645$16650))) (lambda (x$645$16866) ((lambda (t$645$16868) ((lambda (ls/false$645$16870) (if (if ls/false$645$16870 (begin (quote #f) (apply (lambda (e$645$16872) (quote #t)) ls/false$645$16870)) (quote #f)) (apply (lambda (e$645$16874) (call-with-values (lambda () (quasi$645$16648 e$645$16874 (quote 0))) (lambda (lhs*$645$16876 rhs*$645$16877 v$645$16878) (bless$645$12668 (list (quote syntax-case) (cons (quote list) rhs*$645$16877) (quote ()) (list lhs*$645$16876 (list (quote syntax) v$645$16878))))))) ls/false$645$16870) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16868 (quote ()))))) ((lambda (x$645$16882) (if (syntax-pair?$645$12194 x$645$16882) (begin (quote #f) ((lambda (q$645$16884) (if q$645$16884 (begin (quote #f) ((lambda (r$645$16886) (if r$645$16886 (begin (quote #f) (append q$645$16884 r$645$16886)) (quote #f))) ((lambda (x$645$16888) (if (syntax-pair?$645$12194 x$645$16888) (begin (quote #f) ((lambda (q$645$16890) (if q$645$16890 (begin (quote #f) ((lambda (r$645$16892) (if r$645$16892 (begin (quote #f) (append q$645$16890 r$645$16892)) (quote #f))) ((lambda (x$645$16894) (if (equal? (stx->datum$645$12228 x$645$16894) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$16888)))) (quote #f))) ((lambda (x$645$16896) (list x$645$16896)) (syntax-car$645$12202 x$645$16888)))) (quote #f))) (syntax-cdr$645$12206 x$645$16882)))) (quote #f))) ((lambda (x$645$16898) (quote ())) (syntax-car$645$12202 x$645$16882)))) (quote #f))) t$645$16868))) x$645$16866)))) (quote #f))))) (set! define-record-macro$645$12706 (lambda (stx$645$16900) (error (quote expander) (quote "~a ~s") (quote "define-record not supported") (strip$645$12226 stx$645$16900 (quote ()))))) (set! incorrect-usage-macro$645$12708 (lambda (e$645$16902) (error (quote expander) (quote "~a ~s") (quote "incorrect usage of auxilary keyword") (strip$645$12226 e$645$16902 (quote ()))))) (set! parameterize-transformer$645$12710 (lambda (e$645$16904 r$645$16905 mr$645$16906) ((lambda (t$645$16910) ((lambda (ls/false$645$16912) (if (if ls/false$645$16912 (begin (quote #f) (apply (lambda (b$645$16914 b*$645$16915) (quote #t)) ls/false$645$16912)) (quote #f)) (apply (lambda (b$645$16918 b*$645$16919) (chi-internal$645$12756 (cons b$645$16918 b*$645$16919) r$645$16905 mr$645$16906)) ls/false$645$16912) ((lambda (t$645$16922) ((lambda (ls/false$645$16924) (if (if ls/false$645$16924 (begin (quote #f) (apply (lambda (olhs*$645$16926 orhs*$645$16927 b$645$16928 b*$645$16929) (quote #t)) ls/false$645$16924)) (quote #f)) (apply (lambda (olhs*$645$16934 orhs*$645$16935 b$645$16936 b*$645$16937) ((lambda (lhs*$645$16942 rhs*$645$16943 t*$645$16944 swap$645$16945) (build-let$645$12095 (quote #f) (append lhs*$645$16942 rhs*$645$16943) (append (chi-expr*$645$12736 olhs*$645$16934 r$645$16905 mr$645$16906) (chi-expr*$645$12736 orhs*$645$16935 r$645$16905 mr$645$16906)) (build-let$645$12095 (quote #f) (list swap$645$16945) (list (build-lambda$645$12097 (quote #f) (quote ()) (build-sequence$645$12091 (quote #f) (map (lambda (t$645$16950 lhs$645$16951 rhs$645$16952) (build-let$645$12095 (quote #f) (list t$645$16950) (list (list lhs$645$16951)) (build-sequence$645$12091 (quote #f) (list (list lhs$645$16951 rhs$645$16952) (list (quote set!) rhs$645$16952 t$645$16950))))) t*$645$16944 lhs*$645$16942 rhs*$645$16943)))) (list (quote (primitive dynamic-wind)) swap$645$16945 (build-lambda$645$12097 (quote #f) (quote ()) (chi-internal$645$12756 (cons b$645$16936 b*$645$16937) r$645$16905 mr$645$16906)) swap$645$16945)))) (map (lambda (x$645$16956) (gen-lexical$645$12118 (quote lhs))) olhs*$645$16934) (map (lambda (x$645$16958) (gen-lexical$645$12118 (quote rhs))) olhs*$645$16934) (map (lambda (x$645$16960) (gen-lexical$645$12118 (quote t))) olhs*$645$16934) (gen-lexical$645$12118 (quote swap)))) ls/false$645$16924) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$16922 (quote ()))))) ((lambda (x$645$16962) (if (syntax-pair?$645$12194 x$645$16962) (begin (quote #f) ((lambda (q$645$16964) (if q$645$16964 (begin (quote #f) ((lambda (r$645$16966) (if r$645$16966 (begin (quote #f) (append q$645$16964 r$645$16966)) (quote #f))) ((lambda (x$645$16968) (if (syntax-pair?$645$12194 x$645$16968) (begin (quote #f) ((lambda (q$645$16970) (if q$645$16970 (begin (quote #f) ((lambda (r$645$16972) (if r$645$16972 (begin (quote #f) (append q$645$16970 r$645$16972)) (quote #f))) ((lambda (x$645$16974) (if (syntax-pair?$645$12194 x$645$16974) (begin (quote #f) ((lambda (q$645$16976) (if q$645$16976 (begin (quote #f) ((lambda (r$645$16978) (if r$645$16978 (begin (quote #f) (append q$645$16976 r$645$16978)) (quote #f))) ((letrec ((f$645$16980 (lambda (x$645$16982) (if (syntax-pair?$645$12194 x$645$16982) ((lambda (cars/f$645$16984) (if cars/f$645$16984 (begin (quote #f) ((lambda (cdrs/f$645$16986) (if cdrs/f$645$16986 (begin (quote #f) (map cons cars/f$645$16984 cdrs/f$645$16986)) (quote #f))) (f$645$16980 (syntax-cdr$645$12206 x$645$16982)))) (quote #f))) ((lambda (x$645$16988) (list x$645$16988)) (syntax-car$645$12202 x$645$16982))) (if (syntax-null?$645$12198 x$645$16982) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$16980) (syntax-cdr$645$12206 x$645$16974)))) (quote #f))) ((lambda (x$645$16990) (list x$645$16990)) (syntax-car$645$12202 x$645$16974)))) (quote #f))) (syntax-cdr$645$12206 x$645$16968)))) (quote #f))) ((letrec ((f$645$16992 (lambda (x$645$16994) (if (syntax-pair?$645$12194 x$645$16994) ((lambda (cars/f$645$16996) (if cars/f$645$16996 (begin (quote #f) ((lambda (cdrs/f$645$16998) (if cdrs/f$645$16998 (begin (quote #f) (map cons cars/f$645$16996 cdrs/f$645$16998)) (quote #f))) (f$645$16992 (syntax-cdr$645$12206 x$645$16994)))) (quote #f))) ((lambda (x$645$17000) (if (syntax-pair?$645$12194 x$645$17000) (begin (quote #f) ((lambda (q$645$17002) (if q$645$17002 (begin (quote #f) ((lambda (r$645$17004) (if r$645$17004 (begin (quote #f) (append q$645$17002 r$645$17004)) (quote #f))) ((lambda (x$645$17006) (if (syntax-pair?$645$12194 x$645$17006) (begin (quote #f) ((lambda (q$645$17008) (if q$645$17008 (begin (quote #f) ((lambda (r$645$17010) (if r$645$17010 (begin (quote #f) (append q$645$17008 r$645$17010)) (quote #f))) ((lambda (x$645$17012) (if (equal? (stx->datum$645$12228 x$645$17012) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$17006)))) (quote #f))) ((lambda (x$645$17014) (list x$645$17014)) (syntax-car$645$12202 x$645$17006)))) (quote #f))) (syntax-cdr$645$12206 x$645$17000)))) (quote #f))) ((lambda (x$645$17016) (list x$645$17016)) (syntax-car$645$12202 x$645$17000)))) (quote #f))) (syntax-car$645$12202 x$645$16994))) (if (syntax-null?$645$12198 x$645$16994) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) f$645$16992) (syntax-car$645$12202 x$645$16968)))) (quote #f))) (syntax-cdr$645$12206 x$645$16962)))) (quote #f))) ((lambda (x$645$17018) (quote ())) (syntax-car$645$12202 x$645$16962)))) (quote #f))) t$645$16922))) t$645$16910))) ((lambda (x$645$17020) (if (syntax-pair?$645$12194 x$645$17020) (begin (quote #f) ((lambda (q$645$17022) (if q$645$17022 (begin (quote #f) ((lambda (r$645$17024) (if r$645$17024 (begin (quote #f) (append q$645$17022 r$645$17024)) (quote #f))) ((lambda (x$645$17026) (if (syntax-pair?$645$12194 x$645$17026) (begin (quote #f) ((lambda (q$645$17028) (if q$645$17028 (begin (quote #f) ((lambda (r$645$17030) (if r$645$17030 (begin (quote #f) (append q$645$17028 r$645$17030)) (quote #f))) ((lambda (x$645$17032) (if (syntax-pair?$645$12194 x$645$17032) (begin (quote #f) ((lambda (q$645$17034) (if q$645$17034 (begin (quote #f) ((lambda (r$645$17036) (if r$645$17036 (begin (quote #f) (append q$645$17034 r$645$17036)) (quote #f))) ((letrec ((f$645$17038 (lambda (x$645$17040) (if (syntax-pair?$645$12194 x$645$17040) ((lambda (cars/f$645$17042) (if cars/f$645$17042 (begin (quote #f) ((lambda (cdrs/f$645$17044) (if cdrs/f$645$17044 (begin (quote #f) (map cons cars/f$645$17042 cdrs/f$645$17044)) (quote #f))) (f$645$17038 (syntax-cdr$645$12206 x$645$17040)))) (quote #f))) ((lambda (x$645$17046) (list x$645$17046)) (syntax-car$645$12202 x$645$17040))) (if (syntax-null?$645$12198 x$645$17040) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$17038) (syntax-cdr$645$12206 x$645$17032)))) (quote #f))) ((lambda (x$645$17048) (list x$645$17048)) (syntax-car$645$12202 x$645$17032)))) (quote #f))) (syntax-cdr$645$12206 x$645$17026)))) (quote #f))) ((lambda (x$645$17050) (if (equal? (stx->datum$645$12228 x$645$17050) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-car$645$12202 x$645$17026)))) (quote #f))) (syntax-cdr$645$12206 x$645$17020)))) (quote #f))) ((lambda (x$645$17052) (quote ())) (syntax-car$645$12202 x$645$17020)))) (quote #f))) t$645$16910))) e$645$16904))) (set! foreign-call-transformer$645$12712 (lambda (e$645$17054 r$645$17055 mr$645$17056) ((lambda (t$645$17060) ((lambda (ls/false$645$17062) (if (if ls/false$645$17062 (begin (quote #f) (apply (lambda (name$645$17064 arg*$645$17065) (quote #t)) ls/false$645$17062)) (quote #f)) (apply (lambda (name$645$17068 arg*$645$17069) (cons (quote foreign-call) (cons (chi-expr$645$12740 name$645$17068 r$645$17055 mr$645$17056) (chi-expr*$645$12736 arg*$645$17069 r$645$17055 mr$645$17056)))) ls/false$645$17062) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17060 (quote ()))))) ((lambda (x$645$17072) (if (syntax-pair?$645$12194 x$645$17072) (begin (quote #f) ((lambda (q$645$17074) (if q$645$17074 (begin (quote #f) ((lambda (r$645$17076) (if r$645$17076 (begin (quote #f) (append q$645$17074 r$645$17076)) (quote #f))) ((lambda (x$645$17078) (if (syntax-pair?$645$12194 x$645$17078) (begin (quote #f) ((lambda (q$645$17080) (if q$645$17080 (begin (quote #f) ((lambda (r$645$17082) (if r$645$17082 (begin (quote #f) (append q$645$17080 r$645$17082)) (quote #f))) ((letrec ((f$645$17084 (lambda (x$645$17086) (if (syntax-pair?$645$12194 x$645$17086) ((lambda (cars/f$645$17088) (if cars/f$645$17088 (begin (quote #f) ((lambda (cdrs/f$645$17090) (if cdrs/f$645$17090 (begin (quote #f) (map cons cars/f$645$17088 cdrs/f$645$17090)) (quote #f))) (f$645$17084 (syntax-cdr$645$12206 x$645$17086)))) (quote #f))) ((lambda (x$645$17092) (list x$645$17092)) (syntax-car$645$12202 x$645$17086))) (if (syntax-null?$645$12198 x$645$17086) (list (begin (quote arg*) (quote ()))) (quote #f)))))) f$645$17084) (syntax-cdr$645$12206 x$645$17078)))) (quote #f))) ((lambda (x$645$17094) (list x$645$17094)) (syntax-car$645$12202 x$645$17078)))) (quote #f))) (syntax-cdr$645$12206 x$645$17072)))) (quote #f))) ((lambda (x$645$17096) (quote ())) (syntax-car$645$12202 x$645$17072)))) (quote #f))) t$645$17060))) e$645$17054))) (set! convert-pattern$645$12714 (lambda (pattern$645$17098 keys$645$17099) ((lambda (cvt*$645$17102 cvt$645$17104) (begin (set! cvt*$645$17102 (lambda (p*$645$17292 n$645$17293 ids$645$17294) (if (null? p*$645$17292) (values (quote ()) ids$645$17294) (call-with-values (lambda () (cvt*$645$17102 (cdr p*$645$17292) n$645$17293 ids$645$17294)) (lambda (y$645$17298 ids$645$17299) (call-with-values (lambda () (cvt$645$17104 (car p*$645$17292) n$645$17293 ids$645$17299)) (lambda (x$645$17302 ids$645$17303) (values (cons x$645$17302 y$645$17298) ids$645$17303)))))))) (set! cvt$645$17104 (lambda (p$645$17106 n$645$17107 ids$645$17108) ((lambda (t$645$17112) ((lambda (ls/false$645$17114) (if (if ls/false$645$17114 (begin (quote #f) (apply (lambda (id$645$17116) (id?$645$12208 id$645$17116)) ls/false$645$17114)) (quote #f)) (apply (lambda (id$645$17118) (if (bound-id-member?$645$12222 p$645$17106 keys$645$17099) (values (vector (quote free-id) p$645$17106) ids$645$17108) (if (free-id=?$645$12216 p$645$17106 (scheme-stx$645$12638 (quote _))) (values (quote _) ids$645$17108) (values (quote any) (cons (cons p$645$17106 n$645$17107) ids$645$17108))))) ls/false$645$17114) ((lambda (t$645$17120) ((lambda (ls/false$645$17122) (if (if ls/false$645$17122 (begin (quote #f) (apply (lambda (p$645$17124 dots$645$17125) (ellipsis?$645$12718 dots$645$17125)) ls/false$645$17122)) (quote #f)) (apply (lambda (p$645$17128 dots$645$17129) (call-with-values (lambda () (cvt$645$17104 p$645$17128 (+ n$645$17107 (quote 1)) ids$645$17108)) (lambda (p$645$17132 ids$645$17133) (values (if (eq? p$645$17132 (quote any)) (quote each-any) (vector (quote each) p$645$17132)) ids$645$17133)))) ls/false$645$17122) ((lambda (t$645$17136) ((lambda (ls/false$645$17138) (if (if ls/false$645$17138 (begin (quote #f) (apply (lambda (x$645$17140 dots$645$17141 ys$645$17142 z$645$17143) (ellipsis?$645$12718 dots$645$17141)) ls/false$645$17138)) (quote #f)) (apply (lambda (x$645$17148 dots$645$17149 ys$645$17150 z$645$17151) (call-with-values (lambda () (cvt$645$17104 z$645$17151 n$645$17107 ids$645$17108)) (lambda (z$645$17156 ids$645$17157) (call-with-values (lambda () (cvt*$645$17102 ys$645$17150 n$645$17107 ids$645$17157)) (lambda (ys$645$17160 ids$645$17161) (call-with-values (lambda () (cvt$645$17104 x$645$17148 (+ n$645$17107 (quote 1)) ids$645$17161)) (lambda (x$645$17164 ids$645$17165) (values (vector (quote each+) x$645$17164 (reverse ys$645$17160) z$645$17156) ids$645$17165)))))))) ls/false$645$17138) ((lambda (t$645$17168) ((lambda (ls/false$645$17170) (if (if ls/false$645$17170 (begin (quote #f) (apply (lambda (x$645$17172 y$645$17173) (quote #t)) ls/false$645$17170)) (quote #f)) (apply (lambda (x$645$17176 y$645$17177) (call-with-values (lambda () (cvt$645$17104 y$645$17177 n$645$17107 ids$645$17108)) (lambda (y$645$17180 ids$645$17181) (call-with-values (lambda () (cvt$645$17104 x$645$17176 n$645$17107 ids$645$17181)) (lambda (x$645$17184 ids$645$17185) (values (cons x$645$17184 y$645$17180) ids$645$17185)))))) ls/false$645$17170) ((lambda (t$645$17188) ((lambda (ls/false$645$17190) (if (if ls/false$645$17190 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$17190)) (quote #f)) (apply (lambda () (values (quote ()) ids$645$17108)) ls/false$645$17190) ((lambda (t$645$17192) ((lambda (ls/false$645$17194) (if (if ls/false$645$17194 (begin (quote #f) (apply (lambda (p$645$17196) (not (stx?$645$12160 p$645$17196))) ls/false$645$17194)) (quote #f)) (apply (lambda (p$645$17198) (call-with-values (lambda () (cvt$645$17104 p$645$17198 n$645$17107 ids$645$17108)) (lambda (p$645$17200 ids$645$17201) (values (vector (quote vector) p$645$17200) ids$645$17201)))) ls/false$645$17194) ((lambda (t$645$17204) ((lambda (ls/false$645$17206) (if (if ls/false$645$17206 (begin (quote #f) (apply (lambda (datum$645$17208) (quote #t)) ls/false$645$17206)) (quote #f)) (apply (lambda (datum$645$17210) (values (vector (quote atom) (stx->datum$645$12228 datum$645$17210)) ids$645$17108)) ls/false$645$17206) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17204 (quote ()))))) ((lambda (x$645$17212) (list x$645$17212)) t$645$17204))) t$645$17192))) ((lambda (x$645$17214) (if (syntax-vector?$645$12196 x$645$17214) (begin (quote #f) ((letrec ((f$645$17216 (lambda (x$645$17218) (if (syntax-pair?$645$12194 x$645$17218) ((lambda (cars/f$645$17220) (if cars/f$645$17220 (begin (quote #f) ((lambda (cdrs/f$645$17222) (if cdrs/f$645$17222 (begin (quote #f) (map cons cars/f$645$17220 cdrs/f$645$17222)) (quote #f))) (f$645$17216 (syntax-cdr$645$12206 x$645$17218)))) (quote #f))) ((lambda (x$645$17224) (list x$645$17224)) (syntax-car$645$12202 x$645$17218))) (if (syntax-null?$645$12198 x$645$17218) (list (begin (quote p) (quote ()))) (quote #f)))))) f$645$17216) (syntax-vector->list$645$12192 x$645$17214))) (quote #f))) t$645$17192))) t$645$17188))) ((lambda (x$645$17226) (if (equal? (stx->datum$645$12228 x$645$17226) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$645$17188))) t$645$17168))) ((lambda (x$645$17228) (if (syntax-pair?$645$12194 x$645$17228) (begin (quote #f) ((lambda (q$645$17230) (if q$645$17230 (begin (quote #f) ((lambda (r$645$17232) (if r$645$17232 (begin (quote #f) (append q$645$17230 r$645$17232)) (quote #f))) ((lambda (x$645$17234) (list x$645$17234)) (syntax-cdr$645$12206 x$645$17228)))) (quote #f))) ((lambda (x$645$17236) (list x$645$17236)) (syntax-car$645$12202 x$645$17228)))) (quote #f))) t$645$17168))) t$645$17136))) ((lambda (x$645$17238) (if (syntax-pair?$645$12194 x$645$17238) (begin (quote #f) ((lambda (q$645$17240) (if q$645$17240 (begin (quote #f) ((lambda (r$645$17242) (if r$645$17242 (begin (quote #f) (append q$645$17240 r$645$17242)) (quote #f))) ((lambda (x$645$17244) (if (syntax-pair?$645$12194 x$645$17244) (begin (quote #f) ((lambda (q$645$17246) (if q$645$17246 (begin (quote #f) ((lambda (r$645$17248) (if r$645$17248 (begin (quote #f) (append q$645$17246 r$645$17248)) (quote #f))) ((letrec ((f$645$17250 (lambda (x$645$17256) (if (syntax-pair?$645$12194 x$645$17256) ((lambda (cars/f$645$17258) (if cars/f$645$17258 (begin (quote #f) ((lambda (d/f$645$17260) (if d/f$645$17260 (begin (quote #f) (cons (map cons cars/f$645$17258 (car d/f$645$17260)) (cdr d/f$645$17260))) (quote #f))) (f$645$17250 (syntax-cdr$645$12206 x$645$17256)))) (quote #f))) ((lambda (x$645$17262) (list x$645$17262)) (syntax-car$645$12202 x$645$17256))) ((lambda (d$645$17264) (if d$645$17264 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) d$645$17264)) (quote #f))) ((lambda (x$645$17266) (list x$645$17266)) x$645$17256)))))) (lambda (x$645$17252) ((lambda (x$645$17254) (if x$645$17254 (begin (quote #f) (append (car x$645$17254) (cdr x$645$17254))) (quote #f))) (f$645$17250 x$645$17252)))) (syntax-cdr$645$12206 x$645$17244)))) (quote #f))) ((lambda (x$645$17268) (list x$645$17268)) (syntax-car$645$12202 x$645$17244)))) (quote #f))) (syntax-cdr$645$12206 x$645$17238)))) (quote #f))) ((lambda (x$645$17270) (list x$645$17270)) (syntax-car$645$12202 x$645$17238)))) (quote #f))) t$645$17136))) t$645$17120))) ((lambda (x$645$17272) (if (syntax-pair?$645$12194 x$645$17272) (begin (quote #f) ((lambda (q$645$17274) (if q$645$17274 (begin (quote #f) ((lambda (r$645$17276) (if r$645$17276 (begin (quote #f) (append q$645$17274 r$645$17276)) (quote #f))) ((lambda (x$645$17278) (if (syntax-pair?$645$12194 x$645$17278) (begin (quote #f) ((lambda (q$645$17280) (if q$645$17280 (begin (quote #f) ((lambda (r$645$17282) (if r$645$17282 (begin (quote #f) (append q$645$17280 r$645$17282)) (quote #f))) ((lambda (x$645$17284) (if (equal? (stx->datum$645$12228 x$645$17284) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$17278)))) (quote #f))) ((lambda (x$645$17286) (list x$645$17286)) (syntax-car$645$12202 x$645$17278)))) (quote #f))) (syntax-cdr$645$12206 x$645$17272)))) (quote #f))) ((lambda (x$645$17288) (list x$645$17288)) (syntax-car$645$12202 x$645$17272)))) (quote #f))) t$645$17120))) t$645$17112))) ((lambda (x$645$17290) (list x$645$17290)) t$645$17112))) p$645$17106))) (cvt$645$17104 pattern$645$17098 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! syntax-dispatch$645$12716 (lambda (e$645$17306 p$645$17307) ((lambda (stx^$645$17310 match-each$645$17312 match-each+$645$17314 match-each-any$645$17316 match-empty$645$17318 combine$645$17320 match*$645$17322 match$645$17324) (begin (set! stx^$645$17310 (lambda (e$645$17432 m*$645$17433 s*$645$17434) (if (if (null? m*$645$17433) (begin (quote #f) (null? s*$645$17434)) (quote #f)) e$645$17432 (mkstx$645$12184 e$645$17432 m*$645$17433 s*$645$17434)))) (set! match-each$645$17312 (lambda (e$645$17416 p$645$17417 m*$645$17418 s*$645$17419) (if (pair? e$645$17416) ((lambda (first$645$17424) (if first$645$17424 (begin (quote #f) ((lambda (rest$645$17426) (if rest$645$17426 (begin (quote #f) (cons first$645$17424 rest$645$17426)) (quote #f))) (match-each$645$17312 (cdr e$645$17416) p$645$17417 m*$645$17418 s*$645$17419))) (quote #f))) (match$645$17324 (car e$645$17416) p$645$17417 m*$645$17418 s*$645$17419 (quote ()))) (if (null? e$645$17416) (quote ()) (if (stx?$645$12160 e$645$17416) (call-with-values (lambda () (join-wraps$645$12182 m*$645$17418 s*$645$17419 e$645$17416)) (lambda (m*$645$17428 s*$645$17429) (match-each$645$17312 (stx-expr$645$12162 e$645$17416) p$645$17417 m*$645$17428 s*$645$17429))) (quote #f)))))) (set! match-each+$645$17314 (lambda (e$645$17382 x-pat$645$17383 y-pat$645$17384 z-pat$645$17385 m*$645$17386 s*$645$17387 r$645$17388) (letrec ((f$645$17396 (lambda (e$645$17398 m*$645$17399 s*$645$17400) (if (pair? e$645$17398) (call-with-values (lambda () (f$645$17396 (cdr e$645$17398) m*$645$17399 s*$645$17400)) (lambda (xr*$645$17404 y-pat$645$17405 r$645$17406) (if r$645$17406 (if (null? y-pat$645$17405) ((lambda (xr$645$17410) (if xr$645$17410 (values (cons xr$645$17410 xr*$645$17404) y-pat$645$17405 r$645$17406) (values (quote #f) (quote #f) (quote #f)))) (match$645$17324 (car e$645$17398) x-pat$645$17383 m*$645$17399 s*$645$17400 (quote ()))) (values (quote ()) (cdr y-pat$645$17405) (match$645$17324 (car e$645$17398) (car y-pat$645$17405) m*$645$17399 s*$645$17400 r$645$17406))) (values (quote #f) (quote #f) (quote #f))))) (if (stx?$645$12160 e$645$17398) (call-with-values (lambda () (join-wraps$645$12182 m*$645$17399 s*$645$17400 e$645$17398)) (lambda (m*$645$17412 s*$645$17413) (f$645$17396 (stx-expr$645$12162 e$645$17398) m*$645$17412 s*$645$17413))) (values (quote ()) y-pat$645$17384 (match$645$17324 e$645$17398 z-pat$645$17385 m*$645$17399 s*$645$17400 r$645$17388))))))) (f$645$17396 e$645$17382 m*$645$17386 s*$645$17387)))) (set! match-each-any$645$17316 (lambda (e$645$17370 m*$645$17371 s*$645$17372) (if (pair? e$645$17370) ((lambda (l$645$17376) (if l$645$17376 (begin (quote #f) (cons (stx^$645$17310 (car e$645$17370) m*$645$17371 s*$645$17372) l$645$17376)) (quote #f))) (match-each-any$645$17316 (cdr e$645$17370) m*$645$17371 s*$645$17372)) (if (null? e$645$17370) (quote ()) (if (stx?$645$12160 e$645$17370) (call-with-values (lambda () (join-wraps$645$12182 m*$645$17371 s*$645$17372 e$645$17370)) (lambda (m*$645$17378 s*$645$17379) (match-each-any$645$17316 (stx-expr$645$12162 e$645$17370) m*$645$17378 s*$645$17379))) (quote #f)))))) (set! match-empty$645$17318 (lambda (p$645$17365 r$645$17366) (if (null? p$645$17365) r$645$17366 (if (eq? p$645$17365 (quote _)) r$645$17366 (if (eq? p$645$17365 (quote any)) (cons (quote ()) r$645$17366) (if (pair? p$645$17365) (match-empty$645$17318 (car p$645$17365) (match-empty$645$17318 (cdr p$645$17365) r$645$17366)) (if (eq? p$645$17365 (quote each-any)) (cons (quote ()) r$645$17366) ((lambda (t$645$17369) (if (memv t$645$17369 (quote (each))) (match-empty$645$17318 (vector-ref p$645$17365 (quote 1)) r$645$17366) (if (memv t$645$17369 (quote (each+))) (match-empty$645$17318 (vector-ref p$645$17365 (quote 1)) (match-empty$645$17318 (reverse (vector-ref p$645$17365 (quote 2))) (match-empty$645$17318 (vector-ref p$645$17365 (quote 3)) r$645$17366))) (if (memv t$645$17369 (quote (free-id atom))) r$645$17366 (if (memv t$645$17369 (quote (vector))) (match-empty$645$17318 (vector-ref p$645$17365 (quote 1)) r$645$17366) (error (quote syntax-dispatch) (quote "invalid pattern") p$645$17365)))))) (vector-ref p$645$17365 (quote 0)))))))))) (set! combine$645$17320 (lambda (r*$645$17361 r$645$17362) (if (null? (car r*$645$17361)) r$645$17362 (cons (map car r*$645$17361) (combine$645$17320 (map cdr r*$645$17361) r$645$17362))))) (set! match*$645$17322 (lambda (e$645$17340 p$645$17341 m*$645$17342 s*$645$17343 r$645$17344) (if (null? p$645$17341) (if (null? e$645$17340) (begin (quote #f) r$645$17344) (quote #f)) (if (pair? p$645$17341) (if (pair? e$645$17340) (begin (quote #f) (match$645$17324 (car e$645$17340) (car p$645$17341) m*$645$17342 s*$645$17343 (match$645$17324 (cdr e$645$17340) (cdr p$645$17341) m*$645$17342 s*$645$17343 r$645$17344))) (quote #f)) (if (eq? p$645$17341 (quote each-any)) ((lambda (l$645$17350) (if l$645$17350 (begin (quote #f) (cons l$645$17350 r$645$17344)) (quote #f))) (match-each-any$645$17316 e$645$17340 m*$645$17342 s*$645$17343)) ((lambda (t$645$17352) (if (memv t$645$17352 (quote (each))) (if (null? e$645$17340) (match-empty$645$17318 (vector-ref p$645$17341 (quote 1)) r$645$17344) ((lambda (r*$645$17359) (if r*$645$17359 (begin (quote #f) (combine$645$17320 r*$645$17359 r$645$17344)) (quote #f))) (match-each$645$17312 e$645$17340 (vector-ref p$645$17341 (quote 1)) m*$645$17342 s*$645$17343))) (if (memv t$645$17352 (quote (free-id))) (if (symbol? e$645$17340) (if (free-id=?$645$12216 (stx^$645$17310 e$645$17340 m*$645$17342 s*$645$17343) (vector-ref p$645$17341 (quote 1))) (begin (quote #f) r$645$17344) (quote #f)) (quote #f)) (if (memv t$645$17352 (quote (each+))) (call-with-values (lambda () (match-each+$645$17314 e$645$17340 (vector-ref p$645$17341 (quote 1)) (vector-ref p$645$17341 (quote 2)) (vector-ref p$645$17341 (quote 3)) m*$645$17342 s*$645$17343 r$645$17344)) (lambda (xr*$645$17353 y-pat$645$17354 r$645$17355) (if r$645$17355 (if (null? y-pat$645$17354) (begin (quote #f) (if (null? xr*$645$17353) (match-empty$645$17318 (vector-ref p$645$17341 (quote 1)) r$645$17355) (combine$645$17320 xr*$645$17353 r$645$17355))) (quote #f)) (quote #f)))) (if (memv t$645$17352 (quote (atom))) (if (equal? (vector-ref p$645$17341 (quote 1)) (strip$645$12226 e$645$17340 m*$645$17342)) (begin (quote #f) r$645$17344) (quote #f)) (if (memv t$645$17352 (quote (vector))) (if (vector? e$645$17340) (begin (quote #f) (match$645$17324 (vector->list e$645$17340) (vector-ref p$645$17341 (quote 1)) m*$645$17342 s*$645$17343 r$645$17344)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") p$645$17341))))))) (vector-ref p$645$17341 (quote 0)))))))) (set! match$645$17324 (lambda (e$645$17326 p$645$17327 m*$645$17328 s*$645$17329 r$645$17330) (if (not r$645$17330) (quote #f) (if (eq? p$645$17327 (quote _)) r$645$17330 (if (eq? p$645$17327 (quote any)) (cons (stx^$645$17310 e$645$17326 m*$645$17328 s*$645$17329) r$645$17330) (if (stx?$645$12160 e$645$17326) (call-with-values (lambda () (join-wraps$645$12182 m*$645$17328 s*$645$17329 e$645$17326)) (lambda (m*$645$17336 s*$645$17337) (match$645$17324 (stx-expr$645$12162 e$645$17326) p$645$17327 m*$645$17336 s*$645$17337 r$645$17330))) (match*$645$17322 e$645$17326 p$645$17327 m*$645$17328 s*$645$17329 r$645$17330))))))) (match$645$17324 e$645$17306 p$645$17307 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! ellipsis?$645$12718 (lambda (x$645$17438) (if (id?$645$12208 x$645$17438) (begin (quote #f) (free-id=?$645$12216 x$645$17438 (scheme-stx$645$12638 (quote ...)))) (quote #f)))) (set! syntax-case-transformer$645$12720 ((lambda () ((lambda (build-dispatch-call$645$17440 invalid-ids-error$645$17442 gen-clause$645$17444 gen-syntax-case$645$17446) (begin (set! build-dispatch-call$645$17440 (lambda (pvars$645$17580 expr$645$17581 y$645$17582 r$645$17583 mr$645$17584) ((lambda (ids$645$17590 levels$645$17591) ((lambda (labels$645$17594 new-vars$645$17595) ((lambda (body$645$17598) (list (quote (primitive apply)) (build-lambda$645$12097 (quote #f) new-vars$645$17595 body$645$17598) y$645$17582)) (chi-expr$645$12740 (add-subst$645$12188 (make-full-rib$645$12155 ids$645$17590 labels$645$17594) expr$645$17581) (append (map (lambda (label$645$17600 var$645$17601 level$645$17602) (cons label$645$17600 (make-binding$645$12234 (quote syntax) (cons var$645$17601 level$645$17602)))) labels$645$17594 new-vars$645$17595 (map cdr pvars$645$17580)) r$645$17583) mr$645$17584))) (map gen-label$645$12122 ids$645$17590) (map gen-lexical$645$12118 ids$645$17590))) (map car pvars$645$17580) (map cdr pvars$645$17580)))) (set! invalid-ids-error$645$17442 (lambda (id*$645$17568 e$645$17569 class$645$17570) (letrec ((find$645$17574 (lambda (id*$645$17576 ok*$645$17577) (if (null? id*$645$17576) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 e$645$17569)) (if (id?$645$12208 (car id*$645$17576)) (if (bound-id-member?$645$12222 (car id*$645$17576) ok*$645$17577) (syntax-error$645$12845 (car id*$645$17576) (quote "duplicate ") class$645$17570) (find$645$17574 (cdr id*$645$17576) (cons (car id*$645$17576) ok*$645$17577))) (syntax-error$645$12845 (car id*$645$17576) (quote "invalid ") class$645$17570)))))) (find$645$17574 id*$645$17568 (quote ()))))) (set! gen-clause$645$17444 (lambda (x$645$17536 keys$645$17537 clauses$645$17538 r$645$17539 mr$645$17540 pat$645$17541 fender$645$17542 expr$645$17543) (call-with-values (lambda () (convert-pattern$645$12714 pat$645$17541 keys$645$17537)) (lambda (p$645$17552 pvars$645$17553) (if (not (distinct-bound-ids?$645$12220 (map car pvars$645$17553))) (invalid-ids-error$645$17442 (map car pvars$645$17553) pat$645$17541 (quote "pattern variable")) (if (not (for-all (lambda (x$645$17556) (not (ellipsis?$645$12718 (car x$645$17556)))) pvars$645$17553)) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax-case pattern") (strip$645$12226 pat$645$17541 (quote ()))) ((lambda (y$645$17558) ((lambda (test$645$17560) ((lambda (conseq$645$17562) ((lambda (altern$645$17564) (list (build-lambda$645$12097 (quote #f) (list y$645$17558) (list (quote if) test$645$17560 conseq$645$17562 altern$645$17564)) (list (quote (primitive syntax-dispatch)) x$645$17536 (list (quote quote) p$645$17552)))) (gen-syntax-case$645$17446 x$645$17536 keys$645$17537 clauses$645$17538 r$645$17539 mr$645$17540))) (build-dispatch-call$645$17440 pvars$645$17553 expr$645$17543 y$645$17558 r$645$17539 mr$645$17540))) (if (eq? fender$645$17542 (quote #t)) y$645$17558 ((lambda (call$645$17566) (list (quote if) y$645$17558 call$645$17566 (list (quote quote) (quote #f)))) (build-dispatch-call$645$17440 pvars$645$17553 fender$645$17542 y$645$17558 r$645$17539 mr$645$17540))))) (gen-lexical$645$12118 (quote tmp))))))))) (set! gen-syntax-case$645$17446 (lambda (x$645$17448 keys$645$17449 clauses$645$17450 r$645$17451 mr$645$17452) (if (null? clauses$645$17450) (list (quote (primitive syntax-error)) x$645$17448) ((lambda (t$645$17458) ((lambda (ls/false$645$17460) (if (if ls/false$645$17460 (begin (quote #f) (apply (lambda (pat$645$17462 expr$645$17463) (quote #t)) ls/false$645$17460)) (quote #f)) (apply (lambda (pat$645$17466 expr$645$17467) (if (if (id?$645$12208 pat$645$17466) (if (not (bound-id-member?$645$12222 pat$645$17466 keys$645$17449)) (begin (quote #f) (not (ellipsis?$645$12718 pat$645$17466))) (quote #f)) (quote #f)) (if (free-id=?$645$12216 pat$645$17466 (scheme-stx$645$12638 (quote _))) (chi-expr$645$12740 expr$645$17467 r$645$17451 mr$645$17452) ((lambda (lab$645$17470 lex$645$17471) ((lambda (body$645$17474) (list (build-lambda$645$12097 (quote #f) (list lex$645$17471) body$645$17474) x$645$17448)) (chi-expr$645$12740 (add-subst$645$12188 (make-full-rib$645$12155 (list pat$645$17466) (list lab$645$17470)) expr$645$17467) (cons (cons lab$645$17470 (make-binding$645$12234 (quote syntax) (cons lex$645$17471 (quote 0)))) r$645$17451) mr$645$17452))) (gen-label$645$12122 pat$645$17466) (gen-lexical$645$12118 pat$645$17466))) (gen-clause$645$17444 x$645$17448 keys$645$17449 (cdr clauses$645$17450) r$645$17451 mr$645$17452 pat$645$17466 (quote #t) expr$645$17467))) ls/false$645$17460) ((lambda (t$645$17476) ((lambda (ls/false$645$17478) (if (if ls/false$645$17478 (begin (quote #f) (apply (lambda (pat$645$17480 fender$645$17481 expr$645$17482) (quote #t)) ls/false$645$17478)) (quote #f)) (apply (lambda (pat$645$17486 fender$645$17487 expr$645$17488) (gen-clause$645$17444 x$645$17448 keys$645$17449 (cdr clauses$645$17450) r$645$17451 mr$645$17452 pat$645$17486 fender$645$17487 expr$645$17488)) ls/false$645$17478) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17476 (quote ()))))) ((lambda (x$645$17492) (if (syntax-pair?$645$12194 x$645$17492) (begin (quote #f) ((lambda (q$645$17494) (if q$645$17494 (begin (quote #f) ((lambda (r$645$17496) (if r$645$17496 (begin (quote #f) (append q$645$17494 r$645$17496)) (quote #f))) ((lambda (x$645$17498) (if (syntax-pair?$645$12194 x$645$17498) (begin (quote #f) ((lambda (q$645$17500) (if q$645$17500 (begin (quote #f) ((lambda (r$645$17502) (if r$645$17502 (begin (quote #f) (append q$645$17500 r$645$17502)) (quote #f))) ((lambda (x$645$17504) (if (syntax-pair?$645$12194 x$645$17504) (begin (quote #f) ((lambda (q$645$17506) (if q$645$17506 (begin (quote #f) ((lambda (r$645$17508) (if r$645$17508 (begin (quote #f) (append q$645$17506 r$645$17508)) (quote #f))) ((lambda (x$645$17510) (if (equal? (stx->datum$645$12228 x$645$17510) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$17504)))) (quote #f))) ((lambda (x$645$17512) (list x$645$17512)) (syntax-car$645$12202 x$645$17504)))) (quote #f))) (syntax-cdr$645$12206 x$645$17498)))) (quote #f))) ((lambda (x$645$17514) (list x$645$17514)) (syntax-car$645$12202 x$645$17498)))) (quote #f))) (syntax-cdr$645$12206 x$645$17492)))) (quote #f))) ((lambda (x$645$17516) (list x$645$17516)) (syntax-car$645$12202 x$645$17492)))) (quote #f))) t$645$17476))) t$645$17458))) ((lambda (x$645$17518) (if (syntax-pair?$645$12194 x$645$17518) (begin (quote #f) ((lambda (q$645$17520) (if q$645$17520 (begin (quote #f) ((lambda (r$645$17522) (if r$645$17522 (begin (quote #f) (append q$645$17520 r$645$17522)) (quote #f))) ((lambda (x$645$17524) (if (syntax-pair?$645$12194 x$645$17524) (begin (quote #f) ((lambda (q$645$17526) (if q$645$17526 (begin (quote #f) ((lambda (r$645$17528) (if r$645$17528 (begin (quote #f) (append q$645$17526 r$645$17528)) (quote #f))) ((lambda (x$645$17530) (if (equal? (stx->datum$645$12228 x$645$17530) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$17524)))) (quote #f))) ((lambda (x$645$17532) (list x$645$17532)) (syntax-car$645$12202 x$645$17524)))) (quote #f))) (syntax-cdr$645$12206 x$645$17518)))) (quote #f))) ((lambda (x$645$17534) (list x$645$17534)) (syntax-car$645$12202 x$645$17518)))) (quote #f))) t$645$17458))) (car clauses$645$17450))))) (lambda (e$645$17606 r$645$17607 mr$645$17608) ((lambda (t$645$17612) ((lambda (ls/false$645$17614) (if (if ls/false$645$17614 (begin (quote #f) (apply (lambda (expr$645$17616 keys$645$17617 clauses$645$17618) (quote #t)) ls/false$645$17614)) (quote #f)) (apply (lambda (expr$645$17622 keys$645$17623 clauses$645$17624) (begin (if (for-all (lambda (x$645$17628) (if (id?$645$12208 x$645$17628) (begin (quote #f) (not (ellipsis?$645$12718 x$645$17628))) (quote #f))) keys$645$17623) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (strip$645$12226 e$645$17606 (quote ())))) ((lambda (x$645$17630) ((lambda (body$645$17632) (list (build-lambda$645$12097 (quote #f) (list x$645$17630) body$645$17632) (chi-expr$645$12740 expr$645$17622 r$645$17607 mr$645$17608))) (gen-syntax-case$645$17446 x$645$17630 keys$645$17623 clauses$645$17624 r$645$17607 mr$645$17608))) (gen-lexical$645$12118 (quote tmp))))) ls/false$645$17614) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17612 (quote ()))))) ((lambda (x$645$17634) (if (syntax-pair?$645$12194 x$645$17634) (begin (quote #f) ((lambda (q$645$17636) (if q$645$17636 (begin (quote #f) ((lambda (r$645$17638) (if r$645$17638 (begin (quote #f) (append q$645$17636 r$645$17638)) (quote #f))) ((lambda (x$645$17640) (if (syntax-pair?$645$12194 x$645$17640) (begin (quote #f) ((lambda (q$645$17642) (if q$645$17642 (begin (quote #f) ((lambda (r$645$17644) (if r$645$17644 (begin (quote #f) (append q$645$17642 r$645$17644)) (quote #f))) ((lambda (x$645$17646) (if (syntax-pair?$645$12194 x$645$17646) (begin (quote #f) ((lambda (q$645$17648) (if q$645$17648 (begin (quote #f) ((lambda (r$645$17650) (if r$645$17650 (begin (quote #f) (append q$645$17648 r$645$17650)) (quote #f))) ((letrec ((f$645$17652 (lambda (x$645$17654) (if (syntax-pair?$645$12194 x$645$17654) ((lambda (cars/f$645$17656) (if cars/f$645$17656 (begin (quote #f) ((lambda (cdrs/f$645$17658) (if cdrs/f$645$17658 (begin (quote #f) (map cons cars/f$645$17656 cdrs/f$645$17658)) (quote #f))) (f$645$17652 (syntax-cdr$645$12206 x$645$17654)))) (quote #f))) ((lambda (x$645$17660) (list x$645$17660)) (syntax-car$645$12202 x$645$17654))) (if (syntax-null?$645$12198 x$645$17654) (list (begin (quote clauses) (quote ()))) (quote #f)))))) f$645$17652) (syntax-cdr$645$12206 x$645$17646)))) (quote #f))) ((letrec ((f$645$17662 (lambda (x$645$17664) (if (syntax-pair?$645$12194 x$645$17664) ((lambda (cars/f$645$17666) (if cars/f$645$17666 (begin (quote #f) ((lambda (cdrs/f$645$17668) (if cdrs/f$645$17668 (begin (quote #f) (map cons cars/f$645$17666 cdrs/f$645$17668)) (quote #f))) (f$645$17662 (syntax-cdr$645$12206 x$645$17664)))) (quote #f))) ((lambda (x$645$17670) (list x$645$17670)) (syntax-car$645$12202 x$645$17664))) (if (syntax-null?$645$12198 x$645$17664) (list (begin (quote keys) (quote ()))) (quote #f)))))) f$645$17662) (syntax-car$645$12202 x$645$17646)))) (quote #f))) (syntax-cdr$645$12206 x$645$17640)))) (quote #f))) ((lambda (x$645$17672) (list x$645$17672)) (syntax-car$645$12202 x$645$17640)))) (quote #f))) (syntax-cdr$645$12206 x$645$17634)))) (quote #f))) ((lambda (x$645$17674) (quote ())) (syntax-car$645$12202 x$645$17634)))) (quote #f))) t$645$17612))) e$645$17606)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! syntax-transformer$645$12722 ((lambda () ((lambda (gen-syntax$645$17676 gen-ref$645$17678 gen-append$645$17680 gen-mappend$645$17682 gen-map$645$17684 gen-cons$645$17686 gen-vector$645$17688 regen$645$17690) (begin (set! gen-syntax$645$17676 (lambda (src$645$17762 e$645$17763 r$645$17764 maps$645$17765 ellipsis?$645$17766 vec?$645$17767) ((lambda (t$645$17774) ((lambda (ls/false$645$17776) (if (if ls/false$645$17776 (begin (quote #f) (apply (lambda (dots$645$17778) (ellipsis?$645$17766 dots$645$17778)) ls/false$645$17776)) (quote #f)) (apply (lambda (dots$645$17780) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (strip$645$12226 src$645$17762 (quote ())))) ls/false$645$17776) ((lambda (t$645$17782) ((lambda (ls/false$645$17784) (if (if ls/false$645$17784 (begin (quote #f) (apply (lambda (id$645$17786) (id?$645$12208 id$645$17786)) ls/false$645$17784)) (quote #f)) (apply (lambda (id$645$17788) ((lambda (label$645$17790) ((lambda (b$645$17792) ((lambda () (if (eq? (binding-type$645$12236 b$645$17792) (quote syntax)) (call-with-values (lambda () ((lambda (var.lev$645$17794) (gen-ref$645$17678 src$645$17762 (car var.lev$645$17794) (cdr var.lev$645$17794) maps$645$17765)) (binding-value$645$12238 b$645$17792))) (lambda (var$645$17796 maps$645$17797) (values (list (quote ref) var$645$17796) maps$645$17797))) (values (list (quote quote) e$645$17763) maps$645$17765))))) (label->binding$645$12232 label$645$17790 r$645$17764))) (id->label$645$12230 e$645$17763))) ls/false$645$17784) ((lambda (t$645$17800) ((lambda (ls/false$645$17802) (if (if ls/false$645$17802 (begin (quote #f) (apply (lambda (dots$645$17804 e$645$17805) (ellipsis?$645$17766 dots$645$17804)) ls/false$645$17802)) (quote #f)) (apply (lambda (dots$645$17808 e$645$17809) (if vec?$645$17767 (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (strip$645$12226 src$645$17762 (quote ()))) (gen-syntax$645$17676 src$645$17762 e$645$17809 r$645$17764 maps$645$17765 (lambda (x$645$17812) (quote #f)) (quote #f)))) ls/false$645$17802) ((lambda (t$645$17814) ((lambda (ls/false$645$17816) (if (if ls/false$645$17816 (begin (quote #f) (apply (lambda (x$645$17818 dots$645$17819 y$645$17820) (ellipsis?$645$17766 dots$645$17819)) ls/false$645$17816)) (quote #f)) (apply (lambda (x$645$17824 dots$645$17825 y$645$17826) (letrec ((f$645$17830 (lambda (y$645$17838 k$645$17839) ((lambda (t$645$17842) ((lambda (ls/false$645$17844) (if (if ls/false$645$17844 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$17844)) (quote #f)) (apply (lambda () (k$645$17839 maps$645$17765)) ls/false$645$17844) ((lambda (t$645$17846) ((lambda (ls/false$645$17848) (if (if ls/false$645$17848 (begin (quote #f) (apply (lambda (dots$645$17850 y$645$17851) (ellipsis?$645$17766 dots$645$17850)) ls/false$645$17848)) (quote #f)) (apply (lambda (dots$645$17854 y$645$17855) (f$645$17830 y$645$17855 (lambda (maps$645$17858) (call-with-values (lambda () (k$645$17839 (cons (quote ()) maps$645$17858))) (lambda (x$645$17860 maps$645$17861) (if (null? (car maps$645$17861)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (strip$645$12226 src$645$17762 (quote ()))) (values (gen-mappend$645$17682 x$645$17860 (car maps$645$17861)) (cdr maps$645$17861)))))))) ls/false$645$17848) ((lambda (t$645$17864) ((lambda (ls/false$645$17866) (if (if ls/false$645$17866 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$17866)) (quote #f)) (apply (lambda () (call-with-values (lambda () (gen-syntax$645$17676 src$645$17762 y$645$17838 r$645$17764 maps$645$17765 ellipsis?$645$17766 vec?$645$17767)) (lambda (y$645$17868 maps$645$17869) (call-with-values (lambda () (k$645$17839 maps$645$17869)) (lambda (x$645$17872 maps$645$17873) (values (gen-append$645$17680 x$645$17872 y$645$17868) maps$645$17873)))))) ls/false$645$17866) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17864 (quote ()))))) ((lambda (x$645$17876) (quote ())) t$645$17864))) t$645$17846))) ((lambda (x$645$17878) (if (syntax-pair?$645$12194 x$645$17878) (begin (quote #f) ((lambda (q$645$17880) (if q$645$17880 (begin (quote #f) ((lambda (r$645$17882) (if r$645$17882 (begin (quote #f) (append q$645$17880 r$645$17882)) (quote #f))) ((lambda (x$645$17884) (list x$645$17884)) (syntax-cdr$645$12206 x$645$17878)))) (quote #f))) ((lambda (x$645$17886) (list x$645$17886)) (syntax-car$645$12202 x$645$17878)))) (quote #f))) t$645$17846))) t$645$17842))) ((lambda (x$645$17888) (if (equal? (stx->datum$645$12228 x$645$17888) (quote ())) (begin (quote #f) (quote ())) (quote #f))) t$645$17842))) y$645$17838)))) (f$645$17830 y$645$17826 (lambda (maps$645$17832) (call-with-values (lambda () (gen-syntax$645$17676 src$645$17762 x$645$17824 r$645$17764 (cons (quote ()) maps$645$17832) ellipsis?$645$17766 (quote #f))) (lambda (x$645$17834 maps$645$17835) (if (null? (car maps$645$17835)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (strip$645$12226 src$645$17762 (quote ()))) (values (gen-map$645$17684 x$645$17834 (car maps$645$17835)) (cdr maps$645$17835))))))))) ls/false$645$17816) ((lambda (t$645$17890) ((lambda (ls/false$645$17892) (if (if ls/false$645$17892 (begin (quote #f) (apply (lambda (x$645$17894 y$645$17895) (quote #t)) ls/false$645$17892)) (quote #f)) (apply (lambda (x$645$17898 y$645$17899) (call-with-values (lambda () (gen-syntax$645$17676 src$645$17762 x$645$17898 r$645$17764 maps$645$17765 ellipsis?$645$17766 (quote #f))) (lambda (xnew$645$17902 maps$645$17903) (call-with-values (lambda () (gen-syntax$645$17676 src$645$17762 y$645$17899 r$645$17764 maps$645$17903 ellipsis?$645$17766 vec?$645$17767)) (lambda (ynew$645$17906 maps$645$17907) (values (gen-cons$645$17686 e$645$17763 x$645$17898 y$645$17899 xnew$645$17902 ynew$645$17906) maps$645$17907)))))) ls/false$645$17892) ((lambda (t$645$17910) ((lambda (ls/false$645$17912) (if (if ls/false$645$17912 (begin (quote #f) (apply (lambda (ls$645$17914) (not (stx?$645$12160 e$645$17763))) ls/false$645$17912)) (quote #f)) (apply (lambda (ls$645$17916) (call-with-values (lambda () (gen-syntax$645$17676 src$645$17762 ls$645$17916 r$645$17764 maps$645$17765 ellipsis?$645$17766 (quote #t))) (lambda (lsnew$645$17918 maps$645$17919) (values (gen-vector$645$17688 e$645$17763 ls$645$17916 lsnew$645$17918) maps$645$17919)))) ls/false$645$17912) ((lambda (t$645$17922) ((lambda (ls/false$645$17924) (if (if ls/false$645$17924 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$17924)) (quote #f)) (apply (lambda () (values (list (quote quote) e$645$17763) maps$645$17765)) ls/false$645$17924) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17922 (quote ()))))) ((lambda (x$645$17926) (quote ())) t$645$17922))) t$645$17910))) ((lambda (x$645$17928) (if (syntax-vector?$645$12196 x$645$17928) (begin (quote #f) ((letrec ((f$645$17930 (lambda (x$645$17932) (if (syntax-pair?$645$12194 x$645$17932) ((lambda (cars/f$645$17934) (if cars/f$645$17934 (begin (quote #f) ((lambda (cdrs/f$645$17936) (if cdrs/f$645$17936 (begin (quote #f) (map cons cars/f$645$17934 cdrs/f$645$17936)) (quote #f))) (f$645$17930 (syntax-cdr$645$12206 x$645$17932)))) (quote #f))) ((lambda (x$645$17938) (list x$645$17938)) (syntax-car$645$12202 x$645$17932))) (if (syntax-null?$645$12198 x$645$17932) (list (begin (quote ls) (quote ()))) (quote #f)))))) f$645$17930) (syntax-vector->list$645$12192 x$645$17928))) (quote #f))) t$645$17910))) t$645$17890))) ((lambda (x$645$17940) (if (syntax-pair?$645$12194 x$645$17940) (begin (quote #f) ((lambda (q$645$17942) (if q$645$17942 (begin (quote #f) ((lambda (r$645$17944) (if r$645$17944 (begin (quote #f) (append q$645$17942 r$645$17944)) (quote #f))) ((lambda (x$645$17946) (list x$645$17946)) (syntax-cdr$645$12206 x$645$17940)))) (quote #f))) ((lambda (x$645$17948) (list x$645$17948)) (syntax-car$645$12202 x$645$17940)))) (quote #f))) t$645$17890))) t$645$17814))) ((lambda (x$645$17950) (if (syntax-pair?$645$12194 x$645$17950) (begin (quote #f) ((lambda (q$645$17952) (if q$645$17952 (begin (quote #f) ((lambda (r$645$17954) (if r$645$17954 (begin (quote #f) (append q$645$17952 r$645$17954)) (quote #f))) ((lambda (x$645$17956) (if (syntax-pair?$645$12194 x$645$17956) (begin (quote #f) ((lambda (q$645$17958) (if q$645$17958 (begin (quote #f) ((lambda (r$645$17960) (if r$645$17960 (begin (quote #f) (append q$645$17958 r$645$17960)) (quote #f))) ((lambda (x$645$17962) (list x$645$17962)) (syntax-cdr$645$12206 x$645$17956)))) (quote #f))) ((lambda (x$645$17964) (list x$645$17964)) (syntax-car$645$12202 x$645$17956)))) (quote #f))) (syntax-cdr$645$12206 x$645$17950)))) (quote #f))) ((lambda (x$645$17966) (list x$645$17966)) (syntax-car$645$12202 x$645$17950)))) (quote #f))) t$645$17814))) t$645$17800))) ((lambda (x$645$17968) (if (syntax-pair?$645$12194 x$645$17968) (begin (quote #f) ((lambda (q$645$17970) (if q$645$17970 (begin (quote #f) ((lambda (r$645$17972) (if r$645$17972 (begin (quote #f) (append q$645$17970 r$645$17972)) (quote #f))) ((lambda (x$645$17974) (if (syntax-pair?$645$12194 x$645$17974) (begin (quote #f) ((lambda (q$645$17976) (if q$645$17976 (begin (quote #f) ((lambda (r$645$17978) (if r$645$17978 (begin (quote #f) (append q$645$17976 r$645$17978)) (quote #f))) ((lambda (x$645$17980) (if (equal? (stx->datum$645$12228 x$645$17980) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$17974)))) (quote #f))) ((lambda (x$645$17982) (list x$645$17982)) (syntax-car$645$12202 x$645$17974)))) (quote #f))) (syntax-cdr$645$12206 x$645$17968)))) (quote #f))) ((lambda (x$645$17984) (list x$645$17984)) (syntax-car$645$12202 x$645$17968)))) (quote #f))) t$645$17800))) t$645$17782))) ((lambda (x$645$17986) (list x$645$17986)) t$645$17782))) t$645$17774))) ((lambda (x$645$17988) (list x$645$17988)) t$645$17774))) e$645$17763))) (set! gen-ref$645$17678 (lambda (src$645$17744 var$645$17745 level$645$17746 maps$645$17747) (if (= level$645$17746 (quote 0)) (values var$645$17745 maps$645$17747) (if (null? maps$645$17747) (error (quote expander) (quote "~a ~s") (quote "missing ellipsis in syntax form") (strip$645$12226 src$645$17744 (quote ()))) (call-with-values (lambda () (gen-ref$645$17678 src$645$17744 var$645$17745 (- level$645$17746 (quote 1)) (cdr maps$645$17747))) (lambda (outer-var$645$17752 outer-maps$645$17753) ((lambda (t$645$17756) (if t$645$17756 ((lambda (b$645$17758) (values (cdr b$645$17758) maps$645$17747)) t$645$17756) ((lambda (inner-var$645$17760) (values inner-var$645$17760 (cons (cons (cons outer-var$645$17752 inner-var$645$17760) (car maps$645$17747)) outer-maps$645$17753))) (gen-lexical$645$12118 (quote tmp))))) (assq outer-var$645$17752 (car maps$645$17747))))))))) (set! gen-append$645$17680 (lambda (x$645$17740 y$645$17741) (if (equal? y$645$17741 (quote (quote ()))) x$645$17740 (list (quote append) x$645$17740 y$645$17741)))) (set! gen-mappend$645$17682 (lambda (e$645$17736 map-env$645$17737) (list (quote apply) (quote (primitive append)) (gen-map$645$17684 e$645$17736 map-env$645$17737)))) (set! gen-map$645$17684 (lambda (e$645$17718 map-env$645$17719) ((lambda (formals$645$17722 actuals$645$17723) (if (eq? (car e$645$17718) (quote ref)) (car actuals$645$17723) (if (for-all (lambda (x$645$17726) (if (eq? (car x$645$17726) (quote ref)) (begin (quote #f) (memq (cadr x$645$17726) formals$645$17722)) (quote #f))) (cdr e$645$17718)) ((lambda (args$645$17728) (cons (quote map) (cons (list (quote primitive) (car e$645$17718)) args$645$17728))) (map ((lambda (r$645$17730) (lambda (x$645$17732) (cdr (assq (cadr x$645$17732) r$645$17730)))) (map cons formals$645$17722 actuals$645$17723)) (cdr e$645$17718))) (cons* (quote map) (list (quote lambda) formals$645$17722 e$645$17718) actuals$645$17723)))) (map cdr map-env$645$17719) (map (lambda (x$645$17734) (list (quote ref) (car x$645$17734))) map-env$645$17719)))) (set! gen-cons$645$17686 (lambda (e$645$17703 x$645$17704 y$645$17705 xnew$645$17706 ynew$645$17707) ((lambda (t$645$17713) (if (memv t$645$17713 (quote (quote))) (if (eq? (car xnew$645$17706) (quote quote)) ((lambda (xnew$645$17714 ynew$645$17715) (if (if (eq? xnew$645$17714 x$645$17704) (begin (quote #f) (eq? ynew$645$17715 y$645$17705)) (quote #f)) (list (quote quote) e$645$17703) (list (quote quote) (cons xnew$645$17714 ynew$645$17715)))) (cadr xnew$645$17706) (cadr ynew$645$17707)) (if (null? (cadr ynew$645$17707)) (list (quote list) xnew$645$17706) (list (quote cons) xnew$645$17706 ynew$645$17707))) (if (memv t$645$17713 (quote (list))) (cons (quote list) (cons xnew$645$17706 (cdr ynew$645$17707))) (list (quote cons) xnew$645$17706 ynew$645$17707)))) (car ynew$645$17707)))) (set! gen-vector$645$17688 (lambda (e$645$17697 ls$645$17698 lsnew$645$17699) (if (eq? (car lsnew$645$17699) (quote quote)) (if (eq? (cadr lsnew$645$17699) ls$645$17698) (list (quote quote) e$645$17697) (list (quote quote) (list->vector (cadr lsnew$645$17699)))) (if (eq? (car lsnew$645$17699) (quote list)) (cons (quote vector) (cdr lsnew$645$17699)) (list (quote list->vector) lsnew$645$17699))))) (set! regen$645$17690 (lambda (x$645$17692) ((lambda (t$645$17694) (if (memv t$645$17694 (quote (ref))) (cadr x$645$17692) (if (memv t$645$17694 (quote (primitive))) (list (quote primitive) (cadr x$645$17692)) (if (memv t$645$17694 (quote (quote))) (list (quote quote) (cadr x$645$17692)) (if (memv t$645$17694 (quote (lambda))) (build-lambda$645$12097 (quote #f) (cadr x$645$17692) (regen$645$17690 (caddr x$645$17692))) (if (memv t$645$17694 (quote (map))) ((lambda (ls$645$17695) (cons (quote (primitive map)) ls$645$17695)) (map regen$645$17690 (cdr x$645$17692))) (cons (list (quote primitive) (car x$645$17692)) (map regen$645$17690 (cdr x$645$17692))))))))) (car x$645$17692)))) (lambda (e$645$17990 r$645$17991 mr$645$17992) ((lambda (t$645$17996) ((lambda (ls/false$645$17998) (if (if ls/false$645$17998 (begin (quote #f) (apply (lambda (x$645$18000) (quote #t)) ls/false$645$17998)) (quote #f)) (apply (lambda (x$645$18002) (call-with-values (lambda () (gen-syntax$645$17676 e$645$17990 x$645$18002 r$645$17991 (quote ()) ellipsis?$645$12718 (quote #f))) (lambda (e$645$18004 maps$645$18005) (regen$645$17690 e$645$18004)))) ls/false$645$17998) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$17996 (quote ()))))) ((lambda (x$645$18008) (if (syntax-pair?$645$12194 x$645$18008) (begin (quote #f) ((lambda (q$645$18010) (if q$645$18010 (begin (quote #f) ((lambda (r$645$18012) (if r$645$18012 (begin (quote #f) (append q$645$18010 r$645$18012)) (quote #f))) ((lambda (x$645$18014) (if (syntax-pair?$645$12194 x$645$18014) (begin (quote #f) ((lambda (q$645$18016) (if q$645$18016 (begin (quote #f) ((lambda (r$645$18018) (if r$645$18018 (begin (quote #f) (append q$645$18016 r$645$18018)) (quote #f))) ((lambda (x$645$18020) (if (equal? (stx->datum$645$12228 x$645$18020) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$18014)))) (quote #f))) ((lambda (x$645$18022) (list x$645$18022)) (syntax-car$645$12202 x$645$18014)))) (quote #f))) (syntax-cdr$645$12206 x$645$18008)))) (quote #f))) ((lambda (x$645$18024) (quote ())) (syntax-car$645$12202 x$645$18008)))) (quote #f))) t$645$17996))) e$645$17990)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! core-macro-transformer$645$12724 (lambda (name$645$18026) ((lambda (t$645$18028) (if (memv t$645$18028 (quote (quote))) quote-transformer$645$12662 (if (memv t$645$18028 (quote (lambda))) lambda-transformer$645$12666 (if (memv t$645$18028 (quote (case-lambda))) case-lambda-transformer$645$12664 (if (memv t$645$18028 (quote (let-values))) let-values-transformer$645$12644 (if (memv t$645$18028 (quote (letrec))) letrec-transformer$645$12648 (if (memv t$645$18028 (quote (letrec*))) letrec*-transformer$645$12650 (if (memv t$645$18028 (quote (case))) case-transformer$645$12660 (if (memv t$645$18028 (quote (if))) if-transformer$645$12658 (if (memv t$645$18028 (quote (when))) when-transformer$645$12654 (if (memv t$645$18028 (quote (unless))) unless-transformer$645$12656 (if (memv t$645$18028 (quote (parameterize))) parameterize-transformer$645$12710 (if (memv t$645$18028 (quote (foreign-call))) foreign-call-transformer$645$12712 (if (memv t$645$18028 (quote (syntax-case))) syntax-case-transformer$645$12720 (if (memv t$645$18028 (quote (syntax))) syntax-transformer$645$12722 (if (memv t$645$18028 (quote (type-descriptor))) type-descriptor-transformer$645$12652 (error (quote macro-transformer) (quote "cannot find ~s") name$645$18026))))))))))))))))) name$645$18026))) (set! macro-transformer$645$12726 (lambda (x$645$18029) (if (procedure? x$645$18029) x$645$18029 (if (symbol? x$645$18029) ((lambda (t$645$18031) (if (memv t$645$18031 (quote (define-record))) define-record-macro$645$12706 (if (memv t$645$18031 (quote (include))) include-macro$645$12698 (if (memv t$645$18031 (quote (cond))) cond-macro$645$12696 (if (memv t$645$18031 (quote (let))) let-macro$645$12672 (if (memv t$645$18031 (quote (do))) do-macro$645$12688 (if (memv t$645$18031 (quote (or))) or-macro$645$12692 (if (memv t$645$18031 (quote (and))) and-macro$645$12694 (if (memv t$645$18031 (quote (let*))) let*-macro$645$12690 (if (memv t$645$18031 (quote (syntax-rules))) syntax-rules-macro$645$12700 (if (memv t$645$18031 (quote (quasiquote))) quasiquote-macro$645$12702 (if (memv t$645$18031 (quote (quasisyntax))) quasisyntax-macro$645$12704 (if (memv t$645$18031 (quote (with-syntax))) with-syntax-macro$645$12670 (if (memv t$645$18031 (quote (identifier-syntax))) identifier-syntax-macro$645$12686 (if (memv t$645$18031 (quote (time))) time-macro$645$12678 (if (memv t$645$18031 (quote (delay))) delay-macro$645$12680 (if (memv t$645$18031 (quote (assert))) assert-macro$645$12682 (if (memv t$645$18031 (quote (endianness))) endianness-macro$645$12684 (if (memv t$645$18031 (quote (trace-lambda))) trace-lambda-macro$645$12674 (if (memv t$645$18031 (quote (trace-define))) trace-define-macro$645$12676 (if (memv t$645$18031 (quote (... => _ else unquote unquote-splicing unsyntax unsyntax-splicing))) incorrect-usage-macro$645$12708 (error (quote macro-transformer) (quote "invalid macro ~s") x$645$18029)))))))))))))))))))))) x$645$18029) (error (quote core-macro-transformer) (quote "invalid macro ~s") x$645$18029))))) (set! local-macro-transformer$645$12728 (lambda (x$645$18032) (car x$645$18032))) (set! chi-macro$645$12730 (lambda (p$645$18034 e$645$18035) ((lambda (s$645$18038) (add-mark$645$12186 (gen-mark$645$12176) s$645$18038)) ((macro-transformer$645$12726 p$645$18034) (add-mark$645$12186 anti-mark$645$12178 e$645$18035))))) (set! chi-local-macro$645$12732 (lambda (p$645$18040 e$645$18041) ((lambda (s$645$18044) (add-mark$645$12186 (gen-mark$645$12176) s$645$18044)) ((local-macro-transformer$645$12728 p$645$18040) (add-mark$645$12186 anti-mark$645$12178 e$645$18041))))) (set! chi-global-macro$645$12734 (lambda (p$645$18046 e$645$18047) ((lambda (lib$645$18050 loc$645$18051) (begin (visit-library$645$11745 lib$645$18050) ((lambda (x$645$18054) ((lambda (transformer$645$18056) ((lambda (s$645$18058) (add-mark$645$12186 (gen-mark$645$12176) s$645$18058)) (transformer$645$18056 (add-mark$645$12186 anti-mark$645$12178 e$645$18047)))) (if (procedure? x$645$18054) x$645$18054 (error (quote chi-global-macro) (quote "~s is not a procedure"))))) (symbol-value loc$645$18051)))) (car p$645$18046) (cdr p$645$18046)))) (set! chi-expr*$645$12736 (lambda (e*$645$18060 r$645$18061 mr$645$18062) (if (null? e*$645$18060) (quote ()) ((lambda (e$645$18066) (cons e$645$18066 (chi-expr*$645$12736 (cdr e*$645$18060) r$645$18061 mr$645$18062))) (chi-expr$645$12740 (car e*$645$18060) r$645$18061 mr$645$18062))))) (set! chi-application$645$12738 (lambda (e$645$18068 r$645$18069 mr$645$18070) ((lambda (t$645$18074) ((lambda (ls/false$645$18076) (if (if ls/false$645$18076 (begin (quote #f) (apply (lambda (rator$645$18078 rands$645$18079) (quote #t)) ls/false$645$18076)) (quote #f)) (apply (lambda (rator$645$18082 rands$645$18083) ((lambda (rator$645$18086) (cons rator$645$18086 (chi-expr*$645$12736 rands$645$18083 r$645$18069 mr$645$18070))) (chi-expr$645$12740 rator$645$18082 r$645$18069 mr$645$18070))) ls/false$645$18076) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18074 (quote ()))))) ((lambda (x$645$18088) (if (syntax-pair?$645$12194 x$645$18088) (begin (quote #f) ((lambda (q$645$18090) (if q$645$18090 (begin (quote #f) ((lambda (r$645$18092) (if r$645$18092 (begin (quote #f) (append q$645$18090 r$645$18092)) (quote #f))) ((letrec ((f$645$18094 (lambda (x$645$18096) (if (syntax-pair?$645$12194 x$645$18096) ((lambda (cars/f$645$18098) (if cars/f$645$18098 (begin (quote #f) ((lambda (cdrs/f$645$18100) (if cdrs/f$645$18100 (begin (quote #f) (map cons cars/f$645$18098 cdrs/f$645$18100)) (quote #f))) (f$645$18094 (syntax-cdr$645$12206 x$645$18096)))) (quote #f))) ((lambda (x$645$18102) (list x$645$18102)) (syntax-car$645$12202 x$645$18096))) (if (syntax-null?$645$12198 x$645$18096) (list (begin (quote rands) (quote ()))) (quote #f)))))) f$645$18094) (syntax-cdr$645$12206 x$645$18088)))) (quote #f))) ((lambda (x$645$18104) (list x$645$18104)) (syntax-car$645$12202 x$645$18088)))) (quote #f))) t$645$18074))) e$645$18068))) (set! chi-expr$645$12740 (lambda (e$645$18106 r$645$18107 mr$645$18108) (call-with-values (lambda () (syntax-type$645$12240 e$645$18106 r$645$18107)) (lambda (type$645$18112 value$645$18113 kwd$645$18114) ((lambda (t$645$18118) (if (memv t$645$18118 (quote (core-macro))) ((lambda (transformer$645$18255) (transformer$645$18255 e$645$18106 r$645$18107 mr$645$18108)) (core-macro-transformer$645$12724 value$645$18113)) (if (memv t$645$18118 (quote (global))) ((lambda (lib$645$18251) ((lambda (loc$645$18253) ((lambda () (begin ((inv-collector$645$12788) lib$645$18251) loc$645$18253)))) (cdr value$645$18113))) (car value$645$18113)) (if (memv t$645$18118 (quote (core-prim))) ((lambda (name$645$18249) (list (quote primitive) name$645$18249)) value$645$18113) (if (memv t$645$18118 (quote (call))) (chi-application$645$12738 e$645$18106 r$645$18107 mr$645$18108) (if (memv t$645$18118 (quote (lexical))) ((lambda (lex$645$18247) lex$645$18247) value$645$18113) (if (memv t$645$18118 (quote (global-macro global-macro!))) (chi-expr$645$12740 (chi-global-macro$645$12734 value$645$18113 e$645$18106) r$645$18107 mr$645$18108) (if (memv t$645$18118 (quote (local-macro local-macro!))) (chi-expr$645$12740 (chi-local-macro$645$12732 value$645$18113 e$645$18106) r$645$18107 mr$645$18108) (if (memv t$645$18118 (quote (macro macro!))) (chi-expr$645$12740 (chi-macro$645$12730 value$645$18113 e$645$18106) r$645$18107 mr$645$18108) (if (memv t$645$18118 (quote (constant))) ((lambda (datum$645$18245) (list (quote quote) datum$645$18245)) value$645$18113) (if (memv t$645$18118 (quote (set!))) (chi-set!$645$12742 e$645$18106 r$645$18107 mr$645$18108) (if (memv t$645$18118 (quote (begin))) ((lambda (t$645$18207) ((lambda (ls/false$645$18209) (if (if ls/false$645$18209 (begin (quote #f) (apply (lambda (x$645$18211 x*$645$18212) (quote #t)) ls/false$645$18209)) (quote #f)) (apply (lambda (x$645$18215 x*$645$18216) (build-sequence$645$12091 (quote #f) (chi-expr*$645$12736 (cons x$645$18215 x*$645$18216) r$645$18107 mr$645$18108))) ls/false$645$18209) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18207 (quote ()))))) ((lambda (x$645$18219) (if (syntax-pair?$645$12194 x$645$18219) (begin (quote #f) ((lambda (q$645$18221) (if q$645$18221 (begin (quote #f) ((lambda (r$645$18223) (if r$645$18223 (begin (quote #f) (append q$645$18221 r$645$18223)) (quote #f))) ((lambda (x$645$18225) (if (syntax-pair?$645$12194 x$645$18225) (begin (quote #f) ((lambda (q$645$18227) (if q$645$18227 (begin (quote #f) ((lambda (r$645$18229) (if r$645$18229 (begin (quote #f) (append q$645$18227 r$645$18229)) (quote #f))) ((letrec ((f$645$18231 (lambda (x$645$18233) (if (syntax-pair?$645$12194 x$645$18233) ((lambda (cars/f$645$18235) (if cars/f$645$18235 (begin (quote #f) ((lambda (cdrs/f$645$18237) (if cdrs/f$645$18237 (begin (quote #f) (map cons cars/f$645$18235 cdrs/f$645$18237)) (quote #f))) (f$645$18231 (syntax-cdr$645$12206 x$645$18233)))) (quote #f))) ((lambda (x$645$18239) (list x$645$18239)) (syntax-car$645$12202 x$645$18233))) (if (syntax-null?$645$12198 x$645$18233) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$18231) (syntax-cdr$645$12206 x$645$18225)))) (quote #f))) ((lambda (x$645$18241) (list x$645$18241)) (syntax-car$645$12202 x$645$18225)))) (quote #f))) (syntax-cdr$645$12206 x$645$18219)))) (quote #f))) ((lambda (x$645$18243) (quote ())) (syntax-car$645$12202 x$645$18219)))) (quote #f))) t$645$18207))) e$645$18106) (if (memv t$645$18118 (quote (let-syntax letrec-syntax))) ((lambda (t$645$18119) ((lambda (ls/false$645$18121) (if (if ls/false$645$18121 (begin (quote #f) (apply (lambda (xlhs*$645$18123 xrhs*$645$18124 xbody$645$18125 xbody*$645$18126) (if (valid-bound-ids?$645$12218 xlhs*$645$18123) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (strip$645$12226 e$645$18106 (quote ()))))) ls/false$645$18121)) (quote #f)) (apply (lambda (xlhs*$645$18131 xrhs*$645$18132 xbody$645$18133 xbody*$645$18134) ((lambda (xlab*$645$18139) ((lambda (xrib$645$18141) ((lambda (xb*$645$18143) ((lambda () (build-sequence$645$12091 (quote #f) (chi-expr*$645$12736 (map (lambda (x$645$18145) (add-subst$645$12188 xrib$645$18141 x$645$18145)) (cons xbody$645$18133 xbody*$645$18134)) (append (map cons xlab*$645$18139 xb*$645$18143) r$645$18107) (append (map cons xlab*$645$18139 xb*$645$18143) mr$645$18108)))))) (map (lambda (x$645$18147) (make-eval-transformer$645$12272 (expand-transformer$645$12774 (if (eq? type$645$18112 (quote let-syntax)) x$645$18147 (add-subst$645$12188 xrib$645$18141 x$645$18147)) mr$645$18108))) xrhs*$645$18132))) (make-full-rib$645$12155 xlhs*$645$18131 xlab*$645$18139))) (map gen-label$645$12122 xlhs*$645$18131))) ls/false$645$18121) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18119 (quote ()))))) ((lambda (x$645$18149) (if (syntax-pair?$645$12194 x$645$18149) (begin (quote #f) ((lambda (q$645$18151) (if q$645$18151 (begin (quote #f) ((lambda (r$645$18153) (if r$645$18153 (begin (quote #f) (append q$645$18151 r$645$18153)) (quote #f))) ((lambda (x$645$18155) (if (syntax-pair?$645$12194 x$645$18155) (begin (quote #f) ((lambda (q$645$18157) (if q$645$18157 (begin (quote #f) ((lambda (r$645$18159) (if r$645$18159 (begin (quote #f) (append q$645$18157 r$645$18159)) (quote #f))) ((lambda (x$645$18161) (if (syntax-pair?$645$12194 x$645$18161) (begin (quote #f) ((lambda (q$645$18163) (if q$645$18163 (begin (quote #f) ((lambda (r$645$18165) (if r$645$18165 (begin (quote #f) (append q$645$18163 r$645$18165)) (quote #f))) ((letrec ((f$645$18167 (lambda (x$645$18169) (if (syntax-pair?$645$12194 x$645$18169) ((lambda (cars/f$645$18171) (if cars/f$645$18171 (begin (quote #f) ((lambda (cdrs/f$645$18173) (if cdrs/f$645$18173 (begin (quote #f) (map cons cars/f$645$18171 cdrs/f$645$18173)) (quote #f))) (f$645$18167 (syntax-cdr$645$12206 x$645$18169)))) (quote #f))) ((lambda (x$645$18175) (list x$645$18175)) (syntax-car$645$12202 x$645$18169))) (if (syntax-null?$645$12198 x$645$18169) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) f$645$18167) (syntax-cdr$645$12206 x$645$18161)))) (quote #f))) ((lambda (x$645$18177) (list x$645$18177)) (syntax-car$645$12202 x$645$18161)))) (quote #f))) (syntax-cdr$645$12206 x$645$18155)))) (quote #f))) ((letrec ((f$645$18179 (lambda (x$645$18181) (if (syntax-pair?$645$12194 x$645$18181) ((lambda (cars/f$645$18183) (if cars/f$645$18183 (begin (quote #f) ((lambda (cdrs/f$645$18185) (if cdrs/f$645$18185 (begin (quote #f) (map cons cars/f$645$18183 cdrs/f$645$18185)) (quote #f))) (f$645$18179 (syntax-cdr$645$12206 x$645$18181)))) (quote #f))) ((lambda (x$645$18187) (if (syntax-pair?$645$12194 x$645$18187) (begin (quote #f) ((lambda (q$645$18189) (if q$645$18189 (begin (quote #f) ((lambda (r$645$18191) (if r$645$18191 (begin (quote #f) (append q$645$18189 r$645$18191)) (quote #f))) ((lambda (x$645$18193) (if (syntax-pair?$645$12194 x$645$18193) (begin (quote #f) ((lambda (q$645$18195) (if q$645$18195 (begin (quote #f) ((lambda (r$645$18197) (if r$645$18197 (begin (quote #f) (append q$645$18195 r$645$18197)) (quote #f))) ((lambda (x$645$18199) (if (equal? (stx->datum$645$12228 x$645$18199) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$18193)))) (quote #f))) ((lambda (x$645$18201) (list x$645$18201)) (syntax-car$645$12202 x$645$18193)))) (quote #f))) (syntax-cdr$645$12206 x$645$18187)))) (quote #f))) ((lambda (x$645$18203) (list x$645$18203)) (syntax-car$645$12202 x$645$18187)))) (quote #f))) (syntax-car$645$12202 x$645$18181))) (if (syntax-null?$645$12198 x$645$18181) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) f$645$18179) (syntax-car$645$12202 x$645$18155)))) (quote #f))) (syntax-cdr$645$12206 x$645$18149)))) (quote #f))) ((lambda (x$645$18205) (quote ())) (syntax-car$645$12202 x$645$18149)))) (quote #f))) t$645$18119))) e$645$18106) (if (memv t$645$18118 (quote (displaced-lexical))) (error (quote expander) (quote "~a ~s") (quote "identifier out of context") (strip$645$12226 e$645$18106 (quote ()))) (if (memv t$645$18118 (quote (syntax))) (error (quote expander) (quote "~a ~s") (quote "reference to pattern variable outside a syntax form") (strip$645$12226 e$645$18106 (quote ()))) (if (memv t$645$18118 (quote (define define-syntax module import))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (strip$645$12226 e$645$18106 (quote ()))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (strip$645$12226 e$645$18106 (quote ()))))))))))))))))))) type$645$18112))))) (set! chi-set!$645$12742 (lambda (e$645$18257 r$645$18258 mr$645$18259) ((lambda (t$645$18263) ((lambda (ls/false$645$18265) (if (if ls/false$645$18265 (begin (quote #f) (apply (lambda (x$645$18267 v$645$18268) (id?$645$12208 x$645$18267)) ls/false$645$18265)) (quote #f)) (apply (lambda (x$645$18271 v$645$18272) (call-with-values (lambda () (syntax-type$645$12240 x$645$18271 r$645$18258)) (lambda (type$645$18275 value$645$18276 kwd$645$18277) ((lambda (t$645$18281) (if (memv t$645$18281 (quote (lexical))) (list (quote set!) value$645$18276 (chi-expr$645$12740 v$645$18272 r$645$18258 mr$645$18259)) (if (memv t$645$18281 (quote (global core-prim))) (error (quote expander) (quote "~a ~s") (quote "cannot modify imported identifier in") (strip$645$12226 e$645$18257 (quote ()))) (if (memv t$645$18281 (quote (global-macro!))) (chi-expr$645$12740 (chi-global-macro$645$12734 value$645$18276 e$645$18257) r$645$18258 mr$645$18259) (if (memv t$645$18281 (quote (local-macro!))) (chi-expr$645$12740 (chi-local-macro$645$12732 value$645$18276 e$645$18257) r$645$18258 mr$645$18259) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 e$645$18257))))))) type$645$18275)))) ls/false$645$18265) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18263 (quote ()))))) ((lambda (x$645$18282) (if (syntax-pair?$645$12194 x$645$18282) (begin (quote #f) ((lambda (q$645$18284) (if q$645$18284 (begin (quote #f) ((lambda (r$645$18286) (if r$645$18286 (begin (quote #f) (append q$645$18284 r$645$18286)) (quote #f))) ((lambda (x$645$18288) (if (syntax-pair?$645$12194 x$645$18288) (begin (quote #f) ((lambda (q$645$18290) (if q$645$18290 (begin (quote #f) ((lambda (r$645$18292) (if r$645$18292 (begin (quote #f) (append q$645$18290 r$645$18292)) (quote #f))) ((lambda (x$645$18294) (if (syntax-pair?$645$12194 x$645$18294) (begin (quote #f) ((lambda (q$645$18296) (if q$645$18296 (begin (quote #f) ((lambda (r$645$18298) (if r$645$18298 (begin (quote #f) (append q$645$18296 r$645$18298)) (quote #f))) ((lambda (x$645$18300) (if (equal? (stx->datum$645$12228 x$645$18300) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$18294)))) (quote #f))) ((lambda (x$645$18302) (list x$645$18302)) (syntax-car$645$12202 x$645$18294)))) (quote #f))) (syntax-cdr$645$12206 x$645$18288)))) (quote #f))) ((lambda (x$645$18304) (list x$645$18304)) (syntax-car$645$12202 x$645$18288)))) (quote #f))) (syntax-cdr$645$12206 x$645$18282)))) (quote #f))) ((lambda (x$645$18306) (quote ())) (syntax-car$645$12202 x$645$18282)))) (quote #f))) t$645$18263))) e$645$18257))) (set! chi-lambda-clause$645$12744 (lambda (fmls$645$18308 body*$645$18309 r$645$18310 mr$645$18311) ((lambda (t$645$18316) ((lambda (ls/false$645$18318) (if (if ls/false$645$18318 (begin (quote #f) (apply (lambda (x*$645$18320) (quote #t)) ls/false$645$18318)) (quote #f)) (apply (lambda (x*$645$18322) (if (valid-bound-ids?$645$12218 x*$645$18322) ((lambda (lex*$645$18324 lab*$645$18325) (values lex*$645$18324 (chi-internal$645$12756 (add-subst$645$12188 (make-full-rib$645$12155 x*$645$18322 lab*$645$18325) body*$645$18309) (add-lexicals$645$12642 lab*$645$18325 lex*$645$18324 r$645$18310) mr$645$18311))) (map gen-lexical$645$12118 x*$645$18322) (map gen-label$645$12122 x*$645$18322)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (strip$645$12226 fmls$645$18308 (quote ()))))) ls/false$645$18318) ((lambda (t$645$18328) ((lambda (ls/false$645$18330) (if (if ls/false$645$18330 (begin (quote #f) (apply (lambda (x*$645$18332 x$645$18333) (quote #t)) ls/false$645$18330)) (quote #f)) (apply (lambda (x*$645$18336 x$645$18337) (if (valid-bound-ids?$645$12218 (cons x$645$18337 x*$645$18336)) ((lambda (lex*$645$18340 lab*$645$18341 lex$645$18342 lab$645$18343) (values (append lex*$645$18340 lex$645$18342) (chi-internal$645$12756 (add-subst$645$12188 (make-full-rib$645$12155 (cons x$645$18337 x*$645$18336) (cons lab$645$18343 lab*$645$18341)) body*$645$18309) (add-lexicals$645$12642 (cons lab$645$18343 lab*$645$18341) (cons lex$645$18342 lex*$645$18340) r$645$18310) mr$645$18311))) (map gen-lexical$645$12118 x*$645$18336) (map gen-label$645$12122 x*$645$18336) (gen-lexical$645$12118 x$645$18337) (gen-label$645$12122 x$645$18337)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (strip$645$12226 fmls$645$18308 (quote ()))))) ls/false$645$18330) ((lambda (t$645$18348) ((lambda (ls/false$645$18350) (if (if ls/false$645$18350 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$18350)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (strip$645$12226 fmls$645$18308 (quote ())))) ls/false$645$18350) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18348 (quote ()))))) ((lambda (x$645$18352) (quote ())) t$645$18348))) t$645$18328))) ((letrec ((f$645$18354 (lambda (x$645$18360) (if (syntax-pair?$645$12194 x$645$18360) ((lambda (cars/f$645$18362) (if cars/f$645$18362 (begin (quote #f) ((lambda (d/f$645$18364) (if d/f$645$18364 (begin (quote #f) (cons (map cons cars/f$645$18362 (car d/f$645$18364)) (cdr d/f$645$18364))) (quote #f))) (f$645$18354 (syntax-cdr$645$12206 x$645$18360)))) (quote #f))) ((lambda (x$645$18366) (list x$645$18366)) (syntax-car$645$12202 x$645$18360))) ((lambda (d$645$18368) (if d$645$18368 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) d$645$18368)) (quote #f))) ((lambda (x$645$18370) (list x$645$18370)) x$645$18360)))))) (lambda (x$645$18356) ((lambda (x$645$18358) (if x$645$18358 (begin (quote #f) (append (car x$645$18358) (cdr x$645$18358))) (quote #f))) (f$645$18354 x$645$18356)))) t$645$18328))) t$645$18316))) ((letrec ((f$645$18372 (lambda (x$645$18374) (if (syntax-pair?$645$12194 x$645$18374) ((lambda (cars/f$645$18376) (if cars/f$645$18376 (begin (quote #f) ((lambda (cdrs/f$645$18378) (if cdrs/f$645$18378 (begin (quote #f) (map cons cars/f$645$18376 cdrs/f$645$18378)) (quote #f))) (f$645$18372 (syntax-cdr$645$12206 x$645$18374)))) (quote #f))) ((lambda (x$645$18380) (list x$645$18380)) (syntax-car$645$12202 x$645$18374))) (if (syntax-null?$645$12198 x$645$18374) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$18372) t$645$18316))) fmls$645$18308))) (set! chi-lambda-clause*$645$12746 (lambda (fmls*$645$18382 body**$645$18383 r$645$18384 mr$645$18385) (if (null? fmls*$645$18382) (values (quote ()) (quote ())) (call-with-values (lambda () (chi-lambda-clause$645$12744 (car fmls*$645$18382) (car body**$645$18383) r$645$18384 mr$645$18385)) (lambda (a$645$18390 b$645$18391) (call-with-values (lambda () (chi-lambda-clause*$645$12746 (cdr fmls*$645$18382) (cdr body**$645$18383) r$645$18384 mr$645$18385)) (lambda (a*$645$18394 b*$645$18395) (values (cons a$645$18390 a*$645$18394) (cons b$645$18391 b*$645$18395))))))))) (set! chi-rhs$645$12748 (lambda (rhs$645$18398 r$645$18399 mr$645$18400) ((lambda (t$645$18404) (if (memv t$645$18404 (quote (defun))) ((lambda (x$645$18409) ((lambda (fmls$645$18411 body*$645$18412) (call-with-values (lambda () (chi-lambda-clause$645$12744 fmls$645$18411 body*$645$18412 r$645$18399 mr$645$18400)) (lambda (fmls$645$18415 body$645$18416) (build-lambda$645$12097 (quote #f) fmls$645$18415 body$645$18416)))) (car x$645$18409) (cdr x$645$18409))) (cdr rhs$645$18398)) (if (memv t$645$18404 (quote (expr))) ((lambda (expr$645$18407) (chi-expr$645$12740 expr$645$18407 r$645$18399 mr$645$18400)) (cdr rhs$645$18398)) (if (memv t$645$18404 (quote (top-expr))) ((lambda (expr$645$18405) (build-sequence$645$12091 (quote #f) (list (chi-expr$645$12740 expr$645$18405 r$645$18399 mr$645$18400) (build-void$645$12090)))) (cdr rhs$645$18398)) (error (quote chi-rhs) (quote "invalid rhs ~s") rhs$645$18398))))) (car rhs$645$18398)))) (set! chi-rhs*$645$12750 (lambda (rhs*$645$18419 r$645$18420 mr$645$18421) (letrec ((f$645$18425 (lambda (ls$645$18427) (if (null? ls$645$18427) (quote ()) ((lambda (a$645$18429) (cons a$645$18429 (f$645$18425 (cdr ls$645$18427)))) (chi-rhs$645$12748 (car ls$645$18427) r$645$18420 mr$645$18421)))))) (f$645$18425 rhs*$645$18419)))) (set! find-bound=?$645$12752 (lambda (x$645$18431 lhs*$645$18432 rhs*$645$18433) (if (null? lhs*$645$18432) (quote #f) (if (bound-id=?$645$12214 x$645$18431 (car lhs*$645$18432)) (car rhs*$645$18433) (find-bound=?$645$12752 x$645$18431 (cdr lhs*$645$18432) (cdr rhs*$645$18433)))))) (set! find-dups$645$12754 (lambda (ls$645$18437) (letrec ((f$645$18439 (lambda (ls$645$18441 dups$645$18442) (if (null? ls$645$18441) dups$645$18442 ((lambda (t$645$18445) (if t$645$18445 ((lambda (x$645$18447) (f$645$18439 (cdr ls$645$18441) (cons (list (car ls$645$18441) x$645$18447) dups$645$18442))) t$645$18445) (f$645$18439 (cdr ls$645$18441) dups$645$18442))) (find-bound=?$645$12752 (car ls$645$18441) (cdr ls$645$18441) (cdr ls$645$18441))))))) (f$645$18439 ls$645$18437 (quote ()))))) (set! chi-internal$645$12756 (lambda (e*$645$18449 r$645$18450 mr$645$18451) ((lambda (rib$645$18455) (call-with-values (lambda () (chi-body*$645$12762 (map (lambda (x$645$18457) (add-subst$645$12188 rib$645$18455 x$645$18457)) (syntax->list$645$12204 e*$645$18449)) r$645$18450 mr$645$18451 (quote ()) (quote ()) (quote ()) (quote ()) rib$645$18455 (quote #f))) (lambda (e*$645$18459 r$645$18460 mr$645$18461 lex*$645$18462 rhs*$645$18463 mod**$645$18464 kwd*$645$18465) (begin (if (null? e*$645$18459) (error (quote expander) (quote "~a ~s") (quote "no expression in body") (strip$645$12226 e*$645$18459 (quote ()))) (void)) ((lambda (rhs*$645$18473 init*$645$18474) (build-letrec*$645$12088 (quote #f) (reverse lex*$645$18462) (reverse rhs*$645$18473) (build-sequence$645$12091 (quote #f) init*$645$18474))) (chi-rhs*$645$12750 rhs*$645$18463 r$645$18460 mr$645$18461) (chi-expr*$645$12736 (append (apply append (reverse mod**$645$18464)) e*$645$18459) r$645$18460 mr$645$18461)))))) (make-empty-rib$645$12145)))) (set! parse-module$645$12758 (lambda (e$645$18477) ((lambda (t$645$18479) ((lambda (ls/false$645$18481) (if (if ls/false$645$18481 (begin (quote #f) (apply (lambda (export*$645$18483 b*$645$18484) (quote #t)) ls/false$645$18481)) (quote #f)) (apply (lambda (export*$645$18487 b*$645$18488) (begin (if (for-all id?$645$12208 export*$645$18487) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (strip$645$12226 e$645$18477 (quote ())))) (values (quote #f) export*$645$18487 b*$645$18488))) ls/false$645$18481) ((lambda (t$645$18491) ((lambda (ls/false$645$18493) (if (if ls/false$645$18493 (begin (quote #f) (apply (lambda (name$645$18495 export*$645$18496 b*$645$18497) (quote #t)) ls/false$645$18493)) (quote #f)) (apply (lambda (name$645$18501 export*$645$18502 b*$645$18503) (begin (if (id?$645$12208 name$645$18501) (void) (error (quote expander) (quote "~a ~s") (quote "module name must be an identifier") (strip$645$12226 e$645$18477 (quote ())))) (if (for-all id?$645$12208 export*$645$18502) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (strip$645$12226 e$645$18477 (quote ())))) (values name$645$18501 export*$645$18502 b*$645$18503))) ls/false$645$18493) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18491 (quote ()))))) ((lambda (x$645$18507) (if (syntax-pair?$645$12194 x$645$18507) (begin (quote #f) ((lambda (q$645$18509) (if q$645$18509 (begin (quote #f) ((lambda (r$645$18511) (if r$645$18511 (begin (quote #f) (append q$645$18509 r$645$18511)) (quote #f))) ((lambda (x$645$18513) (if (syntax-pair?$645$12194 x$645$18513) (begin (quote #f) ((lambda (q$645$18515) (if q$645$18515 (begin (quote #f) ((lambda (r$645$18517) (if r$645$18517 (begin (quote #f) (append q$645$18515 r$645$18517)) (quote #f))) ((lambda (x$645$18519) (if (syntax-pair?$645$12194 x$645$18519) (begin (quote #f) ((lambda (q$645$18521) (if q$645$18521 (begin (quote #f) ((lambda (r$645$18523) (if r$645$18523 (begin (quote #f) (append q$645$18521 r$645$18523)) (quote #f))) ((letrec ((f$645$18525 (lambda (x$645$18527) (if (syntax-pair?$645$12194 x$645$18527) ((lambda (cars/f$645$18529) (if cars/f$645$18529 (begin (quote #f) ((lambda (cdrs/f$645$18531) (if cdrs/f$645$18531 (begin (quote #f) (map cons cars/f$645$18529 cdrs/f$645$18531)) (quote #f))) (f$645$18525 (syntax-cdr$645$12206 x$645$18527)))) (quote #f))) ((lambda (x$645$18533) (list x$645$18533)) (syntax-car$645$12202 x$645$18527))) (if (syntax-null?$645$12198 x$645$18527) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$18525) (syntax-cdr$645$12206 x$645$18519)))) (quote #f))) ((letrec ((f$645$18535 (lambda (x$645$18537) (if (syntax-pair?$645$12194 x$645$18537) ((lambda (cars/f$645$18539) (if cars/f$645$18539 (begin (quote #f) ((lambda (cdrs/f$645$18541) (if cdrs/f$645$18541 (begin (quote #f) (map cons cars/f$645$18539 cdrs/f$645$18541)) (quote #f))) (f$645$18535 (syntax-cdr$645$12206 x$645$18537)))) (quote #f))) ((lambda (x$645$18543) (list x$645$18543)) (syntax-car$645$12202 x$645$18537))) (if (syntax-null?$645$12198 x$645$18537) (list (begin (quote export*) (quote ()))) (quote #f)))))) f$645$18535) (syntax-car$645$12202 x$645$18519)))) (quote #f))) (syntax-cdr$645$12206 x$645$18513)))) (quote #f))) ((lambda (x$645$18545) (list x$645$18545)) (syntax-car$645$12202 x$645$18513)))) (quote #f))) (syntax-cdr$645$12206 x$645$18507)))) (quote #f))) ((lambda (x$645$18547) (quote ())) (syntax-car$645$12202 x$645$18507)))) (quote #f))) t$645$18491))) t$645$18479))) ((lambda (x$645$18549) (if (syntax-pair?$645$12194 x$645$18549) (begin (quote #f) ((lambda (q$645$18551) (if q$645$18551 (begin (quote #f) ((lambda (r$645$18553) (if r$645$18553 (begin (quote #f) (append q$645$18551 r$645$18553)) (quote #f))) ((lambda (x$645$18555) (if (syntax-pair?$645$12194 x$645$18555) (begin (quote #f) ((lambda (q$645$18557) (if q$645$18557 (begin (quote #f) ((lambda (r$645$18559) (if r$645$18559 (begin (quote #f) (append q$645$18557 r$645$18559)) (quote #f))) ((letrec ((f$645$18561 (lambda (x$645$18563) (if (syntax-pair?$645$12194 x$645$18563) ((lambda (cars/f$645$18565) (if cars/f$645$18565 (begin (quote #f) ((lambda (cdrs/f$645$18567) (if cdrs/f$645$18567 (begin (quote #f) (map cons cars/f$645$18565 cdrs/f$645$18567)) (quote #f))) (f$645$18561 (syntax-cdr$645$12206 x$645$18563)))) (quote #f))) ((lambda (x$645$18569) (list x$645$18569)) (syntax-car$645$12202 x$645$18563))) (if (syntax-null?$645$12198 x$645$18563) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$18561) (syntax-cdr$645$12206 x$645$18555)))) (quote #f))) ((letrec ((f$645$18571 (lambda (x$645$18573) (if (syntax-pair?$645$12194 x$645$18573) ((lambda (cars/f$645$18575) (if cars/f$645$18575 (begin (quote #f) ((lambda (cdrs/f$645$18577) (if cdrs/f$645$18577 (begin (quote #f) (map cons cars/f$645$18575 cdrs/f$645$18577)) (quote #f))) (f$645$18571 (syntax-cdr$645$12206 x$645$18573)))) (quote #f))) ((lambda (x$645$18579) (list x$645$18579)) (syntax-car$645$12202 x$645$18573))) (if (syntax-null?$645$12198 x$645$18573) (list (begin (quote export*) (quote ()))) (quote #f)))))) f$645$18571) (syntax-car$645$12202 x$645$18555)))) (quote #f))) (syntax-cdr$645$12206 x$645$18549)))) (quote #f))) ((lambda (x$645$18581) (quote ())) (syntax-car$645$12202 x$645$18549)))) (quote #f))) t$645$18479))) e$645$18477))) (set! chi-internal-module$645$12760 (lambda (e$645$18583 r$645$18584 mr$645$18585 lex*$645$18586 rhs*$645$18587 mod**$645$18588 kwd*$645$18589) (call-with-values (lambda () (parse-module$645$12758 e$645$18583)) (lambda (name$645$18597 exp-id*$645$18598 e*$645$18599) ((lambda (rib$645$18603) ((lambda (e*$645$18605) ((lambda () (call-with-values (lambda () (chi-body*$645$12762 e*$645$18605 r$645$18584 mr$645$18585 lex*$645$18586 rhs*$645$18587 mod**$645$18588 kwd*$645$18589 rib$645$18603 (quote #f))) (lambda (e*$645$18607 r$645$18608 mr$645$18609 lex*$645$18610 rhs*$645$18611 mod**$645$18612 kwd*$645$18613) ((lambda (exp-lab*$645$18621 mod**$645$18622) (if (not name$645$18597) (values lex*$645$18610 rhs*$645$18611 exp-id*$645$18598 exp-lab*$645$18621 r$645$18608 mr$645$18609 mod**$645$18622 kwd*$645$18613) ((lambda (lab$645$18625 iface$645$18626) (values lex*$645$18610 rhs*$645$18611 (list name$645$18597) (list lab$645$18625) (cons (cons lab$645$18625 (cons (quote $module) iface$645$18626)) r$645$18608) (cons (cons lab$645$18625 (cons (quote $module) iface$645$18626)) mr$645$18609) mod**$645$18622 kwd*$645$18613)) (gen-label$645$12122 (quote module)) (cons exp-id*$645$18598 exp-lab*$645$18621)))) (map (lambda (x$645$18629) ((lambda (t$645$18631) (if t$645$18631 t$645$18631 (begin (quote #f) (error (quote expander) (quote "~a ~s") (quote "cannot find module export") (strip$645$12226 x$645$18629 (quote ())))))) (id->label$645$12230 (add-subst$645$12188 rib$645$18603 x$645$18629)))) exp-id*$645$18598) (cons e*$645$18607 mod**$645$18612))))))) (map (lambda (x$645$18633) (add-subst$645$12188 rib$645$18603 x$645$18633)) (syntax->list$645$12204 e*$645$18599)))) (make-empty-rib$645$12145)))))) (set! chi-body*$645$12762 (lambda (e*$645$18635 r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18641 rib$645$18642 top?$645$18643) (if (null? e*$645$18635) (values e*$645$18635 r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18641) ((lambda (e$645$18653) (call-with-values (lambda () (syntax-type$645$12240 e$645$18653 r$645$18636)) (lambda (type$645$18655 value$645$18656 kwd$645$18657) ((lambda (kwd*$645$18661) ((lambda (t$645$18663) (if (memv t$645$18663 (quote (define))) (call-with-values (lambda () (parse-define$645$12634 e$645$18653)) (lambda (id$645$18849 rhs$645$18850) (begin (if (bound-id-member?$645$12222 id$645$18849 kwd*$645$18661) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (strip$645$12226 e$645$18653 (quote ()))) (void)) ((lambda (lex$645$18853 lab$645$18854) (begin (extend-rib!$645$12147 rib$645$18642 id$645$18849 lab$645$18854) (chi-body*$645$12762 (cdr e*$645$18635) (add-lexical$645$12640 lab$645$18854 lex$645$18853 r$645$18636) mr$645$18637 (cons lex$645$18853 lex*$645$18638) (cons rhs$645$18850 rhs*$645$18639) mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643))) (gen-lexical$645$12118 id$645$18849) (gen-label$645$12122 id$645$18849))))) (if (memv t$645$18663 (quote (define-syntax))) (call-with-values (lambda () (parse-define-syntax$645$12636 e$645$18653)) (lambda (id$645$18839 rhs$645$18840) (begin (if (bound-id-member?$645$12222 id$645$18839 kwd*$645$18661) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (strip$645$12226 e$645$18653 (quote ()))) (void)) ((lambda (lab$645$18843 expanded-rhs$645$18844) (begin (extend-rib!$645$12147 rib$645$18642 id$645$18839 lab$645$18843) ((lambda (b$645$18847) (chi-body*$645$12762 (cdr e*$645$18635) (cons (cons lab$645$18843 b$645$18847) r$645$18636) (cons (cons lab$645$18843 b$645$18847) mr$645$18637) lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643)) (make-eval-transformer$645$12272 expanded-rhs$645$18844)))) (gen-label$645$12122 id$645$18839) (expand-transformer$645$12774 rhs$645$18840 mr$645$18637))))) (if (memv t$645$18663 (quote (let-syntax letrec-syntax))) ((lambda (t$645$18763) ((lambda (ls/false$645$18765) (if (if ls/false$645$18765 (begin (quote #f) (apply (lambda (xlhs*$645$18767 xrhs*$645$18768 xbody*$645$18769) (if (valid-bound-ids?$645$12218 xlhs*$645$18767) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (strip$645$12226 e$645$18653 (quote ()))))) ls/false$645$18765)) (quote #f)) (apply (lambda (xlhs*$645$18773 xrhs*$645$18774 xbody*$645$18775) ((lambda (xlab*$645$18779) ((lambda (xrib$645$18781) ((lambda (xb*$645$18783) ((lambda () (chi-body*$645$12762 (append (map (lambda (x$645$18785) (add-subst$645$12188 xrib$645$18781 x$645$18785)) xbody*$645$18775) (cdr e*$645$18635)) (append (map cons xlab*$645$18779 xb*$645$18783) r$645$18636) (append (map cons xlab*$645$18779 xb*$645$18783) mr$645$18637) lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643)))) (map (lambda (x$645$18787) (make-eval-transformer$645$12272 (expand-transformer$645$12774 (if (eq? type$645$18655 (quote let-syntax)) x$645$18787 (add-subst$645$12188 xrib$645$18781 x$645$18787)) mr$645$18637))) xrhs*$645$18774))) (make-full-rib$645$12155 xlhs*$645$18773 xlab*$645$18779))) (map gen-label$645$12122 xlhs*$645$18773))) ls/false$645$18765) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18763 (quote ()))))) ((lambda (x$645$18789) (if (syntax-pair?$645$12194 x$645$18789) (begin (quote #f) ((lambda (q$645$18791) (if q$645$18791 (begin (quote #f) ((lambda (r$645$18793) (if r$645$18793 (begin (quote #f) (append q$645$18791 r$645$18793)) (quote #f))) ((lambda (x$645$18795) (if (syntax-pair?$645$12194 x$645$18795) (begin (quote #f) ((lambda (q$645$18797) (if q$645$18797 (begin (quote #f) ((lambda (r$645$18799) (if r$645$18799 (begin (quote #f) (append q$645$18797 r$645$18799)) (quote #f))) ((letrec ((f$645$18801 (lambda (x$645$18803) (if (syntax-pair?$645$12194 x$645$18803) ((lambda (cars/f$645$18805) (if cars/f$645$18805 (begin (quote #f) ((lambda (cdrs/f$645$18807) (if cdrs/f$645$18807 (begin (quote #f) (map cons cars/f$645$18805 cdrs/f$645$18807)) (quote #f))) (f$645$18801 (syntax-cdr$645$12206 x$645$18803)))) (quote #f))) ((lambda (x$645$18809) (list x$645$18809)) (syntax-car$645$12202 x$645$18803))) (if (syntax-null?$645$12198 x$645$18803) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) f$645$18801) (syntax-cdr$645$12206 x$645$18795)))) (quote #f))) ((letrec ((f$645$18811 (lambda (x$645$18813) (if (syntax-pair?$645$12194 x$645$18813) ((lambda (cars/f$645$18815) (if cars/f$645$18815 (begin (quote #f) ((lambda (cdrs/f$645$18817) (if cdrs/f$645$18817 (begin (quote #f) (map cons cars/f$645$18815 cdrs/f$645$18817)) (quote #f))) (f$645$18811 (syntax-cdr$645$12206 x$645$18813)))) (quote #f))) ((lambda (x$645$18819) (if (syntax-pair?$645$12194 x$645$18819) (begin (quote #f) ((lambda (q$645$18821) (if q$645$18821 (begin (quote #f) ((lambda (r$645$18823) (if r$645$18823 (begin (quote #f) (append q$645$18821 r$645$18823)) (quote #f))) ((lambda (x$645$18825) (if (syntax-pair?$645$12194 x$645$18825) (begin (quote #f) ((lambda (q$645$18827) (if q$645$18827 (begin (quote #f) ((lambda (r$645$18829) (if r$645$18829 (begin (quote #f) (append q$645$18827 r$645$18829)) (quote #f))) ((lambda (x$645$18831) (if (equal? (stx->datum$645$12228 x$645$18831) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$18825)))) (quote #f))) ((lambda (x$645$18833) (list x$645$18833)) (syntax-car$645$12202 x$645$18825)))) (quote #f))) (syntax-cdr$645$12206 x$645$18819)))) (quote #f))) ((lambda (x$645$18835) (list x$645$18835)) (syntax-car$645$12202 x$645$18819)))) (quote #f))) (syntax-car$645$12202 x$645$18813))) (if (syntax-null?$645$12198 x$645$18813) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) f$645$18811) (syntax-car$645$12202 x$645$18795)))) (quote #f))) (syntax-cdr$645$12206 x$645$18789)))) (quote #f))) ((lambda (x$645$18837) (quote ())) (syntax-car$645$12202 x$645$18789)))) (quote #f))) t$645$18763))) e$645$18653) (if (memv t$645$18663 (quote (begin))) ((lambda (t$645$18737) ((lambda (ls/false$645$18739) (if (if ls/false$645$18739 (begin (quote #f) (apply (lambda (x*$645$18741) (quote #t)) ls/false$645$18739)) (quote #f)) (apply (lambda (x*$645$18743) (chi-body*$645$12762 (append x*$645$18743 (cdr e*$645$18635)) r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643)) ls/false$645$18739) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18737 (quote ()))))) ((lambda (x$645$18745) (if (syntax-pair?$645$12194 x$645$18745) (begin (quote #f) ((lambda (q$645$18747) (if q$645$18747 (begin (quote #f) ((lambda (r$645$18749) (if r$645$18749 (begin (quote #f) (append q$645$18747 r$645$18749)) (quote #f))) ((letrec ((f$645$18751 (lambda (x$645$18753) (if (syntax-pair?$645$12194 x$645$18753) ((lambda (cars/f$645$18755) (if cars/f$645$18755 (begin (quote #f) ((lambda (cdrs/f$645$18757) (if cdrs/f$645$18757 (begin (quote #f) (map cons cars/f$645$18755 cdrs/f$645$18757)) (quote #f))) (f$645$18751 (syntax-cdr$645$12206 x$645$18753)))) (quote #f))) ((lambda (x$645$18759) (list x$645$18759)) (syntax-car$645$12202 x$645$18753))) (if (syntax-null?$645$12198 x$645$18753) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$18751) (syntax-cdr$645$12206 x$645$18745)))) (quote #f))) ((lambda (x$645$18761) (quote ())) (syntax-car$645$12202 x$645$18745)))) (quote #f))) t$645$18737))) e$645$18653) (if (memv t$645$18663 (quote (global-macro global-macro!))) (chi-body*$645$12762 (cons (add-subst$645$12188 rib$645$18642 (chi-global-macro$645$12734 value$645$18656 e$645$18653)) (cdr e*$645$18635)) r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643) (if (memv t$645$18663 (quote (local-macro local-macro!))) (chi-body*$645$12762 (cons (add-subst$645$12188 rib$645$18642 (chi-local-macro$645$12732 value$645$18656 e$645$18653)) (cdr e*$645$18635)) r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643) (if (memv t$645$18663 (quote (macro macro!))) (chi-body*$645$12762 (cons (add-subst$645$12188 rib$645$18642 (chi-macro$645$12730 value$645$18656 e$645$18653)) (cdr e*$645$18635)) r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643) (if (memv t$645$18663 (quote (module))) (call-with-values (lambda () (chi-internal-module$645$12760 e$645$18653 r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661)) (lambda (lex*$645$18717 rhs*$645$18718 m-exp-id*$645$18719 m-exp-lab*$645$18720 r$645$18721 mr$645$18722 mod**$645$18723 kwd*$645$18724) (begin (for-each (lambda (id$645$18733 lab$645$18734) (extend-rib!$645$12147 rib$645$18642 id$645$18733 lab$645$18734)) m-exp-id*$645$18719 m-exp-lab*$645$18720) (chi-body*$645$12762 (cdr e*$645$18635) r$645$18721 mr$645$18722 lex*$645$18717 rhs*$645$18718 mod**$645$18723 kwd*$645$18724 rib$645$18642 top?$645$18643)))) (if (memv t$645$18663 (quote (import))) (begin ((lambda () ((lambda (module-import$645$18664) (begin (set! module-import$645$18664 (lambda (e$645$18666 r$645$18667) ((lambda (t$645$18670) ((lambda (ls/false$645$18672) (if (if ls/false$645$18672 (begin (quote #f) (apply (lambda (id$645$18674) (id?$645$12208 id$645$18674)) ls/false$645$18672)) (quote #f)) (apply (lambda (id$645$18676) (call-with-values (lambda () (syntax-type$645$12240 id$645$18676 r$645$18667)) (lambda (type$645$18678 value$645$18679 kwd$645$18680) ((lambda (t$645$18684) (if (memv t$645$18684 (quote ($module))) ((lambda (iface$645$18685) ((lambda (id*$645$18687 lab*$645$18688) (values id*$645$18687 lab*$645$18688)) (car iface$645$18685) (cdr iface$645$18685))) value$645$18679) (error (quote expander) (quote "~a ~s") (quote "invalid import") (strip$645$12226 e$645$18666 (quote ()))))) type$645$18678)))) ls/false$645$18672) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18670 (quote ()))))) ((lambda (x$645$18691) (if (syntax-pair?$645$12194 x$645$18691) (begin (quote #f) ((lambda (q$645$18693) (if q$645$18693 (begin (quote #f) ((lambda (r$645$18695) (if r$645$18695 (begin (quote #f) (append q$645$18693 r$645$18695)) (quote #f))) ((lambda (x$645$18697) (if (syntax-pair?$645$12194 x$645$18697) (begin (quote #f) ((lambda (q$645$18699) (if q$645$18699 (begin (quote #f) ((lambda (r$645$18701) (if r$645$18701 (begin (quote #f) (append q$645$18699 r$645$18701)) (quote #f))) ((lambda (x$645$18703) (if (equal? (stx->datum$645$12228 x$645$18703) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$18697)))) (quote #f))) ((lambda (x$645$18705) (list x$645$18705)) (syntax-car$645$12202 x$645$18697)))) (quote #f))) (syntax-cdr$645$12206 x$645$18691)))) (quote #f))) ((lambda (x$645$18707) (quote ())) (syntax-car$645$12202 x$645$18691)))) (quote #f))) t$645$18670))) e$645$18666))) (call-with-values (lambda () (module-import$645$18664 e$645$18653 r$645$18636)) (lambda (id*$645$18709 lab*$645$18710) (for-each (lambda (id$645$18713 lab$645$18714) (extend-rib!$645$12147 rib$645$18642 id$645$18713 lab$645$18714)) id*$645$18709 lab*$645$18710))))) (quote #f)))) (chi-body*$645$12762 (cdr e*$645$18635) r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643)) (if top?$645$18643 (chi-body*$645$12762 (cdr e*$645$18635) r$645$18636 mr$645$18637 (cons (gen-lexical$645$12118 (quote dummy)) lex*$645$18638) (cons (cons (quote top-expr) e$645$18653) rhs*$645$18639) mod**$645$18640 kwd*$645$18661 rib$645$18642 top?$645$18643) (values e*$645$18635 r$645$18636 mr$645$18637 lex*$645$18638 rhs*$645$18639 mod**$645$18640 kwd*$645$18661)))))))))))) type$645$18655)) (if (id?$645$12208 kwd$645$18657) (cons kwd$645$18657 kwd*$645$18641) kwd*$645$18641))))) (car e*$645$18635))))) (set! set-global-macro-binding!$645$12764 (lambda (sym$645$18857 loc$645$18858 b$645$18859) (begin (extend-library-subst!$645$11749 (interaction-library$645$12855) sym$645$18857 loc$645$18858) (extend-library-env!$645$11748 (interaction-library$645$12855) loc$645$18858 b$645$18859)))) (set! gen-global-macro-binding$645$12766 (lambda (id$645$18863 ctxt$645$18864) (gen-global-var-binding$645$12768 id$645$18863 ctxt$645$18864))) (set! gen-global-var-binding$645$12768 (lambda (id$645$18867 ctxt$645$18868) ((lambda (label$645$18871) ((lambda (b$645$18873) ((lambda (t$645$18875) (if (memv t$645$18875 (quote (global))) ((lambda (x$645$18876) ((lambda (lib$645$18878 loc$645$18879) (if (eq? lib$645$18878 (interaction-library$645$12855)) loc$645$18879 (error (quote expander) (quote "~a ~s") (quote "cannot modify imported binding") (strip$645$12226 ctxt$645$18868 (quote ()))))) (car x$645$18876) (cdr x$645$18876))) (binding-value$645$12238 b$645$18873)) (error (quote expander) (quote "~a ~s") (quote "cannot modify binding in") (strip$645$12226 ctxt$645$18868 (quote ()))))) (binding-type$645$12236 b$645$18873))) (imported-label->binding$645$11747 label$645$18871))) (id->label$645$12230 id$645$18867)))) (set! chi-top-set!$645$12770 (lambda (e$645$18882) ((lambda (t$645$18884) ((lambda (ls/false$645$18886) (if (if ls/false$645$18886 (begin (quote #f) (apply (lambda (id$645$18888 rhs$645$18889) (id?$645$12208 id$645$18888)) ls/false$645$18886)) (quote #f)) (apply (lambda (id$645$18892 rhs$645$18893) ((lambda (loc$645$18896) ((lambda (rhs$645$18898) (values loc$645$18896 rhs$645$18898)) (chi-expr$645$12740 rhs$645$18893 (quote ()) (quote ())))) (gen-global-var-binding$645$12768 id$645$18892 e$645$18882))) ls/false$645$18886) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18884 (quote ()))))) ((lambda (x$645$18900) (if (syntax-pair?$645$12194 x$645$18900) (begin (quote #f) ((lambda (q$645$18902) (if q$645$18902 (begin (quote #f) ((lambda (r$645$18904) (if r$645$18904 (begin (quote #f) (append q$645$18902 r$645$18904)) (quote #f))) ((lambda (x$645$18906) (if (syntax-pair?$645$12194 x$645$18906) (begin (quote #f) ((lambda (q$645$18908) (if q$645$18908 (begin (quote #f) ((lambda (r$645$18910) (if r$645$18910 (begin (quote #f) (append q$645$18908 r$645$18910)) (quote #f))) ((lambda (x$645$18912) (if (syntax-pair?$645$12194 x$645$18912) (begin (quote #f) ((lambda (q$645$18914) (if q$645$18914 (begin (quote #f) ((lambda (r$645$18916) (if r$645$18916 (begin (quote #f) (append q$645$18914 r$645$18916)) (quote #f))) ((lambda (x$645$18918) (if (equal? (stx->datum$645$12228 x$645$18918) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$18912)))) (quote #f))) ((lambda (x$645$18920) (list x$645$18920)) (syntax-car$645$12202 x$645$18912)))) (quote #f))) (syntax-cdr$645$12206 x$645$18906)))) (quote #f))) ((lambda (x$645$18922) (list x$645$18922)) (syntax-car$645$12202 x$645$18906)))) (quote #f))) (syntax-cdr$645$12206 x$645$18900)))) (quote #f))) ((lambda (x$645$18924) (quote ())) (syntax-car$645$12202 x$645$18900)))) (quote #f))) t$645$18884))) e$645$18882))) (set! chi-top*$645$12772 (lambda (e*$645$18926 init*$645$18927) (if (null? e*$645$18926) init*$645$18927 ((lambda (e$645$18930) (call-with-values (lambda () (syntax-type$645$12240 e$645$18930 (quote ()))) (lambda (type$645$18932 value$645$18933 kwd$645$18934) ((lambda (t$645$18938) (if (memv t$645$18938 (quote (define))) (call-with-values (lambda () (parse-define$645$12634 e$645$18930)) (lambda (id$645$18979 rhs$645$18980) ((lambda (loc$645$18983) ((lambda (rhs$645$18985) (chi-top*$645$12772 (cdr e*$645$18926) (cons (cons loc$645$18983 rhs$645$18985) init*$645$18927))) (chi-rhs$645$12748 rhs$645$18980 (quote ()) (quote ())))) (gen-global-var-binding$645$12768 id$645$18979 e$645$18930)))) (if (memv t$645$18938 (quote (set!))) (call-with-values (lambda () (chi-top-set!$645$12770 e$645$18930)) (lambda (loc$645$18975 rhs$645$18976) (chi-top*$645$12772 (cdr e*$645$18926) (cons (cons loc$645$18975 rhs$645$18976) init*$645$18927)))) (if (memv t$645$18938 (quote (define-syntax))) (call-with-values (lambda () (parse-define-syntax$645$12636 e$645$18930)) (lambda (id$645$18965 rhs$645$18966) ((lambda (loc$645$18969) ((lambda (expanded-rhs$645$18971) ((lambda (b$645$18973) (begin (set-global-macro-binding!$645$12764 (id->sym$645$12210 id$645$18965) loc$645$18969 b$645$18973) (chi-top*$645$12772 (cdr e*$645$18926) init*$645$18927))) (make-eval-transformer$645$12272 expanded-rhs$645$18971))) (expand-transformer$645$12774 rhs$645$18966 (quote ())))) (gen-global-macro-binding$645$12766 id$645$18965 e$645$18930)))) (if (memv t$645$18938 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "~s is not supported yet at top level") type$645$18932) (if (memv t$645$18938 (quote (begin))) ((lambda (t$645$18939) ((lambda (ls/false$645$18941) (if (if ls/false$645$18941 (begin (quote #f) (apply (lambda (x*$645$18943) (quote #t)) ls/false$645$18941)) (quote #f)) (apply (lambda (x*$645$18945) (chi-top*$645$12772 (append x*$645$18945 (cdr e*$645$18926)) init*$645$18927)) ls/false$645$18941) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$18939 (quote ()))))) ((lambda (x$645$18947) (if (syntax-pair?$645$12194 x$645$18947) (begin (quote #f) ((lambda (q$645$18949) (if q$645$18949 (begin (quote #f) ((lambda (r$645$18951) (if r$645$18951 (begin (quote #f) (append q$645$18949 r$645$18951)) (quote #f))) ((letrec ((f$645$18953 (lambda (x$645$18955) (if (syntax-pair?$645$12194 x$645$18955) ((lambda (cars/f$645$18957) (if cars/f$645$18957 (begin (quote #f) ((lambda (cdrs/f$645$18959) (if cdrs/f$645$18959 (begin (quote #f) (map cons cars/f$645$18957 cdrs/f$645$18959)) (quote #f))) (f$645$18953 (syntax-cdr$645$12206 x$645$18955)))) (quote #f))) ((lambda (x$645$18961) (list x$645$18961)) (syntax-car$645$12202 x$645$18955))) (if (syntax-null?$645$12198 x$645$18955) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$18953) (syntax-cdr$645$12206 x$645$18947)))) (quote #f))) ((lambda (x$645$18963) (quote ())) (syntax-car$645$12202 x$645$18947)))) (quote #f))) t$645$18939))) e$645$18930) (if (memv t$645$18938 (quote (global-macro global-macro!))) (chi-top*$645$12772 (cons (chi-global-macro$645$12734 value$645$18933 e$645$18930) (cdr e*$645$18926)) init*$645$18927) (if (memv t$645$18938 (quote (local-macro local-macro!))) (chi-top*$645$12772 (cons (chi-local-macro$645$12732 value$645$18933 e$645$18930) (cdr e*$645$18926)) init*$645$18927) (if (memv t$645$18938 (quote (macro macro!))) (chi-top*$645$12772 (cons (chi-macro$645$12730 value$645$18933 e$645$18930) (cdr e*$645$18926)) init*$645$18927) (chi-top*$645$12772 (cdr e*$645$18926) (cons (cons (quote #f) (chi-expr$645$12740 e$645$18930 (quote ()) (quote ()))) init*$645$18927))))))))))) type$645$18932)))) (car e*$645$18926))))) (set! expand-transformer$645$12774 (lambda (expr$645$18987 r$645$18988) ((lambda (rtc$645$18991) ((lambda (expanded-rhs$645$18993) (begin (for-each ((lambda (mark-visit$645$18995) (lambda (x$645$18997) (begin (invoke-library$645$11746 x$645$18997) (mark-visit$645$18995 x$645$18997)))) (vis-collector$645$12790)) (rtc$645$18991)) expanded-rhs$645$18993)) ((lambda (t$645$19003 t$645$19004 t$645$19005 t$645$19006) ((lambda (swap$645$19011) (dynamic-wind swap$645$19011 (lambda () (chi-expr$645$12740 expr$645$18987 r$645$18988 r$645$18988)) swap$645$19011)) (lambda () (begin ((lambda (t$645$19013) (begin (t$645$19003 t$645$19005) (set! t$645$19005 t$645$19013))) (t$645$19003)) ((lambda (t$645$19015) (begin (t$645$19004 t$645$19006) (set! t$645$19006 t$645$19015))) (t$645$19004)))))) inv-collector$645$12788 vis-collector$645$12790 rtc$645$18991 (lambda (x$645$19017) (values))))) (make-collector$645$12786)))) (set! parse-exports$645$12776 (lambda (exp*$645$19019) (letrec ((f$645$19021 (lambda (exp*$645$19023 int*$645$19024 ext*$645$19025) (if (null? exp*$645$19023) (begin ((lambda (id*$645$19029) (if (valid-bound-ids?$645$12218 id*$645$19029) (void) (error (quote expander) (quote "invalid exports of ~s") (find-dups$645$12754 id*$645$19029)))) (map (lambda (x$645$19031) (mkstx$645$12184 x$645$19031 top-mark*$645$12114 (quote ()))) ext*$645$19025)) (values int*$645$19024 ext*$645$19025)) ((lambda (t$645$19033) ((lambda (ls/false$645$19035) (if (if ls/false$645$19035 (begin (quote #f) (apply (lambda (rename$645$19037 i*$645$19038 e*$645$19039) (quote #t)) ls/false$645$19035)) (quote #f)) (apply (lambda (rename$645$19043 i*$645$19044 e*$645$19045) (begin (if (if (eq? rename$645$19043 (quote rename)) (if (for-all symbol? i*$645$19044) (begin (quote #f) (for-all symbol? e*$645$19045)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier ~s") (car exp*$645$19023))) (f$645$19021 (cdr exp*$645$19023) (append i*$645$19044 int*$645$19024) (append e*$645$19045 ext*$645$19025)))) ls/false$645$19035) ((lambda (t$645$19049) ((lambda (ls/false$645$19051) (if (if ls/false$645$19051 (begin (quote #f) (apply (lambda (ie$645$19053) (quote #t)) ls/false$645$19051)) (quote #f)) (apply (lambda (ie$645$19055) (begin (if (symbol? ie$645$19055) (void) (error (quote expander) (quote "invalid export ~s") ie$645$19055)) (f$645$19021 (cdr exp*$645$19023) (cons ie$645$19055 int*$645$19024) (cons ie$645$19055 ext*$645$19025)))) ls/false$645$19051) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$19049 (quote ()))))) ((lambda (x$645$19057) (list x$645$19057)) t$645$19049))) t$645$19033))) ((lambda (x$645$19059) (if (syntax-pair?$645$12194 x$645$19059) (begin (quote #f) ((lambda (q$645$19061) (if q$645$19061 (begin (quote #f) ((lambda (r$645$19063) (if r$645$19063 (begin (quote #f) (append q$645$19061 r$645$19063)) (quote #f))) ((letrec ((f$645$19065 (lambda (x$645$19067) (if (syntax-pair?$645$12194 x$645$19067) ((lambda (cars/f$645$19069) (if cars/f$645$19069 (begin (quote #f) ((lambda (cdrs/f$645$19071) (if cdrs/f$645$19071 (begin (quote #f) (map cons cars/f$645$19069 cdrs/f$645$19071)) (quote #f))) (f$645$19065 (syntax-cdr$645$12206 x$645$19067)))) (quote #f))) ((lambda (x$645$19073) (if (syntax-pair?$645$12194 x$645$19073) (begin (quote #f) ((lambda (q$645$19075) (if q$645$19075 (begin (quote #f) ((lambda (r$645$19077) (if r$645$19077 (begin (quote #f) (append q$645$19075 r$645$19077)) (quote #f))) ((lambda (x$645$19079) (if (syntax-pair?$645$12194 x$645$19079) (begin (quote #f) ((lambda (q$645$19081) (if q$645$19081 (begin (quote #f) ((lambda (r$645$19083) (if r$645$19083 (begin (quote #f) (append q$645$19081 r$645$19083)) (quote #f))) ((lambda (x$645$19085) (if (equal? (stx->datum$645$12228 x$645$19085) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$19079)))) (quote #f))) ((lambda (x$645$19087) (list x$645$19087)) (syntax-car$645$12202 x$645$19079)))) (quote #f))) (syntax-cdr$645$12206 x$645$19073)))) (quote #f))) ((lambda (x$645$19089) (list x$645$19089)) (syntax-car$645$12202 x$645$19073)))) (quote #f))) (syntax-car$645$12202 x$645$19067))) (if (syntax-null?$645$12198 x$645$19067) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) f$645$19065) (syntax-cdr$645$12206 x$645$19059)))) (quote #f))) ((lambda (x$645$19091) (list x$645$19091)) (syntax-car$645$12202 x$645$19059)))) (quote #f))) t$645$19033))) (car exp*$645$19023)))))) (f$645$19021 exp*$645$19019 (quote ()) (quote ()))))) (set! parse-library-name$645$12778 (lambda (x$645$19093) ((lambda (parse$645$19095) (begin (set! parse$645$19095 (lambda (x$645$19097) ((lambda (t$645$19099) ((lambda (ls/false$645$19101) (if (if ls/false$645$19101 (begin (quote #f) (apply (lambda (x*$645$19103 v*$645$19104) (if (for-all symbol? x*$645$19103) (begin (quote #f) (for-all (lambda (x$645$19107) (if (integer? x$645$19107) (begin (quote #f) (exact? x$645$19107)) (quote #f))) v*$645$19104)) (quote #f))) ls/false$645$19101)) (quote #f)) (apply (lambda (x*$645$19109 v*$645$19110) (values x*$645$19109 v*$645$19110)) ls/false$645$19101) ((lambda (t$645$19113) ((lambda (ls/false$645$19115) (if (if ls/false$645$19115 (begin (quote #f) (apply (lambda (x*$645$19117) (for-all symbol? x*$645$19117)) ls/false$645$19115)) (quote #f)) (apply (lambda (x*$645$19119) (values x*$645$19119 (quote ()))) ls/false$645$19115) ((lambda (t$645$19121) ((lambda (ls/false$645$19123) (if (if ls/false$645$19123 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$19123)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid library name") (strip$645$12226 x$645$19097 (quote ())))) ls/false$645$19123) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$19121 (quote ()))))) ((lambda (x$645$19125) (quote ())) t$645$19121))) t$645$19113))) ((letrec ((f$645$19127 (lambda (x$645$19129) (if (syntax-pair?$645$12194 x$645$19129) ((lambda (cars/f$645$19131) (if cars/f$645$19131 (begin (quote #f) ((lambda (cdrs/f$645$19133) (if cdrs/f$645$19133 (begin (quote #f) (map cons cars/f$645$19131 cdrs/f$645$19133)) (quote #f))) (f$645$19127 (syntax-cdr$645$12206 x$645$19129)))) (quote #f))) ((lambda (x$645$19135) (list x$645$19135)) (syntax-car$645$12202 x$645$19129))) (if (syntax-null?$645$12198 x$645$19129) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$19127) t$645$19113))) t$645$19099))) ((letrec ((f$645$19137 (lambda (x$645$19143) (if (syntax-pair?$645$12194 x$645$19143) ((lambda (cars/f$645$19145) (if cars/f$645$19145 (begin (quote #f) ((lambda (d/f$645$19147) (if d/f$645$19147 (begin (quote #f) (cons (map cons cars/f$645$19145 (car d/f$645$19147)) (cdr d/f$645$19147))) (quote #f))) (f$645$19137 (syntax-cdr$645$12206 x$645$19143)))) (quote #f))) ((lambda (x$645$19149) (list x$645$19149)) (syntax-car$645$12202 x$645$19143))) ((lambda (d$645$19151) (if d$645$19151 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) d$645$19151)) (quote #f))) ((lambda (x$645$19153) (if (syntax-pair?$645$12194 x$645$19153) (begin (quote #f) ((lambda (q$645$19155) (if q$645$19155 (begin (quote #f) ((lambda (r$645$19157) (if r$645$19157 (begin (quote #f) (append q$645$19155 r$645$19157)) (quote #f))) ((lambda (x$645$19159) (if (equal? (stx->datum$645$12228 x$645$19159) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$19153)))) (quote #f))) ((letrec ((f$645$19161 (lambda (x$645$19163) (if (syntax-pair?$645$12194 x$645$19163) ((lambda (cars/f$645$19165) (if cars/f$645$19165 (begin (quote #f) ((lambda (cdrs/f$645$19167) (if cdrs/f$645$19167 (begin (quote #f) (map cons cars/f$645$19165 cdrs/f$645$19167)) (quote #f))) (f$645$19161 (syntax-cdr$645$12206 x$645$19163)))) (quote #f))) ((lambda (x$645$19169) (list x$645$19169)) (syntax-car$645$12202 x$645$19163))) (if (syntax-null?$645$12198 x$645$19163) (list (begin (quote v*) (quote ()))) (quote #f)))))) f$645$19161) (syntax-car$645$12202 x$645$19153)))) (quote #f))) x$645$19143)))))) (lambda (x$645$19139) ((lambda (x$645$19141) (if x$645$19141 (begin (quote #f) (append (car x$645$19141) (cdr x$645$19141))) (quote #f))) (f$645$19137 x$645$19139)))) t$645$19099))) x$645$19097))) (call-with-values (lambda () (parse$645$19095 x$645$19093)) (lambda (name*$645$19171 ver*$645$19172) (begin (if (null? name*$645$19171) (error (quote expander) (quote "~a ~s") (quote "empty library name") (strip$645$12226 x$645$19093 (quote ()))) (void)) (values name*$645$19171 ver*$645$19172)))))) (quote #f)))) (set! parse-library$645$12780 (lambda (e$645$19175) ((lambda (t$645$19177) ((lambda (ls/false$645$19179) (if (if ls/false$645$19179 (begin (quote #f) (apply (lambda (library$645$19181 name*$645$19182 export$645$19183 exp*$645$19184 import$645$19185 imp*$645$19186 b*$645$19187) (if (eq? export$645$19183 (quote export)) (if (eq? import$645$19185 (quote import)) (begin (quote #f) (eq? library$645$19181 (quote library))) (quote #f)) (quote #f))) ls/false$645$19179)) (quote #f)) (apply (lambda (library$645$19195 name*$645$19196 export$645$19197 exp*$645$19198 import$645$19199 imp*$645$19200 b*$645$19201) (values name*$645$19196 exp*$645$19198 imp*$645$19200 b*$645$19201)) ls/false$645$19179) ((lambda (t$645$19209) ((lambda (ls/false$645$19211) (if (if ls/false$645$19211 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$19211)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "malformed library") (strip$645$12226 e$645$19175 (quote ())))) ls/false$645$19211) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$19209 (quote ()))))) ((lambda (x$645$19213) (quote ())) t$645$19209))) t$645$19177))) ((lambda (x$645$19215) (if (syntax-pair?$645$12194 x$645$19215) (begin (quote #f) ((lambda (q$645$19217) (if q$645$19217 (begin (quote #f) ((lambda (r$645$19219) (if r$645$19219 (begin (quote #f) (append q$645$19217 r$645$19219)) (quote #f))) ((lambda (x$645$19221) (if (syntax-pair?$645$12194 x$645$19221) (begin (quote #f) ((lambda (q$645$19223) (if q$645$19223 (begin (quote #f) ((lambda (r$645$19225) (if r$645$19225 (begin (quote #f) (append q$645$19223 r$645$19225)) (quote #f))) ((lambda (x$645$19227) (if (syntax-pair?$645$12194 x$645$19227) (begin (quote #f) ((lambda (q$645$19229) (if q$645$19229 (begin (quote #f) ((lambda (r$645$19231) (if r$645$19231 (begin (quote #f) (append q$645$19229 r$645$19231)) (quote #f))) ((lambda (x$645$19233) (if (syntax-pair?$645$12194 x$645$19233) (begin (quote #f) ((lambda (q$645$19235) (if q$645$19235 (begin (quote #f) ((lambda (r$645$19237) (if r$645$19237 (begin (quote #f) (append q$645$19235 r$645$19237)) (quote #f))) ((letrec ((f$645$19239 (lambda (x$645$19241) (if (syntax-pair?$645$12194 x$645$19241) ((lambda (cars/f$645$19243) (if cars/f$645$19243 (begin (quote #f) ((lambda (cdrs/f$645$19245) (if cdrs/f$645$19245 (begin (quote #f) (map cons cars/f$645$19243 cdrs/f$645$19245)) (quote #f))) (f$645$19239 (syntax-cdr$645$12206 x$645$19241)))) (quote #f))) ((lambda (x$645$19247) (list x$645$19247)) (syntax-car$645$12202 x$645$19241))) (if (syntax-null?$645$12198 x$645$19241) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$19239) (syntax-cdr$645$12206 x$645$19233)))) (quote #f))) ((lambda (x$645$19249) (if (syntax-pair?$645$12194 x$645$19249) (begin (quote #f) ((lambda (q$645$19251) (if q$645$19251 (begin (quote #f) ((lambda (r$645$19253) (if r$645$19253 (begin (quote #f) (append q$645$19251 r$645$19253)) (quote #f))) ((letrec ((f$645$19255 (lambda (x$645$19257) (if (syntax-pair?$645$12194 x$645$19257) ((lambda (cars/f$645$19259) (if cars/f$645$19259 (begin (quote #f) ((lambda (cdrs/f$645$19261) (if cdrs/f$645$19261 (begin (quote #f) (map cons cars/f$645$19259 cdrs/f$645$19261)) (quote #f))) (f$645$19255 (syntax-cdr$645$12206 x$645$19257)))) (quote #f))) ((lambda (x$645$19263) (list x$645$19263)) (syntax-car$645$12202 x$645$19257))) (if (syntax-null?$645$12198 x$645$19257) (list (begin (quote imp*) (quote ()))) (quote #f)))))) f$645$19255) (syntax-cdr$645$12206 x$645$19249)))) (quote #f))) ((lambda (x$645$19265) (list x$645$19265)) (syntax-car$645$12202 x$645$19249)))) (quote #f))) (syntax-car$645$12202 x$645$19233)))) (quote #f))) (syntax-cdr$645$12206 x$645$19227)))) (quote #f))) ((lambda (x$645$19267) (if (syntax-pair?$645$12194 x$645$19267) (begin (quote #f) ((lambda (q$645$19269) (if q$645$19269 (begin (quote #f) ((lambda (r$645$19271) (if r$645$19271 (begin (quote #f) (append q$645$19269 r$645$19271)) (quote #f))) ((letrec ((f$645$19273 (lambda (x$645$19275) (if (syntax-pair?$645$12194 x$645$19275) ((lambda (cars/f$645$19277) (if cars/f$645$19277 (begin (quote #f) ((lambda (cdrs/f$645$19279) (if cdrs/f$645$19279 (begin (quote #f) (map cons cars/f$645$19277 cdrs/f$645$19279)) (quote #f))) (f$645$19273 (syntax-cdr$645$12206 x$645$19275)))) (quote #f))) ((lambda (x$645$19281) (list x$645$19281)) (syntax-car$645$12202 x$645$19275))) (if (syntax-null?$645$12198 x$645$19275) (list (begin (quote exp*) (quote ()))) (quote #f)))))) f$645$19273) (syntax-cdr$645$12206 x$645$19267)))) (quote #f))) ((lambda (x$645$19283) (list x$645$19283)) (syntax-car$645$12202 x$645$19267)))) (quote #f))) (syntax-car$645$12202 x$645$19227)))) (quote #f))) (syntax-cdr$645$12206 x$645$19221)))) (quote #f))) ((letrec ((f$645$19285 (lambda (x$645$19287) (if (syntax-pair?$645$12194 x$645$19287) ((lambda (cars/f$645$19289) (if cars/f$645$19289 (begin (quote #f) ((lambda (cdrs/f$645$19291) (if cdrs/f$645$19291 (begin (quote #f) (map cons cars/f$645$19289 cdrs/f$645$19291)) (quote #f))) (f$645$19285 (syntax-cdr$645$12206 x$645$19287)))) (quote #f))) ((lambda (x$645$19293) (list x$645$19293)) (syntax-car$645$12202 x$645$19287))) (if (syntax-null?$645$12198 x$645$19287) (list (begin (quote name*) (quote ()))) (quote #f)))))) f$645$19285) (syntax-car$645$12202 x$645$19221)))) (quote #f))) (syntax-cdr$645$12206 x$645$19215)))) (quote #f))) ((lambda (x$645$19295) (list x$645$19295)) (syntax-car$645$12202 x$645$19215)))) (quote #f))) t$645$19177))) e$645$19175))) (set! parse-import-spec*$645$12782 (lambda (imp*$645$19297) ((lambda (imp-collector$645$19299 merge-substs$645$19301 exclude*$645$19303 find*$645$19305 rem*$645$19307 remove-dups$645$19309 get-import$645$19311) (begin (set! imp-collector$645$19299 (make-collector$645$12786)) (set! merge-substs$645$19301 (lambda (s$645$19635 subst$645$19636) ((lambda (insert-to-subst$645$19639) (begin (set! insert-to-subst$645$19639 (lambda (a$645$19641 subst$645$19642) ((lambda (name$645$19645 label$645$19646) ((lambda (t$645$19649) (if t$645$19649 ((lambda (x$645$19651) (if (eq? (cdr x$645$19651) label$645$19646) subst$645$19642 (error (quote import) (quote "two imports of ~s with different bindings") name$645$19645))) t$645$19649) (cons a$645$19641 subst$645$19642))) (assq name$645$19645 subst$645$19642))) (car a$645$19641) (cdr a$645$19641)))) (if (null? s$645$19635) subst$645$19636 (insert-to-subst$645$19639 (car s$645$19635) (merge-substs$645$19301 (cdr s$645$19635) subst$645$19636))))) (quote #f)))) (set! exclude*$645$19303 (lambda (sym*$645$19611 subst$645$19612) ((lambda (exclude$645$19615) (begin (set! exclude$645$19615 (lambda (sym$645$19617 subst$645$19618) (if (null? subst$645$19618) (error (quote import) (quote "cannot rename unbound identifier ~s") sym$645$19617) (if (eq? sym$645$19617 (caar subst$645$19618)) (values (cdar subst$645$19618) (cdr subst$645$19618)) ((lambda (a$645$19621) (call-with-values (lambda () (exclude$645$19615 sym$645$19617 (cdr subst$645$19618))) (lambda (old$645$19623 subst$645$19624) (values old$645$19623 (cons a$645$19621 subst$645$19624))))) (car subst$645$19618)))))) (if (null? sym*$645$19611) (values (quote ()) subst$645$19612) (call-with-values (lambda () (exclude$645$19615 (car sym*$645$19611) subst$645$19612)) (lambda (old$645$19627 subst$645$19628) (call-with-values (lambda () (exclude*$645$19303 (cdr sym*$645$19611) subst$645$19628)) (lambda (old*$645$19631 subst$645$19632) (values (cons old$645$19627 old*$645$19631) subst$645$19632)))))))) (quote #f)))) (set! find*$645$19305 (lambda (sym*$645$19603 subst$645$19604) (map (lambda (x$645$19607) ((lambda (t$645$19609) (if t$645$19609 (cdr t$645$19609) (error (quote import) (quote "cannot find identifier ~s") x$645$19607))) (assq x$645$19607 subst$645$19604))) sym*$645$19603))) (set! rem*$645$19307 (lambda (sym*$645$19595 subst$645$19596) (letrec ((f$645$19599 (lambda (subst$645$19601) (if (null? subst$645$19601) (quote ()) (if (memq (caar subst$645$19601) sym*$645$19595) (f$645$19599 (cdr subst$645$19601)) (cons (car subst$645$19601) (f$645$19599 (cdr subst$645$19601)))))))) (f$645$19599 subst$645$19596)))) (set! remove-dups$645$19309 (lambda (ls$645$19593) (if (null? ls$645$19593) (quote ()) (if (memq (car ls$645$19593) (cdr ls$645$19593)) (remove-dups$645$19309 (cdr ls$645$19593)) (cons (car ls$645$19593) (remove-dups$645$19309 (cdr ls$645$19593))))))) (set! get-import$645$19311 (lambda (spec$645$19313) ((lambda (t$645$19315) ((lambda (ls/false$645$19317) (if (if ls/false$645$19317 (begin (quote #f) (apply (lambda (rename$645$19319 isp$645$19320 old*$645$19321 new*$645$19322) (if (eq? rename$645$19319 (quote rename)) (if (for-all symbol? old*$645$19321) (begin (quote #f) (for-all symbol? new*$645$19322)) (quote #f)) (quote #f))) ls/false$645$19317)) (quote #f)) (apply (lambda (rename$645$19327 isp$645$19328 old*$645$19329 new*$645$19330) ((lambda (subst$645$19335) ((lambda (old-label*$645$19337) ((lambda (subst$645$19339) (merge-substs$645$19301 (map cons new*$645$19330 old-label*$645$19337) subst$645$19339)) (rem*$645$19307 old*$645$19329 subst$645$19335))) (find*$645$19305 old*$645$19329 subst$645$19335))) (get-import$645$19311 isp$645$19328))) ls/false$645$19317) ((lambda (t$645$19341) ((lambda (ls/false$645$19343) (if (if ls/false$645$19343 (begin (quote #f) (apply (lambda (except$645$19345 isp$645$19346 sym*$645$19347) (if (eq? except$645$19345 (quote except)) (begin (quote #f) (for-all symbol? sym*$645$19347)) (quote #f))) ls/false$645$19343)) (quote #f)) (apply (lambda (except$645$19351 isp$645$19352 sym*$645$19353) ((lambda (subst$645$19357) (rem*$645$19307 sym*$645$19353 subst$645$19357)) (get-import$645$19311 isp$645$19352))) ls/false$645$19343) ((lambda (t$645$19359) ((lambda (ls/false$645$19361) (if (if ls/false$645$19361 (begin (quote #f) (apply (lambda (only$645$19363 isp$645$19364 sym*$645$19365) (if (eq? only$645$19363 (quote only)) (begin (quote #f) (for-all symbol? sym*$645$19365)) (quote #f))) ls/false$645$19361)) (quote #f)) (apply (lambda (only$645$19369 isp$645$19370 sym*$645$19371) ((lambda (subst$645$19375) ((lambda (sym*$645$19377) ((lambda (lab*$645$19379) (map cons sym*$645$19377 lab*$645$19379)) (find*$645$19305 sym*$645$19377 subst$645$19375))) (remove-dups$645$19309 sym*$645$19371))) (get-import$645$19311 isp$645$19370))) ls/false$645$19361) ((lambda (t$645$19381) ((lambda (ls/false$645$19383) (if (if ls/false$645$19383 (begin (quote #f) (apply (lambda (prefix$645$19385 isp$645$19386 p$645$19387) (if (eq? prefix$645$19385 (quote prefix)) (begin (quote #f) (symbol? p$645$19387)) (quote #f))) ls/false$645$19383)) (quote #f)) (apply (lambda (prefix$645$19391 isp$645$19392 p$645$19393) ((lambda (subst$645$19397) (map (lambda (x$645$19399) (cons (string->symbol (string-append (symbol->string p$645$19393) (symbol->string (car x$645$19399)))) (cdr x$645$19399))) subst$645$19397)) (get-import$645$19311 isp$645$19392))) ls/false$645$19383) ((lambda (t$645$19401) ((lambda (ls/false$645$19403) (if (if ls/false$645$19403 (begin (quote #f) (apply (lambda (library$645$19405 name$645$19406) (eq? library$645$19405 (quote library))) ls/false$645$19403)) (quote #f)) (apply (lambda (library$645$19409 name$645$19410) ((lambda (lib$645$19413) (begin (if lib$645$19413 (void) (error (quote import) (quote "cannot find library satisfying ~s") name$645$19410)) (imp-collector$645$19299 lib$645$19413) (library-subst$645$11780 lib$645$19413))) (find-library-by-name$645$11755 name$645$19410))) ls/false$645$19403) ((lambda (t$645$19415) ((lambda (ls/false$645$19417) (if (if ls/false$645$19417 (begin (quote #f) (apply (lambda (x$645$19419 x*$645$19420) (not (memq x$645$19419 (quote (rename except only prefix library))))) ls/false$645$19417)) (quote #f)) (apply (lambda (x$645$19423 x*$645$19424) (get-import$645$19311 (list (quote library) (cons x$645$19423 x*$645$19424)))) ls/false$645$19417) ((lambda (t$645$19427) ((lambda (ls/false$645$19429) (if (if ls/false$645$19429 (begin (quote #f) (apply (lambda (spec$645$19431) (quote #t)) ls/false$645$19429)) (quote #f)) (apply (lambda (spec$645$19433) (error (quote import) (quote "invalid import spec ~s") spec$645$19433)) ls/false$645$19429) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$19427 (quote ()))))) ((lambda (x$645$19435) (list x$645$19435)) t$645$19427))) t$645$19415))) ((lambda (x$645$19437) (if (syntax-pair?$645$12194 x$645$19437) (begin (quote #f) ((lambda (q$645$19439) (if q$645$19439 (begin (quote #f) ((lambda (r$645$19441) (if r$645$19441 (begin (quote #f) (append q$645$19439 r$645$19441)) (quote #f))) ((letrec ((f$645$19443 (lambda (x$645$19445) (if (syntax-pair?$645$12194 x$645$19445) ((lambda (cars/f$645$19447) (if cars/f$645$19447 (begin (quote #f) ((lambda (cdrs/f$645$19449) (if cdrs/f$645$19449 (begin (quote #f) (map cons cars/f$645$19447 cdrs/f$645$19449)) (quote #f))) (f$645$19443 (syntax-cdr$645$12206 x$645$19445)))) (quote #f))) ((lambda (x$645$19451) (list x$645$19451)) (syntax-car$645$12202 x$645$19445))) (if (syntax-null?$645$12198 x$645$19445) (list (begin (quote x*) (quote ()))) (quote #f)))))) f$645$19443) (syntax-cdr$645$12206 x$645$19437)))) (quote #f))) ((lambda (x$645$19453) (list x$645$19453)) (syntax-car$645$12202 x$645$19437)))) (quote #f))) t$645$19415))) t$645$19401))) ((lambda (x$645$19455) (if (syntax-pair?$645$12194 x$645$19455) (begin (quote #f) ((lambda (q$645$19457) (if q$645$19457 (begin (quote #f) ((lambda (r$645$19459) (if r$645$19459 (begin (quote #f) (append q$645$19457 r$645$19459)) (quote #f))) ((lambda (x$645$19461) (if (syntax-pair?$645$12194 x$645$19461) (begin (quote #f) ((lambda (q$645$19463) (if q$645$19463 (begin (quote #f) ((lambda (r$645$19465) (if r$645$19465 (begin (quote #f) (append q$645$19463 r$645$19465)) (quote #f))) ((lambda (x$645$19467) (if (equal? (stx->datum$645$12228 x$645$19467) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$19461)))) (quote #f))) ((lambda (x$645$19469) (list x$645$19469)) (syntax-car$645$12202 x$645$19461)))) (quote #f))) (syntax-cdr$645$12206 x$645$19455)))) (quote #f))) ((lambda (x$645$19471) (list x$645$19471)) (syntax-car$645$12202 x$645$19455)))) (quote #f))) t$645$19401))) t$645$19381))) ((lambda (x$645$19473) (if (syntax-pair?$645$12194 x$645$19473) (begin (quote #f) ((lambda (q$645$19475) (if q$645$19475 (begin (quote #f) ((lambda (r$645$19477) (if r$645$19477 (begin (quote #f) (append q$645$19475 r$645$19477)) (quote #f))) ((lambda (x$645$19479) (if (syntax-pair?$645$12194 x$645$19479) (begin (quote #f) ((lambda (q$645$19481) (if q$645$19481 (begin (quote #f) ((lambda (r$645$19483) (if r$645$19483 (begin (quote #f) (append q$645$19481 r$645$19483)) (quote #f))) ((lambda (x$645$19485) (if (syntax-pair?$645$12194 x$645$19485) (begin (quote #f) ((lambda (q$645$19487) (if q$645$19487 (begin (quote #f) ((lambda (r$645$19489) (if r$645$19489 (begin (quote #f) (append q$645$19487 r$645$19489)) (quote #f))) ((lambda (x$645$19491) (if (equal? (stx->datum$645$12228 x$645$19491) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$19485)))) (quote #f))) ((lambda (x$645$19493) (list x$645$19493)) (syntax-car$645$12202 x$645$19485)))) (quote #f))) (syntax-cdr$645$12206 x$645$19479)))) (quote #f))) ((lambda (x$645$19495) (list x$645$19495)) (syntax-car$645$12202 x$645$19479)))) (quote #f))) (syntax-cdr$645$12206 x$645$19473)))) (quote #f))) ((lambda (x$645$19497) (list x$645$19497)) (syntax-car$645$12202 x$645$19473)))) (quote #f))) t$645$19381))) t$645$19359))) ((lambda (x$645$19499) (if (syntax-pair?$645$12194 x$645$19499) (begin (quote #f) ((lambda (q$645$19501) (if q$645$19501 (begin (quote #f) ((lambda (r$645$19503) (if r$645$19503 (begin (quote #f) (append q$645$19501 r$645$19503)) (quote #f))) ((lambda (x$645$19505) (if (syntax-pair?$645$12194 x$645$19505) (begin (quote #f) ((lambda (q$645$19507) (if q$645$19507 (begin (quote #f) ((lambda (r$645$19509) (if r$645$19509 (begin (quote #f) (append q$645$19507 r$645$19509)) (quote #f))) ((letrec ((f$645$19511 (lambda (x$645$19513) (if (syntax-pair?$645$12194 x$645$19513) ((lambda (cars/f$645$19515) (if cars/f$645$19515 (begin (quote #f) ((lambda (cdrs/f$645$19517) (if cdrs/f$645$19517 (begin (quote #f) (map cons cars/f$645$19515 cdrs/f$645$19517)) (quote #f))) (f$645$19511 (syntax-cdr$645$12206 x$645$19513)))) (quote #f))) ((lambda (x$645$19519) (list x$645$19519)) (syntax-car$645$12202 x$645$19513))) (if (syntax-null?$645$12198 x$645$19513) (list (begin (quote sym*) (quote ()))) (quote #f)))))) f$645$19511) (syntax-cdr$645$12206 x$645$19505)))) (quote #f))) ((lambda (x$645$19521) (list x$645$19521)) (syntax-car$645$12202 x$645$19505)))) (quote #f))) (syntax-cdr$645$12206 x$645$19499)))) (quote #f))) ((lambda (x$645$19523) (list x$645$19523)) (syntax-car$645$12202 x$645$19499)))) (quote #f))) t$645$19359))) t$645$19341))) ((lambda (x$645$19525) (if (syntax-pair?$645$12194 x$645$19525) (begin (quote #f) ((lambda (q$645$19527) (if q$645$19527 (begin (quote #f) ((lambda (r$645$19529) (if r$645$19529 (begin (quote #f) (append q$645$19527 r$645$19529)) (quote #f))) ((lambda (x$645$19531) (if (syntax-pair?$645$12194 x$645$19531) (begin (quote #f) ((lambda (q$645$19533) (if q$645$19533 (begin (quote #f) ((lambda (r$645$19535) (if r$645$19535 (begin (quote #f) (append q$645$19533 r$645$19535)) (quote #f))) ((letrec ((f$645$19537 (lambda (x$645$19539) (if (syntax-pair?$645$12194 x$645$19539) ((lambda (cars/f$645$19541) (if cars/f$645$19541 (begin (quote #f) ((lambda (cdrs/f$645$19543) (if cdrs/f$645$19543 (begin (quote #f) (map cons cars/f$645$19541 cdrs/f$645$19543)) (quote #f))) (f$645$19537 (syntax-cdr$645$12206 x$645$19539)))) (quote #f))) ((lambda (x$645$19545) (list x$645$19545)) (syntax-car$645$12202 x$645$19539))) (if (syntax-null?$645$12198 x$645$19539) (list (begin (quote sym*) (quote ()))) (quote #f)))))) f$645$19537) (syntax-cdr$645$12206 x$645$19531)))) (quote #f))) ((lambda (x$645$19547) (list x$645$19547)) (syntax-car$645$12202 x$645$19531)))) (quote #f))) (syntax-cdr$645$12206 x$645$19525)))) (quote #f))) ((lambda (x$645$19549) (list x$645$19549)) (syntax-car$645$12202 x$645$19525)))) (quote #f))) t$645$19341))) t$645$19315))) ((lambda (x$645$19551) (if (syntax-pair?$645$12194 x$645$19551) (begin (quote #f) ((lambda (q$645$19553) (if q$645$19553 (begin (quote #f) ((lambda (r$645$19555) (if r$645$19555 (begin (quote #f) (append q$645$19553 r$645$19555)) (quote #f))) ((lambda (x$645$19557) (if (syntax-pair?$645$12194 x$645$19557) (begin (quote #f) ((lambda (q$645$19559) (if q$645$19559 (begin (quote #f) ((lambda (r$645$19561) (if r$645$19561 (begin (quote #f) (append q$645$19559 r$645$19561)) (quote #f))) ((letrec ((f$645$19563 (lambda (x$645$19565) (if (syntax-pair?$645$12194 x$645$19565) ((lambda (cars/f$645$19567) (if cars/f$645$19567 (begin (quote #f) ((lambda (cdrs/f$645$19569) (if cdrs/f$645$19569 (begin (quote #f) (map cons cars/f$645$19567 cdrs/f$645$19569)) (quote #f))) (f$645$19563 (syntax-cdr$645$12206 x$645$19565)))) (quote #f))) ((lambda (x$645$19571) (if (syntax-pair?$645$12194 x$645$19571) (begin (quote #f) ((lambda (q$645$19573) (if q$645$19573 (begin (quote #f) ((lambda (r$645$19575) (if r$645$19575 (begin (quote #f) (append q$645$19573 r$645$19575)) (quote #f))) ((lambda (x$645$19577) (if (syntax-pair?$645$12194 x$645$19577) (begin (quote #f) ((lambda (q$645$19579) (if q$645$19579 (begin (quote #f) ((lambda (r$645$19581) (if r$645$19581 (begin (quote #f) (append q$645$19579 r$645$19581)) (quote #f))) ((lambda (x$645$19583) (if (equal? (stx->datum$645$12228 x$645$19583) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (syntax-cdr$645$12206 x$645$19577)))) (quote #f))) ((lambda (x$645$19585) (list x$645$19585)) (syntax-car$645$12202 x$645$19577)))) (quote #f))) (syntax-cdr$645$12206 x$645$19571)))) (quote #f))) ((lambda (x$645$19587) (list x$645$19587)) (syntax-car$645$12202 x$645$19571)))) (quote #f))) (syntax-car$645$12202 x$645$19565))) (if (syntax-null?$645$12198 x$645$19565) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) f$645$19563) (syntax-cdr$645$12206 x$645$19557)))) (quote #f))) ((lambda (x$645$19589) (list x$645$19589)) (syntax-car$645$12202 x$645$19557)))) (quote #f))) (syntax-cdr$645$12206 x$645$19551)))) (quote #f))) ((lambda (x$645$19591) (list x$645$19591)) (syntax-car$645$12202 x$645$19551)))) (quote #f))) t$645$19315))) spec$645$19313))) (letrec ((f$645$19653 (lambda (imp*$645$19655 subst$645$19656) (if (null? imp*$645$19655) (values subst$645$19656 (imp-collector$645$19299)) (f$645$19653 (cdr imp*$645$19655) (merge-substs$645$19301 (get-import$645$19311 (car imp*$645$19655)) subst$645$19656)))))) (f$645$19653 imp*$645$19297 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! make-top-rib$645$12784 (lambda (subst$645$19659) ((lambda (rib$645$19661) (begin (for-each (lambda (x$645$19663) ((lambda (name$645$19665 label$645$19666) (extend-rib!$645$12147 rib$645$19661 (mkstx$645$12184 name$645$19665 top-mark*$645$12114 (quote ())) label$645$19666)) (car x$645$19663) (cdr x$645$19663))) subst$645$19659) rib$645$19661)) (make-empty-rib$645$12145)))) (set! make-collector$645$12786 (lambda () ((lambda (ls$645$19669) (lambda g$645$19673 ((lambda (g$645$19674) (if (= g$645$19674 (quote 0)) (apply (lambda () ls$645$19669) g$645$19673) (if (= g$645$19674 (quote 1)) (apply (lambda (x$645$19671) (set! ls$645$19669 (set-cons$645$12107 x$645$19671 ls$645$19669))) g$645$19673) (error (quote apply) (quote "invalid arg count"))))) (length g$645$19673)))) (quote ())))) (set! inv-collector$645$12788 (make-parameter$645$11224 (lambda args$645$19675 (error (quote inv-collector) (quote "not initialized"))) (lambda (x$645$19677) (begin (if (procedure? x$645$19677) (void) (error (quote inv-collector) (quote "~s is not a procedure") x$645$19677)) x$645$19677)))) (set! vis-collector$645$12790 (make-parameter$645$11224 (lambda args$645$19679 (error (quote vis-collector) (quote "not initialized"))) (lambda (x$645$19681) (begin (if (procedure? x$645$19681) (void) (error (quote vis-collector) (quote "~s is not a procedure") x$645$19681)) x$645$19681)))) (set! chi-library-internal$645$12792 (lambda (e*$645$19683 rib$645$19684 top?$645$19685) (call-with-values (lambda () (chi-body*$645$12762 e*$645$19683 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) rib$645$19684 top?$645$19685)) (lambda (e*$645$19689 r$645$19690 mr$645$19691 lex*$645$19692 rhs*$645$19693 mod**$645$19694 _kwd*$645$19695) (values (append (apply append (reverse mod**$645$19694)) e*$645$19689) r$645$19690 mr$645$19691 (reverse lex*$645$19692) (reverse rhs*$645$19693)))))) (set! library-body-expander$645$12794 (lambda (exp*$645$19703 imp*$645$19704 b*$645$19705) (call-with-values (lambda () (parse-exports$645$12776 exp*$645$19703)) (lambda (exp-int*$645$19709 exp-ext*$645$19710) (call-with-values (lambda () (parse-import-spec*$645$12782 imp*$645$19704)) (lambda (subst$645$19711 imp*$645$19712) ((lambda (rib$645$19717) ((lambda (b*$645$19719 rtc$645$19720 vtc$645$19721) ((lambda (t$645$19729 t$645$19730 t$645$19731 t$645$19732) ((lambda (swap$645$19737) (dynamic-wind swap$645$19737 (lambda () (call-with-values (lambda () (chi-library-internal$645$12792 b*$645$19719 rib$645$19717 (quote #f))) (lambda (init*$645$19739 r$645$19740 mr$645$19741 lex*$645$19742 rhs*$645$19743) (begin (seal-rib!$645$12149 rib$645$19717) ((lambda (rhs*$645$19749 init*$645$19750) (begin (unseal-rib!$645$12151 rib$645$19717) ((lambda (export-subst$645$19753) (call-with-values (lambda () (make-export-env/macros$645$12837 r$645$19740)) (lambda (export-env$645$19755 global*$645$19756 macro*$645$19757) ((lambda (invoke-body$645$19761 invoke-definitions$645$19762) (values imp*$645$19712 (rtc$645$19720) (vtc$645$19721) (build-sequence$645$12091 (quote #f) (append invoke-definitions$645$19762 (list invoke-body$645$19761))) macro*$645$19757 export-subst$645$19753 export-env$645$19755)) (build-letrec*$645$12088 (quote #f) lex*$645$19742 rhs*$645$19749 (build-exports$645$12833 global*$645$19756 init*$645$19750)) (map build-global-define$645$12105 (map cdr global*$645$19756)))))) (make-export-subst$645$12835 exp-int*$645$19709 exp-ext*$645$19710 rib$645$19717)))) (chi-rhs*$645$12750 rhs*$645$19743 r$645$19740 mr$645$19741) (chi-expr*$645$12736 init*$645$19739 r$645$19740 mr$645$19741)))))) swap$645$19737)) (lambda () (begin ((lambda (t$645$19765) (begin (t$645$19729 t$645$19731) (set! t$645$19731 t$645$19765))) (t$645$19729)) ((lambda (t$645$19767) (begin (t$645$19730 t$645$19732) (set! t$645$19732 t$645$19767))) (t$645$19730)))))) inv-collector$645$12788 vis-collector$645$12790 rtc$645$19720 vtc$645$19721)) (map (lambda (x$645$19769) (mkstx$645$12184 x$645$19769 top-mark*$645$12114 (list rib$645$19717))) b*$645$19705) (make-collector$645$12786) (make-collector$645$12786))) (make-top-rib$645$12784 subst$645$19711)))))))) (set! core-library-expander$645$12796 (lambda (e$645$19771) (call-with-values (lambda () (parse-library$645$12780 e$645$19771)) (lambda (name*$645$19773 exp*$645$19774 imp*$645$19775 b*$645$19776) (call-with-values (lambda () (parse-library-name$645$12778 name*$645$19773)) (lambda (name$645$19781 ver$645$19782) (call-with-values (lambda () (library-body-expander$645$12794 exp*$645$19774 imp*$645$19775 b*$645$19776)) (lambda (imp*$645$19785 invoke-req*$645$19786 visit-req*$645$19787 invoke-code$645$19788 visit-code$645$19789 export-subst$645$19790 export-env$645$19791) (values name$645$19781 imp*$645$19785 invoke-req*$645$19786 visit-req*$645$19787 invoke-code$645$19788 visit-code$645$19789 export-subst$645$19790 export-env$645$19791))))))))) (set! parse-top-level-program$645$12798 (lambda (e*$645$19799) ((lambda (t$645$19801) ((lambda (ls/false$645$19803) (if (if ls/false$645$19803 (begin (quote #f) (apply (lambda (import$645$19805 imp*$645$19806 b*$645$19807) (eq? import$645$19805 (quote import))) ls/false$645$19803)) (quote #f)) (apply (lambda (import$645$19811 imp*$645$19812 b*$645$19813) (values imp*$645$19812 b*$645$19813)) ls/false$645$19803) ((lambda (t$645$19817) ((lambda (ls/false$645$19819) (if (if ls/false$645$19819 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$19819)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) ls/false$645$19819) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$19817 (quote ()))))) ((lambda (x$645$19821) (quote ())) t$645$19817))) t$645$19801))) ((lambda (x$645$19823) (if (syntax-pair?$645$12194 x$645$19823) (begin (quote #f) ((lambda (q$645$19825) (if q$645$19825 (begin (quote #f) ((lambda (r$645$19827) (if r$645$19827 (begin (quote #f) (append q$645$19825 r$645$19827)) (quote #f))) ((letrec ((f$645$19829 (lambda (x$645$19831) (if (syntax-pair?$645$12194 x$645$19831) ((lambda (cars/f$645$19833) (if cars/f$645$19833 (begin (quote #f) ((lambda (cdrs/f$645$19835) (if cdrs/f$645$19835 (begin (quote #f) (map cons cars/f$645$19833 cdrs/f$645$19835)) (quote #f))) (f$645$19829 (syntax-cdr$645$12206 x$645$19831)))) (quote #f))) ((lambda (x$645$19837) (list x$645$19837)) (syntax-car$645$12202 x$645$19831))) (if (syntax-null?$645$12198 x$645$19831) (list (begin (quote b*) (quote ()))) (quote #f)))))) f$645$19829) (syntax-cdr$645$12206 x$645$19823)))) (quote #f))) ((lambda (x$645$19839) (if (syntax-pair?$645$12194 x$645$19839) (begin (quote #f) ((lambda (q$645$19841) (if q$645$19841 (begin (quote #f) ((lambda (r$645$19843) (if r$645$19843 (begin (quote #f) (append q$645$19841 r$645$19843)) (quote #f))) ((letrec ((f$645$19845 (lambda (x$645$19847) (if (syntax-pair?$645$12194 x$645$19847) ((lambda (cars/f$645$19849) (if cars/f$645$19849 (begin (quote #f) ((lambda (cdrs/f$645$19851) (if cdrs/f$645$19851 (begin (quote #f) (map cons cars/f$645$19849 cdrs/f$645$19851)) (quote #f))) (f$645$19845 (syntax-cdr$645$12206 x$645$19847)))) (quote #f))) ((lambda (x$645$19853) (list x$645$19853)) (syntax-car$645$12202 x$645$19847))) (if (syntax-null?$645$12198 x$645$19847) (list (begin (quote imp*) (quote ()))) (quote #f)))))) f$645$19845) (syntax-cdr$645$12206 x$645$19839)))) (quote #f))) ((lambda (x$645$19855) (list x$645$19855)) (syntax-car$645$12202 x$645$19839)))) (quote #f))) (syntax-car$645$12202 x$645$19823)))) (quote #f))) t$645$19801))) e*$645$19799))) (set! top-level-expander$645$12800 (lambda (e*$645$19857) (call-with-values (lambda () (parse-top-level-program$645$12798 e*$645$19857)) (lambda (imp*$645$19859 b*$645$19860) (call-with-values (lambda () (library-body-expander$645$12794 (quote ()) imp*$645$19859 b*$645$19860)) (lambda (imp*$645$19863 invoke-req*$645$19864 visit-req*$645$19865 invoke-code$645$19866 visit-code$645$19867 export-subst$645$19868 export-env$645$19869) (values invoke-req*$645$19864 invoke-code$645$19866))))))) (set! make-env$645$12803 (lambda (subst$645$19877 imp*$645$19878) (vector (quote g$645$12802) subst$645$19877 imp*$645$19878))) (set! env?$645$12805 (lambda (x$645$19881) (if (vector? x$645$19881) (if (= (vector-length x$645$19881) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref x$645$19881 (quote 0)) (quote g$645$12802))) (quote #f)) (quote #f)))) (set! env-subst$645$12807 (lambda (x$645$19883) (if (env?$645$12805 x$645$19883) (vector-ref x$645$19883 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") x$645$19883 (quote env))))) (set! env-imp*$645$12809 (lambda (x$645$19885) (if (env?$645$12805 x$645$19885) (vector-ref x$645$19885 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") x$645$19885 (quote env))))) (set! set-env-subst!$645$12811 (lambda (x$645$19887 v$645$19888) (if (env?$645$12805 x$645$19887) (vector-set! x$645$19887 (quote 1) v$645$19888) (error (quote set-env-subst!) (quote "~s is not of type ~s") x$645$19887 (quote env))))) (set! set-env-imp*!$645$12813 (lambda (x$645$19891 v$645$19892) (if (env?$645$12805 x$645$19891) (vector-set! x$645$19891 (quote 2) v$645$19892) (error (quote set-env-imp*!) (quote "~s is not of type ~s") x$645$19891 (quote env))))) (set! environment?$645$12815 (lambda (x$645$19895) (env?$645$12805 x$645$19895))) (set! environment$645$12817 (lambda imp*$645$19897 (call-with-values (lambda () (parse-import-spec*$645$12782 imp*$645$19897)) (lambda (subst$645$19899 imp*$645$19900) (make-env$645$12803 subst$645$19899 imp*$645$19900))))) (set! null-environment$645$12819 (lambda (n$645$19903) (begin (if (eqv? n$645$19903 (quote 5)) (void) (error (quote null-environment) (quote "~s is not 5") n$645$19903)) (environment$645$12817 (quote (psyntax null-environment-5)))))) (set! scheme-report-environment$645$12821 (lambda (n$645$19905) (begin (if (eqv? n$645$19905 (quote 5)) (void) (error (quote scheme-report-environment) (quote "~s is not 5") n$645$19905)) (environment$645$12817 (quote (psyntax scheme-report-environment-5)))))) (set! expand$645$12823 (lambda (x$645$19907 env$645$19908) (begin (if (env?$645$12805 env$645$19908) (void) (error (quote expand) (quote "~s is not an environment") env$645$19908)) ((lambda (subst$645$19911) ((lambda (rib$645$19913) ((lambda (x$645$19915 rtc$645$19916 vtc$645$19917) ((lambda (x$645$19921) (begin (seal-rib!$645$12149 rib$645$19913) (values x$645$19921 (rtc$645$19916)))) ((lambda (t$645$19927 t$645$19928 t$645$19929 t$645$19930) ((lambda (swap$645$19935) (dynamic-wind swap$645$19935 (lambda () (chi-expr$645$12740 x$645$19915 (quote ()) (quote ()))) swap$645$19935)) (lambda () (begin ((lambda (t$645$19937) (begin (t$645$19927 t$645$19929) (set! t$645$19929 t$645$19937))) (t$645$19927)) ((lambda (t$645$19939) (begin (t$645$19928 t$645$19930) (set! t$645$19930 t$645$19939))) (t$645$19928)))))) inv-collector$645$12788 vis-collector$645$12790 rtc$645$19916 vtc$645$19917))) (mkstx$645$12184 x$645$19907 top-mark*$645$12114 (list rib$645$19913)) (make-collector$645$12786) (make-collector$645$12786))) (make-top-rib$645$12784 subst$645$19911))) (env-subst$645$12807 env$645$19908))))) (set! eval$645$12825 (lambda (x$645$19941 env$645$19942) (begin (if (env?$645$12805 env$645$19942) (void) (error (quote eval) (quote "~s is not an environment") env$645$19942)) (call-with-values (lambda () (expand$645$12823 x$645$19941 env$645$19942)) (lambda (x$645$19945 invoke-req*$645$19946) (begin (for-each invoke-library$645$11746 invoke-req*$645$19946) (eval-core (expanded->core$645$11298 x$645$19945)))))))) (set! library-expander$645$12827 (lambda (x$645$19949) ((lambda (build-visit-code$645$19951 visit!$645$19953) (begin (set! build-visit-code$645$19951 (lambda (macro*$645$19963) (if (null? macro*$645$19963) (build-void$645$12090) (build-sequence$645$12091 (quote #f) (map (lambda (x$645$19965) ((lambda (loc$645$19967 src$645$19968) (list (quote set!) loc$645$19967 src$645$19968)) (car x$645$19965) (cddr x$645$19965))) macro*$645$19963))))) (set! visit!$645$19953 (lambda (macro*$645$19955) (for-each (lambda (x$645$19957) ((lambda (loc$645$19959 proc$645$19960) (set-symbol-value! loc$645$19959 proc$645$19960)) (car x$645$19957) (cadr x$645$19957))) macro*$645$19955))) (call-with-values (lambda () (core-library-expander$645$12796 x$645$19949)) (lambda (name$645$19971 imp*$645$19972 inv*$645$19973 vis*$645$19974 invoke-code$645$19975 macro*$645$19976 export-subst$645$19977 export-env$645$19978) ((lambda (id$645$19987 name$645$19988 ver$645$19989 imp*$645$19990 vis*$645$19991 inv*$645$19992) (begin (install-library$645$11750 id$645$19987 name$645$19988 ver$645$19989 imp*$645$19990 vis*$645$19991 inv*$645$19992 export-subst$645$19977 export-env$645$19978 (lambda () (visit!$645$19953 macro*$645$19976)) (lambda () (eval-core (expanded->core$645$11298 invoke-code$645$19975))) (quote #t)) (values invoke-code$645$19975 (build-visit-code$645$19951 macro*$645$19976) export-subst$645$19977 export-env$645$19978))) (gensym) name$645$19971 (quote ()) (map library-spec$645$11742 imp*$645$19972) (map library-spec$645$11742 vis*$645$19974) (map library-spec$645$11742 inv*$645$19973)))))) (quote #f) (quote #f)))) (set! boot-library-expand$645$12829 (lambda (x$645$19999) (call-with-values (lambda () (library-expander$645$12827 x$645$19999)) (lambda (invoke-code$645$20001 visit-code$645$20002 export-subst$645$20003 export-env$645$20004) (values invoke-code$645$20001 export-subst$645$20003 export-env$645$20004))))) (set! rev-map-append$645$12831 (lambda (f$645$20009 ls$645$20010 ac$645$20011) (if (null? ls$645$20010) ac$645$20011 (rev-map-append$645$12831 f$645$20009 (cdr ls$645$20010) (cons (f$645$20009 (car ls$645$20010)) ac$645$20011))))) (set! build-exports$645$12833 (lambda (lex*+loc*$645$20015 init*$645$20016) (build-sequence$645$12091 (quote #f) (cons (build-void$645$12090) (rev-map-append$645$12831 (lambda (x$645$20019) (list (quote set!) (cdr x$645$20019) (car x$645$20019))) lex*+loc*$645$20015 init*$645$20016))))) (set! make-export-subst$645$12835 (lambda (int*$645$20021 ext*$645$20022 rib$645$20023) (map (lambda (int$645$20027 ext$645$20028) ((lambda (id$645$20031) ((lambda (label$645$20033) ((lambda () (begin (if label$645$20033 (void) (error (quote expander) (quote "~a ~s") (quote "cannot export unbound identifier") (strip$645$12226 id$645$20031 (quote ())))) (cons ext$645$20028 label$645$20033))))) (id->label$645$12230 id$645$20031))) (mkstx$645$12184 int$645$20027 top-mark*$645$12114 (list rib$645$20023)))) int*$645$20021 ext*$645$20022))) (set! make-export-env/macros$645$12837 (lambda (r$645$20035) (letrec ((f$645$20037 (lambda (r$645$20039 env$645$20040 global*$645$20041 macro*$645$20042) (if (null? r$645$20039) (values env$645$20040 global*$645$20041 macro*$645$20042) ((lambda (x$645$20047) ((lambda (label$645$20049 b$645$20050) ((lambda (t$645$20053) (if (memv t$645$20053 (quote (lexical))) ((lambda (loc$645$20058) (f$645$20037 (cdr r$645$20039) (cons (cons* label$645$20049 (quote global) loc$645$20058) env$645$20040) (cons (cons (binding-value$645$12238 b$645$20050) loc$645$20058) global*$645$20041) macro*$645$20042)) (gen-global$645$12120 (binding-value$645$12238 b$645$20050))) (if (memv t$645$20053 (quote (local-macro))) ((lambda (loc$645$20056) (f$645$20037 (cdr r$645$20039) (cons (cons* label$645$20049 (quote global-macro) loc$645$20056) env$645$20040) global*$645$20041 (cons (cons loc$645$20056 (binding-value$645$12238 b$645$20050)) macro*$645$20042))) (gensym)) (if (memv t$645$20053 (quote (local-macro!))) ((lambda (loc$645$20054) (f$645$20037 (cdr r$645$20039) (cons (cons* label$645$20049 (quote global-macro!) loc$645$20054) env$645$20040) global*$645$20041 (cons (cons loc$645$20054 (binding-value$645$12238 b$645$20050)) macro*$645$20042))) (gensym)) (if (memv t$645$20053 (quote ($rtd $module))) (f$645$20037 (cdr r$645$20039) (cons x$645$20047 env$645$20040) global*$645$20041 macro*$645$20042) (error (quote expander) (quote "BUG: do not know how to export ~s ~s") (binding-type$645$12236 b$645$20050) (binding-value$645$12238 b$645$20050))))))) (binding-type$645$12236 b$645$20050))) (car x$645$20047) (cdr x$645$20047))) (car r$645$20039)))))) (f$645$20037 r$645$20035 (quote ()) (quote ()) (quote ()))))) (set! generate-temporaries$645$12839 (lambda (ls$645$20060) ((lambda (t$645$20062) ((lambda (ls/false$645$20064) (if (if ls/false$645$20064 (begin (quote #f) (apply (lambda (ls$645$20066) (quote #t)) ls/false$645$20064)) (quote #f)) (apply (lambda (ls$645$20068) (map (lambda (x$645$20070) (make-stx$645$12158 (gensym (quote t)) top-mark*$645$12114 (quote ()))) ls$645$20068)) ls/false$645$20064) ((lambda (t$645$20072) ((lambda (ls/false$645$20074) (if (if ls/false$645$20074 (begin (quote #f) (apply (lambda () (quote #t)) ls/false$645$20074)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "~s is not a list"))) ls/false$645$20074) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (strip$645$12226 t$645$20072 (quote ()))))) ((lambda (x$645$20076) (quote ())) t$645$20072))) t$645$20062))) ((letrec ((f$645$20078 (lambda (x$645$20080) (if (syntax-pair?$645$12194 x$645$20080) ((lambda (cars/f$645$20082) (if cars/f$645$20082 (begin (quote #f) ((lambda (cdrs/f$645$20084) (if cdrs/f$645$20084 (begin (quote #f) (map cons cars/f$645$20082 cdrs/f$645$20084)) (quote #f))) (f$645$20078 (syntax-cdr$645$12206 x$645$20080)))) (quote #f))) ((lambda (x$645$20086) (list x$645$20086)) (syntax-car$645$12202 x$645$20080))) (if (syntax-null?$645$12198 x$645$20080) (list (begin (quote ls) (quote ()))) (quote #f)))))) f$645$20078) t$645$20062))) ls$645$20060))) (set! free-identifier=?$645$12841 (lambda (x$645$20088 y$645$20089) (if (id?$645$12208 x$645$20088) (if (id?$645$12208 y$645$20089) (free-id=?$645$12216 x$645$20088 y$645$20089) (error (quote free-identifier=?) (quote "~s is not an identifier") y$645$20089)) (error (quote free-identifier=?) (quote "~s is not an identifier") x$645$20088)))) (set! bound-identifier=?$645$12843 (lambda (x$645$20092 y$645$20093) (if (id?$645$12208 x$645$20092) (if (id?$645$12208 y$645$20093) (bound-id=?$645$12214 x$645$20092 y$645$20093) (error (quote bound-identifier=?) (quote "~s is not an identifier") y$645$20093)) (error (quote bound-identifier=?) (quote "~s is not an identifier") x$645$20092)))) (set! syntax-error$645$12845 (lambda (x$645$20096 . args$645$20098) (begin (if (for-all string? args$645$20098) (void) (error (quote syntax-error) (quote "invalid argument ~s") args$645$20098)) (if (null? args$645$20098) (error (quote expander) (quote "invalid syntax ~s") (stx->datum$645$12228 x$645$20096)) (error (quote expander) (quote "~s ~a") (stx->datum$645$12228 x$645$20096) (apply string-append args$645$20098)))))) (set! identifier?$645$12847 (lambda (x$645$20100) (id?$645$12208 x$645$20100))) (set! datum->syntax$645$12849 (lambda (id$645$20102 datum$645$20103) (if (id?$645$12208 id$645$20102) (datum->stx$645$12174 id$645$20102 datum$645$20103) (error (quote datum->syntax) (quote "~s is not an identifier") id$645$20102)))) (set! syntax->datum$645$12851 (lambda (x$645$20106) (stx->datum$645$12228 x$645$20106))) (set! eval-r6rs-top-level$645$12853 (lambda (x*$645$20108) (call-with-values (lambda () (top-level-expander$645$12800 x*$645$20108)) (lambda (lib*$645$20110 invoke-code$645$20111) (begin (for-each invoke-library$645$11746 lib*$645$20110) (eval-core (expanded->core$645$11298 invoke-code$645$20111))))))) (set! interaction-library$645$12855 (make-parameter$645$11224 (quote #f))) (set! interaction-sym->label$645$12857 (lambda (sym$645$20114) ((lambda (t$645$20116) (if t$645$20116 ((lambda (lib$645$20118) ((lambda (t$645$20120) (if t$645$20120 (cdr t$645$20120) ((lambda (subst$645$20122) ((lambda (t$645$20124) (if t$645$20124 ((lambda (sym/lab$645$20126) ((lambda (label$645$20128) (begin (extend-library-subst!$645$11749 lib$645$20118 sym$645$20114 label$645$20128) label$645$20128)) (cdr sym/lab$645$20126))) t$645$20124) ((lambda (label$645$20130) (begin (extend-library-subst!$645$11749 lib$645$20118 sym$645$20114 label$645$20130) (extend-library-env!$645$11748 lib$645$20118 label$645$20130 (cons (quote global) (cons lib$645$20118 (gen-global$645$12120 sym$645$20114)))) label$645$20130)) (gen-label$645$12122 sym$645$20114)))) (assq sym$645$20114 subst$645$20122))) (if (library-exists?$645$11754 (quote (ikarus))) (library-subst$645$11780 (find-library-by-name$645$11755 (quote (ikarus)))) (quote ()))))) (assq sym$645$20114 (library-subst$645$11780 lib$645$20118)))) t$645$20116) (quote #f))) (interaction-library$645$12855)))) (set! eval-top-level$645$12859 (lambda (x$645$20132) ((lambda (eval-binding$645$20134) (begin (set! eval-binding$645$20134 (lambda (x$645$20136) ((lambda (loc$645$20138 expr$645$20139) (if loc$645$20138 (set-symbol-value! loc$645$20138 (eval-core (expanded->core$645$11298 expr$645$20139))) (eval-core (expanded->core$645$11298 expr$645$20139)))) (car x$645$20136) (cdr x$645$20136)))) ((lambda (rtc$645$20142 vtc$645$20143) ((lambda (init*$645$20146) (begin (for-each invoke-library$645$11746 (rtc$645$20142)) (if (null? init*$645$20146) (void) (begin (for-each eval-binding$645$20134 (reverse (cdr init*$645$20146))) (eval-binding$645$20134 (car init*$645$20146)))))) ((lambda (t$645$20154 t$645$20155 t$645$20156 t$645$20157 t$645$20158 t$645$20159) ((lambda (swap$645$20166) (dynamic-wind swap$645$20166 (lambda () (chi-top*$645$12772 (list (mkstx$645$12184 x$645$20132 top-mark*$645$12114 (quote ()))) (quote ()))) swap$645$20166)) (lambda () (begin ((lambda (t$645$20168) (begin (t$645$20154 t$645$20157) (set! t$645$20157 t$645$20168))) (t$645$20154)) ((lambda (t$645$20170) (begin (t$645$20155 t$645$20158) (set! t$645$20158 t$645$20170))) (t$645$20155)) ((lambda (t$645$20172) (begin (t$645$20156 t$645$20159) (set! t$645$20159 t$645$20172))) (t$645$20156)))))) inv-collector$645$12788 vis-collector$645$12790 interaction-library$645$12855 rtc$645$20142 vtc$645$20143 (find-library-by-name$645$11755 (quote (ikarus interaction)))))) (make-collector$645$12786) (make-collector$645$12786)))) (quote #f)))) (begin (set! eval-top-level$645$20174 eval-top-level$645$12859) (set! interaction-sym->label$645$20175 interaction-sym->label$645$12857) (set! interaction-library$645$20176 interaction-library$645$12855) (set! eval-r6rs-top-level$645$20177 eval-r6rs-top-level$645$12853) (set! syntax->datum$645$20178 syntax->datum$645$12851) (set! datum->syntax$645$20179 datum->syntax$645$12849) (set! identifier?$645$20180 identifier?$645$12847) (set! syntax-error$645$20181 syntax-error$645$12845) (set! bound-identifier=?$645$20182 bound-identifier=?$645$12843) (set! free-identifier=?$645$20183 free-identifier=?$645$12841) (set! generate-temporaries$645$20184 generate-temporaries$645$12839) (set! make-export-env/macros$645$20185 make-export-env/macros$645$12837) (set! make-export-subst$645$20186 make-export-subst$645$12835) (set! build-exports$645$20187 build-exports$645$12833) (set! rev-map-append$645$20188 rev-map-append$645$12831) (set! boot-library-expand$645$20189 boot-library-expand$645$12829) (set! library-expander$645$20190 library-expander$645$12827) (set! eval$645$20191 eval$645$12825) (set! expand$645$20192 expand$645$12823) (set! scheme-report-environment$645$20193 scheme-report-environment$645$12821) (set! null-environment$645$20194 null-environment$645$12819) (set! environment$645$20195 environment$645$12817) (set! environment?$645$20196 environment?$645$12815) (set! set-env-imp*!$645$20197 set-env-imp*!$645$12813) (set! set-env-subst!$645$20198 set-env-subst!$645$12811) (set! env-imp*$645$20199 env-imp*$645$12809) (set! env-subst$645$20200 env-subst$645$12807) (set! env?$645$20201 env?$645$12805) (set! make-env$645$20202 make-env$645$12803) (set! top-level-expander$645$20203 top-level-expander$645$12800) (set! parse-top-level-program$645$20204 parse-top-level-program$645$12798) (set! core-library-expander$645$20205 core-library-expander$645$12796) (set! library-body-expander$645$20206 library-body-expander$645$12794) (set! chi-library-internal$645$20207 chi-library-internal$645$12792) (set! vis-collector$645$20208 vis-collector$645$12790) (set! inv-collector$645$20209 inv-collector$645$12788) (set! make-collector$645$20210 make-collector$645$12786) (set! make-top-rib$645$20211 make-top-rib$645$12784) (set! parse-import-spec*$645$20212 parse-import-spec*$645$12782) (set! parse-library$645$20213 parse-library$645$12780) (set! parse-library-name$645$20214 parse-library-name$645$12778) (set! parse-exports$645$20215 parse-exports$645$12776) (set! expand-transformer$645$20216 expand-transformer$645$12774) (set! chi-top*$645$20217 chi-top*$645$12772) (set! chi-top-set!$645$20218 chi-top-set!$645$12770) (set! gen-global-var-binding$645$20219 gen-global-var-binding$645$12768) (set! gen-global-macro-binding$645$20220 gen-global-macro-binding$645$12766) (set! set-global-macro-binding!$645$20221 set-global-macro-binding!$645$12764) (set! chi-body*$645$20222 chi-body*$645$12762) (set! chi-internal-module$645$20223 chi-internal-module$645$12760) (set! parse-module$645$20224 parse-module$645$12758) (set! chi-internal$645$20225 chi-internal$645$12756) (set! find-dups$645$20226 find-dups$645$12754) (set! find-bound=?$645$20227 find-bound=?$645$12752) (set! chi-rhs*$645$20228 chi-rhs*$645$12750) (set! chi-rhs$645$20229 chi-rhs$645$12748) (set! chi-lambda-clause*$645$20230 chi-lambda-clause*$645$12746) (set! chi-lambda-clause$645$20231 chi-lambda-clause$645$12744) (set! chi-set!$645$20232 chi-set!$645$12742) (set! chi-expr$645$20233 chi-expr$645$12740) (set! chi-application$645$20234 chi-application$645$12738) (set! chi-expr*$645$20235 chi-expr*$645$12736) (set! chi-global-macro$645$20236 chi-global-macro$645$12734) (set! chi-local-macro$645$20237 chi-local-macro$645$12732) (set! chi-macro$645$20238 chi-macro$645$12730) (set! local-macro-transformer$645$20239 local-macro-transformer$645$12728) (set! macro-transformer$645$20240 macro-transformer$645$12726) (set! core-macro-transformer$645$20241 core-macro-transformer$645$12724) (set! syntax-transformer$645$20242 syntax-transformer$645$12722) (set! syntax-case-transformer$645$20243 syntax-case-transformer$645$12720) (set! ellipsis?$645$20244 ellipsis?$645$12718) (set! syntax-dispatch$645$20245 syntax-dispatch$645$12716) (set! convert-pattern$645$20246 convert-pattern$645$12714) (set! foreign-call-transformer$645$20247 foreign-call-transformer$645$12712) (set! parameterize-transformer$645$20248 parameterize-transformer$645$12710) (set! incorrect-usage-macro$645$20249 incorrect-usage-macro$645$12708) (set! define-record-macro$645$20250 define-record-macro$645$12706) (set! quasisyntax-macro$645$20251 quasisyntax-macro$645$12704) (set! quasiquote-macro$645$20252 quasiquote-macro$645$12702) (set! syntax-rules-macro$645$20253 syntax-rules-macro$645$12700) (set! include-macro$645$20254 include-macro$645$12698) (set! cond-macro$645$20255 cond-macro$645$12696) (set! and-macro$645$20256 and-macro$645$12694) (set! or-macro$645$20257 or-macro$645$12692) (set! let*-macro$645$20258 let*-macro$645$12690) (set! do-macro$645$20259 do-macro$645$12688) (set! identifier-syntax-macro$645$20260 identifier-syntax-macro$645$12686) (set! endianness-macro$645$20261 endianness-macro$645$12684) (set! assert-macro$645$20262 assert-macro$645$12682) (set! delay-macro$645$20263 delay-macro$645$12680) (set! time-macro$645$20264 time-macro$645$12678) (set! trace-define-macro$645$20265 trace-define-macro$645$12676) (set! trace-lambda-macro$645$20266 trace-lambda-macro$645$12674) (set! let-macro$645$20267 let-macro$645$12672) (set! with-syntax-macro$645$20268 with-syntax-macro$645$12670) (set! bless$645$20269 bless$645$12668) (set! lambda-transformer$645$20270 lambda-transformer$645$12666) (set! case-lambda-transformer$645$20271 case-lambda-transformer$645$12664) (set! quote-transformer$645$20272 quote-transformer$645$12662) (set! case-transformer$645$20273 case-transformer$645$12660) (set! if-transformer$645$20274 if-transformer$645$12658) (set! unless-transformer$645$20275 unless-transformer$645$12656) (set! when-transformer$645$20276 when-transformer$645$12654) (set! type-descriptor-transformer$645$20277 type-descriptor-transformer$645$12652) (set! letrec*-transformer$645$20278 letrec*-transformer$645$12650) (set! letrec-transformer$645$20279 letrec-transformer$645$12648) (set! letrec-helper$645$20280 letrec-helper$645$12646) (set! let-values-transformer$645$20281 let-values-transformer$645$12644) (set! add-lexicals$645$20282 add-lexicals$645$12642) (set! add-lexical$645$20283 add-lexical$645$12640) (set! scheme-stx$645$20284 scheme-stx$645$12638) (set! parse-define-syntax$645$20285 parse-define-syntax$645$12636) (set! parse-define$645$20286 parse-define$645$12634) (set! make-eval-transformer$645$20288 make-eval-transformer$645$12272) (set! make-variable-transformer$645$20289 make-variable-transformer$645$12270) (set! sanitize-binding$645$20290 sanitize-binding$645$12268) (set! syntax-type$645$20292 syntax-type$645$12240) (set! binding-value$645$20293 binding-value$645$12238) (set! binding-type$645$20294 binding-type$645$12236) (set! make-binding$645$20295 make-binding$645$12234) (set! label->binding$645$20296 label->binding$645$12232) (set! id->label$645$20297 id->label$645$12230) (set! stx->datum$645$20298 stx->datum$645$12228) (set! strip$645$20299 strip$645$12226) (set! self-evaluating?$645$20300 self-evaluating?$645$12224) (set! bound-id-member?$645$20301 bound-id-member?$645$12222) (set! distinct-bound-ids?$645$20302 distinct-bound-ids?$645$12220) (set! valid-bound-ids?$645$20303 valid-bound-ids?$645$12218) (set! free-id=?$645$20304 free-id=?$645$12216) (set! bound-id=?$645$20305 bound-id=?$645$12214) (set! same-marks?$645$20306 same-marks?$645$12212) (set! id->sym$645$20307 id->sym$645$12210) (set! id?$645$20308 id?$645$12208) (set! syntax-cdr$645$20309 syntax-cdr$645$12206) (set! syntax->list$645$20310 syntax->list$645$12204) (set! syntax-car$645$20311 syntax-car$645$12202) (set! syntax-list?$645$20312 syntax-list?$645$12200) (set! syntax-null?$645$20313 syntax-null?$645$12198) (set! syntax-vector?$645$20314 syntax-vector?$645$12196) (set! syntax-pair?$645$20315 syntax-pair?$645$12194) (set! syntax-vector->list$645$20316 syntax-vector->list$645$12192) (set! syntax-kind?$645$20317 syntax-kind?$645$12190) (set! add-subst$645$20318 add-subst$645$12188) (set! add-mark$645$20319 add-mark$645$12186) (set! mkstx$645$20320 mkstx$645$12184) (set! join-wraps$645$20321 join-wraps$645$12182) (set! anti-mark?$645$20322 anti-mark?$645$12180) (set! anti-mark$645$20323 anti-mark$645$12178) (set! gen-mark$645$20324 gen-mark$645$12176) (set! datum->stx$645$20325 datum->stx$645$12174) (set! set-stx-subst*!$645$20326 set-stx-subst*!$645$12172) (set! set-stx-mark*!$645$20327 set-stx-mark*!$645$12170) (set! set-stx-expr!$645$20328 set-stx-expr!$645$12168) (set! stx-subst*$645$20329 stx-subst*$645$12166) (set! stx-mark*$645$20330 stx-mark*$645$12164) (set! stx-expr$645$20331 stx-expr$645$12162) (set! stx?$645$20332 stx?$645$12160) (set! make-stx$645$20333 make-stx$645$12158) (set! make-full-rib$645$20334 make-full-rib$645$12155) (set! increment-rib-frequency!$645$20335 increment-rib-frequency!$645$12153) (set! unseal-rib!$645$20336 unseal-rib!$645$12151) (set! seal-rib!$645$20337 seal-rib!$645$12149) (set! extend-rib!$645$20338 extend-rib!$645$12147) (set! make-empty-rib$645$20339 make-empty-rib$645$12145) (set! set-rib-sealed/freq!$645$20340 set-rib-sealed/freq!$645$12143) (set! set-rib-label*!$645$20341 set-rib-label*!$645$12141) (set! set-rib-mark**!$645$20342 set-rib-mark**!$645$12139) (set! set-rib-sym*!$645$20343 set-rib-sym*!$645$12137) (set! rib-sealed/freq$645$20344 rib-sealed/freq$645$12135) (set! rib-label*$645$20345 rib-label*$645$12133) (set! rib-mark**$645$20346 rib-mark**$645$12131) (set! rib-sym*$645$20347 rib-sym*$645$12129) (set! rib?$645$20348 rib?$645$12127) (set! make-rib$645$20349 make-rib$645$12125) (set! gen-label$645$20350 gen-label$645$12122) (set! gen-global$645$20351 gen-global$645$12120) (set! gen-lexical$645$20352 gen-lexical$645$12118) (set! top-marked?$645$20353 top-marked?$645$12116) (set! top-mark*$645$20354 top-mark*$645$12114) (set! set-union$645$20356 set-union$645$12109) (set! set-cons$645$20357 set-cons$645$12107) (current-library-expander$645$11758 library-expander$645$12827)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (current-primitive-locations$645$11302 (lambda (x$645$21118) ((lambda (t$645$21120) (if t$645$21120 (cdr t$645$21120) (quote #f))) (assq x$645$21118 (quote ((syntax-error . syntax-error$645$20181) (syntax-dispatch . syntax-dispatch$645$20245) (make-variable-transformer . make-variable-transformer$645$20289) (identifier? . identifier?$645$20180) (generate-temporaries . generate-temporaries$645$20184) (free-identifier=? . free-identifier=?$645$20183) (syntax->datum . syntax->datum$645$20178) (datum->syntax . datum->syntax$645$20179) (bound-identifier=? . bound-identifier=?$645$20182) (null-environment . null-environment$645$20194) (eval . eval$645$20191) (environment . environment$645$20195))))))) (install-library$645$11750 (quote g$645$21085) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21086) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$645$20422) (unquote . g$645$20421) (delay . g$645$20414) (or . g$645$20412) (and . g$645$20411) (do . g$645$20410) (cond . g$645$20409) (let* . g$645$20408) (let . g$645$20407) (quasiquote . g$645$20403) (syntax-rules . g$645$20402) (case . g$645$20398) (if . g$645$20394) (letrec . g$645$20392) (lambda . g$645$20389) (quote . g$645$20386) (letrec-syntax . g$645$20384) (let-syntax . g$645$20383) (set! . g$645$20382) (begin . g$645$20380) (define-syntax . g$645$20378) (define . g$645$20377))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21087) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$645$21067) (string-ci>=? . g$645$21066) (string-ci=? . g$645$21065) (string-ci<? . g$645$21064) (string-ci<=? . g$645$21063) (char-whitespace? . g$645$21062) (char-upper-case? . g$645$21061) (char-numeric? . g$645$21059) (char-lower-case? . g$645$21058) (char-upcase . g$645$21056) (char-downcase . g$645$21053) (char-ci>? . g$645$21052) (char-ci>=? . g$645$21051) (char-ci=? . g$645$21050) (char-ci<? . g$645$21049) (char-ci<=? . g$645$21048) (char-alphabetic? . g$645$21047) (call-with-output-file . g$645$20991) (call-with-input-file . g$645$20990) (write-char . g$645$20989) (write . g$645$20988) (with-output-to-file . g$645$20987) (with-input-from-file . g$645$20986) (read-char . g$645$20985) (read . g$645$20984) (peek-char . g$645$20983) (open-output-file . g$645$20982) (open-input-file . g$645$20981) (newline . g$645$20980) (display . g$645$20979) (close-output-port . g$645$20978) (close-input-port . g$645$20977) (eof-object . g$645$20975) (current-output-port . g$645$20973) (current-input-port . g$645$20972) (output-port? . g$645$20971) (input-port? . g$645$20970) (scheme-report-environment . g$645$20870) (quotient . g$645$20869) (null-environment . g$645$12820) (remainder . g$645$20868) (modulo . g$645$20867) (inexact->exact . g$645$20866) (force . g$645$20865) (exact->inexact . g$645$20864) (string-fill! . g$645$20861) (string-set! . g$645$20860) (set-cdr! . g$645$20859) (set-car! . g$645$20858) (memv . g$645$20852) (memq . g$645$20851) (member . g$645$20849) (assv . g$645$20841) (assq . g$645$20840) (assoc . g$645$20838) (eval . g$645$12826) (zero? . g$645$20589) (vector? . g$645$20588) (vector-set! . g$645$20587) (vector-ref . g$645$20586) (vector-length . g$645$20584) (vector-fill! . g$645$20582) (vector->list . g$645$20581) (vector . g$645$20580) (values . g$645$20579) (truncate . g$645$20578) (tan . g$645$20577) (symbol? . g$645$20576) (symbol->string . g$645$20574) (substring . g$645$20573) (string? . g$645$20572) (string>? . g$645$20571) (string>=? . g$645$20570) (string=? . g$645$20569) (string<? . g$645$20568) (string<=? . g$645$20567) (string-ref . g$645$20566) (string-length . g$645$20565) (string-copy . g$645$20563) (string-append . g$645$20562) (string->symbol . g$645$20561) (string->number . g$645$20560) (string->list . g$645$20559) (string . g$645$20558) (sqrt . g$645$20557) (sin . g$645$20556) (round . g$645$20555) (reverse . g$645$20554) (real? . g$645$20553) (real-part . g$645$20551) (rationalize . g$645$20550) (rational? . g$645$20549) (procedure? . g$645$20547) (positive? . g$645$20546) (pair? . g$645$20545) (odd? . g$645$20544) (numerator . g$645$20543) (number? . g$645$20542) (number->string . g$645$20541) (not . g$645$20539) (negative? . g$645$20538) (min . g$645$20536) (max . g$645$20535) (map . g$645$20534) (make-vector . g$645$20533) (make-string . g$645$20532) (make-rectangular . g$645$20531) (make-polar . g$645$20530) (magnitude . g$645$20529) (log . g$645$20528) (list? . g$645$20527) (list-tail . g$645$20526) (list-ref . g$645$20525) (list->vector . g$645$20524) (list->string . g$645$20523) (list . g$645$20522) (length . g$645$20521) (lcm . g$645$20520) (integer? . g$645$20519) (integer->char . g$645$20517) (inexact? . g$645$20515) (imag-part . g$645$20513) (gcd . g$645$20512) (for-each . g$645$20511) (floor . g$645$20510) (expt . g$645$20508) (exp . g$645$20507) (exact? . g$645$20506) (even? . g$645$20503) (eqv? . g$645$20501) (equal? . g$645$20500) (eq? . g$645$20499) (dynamic-wind . g$645$20498) (denominator . g$645$20491) (cos . g$645$20490) (cons . g$645$20489) (complex? . g$645$20488) (char? . g$645$20487) (char>? . g$645$20486) (char>=? . g$645$20485) (char=? . g$645$20484) (char<? . g$645$20483) (char<=? . g$645$20482) (char->integer . g$645$20481) (ceiling . g$645$20480) (call-with-values . g$645$20479) (call-with-current-continuation . g$645$20477) (cddddr . g$645$20476) (cdddar . g$645$20475) (cddadr . g$645$20474) (cddaar . g$645$20473) (cdaddr . g$645$20472) (cdadar . g$645$20471) (cdaadr . g$645$20470) (cdaaar . g$645$20469) (cadddr . g$645$20468) (caddar . g$645$20467) (cadadr . g$645$20466) (cadaar . g$645$20465) (caaddr . g$645$20464) (caadar . g$645$20463) (caaadr . g$645$20462) (caaaar . g$645$20461) (cdddr . g$645$20460) (cddar . g$645$20459) (cdadr . g$645$20458) (cdaar . g$645$20457) (caddr . g$645$20456) (cadar . g$645$20455) (caadr . g$645$20454) (caaar . g$645$20453) (cddr . g$645$20452) (cdar . g$645$20451) (cadr . g$645$20450) (caar . g$645$20449) (cdr . g$645$20448) (car . g$645$20447) (boolean? . g$645$20446) (atan . g$645$20444) (asin . g$645$20442) (apply . g$645$20441) (append . g$645$20440) (angle . g$645$20439) (acos . g$645$20438) (abs . g$645$20437) (/ . g$645$20436) (* . g$645$20435) (- . g$645$20434) (+ . g$645$20433) (>= . g$645$20432) (> . g$645$20431) (= . g$645$20430) (<= . g$645$20429) (< . g$645$20428) (unquote-splicing . g$645$20422) (unquote . g$645$20421) (delay . g$645$20414) (or . g$645$20412) (and . g$645$20411) (do . g$645$20410) (cond . g$645$20409) (let* . g$645$20408) (let . g$645$20407) (quasiquote . g$645$20403) (syntax-rules . g$645$20402) (case . g$645$20398) (if . g$645$20394) (letrec . g$645$20392) (lambda . g$645$20389) (quote . g$645$20386) (letrec-syntax . g$645$20384) (let-syntax . g$645$20383) (set! . g$645$20382) (begin . g$645$20380) (define-syntax . g$645$20378) (define . g$645$20377))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21088) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$645$20379))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21089) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21090) (quote (rnrs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$645$21075) (string-titlecase . g$645$21074) (string-normalize-nfkd . g$645$21073) (string-normalize-nfkc . g$645$21072) (string-normalize-nfd . g$645$21071) (string-normalize-nfc . g$645$21070) (string-foldcase . g$645$21069) (string-downcase . g$645$21068) (string-ci>? . g$645$21067) (string-ci>=? . g$645$21066) (string-ci=? . g$645$21065) (string-ci<? . g$645$21064) (string-ci<=? . g$645$21063) (char-whitespace? . g$645$21062) (char-upper-case? . g$645$21061) (char-title-case? . g$645$21060) (char-numeric? . g$645$21059) (char-lower-case? . g$645$21058) (char-general-category . g$645$21057) (char-upcase . g$645$21056) (char-titlecase . g$645$21055) (char-foldcase . g$645$21054) (char-downcase . g$645$21053) (char-ci>? . g$645$21052) (char-ci>=? . g$645$21051) (char-ci=? . g$645$21050) (char-ci<? . g$645$21049) (char-ci<=? . g$645$21048) (char-alphabetic? . g$645$21047) (make-variable-transformer . g$645$12271) (identifier? . g$645$12848) (generate-temporaries . g$645$12840) (free-identifier=? . g$645$12842) (syntax->datum . g$645$12852) (datum->syntax . g$645$12850) (bound-identifier=? . g$645$12844) (record-type-descriptor? . g$645$21046) (record-predicate . g$645$21045) (record-mutator . g$645$21044) (record-constructor . g$645$21043) (record-accessor . g$645$21042) (make-record-type-descriptor . g$645$21041) (make-record-constructor-descriptor . g$645$21040) (record? . g$645$21039) (record-type-uid . g$645$21038) (record-type-sealed? . g$645$21037) (record-type-parent . g$645$21036) (record-type-opaque? . g$645$21035) (record-type-name . g$645$21034) (record-type-generative? . g$645$21033) (record-type-field-names . g$645$21032) (record-rtd . g$645$21031) (record-field-mutable? . g$645$21030) (nongenerative . g$645$21029) (sealed . g$645$21028) (record-type-descriptor . g$645$21027) (record-constructor-descriptor . g$645$21026) (protocol . g$645$21025) (parent-rtd . g$645$21024) (parent . g$645$21023) (opaque . g$645$21022) (mutable . g$645$21021) (immutable . g$645$21020) (fields . g$645$21019) (define-record-type . g$645$21018) (delete-file . g$645$21017) (file-exists? . g$645$21016) (vector-sort! . g$645$21015) (vector-sort . g$645$21014) (list-sort . g$645$21013) (symbol-hash . g$645$21012) (string-ci-hash . g$645$21011) (string-hash . g$645$21010) (equal-hash . g$645$21009) (hashtable-equivalence-function . g$645$21008) (make-hashtable . g$645$21007) (hashtable-hash-function . g$645$21006) (make-eqv-hashtable . g$645$21005) (make-eq-hashtable . g$645$21004) (hashtable? . g$645$21003) (hashtable-update! . g$645$21002) (hashtable-size . g$645$21001) (hashtable-set! . g$645$21000) (hashtable-ref . g$645$20999) (hashtable-mutable? . g$645$20998) (hashtable-keys . g$645$20997) (hashtable-entries . g$645$20996) (hashtable-delete! . g$645$20995) (hashtable-copy . g$645$20994) (hashtable-contains? . g$645$20993) (hashtable-clear! . g$645$20992) (call-with-output-file . g$645$20991) (call-with-input-file . g$645$20990) (write-char . g$645$20989) (write . g$645$20988) (with-output-to-file . g$645$20987) (with-input-from-file . g$645$20986) (read-char . g$645$20985) (read . g$645$20984) (peek-char . g$645$20983) (open-output-file . g$645$20982) (open-input-file . g$645$20981) (newline . g$645$20980) (display . g$645$20979) (close-output-port . g$645$20978) (close-input-port . g$645$20977) (eof-object? . g$645$20976) (eof-object . g$645$20975) (current-error-port . g$645$20974) (current-output-port . g$645$20973) (current-input-port . g$645$20972) (output-port? . g$645$20971) (input-port? . g$645$20970) (utf-8-codec . g$645$20969) (utf-16-codec . g$645$20968) (transcoder-error-handling-mode . g$645$20967) (transcoder-eol-style . g$645$20966) (transcoder-codec . g$645$20965) (transcoded-port . g$645$20964) (textual-port? . g$645$20963) (string->bytevector . g$645$20962) (standard-output-port . g$645$20961) (standard-input-port . g$645$20960) (standard-error-port . g$645$20959) (set-port-position! . g$645$20958) (put-u8 . g$645$20957) (put-string . g$645$20956) (put-datum . g$645$20955) (put-char . g$645$20954) (put-bytevector . g$645$20953) (port? . g$645$20952) (port-transcoder . g$645$20951) (port-position . g$645$20950) (port-has-set-port-position!? . g$645$20949) (port-has-port-position? . g$645$20948) (port-eof? . g$645$20947) (output-port-buffer-mode . g$645$20946) (open-string-output-port . g$645$20945) (open-string-input-port . g$645$20944) (open-file-output-port . g$645$20943) (open-file-input/output-port . g$645$20942) (open-file-input-port . g$645$20941) (open-bytevector-output-port . g$645$20940) (open-bytevector-input-port . g$645$20939) (native-transcoder . g$645$20938) (native-eol-style . g$645$20937) (make-transcoder . g$645$20936) (latin-1-codec . g$645$20935) (make-i/o-write-error . g$645$20934) (make-i/o-read-error . g$645$20933) (make-i/o-port-error . g$645$20932) (make-i/o-invalid-position-error . g$645$20931) (make-i/o-filename-error . g$645$20930) (make-i/o-file-protection-error . g$645$20929) (make-i/o-file-is-read-only-error . g$645$20928) (make-i/o-file-does-not-exist-error . g$645$20927) (make-i/o-file-already-exists-error . g$645$20926) (make-i/o-error . g$645$20925) (make-i/o-encoding-error . g$645$20924) (make-i/o-decoding-error . g$645$20923) (make-custom-textual-output-port . g$645$20922) (make-custom-textual-input/output-port . g$645$20921) (make-custom-textual-input-port . g$645$20920) (make-custom-binary-output-port . g$645$20919) (make-custom-binary-input/output-port . g$645$20918) (make-custom-binary-input-port . g$645$20917) (make-bytevector . g$645$20916) (lookahead-u8 . g$645$20915) (lookahead-char . g$645$20914) (i/o-write-error? . g$645$20913) (&i/o-write . g$645$20912) (i/o-read-error? . g$645$20911) (&i/o-read . g$645$20910) (i/o-port-error? . g$645$20909) (&i/o-port . g$645$20908) (i/o-invalid-position-error? . g$645$20907) (&i/o-invalid-position . g$645$20906) (i/o-filename-error? . g$645$20905) (&i/o-filename . g$645$20904) (i/o-file-protection-error? . g$645$20903) (&i/o-file-protection . g$645$20902) (i/o-file-is-read-only-error? . g$645$20901) (&i/o-file-is-read-only . g$645$20900) (i/o-file-does-not-exist-error? . g$645$20899) (&i/o-file-does-not-exist . g$645$20898) (i/o-file-already-exists-error? . g$645$20897) (&i/o-file-already-exists . g$645$20896) (i/o-error? . g$645$20895) (i/o-error-port . g$645$20894) (i/o-error-filename . g$645$20893) (i/o-encoding-error? . g$645$20892) (i/o-encoding-error-char . g$645$20891) (&i/o-encoding . g$645$20890) (i/o-decoding-error? . g$645$20889) (&i/o-decoding . g$645$20888) (&i/o . g$645$20887) (get-u8 . g$645$20886) (get-string-n! . g$645$20885) (get-string-n . g$645$20884) (get-string-all . g$645$20883) (get-line . g$645$20882) (get-datum . g$645$20881) (get-char . g$645$20880) (get-bytevector-some . g$645$20879) (get-bytevector-n! . g$645$20878) (get-bytevector-n . g$645$20877) (get-bytevector-all . g$645$20876) (flush-output-port . g$645$20875) (file-options . g$645$20874) (error-handling-mode . g$645$20873) (eol-style . g$645$20872) (close-port . g$645$20871) (exit . g$645$20863) (command-line . g$645$20862) (remove . g$645$20857) (remv . g$645$20856) (remp . g$645$20855) (remq . g$645$20854) (partition . g$645$20853) (memv . g$645$20852) (memq . g$645$20851) (memp . g$645$20850) (member . g$645$20849) (exists . g$645$20848) (for-all . g$645$20847) (fold-right . g$645$20846) (fold-left . g$645$20845) (find . g$645$20844) (filter . g$645$20843) (cons* . g$645$20842) (assv . g$645$20841) (assq . g$645$20840) (assp . g$645$20839) (assoc . g$645$20838) (call-with-string-output-port . g$645$20837) (call-with-port . g$645$20836) (call-with-bytevector-output-port . g$645$20835) (bytevector->string . g$645$20834) (buffer-mode? . g$645$20833) (buffer-mode . g$645$20832) (binary-port? . g$645$20831) (guard . g$645$20830) (with-exception-handler . g$645$20829) (raise-continuable . g$645$20828) (raise . g$645$20827) (make-enumeration . g$645$20826) (enum-set=? . g$645$20825) (enum-set-universe . g$645$20824) (enum-set-union . g$645$20823) (enum-set-subset? . g$645$20822) (enum-set-projection . g$645$20821) (enum-set-member? . g$645$20820) (enum-set-intersection . g$645$20819) (enum-set-indexer . g$645$20818) (enum-set-difference . g$645$20817) (enum-set-constructor . g$645$20816) (enum-set-complement . g$645$20815) (enum-set->list . g$645$20814) (define-enumeration . g$645$20813) (who-condition? . g$645$20812) (&who . g$645$20811) (warning? . g$645$20810) (&warning . g$645$20809) (violation? . g$645$20808) (&violation . g$645$20807) (undefined-violation? . g$645$20806) (&undefined . g$645$20805) (syntax-violation? . g$645$20804) (syntax-violation-subform . g$645$20803) (syntax-violation-form . g$645$20802) (syntax-violation . g$645$20801) (&syntax . g$645$20800) (simple-conditions . g$645$20799) (serious-condition? . g$645$20798) (&serious . g$645$20797) (non-continuable-violation? . g$645$20796) (&non-continuable . g$645$20795) (message-condition? . g$645$20794) (&message . g$645$20793) (make-who-condition . g$645$20792) (make-warning . g$645$20791) (make-violation . g$645$20790) (make-undefined-violation . g$645$20789) (make-syntax-violation . g$645$20788) (make-serious-condition . g$645$20787) (make-non-continuable-violation . g$645$20786) (make-message-condition . g$645$20785) (make-lexical-violation . g$645$20784) (make-irritants-condition . g$645$20783) (make-implementation-restriction-violation . g$645$20782) (make-error . g$645$20781) (make-assertion-violation . g$645$20780) (lexical-violation? . g$645$20779) (&lexical . g$645$20778) (irritants-condition? . g$645$20777) (&irritants . g$645$20776) (implementation-restriction-violation? . g$645$20775) (&implementation-restriction . g$645$20774) (error? . g$645$20773) (&error . g$645$20772) (define-condition-type . g$645$20771) (condition-who . g$645$20770) (condition-predicate . g$645$20769) (condition-message . g$645$20768) (condition-irritants . g$645$20767) (condition-accessor . g$645$20766) (condition . g$645$20765) (&condition . g$645$20764) (assertion-violation? . g$645$20763) (&assertion . g$645$20762) (condition? . g$645$20761) (utf32->string . g$645$20760) (utf16->string . g$645$20759) (utf8->string . g$645$20758) (uint-list->bytevector . g$645$20757) (u8-list->bytevector . g$645$20756) (string->utf8 . g$645$20755) (string->utf32 . g$645$20754) (string->utf16 . g$645$20753) (sint-list->bytevector . g$645$20752) (native-endianness . g$645$20751) (bytevector? . g$645$20750) (bytevector=? . g$645$20749) (bytevector-uint-set! . g$645$20748) (bytevector-uint-ref . g$645$20747) (bytevector-u8-set! . g$645$20746) (bytevector-u8-ref . g$645$20745) (bytevector-u64-set! . g$645$20744) (bytevector-u64-ref . g$645$20743) (bytevector-u64-native-set! . g$645$20742) (bytevector-u64-native-ref . g$645$20741) (bytevector-u32-set! . g$645$20740) (bytevector-u32-ref . g$645$20739) (bytevector-u32-native-set! . g$645$20738) (bytevector-u32-native-ref . g$645$20737) (bytevector-u16-set! . g$645$20736) (bytevector-u16-ref . g$645$20735) (bytevector-u16-native-set! . g$645$20734) (bytevector-u16-native-ref . g$645$20733) (bytevector-sint-set! . g$645$20732) (bytevector-sint-ref . g$645$20731) (bytevector-s8-set! . g$645$20730) (bytevector-s8-ref . g$645$20729) (bytevector-s64-set! . g$645$20728) (bytevector-s64-ref . g$645$20727) (bytevector-s64-native-set! . g$645$20726) (bytevector-s64-native-ref . g$645$20725) (bytevector-s32-set! . g$645$20724) (bytevector-s32-ref . g$645$20723) (bytevector-s32-native-set! . g$645$20722) (bytevector-s32-native-ref . g$645$20721) (bytevector-s16-set! . g$645$20720) (bytevector-s16-ref . g$645$20719) (bytevector-s16-native-set! . g$645$20718) (bytevector-s16-native-ref . g$645$20717) (bytevector-length . g$645$20716) (bytevector-ieee-single-ref . g$645$20715) (bytevector-ieee-single-native-set! . g$645$20714) (bytevector-ieee-single-native-ref . g$645$20713) (bytevector-ieee-double-ref . g$645$20712) (bytevector-ieee-double-native-set! . g$645$20711) (bytevector-ieee-double-native-ref . g$645$20710) (bytevector-fill! . g$645$20709) (bytevector-copy! . g$645$20708) (bytevector-copy . g$645$20707) (bytevector->uint-list . g$645$20706) (bytevector->u8-list . g$645$20705) (bytevector->sint-list . g$645$20704) (no-nans-violation? . g$645$20703) (&no-nans . g$645$20702) (no-infinities-violation? . g$645$20701) (&no-infinities . g$645$20700) (make-no-nans-violation . g$645$20699) (make-no-infinities-violation . g$645$20698) (real->flonum . g$645$20697) (flzero? . g$645$20696) (fltruncate . g$645$20695) (fltan . g$645$20694) (flsqrt . g$645$20693) (flsin . g$645$20692) (flround . g$645$20691) (flpositive? . g$645$20690) (flonum? . g$645$20689) (flodd? . g$645$20688) (flnumerator . g$645$20687) (flnegative? . g$645$20686) (flnan? . g$645$20685) (flmod0 . g$645$20684) (flmod . g$645$20683) (flmin . g$645$20682) (flmax . g$645$20681) (fllog . g$645$20680) (flinteger? . g$645$20679) (flinfinite? . g$645$20678) (flfloor . g$645$20677) (flfinite? . g$645$20676) (flexpt . g$645$20675) (flexp . g$645$20674) (fleven? . g$645$20673) (fldiv0-and-mod0 . g$645$20672) (fldiv0 . g$645$20671) (fldiv-and-mod . g$645$20670) (fldiv . g$645$20669) (fldenominator . g$645$20668) (flcos . g$645$20667) (flceiling . g$645$20666) (flatan . g$645$20665) (flasin . g$645$20664) (flacos . g$645$20663) (flabs . g$645$20662) (fl>? . g$645$20661) (fl>=? . g$645$20660) (fl=? . g$645$20659) (fl<? . g$645$20658) (fl<=? . g$645$20657) (fl/ . g$645$20656) (fl- . g$645$20655) (fl+ . g$645$20654) (fl* . g$645$20653) (fixnum->flonum . g$645$20652) (fxzero? . g$645$20651) (fxxor . g$645$20650) (fxrotate-bit-field . g$645$20649) (fxreverse-bit-field . g$645$20648) (fxpositive? . g$645$20647) (fxodd? . g$645$20646) (fxnot . g$645$20645) (fxnegative? . g$645$20644) (fxmod0 . g$645$20643) (fxmod . g$645$20642) (fxmin . g$645$20641) (fxmax . g$645$20640) (fxlength . g$645$20639) (fxior . g$645$20638) (fxif . g$645$20637) (fxfirst-bit-set . g$645$20636) (fxeven? . g$645$20635) (fxdiv0-and-mod0 . g$645$20634) (fxdiv0 . g$645$20633) (fxdiv-and-mod . g$645$20632) (fxdiv . g$645$20631) (fxcopy-bit-field . g$645$20630) (fxcopy-bit . g$645$20629) (fxbit-set? . g$645$20628) (fxbit-field . g$645$20627) (fxbit-count . g$645$20626) (fxarithmetic-shift-right . g$645$20625) (fxarithmetic-shift-left . g$645$20624) (fxarithmetic-shift . g$645$20623) (fxand . g$645$20622) (fx>? . g$645$20621) (fx>=? . g$645$20620) (fx=? . g$645$20619) (fx<? . g$645$20618) (fx<=? . g$645$20617) (fx-/carry . g$645$20616) (fx- . g$645$20615) (fx+/carry . g$645$20614) (fx+ . g$645$20613) (fx*/carry . g$645$20612) (fx* . g$645$20611) (greatest-fixnum . g$645$20610) (least-fixnum . g$645$20609) (fixnum-width . g$645$20608) (fixnum? . g$645$20607) (bitwise-rotate-bit-field . g$645$20606) (bitwise-reverse-bit-field . g$645$20605) (bitwise-length . g$645$20604) (bitwise-if . g$645$20603) (bitwise-first-bit-set . g$645$20602) (bitwise-copy-bit-field . g$645$20601) (bitwise-copy-bit . g$645$20600) (bitwise-bit-set? . g$645$20599) (bitwise-bit-field . g$645$20598) (bitwise-bit-count . g$645$20597) (bitwise-xor . g$645$20596) (bitwise-ior . g$645$20595) (bitwise-and . g$645$20594) (bitwise-not . g$645$20593) (bitwise-arithmetic-shift-right . g$645$20592) (bitwise-arithmetic-shift-left . g$645$20591) (bitwise-arithmetic-shift . g$645$20590) (zero? . g$645$20589) (vector? . g$645$20588) (vector-set! . g$645$20587) (vector-ref . g$645$20586) (vector-map . g$645$20585) (vector-length . g$645$20584) (vector-for-each . g$645$20583) (vector-fill! . g$645$20582) (vector->list . g$645$20581) (vector . g$645$20580) (values . g$645$20579) (truncate . g$645$20578) (tan . g$645$20577) (symbol? . g$645$20576) (symbol=? . g$645$20575) (symbol->string . g$645$20574) (substring . g$645$20573) (string? . g$645$20572) (string>? . g$645$20571) (string>=? . g$645$20570) (string=? . g$645$20569) (string<? . g$645$20568) (string<=? . g$645$20567) (string-ref . g$645$20566) (string-length . g$645$20565) (string-for-each . g$645$20564) (string-copy . g$645$20563) (string-append . g$645$20562) (string->symbol . g$645$20561) (string->number . g$645$20560) (string->list . g$645$20559) (string . g$645$20558) (sqrt . g$645$20557) (sin . g$645$20556) (round . g$645$20555) (reverse . g$645$20554) (real? . g$645$20553) (real-valued? . g$645$20552) (real-part . g$645$20551) (rationalize . g$645$20550) (rational? . g$645$20549) (rational-valued? . g$645$20548) (procedure? . g$645$20547) (positive? . g$645$20546) (pair? . g$645$20545) (odd? . g$645$20544) (numerator . g$645$20543) (number? . g$645$20542) (number->string . g$645$20541) (null? . g$645$20540) (not . g$645$20539) (negative? . g$645$20538) (nan? . g$645$20537) (min . g$645$20536) (max . g$645$20535) (map . g$645$20534) (make-vector . g$645$20533) (make-string . g$645$20532) (make-rectangular . g$645$20531) (make-polar . g$645$20530) (magnitude . g$645$20529) (log . g$645$20528) (list? . g$645$20527) (list-tail . g$645$20526) (list-ref . g$645$20525) (list->vector . g$645$20524) (list->string . g$645$20523) (list . g$645$20522) (length . g$645$20521) (lcm . g$645$20520) (integer? . g$645$20519) (integer-valued? . g$645$20518) (integer->char . g$645$20517) (infinite? . g$645$20516) (inexact? . g$645$20515) (inexact . g$645$20514) (imag-part . g$645$20513) (gcd . g$645$20512) (for-each . g$645$20511) (floor . g$645$20510) (finite? . g$645$20509) (expt . g$645$20508) (exp . g$645$20507) (exact? . g$645$20506) (exact-integer-sqrt . g$645$20505) (exact . g$645$20504) (even? . g$645$20503) (error . g$645$20502) (eqv? . g$645$20501) (equal? . g$645$20500) (eq? . g$645$20499) (dynamic-wind . g$645$20498) (div0-and-mod0 . g$645$20497) (mod0 . g$645$20496) (div0 . g$645$20495) (div-and-mod . g$645$20494) (mod . g$645$20493) (div . g$645$20492) (denominator . g$645$20491) (cos . g$645$20490) (cons . g$645$20489) (complex? . g$645$20488) (char? . g$645$20487) (char>? . g$645$20486) (char>=? . g$645$20485) (char=? . g$645$20484) (char<? . g$645$20483) (char<=? . g$645$20482) (char->integer . g$645$20481) (ceiling . g$645$20480) (call-with-values . g$645$20479) (call/cc . g$645$20478) (call-with-current-continuation . g$645$20477) (cddddr . g$645$20476) (cdddar . g$645$20475) (cddadr . g$645$20474) (cddaar . g$645$20473) (cdaddr . g$645$20472) (cdadar . g$645$20471) (cdaadr . g$645$20470) (cdaaar . g$645$20469) (cadddr . g$645$20468) (caddar . g$645$20467) (cadadr . g$645$20466) (cadaar . g$645$20465) (caaddr . g$645$20464) (caadar . g$645$20463) (caaadr . g$645$20462) (caaaar . g$645$20461) (cdddr . g$645$20460) (cddar . g$645$20459) (cdadr . g$645$20458) (cdaar . g$645$20457) (caddr . g$645$20456) (cadar . g$645$20455) (caadr . g$645$20454) (caaar . g$645$20453) (cddr . g$645$20452) (cdar . g$645$20451) (cadr . g$645$20450) (caar . g$645$20449) (cdr . g$645$20448) (car . g$645$20447) (boolean? . g$645$20446) (boolean=? . g$645$20445) (atan . g$645$20444) (assertion-violation . g$645$20443) (asin . g$645$20442) (apply . g$645$20441) (append . g$645$20440) (angle . g$645$20439) (acos . g$645$20438) (abs . g$645$20437) (/ . g$645$20436) (* . g$645$20435) (- . g$645$20434) (+ . g$645$20433) (>= . g$645$20432) (> . g$645$20431) (= . g$645$20430) (<= . g$645$20429) (< . g$645$20428) (let*-values . g$645$20427) (unsyntax-splicing . g$645$20424) (unsyntax . g$645$20423) (unquote-splicing . g$645$20422) (unquote . g$645$20421) (_ . g$645$20420) (else . g$645$20419) (=> . g$645$20418) (... . g$645$20417) (assert . g$645$20416) (endianness . g$645$20415) (or . g$645$20412) (and . g$645$20411) (do . g$645$20410) (cond . g$645$20409) (let* . g$645$20408) (let . g$645$20407) (identifier-syntax . g$645$20406) (with-syntax . g$645$20405) (quasisyntax . g$645$20404) (quasiquote . g$645$20403) (syntax-rules . g$645$20402) (let-values . g$645$20399) (case . g$645$20398) (unless . g$645$20396) (when . g$645$20395) (if . g$645$20394) (letrec* . g$645$20393) (letrec . g$645$20392) (case-lambda . g$645$20390) (lambda . g$645$20389) (syntax . g$645$20388) (syntax-case . g$645$20387) (quote . g$645$20386) (letrec-syntax . g$645$20384) (let-syntax . g$645$20383) (set! . g$645$20382) (begin . g$645$20380) (define-syntax . g$645$20378) (define . g$645$20377))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21091) (quote (rnrs r5rs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$645$20870) (quotient . g$645$20869) (null-environment . g$645$12820) (remainder . g$645$20868) (modulo . g$645$20867) (inexact->exact . g$645$20866) (force . g$645$20865) (exact->inexact . g$645$20864) (delay . g$645$20414))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21092) (quote (rnrs control)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((do . g$645$20410) (unless . g$645$20396) (when . g$645$20395) (case-lambda . g$645$20390))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21093) (quote (rnrs eval)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eval . g$645$12826) (environment . g$645$12818))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21094) (quote (rnrs mutable-pairs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$645$20859) (set-car! . g$645$20858))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21095) (quote (rnrs mutable-strings)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$645$20861) (string-set! . g$645$20860))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21096) (quote (rnrs programs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((exit . g$645$20863) (command-line . g$645$20862))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21097) (quote (rnrs syntax-case)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$645$12271) (identifier? . g$645$12848) (generate-temporaries . g$645$12840) (free-identifier=? . g$645$12842) (syntax->datum . g$645$12852) (datum->syntax . g$645$12850) (bound-identifier=? . g$645$12844) (syntax-violation . g$645$20801) (unsyntax-splicing . g$645$20424) (unsyntax . g$645$20423) (_ . g$645$20420) (... . g$645$20417) (with-syntax . g$645$20405) (quasisyntax . g$645$20404) (syntax . g$645$20388) (syntax-case . g$645$20387))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21098) (quote (rnrs files)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$645$21017) (file-exists? . g$645$21016) (make-i/o-write-error . g$645$20934) (make-i/o-read-error . g$645$20933) (make-i/o-port-error . g$645$20932) (make-i/o-invalid-position-error . g$645$20931) (make-i/o-filename-error . g$645$20930) (make-i/o-file-protection-error . g$645$20929) (make-i/o-file-is-read-only-error . g$645$20928) (make-i/o-file-does-not-exist-error . g$645$20927) (make-i/o-file-already-exists-error . g$645$20926) (make-i/o-error . g$645$20925) (i/o-write-error? . g$645$20913) (&i/o-write . g$645$20912) (i/o-read-error? . g$645$20911) (&i/o-read . g$645$20910) (i/o-port-error? . g$645$20909) (&i/o-port . g$645$20908) (i/o-invalid-position-error? . g$645$20907) (&i/o-invalid-position . g$645$20906) (i/o-filename-error? . g$645$20905) (&i/o-filename . g$645$20904) (i/o-file-protection-error? . g$645$20903) (&i/o-file-protection . g$645$20902) (i/o-file-is-read-only-error? . g$645$20901) (&i/o-file-is-read-only . g$645$20900) (i/o-file-does-not-exist-error? . g$645$20899) (&i/o-file-does-not-exist . g$645$20898) (i/o-file-already-exists-error? . g$645$20897) (&i/o-file-already-exists . g$645$20896) (i/o-error? . g$645$20895) (i/o-error-port . g$645$20894) (i/o-error-filename . g$645$20893) (&i/o . g$645$20887))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21099) (quote (rnrs sorting)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$645$21015) (vector-sort . g$645$21014) (list-sort . g$645$21013))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21100) (quote (rnrs base)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$645$20589) (vector? . g$645$20588) (vector-set! . g$645$20587) (vector-ref . g$645$20586) (vector-map . g$645$20585) (vector-length . g$645$20584) (vector-for-each . g$645$20583) (vector-fill! . g$645$20582) (vector->list . g$645$20581) (vector . g$645$20580) (values . g$645$20579) (truncate . g$645$20578) (tan . g$645$20577) (symbol? . g$645$20576) (symbol=? . g$645$20575) (symbol->string . g$645$20574) (substring . g$645$20573) (string? . g$645$20572) (string>? . g$645$20571) (string>=? . g$645$20570) (string=? . g$645$20569) (string<? . g$645$20568) (string<=? . g$645$20567) (string-ref . g$645$20566) (string-length . g$645$20565) (string-for-each . g$645$20564) (string-copy . g$645$20563) (string-append . g$645$20562) (string->symbol . g$645$20561) (string->number . g$645$20560) (string->list . g$645$20559) (string . g$645$20558) (sqrt . g$645$20557) (sin . g$645$20556) (round . g$645$20555) (reverse . g$645$20554) (real? . g$645$20553) (real-valued? . g$645$20552) (real-part . g$645$20551) (rationalize . g$645$20550) (rational? . g$645$20549) (rational-valued? . g$645$20548) (procedure? . g$645$20547) (positive? . g$645$20546) (pair? . g$645$20545) (odd? . g$645$20544) (numerator . g$645$20543) (number? . g$645$20542) (number->string . g$645$20541) (null? . g$645$20540) (not . g$645$20539) (negative? . g$645$20538) (nan? . g$645$20537) (min . g$645$20536) (max . g$645$20535) (map . g$645$20534) (make-vector . g$645$20533) (make-string . g$645$20532) (make-rectangular . g$645$20531) (make-polar . g$645$20530) (magnitude . g$645$20529) (log . g$645$20528) (list? . g$645$20527) (list-tail . g$645$20526) (list-ref . g$645$20525) (list->vector . g$645$20524) (list->string . g$645$20523) (list . g$645$20522) (length . g$645$20521) (lcm . g$645$20520) (integer? . g$645$20519) (integer-valued? . g$645$20518) (integer->char . g$645$20517) (infinite? . g$645$20516) (inexact? . g$645$20515) (inexact . g$645$20514) (imag-part . g$645$20513) (gcd . g$645$20512) (for-each . g$645$20511) (floor . g$645$20510) (finite? . g$645$20509) (expt . g$645$20508) (exp . g$645$20507) (exact? . g$645$20506) (exact-integer-sqrt . g$645$20505) (exact . g$645$20504) (even? . g$645$20503) (error . g$645$20502) (eqv? . g$645$20501) (equal? . g$645$20500) (eq? . g$645$20499) (dynamic-wind . g$645$20498) (div0-and-mod0 . g$645$20497) (mod0 . g$645$20496) (div0 . g$645$20495) (div-and-mod . g$645$20494) (mod . g$645$20493) (div . g$645$20492) (denominator . g$645$20491) (cos . g$645$20490) (cons . g$645$20489) (complex? . g$645$20488) (char? . g$645$20487) (char>? . g$645$20486) (char>=? . g$645$20485) (char=? . g$645$20484) (char<? . g$645$20483) (char<=? . g$645$20482) (char->integer . g$645$20481) (ceiling . g$645$20480) (call-with-values . g$645$20479) (call/cc . g$645$20478) (call-with-current-continuation . g$645$20477) (cddddr . g$645$20476) (cdddar . g$645$20475) (cddadr . g$645$20474) (cddaar . g$645$20473) (cdaddr . g$645$20472) (cdadar . g$645$20471) (cdaadr . g$645$20470) (cdaaar . g$645$20469) (cadddr . g$645$20468) (caddar . g$645$20467) (cadadr . g$645$20466) (cadaar . g$645$20465) (caaddr . g$645$20464) (caadar . g$645$20463) (caaadr . g$645$20462) (caaaar . g$645$20461) (cdddr . g$645$20460) (cddar . g$645$20459) (cdadr . g$645$20458) (cdaar . g$645$20457) (caddr . g$645$20456) (cadar . g$645$20455) (caadr . g$645$20454) (caaar . g$645$20453) (cddr . g$645$20452) (cdar . g$645$20451) (cadr . g$645$20450) (caar . g$645$20449) (cdr . g$645$20448) (car . g$645$20447) (boolean? . g$645$20446) (boolean=? . g$645$20445) (atan . g$645$20444) (assertion-violation . g$645$20443) (asin . g$645$20442) (apply . g$645$20441) (append . g$645$20440) (angle . g$645$20439) (acos . g$645$20438) (abs . g$645$20437) (/ . g$645$20436) (* . g$645$20435) (- . g$645$20434) (+ . g$645$20433) (>= . g$645$20432) (> . g$645$20431) (= . g$645$20430) (<= . g$645$20429) (< . g$645$20428) (let*-values . g$645$20427) (unquote-splicing . g$645$20422) (unquote . g$645$20421) (_ . g$645$20420) (else . g$645$20419) (=> . g$645$20418) (... . g$645$20417) (assert . g$645$20416) (or . g$645$20412) (and . g$645$20411) (cond . g$645$20409) (let* . g$645$20408) (let . g$645$20407) (identifier-syntax . g$645$20406) (quasiquote . g$645$20403) (syntax-rules . g$645$20402) (let-values . g$645$20399) (case . g$645$20398) (if . g$645$20394) (letrec* . g$645$20393) (letrec . g$645$20392) (lambda . g$645$20389) (quote . g$645$20386) (letrec-syntax . g$645$20384) (let-syntax . g$645$20383) (set! . g$645$20382) (begin . g$645$20380) (define-syntax . g$645$20378) (define . g$645$20377))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21101) (quote (rnrs lists)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((remove . g$645$20857) (remv . g$645$20856) (remp . g$645$20855) (remq . g$645$20854) (partition . g$645$20853) (memv . g$645$20852) (memq . g$645$20851) (memp . g$645$20850) (member . g$645$20849) (exists . g$645$20848) (for-all . g$645$20847) (fold-right . g$645$20846) (fold-left . g$645$20845) (find . g$645$20844) (filter . g$645$20843) (cons* . g$645$20842) (assv . g$645$20841) (assq . g$645$20840) (assp . g$645$20839) (assoc . g$645$20838))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21102) (quote (rnrs io simple)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$645$20991) (call-with-input-file . g$645$20990) (write-char . g$645$20989) (write . g$645$20988) (with-output-to-file . g$645$20987) (with-input-from-file . g$645$20986) (read-char . g$645$20985) (read . g$645$20984) (peek-char . g$645$20983) (open-output-file . g$645$20982) (open-input-file . g$645$20981) (newline . g$645$20980) (display . g$645$20979) (close-output-port . g$645$20978) (close-input-port . g$645$20977) (eof-object? . g$645$20976) (eof-object . g$645$20975) (current-error-port . g$645$20974) (current-output-port . g$645$20973) (current-input-port . g$645$20972) (output-port? . g$645$20971) (input-port? . g$645$20970) (make-i/o-write-error . g$645$20934) (make-i/o-read-error . g$645$20933) (make-i/o-port-error . g$645$20932) (make-i/o-invalid-position-error . g$645$20931) (make-i/o-filename-error . g$645$20930) (make-i/o-file-protection-error . g$645$20929) (make-i/o-file-is-read-only-error . g$645$20928) (make-i/o-file-does-not-exist-error . g$645$20927) (make-i/o-file-already-exists-error . g$645$20926) (make-i/o-error . g$645$20925) (i/o-write-error? . g$645$20913) (&i/o-write . g$645$20912) (i/o-read-error? . g$645$20911) (&i/o-read . g$645$20910) (i/o-port-error? . g$645$20909) (&i/o-port . g$645$20908) (i/o-invalid-position-error? . g$645$20907) (&i/o-invalid-position . g$645$20906) (i/o-filename-error? . g$645$20905) (&i/o-filename . g$645$20904) (i/o-file-protection-error? . g$645$20903) (&i/o-file-protection . g$645$20902) (i/o-file-is-read-only-error? . g$645$20901) (&i/o-file-is-read-only . g$645$20900) (i/o-file-does-not-exist-error? . g$645$20899) (&i/o-file-does-not-exist . g$645$20898) (i/o-file-already-exists-error? . g$645$20897) (&i/o-file-already-exists . g$645$20896) (i/o-error? . g$645$20895) (i/o-error-port . g$645$20894) (i/o-error-filename . g$645$20893) (&i/o . g$645$20887))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21103) (quote (rnrs bytevectors)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$645$20916) (utf32->string . g$645$20760) (utf16->string . g$645$20759) (utf8->string . g$645$20758) (uint-list->bytevector . g$645$20757) (u8-list->bytevector . g$645$20756) (string->utf8 . g$645$20755) (string->utf32 . g$645$20754) (string->utf16 . g$645$20753) (sint-list->bytevector . g$645$20752) (native-endianness . g$645$20751) (bytevector? . g$645$20750) (bytevector=? . g$645$20749) (bytevector-uint-set! . g$645$20748) (bytevector-uint-ref . g$645$20747) (bytevector-u8-set! . g$645$20746) (bytevector-u8-ref . g$645$20745) (bytevector-u64-set! . g$645$20744) (bytevector-u64-ref . g$645$20743) (bytevector-u64-native-set! . g$645$20742) (bytevector-u64-native-ref . g$645$20741) (bytevector-u32-set! . g$645$20740) (bytevector-u32-ref . g$645$20739) (bytevector-u32-native-set! . g$645$20738) (bytevector-u32-native-ref . g$645$20737) (bytevector-u16-set! . g$645$20736) (bytevector-u16-ref . g$645$20735) (bytevector-u16-native-set! . g$645$20734) (bytevector-u16-native-ref . g$645$20733) (bytevector-sint-set! . g$645$20732) (bytevector-sint-ref . g$645$20731) (bytevector-s8-set! . g$645$20730) (bytevector-s8-ref . g$645$20729) (bytevector-s64-set! . g$645$20728) (bytevector-s64-ref . g$645$20727) (bytevector-s64-native-set! . g$645$20726) (bytevector-s64-native-ref . g$645$20725) (bytevector-s32-set! . g$645$20724) (bytevector-s32-ref . g$645$20723) (bytevector-s32-native-set! . g$645$20722) (bytevector-s32-native-ref . g$645$20721) (bytevector-s16-set! . g$645$20720) (bytevector-s16-ref . g$645$20719) (bytevector-s16-native-set! . g$645$20718) (bytevector-s16-native-ref . g$645$20717) (bytevector-length . g$645$20716) (bytevector-ieee-single-ref . g$645$20715) (bytevector-ieee-single-native-set! . g$645$20714) (bytevector-ieee-single-native-ref . g$645$20713) (bytevector-ieee-double-ref . g$645$20712) (bytevector-ieee-double-native-set! . g$645$20711) (bytevector-ieee-double-native-ref . g$645$20710) (bytevector-fill! . g$645$20709) (bytevector-copy! . g$645$20708) (bytevector-copy . g$645$20707) (bytevector->uint-list . g$645$20706) (bytevector->u8-list . g$645$20705) (bytevector->sint-list . g$645$20704) (endianness . g$645$20415))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21104) (quote (rnrs unicode)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$645$21075) (string-titlecase . g$645$21074) (string-normalize-nfkd . g$645$21073) (string-normalize-nfkc . g$645$21072) (string-normalize-nfd . g$645$21071) (string-normalize-nfc . g$645$21070) (string-foldcase . g$645$21069) (string-downcase . g$645$21068) (string-ci>? . g$645$21067) (string-ci>=? . g$645$21066) (string-ci=? . g$645$21065) (string-ci<? . g$645$21064) (string-ci<=? . g$645$21063) (char-whitespace? . g$645$21062) (char-upper-case? . g$645$21061) (char-title-case? . g$645$21060) (char-numeric? . g$645$21059) (char-lower-case? . g$645$21058) (char-general-category . g$645$21057) (char-upcase . g$645$21056) (char-titlecase . g$645$21055) (char-foldcase . g$645$21054) (char-downcase . g$645$21053) (char-ci>? . g$645$21052) (char-ci>=? . g$645$21051) (char-ci=? . g$645$21050) (char-ci<? . g$645$21049) (char-ci<=? . g$645$21048) (char-alphabetic? . g$645$21047))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21105) (quote (rnrs exceptions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((guard . g$645$20830) (with-exception-handler . g$645$20829) (raise-continuable . g$645$20828) (raise . g$645$20827) (else . g$645$20419) (=> . g$645$20418))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21106) (quote (rnrs arithmetic bitwise)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$645$20606) (bitwise-reverse-bit-field . g$645$20605) (bitwise-length . g$645$20604) (bitwise-if . g$645$20603) (bitwise-first-bit-set . g$645$20602) (bitwise-copy-bit-field . g$645$20601) (bitwise-copy-bit . g$645$20600) (bitwise-bit-set? . g$645$20599) (bitwise-bit-field . g$645$20598) (bitwise-bit-count . g$645$20597) (bitwise-xor . g$645$20596) (bitwise-ior . g$645$20595) (bitwise-and . g$645$20594) (bitwise-not . g$645$20593) (bitwise-arithmetic-shift-right . g$645$20592) (bitwise-arithmetic-shift-left . g$645$20591) (bitwise-arithmetic-shift . g$645$20590))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21107) (quote (rnrs arithmetic fixnums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$645$20651) (fxxor . g$645$20650) (fxrotate-bit-field . g$645$20649) (fxreverse-bit-field . g$645$20648) (fxpositive? . g$645$20647) (fxodd? . g$645$20646) (fxnot . g$645$20645) (fxnegative? . g$645$20644) (fxmod0 . g$645$20643) (fxmod . g$645$20642) (fxmin . g$645$20641) (fxmax . g$645$20640) (fxlength . g$645$20639) (fxior . g$645$20638) (fxif . g$645$20637) (fxfirst-bit-set . g$645$20636) (fxeven? . g$645$20635) (fxdiv0-and-mod0 . g$645$20634) (fxdiv0 . g$645$20633) (fxdiv-and-mod . g$645$20632) (fxdiv . g$645$20631) (fxcopy-bit-field . g$645$20630) (fxcopy-bit . g$645$20629) (fxbit-set? . g$645$20628) (fxbit-field . g$645$20627) (fxbit-count . g$645$20626) (fxarithmetic-shift-right . g$645$20625) (fxarithmetic-shift-left . g$645$20624) (fxarithmetic-shift . g$645$20623) (fxand . g$645$20622) (fx>? . g$645$20621) (fx>=? . g$645$20620) (fx=? . g$645$20619) (fx<? . g$645$20618) (fx<=? . g$645$20617) (fx-/carry . g$645$20616) (fx- . g$645$20615) (fx+/carry . g$645$20614) (fx+ . g$645$20613) (fx*/carry . g$645$20612) (fx* . g$645$20611) (greatest-fixnum . g$645$20610) (least-fixnum . g$645$20609) (fixnum-width . g$645$20608) (fixnum? . g$645$20607))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21108) (quote (rnrs arithmetic flonums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$645$20703) (&no-nans . g$645$20702) (no-infinities-violation? . g$645$20701) (&no-infinities . g$645$20700) (make-no-nans-violation . g$645$20699) (make-no-infinities-violation . g$645$20698) (real->flonum . g$645$20697) (flzero? . g$645$20696) (fltruncate . g$645$20695) (fltan . g$645$20694) (flsqrt . g$645$20693) (flsin . g$645$20692) (flround . g$645$20691) (flpositive? . g$645$20690) (flonum? . g$645$20689) (flodd? . g$645$20688) (flnumerator . g$645$20687) (flnegative? . g$645$20686) (flnan? . g$645$20685) (flmod0 . g$645$20684) (flmod . g$645$20683) (flmin . g$645$20682) (flmax . g$645$20681) (fllog . g$645$20680) (flinteger? . g$645$20679) (flinfinite? . g$645$20678) (flfloor . g$645$20677) (flfinite? . g$645$20676) (flexpt . g$645$20675) (flexp . g$645$20674) (fleven? . g$645$20673) (fldiv0-and-mod0 . g$645$20672) (fldiv0 . g$645$20671) (fldiv-and-mod . g$645$20670) (fldiv . g$645$20669) (fldenominator . g$645$20668) (flcos . g$645$20667) (flceiling . g$645$20666) (flatan . g$645$20665) (flasin . g$645$20664) (flacos . g$645$20663) (flabs . g$645$20662) (fl>? . g$645$20661) (fl>=? . g$645$20660) (fl=? . g$645$20659) (fl<? . g$645$20658) (fl<=? . g$645$20657) (fl/ . g$645$20656) (fl- . g$645$20655) (fl+ . g$645$20654) (fl* . g$645$20653) (fixnum->flonum . g$645$20652))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21109) (quote (rnrs hashtables)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$645$21012) (string-ci-hash . g$645$21011) (string-hash . g$645$21010) (equal-hash . g$645$21009) (hashtable-equivalence-function . g$645$21008) (make-hashtable . g$645$21007) (hashtable-hash-function . g$645$21006) (make-eqv-hashtable . g$645$21005) (make-eq-hashtable . g$645$21004) (hashtable? . g$645$21003) (hashtable-update! . g$645$21002) (hashtable-size . g$645$21001) (hashtable-set! . g$645$21000) (hashtable-ref . g$645$20999) (hashtable-mutable? . g$645$20998) (hashtable-keys . g$645$20997) (hashtable-entries . g$645$20996) (hashtable-delete! . g$645$20995) (hashtable-copy . g$645$20994) (hashtable-contains? . g$645$20993) (hashtable-clear! . g$645$20992))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21110) (quote (rnrs io ports)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$645$20976) (eof-object . g$645$20975) (current-error-port . g$645$20974) (current-output-port . g$645$20973) (current-input-port . g$645$20972) (output-port? . g$645$20971) (input-port? . g$645$20970) (utf-8-codec . g$645$20969) (utf-16-codec . g$645$20968) (transcoder-error-handling-mode . g$645$20967) (transcoder-eol-style . g$645$20966) (transcoder-codec . g$645$20965) (transcoded-port . g$645$20964) (textual-port? . g$645$20963) (string->bytevector . g$645$20962) (standard-output-port . g$645$20961) (standard-input-port . g$645$20960) (standard-error-port . g$645$20959) (set-port-position! . g$645$20958) (put-u8 . g$645$20957) (put-string . g$645$20956) (put-datum . g$645$20955) (put-char . g$645$20954) (put-bytevector . g$645$20953) (port? . g$645$20952) (port-transcoder . g$645$20951) (port-position . g$645$20950) (port-has-set-port-position!? . g$645$20949) (port-has-port-position? . g$645$20948) (port-eof? . g$645$20947) (output-port-buffer-mode . g$645$20946) (open-string-output-port . g$645$20945) (open-string-input-port . g$645$20944) (open-file-output-port . g$645$20943) (open-file-input/output-port . g$645$20942) (open-file-input-port . g$645$20941) (open-bytevector-output-port . g$645$20940) (open-bytevector-input-port . g$645$20939) (native-transcoder . g$645$20938) (native-eol-style . g$645$20937) (make-transcoder . g$645$20936) (latin-1-codec . g$645$20935) (make-i/o-write-error . g$645$20934) (make-i/o-read-error . g$645$20933) (make-i/o-port-error . g$645$20932) (make-i/o-invalid-position-error . g$645$20931) (make-i/o-filename-error . g$645$20930) (make-i/o-file-protection-error . g$645$20929) (make-i/o-file-is-read-only-error . g$645$20928) (make-i/o-file-does-not-exist-error . g$645$20927) (make-i/o-file-already-exists-error . g$645$20926) (make-i/o-error . g$645$20925) (make-i/o-encoding-error . g$645$20924) (make-i/o-decoding-error . g$645$20923) (make-custom-textual-output-port . g$645$20922) (make-custom-textual-input/output-port . g$645$20921) (make-custom-textual-input-port . g$645$20920) (make-custom-binary-output-port . g$645$20919) (make-custom-binary-input/output-port . g$645$20918) (make-custom-binary-input-port . g$645$20917) (lookahead-u8 . g$645$20915) (lookahead-char . g$645$20914) (i/o-write-error? . g$645$20913) (&i/o-write . g$645$20912) (i/o-read-error? . g$645$20911) (&i/o-read . g$645$20910) (i/o-port-error? . g$645$20909) (&i/o-port . g$645$20908) (i/o-invalid-position-error? . g$645$20907) (&i/o-invalid-position . g$645$20906) (i/o-filename-error? . g$645$20905) (&i/o-filename . g$645$20904) (i/o-file-protection-error? . g$645$20903) (&i/o-file-protection . g$645$20902) (i/o-file-is-read-only-error? . g$645$20901) (&i/o-file-is-read-only . g$645$20900) (i/o-file-does-not-exist-error? . g$645$20899) (&i/o-file-does-not-exist . g$645$20898) (i/o-file-already-exists-error? . g$645$20897) (&i/o-file-already-exists . g$645$20896) (i/o-error? . g$645$20895) (i/o-error-port . g$645$20894) (i/o-error-filename . g$645$20893) (i/o-encoding-error? . g$645$20892) (i/o-encoding-error-char . g$645$20891) (&i/o-encoding . g$645$20890) (i/o-decoding-error? . g$645$20889) (&i/o-decoding . g$645$20888) (&i/o . g$645$20887) (get-u8 . g$645$20886) (get-string-n! . g$645$20885) (get-string-n . g$645$20884) (get-string-all . g$645$20883) (get-line . g$645$20882) (get-datum . g$645$20881) (get-char . g$645$20880) (get-bytevector-some . g$645$20879) (get-bytevector-n! . g$645$20878) (get-bytevector-n . g$645$20877) (get-bytevector-all . g$645$20876) (flush-output-port . g$645$20875) (file-options . g$645$20874) (error-handling-mode . g$645$20873) (eol-style . g$645$20872) (close-port . g$645$20871) (call-with-string-output-port . g$645$20837) (call-with-port . g$645$20836) (call-with-bytevector-output-port . g$645$20835) (bytevector->string . g$645$20834) (buffer-mode? . g$645$20833) (buffer-mode . g$645$20832) (binary-port? . g$645$20831))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21111) (quote (rnrs enums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$645$20826) (enum-set=? . g$645$20825) (enum-set-universe . g$645$20824) (enum-set-union . g$645$20823) (enum-set-subset? . g$645$20822) (enum-set-projection . g$645$20821) (enum-set-member? . g$645$20820) (enum-set-intersection . g$645$20819) (enum-set-indexer . g$645$20818) (enum-set-difference . g$645$20817) (enum-set-constructor . g$645$20816) (enum-set-complement . g$645$20815) (enum-set->list . g$645$20814) (define-enumeration . g$645$20813))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21112) (quote (rnrs conditions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$645$20812) (&who . g$645$20811) (warning? . g$645$20810) (&warning . g$645$20809) (violation? . g$645$20808) (&violation . g$645$20807) (undefined-violation? . g$645$20806) (&undefined . g$645$20805) (syntax-violation? . g$645$20804) (syntax-violation-subform . g$645$20803) (syntax-violation-form . g$645$20802) (syntax-violation . g$645$20801) (&syntax . g$645$20800) (simple-conditions . g$645$20799) (serious-condition? . g$645$20798) (&serious . g$645$20797) (non-continuable-violation? . g$645$20796) (&non-continuable . g$645$20795) (message-condition? . g$645$20794) (&message . g$645$20793) (make-who-condition . g$645$20792) (make-warning . g$645$20791) (make-violation . g$645$20790) (make-undefined-violation . g$645$20789) (make-syntax-violation . g$645$20788) (make-serious-condition . g$645$20787) (make-non-continuable-violation . g$645$20786) (make-message-condition . g$645$20785) (make-lexical-violation . g$645$20784) (make-irritants-condition . g$645$20783) (make-implementation-restriction-violation . g$645$20782) (make-error . g$645$20781) (make-assertion-violation . g$645$20780) (lexical-violation? . g$645$20779) (&lexical . g$645$20778) (irritants-condition? . g$645$20777) (&irritants . g$645$20776) (implementation-restriction-violation? . g$645$20775) (&implementation-restriction . g$645$20774) (error? . g$645$20773) (&error . g$645$20772) (define-condition-type . g$645$20771) (condition-who . g$645$20770) (condition-predicate . g$645$20769) (condition-message . g$645$20768) (condition-irritants . g$645$20767) (condition-accessor . g$645$20766) (condition . g$645$20765) (&condition . g$645$20764) (assertion-violation? . g$645$20763) (&assertion . g$645$20762) (condition? . g$645$20761))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21113) (quote (rnrs records inspection)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record? . g$645$21039) (record-type-uid . g$645$21038) (record-type-sealed? . g$645$21037) (record-type-parent . g$645$21036) (record-type-opaque? . g$645$21035) (record-type-name . g$645$21034) (record-type-generative? . g$645$21033) (record-type-field-names . g$645$21032) (record-rtd . g$645$21031) (record-field-mutable? . g$645$21030))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21114) (quote (rnrs records procedural)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$645$21046) (record-predicate . g$645$21045) (record-mutator . g$645$21044) (record-constructor . g$645$21043) (record-accessor . g$645$21042) (make-record-type-descriptor . g$645$21041) (make-record-constructor-descriptor . g$645$21040))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21115) (quote (rnrs records syntactic)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((nongenerative . g$645$21029) (sealed . g$645$21028) (record-type-descriptor . g$645$21027) (record-constructor-descriptor . g$645$21026) (protocol . g$645$21025) (parent-rtd . g$645$21024) (parent . g$645$21023) (opaque . g$645$21022) (mutable . g$645$21021) (immutable . g$645$21020) (fields . g$645$21019) (define-record-type . g$645$21018))) (quote ()) values values (quote #t)) (install-library$645$11750 (quote g$645$21116) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$645$12846) (syntax-dispatch . g$645$12717) (pretty-print . g$645$21084) (eval-core . g$645$21083) (set-symbol-value! . g$645$21082) (symbol-value . g$645$21081) (gensym . g$645$21080) (void . g$645$21079) (load . g$645$21078) (interaction-environment . g$645$21077) (char-ready? . g$645$21076) (string-upcase . g$645$21075) (string-titlecase . g$645$21074) (string-normalize-nfkd . g$645$21073) (string-normalize-nfkc . g$645$21072) (string-normalize-nfd . g$645$21071) (string-normalize-nfc . g$645$21070) (string-foldcase . g$645$21069) (string-downcase . g$645$21068) (string-ci>? . g$645$21067) (string-ci>=? . g$645$21066) (string-ci=? . g$645$21065) (string-ci<? . g$645$21064) (string-ci<=? . g$645$21063) (char-whitespace? . g$645$21062) (char-upper-case? . g$645$21061) (char-title-case? . g$645$21060) (char-numeric? . g$645$21059) (char-lower-case? . g$645$21058) (char-general-category . g$645$21057) (char-upcase . g$645$21056) (char-titlecase . g$645$21055) (char-foldcase . g$645$21054) (char-downcase . g$645$21053) (char-ci>? . g$645$21052) (char-ci>=? . g$645$21051) (char-ci=? . g$645$21050) (char-ci<? . g$645$21049) (char-ci<=? . g$645$21048) (char-alphabetic? . g$645$21047) (make-variable-transformer . g$645$12271) (identifier? . g$645$12848) (generate-temporaries . g$645$12840) (free-identifier=? . g$645$12842) (syntax->datum . g$645$12852) (datum->syntax . g$645$12850) (bound-identifier=? . g$645$12844) (record-type-descriptor? . g$645$21046) (record-predicate . g$645$21045) (record-mutator . g$645$21044) (record-constructor . g$645$21043) (record-accessor . g$645$21042) (make-record-type-descriptor . g$645$21041) (make-record-constructor-descriptor . g$645$21040) (record? . g$645$21039) (record-type-uid . g$645$21038) (record-type-sealed? . g$645$21037) (record-type-parent . g$645$21036) (record-type-opaque? . g$645$21035) (record-type-name . g$645$21034) (record-type-generative? . g$645$21033) (record-type-field-names . g$645$21032) (record-rtd . g$645$21031) (record-field-mutable? . g$645$21030) (nongenerative . g$645$21029) (sealed . g$645$21028) (record-type-descriptor . g$645$21027) (record-constructor-descriptor . g$645$21026) (protocol . g$645$21025) (parent-rtd . g$645$21024) (parent . g$645$21023) (opaque . g$645$21022) (mutable . g$645$21021) (immutable . g$645$21020) (fields . g$645$21019) (define-record-type . g$645$21018) (delete-file . g$645$21017) (file-exists? . g$645$21016) (vector-sort! . g$645$21015) (vector-sort . g$645$21014) (list-sort . g$645$21013) (symbol-hash . g$645$21012) (string-ci-hash . g$645$21011) (string-hash . g$645$21010) (equal-hash . g$645$21009) (hashtable-equivalence-function . g$645$21008) (make-hashtable . g$645$21007) (hashtable-hash-function . g$645$21006) (make-eqv-hashtable . g$645$21005) (make-eq-hashtable . g$645$21004) (hashtable? . g$645$21003) (hashtable-update! . g$645$21002) (hashtable-size . g$645$21001) (hashtable-set! . g$645$21000) (hashtable-ref . g$645$20999) (hashtable-mutable? . g$645$20998) (hashtable-keys . g$645$20997) (hashtable-entries . g$645$20996) (hashtable-delete! . g$645$20995) (hashtable-copy . g$645$20994) (hashtable-contains? . g$645$20993) (hashtable-clear! . g$645$20992) (call-with-output-file . g$645$20991) (call-with-input-file . g$645$20990) (write-char . g$645$20989) (write . g$645$20988) (with-output-to-file . g$645$20987) (with-input-from-file . g$645$20986) (read-char . g$645$20985) (read . g$645$20984) (peek-char . g$645$20983) (open-output-file . g$645$20982) (open-input-file . g$645$20981) (newline . g$645$20980) (display . g$645$20979) (close-output-port . g$645$20978) (close-input-port . g$645$20977) (eof-object? . g$645$20976) (eof-object . g$645$20975) (current-error-port . g$645$20974) (current-output-port . g$645$20973) (current-input-port . g$645$20972) (output-port? . g$645$20971) (input-port? . g$645$20970) (utf-8-codec . g$645$20969) (utf-16-codec . g$645$20968) (transcoder-error-handling-mode . g$645$20967) (transcoder-eol-style . g$645$20966) (transcoder-codec . g$645$20965) (transcoded-port . g$645$20964) (textual-port? . g$645$20963) (string->bytevector . g$645$20962) (standard-output-port . g$645$20961) (standard-input-port . g$645$20960) (standard-error-port . g$645$20959) (set-port-position! . g$645$20958) (put-u8 . g$645$20957) (put-string . g$645$20956) (put-datum . g$645$20955) (put-char . g$645$20954) (put-bytevector . g$645$20953) (port? . g$645$20952) (port-transcoder . g$645$20951) (port-position . g$645$20950) (port-has-set-port-position!? . g$645$20949) (port-has-port-position? . g$645$20948) (port-eof? . g$645$20947) (output-port-buffer-mode . g$645$20946) (open-string-output-port . g$645$20945) (open-string-input-port . g$645$20944) (open-file-output-port . g$645$20943) (open-file-input/output-port . g$645$20942) (open-file-input-port . g$645$20941) (open-bytevector-output-port . g$645$20940) (open-bytevector-input-port . g$645$20939) (native-transcoder . g$645$20938) (native-eol-style . g$645$20937) (make-transcoder . g$645$20936) (latin-1-codec . g$645$20935) (make-i/o-write-error . g$645$20934) (make-i/o-read-error . g$645$20933) (make-i/o-port-error . g$645$20932) (make-i/o-invalid-position-error . g$645$20931) (make-i/o-filename-error . g$645$20930) (make-i/o-file-protection-error . g$645$20929) (make-i/o-file-is-read-only-error . g$645$20928) (make-i/o-file-does-not-exist-error . g$645$20927) (make-i/o-file-already-exists-error . g$645$20926) (make-i/o-error . g$645$20925) (make-i/o-encoding-error . g$645$20924) (make-i/o-decoding-error . g$645$20923) (make-custom-textual-output-port . g$645$20922) (make-custom-textual-input/output-port . g$645$20921) (make-custom-textual-input-port . g$645$20920) (make-custom-binary-output-port . g$645$20919) (make-custom-binary-input/output-port . g$645$20918) (make-custom-binary-input-port . g$645$20917) (make-bytevector . g$645$20916) (lookahead-u8 . g$645$20915) (lookahead-char . g$645$20914) (i/o-write-error? . g$645$20913) (&i/o-write . g$645$20912) (i/o-read-error? . g$645$20911) (&i/o-read . g$645$20910) (i/o-port-error? . g$645$20909) (&i/o-port . g$645$20908) (i/o-invalid-position-error? . g$645$20907) (&i/o-invalid-position . g$645$20906) (i/o-filename-error? . g$645$20905) (&i/o-filename . g$645$20904) (i/o-file-protection-error? . g$645$20903) (&i/o-file-protection . g$645$20902) (i/o-file-is-read-only-error? . g$645$20901) (&i/o-file-is-read-only . g$645$20900) (i/o-file-does-not-exist-error? . g$645$20899) (&i/o-file-does-not-exist . g$645$20898) (i/o-file-already-exists-error? . g$645$20897) (&i/o-file-already-exists . g$645$20896) (i/o-error? . g$645$20895) (i/o-error-port . g$645$20894) (i/o-error-filename . g$645$20893) (i/o-encoding-error? . g$645$20892) (i/o-encoding-error-char . g$645$20891) (&i/o-encoding . g$645$20890) (i/o-decoding-error? . g$645$20889) (&i/o-decoding . g$645$20888) (&i/o . g$645$20887) (get-u8 . g$645$20886) (get-string-n! . g$645$20885) (get-string-n . g$645$20884) (get-string-all . g$645$20883) (get-line . g$645$20882) (get-datum . g$645$20881) (get-char . g$645$20880) (get-bytevector-some . g$645$20879) (get-bytevector-n! . g$645$20878) (get-bytevector-n . g$645$20877) (get-bytevector-all . g$645$20876) (flush-output-port . g$645$20875) (file-options . g$645$20874) (error-handling-mode . g$645$20873) (eol-style . g$645$20872) (close-port . g$645$20871) (scheme-report-environment . g$645$20870) (quotient . g$645$20869) (null-environment . g$645$12820) (remainder . g$645$20868) (modulo . g$645$20867) (inexact->exact . g$645$20866) (force . g$645$20865) (exact->inexact . g$645$20864) (exit . g$645$20863) (command-line . g$645$20862) (string-fill! . g$645$20861) (string-set! . g$645$20860) (set-cdr! . g$645$20859) (set-car! . g$645$20858) (remove . g$645$20857) (remv . g$645$20856) (remp . g$645$20855) (remq . g$645$20854) (partition . g$645$20853) (memv . g$645$20852) (memq . g$645$20851) (memp . g$645$20850) (member . g$645$20849) (exists . g$645$20848) (for-all . g$645$20847) (fold-right . g$645$20846) (fold-left . g$645$20845) (find . g$645$20844) (filter . g$645$20843) (cons* . g$645$20842) (assv . g$645$20841) (assq . g$645$20840) (assp . g$645$20839) (assoc . g$645$20838) (call-with-string-output-port . g$645$20837) (call-with-port . g$645$20836) (call-with-bytevector-output-port . g$645$20835) (bytevector->string . g$645$20834) (buffer-mode? . g$645$20833) (buffer-mode . g$645$20832) (binary-port? . g$645$20831) (guard . g$645$20830) (with-exception-handler . g$645$20829) (raise-continuable . g$645$20828) (raise . g$645$20827) (eval . g$645$12826) (environment . g$645$12818) (make-enumeration . g$645$20826) (enum-set=? . g$645$20825) (enum-set-universe . g$645$20824) (enum-set-union . g$645$20823) (enum-set-subset? . g$645$20822) (enum-set-projection . g$645$20821) (enum-set-member? . g$645$20820) (enum-set-intersection . g$645$20819) (enum-set-indexer . g$645$20818) (enum-set-difference . g$645$20817) (enum-set-constructor . g$645$20816) (enum-set-complement . g$645$20815) (enum-set->list . g$645$20814) (define-enumeration . g$645$20813) (who-condition? . g$645$20812) (&who . g$645$20811) (warning? . g$645$20810) (&warning . g$645$20809) (violation? . g$645$20808) (&violation . g$645$20807) (undefined-violation? . g$645$20806) (&undefined . g$645$20805) (syntax-violation? . g$645$20804) (syntax-violation-subform . g$645$20803) (syntax-violation-form . g$645$20802) (syntax-violation . g$645$20801) (&syntax . g$645$20800) (simple-conditions . g$645$20799) (serious-condition? . g$645$20798) (&serious . g$645$20797) (non-continuable-violation? . g$645$20796) (&non-continuable . g$645$20795) (message-condition? . g$645$20794) (&message . g$645$20793) (make-who-condition . g$645$20792) (make-warning . g$645$20791) (make-violation . g$645$20790) (make-undefined-violation . g$645$20789) (make-syntax-violation . g$645$20788) (make-serious-condition . g$645$20787) (make-non-continuable-violation . g$645$20786) (make-message-condition . g$645$20785) (make-lexical-violation . g$645$20784) (make-irritants-condition . g$645$20783) (make-implementation-restriction-violation . g$645$20782) (make-error . g$645$20781) (make-assertion-violation . g$645$20780) (lexical-violation? . g$645$20779) (&lexical . g$645$20778) (irritants-condition? . g$645$20777) (&irritants . g$645$20776) (implementation-restriction-violation? . g$645$20775) (&implementation-restriction . g$645$20774) (error? . g$645$20773) (&error . g$645$20772) (define-condition-type . g$645$20771) (condition-who . g$645$20770) (condition-predicate . g$645$20769) (condition-message . g$645$20768) (condition-irritants . g$645$20767) (condition-accessor . g$645$20766) (condition . g$645$20765) (&condition . g$645$20764) (assertion-violation? . g$645$20763) (&assertion . g$645$20762) (condition? . g$645$20761) (utf32->string . g$645$20760) (utf16->string . g$645$20759) (utf8->string . g$645$20758) (uint-list->bytevector . g$645$20757) (u8-list->bytevector . g$645$20756) (string->utf8 . g$645$20755) (string->utf32 . g$645$20754) (string->utf16 . g$645$20753) (sint-list->bytevector . g$645$20752) (native-endianness . g$645$20751) (bytevector? . g$645$20750) (bytevector=? . g$645$20749) (bytevector-uint-set! . g$645$20748) (bytevector-uint-ref . g$645$20747) (bytevector-u8-set! . g$645$20746) (bytevector-u8-ref . g$645$20745) (bytevector-u64-set! . g$645$20744) (bytevector-u64-ref . g$645$20743) (bytevector-u64-native-set! . g$645$20742) (bytevector-u64-native-ref . g$645$20741) (bytevector-u32-set! . g$645$20740) (bytevector-u32-ref . g$645$20739) (bytevector-u32-native-set! . g$645$20738) (bytevector-u32-native-ref . g$645$20737) (bytevector-u16-set! . g$645$20736) (bytevector-u16-ref . g$645$20735) (bytevector-u16-native-set! . g$645$20734) (bytevector-u16-native-ref . g$645$20733) (bytevector-sint-set! . g$645$20732) (bytevector-sint-ref . g$645$20731) (bytevector-s8-set! . g$645$20730) (bytevector-s8-ref . g$645$20729) (bytevector-s64-set! . g$645$20728) (bytevector-s64-ref . g$645$20727) (bytevector-s64-native-set! . g$645$20726) (bytevector-s64-native-ref . g$645$20725) (bytevector-s32-set! . g$645$20724) (bytevector-s32-ref . g$645$20723) (bytevector-s32-native-set! . g$645$20722) (bytevector-s32-native-ref . g$645$20721) (bytevector-s16-set! . g$645$20720) (bytevector-s16-ref . g$645$20719) (bytevector-s16-native-set! . g$645$20718) (bytevector-s16-native-ref . g$645$20717) (bytevector-length . g$645$20716) (bytevector-ieee-single-ref . g$645$20715) (bytevector-ieee-single-native-set! . g$645$20714) (bytevector-ieee-single-native-ref . g$645$20713) (bytevector-ieee-double-ref . g$645$20712) (bytevector-ieee-double-native-set! . g$645$20711) (bytevector-ieee-double-native-ref . g$645$20710) (bytevector-fill! . g$645$20709) (bytevector-copy! . g$645$20708) (bytevector-copy . g$645$20707) (bytevector->uint-list . g$645$20706) (bytevector->u8-list . g$645$20705) (bytevector->sint-list . g$645$20704) (no-nans-violation? . g$645$20703) (&no-nans . g$645$20702) (no-infinities-violation? . g$645$20701) (&no-infinities . g$645$20700) (make-no-nans-violation . g$645$20699) (make-no-infinities-violation . g$645$20698) (real->flonum . g$645$20697) (flzero? . g$645$20696) (fltruncate . g$645$20695) (fltan . g$645$20694) (flsqrt . g$645$20693) (flsin . g$645$20692) (flround . g$645$20691) (flpositive? . g$645$20690) (flonum? . g$645$20689) (flodd? . g$645$20688) (flnumerator . g$645$20687) (flnegative? . g$645$20686) (flnan? . g$645$20685) (flmod0 . g$645$20684) (flmod . g$645$20683) (flmin . g$645$20682) (flmax . g$645$20681) (fllog . g$645$20680) (flinteger? . g$645$20679) (flinfinite? . g$645$20678) (flfloor . g$645$20677) (flfinite? . g$645$20676) (flexpt . g$645$20675) (flexp . g$645$20674) (fleven? . g$645$20673) (fldiv0-and-mod0 . g$645$20672) (fldiv0 . g$645$20671) (fldiv-and-mod . g$645$20670) (fldiv . g$645$20669) (fldenominator . g$645$20668) (flcos . g$645$20667) (flceiling . g$645$20666) (flatan . g$645$20665) (flasin . g$645$20664) (flacos . g$645$20663) (flabs . g$645$20662) (fl>? . g$645$20661) (fl>=? . g$645$20660) (fl=? . g$645$20659) (fl<? . g$645$20658) (fl<=? . g$645$20657) (fl/ . g$645$20656) (fl- . g$645$20655) (fl+ . g$645$20654) (fl* . g$645$20653) (fixnum->flonum . g$645$20652) (fxzero? . g$645$20651) (fxxor . g$645$20650) (fxrotate-bit-field . g$645$20649) (fxreverse-bit-field . g$645$20648) (fxpositive? . g$645$20647) (fxodd? . g$645$20646) (fxnot . g$645$20645) (fxnegative? . g$645$20644) (fxmod0 . g$645$20643) (fxmod . g$645$20642) (fxmin . g$645$20641) (fxmax . g$645$20640) (fxlength . g$645$20639) (fxior . g$645$20638) (fxif . g$645$20637) (fxfirst-bit-set . g$645$20636) (fxeven? . g$645$20635) (fxdiv0-and-mod0 . g$645$20634) (fxdiv0 . g$645$20633) (fxdiv-and-mod . g$645$20632) (fxdiv . g$645$20631) (fxcopy-bit-field . g$645$20630) (fxcopy-bit . g$645$20629) (fxbit-set? . g$645$20628) (fxbit-field . g$645$20627) (fxbit-count . g$645$20626) (fxarithmetic-shift-right . g$645$20625) (fxarithmetic-shift-left . g$645$20624) (fxarithmetic-shift . g$645$20623) (fxand . g$645$20622) (fx>? . g$645$20621) (fx>=? . g$645$20620) (fx=? . g$645$20619) (fx<? . g$645$20618) (fx<=? . g$645$20617) (fx-/carry . g$645$20616) (fx- . g$645$20615) (fx+/carry . g$645$20614) (fx+ . g$645$20613) (fx*/carry . g$645$20612) (fx* . g$645$20611) (greatest-fixnum . g$645$20610) (least-fixnum . g$645$20609) (fixnum-width . g$645$20608) (fixnum? . g$645$20607) (bitwise-rotate-bit-field . g$645$20606) (bitwise-reverse-bit-field . g$645$20605) (bitwise-length . g$645$20604) (bitwise-if . g$645$20603) (bitwise-first-bit-set . g$645$20602) (bitwise-copy-bit-field . g$645$20601) (bitwise-copy-bit . g$645$20600) (bitwise-bit-set? . g$645$20599) (bitwise-bit-field . g$645$20598) (bitwise-bit-count . g$645$20597) (bitwise-xor . g$645$20596) (bitwise-ior . g$645$20595) (bitwise-and . g$645$20594) (bitwise-not . g$645$20593) (bitwise-arithmetic-shift-right . g$645$20592) (bitwise-arithmetic-shift-left . g$645$20591) (bitwise-arithmetic-shift . g$645$20590) (zero? . g$645$20589) (vector? . g$645$20588) (vector-set! . g$645$20587) (vector-ref . g$645$20586) (vector-map . g$645$20585) (vector-length . g$645$20584) (vector-for-each . g$645$20583) (vector-fill! . g$645$20582) (vector->list . g$645$20581) (vector . g$645$20580) (values . g$645$20579) (truncate . g$645$20578) (tan . g$645$20577) (symbol? . g$645$20576) (symbol=? . g$645$20575) (symbol->string . g$645$20574) (substring . g$645$20573) (string? . g$645$20572) (string>? . g$645$20571) (string>=? . g$645$20570) (string=? . g$645$20569) (string<? . g$645$20568) (string<=? . g$645$20567) (string-ref . g$645$20566) (string-length . g$645$20565) (string-for-each . g$645$20564) (string-copy . g$645$20563) (string-append . g$645$20562) (string->symbol . g$645$20561) (string->number . g$645$20560) (string->list . g$645$20559) (string . g$645$20558) (sqrt . g$645$20557) (sin . g$645$20556) (round . g$645$20555) (reverse . g$645$20554) (real? . g$645$20553) (real-valued? . g$645$20552) (real-part . g$645$20551) (rationalize . g$645$20550) (rational? . g$645$20549) (rational-valued? . g$645$20548) (procedure? . g$645$20547) (positive? . g$645$20546) (pair? . g$645$20545) (odd? . g$645$20544) (numerator . g$645$20543) (number? . g$645$20542) (number->string . g$645$20541) (null? . g$645$20540) (not . g$645$20539) (negative? . g$645$20538) (nan? . g$645$20537) (min . g$645$20536) (max . g$645$20535) (map . g$645$20534) (make-vector . g$645$20533) (make-string . g$645$20532) (make-rectangular . g$645$20531) (make-polar . g$645$20530) (magnitude . g$645$20529) (log . g$645$20528) (list? . g$645$20527) (list-tail . g$645$20526) (list-ref . g$645$20525) (list->vector . g$645$20524) (list->string . g$645$20523) (list . g$645$20522) (length . g$645$20521) (lcm . g$645$20520) (integer? . g$645$20519) (integer-valued? . g$645$20518) (integer->char . g$645$20517) (infinite? . g$645$20516) (inexact? . g$645$20515) (inexact . g$645$20514) (imag-part . g$645$20513) (gcd . g$645$20512) (for-each . g$645$20511) (floor . g$645$20510) (finite? . g$645$20509) (expt . g$645$20508) (exp . g$645$20507) (exact? . g$645$20506) (exact-integer-sqrt . g$645$20505) (exact . g$645$20504) (even? . g$645$20503) (error . g$645$20502) (eqv? . g$645$20501) (equal? . g$645$20500) (eq? . g$645$20499) (dynamic-wind . g$645$20498) (div0-and-mod0 . g$645$20497) (mod0 . g$645$20496) (div0 . g$645$20495) (div-and-mod . g$645$20494) (mod . g$645$20493) (div . g$645$20492) (denominator . g$645$20491) (cos . g$645$20490) (cons . g$645$20489) (complex? . g$645$20488) (char? . g$645$20487) (char>? . g$645$20486) (char>=? . g$645$20485) (char=? . g$645$20484) (char<? . g$645$20483) (char<=? . g$645$20482) (char->integer . g$645$20481) (ceiling . g$645$20480) (call-with-values . g$645$20479) (call/cc . g$645$20478) (call-with-current-continuation . g$645$20477) (cddddr . g$645$20476) (cdddar . g$645$20475) (cddadr . g$645$20474) (cddaar . g$645$20473) (cdaddr . g$645$20472) (cdadar . g$645$20471) (cdaadr . g$645$20470) (cdaaar . g$645$20469) (cadddr . g$645$20468) (caddar . g$645$20467) (cadadr . g$645$20466) (cadaar . g$645$20465) (caaddr . g$645$20464) (caadar . g$645$20463) (caaadr . g$645$20462) (caaaar . g$645$20461) (cdddr . g$645$20460) (cddar . g$645$20459) (cdadr . g$645$20458) (cdaar . g$645$20457) (caddr . g$645$20456) (cadar . g$645$20455) (caadr . g$645$20454) (caaar . g$645$20453) (cddr . g$645$20452) (cdar . g$645$20451) (cadr . g$645$20450) (caar . g$645$20449) (cdr . g$645$20448) (car . g$645$20447) (boolean? . g$645$20446) (boolean=? . g$645$20445) (atan . g$645$20444) (assertion-violation . g$645$20443) (asin . g$645$20442) (apply . g$645$20441) (append . g$645$20440) (angle . g$645$20439) (acos . g$645$20438) (abs . g$645$20437) (/ . g$645$20436) (* . g$645$20435) (- . g$645$20434) (+ . g$645$20433) (>= . g$645$20432) (> . g$645$20431) (= . g$645$20430) (<= . g$645$20429) (< . g$645$20428) (let*-values . g$645$20427) (trace-define . g$645$20426) (trace-lambda . g$645$20425) (unsyntax-splicing . g$645$20424) (unsyntax . g$645$20423) (unquote-splicing . g$645$20422) (unquote . g$645$20421) (_ . g$645$20420) (else . g$645$20419) (=> . g$645$20418) (... . g$645$20417) (assert . g$645$20416) (endianness . g$645$20415) (delay . g$645$20414) (time . g$645$20413) (or . g$645$20412) (and . g$645$20411) (do . g$645$20410) (cond . g$645$20409) (let* . g$645$20408) (let . g$645$20407) (identifier-syntax . g$645$20406) (with-syntax . g$645$20405) (quasisyntax . g$645$20404) (quasiquote . g$645$20403) (syntax-rules . g$645$20402) (include . g$645$20401) (define-record . g$645$20400) (let-values . g$645$20399) (case . g$645$20398) (parameterize . g$645$20397) (unless . g$645$20396) (when . g$645$20395) (if . g$645$20394) (letrec* . g$645$20393) (letrec . g$645$20392) (type-descriptor . g$645$20391) (case-lambda . g$645$20390) (lambda . g$645$20389) (syntax . g$645$20388) (syntax-case . g$645$20387) (quote . g$645$20386) (foreign-call . g$645$20385) (letrec-syntax . g$645$20384) (let-syntax . g$645$20383) (set! . g$645$20382) (import . g$645$20381) (begin . g$645$20380) (module . g$645$20379) (define-syntax . g$645$20378) (define . g$645$20377))) (quote ((g$645$12846 core-prim . syntax-error) (g$645$12717 core-prim . syntax-dispatch) (g$645$21084 core-prim . pretty-print) (g$645$21083 core-prim . eval-core) (g$645$21082 core-prim . set-symbol-value!) (g$645$21081 core-prim . symbol-value) (g$645$21080 core-prim . gensym) (g$645$21079 core-prim . void) (g$645$21078 core-prim . load) (g$645$21077 core-prim . interaction-environment) (g$645$21076 core-prim . char-ready?) (g$645$21075 core-prim . string-upcase) (g$645$21074 core-prim . string-titlecase) (g$645$21073 core-prim . string-normalize-nfkd) (g$645$21072 core-prim . string-normalize-nfkc) (g$645$21071 core-prim . string-normalize-nfd) (g$645$21070 core-prim . string-normalize-nfc) (g$645$21069 core-prim . string-foldcase) (g$645$21068 core-prim . string-downcase) (g$645$21067 core-prim . string-ci>?) (g$645$21066 core-prim . string-ci>=?) (g$645$21065 core-prim . string-ci=?) (g$645$21064 core-prim . string-ci<?) (g$645$21063 core-prim . string-ci<=?) (g$645$21062 core-prim . char-whitespace?) (g$645$21061 core-prim . char-upper-case?) (g$645$21060 core-prim . char-title-case?) (g$645$21059 core-prim . char-numeric?) (g$645$21058 core-prim . char-lower-case?) (g$645$21057 core-prim . char-general-category) (g$645$21056 core-prim . char-upcase) (g$645$21055 core-prim . char-titlecase) (g$645$21054 core-prim . char-foldcase) (g$645$21053 core-prim . char-downcase) (g$645$21052 core-prim . char-ci>?) (g$645$21051 core-prim . char-ci>=?) (g$645$21050 core-prim . char-ci=?) (g$645$21049 core-prim . char-ci<?) (g$645$21048 core-prim . char-ci<=?) (g$645$21047 core-prim . char-alphabetic?) (g$645$12271 core-prim . make-variable-transformer) (g$645$12848 core-prim . identifier?) (g$645$12840 core-prim . generate-temporaries) (g$645$12842 core-prim . free-identifier=?) (g$645$12852 core-prim . syntax->datum) (g$645$12850 core-prim . datum->syntax) (g$645$12844 core-prim . bound-identifier=?) (g$645$21046 core-prim . record-type-descriptor?) (g$645$21045 core-prim . record-predicate) (g$645$21044 core-prim . record-mutator) (g$645$21043 core-prim . record-constructor) (g$645$21042 core-prim . record-accessor) (g$645$21041 core-prim . make-record-type-descriptor) (g$645$21040 core-prim . make-record-constructor-descriptor) (g$645$21039 core-prim . record?) (g$645$21038 core-prim . record-type-uid) (g$645$21037 core-prim . record-type-sealed?) (g$645$21036 core-prim . record-type-parent) (g$645$21035 core-prim . record-type-opaque?) (g$645$21034 core-prim . record-type-name) (g$645$21033 core-prim . record-type-generative?) (g$645$21032 core-prim . record-type-field-names) (g$645$21031 core-prim . record-rtd) (g$645$21030 core-prim . record-field-mutable?) (g$645$21029 core-prim . nongenerative) (g$645$21028 core-prim . sealed) (g$645$21027 core-prim . record-type-descriptor) (g$645$21026 core-prim . record-constructor-descriptor) (g$645$21025 core-prim . protocol) (g$645$21024 core-prim . parent-rtd) (g$645$21023 core-prim . parent) (g$645$21022 core-prim . opaque) (g$645$21021 core-prim . mutable) (g$645$21020 core-prim . immutable) (g$645$21019 core-prim . fields) (g$645$21018 core-prim . define-record-type) (g$645$21017 core-prim . delete-file) (g$645$21016 core-prim . file-exists?) (g$645$21015 core-prim . vector-sort!) (g$645$21014 core-prim . vector-sort) (g$645$21013 core-prim . list-sort) (g$645$21012 core-prim . symbol-hash) (g$645$21011 core-prim . string-ci-hash) (g$645$21010 core-prim . string-hash) (g$645$21009 core-prim . equal-hash) (g$645$21008 core-prim . hashtable-equivalence-function) (g$645$21007 core-prim . make-hashtable) (g$645$21006 core-prim . hashtable-hash-function) (g$645$21005 core-prim . make-eqv-hashtable) (g$645$21004 core-prim . make-eq-hashtable) (g$645$21003 core-prim . hashtable?) (g$645$21002 core-prim . hashtable-update!) (g$645$21001 core-prim . hashtable-size) (g$645$21000 core-prim . hashtable-set!) (g$645$20999 core-prim . hashtable-ref) (g$645$20998 core-prim . hashtable-mutable?) (g$645$20997 core-prim . hashtable-keys) (g$645$20996 core-prim . hashtable-entries) (g$645$20995 core-prim . hashtable-delete!) (g$645$20994 core-prim . hashtable-copy) (g$645$20993 core-prim . hashtable-contains?) (g$645$20992 core-prim . hashtable-clear!) (g$645$20991 core-prim . call-with-output-file) (g$645$20990 core-prim . call-with-input-file) (g$645$20989 core-prim . write-char) (g$645$20988 core-prim . write) (g$645$20987 core-prim . with-output-to-file) (g$645$20986 core-prim . with-input-from-file) (g$645$20985 core-prim . read-char) (g$645$20984 core-prim . read) (g$645$20983 core-prim . peek-char) (g$645$20982 core-prim . open-output-file) (g$645$20981 core-prim . open-input-file) (g$645$20980 core-prim . newline) (g$645$20979 core-prim . display) (g$645$20978 core-prim . close-output-port) (g$645$20977 core-prim . close-input-port) (g$645$20976 core-prim . eof-object?) (g$645$20975 core-prim . eof-object) (g$645$20974 core-prim . current-error-port) (g$645$20973 core-prim . current-output-port) (g$645$20972 core-prim . current-input-port) (g$645$20971 core-prim . output-port?) (g$645$20970 core-prim . input-port?) (g$645$20969 core-prim . utf-8-codec) (g$645$20968 core-prim . utf-16-codec) (g$645$20967 core-prim . transcoder-error-handling-mode) (g$645$20966 core-prim . transcoder-eol-style) (g$645$20965 core-prim . transcoder-codec) (g$645$20964 core-prim . transcoded-port) (g$645$20963 core-prim . textual-port?) (g$645$20962 core-prim . string->bytevector) (g$645$20961 core-prim . standard-output-port) (g$645$20960 core-prim . standard-input-port) (g$645$20959 core-prim . standard-error-port) (g$645$20958 core-prim . set-port-position!) (g$645$20957 core-prim . put-u8) (g$645$20956 core-prim . put-string) (g$645$20955 core-prim . put-datum) (g$645$20954 core-prim . put-char) (g$645$20953 core-prim . put-bytevector) (g$645$20952 core-prim . port?) (g$645$20951 core-prim . port-transcoder) (g$645$20950 core-prim . port-position) (g$645$20949 core-prim . port-has-set-port-position!?) (g$645$20948 core-prim . port-has-port-position?) (g$645$20947 core-prim . port-eof?) (g$645$20946 core-prim . output-port-buffer-mode) (g$645$20945 core-prim . open-string-output-port) (g$645$20944 core-prim . open-string-input-port) (g$645$20943 core-prim . open-file-output-port) (g$645$20942 core-prim . open-file-input/output-port) (g$645$20941 core-prim . open-file-input-port) (g$645$20940 core-prim . open-bytevector-output-port) (g$645$20939 core-prim . open-bytevector-input-port) (g$645$20938 core-prim . native-transcoder) (g$645$20937 core-prim . native-eol-style) (g$645$20936 core-prim . make-transcoder) (g$645$20935 core-prim . latin-1-codec) (g$645$20934 core-prim . make-i/o-write-error) (g$645$20933 core-prim . make-i/o-read-error) (g$645$20932 core-prim . make-i/o-port-error) (g$645$20931 core-prim . make-i/o-invalid-position-error) (g$645$20930 core-prim . make-i/o-filename-error) (g$645$20929 core-prim . make-i/o-file-protection-error) (g$645$20928 core-prim . make-i/o-file-is-read-only-error) (g$645$20927 core-prim . make-i/o-file-does-not-exist-error) (g$645$20926 core-prim . make-i/o-file-already-exists-error) (g$645$20925 core-prim . make-i/o-error) (g$645$20924 core-prim . make-i/o-encoding-error) (g$645$20923 core-prim . make-i/o-decoding-error) (g$645$20922 core-prim . make-custom-textual-output-port) (g$645$20921 core-prim . make-custom-textual-input/output-port) (g$645$20920 core-prim . make-custom-textual-input-port) (g$645$20919 core-prim . make-custom-binary-output-port) (g$645$20918 core-prim . make-custom-binary-input/output-port) (g$645$20917 core-prim . make-custom-binary-input-port) (g$645$20916 core-prim . make-bytevector) (g$645$20915 core-prim . lookahead-u8) (g$645$20914 core-prim . lookahead-char) (g$645$20913 core-prim . i/o-write-error?) (g$645$20912 core-prim . &i/o-write) (g$645$20911 core-prim . i/o-read-error?) (g$645$20910 core-prim . &i/o-read) (g$645$20909 core-prim . i/o-port-error?) (g$645$20908 core-prim . &i/o-port) (g$645$20907 core-prim . i/o-invalid-position-error?) (g$645$20906 core-prim . &i/o-invalid-position) (g$645$20905 core-prim . i/o-filename-error?) (g$645$20904 core-prim . &i/o-filename) (g$645$20903 core-prim . i/o-file-protection-error?) (g$645$20902 core-prim . &i/o-file-protection) (g$645$20901 core-prim . i/o-file-is-read-only-error?) (g$645$20900 core-prim . &i/o-file-is-read-only) (g$645$20899 core-prim . i/o-file-does-not-exist-error?) (g$645$20898 core-prim . &i/o-file-does-not-exist) (g$645$20897 core-prim . i/o-file-already-exists-error?) (g$645$20896 core-prim . &i/o-file-already-exists) (g$645$20895 core-prim . i/o-error?) (g$645$20894 core-prim . i/o-error-port) (g$645$20893 core-prim . i/o-error-filename) (g$645$20892 core-prim . i/o-encoding-error?) (g$645$20891 core-prim . i/o-encoding-error-char) (g$645$20890 core-prim . &i/o-encoding) (g$645$20889 core-prim . i/o-decoding-error?) (g$645$20888 core-prim . &i/o-decoding) (g$645$20887 core-prim . &i/o) (g$645$20886 core-prim . get-u8) (g$645$20885 core-prim . get-string-n!) (g$645$20884 core-prim . get-string-n) (g$645$20883 core-prim . get-string-all) (g$645$20882 core-prim . get-line) (g$645$20881 core-prim . get-datum) (g$645$20880 core-prim . get-char) (g$645$20879 core-prim . get-bytevector-some) (g$645$20878 core-prim . get-bytevector-n!) (g$645$20877 core-prim . get-bytevector-n) (g$645$20876 core-prim . get-bytevector-all) (g$645$20875 core-prim . flush-output-port) (g$645$20874 core-prim . file-options) (g$645$20873 core-prim . error-handling-mode) (g$645$20872 core-prim . eol-style) (g$645$20871 core-prim . close-port) (g$645$20870 core-prim . scheme-report-environment) (g$645$20869 core-prim . quotient) (g$645$12820 core-prim . null-environment) (g$645$20868 core-prim . remainder) (g$645$20867 core-prim . modulo) (g$645$20866 core-prim . inexact->exact) (g$645$20865 core-prim . force) (g$645$20864 core-prim . exact->inexact) (g$645$20863 core-prim . exit) (g$645$20862 core-prim . command-line) (g$645$20861 core-prim . string-fill!) (g$645$20860 core-prim . string-set!) (g$645$20859 core-prim . set-cdr!) (g$645$20858 core-prim . set-car!) (g$645$20857 core-prim . remove) (g$645$20856 core-prim . remv) (g$645$20855 core-prim . remp) (g$645$20854 core-prim . remq) (g$645$20853 core-prim . partition) (g$645$20852 core-prim . memv) (g$645$20851 core-prim . memq) (g$645$20850 core-prim . memp) (g$645$20849 core-prim . member) (g$645$20848 core-prim . exists) (g$645$20847 core-prim . for-all) (g$645$20846 core-prim . fold-right) (g$645$20845 core-prim . fold-left) (g$645$20844 core-prim . find) (g$645$20843 core-prim . filter) (g$645$20842 core-prim . cons*) (g$645$20841 core-prim . assv) (g$645$20840 core-prim . assq) (g$645$20839 core-prim . assp) (g$645$20838 core-prim . assoc) (g$645$20837 core-prim . call-with-string-output-port) (g$645$20836 core-prim . call-with-port) (g$645$20835 core-prim . call-with-bytevector-output-port) (g$645$20834 core-prim . bytevector->string) (g$645$20833 core-prim . buffer-mode?) (g$645$20832 core-prim . buffer-mode) (g$645$20831 core-prim . binary-port?) (g$645$20830 core-prim . guard) (g$645$20829 core-prim . with-exception-handler) (g$645$20828 core-prim . raise-continuable) (g$645$20827 core-prim . raise) (g$645$12826 core-prim . eval) (g$645$12818 core-prim . environment) (g$645$20826 core-prim . make-enumeration) (g$645$20825 core-prim . enum-set=?) (g$645$20824 core-prim . enum-set-universe) (g$645$20823 core-prim . enum-set-union) (g$645$20822 core-prim . enum-set-subset?) (g$645$20821 core-prim . enum-set-projection) (g$645$20820 core-prim . enum-set-member?) (g$645$20819 core-prim . enum-set-intersection) (g$645$20818 core-prim . enum-set-indexer) (g$645$20817 core-prim . enum-set-difference) (g$645$20816 core-prim . enum-set-constructor) (g$645$20815 core-prim . enum-set-complement) (g$645$20814 core-prim . enum-set->list) (g$645$20813 core-prim . define-enumeration) (g$645$20812 core-prim . who-condition?) (g$645$20811 core-prim . &who) (g$645$20810 core-prim . warning?) (g$645$20809 core-prim . &warning) (g$645$20808 core-prim . violation?) (g$645$20807 core-prim . &violation) (g$645$20806 core-prim . undefined-violation?) (g$645$20805 core-prim . &undefined) (g$645$20804 core-prim . syntax-violation?) (g$645$20803 core-prim . syntax-violation-subform) (g$645$20802 core-prim . syntax-violation-form) (g$645$20801 core-prim . syntax-violation) (g$645$20800 core-prim . &syntax) (g$645$20799 core-prim . simple-conditions) (g$645$20798 core-prim . serious-condition?) (g$645$20797 core-prim . &serious) (g$645$20796 core-prim . non-continuable-violation?) (g$645$20795 core-prim . &non-continuable) (g$645$20794 core-prim . message-condition?) (g$645$20793 core-prim . &message) (g$645$20792 core-prim . make-who-condition) (g$645$20791 core-prim . make-warning) (g$645$20790 core-prim . make-violation) (g$645$20789 core-prim . make-undefined-violation) (g$645$20788 core-prim . make-syntax-violation) (g$645$20787 core-prim . make-serious-condition) (g$645$20786 core-prim . make-non-continuable-violation) (g$645$20785 core-prim . make-message-condition) (g$645$20784 core-prim . make-lexical-violation) (g$645$20783 core-prim . make-irritants-condition) (g$645$20782 core-prim . make-implementation-restriction-violation) (g$645$20781 core-prim . make-error) (g$645$20780 core-prim . make-assertion-violation) (g$645$20779 core-prim . lexical-violation?) (g$645$20778 core-prim . &lexical) (g$645$20777 core-prim . irritants-condition?) (g$645$20776 core-prim . &irritants) (g$645$20775 core-prim . implementation-restriction-violation?) (g$645$20774 core-prim . &implementation-restriction) (g$645$20773 core-prim . error?) (g$645$20772 core-prim . &error) (g$645$20771 core-prim . define-condition-type) (g$645$20770 core-prim . condition-who) (g$645$20769 core-prim . condition-predicate) (g$645$20768 core-prim . condition-message) (g$645$20767 core-prim . condition-irritants) (g$645$20766 core-prim . condition-accessor) (g$645$20765 core-prim . condition) (g$645$20764 core-prim . &condition) (g$645$20763 core-prim . assertion-violation?) (g$645$20762 core-prim . &assertion) (g$645$20761 core-prim . condition?) (g$645$20760 core-prim . utf32->string) (g$645$20759 core-prim . utf16->string) (g$645$20758 core-prim . utf8->string) (g$645$20757 core-prim . uint-list->bytevector) (g$645$20756 core-prim . u8-list->bytevector) (g$645$20755 core-prim . string->utf8) (g$645$20754 core-prim . string->utf32) (g$645$20753 core-prim . string->utf16) (g$645$20752 core-prim . sint-list->bytevector) (g$645$20751 core-prim . native-endianness) (g$645$20750 core-prim . bytevector?) (g$645$20749 core-prim . bytevector=?) (g$645$20748 core-prim . bytevector-uint-set!) (g$645$20747 core-prim . bytevector-uint-ref) (g$645$20746 core-prim . bytevector-u8-set!) (g$645$20745 core-prim . bytevector-u8-ref) (g$645$20744 core-prim . bytevector-u64-set!) (g$645$20743 core-prim . bytevector-u64-ref) (g$645$20742 core-prim . bytevector-u64-native-set!) (g$645$20741 core-prim . bytevector-u64-native-ref) (g$645$20740 core-prim . bytevector-u32-set!) (g$645$20739 core-prim . bytevector-u32-ref) (g$645$20738 core-prim . bytevector-u32-native-set!) (g$645$20737 core-prim . bytevector-u32-native-ref) (g$645$20736 core-prim . bytevector-u16-set!) (g$645$20735 core-prim . bytevector-u16-ref) (g$645$20734 core-prim . bytevector-u16-native-set!) (g$645$20733 core-prim . bytevector-u16-native-ref) (g$645$20732 core-prim . bytevector-sint-set!) (g$645$20731 core-prim . bytevector-sint-ref) (g$645$20730 core-prim . bytevector-s8-set!) (g$645$20729 core-prim . bytevector-s8-ref) (g$645$20728 core-prim . bytevector-s64-set!) (g$645$20727 core-prim . bytevector-s64-ref) (g$645$20726 core-prim . bytevector-s64-native-set!) (g$645$20725 core-prim . bytevector-s64-native-ref) (g$645$20724 core-prim . bytevector-s32-set!) (g$645$20723 core-prim . bytevector-s32-ref) (g$645$20722 core-prim . bytevector-s32-native-set!) (g$645$20721 core-prim . bytevector-s32-native-ref) (g$645$20720 core-prim . bytevector-s16-set!) (g$645$20719 core-prim . bytevector-s16-ref) (g$645$20718 core-prim . bytevector-s16-native-set!) (g$645$20717 core-prim . bytevector-s16-native-ref) (g$645$20716 core-prim . bytevector-length) (g$645$20715 core-prim . bytevector-ieee-single-ref) (g$645$20714 core-prim . bytevector-ieee-single-native-set!) (g$645$20713 core-prim . bytevector-ieee-single-native-ref) (g$645$20712 core-prim . bytevector-ieee-double-ref) (g$645$20711 core-prim . bytevector-ieee-double-native-set!) (g$645$20710 core-prim . bytevector-ieee-double-native-ref) (g$645$20709 core-prim . bytevector-fill!) (g$645$20708 core-prim . bytevector-copy!) (g$645$20707 core-prim . bytevector-copy) (g$645$20706 core-prim . bytevector->uint-list) (g$645$20705 core-prim . bytevector->u8-list) (g$645$20704 core-prim . bytevector->sint-list) (g$645$20703 core-prim . no-nans-violation?) (g$645$20702 core-prim . &no-nans) (g$645$20701 core-prim . no-infinities-violation?) (g$645$20700 core-prim . &no-infinities) (g$645$20699 core-prim . make-no-nans-violation) (g$645$20698 core-prim . make-no-infinities-violation) (g$645$20697 core-prim . real->flonum) (g$645$20696 core-prim . flzero?) (g$645$20695 core-prim . fltruncate) (g$645$20694 core-prim . fltan) (g$645$20693 core-prim . flsqrt) (g$645$20692 core-prim . flsin) (g$645$20691 core-prim . flround) (g$645$20690 core-prim . flpositive?) (g$645$20689 core-prim . flonum?) (g$645$20688 core-prim . flodd?) (g$645$20687 core-prim . flnumerator) (g$645$20686 core-prim . flnegative?) (g$645$20685 core-prim . flnan?) (g$645$20684 core-prim . flmod0) (g$645$20683 core-prim . flmod) (g$645$20682 core-prim . flmin) (g$645$20681 core-prim . flmax) (g$645$20680 core-prim . fllog) (g$645$20679 core-prim . flinteger?) (g$645$20678 core-prim . flinfinite?) (g$645$20677 core-prim . flfloor) (g$645$20676 core-prim . flfinite?) (g$645$20675 core-prim . flexpt) (g$645$20674 core-prim . flexp) (g$645$20673 core-prim . fleven?) (g$645$20672 core-prim . fldiv0-and-mod0) (g$645$20671 core-prim . fldiv0) (g$645$20670 core-prim . fldiv-and-mod) (g$645$20669 core-prim . fldiv) (g$645$20668 core-prim . fldenominator) (g$645$20667 core-prim . flcos) (g$645$20666 core-prim . flceiling) (g$645$20665 core-prim . flatan) (g$645$20664 core-prim . flasin) (g$645$20663 core-prim . flacos) (g$645$20662 core-prim . flabs) (g$645$20661 core-prim . fl>?) (g$645$20660 core-prim . fl>=?) (g$645$20659 core-prim . fl=?) (g$645$20658 core-prim . fl<?) (g$645$20657 core-prim . fl<=?) (g$645$20656 core-prim . fl/) (g$645$20655 core-prim . fl-) (g$645$20654 core-prim . fl+) (g$645$20653 core-prim . fl*) (g$645$20652 core-prim . fixnum->flonum) (g$645$20651 core-prim . fxzero?) (g$645$20650 core-prim . fxxor) (g$645$20649 core-prim . fxrotate-bit-field) (g$645$20648 core-prim . fxreverse-bit-field) (g$645$20647 core-prim . fxpositive?) (g$645$20646 core-prim . fxodd?) (g$645$20645 core-prim . fxnot) (g$645$20644 core-prim . fxnegative?) (g$645$20643 core-prim . fxmod0) (g$645$20642 core-prim . fxmod) (g$645$20641 core-prim . fxmin) (g$645$20640 core-prim . fxmax) (g$645$20639 core-prim . fxlength) (g$645$20638 core-prim . fxior) (g$645$20637 core-prim . fxif) (g$645$20636 core-prim . fxfirst-bit-set) (g$645$20635 core-prim . fxeven?) (g$645$20634 core-prim . fxdiv0-and-mod0) (g$645$20633 core-prim . fxdiv0) (g$645$20632 core-prim . fxdiv-and-mod) (g$645$20631 core-prim . fxdiv) (g$645$20630 core-prim . fxcopy-bit-field) (g$645$20629 core-prim . fxcopy-bit) (g$645$20628 core-prim . fxbit-set?) (g$645$20627 core-prim . fxbit-field) (g$645$20626 core-prim . fxbit-count) (g$645$20625 core-prim . fxarithmetic-shift-right) (g$645$20624 core-prim . fxarithmetic-shift-left) (g$645$20623 core-prim . fxarithmetic-shift) (g$645$20622 core-prim . fxand) (g$645$20621 core-prim . fx>?) (g$645$20620 core-prim . fx>=?) (g$645$20619 core-prim . fx=?) (g$645$20618 core-prim . fx<?) (g$645$20617 core-prim . fx<=?) (g$645$20616 core-prim . fx-/carry) (g$645$20615 core-prim . fx-) (g$645$20614 core-prim . fx+/carry) (g$645$20613 core-prim . fx+) (g$645$20612 core-prim . fx*/carry) (g$645$20611 core-prim . fx*) (g$645$20610 core-prim . greatest-fixnum) (g$645$20609 core-prim . least-fixnum) (g$645$20608 core-prim . fixnum-width) (g$645$20607 core-prim . fixnum?) (g$645$20606 core-prim . bitwise-rotate-bit-field) (g$645$20605 core-prim . bitwise-reverse-bit-field) (g$645$20604 core-prim . bitwise-length) (g$645$20603 core-prim . bitwise-if) (g$645$20602 core-prim . bitwise-first-bit-set) (g$645$20601 core-prim . bitwise-copy-bit-field) (g$645$20600 core-prim . bitwise-copy-bit) (g$645$20599 core-prim . bitwise-bit-set?) (g$645$20598 core-prim . bitwise-bit-field) (g$645$20597 core-prim . bitwise-bit-count) (g$645$20596 core-prim . bitwise-xor) (g$645$20595 core-prim . bitwise-ior) (g$645$20594 core-prim . bitwise-and) (g$645$20593 core-prim . bitwise-not) (g$645$20592 core-prim . bitwise-arithmetic-shift-right) (g$645$20591 core-prim . bitwise-arithmetic-shift-left) (g$645$20590 core-prim . bitwise-arithmetic-shift) (g$645$20589 core-prim . zero?) (g$645$20588 core-prim . vector?) (g$645$20587 core-prim . vector-set!) (g$645$20586 core-prim . vector-ref) (g$645$20585 core-prim . vector-map) (g$645$20584 core-prim . vector-length) (g$645$20583 core-prim . vector-for-each) (g$645$20582 core-prim . vector-fill!) (g$645$20581 core-prim . vector->list) (g$645$20580 core-prim . vector) (g$645$20579 core-prim . values) (g$645$20578 core-prim . truncate) (g$645$20577 core-prim . tan) (g$645$20576 core-prim . symbol?) (g$645$20575 core-prim . symbol=?) (g$645$20574 core-prim . symbol->string) (g$645$20573 core-prim . substring) (g$645$20572 core-prim . string?) (g$645$20571 core-prim . string>?) (g$645$20570 core-prim . string>=?) (g$645$20569 core-prim . string=?) (g$645$20568 core-prim . string<?) (g$645$20567 core-prim . string<=?) (g$645$20566 core-prim . string-ref) (g$645$20565 core-prim . string-length) (g$645$20564 core-prim . string-for-each) (g$645$20563 core-prim . string-copy) (g$645$20562 core-prim . string-append) (g$645$20561 core-prim . string->symbol) (g$645$20560 core-prim . string->number) (g$645$20559 core-prim . string->list) (g$645$20558 core-prim . string) (g$645$20557 core-prim . sqrt) (g$645$20556 core-prim . sin) (g$645$20555 core-prim . round) (g$645$20554 core-prim . reverse) (g$645$20553 core-prim . real?) (g$645$20552 core-prim . real-valued?) (g$645$20551 core-prim . real-part) (g$645$20550 core-prim . rationalize) (g$645$20549 core-prim . rational?) (g$645$20548 core-prim . rational-valued?) (g$645$20547 core-prim . procedure?) (g$645$20546 core-prim . positive?) (g$645$20545 core-prim . pair?) (g$645$20544 core-prim . odd?) (g$645$20543 core-prim . numerator) (g$645$20542 core-prim . number?) (g$645$20541 core-prim . number->string) (g$645$20540 core-prim . null?) (g$645$20539 core-prim . not) (g$645$20538 core-prim . negative?) (g$645$20537 core-prim . nan?) (g$645$20536 core-prim . min) (g$645$20535 core-prim . max) (g$645$20534 core-prim . map) (g$645$20533 core-prim . make-vector) (g$645$20532 core-prim . make-string) (g$645$20531 core-prim . make-rectangular) (g$645$20530 core-prim . make-polar) (g$645$20529 core-prim . magnitude) (g$645$20528 core-prim . log) (g$645$20527 core-prim . list?) (g$645$20526 core-prim . list-tail) (g$645$20525 core-prim . list-ref) (g$645$20524 core-prim . list->vector) (g$645$20523 core-prim . list->string) (g$645$20522 core-prim . list) (g$645$20521 core-prim . length) (g$645$20520 core-prim . lcm) (g$645$20519 core-prim . integer?) (g$645$20518 core-prim . integer-valued?) (g$645$20517 core-prim . integer->char) (g$645$20516 core-prim . infinite?) (g$645$20515 core-prim . inexact?) (g$645$20514 core-prim . inexact) (g$645$20513 core-prim . imag-part) (g$645$20512 core-prim . gcd) (g$645$20511 core-prim . for-each) (g$645$20510 core-prim . floor) (g$645$20509 core-prim . finite?) (g$645$20508 core-prim . expt) (g$645$20507 core-prim . exp) (g$645$20506 core-prim . exact?) (g$645$20505 core-prim . exact-integer-sqrt) (g$645$20504 core-prim . exact) (g$645$20503 core-prim . even?) (g$645$20502 core-prim . error) (g$645$20501 core-prim . eqv?) (g$645$20500 core-prim . equal?) (g$645$20499 core-prim . eq?) (g$645$20498 core-prim . dynamic-wind) (g$645$20497 core-prim . div0-and-mod0) (g$645$20496 core-prim . mod0) (g$645$20495 core-prim . div0) (g$645$20494 core-prim . div-and-mod) (g$645$20493 core-prim . mod) (g$645$20492 core-prim . div) (g$645$20491 core-prim . denominator) (g$645$20490 core-prim . cos) (g$645$20489 core-prim . cons) (g$645$20488 core-prim . complex?) (g$645$20487 core-prim . char?) (g$645$20486 core-prim . char>?) (g$645$20485 core-prim . char>=?) (g$645$20484 core-prim . char=?) (g$645$20483 core-prim . char<?) (g$645$20482 core-prim . char<=?) (g$645$20481 core-prim . char->integer) (g$645$20480 core-prim . ceiling) (g$645$20479 core-prim . call-with-values) (g$645$20478 core-prim . call/cc) (g$645$20477 core-prim . call-with-current-continuation) (g$645$20476 core-prim . cddddr) (g$645$20475 core-prim . cdddar) (g$645$20474 core-prim . cddadr) (g$645$20473 core-prim . cddaar) (g$645$20472 core-prim . cdaddr) (g$645$20471 core-prim . cdadar) (g$645$20470 core-prim . cdaadr) (g$645$20469 core-prim . cdaaar) (g$645$20468 core-prim . cadddr) (g$645$20467 core-prim . caddar) (g$645$20466 core-prim . cadadr) (g$645$20465 core-prim . cadaar) (g$645$20464 core-prim . caaddr) (g$645$20463 core-prim . caadar) (g$645$20462 core-prim . caaadr) (g$645$20461 core-prim . caaaar) (g$645$20460 core-prim . cdddr) (g$645$20459 core-prim . cddar) (g$645$20458 core-prim . cdadr) (g$645$20457 core-prim . cdaar) (g$645$20456 core-prim . caddr) (g$645$20455 core-prim . cadar) (g$645$20454 core-prim . caadr) (g$645$20453 core-prim . caaar) (g$645$20452 core-prim . cddr) (g$645$20451 core-prim . cdar) (g$645$20450 core-prim . cadr) (g$645$20449 core-prim . caar) (g$645$20448 core-prim . cdr) (g$645$20447 core-prim . car) (g$645$20446 core-prim . boolean?) (g$645$20445 core-prim . boolean=?) (g$645$20444 core-prim . atan) (g$645$20443 core-prim . assertion-violation) (g$645$20442 core-prim . asin) (g$645$20441 core-prim . apply) (g$645$20440 core-prim . append) (g$645$20439 core-prim . angle) (g$645$20438 core-prim . acos) (g$645$20437 core-prim . abs) (g$645$20436 core-prim . /) (g$645$20435 core-prim . *) (g$645$20434 core-prim . -) (g$645$20433 core-prim . +) (g$645$20432 core-prim . >=) (g$645$20431 core-prim . >) (g$645$20430 core-prim . =) (g$645$20429 core-prim . <=) (g$645$20428 core-prim . <) (g$645$20427 core-prim . let*-values) (g$645$20426 macro . trace-define) (g$645$20425 macro . trace-lambda) (g$645$20424 macro . unsyntax-splicing) (g$645$20423 macro . unsyntax) (g$645$20422 macro . unquote-splicing) (g$645$20421 macro . unquote) (g$645$20420 macro . _) (g$645$20419 macro . else) (g$645$20418 macro . =>) (g$645$20417 macro . ...) (g$645$20416 macro . assert) (g$645$20415 macro . endianness) (g$645$20414 macro . delay) (g$645$20413 macro . time) (g$645$20412 macro . or) (g$645$20411 macro . and) (g$645$20410 macro . do) (g$645$20409 macro . cond) (g$645$20408 macro . let*) (g$645$20407 macro . let) (g$645$20406 macro . identifier-syntax) (g$645$20405 macro . with-syntax) (g$645$20404 macro . quasisyntax) (g$645$20403 macro . quasiquote) (g$645$20402 macro . syntax-rules) (g$645$20401 macro . include) (g$645$20400 macro . define-record) (g$645$20399 core-macro . let-values) (g$645$20398 core-macro . case) (g$645$20397 core-macro . parameterize) (g$645$20396 core-macro . unless) (g$645$20395 core-macro . when) (g$645$20394 core-macro . if) (g$645$20393 core-macro . letrec*) (g$645$20392 core-macro . letrec) (g$645$20391 core-macro . type-descriptor) (g$645$20390 core-macro . case-lambda) (g$645$20389 core-macro . lambda) (g$645$20388 core-macro . syntax) (g$645$20387 core-macro . syntax-case) (g$645$20386 core-macro . quote) (g$645$20385 core-macro . foreign-call) (g$645$20384 letrec-syntax) (g$645$20383 let-syntax) (g$645$20382 set!) (g$645$20381 import) (g$645$20380 begin) (g$645$20379 module) (g$645$20378 define-syntax) (g$645$20377 define))) values values (quote #f)) (install-library$645$11750 (quote g$645$21117) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$645$21084) (eval-core . g$645$21083) (set-symbol-value! . g$645$21082) (symbol-value . g$645$21081) (gensym . g$645$21080) (void . g$645$21079))) (quote ()) values values (quote #f)))


(begin (define load-r6rs-top-level$645$20375 (quote #f)) ((lambda (load-r6rs-top-level$645$20359) (begin (set! load-r6rs-top-level$645$20359 (lambda (filename$645$20361) ((lambda (x*$645$20363) (eval-r6rs-top-level$645$20177 x*$645$20363)) (with-input-from-file filename$645$20361 (lambda () (letrec ((f$645$20365 (lambda () ((lambda (x$645$20367) (if (eof-object? x$645$20367) (quote ()) (cons x$645$20367 (f$645$20365)))) (read))))) (f$645$20365))))))) (begin (set! load-r6rs-top-level$645$20375 load-r6rs-top-level$645$20359) (display (quote "r6rs psyntax ready\n")) ((lambda (args$645$20369) (begin (if (= (length args$645$20369) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (script-name$645$20371 args$645$20372) (load-r6rs-top-level$645$20359 (car args$645$20372))) (car args$645$20369) (cdr args$645$20369)))) (command-line)) (exit (quote 0))))) (quote #f)))


