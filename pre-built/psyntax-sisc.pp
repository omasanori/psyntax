;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$655$11224 (quote #f)) ((lambda (g$655$11010) (begin (set! g$655$11010 (lambda g$655$11221 ((lambda (g$655$11220) (if (= g$655$11220 (quote 1)) (apply (lambda (g$655$11207) (g$655$11010 g$655$11207 (lambda (g$655$11209) g$655$11209))) g$655$11221) (if (= g$655$11220 (quote 2)) (apply (lambda (g$655$11212 g$655$11213) (begin (if (procedure? g$655$11213) (void) (error (quote assert) (quote "~s failed") (quote (procedure? fender)))) ((lambda (g$655$11215) (lambda g$655$11219 ((lambda (g$655$11218) (if (= g$655$11218 (quote 0)) (apply (lambda () g$655$11215) g$655$11219) (if (= g$655$11218 (quote 1)) (apply (lambda (g$655$11217) (set! g$655$11215 (g$655$11213 g$655$11217))) g$655$11219) (error #0=(quote apply) (quote #1="invalid arg count"))))) (length g$655$11219)))) (g$655$11213 g$655$11212)))) g$655$11221) (error #0# (quote #1#))))) (length g$655$11221)))) (set! g$655$11224 g$655$11010))) (quote #f)))


(begin (define g$655$11302 . #0=((quote #f))) (define g$655$11301 . #0#) (define g$655$11300 . #0#) (define g$655$11299 . #0#) (define g$655$11298 . #0#) (define g$655$11297 . #0#) ((lambda (g$655$11227 g$655$11229 g$655$11231 g$655$11233 g$655$11235 g$655$11237) (begin (set! g$655$11227 (g$655$11224 (lambda (g$655$11239) (quote #f)) (lambda (g$655$11241) (begin (if (procedure? g$655$11241) (void) (error (quote assert) (quote "~s failed") (quote (procedure? p)))) g$655$11241)))) (set! g$655$11229 (lambda (g$655$11243) ((lambda (g$655$11245) (begin (set! g$655$11245 (lambda (g$655$11247) ((lambda (g$655$11249) (if g$655$11249 g$655$11249 ((lambda (g$655$11251) (if g$655$11251 g$655$11251 ((lambda (g$655$11253) (if g$655$11253 g$655$11253 ((lambda (g$655$11255) (if g$655$11255 g$655$11255 (begin (quote #f) (number? g$655$11247)))) (boolean? g$655$11247)))) (symbol? g$655$11247)))) (char? g$655$11247)))) (null? g$655$11247)))) (not (g$655$11245 g$655$11243)))) (quote #f)))) (set! g$655$11231 (lambda (g$655$11257) ((lambda (g$655$11259) (begin (set! g$655$11259 (lambda (g$655$11261) (if (pair? g$655$11261) ((lambda (g$655$11262) (if (memv g$655$11262 (quote (quote))) (if (if g$655$11257 (begin (quote #f) (g$655$11229 (cadr g$655$11261))) (quote #f)) ((lambda (g$655$11288) (begin (set-symbol-value! g$655$11288 (cadr g$655$11261)) g$655$11288)) (gensym)) g$655$11261) (if (memv g$655$11262 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (g$655$11286) (cons (car g$655$11286) (map g$655$11259 (cdr g$655$11286)))) (cdr g$655$11261))) (if (memv g$655$11262 (quote (lambda))) (cons* (quote lambda) (cadr g$655$11261) (map g$655$11259 (cddr g$655$11261))) (if (memv g$655$11262 (quote (letrec))) ((lambda (g$655$11279 g$655$11280) ((lambda (g$655$11283 g$655$11284) (cons* (quote letrec) (map list g$655$11283 (map g$655$11259 g$655$11284)) (map g$655$11259 g$655$11280))) (map car g$655$11279) (map cadr g$655$11279))) (cadr g$655$11261) (cddr g$655$11261)) (if (memv g$655$11262 (quote (letrec*))) ((lambda (g$655$11271 g$655$11272) ((lambda (g$655$11275 g$655$11276) (cons* (quote letrec*) (map list g$655$11275 (map g$655$11259 g$655$11276)) (map g$655$11259 g$655$11272))) (map car g$655$11271) (map cadr g$655$11271))) (cadr g$655$11261) (cddr g$655$11261)) (if (memv g$655$11262 (quote (begin))) (cons (quote begin) (map g$655$11259 (cdr g$655$11261))) (if (memv g$655$11262 (quote (set!))) (list (quote set!) (cadr g$655$11261) (g$655$11259 (caddr g$655$11261))) (if (memv g$655$11262 (quote (primitive))) ((lambda (g$655$11264) ((lambda (g$655$11266) (if g$655$11266 ((lambda (g$655$11268) g$655$11268) g$655$11266) g$655$11264)) ((g$655$11227) g$655$11264))) (cadr g$655$11261)) (if (memv g$655$11262 (quote (define))) g$655$11261 (if (list? g$655$11261) (map g$655$11259 g$655$11261) (error (quote rewrite) (quote "invalid form ~s ~s") g$655$11261 (list? g$655$11261))))))))))))) (car g$655$11261)) g$655$11261))) g$655$11259)) (quote #f)))) (set! g$655$11233 ((lambda (g$655$11290) (not (eq? (eval-core (list (quote quote) g$655$11290)) (eval-core (list (quote quote) g$655$11290))))) (cons (quote 1) (quote 2)))) (set! g$655$11235 (lambda (g$655$11292) ((g$655$11231 g$655$11233) g$655$11292))) (set! g$655$11237 (lambda (g$655$11295 g$655$11296) (begin (pretty-print ((g$655$11231 (quote #f)) g$655$11295) g$655$11296) (newline g$655$11296)))) (begin (set! g$655$11297 g$655$11237) (set! g$655$11298 g$655$11235) (set! g$655$11299 g$655$11233) (set! g$655$11300 g$655$11231) (set! g$655$11301 g$655$11229) (set! g$655$11302 g$655$11227)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define g$655$11790 . #0=((quote #f))) (define g$655$11789 . #0#) (define g$655$11788 . #0#) (define g$655$11787 . #0#) (define g$655$11786 . #0#) (define g$655$11785 . #0#) (define g$655$11784 . #0#) (define g$655$11783 . #0#) (define g$655$11782 . #0#) (define g$655$11781 . #0#) (define g$655$11780 . #0#) (define g$655$11779 . #0#) (define g$655$11778 . #0#) (define g$655$11777 . #0#) (define g$655$11776 . #0#) (define g$655$11775 . #0#) (define g$655$11774 . #0#) (define g$655$11773 . #0#) (define g$655$11772 . #0#) (define g$655$11771 . #0#) (define g$655$11770 . #0#) (define g$655$11769 . #0#) (define g$655$11768 . #0#) (define g$655$11767 . #0#) (define g$655$11766 . #0#) (define g$655$11765 . #0#) (define g$655$11764 . #0#) (define g$655$11763 . #0#) (define g$655$11762 . #0#) (define g$655$11761 . #0#) (define g$655$11760 . #0#) (define g$655$11759 . #0#) (define g$655$11758 . #0#) (define g$655$11757 . #0#) (define g$655$11756 . #0#) (define g$655$11755 . #0#) (define g$655$11754 . #0#) (define g$655$11753 . #0#) (define g$655$11752 . #0#) (define g$655$11751 . #0#) (define g$655$11750 . #0#) (define g$655$11749 . #0#) (define g$655$11748 . #0#) (define g$655$11747 . #0#) (define g$655$11746 . #0#) (define g$655$11745 . #0#) (define g$655$11744 . #0#) (define g$655$11743 . #0#) (define g$655$11742 . #0#) ((lambda (g$655$11367 g$655$11369 g$655$11372 g$655$11374 g$655$11376 g$655$11378 g$655$11380 g$655$11382 g$655$11384 g$655$11386 g$655$11388 g$655$11390 g$655$11392 g$655$11394 g$655$11396 g$655$11398 g$655$11400 g$655$11402 g$655$11404 g$655$11406 g$655$11408 g$655$11410 g$655$11412 g$655$11414 g$655$11416 g$655$11418 g$655$11420 g$655$11422 g$655$11424 g$655$11426 g$655$11428 g$655$11430 g$655$11432 g$655$11434 g$655$11436 g$655$11438 g$655$11440 g$655$11442 g$655$11444 g$655$11446 g$655$11448 g$655$11450 g$655$11452 g$655$11454 g$655$11456 g$655$11458 g$655$11460 g$655$11462 g$655$11464) (begin (set! g$655$11367 (lambda () ((lambda (g$655$11466) ((lambda (g$655$11468) (begin (set! g$655$11468 (lambda (g$655$11475 g$655$11476) (if (memq g$655$11475 g$655$11476) g$655$11476 (cons g$655$11475 g$655$11476)))) (lambda g$655$11472 ((lambda (g$655$11471) (if (= g$655$11471 (quote 0)) (apply (lambda () g$655$11466) g$655$11472) (if (= g$655$11471 (quote 1)) (apply (lambda (g$655$11470) (set! g$655$11466 (g$655$11468 g$655$11470 g$655$11466))) g$655$11472) (error #1=(quote apply) (quote #2="invalid arg count"))))) (length g$655$11472))))) (quote #f))) (quote ())))) (set! g$655$11369 (g$655$11224 (g$655$11367) (lambda (g$655$11478) (begin (if (procedure? g$655$11478) (void) (error (quote current-library-collection) (quote "~s is not a procedure") g$655$11478)) g$655$11478)))) (set! g$655$11372 (lambda (g$655$11490 g$655$11491 g$655$11492 g$655$11493 g$655$11494 g$655$11495 g$655$11496 g$655$11497 g$655$11498 g$655$11499 g$655$11500) (vector (quote g$655$11370) g$655$11490 g$655$11491 g$655$11492 g$655$11493 g$655$11494 g$655$11495 g$655$11496 g$655$11497 g$655$11498 g$655$11499 g$655$11500))) (set! g$655$11374 (lambda (g$655$11502) (if (vector? g$655$11502) (if (= (vector-length g$655$11502) (+ (quote 1) (length (quote (id name ver imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref g$655$11502 (quote 0)) (quote g$655$11370))) (quote #f)) (quote #f)))) (set! g$655$11376 (lambda (g$655$11504) (if (g$655$11374 g$655$11504) (vector-ref g$655$11504 (quote 1)) (error (quote library-id) (quote #3="~s is not of type ~s") g$655$11504 (quote library))))) (set! g$655$11378 (lambda (g$655$11506) (if (g$655$11374 g$655$11506) (vector-ref g$655$11506 (quote 2)) (error (quote library-name) (quote #3#) g$655$11506 (quote library))))) (set! g$655$11380 (lambda (g$655$11508) (if (g$655$11374 g$655$11508) (vector-ref g$655$11508 (quote 3)) (error (quote library-ver) (quote #3#) g$655$11508 (quote library))))) (set! g$655$11382 (lambda (g$655$11510) (if (g$655$11374 g$655$11510) (vector-ref g$655$11510 (quote 4)) (error (quote library-imp*) (quote #3#) g$655$11510 (quote library))))) (set! g$655$11384 (lambda (g$655$11512) (if (g$655$11374 g$655$11512) (vector-ref g$655$11512 (quote 5)) (error (quote library-vis*) (quote #3#) g$655$11512 (quote library))))) (set! g$655$11386 (lambda (g$655$11514) (if (g$655$11374 g$655$11514) (vector-ref g$655$11514 (quote 6)) (error (quote library-inv*) (quote #3#) g$655$11514 (quote library))))) (set! g$655$11388 (lambda (g$655$11516) (if (g$655$11374 g$655$11516) (vector-ref g$655$11516 (quote 7)) (error (quote library-subst) (quote #3#) g$655$11516 (quote library))))) (set! g$655$11390 (lambda (g$655$11518) (if (g$655$11374 g$655$11518) (vector-ref g$655$11518 (quote 8)) (error (quote library-env) (quote #3#) g$655$11518 (quote library))))) (set! g$655$11392 (lambda (g$655$11520) (if (g$655$11374 g$655$11520) (vector-ref g$655$11520 (quote 9)) (error (quote library-visit-state) (quote #3#) g$655$11520 (quote library))))) (set! g$655$11394 (lambda (g$655$11522) (if (g$655$11374 g$655$11522) (vector-ref g$655$11522 (quote 10)) (error (quote library-invoke-state) (quote #3#) g$655$11522 (quote library))))) (set! g$655$11396 (lambda (g$655$11524) (if (g$655$11374 g$655$11524) (vector-ref g$655$11524 (quote 11)) (error (quote library-visible?) (quote #3#) g$655$11524 (quote library))))) (set! g$655$11398 (lambda (g$655$11527 g$655$11528) (if (g$655$11374 g$655$11527) (vector-set! g$655$11527 (quote 1) g$655$11528) (error (quote set-library-id!) (quote #4="~s is not of type ~s") g$655$11527 (quote library))))) (set! g$655$11400 (lambda (g$655$11531 g$655$11532) (if (g$655$11374 g$655$11531) (vector-set! g$655$11531 (quote 2) g$655$11532) (error (quote set-library-name!) (quote #4#) g$655$11531 (quote library))))) (set! g$655$11402 (lambda (g$655$11535 g$655$11536) (if (g$655$11374 g$655$11535) (vector-set! g$655$11535 (quote 3) g$655$11536) (error (quote set-library-ver!) (quote #4#) g$655$11535 (quote library))))) (set! g$655$11404 (lambda (g$655$11539 g$655$11540) (if (g$655$11374 g$655$11539) (vector-set! g$655$11539 (quote 4) g$655$11540) (error (quote set-library-imp*!) (quote #4#) g$655$11539 (quote library))))) (set! g$655$11406 (lambda (g$655$11543 g$655$11544) (if (g$655$11374 g$655$11543) (vector-set! g$655$11543 (quote 5) g$655$11544) (error (quote set-library-vis*!) (quote #4#) g$655$11543 (quote library))))) (set! g$655$11408 (lambda (g$655$11547 g$655$11548) (if (g$655$11374 g$655$11547) (vector-set! g$655$11547 (quote 6) g$655$11548) (error (quote set-library-inv*!) (quote #4#) g$655$11547 (quote library))))) (set! g$655$11410 (lambda (g$655$11551 g$655$11552) (if (g$655$11374 g$655$11551) (vector-set! g$655$11551 (quote 7) g$655$11552) (error (quote set-library-subst!) (quote #4#) g$655$11551 (quote library))))) (set! g$655$11412 (lambda (g$655$11555 g$655$11556) (if (g$655$11374 g$655$11555) (vector-set! g$655$11555 (quote 8) g$655$11556) (error (quote set-library-env!) (quote #4#) g$655$11555 (quote library))))) (set! g$655$11414 (lambda (g$655$11559 g$655$11560) (if (g$655$11374 g$655$11559) (vector-set! g$655$11559 (quote 9) g$655$11560) (error (quote set-library-visit-state!) (quote #4#) g$655$11559 (quote library))))) (set! g$655$11416 (lambda (g$655$11563 g$655$11564) (if (g$655$11374 g$655$11563) (vector-set! g$655$11563 (quote 10) g$655$11564) (error (quote set-library-invoke-state!) (quote #4#) g$655$11563 (quote library))))) (set! g$655$11418 (lambda (g$655$11567 g$655$11568) (if (g$655$11374 g$655$11567) (vector-set! g$655$11567 (quote 11) g$655$11568) (error (quote set-library-visible?!) (quote #4#) g$655$11567 (quote library))))) (set! g$655$11420 (lambda (g$655$11570) (if (null? g$655$11570) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! g$655$11422 (lambda (g$655$11572) (letrec ((g$655$11574 (lambda (g$655$11576) (if (null? g$655$11576) (quote #f) (if (g$655$11572 (car g$655$11576)) (car g$655$11576) (g$655$11574 (cdr g$655$11576))))))) (g$655$11574 ((g$655$11369)))))) (set! g$655$11424 (g$655$11224 (quote (".")) (lambda (g$655$11578) (if (if (list? g$655$11578) (begin (quote #f) (for-all string? g$655$11578)) (quote #f)) (map (lambda (g$655$11580) g$655$11580) g$655$11578) (error (quote library-path) (quote "~s is not a list of strings") g$655$11578))))) (set! g$655$11426 (lambda (g$655$11582) (call-with-values (lambda () (open-string-output-port)) (lambda (g$655$11585 g$655$11586) ((lambda (g$655$11588) (begin (set! g$655$11588 (lambda (g$655$11604) (if (<= (quote 0) g$655$11604 (quote 9)) (display g$655$11604 g$655$11585) (display (integer->char (+ (char->integer (quote #5=#\A)) (- g$655$11604 (quote 10)))) g$655$11585)))) (begin (letrec ((g$655$11590 (lambda (g$655$11592) (if (null? g$655$11592) (display (quote ".ss") g$655$11585) (begin (display (quote "/") g$655$11585) (for-each (lambda (g$655$11594) (if ((lambda (g$655$11598) (if g$655$11598 g$655$11598 ((lambda (g$655$11600) (if g$655$11600 g$655$11600 ((lambda (g$655$11602) (if g$655$11602 g$655$11602 (begin (quote #f) (memv g$655$11594 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) g$655$11594 (quote #\9))))) (char<=? (quote #5#) g$655$11594 (quote #\Z))))) (char<=? (quote #\a) g$655$11594 (quote #\z))) (display g$655$11594 g$655$11585) (begin (display (quote "%") g$655$11585) ((lambda (g$655$11596) (begin (g$655$11588 (quotient g$655$11596 (quote 16))) (g$655$11588 (remainder g$655$11596 (quote 16))))) (char->integer g$655$11594))))) (string->list (symbol->string (car g$655$11592)))) (g$655$11590 (cdr g$655$11592))))))) (g$655$11590 g$655$11582)) (g$655$11586)))) (quote #f)))))) (set! g$655$11428 (g$655$11224 (lambda (g$655$11606) ((lambda (g$655$11608) (letrec ((g$655$11610 (lambda (g$655$11612) (if (pair? g$655$11612) (begin (quote #f) ((lambda (g$655$11614) (if (file-exists? g$655$11614) g$655$11614 (g$655$11610 (cdr g$655$11612)))) (string-append (car g$655$11612) g$655$11608))) (quote #f))))) (g$655$11610 (g$655$11424)))) (g$655$11426 g$655$11606))) (lambda (g$655$11616) (if (procedure? g$655$11616) g$655$11616 (error (quote file-locator) (quote "~s is not a procedure") g$655$11616))))) (set! g$655$11430 (g$655$11224 (lambda (g$655$11618) ((lambda (g$655$11620) (if (string? g$655$11620) (begin (quote #f) (with-input-from-file g$655$11620 read)) (quote #f))) ((g$655$11428) g$655$11618))) (lambda (g$655$11622) (if (procedure? g$655$11622) g$655$11622 (error (quote library-locator) (quote "~s is not a procedure") g$655$11622))))) (set! g$655$11432 (g$655$11224 (lambda (g$655$11624) (error (quote library-expander) (quote "not initialized"))) (lambda (g$655$11626) (if (procedure? g$655$11626) g$655$11626 (error (quote library-expander) (quote "~s is not a procedure") g$655$11626))))) (set! g$655$11434 (g$655$11224 (quote ()))) (set! g$655$11436 (lambda (g$655$11628) (begin (if (member g$655$11628 (g$655$11434)) (error (quote #f) (quote "circular attempt to import library ~s detected") g$655$11628) (void)) ((lambda (g$655$11633 g$655$11634) ((lambda (g$655$11636) (dynamic-wind g$655$11636 (lambda () ((lambda (g$655$11638) (begin (if g$655$11638 (void) (error (quote #f) (quote "cannot find library ~s") g$655$11628)) ((g$655$11432) g$655$11638) ((lambda (g$655$11640) (if g$655$11640 g$655$11640 (begin (quote #f) (error (quote #f) (quote "handling external library of ~s did not yield the currect library") g$655$11628)))) (g$655$11422 (lambda (g$655$11642) (equal? (g$655$11378 g$655$11642) g$655$11628)))))) ((g$655$11430) g$655$11628))) g$655$11636)) (lambda () ((lambda (g$655$11644) (begin (g$655$11633 g$655$11634) (set! g$655$11634 g$655$11644))) (g$655$11633))))) g$655$11434 (cons g$655$11628 (g$655$11434)))))) (set! g$655$11438 (lambda (g$655$11646) ((lambda (g$655$11648) (if g$655$11648 g$655$11648 (begin (quote #f) (g$655$11436 g$655$11646)))) (g$655$11422 (lambda (g$655$11650) (equal? (g$655$11378 g$655$11650) g$655$11646)))))) (set! g$655$11440 (lambda (g$655$11652) (if (g$655$11422 (lambda (g$655$11654) (equal? (g$655$11378 g$655$11654) g$655$11652))) (begin (quote #f) (quote #t)) (quote #f)))) (set! g$655$11442 (lambda (g$655$11656) ((lambda (g$655$11658) ((lambda (g$655$11660) (if g$655$11660 g$655$11660 (begin (quote #f) (error (quote #f) (quote "cannot find library with spec ~s") g$655$11656)))) (g$655$11422 (lambda (g$655$11662) (eq? g$655$11658 (g$655$11376 g$655$11662)))))) (car g$655$11656)))) (set! g$655$11444 (make-hashtable)) (set! g$655$11446 (lambda (g$655$11664) (begin ((lambda (g$655$11666) (for-each (lambda (g$655$11668) ((lambda (g$655$11671 g$655$11672) ((lambda (g$655$11674) (hashtable-set! g$655$11444 g$655$11671 g$655$11674)) ((lambda (g$655$11675) (if (memv g$655$11675 (quote (global))) (cons (quote global) (cons g$655$11664 (cdr g$655$11672))) (if (memv g$655$11675 (quote (global-macro))) (cons (quote global-macro) (cons g$655$11664 (cdr g$655$11672))) (if (memv g$655$11675 (quote (global-macro!))) (cons (quote global-macro!) (cons g$655$11664 (cdr g$655$11672))) g$655$11672)))) (car g$655$11672)))) (car g$655$11668) (cdr g$655$11668))) g$655$11666)) (g$655$11390 g$655$11664)) ((g$655$11369) g$655$11664)))) (set! g$655$11448 (lambda (g$655$11687 g$655$11688 g$655$11689 g$655$11690 g$655$11691 g$655$11692 g$655$11693 g$655$11694 g$655$11695 g$655$11696 g$655$11697) ((lambda (g$655$11701 g$655$11702 g$655$11703) (begin (if (if (symbol? g$655$11687) (if (list? g$655$11688) (begin (quote #f) (list? g$655$11689)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec ~s ~s ~s") g$655$11687 g$655$11688 g$655$11689)) (if (g$655$11440 g$655$11688) (error (quote install-library) (quote "~s is already installed") g$655$11688) (void)) ((lambda (g$655$11705) (g$655$11446 g$655$11705)) (g$655$11372 g$655$11687 g$655$11688 g$655$11689 g$655$11701 g$655$11702 g$655$11703 g$655$11693 g$655$11694 g$655$11695 g$655$11696 g$655$11697)))) (map g$655$11442 g$655$11690) (map g$655$11442 g$655$11691) (map g$655$11442 g$655$11692)))) (set! g$655$11450 (lambda (g$655$11709 g$655$11710 g$655$11711) (g$655$11410 g$655$11709 (cons (cons g$655$11710 g$655$11711) (g$655$11388 g$655$11709))))) (set! g$655$11452 (lambda (g$655$11715 g$655$11716 g$655$11717) (begin (g$655$11412 g$655$11715 (cons (cons g$655$11716 g$655$11717) (g$655$11390 g$655$11715))) (hashtable-set! g$655$11444 g$655$11716 g$655$11717)))) (set! g$655$11454 (lambda (g$655$11719) (hashtable-ref g$655$11444 g$655$11719 (quote #f)))) (set! g$655$11456 (lambda (g$655$11721) ((lambda (g$655$11723) (if (procedure? g$655$11723) (begin (g$655$11416 g$655$11721 (lambda () (error (quote invoke) (quote "circularity detected for ~s") g$655$11721))) (for-each g$655$11456 (g$655$11386 g$655$11721)) (g$655$11416 g$655$11721 (lambda () (error (quote invoke) (quote "first invoke did not return for ~s") g$655$11721))) (g$655$11723) (g$655$11416 g$655$11721 (quote #t))) (void))) (g$655$11394 g$655$11721)))) (set! g$655$11458 (lambda (g$655$11725) ((lambda (g$655$11727) (if (procedure? g$655$11727) (begin (g$655$11414 g$655$11725 (lambda () (error (quote visit) (quote "circularity detected for ~s") g$655$11725))) (for-each g$655$11456 (g$655$11384 g$655$11725)) (g$655$11414 g$655$11725 (lambda () (error (quote invoke) (quote "first visit did not return for ~s") g$655$11725))) (g$655$11727) (g$655$11414 g$655$11725 (quote #t))) (void))) (g$655$11392 g$655$11725)))) (set! g$655$11460 (lambda (g$655$11729) (g$655$11456 (g$655$11442 g$655$11729)))) (set! g$655$11462 (lambda g$655$11739 ((lambda (g$655$11738) (if (= g$655$11738 (quote 1)) (apply (lambda (g$655$11731) (letrec ((g$655$11733 (lambda (g$655$11735) (if (null? g$655$11735) (quote ()) (if ((lambda (g$655$11737) (if g$655$11737 g$655$11737 (begin (quote #f) (g$655$11396 (car g$655$11735))))) g$655$11731) (cons (car g$655$11735) (g$655$11733 (cdr g$655$11735))) (g$655$11733 (cdr g$655$11735))))))) (g$655$11733 ((g$655$11369))))) g$655$11739) (if (= g$655$11738 (quote 0)) (apply (lambda () (g$655$11462 (quote #f))) g$655$11739) (error #1# (quote #2#))))) (length g$655$11739)))) (set! g$655$11464 (lambda (g$655$11741) (begin (if (g$655$11374 g$655$11741) (void) (error (quote library-spec) (quote "~s is not a library") g$655$11741)) (list (g$655$11376 g$655$11741) (g$655$11378 g$655$11741) (g$655$11380 g$655$11741))))) (begin (set! g$655$11742 g$655$11464) (set! g$655$11743 g$655$11462) (set! g$655$11744 g$655$11460) (set! g$655$11745 g$655$11458) (set! g$655$11746 g$655$11456) (set! g$655$11747 g$655$11454) (set! g$655$11748 g$655$11452) (set! g$655$11749 g$655$11450) (set! g$655$11750 g$655$11448) (set! g$655$11751 g$655$11446) (set! g$655$11752 g$655$11444) (set! g$655$11753 g$655$11442) (set! g$655$11754 g$655$11440) (set! g$655$11755 g$655$11438) (set! g$655$11756 g$655$11436) (set! g$655$11757 g$655$11434) (set! g$655$11758 g$655$11432) (set! g$655$11759 g$655$11430) (set! g$655$11760 g$655$11428) (set! g$655$11761 g$655$11426) (set! g$655$11762 g$655$11424) (set! g$655$11763 g$655$11422) (set! g$655$11764 g$655$11420) (set! g$655$11765 g$655$11418) (set! g$655$11766 g$655$11416) (set! g$655$11767 g$655$11414) (set! g$655$11768 g$655$11412) (set! g$655$11769 g$655$11410) (set! g$655$11770 g$655$11408) (set! g$655$11771 g$655$11406) (set! g$655$11772 g$655$11404) (set! g$655$11773 g$655$11402) (set! g$655$11774 g$655$11400) (set! g$655$11775 g$655$11398) (set! g$655$11776 g$655$11396) (set! g$655$11777 g$655$11394) (set! g$655$11778 g$655$11392) (set! g$655$11779 g$655$11390) (set! g$655$11780 g$655$11388) (set! g$655$11781 g$655$11386) (set! g$655$11782 g$655$11384) (set! g$655$11783 g$655$11382) (set! g$655$11784 g$655$11380) (set! g$655$11785 g$655$11378) (set! g$655$11786 g$655$11376) (set! g$655$11787 g$655$11374) (set! g$655$11788 g$655$11372) (set! g$655$11789 g$655$11369) (set! g$655$11790 g$655$11367)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$655$12105 . #0=((quote #f))) (define g$655$12097 . #0#) (define g$655$12096 . #0#) (define g$655$12095 . #0#) (define g$655$12091 . #0#) (define g$655$12090 . #0#) (define g$655$12089 . #0#) (define g$655$12088 . #0#) ((lambda (g$655$11793 g$655$11911 g$655$11913 g$655$11915 g$655$11979 g$655$11981 g$655$11983 g$655$11985) (begin (set! g$655$11793 (lambda (g$655$11987) (cons (quote define) (cons g$655$11987 (quote ((quote #f))))))) (set! g$655$11911 (lambda (g$655$11991 g$655$11992 g$655$11993) (list (quote lambda) g$655$11992 g$655$11993))) (set! g$655$11913 (lambda (g$655$11997 g$655$11998 g$655$11999) ((lambda (g$655$12001 g$655$12003 g$655$12005 g$655$12007) (begin (set! g$655$12001 (lambda (g$655$12049) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! g$655$12003 (lambda (g$655$12035 g$655$12036 g$655$12037) (call-with-values (lambda () (letrec ((g$655$12039 (lambda (g$655$12042 g$655$12043) (if (pair? g$655$12042) (g$655$12039 (cdr g$655$12042) (+ g$655$12043 (quote 1))) (if (null? g$655$12042) (values g$655$12043 (quote =)) (values g$655$12043 (quote >=))))))) (g$655$12039 g$655$12037 (quote 0)))) (lambda (g$655$12046 g$655$12047) (list (list (quote primitive) g$655$12047) g$655$12036 (list (quote quote) g$655$12046)))))) (set! g$655$12005 (lambda (g$655$12028 g$655$12029 g$655$12030 g$655$12031) (list (quote (primitive apply)) (g$655$11911 g$655$12028 g$655$12030 g$655$12031) g$655$12029))) (set! g$655$12007 (lambda (g$655$12011 g$655$12012 g$655$12013) ((lambda (g$655$12016 g$655$12017) (list (quote lambda) g$655$12016 (g$655$11915 g$655$12011 (list g$655$12017) (list (list (quote (primitive length)) g$655$12016)) (letrec ((g$655$12019 (lambda (g$655$12022 g$655$12023) (if (null? g$655$12022) (g$655$12001 g$655$12011) (list (quote if) (g$655$12003 g$655$12011 g$655$12017 (car g$655$12022)) (g$655$12005 g$655$12011 g$655$12016 (car g$655$12022) (car g$655$12023)) (g$655$12019 (cdr g$655$12022) (cdr g$655$12023))))))) (g$655$12019 g$655$11998 g$655$12013))))) (gensym) (gensym)))) (if (= (length g$655$11999) (quote 1)) (g$655$11911 g$655$11997 (car g$655$11998) (car g$655$11999)) (g$655$12007 g$655$11997 g$655$11998 g$655$11999)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$655$11915 (lambda (g$655$12054 g$655$12055 g$655$12056 g$655$12057) (cons (g$655$11911 g$655$12054 g$655$12055 g$655$12057) g$655$12056))) (set! g$655$11979 (lambda (g$655$12060 g$655$12061) (letrec ((g$655$12063 (lambda (g$655$12065) (if (null? (cdr g$655$12065)) (car g$655$12065) (if (equal? (car g$655$12065) (g$655$11981)) (g$655$12063 (cdr g$655$12065)) (cons (quote begin) g$655$12065)))))) (g$655$12063 g$655$12061)))) (set! g$655$11981 (lambda () (quote ((primitive void))))) (set! g$655$11983 (lambda (g$655$12070 g$655$12071 g$655$12072 g$655$12073) (if (null? g$655$12071) g$655$12073 (list (quote letrec) (map list g$655$12071 g$655$12072) g$655$12073)))) (set! g$655$11985 (lambda (g$655$12078 g$655$12079 g$655$12080 g$655$12081) (if (null? g$655$12079) g$655$12081 (g$655$11915 g$655$12078 g$655$12079 (map (lambda (g$655$12083) (list (quote quote) (quote #f))) g$655$12079) (g$655$11979 g$655$12078 (append (map (lambda (g$655$12086 g$655$12087) (list (quote set!) g$655$12086 g$655$12087)) g$655$12079 g$655$12080) (list g$655$12081))))))) (begin (set! g$655$12088 g$655$11985) (set! g$655$12089 g$655$11983) (set! g$655$12090 g$655$11981) (set! g$655$12091 g$655$11979) (set! g$655$12095 g$655$11915) (set! g$655$12096 g$655$11913) (set! g$655$12097 g$655$11911) (set! g$655$12105 g$655$11793)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$655$20357 . #0=((quote #f))) (define g$655$20356 . #0#) (define g$655$20354 . #0#) (define g$655$20353 . #0#) (define g$655$20352 . #0#) (define g$655$20351 . #0#) (define g$655$20350 . #0#) (define g$655$20349 . #0#) (define g$655$20348 . #0#) (define g$655$20347 . #0#) (define g$655$20346 . #0#) (define g$655$20345 . #0#) (define g$655$20344 . #0#) (define g$655$20343 . #0#) (define g$655$20342 . #0#) (define g$655$20341 . #0#) (define g$655$20340 . #0#) (define g$655$20339 . #0#) (define g$655$20338 . #0#) (define g$655$20337 . #0#) (define g$655$20336 . #0#) (define g$655$20335 . #0#) (define g$655$20334 . #0#) (define g$655$20333 . #0#) (define g$655$20332 . #0#) (define g$655$20331 . #0#) (define g$655$20330 . #0#) (define g$655$20329 . #0#) (define g$655$20328 . #0#) (define g$655$20327 . #0#) (define g$655$20326 . #0#) (define g$655$20325 . #0#) (define g$655$20324 . #0#) (define g$655$20323 . #0#) (define g$655$20322 . #0#) (define g$655$20321 . #0#) (define g$655$20320 . #0#) (define g$655$20319 . #0#) (define g$655$20318 . #0#) (define g$655$20317 . #0#) (define g$655$20316 . #0#) (define g$655$20315 . #0#) (define g$655$20314 . #0#) (define g$655$20313 . #0#) (define g$655$20312 . #0#) (define g$655$20311 . #0#) (define g$655$20310 . #0#) (define g$655$20309 . #0#) (define g$655$20308 . #0#) (define g$655$20307 . #0#) (define g$655$20306 . #0#) (define g$655$20305 . #0#) (define g$655$20304 . #0#) (define g$655$20303 . #0#) (define g$655$20302 . #0#) (define g$655$20301 . #0#) (define g$655$20300 . #0#) (define g$655$20299 . #0#) (define g$655$20298 . #0#) (define g$655$20297 . #0#) (define g$655$20296 . #0#) (define g$655$20295 . #0#) (define g$655$20294 . #0#) (define g$655$20293 . #0#) (define g$655$20292 . #0#) (define g$655$20290 . #0#) (define g$655$20289 . #0#) (define g$655$20288 . #0#) (define g$655$20286 . #0#) (define g$655$20285 . #0#) (define g$655$20284 . #0#) (define g$655$20283 . #0#) (define g$655$20282 . #0#) (define g$655$20281 . #0#) (define g$655$20280 . #0#) (define g$655$20279 . #0#) (define g$655$20278 . #0#) (define g$655$20277 . #0#) (define g$655$20276 . #0#) (define g$655$20275 . #0#) (define g$655$20274 . #0#) (define g$655$20273 . #0#) (define g$655$20272 . #0#) (define g$655$20271 . #0#) (define g$655$20270 . #0#) (define g$655$20269 . #0#) (define g$655$20268 . #0#) (define g$655$20267 . #0#) (define g$655$20266 . #0#) (define g$655$20265 . #0#) (define g$655$20264 . #0#) (define g$655$20263 . #0#) (define g$655$20262 . #0#) (define g$655$20261 . #0#) (define g$655$20260 . #0#) (define g$655$20259 . #0#) (define g$655$20258 . #0#) (define g$655$20257 . #0#) (define g$655$20256 . #0#) (define g$655$20255 . #0#) (define g$655$20254 . #0#) (define g$655$20253 . #0#) (define g$655$20252 . #0#) (define g$655$20251 . #0#) (define g$655$20250 . #0#) (define g$655$20249 . #0#) (define g$655$20248 . #0#) (define g$655$20247 . #0#) (define g$655$20246 . #0#) (define g$655$20245 . #0#) (define g$655$20244 . #0#) (define g$655$20243 . #0#) (define g$655$20242 . #0#) (define g$655$20241 . #0#) (define g$655$20240 . #0#) (define g$655$20239 . #0#) (define g$655$20238 . #0#) (define g$655$20237 . #0#) (define g$655$20236 . #0#) (define g$655$20235 . #0#) (define g$655$20234 . #0#) (define g$655$20233 . #0#) (define g$655$20232 . #0#) (define g$655$20231 . #0#) (define g$655$20230 . #0#) (define g$655$20229 . #0#) (define g$655$20228 . #0#) (define g$655$20227 . #0#) (define g$655$20226 . #0#) (define g$655$20225 . #0#) (define g$655$20224 . #0#) (define g$655$20223 . #0#) (define g$655$20222 . #0#) (define g$655$20221 . #0#) (define g$655$20220 . #0#) (define g$655$20219 . #0#) (define g$655$20218 . #0#) (define g$655$20217 . #0#) (define g$655$20216 . #0#) (define g$655$20215 . #0#) (define g$655$20214 . #0#) (define g$655$20213 . #0#) (define g$655$20212 . #0#) (define g$655$20211 . #0#) (define g$655$20210 . #0#) (define g$655$20209 . #0#) (define g$655$20208 . #0#) (define g$655$20207 . #0#) (define g$655$20206 . #0#) (define g$655$20205 . #0#) (define g$655$20204 . #0#) (define g$655$20203 . #0#) (define g$655$20202 . #0#) (define g$655$20201 . #0#) (define g$655$20200 . #0#) (define g$655$20199 . #0#) (define g$655$20198 . #0#) (define g$655$20197 . #0#) (define g$655$20196 . #0#) (define g$655$20195 . #0#) (define g$655$20194 . #0#) (define g$655$20193 . #0#) (define g$655$20192 . #0#) (define g$655$20191 . #0#) (define g$655$20190 . #0#) (define g$655$20189 . #0#) (define g$655$20188 . #0#) (define g$655$20187 . #0#) (define g$655$20186 . #0#) (define g$655$20185 . #0#) (define g$655$20184 . #0#) (define g$655$20183 . #0#) (define g$655$20182 . #0#) (define g$655$20181 . #0#) (define g$655$20180 . #0#) (define g$655$20179 . #0#) (define g$655$20178 . #0#) (define g$655$20177 . #0#) (define g$655$20176 . #0#) (define g$655$20175 . #0#) (define g$655$20174 . #0#) ((lambda (g$655$12108 g$655$12110 g$655$12115 g$655$12117 g$655$12119 g$655$12121 g$655$12123 g$655$12126 g$655$12128 g$655$12130 g$655$12132 g$655$12134 g$655$12136 g$655$12138 g$655$12140 g$655$12142 g$655$12144 g$655$12146 g$655$12148 g$655$12150 g$655$12152 g$655$12154 g$655$12156 g$655$12159 g$655$12161 g$655$12163 g$655$12165 g$655$12167 g$655$12169 g$655$12171 g$655$12173 g$655$12175 g$655$12177 g$655$12179 g$655$12181 g$655$12183 g$655$12185 g$655$12187 g$655$12189 g$655$12191 g$655$12193 g$655$12195 g$655$12197 g$655$12199 g$655$12201 g$655$12203 g$655$12205 g$655$12207 g$655$12209 g$655$12211 g$655$12213 g$655$12215 g$655$12217 g$655$12219 g$655$12221 g$655$12223 g$655$12225 g$655$12227 g$655$12229 g$655$12231 g$655$12233 g$655$12235 g$655$12237 g$655$12239 g$655$12241 g$655$12269 g$655$12271 g$655$12273 g$655$12635 g$655$12637 g$655$12639 g$655$12641 g$655$12643 g$655$12645 g$655$12647 g$655$12649 g$655$12651 g$655$12653 g$655$12655 g$655$12657 g$655$12659 g$655$12661 g$655$12663 g$655$12665 g$655$12667 g$655$12669 g$655$12671 g$655$12673 g$655$12675 g$655$12677 g$655$12679 g$655$12681 g$655$12683 g$655$12685 g$655$12687 g$655$12689 g$655$12691 g$655$12693 g$655$12695 g$655$12697 g$655$12699 g$655$12701 g$655$12703 g$655$12705 g$655$12707 g$655$12709 g$655$12711 g$655$12713 g$655$12715 g$655$12717 g$655$12719 g$655$12721 g$655$12723 g$655$12725 g$655$12727 g$655$12729 g$655$12731 g$655$12733 g$655$12735 g$655$12737 g$655$12739 g$655$12741 g$655$12743 g$655$12745 g$655$12747 g$655$12749 g$655$12751 g$655$12753 g$655$12755 g$655$12757 g$655$12759 g$655$12761 g$655$12763 g$655$12765 g$655$12767 g$655$12769 g$655$12771 g$655$12773 g$655$12775 g$655$12777 g$655$12779 g$655$12781 g$655$12783 g$655$12785 g$655$12787 g$655$12789 g$655$12791 g$655$12793 g$655$12795 g$655$12797 g$655$12799 g$655$12801 g$655$12804 g$655$12806 g$655$12808 g$655$12810 g$655$12812 g$655$12814 g$655$12816 g$655$12818 g$655$12820 g$655$12822 g$655$12824 g$655$12826 g$655$12828 g$655$12830 g$655$12832 g$655$12834 g$655$12836 g$655$12838 g$655$12840 g$655$12842 g$655$12844 g$655$12846 g$655$12848 g$655$12850 g$655$12852 g$655$12854 g$655$12856 g$655$12858 g$655$12860) (begin (set! g$655$12108 (lambda (g$655$12863 g$655$12864) (if (memq g$655$12863 g$655$12864) g$655$12864 (cons g$655$12863 g$655$12864)))) (set! g$655$12110 (lambda (g$655$12867 g$655$12868) (if (null? g$655$12867) g$655$12868 (if (memq (car g$655$12867) g$655$12868) (g$655$12110 (cdr g$655$12867) g$655$12868) (cons (car g$655$12867) (g$655$12110 (cdr g$655$12867) g$655$12868)))))) (set! g$655$12115 (quote (top))) (set! g$655$12117 (lambda (g$655$12870) (memq (quote top) g$655$12870))) (set! g$655$12119 (lambda (g$655$12872) (if (symbol? g$655$12872) (gensym g$655$12872) (if (g$655$12161 g$655$12872) (g$655$12119 (g$655$12211 g$655$12872)) (error (quote gen-lexical) (quote "BUG: invalid arg ~s") g$655$12872))))) (set! g$655$12121 (lambda (g$655$12874) (g$655$12119 g$655$12874))) (set! g$655$12123 (lambda (g$655$12876) (gensym))) (set! g$655$12126 (lambda (g$655$12881 g$655$12882 g$655$12883 g$655$12884) (vector (quote g$655$12124) g$655$12881 g$655$12882 g$655$12883 g$655$12884))) (set! g$655$12128 (lambda (g$655$12886) (if (vector? g$655$12886) (if (= (vector-length g$655$12886) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref g$655$12886 (quote 0)) (quote g$655$12124))) (quote #f)) (quote #f)))) (set! g$655$12130 (lambda (g$655$12888) (if (g$655$12128 g$655$12888) (vector-ref g$655$12888 (quote 1)) (error (quote rib-sym*) (quote #1="~s is not of type ~s") g$655$12888 (quote rib))))) (set! g$655$12132 (lambda (g$655$12890) (if (g$655$12128 g$655$12890) (vector-ref g$655$12890 (quote 2)) (error (quote rib-mark**) (quote #1#) g$655$12890 (quote rib))))) (set! g$655$12134 (lambda (g$655$12892) (if (g$655$12128 g$655$12892) (vector-ref g$655$12892 (quote 3)) (error (quote rib-label*) (quote #1#) g$655$12892 (quote rib))))) (set! g$655$12136 (lambda (g$655$12894) (if (g$655$12128 g$655$12894) (vector-ref g$655$12894 (quote 4)) (error (quote rib-sealed/freq) (quote #1#) g$655$12894 (quote rib))))) (set! g$655$12138 (lambda (g$655$12897 g$655$12898) (if (g$655$12128 g$655$12897) (vector-set! g$655$12897 (quote 1) g$655$12898) (error (quote set-rib-sym*!) (quote #2="~s is not of type ~s") g$655$12897 (quote rib))))) (set! g$655$12140 (lambda (g$655$12901 g$655$12902) (if (g$655$12128 g$655$12901) (vector-set! g$655$12901 (quote 2) g$655$12902) (error (quote set-rib-mark**!) (quote #2#) g$655$12901 (quote rib))))) (set! g$655$12142 (lambda (g$655$12905 g$655$12906) (if (g$655$12128 g$655$12905) (vector-set! g$655$12905 (quote 3) g$655$12906) (error (quote set-rib-label*!) (quote #2#) g$655$12905 (quote rib))))) (set! g$655$12144 (lambda (g$655$12909 g$655$12910) (if (g$655$12128 g$655$12909) (vector-set! g$655$12909 (quote 4) g$655$12910) (error (quote set-rib-sealed/freq!) (quote #2#) g$655$12909 (quote rib))))) (set! g$655$12146 (lambda () (g$655$12126 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! g$655$12148 (lambda (g$655$12914 g$655$12915 g$655$12916) ((lambda (g$655$12918) (begin (set! g$655$12918 (lambda (g$655$12929 g$655$12930 g$655$12931 g$655$12932) (if (pair? g$655$12931) (begin (quote #f) ((lambda (g$655$12934) (if g$655$12934 g$655$12934 (begin (quote #f) (g$655$12918 g$655$12929 g$655$12930 (cdr g$655$12931) (cdr g$655$12932))))) (if (eq? g$655$12929 (car g$655$12931)) (begin (quote #f) (g$655$12213 g$655$12930 (car g$655$12932))) (quote #f)))) (quote #f)))) (begin (if (g$655$12136 g$655$12914) (error (quote extend-rib!) (quote "rib ~s is sealed") g$655$12914) (void)) ((lambda (g$655$12921 g$655$12922) ((lambda (g$655$12924) (begin (if (if (memq g$655$12921 (g$655$12130 g$655$12914)) (begin (quote #f) (g$655$12918 g$655$12921 g$655$12922 g$655$12924 (g$655$12132 g$655$12914))) (quote #f)) (error (quote expander) (quote #3="~a ~s") (quote "cannot redefine") (g$655$12227 g$655$12915 (quote ()))) (void)) (g$655$12138 g$655$12914 (cons g$655$12921 g$655$12924)) (g$655$12140 g$655$12914 (cons g$655$12922 (g$655$12132 g$655$12914))) (g$655$12142 g$655$12914 (cons g$655$12916 (g$655$12134 g$655$12914))))) (g$655$12130 g$655$12914))) (g$655$12211 g$655$12915) (g$655$12165 g$655$12915))))) (quote #f)))) (set! g$655$12150 (lambda (g$655$12936) ((lambda (g$655$12938) (if (null? g$655$12938) (void) ((lambda (g$655$12940) (begin (g$655$12138 g$655$12936 g$655$12940) (g$655$12140 g$655$12936 (list->vector (g$655$12132 g$655$12936))) (g$655$12142 g$655$12936 (list->vector (g$655$12134 g$655$12936))) (g$655$12144 g$655$12936 (make-vector (vector-length g$655$12940) (quote 0))))) (list->vector g$655$12938)))) (g$655$12130 g$655$12936)))) (set! g$655$12152 (lambda (g$655$12942) (if (g$655$12136 g$655$12942) (begin (g$655$12144 g$655$12942 (quote #f)) (g$655$12138 g$655$12942 (vector->list (g$655$12130 g$655$12942))) (g$655$12140 g$655$12942 (vector->list (g$655$12132 g$655$12942))) (g$655$12142 g$655$12942 (vector->list (g$655$12134 g$655$12942)))) (void)))) (set! g$655$12154 (lambda (g$655$12945 g$655$12946) ((lambda (g$655$12948) ((lambda (g$655$12950) ((lambda (g$655$12952) (begin (vector-set! g$655$12948 g$655$12952 (+ g$655$12950 (quote 1))) (if (= g$655$12952 g$655$12946) (void) ((lambda (g$655$12956 g$655$12957 g$655$12958) (begin ((lambda (g$655$12960) (begin (vector-set! g$655$12956 g$655$12946 (vector-ref g$655$12956 g$655$12952)) (vector-set! g$655$12956 g$655$12952 g$655$12960))) (vector-ref g$655$12956 g$655$12946)) ((lambda (g$655$12962) (begin (vector-set! g$655$12957 g$655$12946 (vector-ref g$655$12957 g$655$12952)) (vector-set! g$655$12957 g$655$12952 g$655$12962))) (vector-ref g$655$12957 g$655$12946)) ((lambda (g$655$12964) (begin (vector-set! g$655$12958 g$655$12946 (vector-ref g$655$12958 g$655$12952)) (vector-set! g$655$12958 g$655$12952 g$655$12964))) (vector-ref g$655$12958 g$655$12946)))) (g$655$12130 g$655$12945) (g$655$12132 g$655$12945) (g$655$12134 g$655$12945))))) (letrec ((g$655$12966 (lambda (g$655$12968) (if (zero? g$655$12968) (quote 0) ((lambda (g$655$12970) (if (= g$655$12950 (vector-ref g$655$12948 g$655$12970)) (g$655$12966 g$655$12970) g$655$12968)) (- g$655$12968 (quote 1))))))) (g$655$12966 g$655$12946)))) (vector-ref g$655$12948 g$655$12946))) (g$655$12136 g$655$12945)))) (set! g$655$12156 (lambda (g$655$12973 g$655$12974) (g$655$12126 (map g$655$12211 g$655$12973) (map g$655$12165 g$655$12973) g$655$12974 (quote #f)))) (set! g$655$12159 (lambda (g$655$12978 g$655$12979 g$655$12980) (vector (quote g$655$12157) g$655$12978 g$655$12979 g$655$12980))) (set! g$655$12161 (lambda (g$655$12982) (if (vector? g$655$12982) (if (= (vector-length g$655$12982) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref g$655$12982 (quote 0)) (quote g$655$12157))) (quote #f)) (quote #f)))) (set! g$655$12163 (lambda (g$655$12984) (if (g$655$12161 g$655$12984) (vector-ref g$655$12984 (quote 1)) (error (quote stx-expr) (quote #1#) g$655$12984 (quote stx))))) (set! g$655$12165 (lambda (g$655$12986) (if (g$655$12161 g$655$12986) (vector-ref g$655$12986 (quote 2)) (error (quote stx-mark*) (quote #1#) g$655$12986 (quote stx))))) (set! g$655$12167 (lambda (g$655$12988) (if (g$655$12161 g$655$12988) (vector-ref g$655$12988 (quote 3)) (error (quote stx-subst*) (quote #1#) g$655$12988 (quote stx))))) (set! g$655$12169 (lambda (g$655$12991 g$655$12992) (if (g$655$12161 g$655$12991) (vector-set! g$655$12991 (quote 1) g$655$12992) (error (quote set-stx-expr!) (quote #2#) g$655$12991 (quote stx))))) (set! g$655$12171 (lambda (g$655$12995 g$655$12996) (if (g$655$12161 g$655$12995) (vector-set! g$655$12995 (quote 2) g$655$12996) (error (quote set-stx-mark*!) (quote #2#) g$655$12995 (quote stx))))) (set! g$655$12173 (lambda (g$655$12999 g$655$13000) (if (g$655$12161 g$655$12999) (vector-set! g$655$12999 (quote 3) g$655$13000) (error (quote set-stx-subst*!) (quote #2#) g$655$12999 (quote stx))))) (set! g$655$12175 (lambda (g$655$13003 g$655$13004) (g$655$12159 g$655$13004 (g$655$12165 g$655$13003) (g$655$12167 g$655$13003)))) (set! g$655$12177 (lambda () (string (quote #\m)))) (set! g$655$12179 (quote #f)) (set! g$655$12181 not) (set! g$655$12183 (lambda (g$655$13008 g$655$13009 g$655$13010) ((lambda (g$655$13012) (begin (set! g$655$13012 (lambda (g$655$13019 g$655$13020) (letrec ((g$655$13022 (lambda (g$655$13025 g$655$13026) (if (null? g$655$13026) (cdr g$655$13020) (cons g$655$13025 (g$655$13022 (car g$655$13026) (cdr g$655$13026))))))) (g$655$13022 (car g$655$13019) (cdr g$655$13019))))) ((lambda (g$655$13015 g$655$13016) (if (if (not (null? g$655$13008)) (if (not (null? g$655$13015)) (begin (quote #f) (g$655$12181 (car g$655$13015))) (quote #f)) (quote #f)) (values (g$655$13012 g$655$13008 g$655$13015) (g$655$13012 g$655$13009 g$655$13016)) (values (append g$655$13008 g$655$13015) (append g$655$13009 g$655$13016)))) (g$655$12165 g$655$13010) (g$655$12167 g$655$13010)))) (quote #f)))) (set! g$655$12185 (lambda (g$655$13030 g$655$13031 g$655$13032) (if (g$655$12161 g$655$13030) (call-with-values (lambda () (g$655$12183 g$655$13031 g$655$13032 g$655$13030)) (lambda (g$655$13035 g$655$13036) (g$655$12159 (g$655$12163 g$655$13030) g$655$13035 g$655$13036))) (g$655$12159 g$655$13030 g$655$13031 g$655$13032)))) (set! g$655$12187 (lambda (g$655$13039 g$655$13040) (g$655$12185 g$655$13040 (list g$655$13039) (quote (shift))))) (set! g$655$12189 (lambda (g$655$13043 g$655$13044) (g$655$12185 g$655$13044 (quote ()) (list g$655$13043)))) (set! g$655$12191 (lambda (g$655$13047 g$655$13048) (if (g$655$12161 g$655$13047) (g$655$12191 (g$655$12163 g$655$13047) g$655$13048) (g$655$13048 g$655$13047)))) (set! g$655$12193 (lambda (g$655$13050) (if (g$655$12161 g$655$13050) ((lambda (g$655$13054 g$655$13055 g$655$13056) (map (lambda (g$655$13058) (g$655$12185 g$655$13058 g$655$13055 g$655$13056)) g$655$13054)) (g$655$12193 (g$655$12163 g$655$13050)) (g$655$12165 g$655$13050) (g$655$12167 g$655$13050)) (if (vector? g$655$13050) (vector->list g$655$13050) (error (quote syntax-vector->list) (quote "not a syntax vector ~s") g$655$13050))))) (set! g$655$12195 (lambda (g$655$13060) (g$655$12191 g$655$13060 pair?))) (set! g$655$12197 (lambda (g$655$13062) (g$655$12191 g$655$13062 vector?))) (set! g$655$12199 (lambda (g$655$13064) (g$655$12191 g$655$13064 null?))) (set! g$655$12201 (lambda (g$655$13066) ((lambda (g$655$13068) (if g$655$13068 g$655$13068 (begin (quote #f) (if (g$655$12195 g$655$13066) (begin (quote #f) (g$655$12201 (g$655$12207 g$655$13066))) (quote #f))))) (g$655$12199 g$655$13066)))) (set! g$655$12203 (lambda (g$655$13070) (if (g$655$12161 g$655$13070) (g$655$12185 (g$655$12203 (g$655$12163 g$655$13070)) (g$655$12165 g$655$13070) (g$655$12167 g$655$13070)) (if (pair? g$655$13070) (car g$655$13070) (error (quote syntax-car) (quote "~s is not a pair") g$655$13070))))) (set! g$655$12205 (lambda (g$655$13072) (if (g$655$12195 g$655$13072) (cons (g$655$12203 g$655$13072) (g$655$12205 (g$655$12207 g$655$13072))) (if (g$655$12199 g$655$13072) (quote ()) (error (quote syntax->list) (quote "invalid ~s") g$655$13072))))) (set! g$655$12207 (lambda (g$655$13074) (if (g$655$12161 g$655$13074) (g$655$12185 (g$655$12207 (g$655$12163 g$655$13074)) (g$655$12165 g$655$13074) (g$655$12167 g$655$13074)) (if (pair? g$655$13074) (cdr g$655$13074) (error (quote syntax-cdr) (quote "~s is not a pair") g$655$13074))))) (set! g$655$12209 (lambda (g$655$13076) (g$655$12191 g$655$13076 symbol?))) (set! g$655$12211 (lambda (g$655$13078) (if (g$655$12161 g$655$13078) (g$655$12211 (g$655$12163 g$655$13078)) (if (symbol? g$655$13078) g$655$13078 (error (quote id->sym) (quote "~s is not an id") g$655$13078))))) (set! g$655$12213 (lambda (g$655$13081 g$655$13082) ((lambda (g$655$13084) (if g$655$13084 g$655$13084 (begin (quote #f) (if (pair? g$655$13081) (if (pair? g$655$13082) (if (eq? (car g$655$13081) (car g$655$13082)) (begin (quote #f) (g$655$12213 (cdr g$655$13081) (cdr g$655$13082))) (quote #f)) (quote #f)) (quote #f))))) (if (null? g$655$13081) (begin (quote #f) (null? g$655$13082)) (quote #f))))) (set! g$655$12215 (lambda (g$655$13087 g$655$13088) (if (eq? (g$655$12211 g$655$13087) (g$655$12211 g$655$13088)) (begin (quote #f) (g$655$12213 (g$655$12165 g$655$13087) (g$655$12165 g$655$13088))) (quote #f)))) (set! g$655$12217 (lambda (g$655$13091 g$655$13092) ((lambda (g$655$13095 g$655$13096) (if ((lambda (g$655$13098) (if g$655$13098 g$655$13098 (begin (quote #f) g$655$13096))) g$655$13095) (eq? g$655$13095 g$655$13096) (eq? (g$655$12211 g$655$13091) (g$655$12211 g$655$13092)))) (g$655$12231 g$655$13091) (g$655$12231 g$655$13092)))) (set! g$655$12219 (lambda (g$655$13100) (if (for-all g$655$12209 g$655$13100) (begin (quote #f) (g$655$12221 g$655$13100)) (quote #f)))) (set! g$655$12221 (lambda (g$655$13102) ((lambda (g$655$13104) (if g$655$13104 g$655$13104 (begin (quote #f) (if (not (g$655$12223 (car g$655$13102) (cdr g$655$13102))) (begin (quote #f) (g$655$12221 (cdr g$655$13102))) (quote #f))))) (null? g$655$13102)))) (set! g$655$12223 (lambda (g$655$13107 g$655$13108) (if (pair? g$655$13108) (begin (quote #f) ((lambda (g$655$13110) (if g$655$13110 g$655$13110 (begin (quote #f) (g$655$12223 g$655$13107 (cdr g$655$13108))))) (g$655$12215 g$655$13107 (car g$655$13108)))) (quote #f)))) (set! g$655$12225 (lambda (g$655$13112) ((lambda (g$655$13114) (if g$655$13114 g$655$13114 ((lambda (g$655$13116) (if g$655$13116 g$655$13116 ((lambda (g$655$13118) (if g$655$13118 g$655$13118 (begin (quote #f) (boolean? g$655$13112)))) (char? g$655$13112)))) (string? g$655$13112)))) (number? g$655$13112)))) (set! g$655$12227 (lambda (g$655$13121 g$655$13122) (if (g$655$12117 g$655$13122) g$655$13121 (letrec ((g$655$13124 (lambda (g$655$13126) (if (g$655$12161 g$655$13126) (g$655$12227 (g$655$12163 g$655$13126) (g$655$12165 g$655$13126)) (if (pair? g$655$13126) ((lambda (g$655$13133 g$655$13134) (if (if (eq? g$655$13133 (car g$655$13126)) (begin (quote #f) (eq? g$655$13134 (cdr g$655$13126))) (quote #f)) g$655$13126 (cons g$655$13133 g$655$13134))) (g$655$13124 (car g$655$13126)) (g$655$13124 (cdr g$655$13126))) (if (vector? g$655$13126) ((lambda (g$655$13128) ((lambda (g$655$13130) (if (for-all eq? g$655$13128 g$655$13130) g$655$13126 (list->vector g$655$13130))) (map g$655$13124 g$655$13128))) (vector->list g$655$13126)) g$655$13126)))))) (g$655$13124 g$655$13121))))) (set! g$655$12229 (lambda (g$655$13136) (g$655$12227 g$655$13136 (quote ())))) (set! g$655$12231 (lambda (g$655$13138) ((lambda (g$655$13140) (letrec ((g$655$13142 (lambda (g$655$13145 g$655$13146) (if (null? g$655$13145) (g$655$12858 g$655$13140) (if (eq? (car g$655$13145) (quote shift)) (g$655$13142 (cdr g$655$13145) (cdr g$655$13146)) ((lambda (g$655$13148) (if (g$655$12136 g$655$13148) ((lambda (g$655$13158) (letrec ((g$655$13160 (lambda (g$655$13163 g$655$13164) (if (= g$655$13163 g$655$13164) (g$655$13142 (cdr g$655$13145) g$655$13146) (if (if (eq? (vector-ref g$655$13158 g$655$13163) g$655$13140) (begin (quote #f) (g$655$12213 g$655$13146 (vector-ref (g$655$12132 g$655$13148) g$655$13163))) (quote #f)) ((lambda (g$655$13166) (begin (g$655$12154 g$655$13148 g$655$13163) g$655$13166)) (vector-ref (g$655$12134 g$655$13148) g$655$13163)) (g$655$13160 (+ g$655$13163 (quote 1)) g$655$13164)))))) (g$655$13160 (quote 0) (vector-length g$655$13158)))) (g$655$12130 g$655$13148)) (letrec ((g$655$13150 (lambda (g$655$13154 g$655$13155 g$655$13156) (if (null? g$655$13154) (g$655$13142 (cdr g$655$13145) g$655$13146) (if (if (eq? (car g$655$13154) g$655$13140) (begin (quote #f) (g$655$12213 (car g$655$13155) g$655$13146)) (quote #f)) (car g$655$13156) (g$655$13150 (cdr g$655$13154) (cdr g$655$13155) (cdr g$655$13156))))))) (g$655$13150 (g$655$12130 g$655$13148) (g$655$12132 g$655$13148) (g$655$12134 g$655$13148))))) (car g$655$13145))))))) (g$655$13142 (g$655$12167 g$655$13138) (g$655$12165 g$655$13138)))) (g$655$12211 g$655$13138)))) (set! g$655$12233 (lambda (g$655$13169 g$655$13170) ((lambda (g$655$13172) (if g$655$13172 g$655$13172 (begin (quote #f) ((lambda (g$655$13174) (if g$655$13174 (cdr g$655$13174) (quote (displaced-lexical . #f)))) (assq g$655$13169 g$655$13170))))) (g$655$11747 g$655$13169)))) (set! g$655$12235 cons) (set! g$655$12237 car) (set! g$655$12239 cdr) (set! g$655$12241 (lambda (g$655$13177 g$655$13178) (if (g$655$12209 g$655$13177) ((lambda (g$655$13191) ((lambda (g$655$13193) ((lambda (g$655$13195) ((lambda (g$655$13197) ((lambda () (begin (if g$655$13193 (void) (error (quote expander) (quote #3#) (quote "unbound identifier") (g$655$12227 g$655$13177 (quote ())))) ((lambda (g$655$13198) (if (memv g$655$13198 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module))) (values g$655$13197 (g$655$12239 g$655$13195) g$655$13191) (values (quote other) (quote #f) (quote #f)))) g$655$13197))))) (g$655$12237 g$655$13195))) (g$655$12233 g$655$13193 g$655$13178))) (g$655$12231 g$655$13191))) g$655$13177) (if (g$655$12195 g$655$13177) ((lambda (g$655$13182) (if (g$655$12209 g$655$13182) ((lambda (g$655$13184) ((lambda (g$655$13186) ((lambda (g$655$13188) ((lambda () (begin (if g$655$13184 (void) (error (quote expander) (quote #3#) (quote "unbound identifier") (g$655$12227 g$655$13177 (quote ())))) ((lambda (g$655$13189) (if (memv g$655$13189 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import))) (values g$655$13188 (g$655$12239 g$655$13186) g$655$13182) (values (quote call) (quote #f) (quote #f)))) g$655$13188))))) (g$655$12237 g$655$13186))) (g$655$12233 g$655$13184 g$655$13178))) (g$655$12231 g$655$13182)) (values (quote call) (quote #f) (quote #f)))) (g$655$12203 g$655$13177)) ((lambda (g$655$13180) (if (g$655$12225 g$655$13180) (values (quote constant) g$655$13180 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (g$655$12229 g$655$13177)))))) (set! g$655$12269 (lambda (g$655$13201 g$655$13202) (if (procedure? g$655$13201) (cons* (quote local-macro) g$655$13201 g$655$13202) (if (if (pair? g$655$13201) (if (eq? (car g$655$13201) (quote macro!)) (begin (quote #f) (procedure? (cdr g$655$13201))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr g$655$13201) g$655$13202) (if (if (pair? g$655$13201) (begin (quote #f) (eq? (car g$655$13201) (quote $rtd))) (quote #f)) g$655$13201 (error (quote expand) (quote "invalid transformer ~s") g$655$13201)))))) (set! g$655$12271 (lambda (g$655$13204) (if (procedure? g$655$13204) (cons (quote macro!) g$655$13204) (error (quote make-variable-transformer) (quote "~s is not a procedure") g$655$13204)))) (set! g$655$12273 (lambda (g$655$13206) (g$655$12269 (eval-core (g$655$11298 g$655$13206)) g$655$13206))) (set! g$655$12635 (lambda (g$655$13208) ((lambda (g$655$13210) ((lambda (g$655$13212) (if (if g$655$13212 (begin (quote #f) (apply (lambda (g$655$13263 g$655$13264 g$655$13265 g$655$13266) (g$655$12209 g$655$13263)) g$655$13212)) (quote #f)) (apply (lambda (g$655$13255 g$655$13256 g$655$13257 g$655$13258) (values g$655$13255 (cons (quote defun) (cons g$655$13256 (cons g$655$13257 g$655$13258))))) g$655$13212) ((lambda (g$655$13214) ((lambda (g$655$13216) (if (if g$655$13216 (begin (quote #f) (apply (lambda (g$655$13223 g$655$13224) (g$655$12209 g$655$13223)) g$655$13216)) (quote #f)) (apply (lambda (g$655$13219 g$655$13220) (values g$655$13219 (cons (quote expr) g$655$13220))) g$655$13216) (error (quote expander) (quote #3#) (quote #4="invalid syntax") (g$655$12227 g$655$13214 (quote ()))))) ((lambda (g$655$13226) (if (g$655$12195 g$655$13226) (begin (quote #f) ((lambda (g$655$13228) (if g$655$13228 (begin (quote #f) ((lambda (g$655$13230) (if g$655$13230 (begin (quote #f) (append g$655$13228 g$655$13230)) (quote #f))) ((lambda (g$655$13232) (if (g$655$12195 g$655$13232) (begin (quote #f) ((lambda (g$655$13234) (if g$655$13234 (begin (quote #f) ((lambda (g$655$13236) (if g$655$13236 (begin (quote #f) (append g$655$13234 g$655$13236)) (quote #f))) ((lambda (g$655$13238) (if (g$655$12195 g$655$13238) (begin (quote #f) ((lambda (g$655$13240) (if g$655$13240 (begin (quote #f) ((lambda (g$655$13242) (if g$655$13242 (begin (quote #f) (append g$655$13240 g$655$13242)) (quote #f))) ((lambda (g$655$13244) (if (equal? (g$655$12229 g$655$13244) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13238)))) (quote #f))) ((lambda (g$655$13246) (list g$655$13246)) (g$655$12203 g$655$13238)))) (quote #f))) (g$655$12207 g$655$13232)))) (quote #f))) ((lambda (g$655$13248) (list g$655$13248)) (g$655$12203 g$655$13232)))) (quote #f))) (g$655$12207 g$655$13226)))) (quote #f))) ((lambda (g$655$13250) (quote ())) (g$655$12203 g$655$13226)))) (quote #f))) g$655$13214))) g$655$13210))) ((lambda (g$655$13268) (if (g$655$12195 g$655$13268) (begin (quote #f) ((lambda (g$655$13270) (if g$655$13270 (begin (quote #f) ((lambda (g$655$13272) (if g$655$13272 (begin (quote #f) (append g$655$13270 g$655$13272)) (quote #f))) ((lambda (g$655$13274) (if (g$655$12195 g$655$13274) (begin (quote #f) ((lambda (g$655$13276) (if g$655$13276 (begin (quote #f) ((lambda (g$655$13278) (if g$655$13278 (begin (quote #f) (append g$655$13276 g$655$13278)) (quote #f))) ((lambda (g$655$13280) (if (g$655$12195 g$655$13280) (begin (quote #f) ((lambda (g$655$13282) (if g$655$13282 (begin (quote #f) ((lambda (g$655$13284) (if g$655$13284 (begin (quote #f) (append g$655$13282 g$655$13284)) (quote #f))) ((letrec ((g$655$13286 (lambda (g$655$13288) (if (g$655$12195 g$655$13288) ((lambda (g$655$13290) (if g$655$13290 (begin (quote #f) ((lambda (g$655$13292) (if g$655$13292 (begin (quote #f) (map cons g$655$13290 g$655$13292)) (quote #f))) (g$655$13286 (g$655$12207 g$655$13288)))) (quote #f))) ((lambda (g$655$13294) (list g$655$13294)) (g$655$12203 g$655$13288))) (if (g$655$12199 g$655$13288) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$13286) (g$655$12207 g$655$13280)))) (quote #f))) ((lambda (g$655$13296) (list g$655$13296)) (g$655$12203 g$655$13280)))) (quote #f))) (g$655$12207 g$655$13274)))) (quote #f))) ((lambda (g$655$13298) (if (g$655$12195 g$655$13298) (begin (quote #f) ((lambda (g$655$13300) (if g$655$13300 (begin (quote #f) ((lambda (g$655$13302) (if g$655$13302 (begin (quote #f) (append g$655$13300 g$655$13302)) (quote #f))) ((lambda (g$655$13304) (list g$655$13304)) (g$655$12207 g$655$13298)))) (quote #f))) ((lambda (g$655$13306) (list g$655$13306)) (g$655$12203 g$655$13298)))) (quote #f))) (g$655$12203 g$655$13274)))) (quote #f))) (g$655$12207 g$655$13268)))) (quote #f))) ((lambda (g$655$13308) (quote ())) (g$655$12203 g$655$13268)))) (quote #f))) g$655$13210))) g$655$13208))) (set! g$655$12637 (lambda (g$655$13310) ((lambda (g$655$13312) ((lambda (g$655$13314) (if (if g$655$13314 (begin (quote #f) (apply (lambda (g$655$13321 g$655$13322) (g$655$12209 g$655$13321)) g$655$13314)) (quote #f)) (apply (lambda (g$655$13317 g$655$13318) (values g$655$13317 g$655$13318)) g$655$13314) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13312 (quote ()))))) ((lambda (g$655$13324) (if (g$655$12195 g$655$13324) (begin (quote #f) ((lambda (g$655$13326) (if g$655$13326 (begin (quote #f) ((lambda (g$655$13328) (if g$655$13328 (begin (quote #f) (append g$655$13326 g$655$13328)) (quote #f))) ((lambda (g$655$13330) (if (g$655$12195 g$655$13330) (begin (quote #f) ((lambda (g$655$13332) (if g$655$13332 (begin (quote #f) ((lambda (g$655$13334) (if g$655$13334 (begin (quote #f) (append g$655$13332 g$655$13334)) (quote #f))) ((lambda (g$655$13336) (if (g$655$12195 g$655$13336) (begin (quote #f) ((lambda (g$655$13338) (if g$655$13338 (begin (quote #f) ((lambda (g$655$13340) (if g$655$13340 (begin (quote #f) (append g$655$13338 g$655$13340)) (quote #f))) ((lambda (g$655$13342) (if (equal? (g$655$12229 g$655$13342) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13336)))) (quote #f))) ((lambda (g$655$13344) (list g$655$13344)) (g$655$12203 g$655$13336)))) (quote #f))) (g$655$12207 g$655$13330)))) (quote #f))) ((lambda (g$655$13346) (list g$655$13346)) (g$655$12203 g$655$13330)))) (quote #f))) (g$655$12207 g$655$13324)))) (quote #f))) ((lambda (g$655$13348) (quote ())) (g$655$12203 g$655$13324)))) (quote #f))) g$655$13312))) g$655$13310))) (set! g$655$12639 (lambda (g$655$13350) ((lambda (g$655$13352) ((lambda (g$655$13354) (if g$655$13354 ((lambda (g$655$13356) ((lambda (g$655$13359 g$655$13360) (g$655$12189 (g$655$12126 (list g$655$13359) (list g$655$12115) (list g$655$13360) (quote #f)) (g$655$12185 g$655$13350 g$655$12115 (quote ())))) (car g$655$13356) (cdr g$655$13356))) g$655$13354) (g$655$12185 g$655$13350 g$655$12115 (quote ())))) (assq g$655$13350 g$655$13352))) (g$655$11780 (g$655$11755 (quote (psyntax system $all))))))) (set! g$655$12641 (lambda (g$655$13364 g$655$13365 g$655$13366) (cons (cons* g$655$13364 (quote lexical) g$655$13365) g$655$13366))) (set! g$655$12643 (lambda (g$655$13370 g$655$13371 g$655$13372) (if (null? g$655$13370) g$655$13372 (g$655$12643 (cdr g$655$13370) (cdr g$655$13371) (g$655$12641 (car g$655$13370) (car g$655$13371) g$655$13372))))) (set! g$655$12645 (lambda (g$655$13376 g$655$13377 g$655$13378) ((lambda (g$655$13380) ((lambda (g$655$13382) (if (if g$655$13382 (begin (quote #f) (apply (lambda (g$655$13417 g$655$13418 g$655$13419 g$655$13420) (quote #t)) g$655$13382)) (quote #f)) (apply (lambda (g$655$13387 g$655$13388 g$655$13389 g$655$13390) ((lambda (g$655$13392) ((lambda (g$655$13395 g$655$13396) ((lambda (g$655$13400 g$655$13401 g$655$13402) (letrec ((g$655$13404 (lambda (g$655$13407 g$655$13408) (if (null? g$655$13407) (g$655$12757 (g$655$12189 (g$655$12156 g$655$13400 g$655$13401) (cons g$655$13389 g$655$13390)) (g$655$12643 g$655$13401 g$655$13402 g$655$13377) g$655$13378) (list (quote (primitive call-with-values)) (g$655$12097 (quote #f) (quote ()) (car g$655$13408)) (g$655$12097 (quote #f) (car g$655$13407) (g$655$13404 (cdr g$655$13407) (cdr g$655$13408)))))))) (g$655$13404 g$655$13395 g$655$13392))) (apply append g$655$13387) (apply append g$655$13396) (apply append g$655$13395))) (map (lambda (g$655$13410) (map g$655$12119 g$655$13410)) g$655$13387) (map (lambda (g$655$13412) (map g$655$12123 g$655$13412)) g$655$13387))) (g$655$12737 g$655$13388 g$655$13377 g$655$13378))) g$655$13382) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13380 (quote ()))))) ((lambda (g$655$13422) (if (g$655$12195 g$655$13422) (begin (quote #f) ((lambda (g$655$13424) (if g$655$13424 (begin (quote #f) ((lambda (g$655$13426) (if g$655$13426 (begin (quote #f) (append g$655$13424 g$655$13426)) (quote #f))) ((lambda (g$655$13428) (if (g$655$12195 g$655$13428) (begin (quote #f) ((lambda (g$655$13430) (if g$655$13430 (begin (quote #f) ((lambda (g$655$13432) (if g$655$13432 (begin (quote #f) (append g$655$13430 g$655$13432)) (quote #f))) ((lambda (g$655$13434) (if (g$655$12195 g$655$13434) (begin (quote #f) ((lambda (g$655$13436) (if g$655$13436 (begin (quote #f) ((lambda (g$655$13438) (if g$655$13438 (begin (quote #f) (append g$655$13436 g$655$13438)) (quote #f))) ((letrec ((g$655$13440 (lambda (g$655$13442) (if (g$655$12195 g$655$13442) ((lambda (g$655$13444) (if g$655$13444 (begin (quote #f) ((lambda (g$655$13446) (if g$655$13446 (begin (quote #f) (map cons g$655$13444 g$655$13446)) (quote #f))) (g$655$13440 (g$655$12207 g$655$13442)))) (quote #f))) ((lambda (g$655$13448) (list g$655$13448)) (g$655$12203 g$655$13442))) (if (g$655$12199 g$655$13442) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$13440) (g$655$12207 g$655$13434)))) (quote #f))) ((lambda (g$655$13450) (list g$655$13450)) (g$655$12203 g$655$13434)))) (quote #f))) (g$655$12207 g$655$13428)))) (quote #f))) ((letrec ((g$655$13452 (lambda (g$655$13454) (if (g$655$12195 g$655$13454) ((lambda (g$655$13456) (if g$655$13456 (begin (quote #f) ((lambda (g$655$13458) (if g$655$13458 (begin (quote #f) (map cons g$655$13456 g$655$13458)) (quote #f))) (g$655$13452 (g$655$12207 g$655$13454)))) (quote #f))) ((lambda (g$655$13460) (if (g$655$12195 g$655$13460) (begin (quote #f) ((lambda (g$655$13462) (if g$655$13462 (begin (quote #f) ((lambda (g$655$13464) (if g$655$13464 (begin (quote #f) (append g$655$13462 g$655$13464)) (quote #f))) ((lambda (g$655$13466) (if (g$655$12195 g$655$13466) (begin (quote #f) ((lambda (g$655$13468) (if g$655$13468 (begin (quote #f) ((lambda (g$655$13470) (if g$655$13470 (begin (quote #f) (append g$655$13468 g$655$13470)) (quote #f))) ((lambda (g$655$13472) (if (equal? (g$655$12229 g$655$13472) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13466)))) (quote #f))) ((lambda (g$655$13474) (list g$655$13474)) (g$655$12203 g$655$13466)))) (quote #f))) (g$655$12207 g$655$13460)))) (quote #f))) ((letrec ((g$655$13476 (lambda (g$655$13478) (if (g$655$12195 g$655$13478) ((lambda (g$655$13480) (if g$655$13480 (begin (quote #f) ((lambda (g$655$13482) (if g$655$13482 (begin (quote #f) (map cons g$655$13480 g$655$13482)) (quote #f))) (g$655$13476 (g$655$12207 g$655$13478)))) (quote #f))) ((lambda (g$655$13484) (list g$655$13484)) (g$655$12203 g$655$13478))) (if (g$655$12199 g$655$13478) (list (begin (quote fml**) (quote ()))) (quote #f)))))) g$655$13476) (g$655$12203 g$655$13460)))) (quote #f))) (g$655$12203 g$655$13454))) (if (g$655$12199 g$655$13454) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$655$13452) (g$655$12203 g$655$13428)))) (quote #f))) (g$655$12207 g$655$13422)))) (quote #f))) ((lambda (g$655$13486) (quote ())) (g$655$12203 g$655$13422)))) (quote #f))) g$655$13380))) g$655$13376))) (set! g$655$12647 (lambda (g$655$13491 g$655$13492 g$655$13493 g$655$13494) ((lambda (g$655$13496) ((lambda (g$655$13498) (if (if g$655$13498 (begin (quote #f) (apply (lambda (g$655$13525 g$655$13526 g$655$13527 g$655$13528) (quote #t)) g$655$13498)) (quote #f)) (apply (lambda (g$655$13503 g$655$13504 g$655$13505 g$655$13506) (if (not (g$655$12219 g$655$13503)) (error (quote expander) (quote #3#) (quote "invalid identifiers") (g$655$12227 g$655$13491 (quote ()))) ((lambda (g$655$13509 g$655$13510) ((lambda (g$655$13513 g$655$13514) ((lambda (g$655$13517 g$655$13518) (g$655$13494 (quote #f) g$655$13509 g$655$13518 g$655$13517)) (g$655$12757 (g$655$12189 g$655$13513 (cons g$655$13505 g$655$13506)) g$655$13514 g$655$13493) (g$655$12737 (map (lambda (g$655$13520) (g$655$12189 g$655$13513 g$655$13520)) g$655$13504) g$655$13514 g$655$13493))) (g$655$12156 g$655$13503 g$655$13510) (g$655$12643 g$655$13510 g$655$13509 g$655$13492))) (map g$655$12119 g$655$13503) (map g$655$12123 g$655$13503)))) g$655$13498) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13496 (quote ()))))) ((lambda (g$655$13530) (if (g$655$12195 g$655$13530) (begin (quote #f) ((lambda (g$655$13532) (if g$655$13532 (begin (quote #f) ((lambda (g$655$13534) (if g$655$13534 (begin (quote #f) (append g$655$13532 g$655$13534)) (quote #f))) ((lambda (g$655$13536) (if (g$655$12195 g$655$13536) (begin (quote #f) ((lambda (g$655$13538) (if g$655$13538 (begin (quote #f) ((lambda (g$655$13540) (if g$655$13540 (begin (quote #f) (append g$655$13538 g$655$13540)) (quote #f))) ((lambda (g$655$13542) (if (g$655$12195 g$655$13542) (begin (quote #f) ((lambda (g$655$13544) (if g$655$13544 (begin (quote #f) ((lambda (g$655$13546) (if g$655$13546 (begin (quote #f) (append g$655$13544 g$655$13546)) (quote #f))) ((letrec ((g$655$13548 (lambda (g$655$13550) (if (g$655$12195 g$655$13550) ((lambda (g$655$13552) (if g$655$13552 (begin (quote #f) ((lambda (g$655$13554) (if g$655$13554 (begin (quote #f) (map cons g$655$13552 g$655$13554)) (quote #f))) (g$655$13548 (g$655$12207 g$655$13550)))) (quote #f))) ((lambda (g$655$13556) (list g$655$13556)) (g$655$12203 g$655$13550))) (if (g$655$12199 g$655$13550) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$13548) (g$655$12207 g$655$13542)))) (quote #f))) ((lambda (g$655$13558) (list g$655$13558)) (g$655$12203 g$655$13542)))) (quote #f))) (g$655$12207 g$655$13536)))) (quote #f))) ((letrec ((g$655$13560 (lambda (g$655$13562) (if (g$655$12195 g$655$13562) ((lambda (g$655$13564) (if g$655$13564 (begin (quote #f) ((lambda (g$655$13566) (if g$655$13566 (begin (quote #f) (map cons g$655$13564 g$655$13566)) (quote #f))) (g$655$13560 (g$655$12207 g$655$13562)))) (quote #f))) ((lambda (g$655$13568) (if (g$655$12195 g$655$13568) (begin (quote #f) ((lambda (g$655$13570) (if g$655$13570 (begin (quote #f) ((lambda (g$655$13572) (if g$655$13572 (begin (quote #f) (append g$655$13570 g$655$13572)) (quote #f))) ((lambda (g$655$13574) (if (g$655$12195 g$655$13574) (begin (quote #f) ((lambda (g$655$13576) (if g$655$13576 (begin (quote #f) ((lambda (g$655$13578) (if g$655$13578 (begin (quote #f) (append g$655$13576 g$655$13578)) (quote #f))) ((lambda (g$655$13580) (if (equal? (g$655$12229 g$655$13580) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13574)))) (quote #f))) ((lambda (g$655$13582) (list g$655$13582)) (g$655$12203 g$655$13574)))) (quote #f))) (g$655$12207 g$655$13568)))) (quote #f))) ((lambda (g$655$13584) (list g$655$13584)) (g$655$12203 g$655$13568)))) (quote #f))) (g$655$12203 g$655$13562))) (if (g$655$12199 g$655$13562) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$655$13560) (g$655$12203 g$655$13536)))) (quote #f))) (g$655$12207 g$655$13530)))) (quote #f))) ((lambda (g$655$13586) (quote ())) (g$655$12203 g$655$13530)))) (quote #f))) g$655$13496))) g$655$13491))) (set! g$655$12649 (lambda (g$655$13590 g$655$13591 g$655$13592) (g$655$12647 g$655$13590 g$655$13591 g$655$13592 g$655$12089))) (set! g$655$12651 (lambda (g$655$13596 g$655$13597 g$655$13598) (g$655$12647 g$655$13596 g$655$13597 g$655$13598 g$655$12088))) (set! g$655$12653 (lambda (g$655$13602 g$655$13603 g$655$13604) ((lambda (g$655$13606) ((lambda (g$655$13608) (if (if g$655$13608 (begin (quote #f) (apply (lambda (g$655$13619) (g$655$12209 g$655$13619)) g$655$13608)) (quote #f)) (apply (lambda (g$655$13610) ((lambda (g$655$13612) ((lambda (g$655$13614) ((lambda (g$655$13616) ((lambda () (begin (if g$655$13612 (void) (error (quote expander) (quote #3#) (quote "unbound identifier") (g$655$12227 g$655$13602 (quote ())))) ((lambda (g$655$13617) (if (memv g$655$13617 (quote ($rtd))) (list (quote quote) (g$655$12239 g$655$13614)) (error (quote expander) (quote #3#) (quote "invalid type") (g$655$12227 g$655$13602 (quote ()))))) g$655$13616))))) (g$655$12237 g$655$13614))) (g$655$12233 g$655$13612 g$655$13603))) (g$655$12231 g$655$13610))) g$655$13608) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13606 (quote ()))))) ((lambda (g$655$13621) (if (g$655$12195 g$655$13621) (begin (quote #f) ((lambda (g$655$13623) (if g$655$13623 (begin (quote #f) ((lambda (g$655$13625) (if g$655$13625 (begin (quote #f) (append g$655$13623 g$655$13625)) (quote #f))) ((lambda (g$655$13627) (if (g$655$12195 g$655$13627) (begin (quote #f) ((lambda (g$655$13629) (if g$655$13629 (begin (quote #f) ((lambda (g$655$13631) (if g$655$13631 (begin (quote #f) (append g$655$13629 g$655$13631)) (quote #f))) ((lambda (g$655$13633) (if (equal? (g$655$12229 g$655$13633) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13627)))) (quote #f))) ((lambda (g$655$13635) (list g$655$13635)) (g$655$12203 g$655$13627)))) (quote #f))) (g$655$12207 g$655$13621)))) (quote #f))) ((lambda (g$655$13637) (quote ())) (g$655$12203 g$655$13621)))) (quote #f))) g$655$13606))) g$655$13602))) (set! g$655$12655 (lambda (g$655$13641 g$655$13642 g$655$13643) ((lambda (g$655$13645) ((lambda (g$655$13647) (if (if g$655$13647 (begin (quote #f) (apply (lambda (g$655$13657 g$655$13658 g$655$13659) (quote #t)) g$655$13647)) (quote #f)) (apply (lambda (g$655$13651 g$655$13652 g$655$13653) (list (quote if) (g$655$12741 g$655$13651 g$655$13642 g$655$13643) (g$655$12091 (quote #f) (g$655$12737 (cons g$655$13652 g$655$13653) g$655$13642 g$655$13643)) (g$655$12090))) g$655$13647) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13645 (quote ()))))) ((lambda (g$655$13661) (if (g$655$12195 g$655$13661) (begin (quote #f) ((lambda (g$655$13663) (if g$655$13663 (begin (quote #f) ((lambda (g$655$13665) (if g$655$13665 (begin (quote #f) (append g$655$13663 g$655$13665)) (quote #f))) ((lambda (g$655$13667) (if (g$655$12195 g$655$13667) (begin (quote #f) ((lambda (g$655$13669) (if g$655$13669 (begin (quote #f) ((lambda (g$655$13671) (if g$655$13671 (begin (quote #f) (append g$655$13669 g$655$13671)) (quote #f))) ((lambda (g$655$13673) (if (g$655$12195 g$655$13673) (begin (quote #f) ((lambda (g$655$13675) (if g$655$13675 (begin (quote #f) ((lambda (g$655$13677) (if g$655$13677 (begin (quote #f) (append g$655$13675 g$655$13677)) (quote #f))) ((letrec ((g$655$13679 (lambda (g$655$13681) (if (g$655$12195 g$655$13681) ((lambda (g$655$13683) (if g$655$13683 (begin (quote #f) ((lambda (g$655$13685) (if g$655$13685 (begin (quote #f) (map cons g$655$13683 g$655$13685)) (quote #f))) (g$655$13679 (g$655$12207 g$655$13681)))) (quote #f))) ((lambda (g$655$13687) (list g$655$13687)) (g$655$12203 g$655$13681))) (if (g$655$12199 g$655$13681) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$13679) (g$655$12207 g$655$13673)))) (quote #f))) ((lambda (g$655$13689) (list g$655$13689)) (g$655$12203 g$655$13673)))) (quote #f))) (g$655$12207 g$655$13667)))) (quote #f))) ((lambda (g$655$13691) (list g$655$13691)) (g$655$12203 g$655$13667)))) (quote #f))) (g$655$12207 g$655$13661)))) (quote #f))) ((lambda (g$655$13693) (quote ())) (g$655$12203 g$655$13661)))) (quote #f))) g$655$13645))) g$655$13641))) (set! g$655$12657 (lambda (g$655$13697 g$655$13698 g$655$13699) ((lambda (g$655$13701) ((lambda (g$655$13703) (if (if g$655$13703 (begin (quote #f) (apply (lambda (g$655$13713 g$655$13714 g$655$13715) (quote #t)) g$655$13703)) (quote #f)) (apply (lambda (g$655$13707 g$655$13708 g$655$13709) (list (quote if) (g$655$12741 g$655$13707 g$655$13698 g$655$13699) (g$655$12090) (g$655$12091 (quote #f) (g$655$12737 (cons g$655$13708 g$655$13709) g$655$13698 g$655$13699)))) g$655$13703) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13701 (quote ()))))) ((lambda (g$655$13717) (if (g$655$12195 g$655$13717) (begin (quote #f) ((lambda (g$655$13719) (if g$655$13719 (begin (quote #f) ((lambda (g$655$13721) (if g$655$13721 (begin (quote #f) (append g$655$13719 g$655$13721)) (quote #f))) ((lambda (g$655$13723) (if (g$655$12195 g$655$13723) (begin (quote #f) ((lambda (g$655$13725) (if g$655$13725 (begin (quote #f) ((lambda (g$655$13727) (if g$655$13727 (begin (quote #f) (append g$655$13725 g$655$13727)) (quote #f))) ((lambda (g$655$13729) (if (g$655$12195 g$655$13729) (begin (quote #f) ((lambda (g$655$13731) (if g$655$13731 (begin (quote #f) ((lambda (g$655$13733) (if g$655$13733 (begin (quote #f) (append g$655$13731 g$655$13733)) (quote #f))) ((letrec ((g$655$13735 (lambda (g$655$13737) (if (g$655$12195 g$655$13737) ((lambda (g$655$13739) (if g$655$13739 (begin (quote #f) ((lambda (g$655$13741) (if g$655$13741 (begin (quote #f) (map cons g$655$13739 g$655$13741)) (quote #f))) (g$655$13735 (g$655$12207 g$655$13737)))) (quote #f))) ((lambda (g$655$13743) (list g$655$13743)) (g$655$12203 g$655$13737))) (if (g$655$12199 g$655$13737) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$13735) (g$655$12207 g$655$13729)))) (quote #f))) ((lambda (g$655$13745) (list g$655$13745)) (g$655$12203 g$655$13729)))) (quote #f))) (g$655$12207 g$655$13723)))) (quote #f))) ((lambda (g$655$13747) (list g$655$13747)) (g$655$12203 g$655$13723)))) (quote #f))) (g$655$12207 g$655$13717)))) (quote #f))) ((lambda (g$655$13749) (quote ())) (g$655$12203 g$655$13717)))) (quote #f))) g$655$13701))) g$655$13697))) (set! g$655$12659 (lambda (g$655$13753 g$655$13754 g$655$13755) ((lambda (g$655$13757) ((lambda (g$655$13759) (if (if g$655$13759 (begin (quote #f) (apply (lambda (g$655$13807 g$655$13808 g$655$13809) (quote #t)) g$655$13759)) (quote #f)) (apply (lambda (g$655$13801 g$655$13802 g$655$13803) (list (quote if) (g$655$12741 g$655$13801 g$655$13754 g$655$13755) (g$655$12741 g$655$13802 g$655$13754 g$655$13755) (g$655$12741 g$655$13803 g$655$13754 g$655$13755))) g$655$13759) ((lambda (g$655$13761) ((lambda (g$655$13763) (if (if g$655$13763 (begin (quote #f) (apply (lambda (g$655$13770 g$655$13771) (quote #t)) g$655$13763)) (quote #f)) (apply (lambda (g$655$13766 g$655$13767) (list (quote if) (g$655$12741 g$655$13766 g$655$13754 g$655$13755) (g$655$12741 g$655$13767 g$655$13754 g$655$13755) (g$655$12090))) g$655$13763) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13761 (quote ()))))) ((lambda (g$655$13773) (if (g$655$12195 g$655$13773) (begin (quote #f) ((lambda (g$655$13775) (if g$655$13775 (begin (quote #f) ((lambda (g$655$13777) (if g$655$13777 (begin (quote #f) (append g$655$13775 g$655$13777)) (quote #f))) ((lambda (g$655$13779) (if (g$655$12195 g$655$13779) (begin (quote #f) ((lambda (g$655$13781) (if g$655$13781 (begin (quote #f) ((lambda (g$655$13783) (if g$655$13783 (begin (quote #f) (append g$655$13781 g$655$13783)) (quote #f))) ((lambda (g$655$13785) (if (g$655$12195 g$655$13785) (begin (quote #f) ((lambda (g$655$13787) (if g$655$13787 (begin (quote #f) ((lambda (g$655$13789) (if g$655$13789 (begin (quote #f) (append g$655$13787 g$655$13789)) (quote #f))) ((lambda (g$655$13791) (if (equal? (g$655$12229 g$655$13791) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13785)))) (quote #f))) ((lambda (g$655$13793) (list g$655$13793)) (g$655$12203 g$655$13785)))) (quote #f))) (g$655$12207 g$655$13779)))) (quote #f))) ((lambda (g$655$13795) (list g$655$13795)) (g$655$12203 g$655$13779)))) (quote #f))) (g$655$12207 g$655$13773)))) (quote #f))) ((lambda (g$655$13797) (quote ())) (g$655$12203 g$655$13773)))) (quote #f))) g$655$13761))) g$655$13757))) ((lambda (g$655$13811) (if (g$655$12195 g$655$13811) (begin (quote #f) ((lambda (g$655$13813) (if g$655$13813 (begin (quote #f) ((lambda (g$655$13815) (if g$655$13815 (begin (quote #f) (append g$655$13813 g$655$13815)) (quote #f))) ((lambda (g$655$13817) (if (g$655$12195 g$655$13817) (begin (quote #f) ((lambda (g$655$13819) (if g$655$13819 (begin (quote #f) ((lambda (g$655$13821) (if g$655$13821 (begin (quote #f) (append g$655$13819 g$655$13821)) (quote #f))) ((lambda (g$655$13823) (if (g$655$12195 g$655$13823) (begin (quote #f) ((lambda (g$655$13825) (if g$655$13825 (begin (quote #f) ((lambda (g$655$13827) (if g$655$13827 (begin (quote #f) (append g$655$13825 g$655$13827)) (quote #f))) ((lambda (g$655$13829) (if (g$655$12195 g$655$13829) (begin (quote #f) ((lambda (g$655$13831) (if g$655$13831 (begin (quote #f) ((lambda (g$655$13833) (if g$655$13833 (begin (quote #f) (append g$655$13831 g$655$13833)) (quote #f))) ((lambda (g$655$13835) (if (equal? (g$655$12229 g$655$13835) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13829)))) (quote #f))) ((lambda (g$655$13837) (list g$655$13837)) (g$655$12203 g$655$13829)))) (quote #f))) (g$655$12207 g$655$13823)))) (quote #f))) ((lambda (g$655$13839) (list g$655$13839)) (g$655$12203 g$655$13823)))) (quote #f))) (g$655$12207 g$655$13817)))) (quote #f))) ((lambda (g$655$13841) (list g$655$13841)) (g$655$12203 g$655$13817)))) (quote #f))) (g$655$12207 g$655$13811)))) (quote #f))) ((lambda (g$655$13843) (quote ())) (g$655$12203 g$655$13811)))) (quote #f))) g$655$13757))) g$655$13753))) (set! g$655$12661 (lambda (g$655$13847 g$655$13848 g$655$13849) ((lambda (g$655$13851 g$655$13853) (begin (set! g$655$13851 (lambda (g$655$14047 g$655$14048 g$655$14049) ((lambda (g$655$14051) ((lambda (g$655$14053) (if (if g$655$14053 (begin (quote #f) (apply (lambda (g$655$14073 g$655$14074 g$655$14075) (quote #t)) g$655$14053)) (quote #f)) (apply (lambda (g$655$14067 g$655$14068 g$655$14069) (list (quote if) (list (quote (primitive memv)) g$655$14047 (list (quote quote) (g$655$12229 g$655$14067))) (g$655$12091 (quote #f) (g$655$12737 (cons g$655$14068 g$655$14069) g$655$13848 g$655$13849)) g$655$14049)) g$655$14053) ((lambda (g$655$14055) ((lambda (g$655$14057) (if (if g$655$14057 (begin (quote #f) (apply (lambda (g$655$14061) (quote #t)) g$655$14057)) (quote #f)) (apply (lambda (g$655$14059) (error (quote expander) (quote #5="invalid syntax ~s") (g$655$12229 g$655$13847))) g$655$14057) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14055 (quote ()))))) ((lambda (g$655$14063) (list g$655$14063)) g$655$14055))) g$655$14051))) ((lambda (g$655$14077) (if (g$655$12195 g$655$14077) (begin (quote #f) ((lambda (g$655$14079) (if g$655$14079 (begin (quote #f) ((lambda (g$655$14081) (if g$655$14081 (begin (quote #f) (append g$655$14079 g$655$14081)) (quote #f))) ((lambda (g$655$14083) (if (g$655$12195 g$655$14083) (begin (quote #f) ((lambda (g$655$14085) (if g$655$14085 (begin (quote #f) ((lambda (g$655$14087) (if g$655$14087 (begin (quote #f) (append g$655$14085 g$655$14087)) (quote #f))) ((letrec ((g$655$14089 (lambda (g$655$14091) (if (g$655$12195 g$655$14091) ((lambda (g$655$14093) (if g$655$14093 (begin (quote #f) ((lambda (g$655$14095) (if g$655$14095 (begin (quote #f) (map cons g$655$14093 g$655$14095)) (quote #f))) (g$655$14089 (g$655$12207 g$655$14091)))) (quote #f))) ((lambda (g$655$14097) (list g$655$14097)) (g$655$12203 g$655$14091))) (if (g$655$12199 g$655$14091) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$14089) (g$655$12207 g$655$14083)))) (quote #f))) ((lambda (g$655$14099) (list g$655$14099)) (g$655$12203 g$655$14083)))) (quote #f))) (g$655$12207 g$655$14077)))) (quote #f))) ((letrec ((g$655$14101 (lambda (g$655$14103) (if (g$655$12195 g$655$14103) ((lambda (g$655$14105) (if g$655$14105 (begin (quote #f) ((lambda (g$655$14107) (if g$655$14107 (begin (quote #f) (map cons g$655$14105 g$655$14107)) (quote #f))) (g$655$14101 (g$655$12207 g$655$14103)))) (quote #f))) ((lambda (g$655$14109) (list g$655$14109)) (g$655$12203 g$655$14103))) (if (g$655$12199 g$655$14103) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$655$14101) (g$655$12203 g$655$14077)))) (quote #f))) g$655$14051))) g$655$14048))) (set! g$655$13853 (lambda (g$655$13940 g$655$13941) ((lambda (g$655$13943) ((lambda (g$655$13945) (if (if g$655$13945 (begin (quote #f) (apply (lambda (g$655$14007 g$655$14008 g$655$14009) (quote #t)) g$655$13945)) (quote #f)) (apply (lambda (g$655$14001 g$655$14002 g$655$14003) (g$655$13851 g$655$13940 g$655$13941 (g$655$12090))) g$655$13945) ((lambda (g$655$13947) ((lambda (g$655$13949) (if (if g$655$13949 (begin (quote #f) (apply (lambda (g$655$13969 g$655$13970 g$655$13971) (quote #t)) g$655$13949)) (quote #f)) (apply (lambda (g$655$13963 g$655$13964 g$655$13965) (if (if (g$655$12209 g$655$13963) (begin (quote #f) (g$655$12217 g$655$13963 (g$655$12639 (quote else)))) (quote #f)) (g$655$12091 (quote #f) (g$655$12737 (cons g$655$13964 g$655$13965) g$655$13848 g$655$13849)) (error (quote expander) (quote #5#) (g$655$12229 g$655$13847)))) g$655$13949) ((lambda (g$655$13951) ((lambda (g$655$13953) (if (if g$655$13953 (begin (quote #f) (apply (lambda (g$655$13957) (quote #t)) g$655$13953)) (quote #f)) (apply (lambda (g$655$13955) (error (quote expander) (quote #5#) (g$655$12229 g$655$13847))) g$655$13953) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13951 (quote ()))))) ((lambda (g$655$13959) (list g$655$13959)) g$655$13951))) g$655$13947))) ((lambda (g$655$13973) (if (g$655$12195 g$655$13973) (begin (quote #f) ((lambda (g$655$13975) (if g$655$13975 (begin (quote #f) ((lambda (g$655$13977) (if g$655$13977 (begin (quote #f) (append g$655$13975 g$655$13977)) (quote #f))) ((lambda (g$655$13979) (if (g$655$12195 g$655$13979) (begin (quote #f) ((lambda (g$655$13981) (if g$655$13981 (begin (quote #f) ((lambda (g$655$13983) (if g$655$13983 (begin (quote #f) (append g$655$13981 g$655$13983)) (quote #f))) ((letrec ((g$655$13985 (lambda (g$655$13987) (if (g$655$12195 g$655$13987) ((lambda (g$655$13989) (if g$655$13989 (begin (quote #f) ((lambda (g$655$13991) (if g$655$13991 (begin (quote #f) (map cons g$655$13989 g$655$13991)) (quote #f))) (g$655$13985 (g$655$12207 g$655$13987)))) (quote #f))) ((lambda (g$655$13993) (list g$655$13993)) (g$655$12203 g$655$13987))) (if (g$655$12199 g$655$13987) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$13985) (g$655$12207 g$655$13979)))) (quote #f))) ((lambda (g$655$13995) (list g$655$13995)) (g$655$12203 g$655$13979)))) (quote #f))) (g$655$12207 g$655$13973)))) (quote #f))) ((lambda (g$655$13997) (list g$655$13997)) (g$655$12203 g$655$13973)))) (quote #f))) g$655$13947))) g$655$13943))) ((lambda (g$655$14011) (if (g$655$12195 g$655$14011) (begin (quote #f) ((lambda (g$655$14013) (if g$655$14013 (begin (quote #f) ((lambda (g$655$14015) (if g$655$14015 (begin (quote #f) (append g$655$14013 g$655$14015)) (quote #f))) ((lambda (g$655$14017) (if (g$655$12195 g$655$14017) (begin (quote #f) ((lambda (g$655$14019) (if g$655$14019 (begin (quote #f) ((lambda (g$655$14021) (if g$655$14021 (begin (quote #f) (append g$655$14019 g$655$14021)) (quote #f))) ((letrec ((g$655$14023 (lambda (g$655$14025) (if (g$655$12195 g$655$14025) ((lambda (g$655$14027) (if g$655$14027 (begin (quote #f) ((lambda (g$655$14029) (if g$655$14029 (begin (quote #f) (map cons g$655$14027 g$655$14029)) (quote #f))) (g$655$14023 (g$655$12207 g$655$14025)))) (quote #f))) ((lambda (g$655$14031) (list g$655$14031)) (g$655$12203 g$655$14025))) (if (g$655$12199 g$655$14025) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$14023) (g$655$12207 g$655$14017)))) (quote #f))) ((lambda (g$655$14033) (list g$655$14033)) (g$655$12203 g$655$14017)))) (quote #f))) (g$655$12207 g$655$14011)))) (quote #f))) ((letrec ((g$655$14035 (lambda (g$655$14037) (if (g$655$12195 g$655$14037) ((lambda (g$655$14039) (if g$655$14039 (begin (quote #f) ((lambda (g$655$14041) (if g$655$14041 (begin (quote #f) (map cons g$655$14039 g$655$14041)) (quote #f))) (g$655$14035 (g$655$12207 g$655$14037)))) (quote #f))) ((lambda (g$655$14043) (list g$655$14043)) (g$655$12203 g$655$14037))) (if (g$655$12199 g$655$14037) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$655$14035) (g$655$12203 g$655$14011)))) (quote #f))) g$655$13943))) g$655$13941))) ((lambda (g$655$13855) ((lambda (g$655$13857) (if (if g$655$13857 (begin (quote #f) (apply (lambda (g$655$13919) (quote #t)) g$655$13857)) (quote #f)) (apply (lambda (g$655$13917) (g$655$12091 (quote #f) (list (g$655$12741 g$655$13917 g$655$13848 g$655$13849) (g$655$12090)))) g$655$13857) ((lambda (g$655$13859) ((lambda (g$655$13861) (if (if g$655$13861 (begin (quote #f) (apply (lambda (g$655$13879 g$655$13880 g$655$13881) (quote #t)) g$655$13861)) (quote #f)) (apply (lambda (g$655$13865 g$655$13866 g$655$13867) ((lambda (g$655$13869) (g$655$12095 (quote #f) (list g$655$13869) (list (g$655$12741 g$655$13865 g$655$13848 g$655$13849)) (letrec ((g$655$13871 (lambda (g$655$13874 g$655$13875) (if (null? g$655$13875) (g$655$13853 g$655$13869 g$655$13874) (g$655$13851 g$655$13869 g$655$13874 (g$655$13871 (car g$655$13875) (cdr g$655$13875))))))) (g$655$13871 g$655$13866 g$655$13867)))) (g$655$12119 (quote t)))) g$655$13861) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$13859 (quote ()))))) ((lambda (g$655$13883) (if (g$655$12195 g$655$13883) (begin (quote #f) ((lambda (g$655$13885) (if g$655$13885 (begin (quote #f) ((lambda (g$655$13887) (if g$655$13887 (begin (quote #f) (append g$655$13885 g$655$13887)) (quote #f))) ((lambda (g$655$13889) (if (g$655$12195 g$655$13889) (begin (quote #f) ((lambda (g$655$13891) (if g$655$13891 (begin (quote #f) ((lambda (g$655$13893) (if g$655$13893 (begin (quote #f) (append g$655$13891 g$655$13893)) (quote #f))) ((lambda (g$655$13895) (if (g$655$12195 g$655$13895) (begin (quote #f) ((lambda (g$655$13897) (if g$655$13897 (begin (quote #f) ((lambda (g$655$13899) (if g$655$13899 (begin (quote #f) (append g$655$13897 g$655$13899)) (quote #f))) ((letrec ((g$655$13901 (lambda (g$655$13903) (if (g$655$12195 g$655$13903) ((lambda (g$655$13905) (if g$655$13905 (begin (quote #f) ((lambda (g$655$13907) (if g$655$13907 (begin (quote #f) (map cons g$655$13905 g$655$13907)) (quote #f))) (g$655$13901 (g$655$12207 g$655$13903)))) (quote #f))) ((lambda (g$655$13909) (list g$655$13909)) (g$655$12203 g$655$13903))) (if (g$655$12199 g$655$13903) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$655$13901) (g$655$12207 g$655$13895)))) (quote #f))) ((lambda (g$655$13911) (list g$655$13911)) (g$655$12203 g$655$13895)))) (quote #f))) (g$655$12207 g$655$13889)))) (quote #f))) ((lambda (g$655$13913) (list g$655$13913)) (g$655$12203 g$655$13889)))) (quote #f))) (g$655$12207 g$655$13883)))) (quote #f))) ((lambda (g$655$13915) (quote ())) (g$655$12203 g$655$13883)))) (quote #f))) g$655$13859))) g$655$13855))) ((lambda (g$655$13921) (if (g$655$12195 g$655$13921) (begin (quote #f) ((lambda (g$655$13923) (if g$655$13923 (begin (quote #f) ((lambda (g$655$13925) (if g$655$13925 (begin (quote #f) (append g$655$13923 g$655$13925)) (quote #f))) ((lambda (g$655$13927) (if (g$655$12195 g$655$13927) (begin (quote #f) ((lambda (g$655$13929) (if g$655$13929 (begin (quote #f) ((lambda (g$655$13931) (if g$655$13931 (begin (quote #f) (append g$655$13929 g$655$13931)) (quote #f))) ((lambda (g$655$13933) (if (equal? (g$655$12229 g$655$13933) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$13927)))) (quote #f))) ((lambda (g$655$13935) (list g$655$13935)) (g$655$12203 g$655$13927)))) (quote #f))) (g$655$12207 g$655$13921)))) (quote #f))) ((lambda (g$655$13937) (quote ())) (g$655$12203 g$655$13921)))) (quote #f))) g$655$13855))) g$655$13847))) (quote #f) (quote #f)))) (set! g$655$12663 (lambda (g$655$14113 g$655$14114 g$655$14115) ((lambda (g$655$14117) ((lambda (g$655$14119) (if (if g$655$14119 (begin (quote #f) (apply (lambda (g$655$14123) (quote #t)) g$655$14119)) (quote #f)) (apply (lambda (g$655$14121) (list (quote quote) (g$655$12229 g$655$14121))) g$655$14119) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14117 (quote ()))))) ((lambda (g$655$14125) (if (g$655$12195 g$655$14125) (begin (quote #f) ((lambda (g$655$14127) (if g$655$14127 (begin (quote #f) ((lambda (g$655$14129) (if g$655$14129 (begin (quote #f) (append g$655$14127 g$655$14129)) (quote #f))) ((lambda (g$655$14131) (if (g$655$12195 g$655$14131) (begin (quote #f) ((lambda (g$655$14133) (if g$655$14133 (begin (quote #f) ((lambda (g$655$14135) (if g$655$14135 (begin (quote #f) (append g$655$14133 g$655$14135)) (quote #f))) ((lambda (g$655$14137) (if (equal? (g$655$12229 g$655$14137) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14131)))) (quote #f))) ((lambda (g$655$14139) (list g$655$14139)) (g$655$12203 g$655$14131)))) (quote #f))) (g$655$12207 g$655$14125)))) (quote #f))) ((lambda (g$655$14141) (quote ())) (g$655$12203 g$655$14125)))) (quote #f))) g$655$14117))) g$655$14113))) (set! g$655$12665 (lambda (g$655$14145 g$655$14146 g$655$14147) ((lambda (g$655$14149) ((lambda (g$655$14151) (if (if g$655$14151 (begin (quote #f) (apply (lambda (g$655$14165 g$655$14166 g$655$14167) (quote #t)) g$655$14151)) (quote #f)) (apply (lambda (g$655$14155 g$655$14156 g$655$14157) (call-with-values (lambda () (g$655$12747 g$655$14155 (map cons g$655$14156 g$655$14157) g$655$14146 g$655$14147)) (lambda (g$655$14160 g$655$14161) (g$655$12096 (quote #f) g$655$14160 g$655$14161)))) g$655$14151) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14149 (quote ()))))) ((lambda (g$655$14169) (if (g$655$12195 g$655$14169) (begin (quote #f) ((lambda (g$655$14171) (if g$655$14171 (begin (quote #f) ((lambda (g$655$14173) (if g$655$14173 (begin (quote #f) (append g$655$14171 g$655$14173)) (quote #f))) ((letrec ((g$655$14175 (lambda (g$655$14177) (if (g$655$12195 g$655$14177) ((lambda (g$655$14179) (if g$655$14179 (begin (quote #f) ((lambda (g$655$14181) (if g$655$14181 (begin (quote #f) (map cons g$655$14179 g$655$14181)) (quote #f))) (g$655$14175 (g$655$12207 g$655$14177)))) (quote #f))) ((lambda (g$655$14183) (if (g$655$12195 g$655$14183) (begin (quote #f) ((lambda (g$655$14185) (if g$655$14185 (begin (quote #f) ((lambda (g$655$14187) (if g$655$14187 (begin (quote #f) (append g$655$14185 g$655$14187)) (quote #f))) ((lambda (g$655$14189) (if (g$655$12195 g$655$14189) (begin (quote #f) ((lambda (g$655$14191) (if g$655$14191 (begin (quote #f) ((lambda (g$655$14193) (if g$655$14193 (begin (quote #f) (append g$655$14191 g$655$14193)) (quote #f))) ((letrec ((g$655$14195 (lambda (g$655$14197) (if (g$655$12195 g$655$14197) ((lambda (g$655$14199) (if g$655$14199 (begin (quote #f) ((lambda (g$655$14201) (if g$655$14201 (begin (quote #f) (map cons g$655$14199 g$655$14201)) (quote #f))) (g$655$14195 (g$655$12207 g$655$14197)))) (quote #f))) ((lambda (g$655$14203) (list g$655$14203)) (g$655$12203 g$655$14197))) (if (g$655$12199 g$655$14197) (list (begin (quote b**) (quote ()))) (quote #f)))))) g$655$14195) (g$655$12207 g$655$14189)))) (quote #f))) ((lambda (g$655$14205) (list g$655$14205)) (g$655$12203 g$655$14189)))) (quote #f))) (g$655$12207 g$655$14183)))) (quote #f))) ((lambda (g$655$14207) (list g$655$14207)) (g$655$12203 g$655$14183)))) (quote #f))) (g$655$12203 g$655$14177))) (if (g$655$12199 g$655$14177) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) g$655$14175) (g$655$12207 g$655$14169)))) (quote #f))) ((lambda (g$655$14209) (quote ())) (g$655$12203 g$655$14169)))) (quote #f))) g$655$14149))) g$655$14145))) (set! g$655$12667 (lambda (g$655$14213 g$655$14214 g$655$14215) ((lambda (g$655$14217) ((lambda (g$655$14219) (if (if g$655$14219 (begin (quote #f) (apply (lambda (g$655$14233 g$655$14234 g$655$14235) (quote #t)) g$655$14219)) (quote #f)) (apply (lambda (g$655$14223 g$655$14224 g$655$14225) (call-with-values (lambda () (g$655$12745 g$655$14223 (cons g$655$14224 g$655$14225) g$655$14214 g$655$14215)) (lambda (g$655$14228 g$655$14229) (g$655$12097 (quote #f) g$655$14228 g$655$14229)))) g$655$14219) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14217 (quote ()))))) ((lambda (g$655$14237) (if (g$655$12195 g$655$14237) (begin (quote #f) ((lambda (g$655$14239) (if g$655$14239 (begin (quote #f) ((lambda (g$655$14241) (if g$655$14241 (begin (quote #f) (append g$655$14239 g$655$14241)) (quote #f))) ((lambda (g$655$14243) (if (g$655$12195 g$655$14243) (begin (quote #f) ((lambda (g$655$14245) (if g$655$14245 (begin (quote #f) ((lambda (g$655$14247) (if g$655$14247 (begin (quote #f) (append g$655$14245 g$655$14247)) (quote #f))) ((lambda (g$655$14249) (if (g$655$12195 g$655$14249) (begin (quote #f) ((lambda (g$655$14251) (if g$655$14251 (begin (quote #f) ((lambda (g$655$14253) (if g$655$14253 (begin (quote #f) (append g$655$14251 g$655$14253)) (quote #f))) ((letrec ((g$655$14255 (lambda (g$655$14257) (if (g$655$12195 g$655$14257) ((lambda (g$655$14259) (if g$655$14259 (begin (quote #f) ((lambda (g$655$14261) (if g$655$14261 (begin (quote #f) (map cons g$655$14259 g$655$14261)) (quote #f))) (g$655$14255 (g$655$12207 g$655$14257)))) (quote #f))) ((lambda (g$655$14263) (list g$655$14263)) (g$655$12203 g$655$14257))) (if (g$655$12199 g$655$14257) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14255) (g$655$12207 g$655$14249)))) (quote #f))) ((lambda (g$655$14265) (list g$655$14265)) (g$655$12203 g$655$14249)))) (quote #f))) (g$655$12207 g$655$14243)))) (quote #f))) ((lambda (g$655$14267) (list g$655$14267)) (g$655$12203 g$655$14243)))) (quote #f))) (g$655$12207 g$655$14237)))) (quote #f))) ((lambda (g$655$14269) (quote ())) (g$655$12203 g$655$14237)))) (quote #f))) g$655$14217))) g$655$14213))) (set! g$655$12669 (lambda (g$655$14271) (g$655$12185 (letrec ((g$655$14273 (lambda (g$655$14275) (if (g$655$12161 g$655$14275) g$655$14275 (if (pair? g$655$14275) (cons (g$655$14273 (car g$655$14275)) (g$655$14273 (cdr g$655$14275))) (if (symbol? g$655$14275) (g$655$12639 g$655$14275) (if (vector? g$655$14275) (list->vector (map g$655$14273 (vector->list g$655$14275))) g$655$14275))))))) (g$655$14273 g$655$14271)) (quote ()) (quote ())))) (set! g$655$12671 (lambda (g$655$14277) ((lambda (g$655$14279) ((lambda (g$655$14281) (if (if g$655$14281 (begin (quote #f) (apply (lambda (g$655$14294 g$655$14295 g$655$14296 g$655$14297) (quote #t)) g$655$14281)) (quote #f)) (apply (lambda (g$655$14286 g$655$14287 g$655$14288 g$655$14289) (g$655$12669 (list (quote syntax-case) (cons (quote list) g$655$14287) (quote ()) (list g$655$14286 (cons (quote begin) (cons g$655$14288 g$655$14289)))))) g$655$14281) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14279 (quote ()))))) ((lambda (g$655$14299) (if (g$655$12195 g$655$14299) (begin (quote #f) ((lambda (g$655$14301) (if g$655$14301 (begin (quote #f) ((lambda (g$655$14303) (if g$655$14303 (begin (quote #f) (append g$655$14301 g$655$14303)) (quote #f))) ((lambda (g$655$14305) (if (g$655$12195 g$655$14305) (begin (quote #f) ((lambda (g$655$14307) (if g$655$14307 (begin (quote #f) ((lambda (g$655$14309) (if g$655$14309 (begin (quote #f) (append g$655$14307 g$655$14309)) (quote #f))) ((lambda (g$655$14311) (if (g$655$12195 g$655$14311) (begin (quote #f) ((lambda (g$655$14313) (if g$655$14313 (begin (quote #f) ((lambda (g$655$14315) (if g$655$14315 (begin (quote #f) (append g$655$14313 g$655$14315)) (quote #f))) ((letrec ((g$655$14317 (lambda (g$655$14319) (if (g$655$12195 g$655$14319) ((lambda (g$655$14321) (if g$655$14321 (begin (quote #f) ((lambda (g$655$14323) (if g$655$14323 (begin (quote #f) (map cons g$655$14321 g$655$14323)) (quote #f))) (g$655$14317 (g$655$12207 g$655$14319)))) (quote #f))) ((lambda (g$655$14325) (list g$655$14325)) (g$655$12203 g$655$14319))) (if (g$655$12199 g$655$14319) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14317) (g$655$12207 g$655$14311)))) (quote #f))) ((lambda (g$655$14327) (list g$655$14327)) (g$655$12203 g$655$14311)))) (quote #f))) (g$655$12207 g$655$14305)))) (quote #f))) ((letrec ((g$655$14329 (lambda (g$655$14331) (if (g$655$12195 g$655$14331) ((lambda (g$655$14333) (if g$655$14333 (begin (quote #f) ((lambda (g$655$14335) (if g$655$14335 (begin (quote #f) (map cons g$655$14333 g$655$14335)) (quote #f))) (g$655$14329 (g$655$12207 g$655$14331)))) (quote #f))) ((lambda (g$655$14337) (if (g$655$12195 g$655$14337) (begin (quote #f) ((lambda (g$655$14339) (if g$655$14339 (begin (quote #f) ((lambda (g$655$14341) (if g$655$14341 (begin (quote #f) (append g$655$14339 g$655$14341)) (quote #f))) ((lambda (g$655$14343) (if (g$655$12195 g$655$14343) (begin (quote #f) ((lambda (g$655$14345) (if g$655$14345 (begin (quote #f) ((lambda (g$655$14347) (if g$655$14347 (begin (quote #f) (append g$655$14345 g$655$14347)) (quote #f))) ((lambda (g$655$14349) (if (equal? (g$655$12229 g$655$14349) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14343)))) (quote #f))) ((lambda (g$655$14351) (list g$655$14351)) (g$655$12203 g$655$14343)))) (quote #f))) (g$655$12207 g$655$14337)))) (quote #f))) ((lambda (g$655$14353) (list g$655$14353)) (g$655$12203 g$655$14337)))) (quote #f))) (g$655$12203 g$655$14331))) (if (g$655$12199 g$655$14331) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) g$655$14329) (g$655$12203 g$655$14305)))) (quote #f))) (g$655$12207 g$655$14299)))) (quote #f))) ((lambda (g$655$14355) (quote ())) (g$655$12203 g$655$14299)))) (quote #f))) g$655$14279))) g$655$14277))) (set! g$655$12673 (lambda (g$655$14357) ((lambda (g$655$14359) ((lambda (g$655$14361) (if (if g$655$14361 (begin (quote #f) (apply (lambda (g$655$14464 g$655$14465 g$655$14466 g$655$14467) (quote #t)) g$655$14361)) (quote #f)) (apply (lambda (g$655$14456 g$655$14457 g$655$14458 g$655$14459) (if (g$655$12219 g$655$14456) (g$655$12669 (cons (cons (quote lambda) (cons g$655$14456 (cons g$655$14458 g$655$14459))) g$655$14457)) (error (quote expander) (quote #3#) (quote "invalid bindings") (g$655$12227 g$655$14357 (quote ()))))) g$655$14361) ((lambda (g$655$14363) ((lambda (g$655$14365) (if (if g$655$14365 (begin (quote #f) (apply (lambda (g$655$14381 g$655$14382 g$655$14383 g$655$14384 g$655$14385) (g$655$12209 g$655$14381)) g$655$14365)) (quote #f)) (apply (lambda (g$655$14371 g$655$14372 g$655$14373 g$655$14374 g$655$14375) (if (g$655$12219 g$655$14372) (g$655$12669 (list (quote letrec) (list (list g$655$14371 (cons (quote lambda) (cons g$655$14372 (cons g$655$14374 g$655$14375))))) (cons g$655$14371 g$655$14373))) (error (quote expander) (quote #3#) (quote "invalid syntax") (g$655$12227 g$655$14357 (quote ()))))) g$655$14365) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14363 (quote ()))))) ((lambda (g$655$14387) (if (g$655$12195 g$655$14387) (begin (quote #f) ((lambda (g$655$14389) (if g$655$14389 (begin (quote #f) ((lambda (g$655$14391) (if g$655$14391 (begin (quote #f) (append g$655$14389 g$655$14391)) (quote #f))) ((lambda (g$655$14393) (if (g$655$12195 g$655$14393) (begin (quote #f) ((lambda (g$655$14395) (if g$655$14395 (begin (quote #f) ((lambda (g$655$14397) (if g$655$14397 (begin (quote #f) (append g$655$14395 g$655$14397)) (quote #f))) ((lambda (g$655$14399) (if (g$655$12195 g$655$14399) (begin (quote #f) ((lambda (g$655$14401) (if g$655$14401 (begin (quote #f) ((lambda (g$655$14403) (if g$655$14403 (begin (quote #f) (append g$655$14401 g$655$14403)) (quote #f))) ((lambda (g$655$14405) (if (g$655$12195 g$655$14405) (begin (quote #f) ((lambda (g$655$14407) (if g$655$14407 (begin (quote #f) ((lambda (g$655$14409) (if g$655$14409 (begin (quote #f) (append g$655$14407 g$655$14409)) (quote #f))) ((letrec ((g$655$14411 (lambda (g$655$14413) (if (g$655$12195 g$655$14413) ((lambda (g$655$14415) (if g$655$14415 (begin (quote #f) ((lambda (g$655$14417) (if g$655$14417 (begin (quote #f) (map cons g$655$14415 g$655$14417)) (quote #f))) (g$655$14411 (g$655$12207 g$655$14413)))) (quote #f))) ((lambda (g$655$14419) (list g$655$14419)) (g$655$12203 g$655$14413))) (if (g$655$12199 g$655$14413) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14411) (g$655$12207 g$655$14405)))) (quote #f))) ((lambda (g$655$14421) (list g$655$14421)) (g$655$12203 g$655$14405)))) (quote #f))) (g$655$12207 g$655$14399)))) (quote #f))) ((letrec ((g$655$14423 (lambda (g$655$14425) (if (g$655$12195 g$655$14425) ((lambda (g$655$14427) (if g$655$14427 (begin (quote #f) ((lambda (g$655$14429) (if g$655$14429 (begin (quote #f) (map cons g$655$14427 g$655$14429)) (quote #f))) (g$655$14423 (g$655$12207 g$655$14425)))) (quote #f))) ((lambda (g$655$14431) (if (g$655$12195 g$655$14431) (begin (quote #f) ((lambda (g$655$14433) (if g$655$14433 (begin (quote #f) ((lambda (g$655$14435) (if g$655$14435 (begin (quote #f) (append g$655$14433 g$655$14435)) (quote #f))) ((lambda (g$655$14437) (if (g$655$12195 g$655$14437) (begin (quote #f) ((lambda (g$655$14439) (if g$655$14439 (begin (quote #f) ((lambda (g$655$14441) (if g$655$14441 (begin (quote #f) (append g$655$14439 g$655$14441)) (quote #f))) ((lambda (g$655$14443) (if (equal? (g$655$12229 g$655$14443) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14437)))) (quote #f))) ((lambda (g$655$14445) (list g$655$14445)) (g$655$12203 g$655$14437)))) (quote #f))) (g$655$12207 g$655$14431)))) (quote #f))) ((lambda (g$655$14447) (list g$655$14447)) (g$655$12203 g$655$14431)))) (quote #f))) (g$655$12203 g$655$14425))) (if (g$655$12199 g$655$14425) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$655$14423) (g$655$12203 g$655$14399)))) (quote #f))) (g$655$12207 g$655$14393)))) (quote #f))) ((lambda (g$655$14449) (list g$655$14449)) (g$655$12203 g$655$14393)))) (quote #f))) (g$655$12207 g$655$14387)))) (quote #f))) ((lambda (g$655$14451) (quote ())) (g$655$12203 g$655$14387)))) (quote #f))) g$655$14363))) g$655$14359))) ((lambda (g$655$14469) (if (g$655$12195 g$655$14469) (begin (quote #f) ((lambda (g$655$14471) (if g$655$14471 (begin (quote #f) ((lambda (g$655$14473) (if g$655$14473 (begin (quote #f) (append g$655$14471 g$655$14473)) (quote #f))) ((lambda (g$655$14475) (if (g$655$12195 g$655$14475) (begin (quote #f) ((lambda (g$655$14477) (if g$655$14477 (begin (quote #f) ((lambda (g$655$14479) (if g$655$14479 (begin (quote #f) (append g$655$14477 g$655$14479)) (quote #f))) ((lambda (g$655$14481) (if (g$655$12195 g$655$14481) (begin (quote #f) ((lambda (g$655$14483) (if g$655$14483 (begin (quote #f) ((lambda (g$655$14485) (if g$655$14485 (begin (quote #f) (append g$655$14483 g$655$14485)) (quote #f))) ((letrec ((g$655$14487 (lambda (g$655$14489) (if (g$655$12195 g$655$14489) ((lambda (g$655$14491) (if g$655$14491 (begin (quote #f) ((lambda (g$655$14493) (if g$655$14493 (begin (quote #f) (map cons g$655$14491 g$655$14493)) (quote #f))) (g$655$14487 (g$655$12207 g$655$14489)))) (quote #f))) ((lambda (g$655$14495) (list g$655$14495)) (g$655$12203 g$655$14489))) (if (g$655$12199 g$655$14489) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14487) (g$655$12207 g$655$14481)))) (quote #f))) ((lambda (g$655$14497) (list g$655$14497)) (g$655$12203 g$655$14481)))) (quote #f))) (g$655$12207 g$655$14475)))) (quote #f))) ((letrec ((g$655$14499 (lambda (g$655$14501) (if (g$655$12195 g$655$14501) ((lambda (g$655$14503) (if g$655$14503 (begin (quote #f) ((lambda (g$655$14505) (if g$655$14505 (begin (quote #f) (map cons g$655$14503 g$655$14505)) (quote #f))) (g$655$14499 (g$655$12207 g$655$14501)))) (quote #f))) ((lambda (g$655$14507) (if (g$655$12195 g$655$14507) (begin (quote #f) ((lambda (g$655$14509) (if g$655$14509 (begin (quote #f) ((lambda (g$655$14511) (if g$655$14511 (begin (quote #f) (append g$655$14509 g$655$14511)) (quote #f))) ((lambda (g$655$14513) (if (g$655$12195 g$655$14513) (begin (quote #f) ((lambda (g$655$14515) (if g$655$14515 (begin (quote #f) ((lambda (g$655$14517) (if g$655$14517 (begin (quote #f) (append g$655$14515 g$655$14517)) (quote #f))) ((lambda (g$655$14519) (if (equal? (g$655$12229 g$655$14519) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14513)))) (quote #f))) ((lambda (g$655$14521) (list g$655$14521)) (g$655$12203 g$655$14513)))) (quote #f))) (g$655$12207 g$655$14507)))) (quote #f))) ((lambda (g$655$14523) (list g$655$14523)) (g$655$12203 g$655$14507)))) (quote #f))) (g$655$12203 g$655$14501))) (if (g$655$12199 g$655$14501) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$655$14499) (g$655$12203 g$655$14475)))) (quote #f))) (g$655$12207 g$655$14469)))) (quote #f))) ((lambda (g$655$14525) (quote ())) (g$655$12203 g$655$14469)))) (quote #f))) g$655$14359))) g$655$14357))) (set! g$655$12675 (lambda (g$655$14527) ((lambda (g$655$14529) ((lambda (g$655$14531) (if (if g$655$14531 (begin (quote #f) (apply (lambda (g$655$14626 g$655$14627 g$655$14628 g$655$14629) (quote #t)) g$655$14531)) (quote #f)) (apply (lambda (g$655$14618 g$655$14619 g$655$14620 g$655$14621) (if (g$655$12219 g$655$14619) (g$655$12669 (list (quote make-traced-procedure) (list (quote quote) g$655$14618) (cons (quote lambda) (cons g$655$14619 (cons g$655$14620 g$655$14621))))) (error (quote expander) (quote #3#) (quote "invalid formals") (g$655$12227 g$655$14527 (quote ()))))) g$655$14531) ((lambda (g$655$14533) ((lambda (g$655$14535) (if (if g$655$14535 (begin (quote #f) (apply (lambda (g$655$14551 g$655$14552 g$655$14553 g$655$14554 g$655$14555) (quote #t)) g$655$14535)) (quote #f)) (apply (lambda (g$655$14541 g$655$14542 g$655$14543 g$655$14544 g$655$14545) (if (g$655$12219 (cons g$655$14543 g$655$14542)) (g$655$12669 (list (quote make-traced-procedure) (list (quote quote) g$655$14541) (cons (quote lambda) (cons (append g$655$14542 g$655$14543) (cons g$655$14544 g$655$14545))))) (error (quote expander) (quote #3#) (quote "invalid formals") (g$655$12227 g$655$14527 (quote ()))))) g$655$14535) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14533 (quote ()))))) ((lambda (g$655$14557) (if (g$655$12195 g$655$14557) (begin (quote #f) ((lambda (g$655$14559) (if g$655$14559 (begin (quote #f) ((lambda (g$655$14561) (if g$655$14561 (begin (quote #f) (append g$655$14559 g$655$14561)) (quote #f))) ((lambda (g$655$14563) (if (g$655$12195 g$655$14563) (begin (quote #f) ((lambda (g$655$14565) (if g$655$14565 (begin (quote #f) ((lambda (g$655$14567) (if g$655$14567 (begin (quote #f) (append g$655$14565 g$655$14567)) (quote #f))) ((lambda (g$655$14569) (if (g$655$12195 g$655$14569) (begin (quote #f) ((lambda (g$655$14571) (if g$655$14571 (begin (quote #f) ((lambda (g$655$14573) (if g$655$14573 (begin (quote #f) (append g$655$14571 g$655$14573)) (quote #f))) ((lambda (g$655$14575) (if (g$655$12195 g$655$14575) (begin (quote #f) ((lambda (g$655$14577) (if g$655$14577 (begin (quote #f) ((lambda (g$655$14579) (if g$655$14579 (begin (quote #f) (append g$655$14577 g$655$14579)) (quote #f))) ((letrec ((g$655$14581 (lambda (g$655$14583) (if (g$655$12195 g$655$14583) ((lambda (g$655$14585) (if g$655$14585 (begin (quote #f) ((lambda (g$655$14587) (if g$655$14587 (begin (quote #f) (map cons g$655$14585 g$655$14587)) (quote #f))) (g$655$14581 (g$655$12207 g$655$14583)))) (quote #f))) ((lambda (g$655$14589) (list g$655$14589)) (g$655$12203 g$655$14583))) (if (g$655$12199 g$655$14583) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14581) (g$655$12207 g$655$14575)))) (quote #f))) ((lambda (g$655$14591) (list g$655$14591)) (g$655$12203 g$655$14575)))) (quote #f))) (g$655$12207 g$655$14569)))) (quote #f))) ((letrec ((g$655$14593 (lambda (g$655$14595) (if (g$655$12195 g$655$14595) ((lambda (g$655$14601) (if g$655$14601 (begin (quote #f) ((lambda (g$655$14603) (if g$655$14603 (begin (quote #f) (cons (map cons g$655$14601 (car g$655$14603)) (cdr g$655$14603))) (quote #f))) (g$655$14593 (g$655$12207 g$655$14595)))) (quote #f))) ((lambda (g$655$14605) (list g$655$14605)) (g$655$12203 g$655$14595))) ((lambda (g$655$14597) (if g$655$14597 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$655$14597)) (quote #f))) ((lambda (g$655$14599) (list g$655$14599)) g$655$14595)))))) (lambda (g$655$14607) ((lambda (g$655$14609) (if g$655$14609 (begin (quote #f) (append (car g$655$14609) (cdr g$655$14609))) (quote #f))) (g$655$14593 g$655$14607)))) (g$655$12203 g$655$14569)))) (quote #f))) (g$655$12207 g$655$14563)))) (quote #f))) ((lambda (g$655$14611) (list g$655$14611)) (g$655$12203 g$655$14563)))) (quote #f))) (g$655$12207 g$655$14557)))) (quote #f))) ((lambda (g$655$14613) (quote ())) (g$655$12203 g$655$14557)))) (quote #f))) g$655$14533))) g$655$14529))) ((lambda (g$655$14631) (if (g$655$12195 g$655$14631) (begin (quote #f) ((lambda (g$655$14633) (if g$655$14633 (begin (quote #f) ((lambda (g$655$14635) (if g$655$14635 (begin (quote #f) (append g$655$14633 g$655$14635)) (quote #f))) ((lambda (g$655$14637) (if (g$655$12195 g$655$14637) (begin (quote #f) ((lambda (g$655$14639) (if g$655$14639 (begin (quote #f) ((lambda (g$655$14641) (if g$655$14641 (begin (quote #f) (append g$655$14639 g$655$14641)) (quote #f))) ((lambda (g$655$14643) (if (g$655$12195 g$655$14643) (begin (quote #f) ((lambda (g$655$14645) (if g$655$14645 (begin (quote #f) ((lambda (g$655$14647) (if g$655$14647 (begin (quote #f) (append g$655$14645 g$655$14647)) (quote #f))) ((lambda (g$655$14649) (if (g$655$12195 g$655$14649) (begin (quote #f) ((lambda (g$655$14651) (if g$655$14651 (begin (quote #f) ((lambda (g$655$14653) (if g$655$14653 (begin (quote #f) (append g$655$14651 g$655$14653)) (quote #f))) ((letrec ((g$655$14655 (lambda (g$655$14657) (if (g$655$12195 g$655$14657) ((lambda (g$655$14659) (if g$655$14659 (begin (quote #f) ((lambda (g$655$14661) (if g$655$14661 (begin (quote #f) (map cons g$655$14659 g$655$14661)) (quote #f))) (g$655$14655 (g$655$12207 g$655$14657)))) (quote #f))) ((lambda (g$655$14663) (list g$655$14663)) (g$655$12203 g$655$14657))) (if (g$655$12199 g$655$14657) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14655) (g$655$12207 g$655$14649)))) (quote #f))) ((lambda (g$655$14665) (list g$655$14665)) (g$655$12203 g$655$14649)))) (quote #f))) (g$655$12207 g$655$14643)))) (quote #f))) ((letrec ((g$655$14667 (lambda (g$655$14669) (if (g$655$12195 g$655$14669) ((lambda (g$655$14671) (if g$655$14671 (begin (quote #f) ((lambda (g$655$14673) (if g$655$14673 (begin (quote #f) (map cons g$655$14671 g$655$14673)) (quote #f))) (g$655$14667 (g$655$12207 g$655$14669)))) (quote #f))) ((lambda (g$655$14675) (list g$655$14675)) (g$655$12203 g$655$14669))) (if (g$655$12199 g$655$14669) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$655$14667) (g$655$12203 g$655$14643)))) (quote #f))) (g$655$12207 g$655$14637)))) (quote #f))) ((lambda (g$655$14677) (list g$655$14677)) (g$655$12203 g$655$14637)))) (quote #f))) (g$655$12207 g$655$14631)))) (quote #f))) ((lambda (g$655$14679) (quote ())) (g$655$12203 g$655$14631)))) (quote #f))) g$655$14529))) g$655$14527))) (set! g$655$12677 (lambda (g$655$14681) ((lambda (g$655$14683) ((lambda (g$655$14685) (if (if g$655$14685 (begin (quote #f) (apply (lambda (g$655$14818 g$655$14819 g$655$14820 g$655$14821) (quote #t)) g$655$14685)) (quote #f)) (apply (lambda (g$655$14810 g$655$14811 g$655$14812 g$655$14813) (if (g$655$12219 g$655$14811) (g$655$12669 (list (quote define) g$655$14810 (list (quote make-traced-procedure) (list (quote quote) g$655$14810) (cons (quote lambda) (cons g$655$14811 (cons g$655$14812 g$655$14813)))))) (error (quote expander) (quote #3#) (quote "invalid formals") (g$655$12227 g$655$14681 (quote ()))))) g$655$14685) ((lambda (g$655$14687) ((lambda (g$655$14689) (if (if g$655$14689 (begin (quote #f) (apply (lambda (g$655$14743 g$655$14744 g$655$14745 g$655$14746 g$655$14747) (quote #t)) g$655$14689)) (quote #f)) (apply (lambda (g$655$14733 g$655$14734 g$655$14735 g$655$14736 g$655$14737) (if (g$655$12219 (cons g$655$14735 g$655$14734)) (g$655$12669 (list (quote define) g$655$14733 (list (quote make-traced-procedure) (list (quote quote) g$655$14733) (cons (quote lambda) (cons (append g$655$14734 g$655$14735) (cons g$655$14736 g$655$14737)))))) (error (quote expander) (quote #3#) (quote "invalid formals") (g$655$12227 g$655$14681 (quote ()))))) g$655$14689) ((lambda (g$655$14691) ((lambda (g$655$14693) (if (if g$655$14693 (begin (quote #f) (apply (lambda (g$655$14700 g$655$14701) (quote #t)) g$655$14693)) (quote #f)) (apply (lambda (g$655$14696 g$655$14697) (if (g$655$12209 g$655$14696) (g$655$12669 (list (quote define) g$655$14696 (list (quote let) (list (list (quote v) g$655$14697)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) g$655$14696) (quote (v)))) (quote ((error (quote trace-define) "~s is not a procedure" v))))))))) (error (quote expander) (quote #3#) (quote "invalid formals") (g$655$12227 g$655$14681 (quote ()))))) g$655$14693) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14691 (quote ()))))) ((lambda (g$655$14703) (if (g$655$12195 g$655$14703) (begin (quote #f) ((lambda (g$655$14705) (if g$655$14705 (begin (quote #f) ((lambda (g$655$14707) (if g$655$14707 (begin (quote #f) (append g$655$14705 g$655$14707)) (quote #f))) ((lambda (g$655$14709) (if (g$655$12195 g$655$14709) (begin (quote #f) ((lambda (g$655$14711) (if g$655$14711 (begin (quote #f) ((lambda (g$655$14713) (if g$655$14713 (begin (quote #f) (append g$655$14711 g$655$14713)) (quote #f))) ((lambda (g$655$14715) (if (g$655$12195 g$655$14715) (begin (quote #f) ((lambda (g$655$14717) (if g$655$14717 (begin (quote #f) ((lambda (g$655$14719) (if g$655$14719 (begin (quote #f) (append g$655$14717 g$655$14719)) (quote #f))) ((lambda (g$655$14721) (if (equal? (g$655$12229 g$655$14721) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14715)))) (quote #f))) ((lambda (g$655$14723) (list g$655$14723)) (g$655$12203 g$655$14715)))) (quote #f))) (g$655$12207 g$655$14709)))) (quote #f))) ((lambda (g$655$14725) (list g$655$14725)) (g$655$12203 g$655$14709)))) (quote #f))) (g$655$12207 g$655$14703)))) (quote #f))) ((lambda (g$655$14727) (quote ())) (g$655$12203 g$655$14703)))) (quote #f))) g$655$14691))) g$655$14687))) ((lambda (g$655$14749) (if (g$655$12195 g$655$14749) (begin (quote #f) ((lambda (g$655$14751) (if g$655$14751 (begin (quote #f) ((lambda (g$655$14753) (if g$655$14753 (begin (quote #f) (append g$655$14751 g$655$14753)) (quote #f))) ((lambda (g$655$14755) (if (g$655$12195 g$655$14755) (begin (quote #f) ((lambda (g$655$14757) (if g$655$14757 (begin (quote #f) ((lambda (g$655$14759) (if g$655$14759 (begin (quote #f) (append g$655$14757 g$655$14759)) (quote #f))) ((lambda (g$655$14761) (if (g$655$12195 g$655$14761) (begin (quote #f) ((lambda (g$655$14763) (if g$655$14763 (begin (quote #f) ((lambda (g$655$14765) (if g$655$14765 (begin (quote #f) (append g$655$14763 g$655$14765)) (quote #f))) ((letrec ((g$655$14767 (lambda (g$655$14769) (if (g$655$12195 g$655$14769) ((lambda (g$655$14771) (if g$655$14771 (begin (quote #f) ((lambda (g$655$14773) (if g$655$14773 (begin (quote #f) (map cons g$655$14771 g$655$14773)) (quote #f))) (g$655$14767 (g$655$12207 g$655$14769)))) (quote #f))) ((lambda (g$655$14775) (list g$655$14775)) (g$655$12203 g$655$14769))) (if (g$655$12199 g$655$14769) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14767) (g$655$12207 g$655$14761)))) (quote #f))) ((lambda (g$655$14777) (list g$655$14777)) (g$655$12203 g$655$14761)))) (quote #f))) (g$655$12207 g$655$14755)))) (quote #f))) ((lambda (g$655$14779) (if (g$655$12195 g$655$14779) (begin (quote #f) ((lambda (g$655$14781) (if g$655$14781 (begin (quote #f) ((lambda (g$655$14783) (if g$655$14783 (begin (quote #f) (append g$655$14781 g$655$14783)) (quote #f))) ((letrec ((g$655$14785 (lambda (g$655$14787) (if (g$655$12195 g$655$14787) ((lambda (g$655$14793) (if g$655$14793 (begin (quote #f) ((lambda (g$655$14795) (if g$655$14795 (begin (quote #f) (cons (map cons g$655$14793 (car g$655$14795)) (cdr g$655$14795))) (quote #f))) (g$655$14785 (g$655$12207 g$655$14787)))) (quote #f))) ((lambda (g$655$14797) (list g$655$14797)) (g$655$12203 g$655$14787))) ((lambda (g$655$14789) (if g$655$14789 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$655$14789)) (quote #f))) ((lambda (g$655$14791) (list g$655$14791)) g$655$14787)))))) (lambda (g$655$14799) ((lambda (g$655$14801) (if g$655$14801 (begin (quote #f) (append (car g$655$14801) (cdr g$655$14801))) (quote #f))) (g$655$14785 g$655$14799)))) (g$655$12207 g$655$14779)))) (quote #f))) ((lambda (g$655$14803) (list g$655$14803)) (g$655$12203 g$655$14779)))) (quote #f))) (g$655$12203 g$655$14755)))) (quote #f))) (g$655$12207 g$655$14749)))) (quote #f))) ((lambda (g$655$14805) (quote ())) (g$655$12203 g$655$14749)))) (quote #f))) g$655$14687))) g$655$14683))) ((lambda (g$655$14823) (if (g$655$12195 g$655$14823) (begin (quote #f) ((lambda (g$655$14825) (if g$655$14825 (begin (quote #f) ((lambda (g$655$14827) (if g$655$14827 (begin (quote #f) (append g$655$14825 g$655$14827)) (quote #f))) ((lambda (g$655$14829) (if (g$655$12195 g$655$14829) (begin (quote #f) ((lambda (g$655$14831) (if g$655$14831 (begin (quote #f) ((lambda (g$655$14833) (if g$655$14833 (begin (quote #f) (append g$655$14831 g$655$14833)) (quote #f))) ((lambda (g$655$14835) (if (g$655$12195 g$655$14835) (begin (quote #f) ((lambda (g$655$14837) (if g$655$14837 (begin (quote #f) ((lambda (g$655$14839) (if g$655$14839 (begin (quote #f) (append g$655$14837 g$655$14839)) (quote #f))) ((letrec ((g$655$14841 (lambda (g$655$14843) (if (g$655$12195 g$655$14843) ((lambda (g$655$14845) (if g$655$14845 (begin (quote #f) ((lambda (g$655$14847) (if g$655$14847 (begin (quote #f) (map cons g$655$14845 g$655$14847)) (quote #f))) (g$655$14841 (g$655$12207 g$655$14843)))) (quote #f))) ((lambda (g$655$14849) (list g$655$14849)) (g$655$12203 g$655$14843))) (if (g$655$12199 g$655$14843) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$14841) (g$655$12207 g$655$14835)))) (quote #f))) ((lambda (g$655$14851) (list g$655$14851)) (g$655$12203 g$655$14835)))) (quote #f))) (g$655$12207 g$655$14829)))) (quote #f))) ((lambda (g$655$14853) (if (g$655$12195 g$655$14853) (begin (quote #f) ((lambda (g$655$14855) (if g$655$14855 (begin (quote #f) ((lambda (g$655$14857) (if g$655$14857 (begin (quote #f) (append g$655$14855 g$655$14857)) (quote #f))) ((letrec ((g$655$14859 (lambda (g$655$14861) (if (g$655$12195 g$655$14861) ((lambda (g$655$14863) (if g$655$14863 (begin (quote #f) ((lambda (g$655$14865) (if g$655$14865 (begin (quote #f) (map cons g$655$14863 g$655$14865)) (quote #f))) (g$655$14859 (g$655$12207 g$655$14861)))) (quote #f))) ((lambda (g$655$14867) (list g$655$14867)) (g$655$12203 g$655$14861))) (if (g$655$12199 g$655$14861) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$655$14859) (g$655$12207 g$655$14853)))) (quote #f))) ((lambda (g$655$14869) (list g$655$14869)) (g$655$12203 g$655$14853)))) (quote #f))) (g$655$12203 g$655$14829)))) (quote #f))) (g$655$12207 g$655$14823)))) (quote #f))) ((lambda (g$655$14871) (quote ())) (g$655$12203 g$655$14823)))) (quote #f))) g$655$14683))) g$655$14681))) (set! g$655$12679 (lambda (g$655$14873) ((lambda (g$655$14875) ((lambda (g$655$14877) (if (if g$655$14877 (begin (quote #f) (apply (lambda (g$655$14881) (quote #t)) g$655$14877)) (quote #f)) (apply (lambda (g$655$14879) (g$655$12669 (list (quote time-it) (list (quote quote) g$655$14879) (list (quote lambda) (quote ()) g$655$14879)))) g$655$14877) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14875 (quote ()))))) ((lambda (g$655$14883) (if (g$655$12195 g$655$14883) (begin (quote #f) ((lambda (g$655$14885) (if g$655$14885 (begin (quote #f) ((lambda (g$655$14887) (if g$655$14887 (begin (quote #f) (append g$655$14885 g$655$14887)) (quote #f))) ((lambda (g$655$14889) (if (g$655$12195 g$655$14889) (begin (quote #f) ((lambda (g$655$14891) (if g$655$14891 (begin (quote #f) ((lambda (g$655$14893) (if g$655$14893 (begin (quote #f) (append g$655$14891 g$655$14893)) (quote #f))) ((lambda (g$655$14895) (if (equal? (g$655$12229 g$655$14895) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14889)))) (quote #f))) ((lambda (g$655$14897) (list g$655$14897)) (g$655$12203 g$655$14889)))) (quote #f))) (g$655$12207 g$655$14883)))) (quote #f))) ((lambda (g$655$14899) (quote ())) (g$655$12203 g$655$14883)))) (quote #f))) g$655$14875))) g$655$14873))) (set! g$655$12681 (lambda (g$655$14901) ((lambda (g$655$14903) ((lambda (g$655$14905) (if (if g$655$14905 (begin (quote #f) (apply (lambda (g$655$14909) (quote #t)) g$655$14905)) (quote #f)) (apply (lambda (g$655$14907) (g$655$12669 (list (quote make-promise) (list (quote lambda) (quote ()) g$655$14907)))) g$655$14905) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14903 (quote ()))))) ((lambda (g$655$14911) (if (g$655$12195 g$655$14911) (begin (quote #f) ((lambda (g$655$14913) (if g$655$14913 (begin (quote #f) ((lambda (g$655$14915) (if g$655$14915 (begin (quote #f) (append g$655$14913 g$655$14915)) (quote #f))) ((lambda (g$655$14917) (if (g$655$12195 g$655$14917) (begin (quote #f) ((lambda (g$655$14919) (if g$655$14919 (begin (quote #f) ((lambda (g$655$14921) (if g$655$14921 (begin (quote #f) (append g$655$14919 g$655$14921)) (quote #f))) ((lambda (g$655$14923) (if (equal? (g$655$12229 g$655$14923) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14917)))) (quote #f))) ((lambda (g$655$14925) (list g$655$14925)) (g$655$12203 g$655$14917)))) (quote #f))) (g$655$12207 g$655$14911)))) (quote #f))) ((lambda (g$655$14927) (quote ())) (g$655$12203 g$655$14911)))) (quote #f))) g$655$14903))) g$655$14901))) (set! g$655$12683 (lambda (g$655$14929) ((lambda (g$655$14931) ((lambda (g$655$14933) (if (if g$655$14933 (begin (quote #f) (apply (lambda (g$655$14937) (quote #t)) g$655$14933)) (quote #f)) (apply (lambda (g$655$14935) (g$655$12669 (list (quote unless) g$655$14935 (list (quote error) (quote (quote assert)) (quote "~s failed") (list (quote quote) g$655$14935))))) g$655$14933) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14931 (quote ()))))) ((lambda (g$655$14939) (if (g$655$12195 g$655$14939) (begin (quote #f) ((lambda (g$655$14941) (if g$655$14941 (begin (quote #f) ((lambda (g$655$14943) (if g$655$14943 (begin (quote #f) (append g$655$14941 g$655$14943)) (quote #f))) ((lambda (g$655$14945) (if (g$655$12195 g$655$14945) (begin (quote #f) ((lambda (g$655$14947) (if g$655$14947 (begin (quote #f) ((lambda (g$655$14949) (if g$655$14949 (begin (quote #f) (append g$655$14947 g$655$14949)) (quote #f))) ((lambda (g$655$14951) (if (equal? (g$655$12229 g$655$14951) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14945)))) (quote #f))) ((lambda (g$655$14953) (list g$655$14953)) (g$655$12203 g$655$14945)))) (quote #f))) (g$655$12207 g$655$14939)))) (quote #f))) ((lambda (g$655$14955) (quote ())) (g$655$12203 g$655$14939)))) (quote #f))) g$655$14931))) g$655$14929))) (set! g$655$12685 (lambda (g$655$14957) ((lambda (g$655$14959) ((lambda (g$655$14961) (if (if g$655$14961 (begin (quote #f) (apply (lambda (g$655$14966) (quote #t)) g$655$14961)) (quote #f)) (apply (lambda (g$655$14963) ((lambda (g$655$14964) (if (memv g$655$14964 (quote (little))) (g$655$12669 (quote (quote little))) (if (memv g$655$14964 (quote (big))) (g$655$12669 (quote (quote big))) (error (quote expander) (quote #3#) (quote "endianness must be big or little") (g$655$12227 g$655$14957 (quote ())))))) (g$655$12852 g$655$14963))) g$655$14961) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14959 (quote ()))))) ((lambda (g$655$14968) (if (g$655$12195 g$655$14968) (begin (quote #f) ((lambda (g$655$14970) (if g$655$14970 (begin (quote #f) ((lambda (g$655$14972) (if g$655$14972 (begin (quote #f) (append g$655$14970 g$655$14972)) (quote #f))) ((lambda (g$655$14974) (if (g$655$12195 g$655$14974) (begin (quote #f) ((lambda (g$655$14976) (if g$655$14976 (begin (quote #f) ((lambda (g$655$14978) (if g$655$14978 (begin (quote #f) (append g$655$14976 g$655$14978)) (quote #f))) ((lambda (g$655$14980) (if (equal? (g$655$12229 g$655$14980) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$14974)))) (quote #f))) ((lambda (g$655$14982) (list g$655$14982)) (g$655$12203 g$655$14974)))) (quote #f))) (g$655$12207 g$655$14968)))) (quote #f))) ((lambda (g$655$14984) (quote ())) (g$655$12203 g$655$14968)))) (quote #f))) g$655$14959))) g$655$14957))) (set! g$655$12687 (lambda (g$655$14986) ((lambda (g$655$14988) ((lambda (g$655$14990) (if (if g$655$14990 (begin (quote #f) (apply (lambda (g$655$15100) (quote #t)) g$655$14990)) (quote #f)) (apply (lambda (g$655$15098) (g$655$12669 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$655$15098)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) g$655$15098) (quote ((syntax (e* ...))))))))))) g$655$14990) ((lambda (g$655$14992) ((lambda (g$655$14994) (if (if g$655$14994 (begin (quote #f) (apply (lambda (g$655$15010 g$655$15011 g$655$15012 g$655$15013 g$655$15014) (if (g$655$12209 g$655$15010) (if (g$655$12209 g$655$15012) (begin (quote #f) (g$655$12209 g$655$15013)) (quote #f)) (quote #f))) g$655$14994)) (quote #f)) (apply (lambda (g$655$15000 g$655$15001 g$655$15002 g$655$15003 g$655$15004) (g$655$12669 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$655$15001)) (list (list (quote set!) (quote id) g$655$15003) (list (quote syntax) g$655$15004)) (list (quote (id e* ...)) (quote (identifier? (syntax id))) (list (quote syntax) (cons g$655$15001 (quote (e* ...)))))))))) g$655$14994) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$14992 (quote ()))))) ((lambda (g$655$15016) (if (g$655$12195 g$655$15016) (begin (quote #f) ((lambda (g$655$15018) (if g$655$15018 (begin (quote #f) ((lambda (g$655$15020) (if g$655$15020 (begin (quote #f) (append g$655$15018 g$655$15020)) (quote #f))) ((lambda (g$655$15022) (if (g$655$12195 g$655$15022) (begin (quote #f) ((lambda (g$655$15024) (if g$655$15024 (begin (quote #f) ((lambda (g$655$15026) (if g$655$15026 (begin (quote #f) (append g$655$15024 g$655$15026)) (quote #f))) ((lambda (g$655$15028) (if (g$655$12195 g$655$15028) (begin (quote #f) ((lambda (g$655$15030) (if g$655$15030 (begin (quote #f) ((lambda (g$655$15032) (if g$655$15032 (begin (quote #f) (append g$655$15030 g$655$15032)) (quote #f))) ((lambda (g$655$15034) (if (equal? (g$655$12229 g$655$15034) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15028)))) (quote #f))) ((lambda (g$655$15036) (if (g$655$12195 g$655$15036) (begin (quote #f) ((lambda (g$655$15038) (if g$655$15038 (begin (quote #f) ((lambda (g$655$15040) (if g$655$15040 (begin (quote #f) (append g$655$15038 g$655$15040)) (quote #f))) ((lambda (g$655$15042) (if (g$655$12195 g$655$15042) (begin (quote #f) ((lambda (g$655$15044) (if g$655$15044 (begin (quote #f) ((lambda (g$655$15046) (if g$655$15046 (begin (quote #f) (append g$655$15044 g$655$15046)) (quote #f))) ((lambda (g$655$15048) (if (equal? (g$655$12229 g$655$15048) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15042)))) (quote #f))) ((lambda (g$655$15050) (list g$655$15050)) (g$655$12203 g$655$15042)))) (quote #f))) (g$655$12207 g$655$15036)))) (quote #f))) ((lambda (g$655$15052) (if (g$655$12195 g$655$15052) (begin (quote #f) ((lambda (g$655$15054) (if g$655$15054 (begin (quote #f) ((lambda (g$655$15056) (if g$655$15056 (begin (quote #f) (append g$655$15054 g$655$15056)) (quote #f))) ((lambda (g$655$15058) (if (g$655$12195 g$655$15058) (begin (quote #f) ((lambda (g$655$15060) (if g$655$15060 (begin (quote #f) ((lambda (g$655$15062) (if g$655$15062 (begin (quote #f) (append g$655$15060 g$655$15062)) (quote #f))) ((lambda (g$655$15064) (if (g$655$12195 g$655$15064) (begin (quote #f) ((lambda (g$655$15066) (if g$655$15066 (begin (quote #f) ((lambda (g$655$15068) (if g$655$15068 (begin (quote #f) (append g$655$15066 g$655$15068)) (quote #f))) ((lambda (g$655$15070) (if (equal? (g$655$12229 g$655$15070) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15064)))) (quote #f))) ((lambda (g$655$15072) (list g$655$15072)) (g$655$12203 g$655$15064)))) (quote #f))) (g$655$12207 g$655$15058)))) (quote #f))) ((lambda (g$655$15074) (list g$655$15074)) (g$655$12203 g$655$15058)))) (quote #f))) (g$655$12207 g$655$15052)))) (quote #f))) ((lambda (g$655$15076) (if (g$655$12209 g$655$15076) (if (g$655$12217 g$655$15076 (g$655$12639 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$15052)))) (quote #f))) (g$655$12203 g$655$15036)))) (quote #f))) (g$655$12203 g$655$15028)))) (quote #f))) (g$655$12207 g$655$15022)))) (quote #f))) ((lambda (g$655$15078) (if (g$655$12195 g$655$15078) (begin (quote #f) ((lambda (g$655$15080) (if g$655$15080 (begin (quote #f) ((lambda (g$655$15082) (if g$655$15082 (begin (quote #f) (append g$655$15080 g$655$15082)) (quote #f))) ((lambda (g$655$15084) (if (g$655$12195 g$655$15084) (begin (quote #f) ((lambda (g$655$15086) (if g$655$15086 (begin (quote #f) ((lambda (g$655$15088) (if g$655$15088 (begin (quote #f) (append g$655$15086 g$655$15088)) (quote #f))) ((lambda (g$655$15090) (if (equal? (g$655$12229 g$655$15090) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15084)))) (quote #f))) ((lambda (g$655$15092) (list g$655$15092)) (g$655$12203 g$655$15084)))) (quote #f))) (g$655$12207 g$655$15078)))) (quote #f))) ((lambda (g$655$15094) (list g$655$15094)) (g$655$12203 g$655$15078)))) (quote #f))) (g$655$12203 g$655$15022)))) (quote #f))) (g$655$12207 g$655$15016)))) (quote #f))) ((lambda (g$655$15096) (quote ())) (g$655$12203 g$655$15016)))) (quote #f))) g$655$14992))) g$655$14988))) ((lambda (g$655$15102) (if (g$655$12195 g$655$15102) (begin (quote #f) ((lambda (g$655$15104) (if g$655$15104 (begin (quote #f) ((lambda (g$655$15106) (if g$655$15106 (begin (quote #f) (append g$655$15104 g$655$15106)) (quote #f))) ((lambda (g$655$15108) (if (g$655$12195 g$655$15108) (begin (quote #f) ((lambda (g$655$15110) (if g$655$15110 (begin (quote #f) ((lambda (g$655$15112) (if g$655$15112 (begin (quote #f) (append g$655$15110 g$655$15112)) (quote #f))) ((lambda (g$655$15114) (if (equal? (g$655$12229 g$655$15114) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15108)))) (quote #f))) ((lambda (g$655$15116) (list g$655$15116)) (g$655$12203 g$655$15108)))) (quote #f))) (g$655$12207 g$655$15102)))) (quote #f))) ((lambda (g$655$15118) (quote ())) (g$655$12203 g$655$15102)))) (quote #f))) g$655$14988))) g$655$14986))) (set! g$655$12689 (lambda (g$655$15120) ((lambda (g$655$15122) (begin (set! g$655$15122 (lambda (g$655$15252) ((lambda (g$655$15254) ((lambda (g$655$15256) (if (if g$655$15256 (begin (quote #f) (apply (lambda (g$655$15311 g$655$15312) (quote #t)) g$655$15256)) (quote #f)) (apply (lambda (g$655$15307 g$655$15308) (list g$655$15307 g$655$15308 g$655$15307)) g$655$15256) ((lambda (g$655$15258) ((lambda (g$655$15260) (if (if g$655$15260 (begin (quote #f) (apply (lambda (g$655$15276 g$655$15277 g$655$15278) (quote #t)) g$655$15260)) (quote #f)) (apply (lambda (g$655$15270 g$655$15271 g$655$15272) (list g$655$15270 g$655$15271 g$655$15272)) g$655$15260) ((lambda (g$655$15262) ((lambda (g$655$15264) (if (if g$655$15264 (begin (quote #f) (apply (lambda () (quote #t)) g$655$15264)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "invalid binding") (g$655$12227 g$655$15120 (quote ())))) g$655$15264) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15262 (quote ()))))) ((lambda (g$655$15266) (quote ())) g$655$15262))) g$655$15258))) ((lambda (g$655$15280) (if (g$655$12195 g$655$15280) (begin (quote #f) ((lambda (g$655$15282) (if g$655$15282 (begin (quote #f) ((lambda (g$655$15284) (if g$655$15284 (begin (quote #f) (append g$655$15282 g$655$15284)) (quote #f))) ((lambda (g$655$15286) (if (g$655$12195 g$655$15286) (begin (quote #f) ((lambda (g$655$15288) (if g$655$15288 (begin (quote #f) ((lambda (g$655$15290) (if g$655$15290 (begin (quote #f) (append g$655$15288 g$655$15290)) (quote #f))) ((lambda (g$655$15292) (if (g$655$12195 g$655$15292) (begin (quote #f) ((lambda (g$655$15294) (if g$655$15294 (begin (quote #f) ((lambda (g$655$15296) (if g$655$15296 (begin (quote #f) (append g$655$15294 g$655$15296)) (quote #f))) ((lambda (g$655$15298) (if (equal? (g$655$12229 g$655$15298) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15292)))) (quote #f))) ((lambda (g$655$15300) (list g$655$15300)) (g$655$12203 g$655$15292)))) (quote #f))) (g$655$12207 g$655$15286)))) (quote #f))) ((lambda (g$655$15302) (list g$655$15302)) (g$655$12203 g$655$15286)))) (quote #f))) (g$655$12207 g$655$15280)))) (quote #f))) ((lambda (g$655$15304) (list g$655$15304)) (g$655$12203 g$655$15280)))) (quote #f))) g$655$15258))) g$655$15254))) ((lambda (g$655$15314) (if (g$655$12195 g$655$15314) (begin (quote #f) ((lambda (g$655$15316) (if g$655$15316 (begin (quote #f) ((lambda (g$655$15318) (if g$655$15318 (begin (quote #f) (append g$655$15316 g$655$15318)) (quote #f))) ((lambda (g$655$15320) (if (g$655$12195 g$655$15320) (begin (quote #f) ((lambda (g$655$15322) (if g$655$15322 (begin (quote #f) ((lambda (g$655$15324) (if g$655$15324 (begin (quote #f) (append g$655$15322 g$655$15324)) (quote #f))) ((lambda (g$655$15326) (if (equal? (g$655$12229 g$655$15326) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15320)))) (quote #f))) ((lambda (g$655$15328) (list g$655$15328)) (g$655$12203 g$655$15320)))) (quote #f))) (g$655$12207 g$655$15314)))) (quote #f))) ((lambda (g$655$15330) (list g$655$15330)) (g$655$12203 g$655$15314)))) (quote #f))) g$655$15254))) g$655$15252))) ((lambda (g$655$15124) ((lambda (g$655$15126) (if (if g$655$15126 (begin (quote #f) (apply (lambda (g$655$15189 g$655$15190 g$655$15191 g$655$15192) (quote #t)) g$655$15126)) (quote #f)) (apply (lambda (g$655$15131 g$655$15132 g$655$15133 g$655$15134) ((lambda (g$655$15136) ((lambda (g$655$15138) (if (if g$655$15138 (begin (quote #f) (apply (lambda (g$655$15148 g$655$15149 g$655$15150) (quote #t)) g$655$15138)) (quote #f)) (apply (lambda (g$655$15142 g$655$15143 g$655$15144) (if (g$655$12219 g$655$15142) (g$655$12669 (list (quote letrec) (list (list (quote loop) (list (quote lambda) g$655$15142 (list (quote if) g$655$15132 (cons (quote begin) (cons (quote (if #f #f)) g$655$15133)) (cons (quote begin) (append g$655$15134 (list (cons (quote loop) g$655$15144)))))))) (cons (quote loop) g$655$15143))) (error (quote expander) (quote #3#) (quote "invalid bindings") (g$655$12227 g$655$15120 (quote ()))))) g$655$15138) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15136 (quote ()))))) ((letrec ((g$655$15152 (lambda (g$655$15154) (if (g$655$12195 g$655$15154) ((lambda (g$655$15156) (if g$655$15156 (begin (quote #f) ((lambda (g$655$15158) (if g$655$15158 (begin (quote #f) (map cons g$655$15156 g$655$15158)) (quote #f))) (g$655$15152 (g$655$12207 g$655$15154)))) (quote #f))) ((lambda (g$655$15160) (if (g$655$12195 g$655$15160) (begin (quote #f) ((lambda (g$655$15162) (if g$655$15162 (begin (quote #f) ((lambda (g$655$15164) (if g$655$15164 (begin (quote #f) (append g$655$15162 g$655$15164)) (quote #f))) ((lambda (g$655$15166) (if (g$655$12195 g$655$15166) (begin (quote #f) ((lambda (g$655$15168) (if g$655$15168 (begin (quote #f) ((lambda (g$655$15170) (if g$655$15170 (begin (quote #f) (append g$655$15168 g$655$15170)) (quote #f))) ((lambda (g$655$15172) (if (g$655$12195 g$655$15172) (begin (quote #f) ((lambda (g$655$15174) (if g$655$15174 (begin (quote #f) ((lambda (g$655$15176) (if g$655$15176 (begin (quote #f) (append g$655$15174 g$655$15176)) (quote #f))) ((lambda (g$655$15178) (if (equal? (g$655$12229 g$655$15178) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15172)))) (quote #f))) ((lambda (g$655$15180) (list g$655$15180)) (g$655$12203 g$655$15172)))) (quote #f))) (g$655$12207 g$655$15166)))) (quote #f))) ((lambda (g$655$15182) (list g$655$15182)) (g$655$12203 g$655$15166)))) (quote #f))) (g$655$12207 g$655$15160)))) (quote #f))) ((lambda (g$655$15184) (list g$655$15184)) (g$655$12203 g$655$15160)))) (quote #f))) (g$655$12203 g$655$15154))) (if (g$655$12199 g$655$15154) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) g$655$15152) g$655$15136))) (map g$655$15122 g$655$15131))) g$655$15126) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15124 (quote ()))))) ((lambda (g$655$15194) (if (g$655$12195 g$655$15194) (begin (quote #f) ((lambda (g$655$15196) (if g$655$15196 (begin (quote #f) ((lambda (g$655$15198) (if g$655$15198 (begin (quote #f) (append g$655$15196 g$655$15198)) (quote #f))) ((lambda (g$655$15200) (if (g$655$12195 g$655$15200) (begin (quote #f) ((lambda (g$655$15202) (if g$655$15202 (begin (quote #f) ((lambda (g$655$15204) (if g$655$15204 (begin (quote #f) (append g$655$15202 g$655$15204)) (quote #f))) ((lambda (g$655$15206) (if (g$655$12195 g$655$15206) (begin (quote #f) ((lambda (g$655$15208) (if g$655$15208 (begin (quote #f) ((lambda (g$655$15210) (if g$655$15210 (begin (quote #f) (append g$655$15208 g$655$15210)) (quote #f))) ((letrec ((g$655$15212 (lambda (g$655$15214) (if (g$655$12195 g$655$15214) ((lambda (g$655$15216) (if g$655$15216 (begin (quote #f) ((lambda (g$655$15218) (if g$655$15218 (begin (quote #f) (map cons g$655$15216 g$655$15218)) (quote #f))) (g$655$15212 (g$655$12207 g$655$15214)))) (quote #f))) ((lambda (g$655$15220) (list g$655$15220)) (g$655$12203 g$655$15214))) (if (g$655$12199 g$655$15214) (list (begin (quote command*) (quote ()))) (quote #f)))))) g$655$15212) (g$655$12207 g$655$15206)))) (quote #f))) ((lambda (g$655$15222) (if (g$655$12195 g$655$15222) (begin (quote #f) ((lambda (g$655$15224) (if g$655$15224 (begin (quote #f) ((lambda (g$655$15226) (if g$655$15226 (begin (quote #f) (append g$655$15224 g$655$15226)) (quote #f))) ((letrec ((g$655$15228 (lambda (g$655$15230) (if (g$655$12195 g$655$15230) ((lambda (g$655$15232) (if g$655$15232 (begin (quote #f) ((lambda (g$655$15234) (if g$655$15234 (begin (quote #f) (map cons g$655$15232 g$655$15234)) (quote #f))) (g$655$15228 (g$655$12207 g$655$15230)))) (quote #f))) ((lambda (g$655$15236) (list g$655$15236)) (g$655$12203 g$655$15230))) (if (g$655$12199 g$655$15230) (list (begin (quote expr*) (quote ()))) (quote #f)))))) g$655$15228) (g$655$12207 g$655$15222)))) (quote #f))) ((lambda (g$655$15238) (list g$655$15238)) (g$655$12203 g$655$15222)))) (quote #f))) (g$655$12203 g$655$15206)))) (quote #f))) (g$655$12207 g$655$15200)))) (quote #f))) ((letrec ((g$655$15240 (lambda (g$655$15242) (if (g$655$12195 g$655$15242) ((lambda (g$655$15244) (if g$655$15244 (begin (quote #f) ((lambda (g$655$15246) (if g$655$15246 (begin (quote #f) (map cons g$655$15244 g$655$15246)) (quote #f))) (g$655$15240 (g$655$12207 g$655$15242)))) (quote #f))) ((lambda (g$655$15248) (list g$655$15248)) (g$655$12203 g$655$15242))) (if (g$655$12199 g$655$15242) (list (begin (quote binding*) (quote ()))) (quote #f)))))) g$655$15240) (g$655$12203 g$655$15200)))) (quote #f))) (g$655$12207 g$655$15194)))) (quote #f))) ((lambda (g$655$15250) (quote ())) (g$655$12203 g$655$15194)))) (quote #f))) g$655$15124))) g$655$15120))) (quote #f)))) (set! g$655$12691 (lambda (g$655$15332) ((lambda (g$655$15334) ((lambda (g$655$15336) (if (if g$655$15336 (begin (quote #f) (apply (lambda (g$655$15353 g$655$15354 g$655$15355 g$655$15356) (for-all g$655$12209 g$655$15353)) g$655$15336)) (quote #f)) (apply (lambda (g$655$15341 g$655$15342 g$655$15343 g$655$15344) (g$655$12669 (letrec ((g$655$15346 (lambda (g$655$15348) (if (null? g$655$15348) (cons (quote let) (cons (quote ()) (cons g$655$15343 g$655$15344))) (list (quote let) (list (car g$655$15348)) (g$655$15346 (cdr g$655$15348))))))) (g$655$15346 (map list g$655$15341 g$655$15342))))) g$655$15336) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15334 (quote ()))))) ((lambda (g$655$15358) (if (g$655$12195 g$655$15358) (begin (quote #f) ((lambda (g$655$15360) (if g$655$15360 (begin (quote #f) ((lambda (g$655$15362) (if g$655$15362 (begin (quote #f) (append g$655$15360 g$655$15362)) (quote #f))) ((lambda (g$655$15364) (if (g$655$12195 g$655$15364) (begin (quote #f) ((lambda (g$655$15366) (if g$655$15366 (begin (quote #f) ((lambda (g$655$15368) (if g$655$15368 (begin (quote #f) (append g$655$15366 g$655$15368)) (quote #f))) ((lambda (g$655$15370) (if (g$655$12195 g$655$15370) (begin (quote #f) ((lambda (g$655$15372) (if g$655$15372 (begin (quote #f) ((lambda (g$655$15374) (if g$655$15374 (begin (quote #f) (append g$655$15372 g$655$15374)) (quote #f))) ((letrec ((g$655$15376 (lambda (g$655$15378) (if (g$655$12195 g$655$15378) ((lambda (g$655$15380) (if g$655$15380 (begin (quote #f) ((lambda (g$655$15382) (if g$655$15382 (begin (quote #f) (map cons g$655$15380 g$655$15382)) (quote #f))) (g$655$15376 (g$655$12207 g$655$15378)))) (quote #f))) ((lambda (g$655$15384) (list g$655$15384)) (g$655$12203 g$655$15378))) (if (g$655$12199 g$655$15378) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$15376) (g$655$12207 g$655$15370)))) (quote #f))) ((lambda (g$655$15386) (list g$655$15386)) (g$655$12203 g$655$15370)))) (quote #f))) (g$655$12207 g$655$15364)))) (quote #f))) ((letrec ((g$655$15388 (lambda (g$655$15390) (if (g$655$12195 g$655$15390) ((lambda (g$655$15392) (if g$655$15392 (begin (quote #f) ((lambda (g$655$15394) (if g$655$15394 (begin (quote #f) (map cons g$655$15392 g$655$15394)) (quote #f))) (g$655$15388 (g$655$12207 g$655$15390)))) (quote #f))) ((lambda (g$655$15396) (if (g$655$12195 g$655$15396) (begin (quote #f) ((lambda (g$655$15398) (if g$655$15398 (begin (quote #f) ((lambda (g$655$15400) (if g$655$15400 (begin (quote #f) (append g$655$15398 g$655$15400)) (quote #f))) ((lambda (g$655$15402) (if (g$655$12195 g$655$15402) (begin (quote #f) ((lambda (g$655$15404) (if g$655$15404 (begin (quote #f) ((lambda (g$655$15406) (if g$655$15406 (begin (quote #f) (append g$655$15404 g$655$15406)) (quote #f))) ((lambda (g$655$15408) (if (equal? (g$655$12229 g$655$15408) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15402)))) (quote #f))) ((lambda (g$655$15410) (list g$655$15410)) (g$655$12203 g$655$15402)))) (quote #f))) (g$655$12207 g$655$15396)))) (quote #f))) ((lambda (g$655$15412) (list g$655$15412)) (g$655$12203 g$655$15396)))) (quote #f))) (g$655$12203 g$655$15390))) (if (g$655$12199 g$655$15390) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$655$15388) (g$655$12203 g$655$15364)))) (quote #f))) (g$655$12207 g$655$15358)))) (quote #f))) ((lambda (g$655$15414) (quote ())) (g$655$12203 g$655$15358)))) (quote #f))) g$655$15334))) g$655$15332))) (set! g$655$12693 (lambda (g$655$15416) ((lambda (g$655$15418) ((lambda (g$655$15420) (if (if g$655$15420 (begin (quote #f) (apply (lambda () (quote #t)) g$655$15420)) (quote #f)) (apply (lambda () (quote #f)) g$655$15420) ((lambda (g$655$15422) ((lambda (g$655$15424) (if (if g$655$15424 (begin (quote #f) (apply (lambda (g$655$15437 g$655$15438) (quote #t)) g$655$15424)) (quote #f)) (apply (lambda (g$655$15427 g$655$15428) (g$655$12669 (letrec ((g$655$15430 (lambda (g$655$15433 g$655$15434) (if (null? g$655$15434) (list (quote begin) (quote #f) g$655$15433) (list (quote let) (list (list (quote t) g$655$15433)) (list (quote if) (quote t) (quote t) (g$655$15430 (car g$655$15434) (cdr g$655$15434)))))))) (g$655$15430 g$655$15427 g$655$15428)))) g$655$15424) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15422 (quote ()))))) ((lambda (g$655$15440) (if (g$655$12195 g$655$15440) (begin (quote #f) ((lambda (g$655$15442) (if g$655$15442 (begin (quote #f) ((lambda (g$655$15444) (if g$655$15444 (begin (quote #f) (append g$655$15442 g$655$15444)) (quote #f))) ((lambda (g$655$15446) (if (g$655$12195 g$655$15446) (begin (quote #f) ((lambda (g$655$15448) (if g$655$15448 (begin (quote #f) ((lambda (g$655$15450) (if g$655$15450 (begin (quote #f) (append g$655$15448 g$655$15450)) (quote #f))) ((letrec ((g$655$15452 (lambda (g$655$15454) (if (g$655$12195 g$655$15454) ((lambda (g$655$15456) (if g$655$15456 (begin (quote #f) ((lambda (g$655$15458) (if g$655$15458 (begin (quote #f) (map cons g$655$15456 g$655$15458)) (quote #f))) (g$655$15452 (g$655$12207 g$655$15454)))) (quote #f))) ((lambda (g$655$15460) (list g$655$15460)) (g$655$12203 g$655$15454))) (if (g$655$12199 g$655$15454) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$15452) (g$655$12207 g$655$15446)))) (quote #f))) ((lambda (g$655$15462) (list g$655$15462)) (g$655$12203 g$655$15446)))) (quote #f))) (g$655$12207 g$655$15440)))) (quote #f))) ((lambda (g$655$15464) (quote ())) (g$655$12203 g$655$15440)))) (quote #f))) g$655$15422))) g$655$15418))) ((lambda (g$655$15466) (if (g$655$12195 g$655$15466) (begin (quote #f) ((lambda (g$655$15468) (if g$655$15468 (begin (quote #f) ((lambda (g$655$15470) (if g$655$15470 (begin (quote #f) (append g$655$15468 g$655$15470)) (quote #f))) ((lambda (g$655$15472) (if (equal? (g$655$12229 g$655$15472) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15466)))) (quote #f))) ((lambda (g$655$15474) (quote ())) (g$655$12203 g$655$15466)))) (quote #f))) g$655$15418))) g$655$15416))) (set! g$655$12695 (lambda (g$655$15476) ((lambda (g$655$15478) ((lambda (g$655$15480) (if (if g$655$15480 (begin (quote #f) (apply (lambda () (quote #t)) g$655$15480)) (quote #f)) (apply (lambda () (quote #t)) g$655$15480) ((lambda (g$655$15482) ((lambda (g$655$15484) (if (if g$655$15484 (begin (quote #f) (apply (lambda (g$655$15497 g$655$15498) (quote #t)) g$655$15484)) (quote #f)) (apply (lambda (g$655$15487 g$655$15488) (g$655$12669 (letrec ((g$655$15490 (lambda (g$655$15493 g$655$15494) (if (null? g$655$15494) (list (quote begin) (quote #f) g$655$15493) (cons (quote if) (cons g$655$15493 (cons (g$655$15490 (car g$655$15494) (cdr g$655$15494)) (quote (#f))))))))) (g$655$15490 g$655$15487 g$655$15488)))) g$655$15484) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15482 (quote ()))))) ((lambda (g$655$15500) (if (g$655$12195 g$655$15500) (begin (quote #f) ((lambda (g$655$15502) (if g$655$15502 (begin (quote #f) ((lambda (g$655$15504) (if g$655$15504 (begin (quote #f) (append g$655$15502 g$655$15504)) (quote #f))) ((lambda (g$655$15506) (if (g$655$12195 g$655$15506) (begin (quote #f) ((lambda (g$655$15508) (if g$655$15508 (begin (quote #f) ((lambda (g$655$15510) (if g$655$15510 (begin (quote #f) (append g$655$15508 g$655$15510)) (quote #f))) ((letrec ((g$655$15512 (lambda (g$655$15514) (if (g$655$12195 g$655$15514) ((lambda (g$655$15516) (if g$655$15516 (begin (quote #f) ((lambda (g$655$15518) (if g$655$15518 (begin (quote #f) (map cons g$655$15516 g$655$15518)) (quote #f))) (g$655$15512 (g$655$12207 g$655$15514)))) (quote #f))) ((lambda (g$655$15520) (list g$655$15520)) (g$655$12203 g$655$15514))) (if (g$655$12199 g$655$15514) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$15512) (g$655$12207 g$655$15506)))) (quote #f))) ((lambda (g$655$15522) (list g$655$15522)) (g$655$12203 g$655$15506)))) (quote #f))) (g$655$12207 g$655$15500)))) (quote #f))) ((lambda (g$655$15524) (quote ())) (g$655$12203 g$655$15500)))) (quote #f))) g$655$15482))) g$655$15478))) ((lambda (g$655$15526) (if (g$655$12195 g$655$15526) (begin (quote #f) ((lambda (g$655$15528) (if g$655$15528 (begin (quote #f) ((lambda (g$655$15530) (if g$655$15530 (begin (quote #f) (append g$655$15528 g$655$15530)) (quote #f))) ((lambda (g$655$15532) (if (equal? (g$655$12229 g$655$15532) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15526)))) (quote #f))) ((lambda (g$655$15534) (quote ())) (g$655$12203 g$655$15526)))) (quote #f))) g$655$15478))) g$655$15476))) (set! g$655$12697 (lambda (g$655$15536) ((lambda (g$655$15538) ((lambda (g$655$15540) (if (if g$655$15540 (begin (quote #f) (apply (lambda (g$655$15813 g$655$15814) (quote #t)) g$655$15540)) (quote #f)) (apply (lambda (g$655$15543 g$655$15544) (g$655$12669 (letrec ((g$655$15546 (lambda (g$655$15549 g$655$15550) (if (null? g$655$15550) ((lambda (g$655$15682) ((lambda (g$655$15684) (if (if g$655$15684 (begin (quote #f) (apply (lambda (g$655$15783 g$655$15784) (quote #t)) g$655$15684)) (quote #f)) (apply (lambda (g$655$15779 g$655$15780) (cons (quote begin) (cons g$655$15779 g$655$15780))) g$655$15684) ((lambda (g$655$15686) ((lambda (g$655$15688) (if (if g$655$15688 (begin (quote #f) (apply (lambda (g$655$15749 g$655$15750) (quote #t)) g$655$15688)) (quote #f)) (apply (lambda (g$655$15745 g$655$15746) (list (quote let) (list (list (quote t) g$655$15745)) (list (quote if) (quote t) (cons g$655$15746 (quote (t)))))) g$655$15688) ((lambda (g$655$15690) ((lambda (g$655$15692) (if (if g$655$15692 (begin (quote #f) (apply (lambda (g$655$15732) (quote #t)) g$655$15692)) (quote #f)) (apply (lambda (g$655$15730) (cons (quote or) (cons g$655$15730 (quote ((if #f #f)))))) g$655$15692) ((lambda (g$655$15694) ((lambda (g$655$15696) (if (if g$655$15696 (begin (quote #f) (apply (lambda (g$655$15709 g$655$15710) (quote #t)) g$655$15696)) (quote #f)) (apply (lambda (g$655$15705 g$655$15706) (list (quote if) g$655$15705 (cons (quote begin) g$655$15706))) g$655$15696) ((lambda (g$655$15698) ((lambda (g$655$15700) (if (if g$655$15700 (begin (quote #f) (apply (lambda () (quote #t)) g$655$15700)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "invalid last clause") (g$655$12227 g$655$15536 (quote ())))) g$655$15700) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15698 (quote ()))))) ((lambda (g$655$15702) (quote ())) g$655$15698))) g$655$15694))) ((lambda (g$655$15712) (if (g$655$12195 g$655$15712) (begin (quote #f) ((lambda (g$655$15714) (if g$655$15714 (begin (quote #f) ((lambda (g$655$15716) (if g$655$15716 (begin (quote #f) (append g$655$15714 g$655$15716)) (quote #f))) ((letrec ((g$655$15718 (lambda (g$655$15720) (if (g$655$12195 g$655$15720) ((lambda (g$655$15722) (if g$655$15722 (begin (quote #f) ((lambda (g$655$15724) (if g$655$15724 (begin (quote #f) (map cons g$655$15722 g$655$15724)) (quote #f))) (g$655$15718 (g$655$12207 g$655$15720)))) (quote #f))) ((lambda (g$655$15726) (list g$655$15726)) (g$655$12203 g$655$15720))) (if (g$655$12199 g$655$15720) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$15718) (g$655$12207 g$655$15712)))) (quote #f))) ((lambda (g$655$15728) (list g$655$15728)) (g$655$12203 g$655$15712)))) (quote #f))) g$655$15694))) g$655$15690))) ((lambda (g$655$15734) (if (g$655$12195 g$655$15734) (begin (quote #f) ((lambda (g$655$15736) (if g$655$15736 (begin (quote #f) ((lambda (g$655$15738) (if g$655$15738 (begin (quote #f) (append g$655$15736 g$655$15738)) (quote #f))) ((lambda (g$655$15740) (if (equal? (g$655$12229 g$655$15740) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15734)))) (quote #f))) ((lambda (g$655$15742) (list g$655$15742)) (g$655$12203 g$655$15734)))) (quote #f))) g$655$15690))) g$655$15686))) ((lambda (g$655$15752) (if (g$655$12195 g$655$15752) (begin (quote #f) ((lambda (g$655$15754) (if g$655$15754 (begin (quote #f) ((lambda (g$655$15756) (if g$655$15756 (begin (quote #f) (append g$655$15754 g$655$15756)) (quote #f))) ((lambda (g$655$15758) (if (g$655$12195 g$655$15758) (begin (quote #f) ((lambda (g$655$15760) (if g$655$15760 (begin (quote #f) ((lambda (g$655$15762) (if g$655$15762 (begin (quote #f) (append g$655$15760 g$655$15762)) (quote #f))) ((lambda (g$655$15764) (if (g$655$12195 g$655$15764) (begin (quote #f) ((lambda (g$655$15766) (if g$655$15766 (begin (quote #f) ((lambda (g$655$15768) (if g$655$15768 (begin (quote #f) (append g$655$15766 g$655$15768)) (quote #f))) ((lambda (g$655$15770) (if (equal? (g$655$12229 g$655$15770) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15764)))) (quote #f))) ((lambda (g$655$15772) (list g$655$15772)) (g$655$12203 g$655$15764)))) (quote #f))) (g$655$12207 g$655$15758)))) (quote #f))) ((lambda (g$655$15774) (if (g$655$12209 g$655$15774) (if (g$655$12217 g$655$15774 (g$655$12639 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$15758)))) (quote #f))) (g$655$12207 g$655$15752)))) (quote #f))) ((lambda (g$655$15776) (list g$655$15776)) (g$655$12203 g$655$15752)))) (quote #f))) g$655$15686))) g$655$15682))) ((lambda (g$655$15786) (if (g$655$12195 g$655$15786) (begin (quote #f) ((lambda (g$655$15788) (if g$655$15788 (begin (quote #f) ((lambda (g$655$15790) (if g$655$15790 (begin (quote #f) (append g$655$15788 g$655$15790)) (quote #f))) ((lambda (g$655$15792) (if (g$655$12195 g$655$15792) (begin (quote #f) ((lambda (g$655$15794) (if g$655$15794 (begin (quote #f) ((lambda (g$655$15796) (if g$655$15796 (begin (quote #f) (append g$655$15794 g$655$15796)) (quote #f))) ((letrec ((g$655$15798 (lambda (g$655$15800) (if (g$655$12195 g$655$15800) ((lambda (g$655$15802) (if g$655$15802 (begin (quote #f) ((lambda (g$655$15804) (if g$655$15804 (begin (quote #f) (map cons g$655$15802 g$655$15804)) (quote #f))) (g$655$15798 (g$655$12207 g$655$15800)))) (quote #f))) ((lambda (g$655$15806) (list g$655$15806)) (g$655$12203 g$655$15800))) (if (g$655$12199 g$655$15800) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$15798) (g$655$12207 g$655$15792)))) (quote #f))) ((lambda (g$655$15808) (list g$655$15808)) (g$655$12203 g$655$15792)))) (quote #f))) (g$655$12207 g$655$15786)))) (quote #f))) ((lambda (g$655$15810) (if (g$655$12209 g$655$15810) (if (g$655$12217 g$655$15810 (g$655$12639 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$15786)))) (quote #f))) g$655$15682))) g$655$15549) ((lambda (g$655$15552) ((lambda (g$655$15554) (if (if g$655$15554 (begin (quote #f) (apply (lambda (g$655$15653 g$655$15654) (quote #t)) g$655$15554)) (quote #f)) (apply (lambda (g$655$15649 g$655$15650) (error (quote expander) (quote #3#) (quote "incorrect position of keyword else") (g$655$12227 g$655$15536 (quote ())))) g$655$15554) ((lambda (g$655$15556) ((lambda (g$655$15558) (if (if g$655$15558 (begin (quote #f) (apply (lambda (g$655$15619 g$655$15620) (quote #t)) g$655$15558)) (quote #f)) (apply (lambda (g$655$15615 g$655$15616) (list (quote let) (list (list (quote t) g$655$15615)) (list (quote if) (quote t) (cons g$655$15616 (quote (t))) (g$655$15546 (car g$655$15550) (cdr g$655$15550))))) g$655$15558) ((lambda (g$655$15560) ((lambda (g$655$15562) (if (if g$655$15562 (begin (quote #f) (apply (lambda (g$655$15602) (quote #t)) g$655$15562)) (quote #f)) (apply (lambda (g$655$15600) (list (quote or) g$655$15600 (g$655$15546 (car g$655$15550) (cdr g$655$15550)))) g$655$15562) ((lambda (g$655$15564) ((lambda (g$655$15566) (if (if g$655$15566 (begin (quote #f) (apply (lambda (g$655$15579 g$655$15580) (quote #t)) g$655$15566)) (quote #f)) (apply (lambda (g$655$15575 g$655$15576) (list (quote if) g$655$15575 (cons (quote begin) g$655$15576) (g$655$15546 (car g$655$15550) (cdr g$655$15550)))) g$655$15566) ((lambda (g$655$15568) ((lambda (g$655$15570) (if (if g$655$15570 (begin (quote #f) (apply (lambda () (quote #t)) g$655$15570)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "invalid last clause") (g$655$12227 g$655$15536 (quote ())))) g$655$15570) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15568 (quote ()))))) ((lambda (g$655$15572) (quote ())) g$655$15568))) g$655$15564))) ((lambda (g$655$15582) (if (g$655$12195 g$655$15582) (begin (quote #f) ((lambda (g$655$15584) (if g$655$15584 (begin (quote #f) ((lambda (g$655$15586) (if g$655$15586 (begin (quote #f) (append g$655$15584 g$655$15586)) (quote #f))) ((letrec ((g$655$15588 (lambda (g$655$15590) (if (g$655$12195 g$655$15590) ((lambda (g$655$15592) (if g$655$15592 (begin (quote #f) ((lambda (g$655$15594) (if g$655$15594 (begin (quote #f) (map cons g$655$15592 g$655$15594)) (quote #f))) (g$655$15588 (g$655$12207 g$655$15590)))) (quote #f))) ((lambda (g$655$15596) (list g$655$15596)) (g$655$12203 g$655$15590))) (if (g$655$12199 g$655$15590) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$15588) (g$655$12207 g$655$15582)))) (quote #f))) ((lambda (g$655$15598) (list g$655$15598)) (g$655$12203 g$655$15582)))) (quote #f))) g$655$15564))) g$655$15560))) ((lambda (g$655$15604) (if (g$655$12195 g$655$15604) (begin (quote #f) ((lambda (g$655$15606) (if g$655$15606 (begin (quote #f) ((lambda (g$655$15608) (if g$655$15608 (begin (quote #f) (append g$655$15606 g$655$15608)) (quote #f))) ((lambda (g$655$15610) (if (equal? (g$655$12229 g$655$15610) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15604)))) (quote #f))) ((lambda (g$655$15612) (list g$655$15612)) (g$655$12203 g$655$15604)))) (quote #f))) g$655$15560))) g$655$15556))) ((lambda (g$655$15622) (if (g$655$12195 g$655$15622) (begin (quote #f) ((lambda (g$655$15624) (if g$655$15624 (begin (quote #f) ((lambda (g$655$15626) (if g$655$15626 (begin (quote #f) (append g$655$15624 g$655$15626)) (quote #f))) ((lambda (g$655$15628) (if (g$655$12195 g$655$15628) (begin (quote #f) ((lambda (g$655$15630) (if g$655$15630 (begin (quote #f) ((lambda (g$655$15632) (if g$655$15632 (begin (quote #f) (append g$655$15630 g$655$15632)) (quote #f))) ((lambda (g$655$15634) (if (g$655$12195 g$655$15634) (begin (quote #f) ((lambda (g$655$15636) (if g$655$15636 (begin (quote #f) ((lambda (g$655$15638) (if g$655$15638 (begin (quote #f) (append g$655$15636 g$655$15638)) (quote #f))) ((lambda (g$655$15640) (if (equal? (g$655$12229 g$655$15640) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15634)))) (quote #f))) ((lambda (g$655$15642) (list g$655$15642)) (g$655$12203 g$655$15634)))) (quote #f))) (g$655$12207 g$655$15628)))) (quote #f))) ((lambda (g$655$15644) (if (g$655$12209 g$655$15644) (if (g$655$12217 g$655$15644 (g$655$12639 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$15628)))) (quote #f))) (g$655$12207 g$655$15622)))) (quote #f))) ((lambda (g$655$15646) (list g$655$15646)) (g$655$12203 g$655$15622)))) (quote #f))) g$655$15556))) g$655$15552))) ((lambda (g$655$15656) (if (g$655$12195 g$655$15656) (begin (quote #f) ((lambda (g$655$15658) (if g$655$15658 (begin (quote #f) ((lambda (g$655$15660) (if g$655$15660 (begin (quote #f) (append g$655$15658 g$655$15660)) (quote #f))) ((lambda (g$655$15662) (if (g$655$12195 g$655$15662) (begin (quote #f) ((lambda (g$655$15664) (if g$655$15664 (begin (quote #f) ((lambda (g$655$15666) (if g$655$15666 (begin (quote #f) (append g$655$15664 g$655$15666)) (quote #f))) ((letrec ((g$655$15668 (lambda (g$655$15670) (if (g$655$12195 g$655$15670) ((lambda (g$655$15672) (if g$655$15672 (begin (quote #f) ((lambda (g$655$15674) (if g$655$15674 (begin (quote #f) (map cons g$655$15672 g$655$15674)) (quote #f))) (g$655$15668 (g$655$12207 g$655$15670)))) (quote #f))) ((lambda (g$655$15676) (list g$655$15676)) (g$655$12203 g$655$15670))) (if (g$655$12199 g$655$15670) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$655$15668) (g$655$12207 g$655$15662)))) (quote #f))) ((lambda (g$655$15678) (list g$655$15678)) (g$655$12203 g$655$15662)))) (quote #f))) (g$655$12207 g$655$15656)))) (quote #f))) ((lambda (g$655$15680) (if (g$655$12209 g$655$15680) (if (g$655$12217 g$655$15680 (g$655$12639 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$15656)))) (quote #f))) g$655$15552))) g$655$15549))))) (g$655$15546 g$655$15543 g$655$15544)))) g$655$15540) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15538 (quote ()))))) ((lambda (g$655$15816) (if (g$655$12195 g$655$15816) (begin (quote #f) ((lambda (g$655$15818) (if g$655$15818 (begin (quote #f) ((lambda (g$655$15820) (if g$655$15820 (begin (quote #f) (append g$655$15818 g$655$15820)) (quote #f))) ((lambda (g$655$15822) (if (g$655$12195 g$655$15822) (begin (quote #f) ((lambda (g$655$15824) (if g$655$15824 (begin (quote #f) ((lambda (g$655$15826) (if g$655$15826 (begin (quote #f) (append g$655$15824 g$655$15826)) (quote #f))) ((letrec ((g$655$15828 (lambda (g$655$15830) (if (g$655$12195 g$655$15830) ((lambda (g$655$15832) (if g$655$15832 (begin (quote #f) ((lambda (g$655$15834) (if g$655$15834 (begin (quote #f) (map cons g$655$15832 g$655$15834)) (quote #f))) (g$655$15828 (g$655$12207 g$655$15830)))) (quote #f))) ((lambda (g$655$15836) (list g$655$15836)) (g$655$12203 g$655$15830))) (if (g$655$12199 g$655$15830) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$655$15828) (g$655$12207 g$655$15822)))) (quote #f))) ((lambda (g$655$15838) (list g$655$15838)) (g$655$12203 g$655$15822)))) (quote #f))) (g$655$12207 g$655$15816)))) (quote #f))) ((lambda (g$655$15840) (quote ())) (g$655$12203 g$655$15816)))) (quote #f))) g$655$15538))) g$655$15536))) (set! g$655$12699 (lambda (g$655$15842) ((lambda (g$655$15844) ((lambda (g$655$15846) (if (if g$655$15846 (begin (quote #f) (apply (lambda (g$655$15861 g$655$15862) (quote #t)) g$655$15846)) (quote #f)) (apply (lambda (g$655$15849 g$655$15850) ((lambda (g$655$15852) (begin (if (string? g$655$15852) (void) (error (quote expander) (quote #5#) (g$655$12229 g$655$15842))) (with-input-from-file g$655$15852 (lambda () (letrec ((g$655$15854 (lambda (g$655$15856) ((lambda (g$655$15858) (if (eof-object? g$655$15858) (cons (g$655$12669 (quote begin)) (g$655$12175 g$655$15849 (reverse g$655$15856))) (g$655$15854 (cons g$655$15858 g$655$15856)))) (read))))) (g$655$15854 (quote ()))))))) (g$655$12229 g$655$15850))) g$655$15846) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15844 (quote ()))))) ((lambda (g$655$15864) (if (g$655$12195 g$655$15864) (begin (quote #f) ((lambda (g$655$15866) (if g$655$15866 (begin (quote #f) ((lambda (g$655$15868) (if g$655$15868 (begin (quote #f) (append g$655$15866 g$655$15868)) (quote #f))) ((lambda (g$655$15870) (if (g$655$12195 g$655$15870) (begin (quote #f) ((lambda (g$655$15872) (if g$655$15872 (begin (quote #f) ((lambda (g$655$15874) (if g$655$15874 (begin (quote #f) (append g$655$15872 g$655$15874)) (quote #f))) ((lambda (g$655$15876) (if (equal? (g$655$12229 g$655$15876) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15870)))) (quote #f))) ((lambda (g$655$15878) (list g$655$15878)) (g$655$12203 g$655$15870)))) (quote #f))) (g$655$12207 g$655$15864)))) (quote #f))) ((lambda (g$655$15880) (list g$655$15880)) (g$655$12203 g$655$15864)))) (quote #f))) g$655$15844))) g$655$15842))) (set! g$655$12701 (lambda (g$655$15882) ((lambda (g$655$15884) ((lambda (g$655$15886) (if (if g$655$15886 (begin (quote #f) (apply (lambda (g$655$15902 g$655$15903 g$655$15904) (quote #t)) g$655$15886)) (quote #f)) (apply (lambda (g$655$15890 g$655$15891 g$655$15892) (begin (if (for-all (lambda (g$655$15894) (if (g$655$12209 g$655$15894) (if (not (g$655$12217 g$655$15894 (g$655$12639 (quote ...)))) (begin (quote #f) (not (g$655$12217 g$655$15894 (g$655$12639 (quote _))))) (quote #f)) (quote #f))) g$655$15890) (void) (error (quote expander) (quote #3#) (quote "invalid literals") (g$655$12227 g$655$15882 (quote ())))) (g$655$12669 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons g$655$15890 (map (lambda (g$655$15897 g$655$15898) (list g$655$15897 (list (quote syntax) g$655$15898))) g$655$15891 g$655$15892)))))))) g$655$15886) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$15884 (quote ()))))) ((lambda (g$655$15906) (if (g$655$12195 g$655$15906) (begin (quote #f) ((lambda (g$655$15908) (if g$655$15908 (begin (quote #f) ((lambda (g$655$15910) (if g$655$15910 (begin (quote #f) (append g$655$15908 g$655$15910)) (quote #f))) ((lambda (g$655$15912) (if (g$655$12195 g$655$15912) (begin (quote #f) ((lambda (g$655$15914) (if g$655$15914 (begin (quote #f) ((lambda (g$655$15916) (if g$655$15916 (begin (quote #f) (append g$655$15914 g$655$15916)) (quote #f))) ((letrec ((g$655$15918 (lambda (g$655$15920) (if (g$655$12195 g$655$15920) ((lambda (g$655$15922) (if g$655$15922 (begin (quote #f) ((lambda (g$655$15924) (if g$655$15924 (begin (quote #f) (map cons g$655$15922 g$655$15924)) (quote #f))) (g$655$15918 (g$655$12207 g$655$15920)))) (quote #f))) ((lambda (g$655$15926) (if (g$655$12195 g$655$15926) (begin (quote #f) ((lambda (g$655$15928) (if g$655$15928 (begin (quote #f) ((lambda (g$655$15930) (if g$655$15930 (begin (quote #f) (append g$655$15928 g$655$15930)) (quote #f))) ((lambda (g$655$15932) (if (g$655$12195 g$655$15932) (begin (quote #f) ((lambda (g$655$15934) (if g$655$15934 (begin (quote #f) ((lambda (g$655$15936) (if g$655$15936 (begin (quote #f) (append g$655$15934 g$655$15936)) (quote #f))) ((lambda (g$655$15938) (if (equal? (g$655$12229 g$655$15938) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$15932)))) (quote #f))) ((lambda (g$655$15940) (list g$655$15940)) (g$655$12203 g$655$15932)))) (quote #f))) (g$655$12207 g$655$15926)))) (quote #f))) ((lambda (g$655$15942) (list g$655$15942)) (g$655$12203 g$655$15926)))) (quote #f))) (g$655$12203 g$655$15920))) (if (g$655$12199 g$655$15920) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) g$655$15918) (g$655$12207 g$655$15912)))) (quote #f))) ((letrec ((g$655$15944 (lambda (g$655$15946) (if (g$655$12195 g$655$15946) ((lambda (g$655$15948) (if g$655$15948 (begin (quote #f) ((lambda (g$655$15950) (if g$655$15950 (begin (quote #f) (map cons g$655$15948 g$655$15950)) (quote #f))) (g$655$15944 (g$655$12207 g$655$15946)))) (quote #f))) ((lambda (g$655$15952) (list g$655$15952)) (g$655$12203 g$655$15946))) (if (g$655$12199 g$655$15946) (list (begin (quote lits) (quote ()))) (quote #f)))))) g$655$15944) (g$655$12203 g$655$15912)))) (quote #f))) (g$655$12207 g$655$15906)))) (quote #f))) ((lambda (g$655$15954) (quote ())) (g$655$12203 g$655$15906)))) (quote #f))) g$655$15884))) g$655$15882))) (set! g$655$12703 ((lambda () ((lambda (g$655$15991 g$655$15993 g$655$15995 g$655$15997 g$655$15999 g$655$16001) (begin (set! g$655$15991 (lambda (g$655$16642 g$655$16643) (letrec ((g$655$16645 (lambda (g$655$16647) (if (null? g$655$16647) g$655$16643 (g$655$15993 (car g$655$16647) (g$655$16645 (cdr g$655$16647))))))) (g$655$16645 g$655$16642)))) (set! g$655$15993 (lambda (g$655$16536 g$655$16537) ((lambda (g$655$16539) ((lambda (g$655$16541) (if (if g$655$16541 (begin (quote #f) (apply (lambda (g$655$16621) (quote #t)) g$655$16541)) (quote #f)) (apply (lambda (g$655$16575) ((lambda (g$655$16577) ((lambda (g$655$16579) (if (if g$655$16579 (begin (quote #f) (apply (lambda (g$655$16601) (quote #t)) g$655$16579)) (quote #f)) (apply (lambda (g$655$16599) (list (g$655$12639 (quote quote)) (cons g$655$16599 g$655$16575))) g$655$16579) ((lambda (g$655$16581) ((lambda (g$655$16583) (if (if g$655$16583 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16583)) (quote #f)) (apply (lambda () ((lambda (g$655$16585) ((lambda (g$655$16587) (if (if g$655$16587 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16587)) (quote #f)) (apply (lambda () (list (g$655$12639 (quote list)) g$655$16536)) g$655$16587) ((lambda (g$655$16589) ((lambda (g$655$16591) (if (if g$655$16591 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16591)) (quote #f)) (apply (lambda () (list (g$655$12639 (quote cons)) g$655$16536 g$655$16537)) g$655$16591) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16589 (quote ()))))) ((lambda (g$655$16593) (quote ())) g$655$16589))) g$655$16585))) ((lambda (g$655$16595) (if (equal? (g$655$12229 g$655$16595) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$655$16585))) g$655$16575)) g$655$16583) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16581 (quote ()))))) ((lambda (g$655$16597) (quote ())) g$655$16581))) g$655$16577))) ((lambda (g$655$16603) (if (g$655$12195 g$655$16603) (begin (quote #f) ((lambda (g$655$16605) (if g$655$16605 (begin (quote #f) ((lambda (g$655$16607) (if g$655$16607 (begin (quote #f) (append g$655$16605 g$655$16607)) (quote #f))) ((lambda (g$655$16609) (if (g$655$12195 g$655$16609) (begin (quote #f) ((lambda (g$655$16611) (if g$655$16611 (begin (quote #f) ((lambda (g$655$16613) (if g$655$16613 (begin (quote #f) (append g$655$16611 g$655$16613)) (quote #f))) ((lambda (g$655$16615) (if (equal? (g$655$12229 g$655$16615) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16609)))) (quote #f))) ((lambda (g$655$16617) (list g$655$16617)) (g$655$12203 g$655$16609)))) (quote #f))) (g$655$12207 g$655$16603)))) (quote #f))) ((lambda (g$655$16619) (if (g$655$12209 g$655$16619) (if (g$655$12217 g$655$16619 (g$655$12639 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16603)))) (quote #f))) g$655$16577))) g$655$16536)) g$655$16541) ((lambda (g$655$16543) ((lambda (g$655$16545) (if (if g$655$16545 (begin (quote #f) (apply (lambda (g$655$16555) (quote #t)) g$655$16545)) (quote #f)) (apply (lambda (g$655$16553) (cons* (g$655$12639 (quote list)) g$655$16536 g$655$16553)) g$655$16545) ((lambda (g$655$16547) ((lambda (g$655$16549) (if (if g$655$16549 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16549)) (quote #f)) (apply (lambda () (list (g$655$12639 (quote cons)) g$655$16536 g$655$16537)) g$655$16549) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16547 (quote ()))))) ((lambda (g$655$16551) (quote ())) g$655$16547))) g$655$16543))) ((lambda (g$655$16557) (if (g$655$12195 g$655$16557) (begin (quote #f) ((lambda (g$655$16559) (if g$655$16559 (begin (quote #f) ((lambda (g$655$16561) (if g$655$16561 (begin (quote #f) (append g$655$16559 g$655$16561)) (quote #f))) ((letrec ((g$655$16563 (lambda (g$655$16565) (if (g$655$12195 g$655$16565) ((lambda (g$655$16567) (if g$655$16567 (begin (quote #f) ((lambda (g$655$16569) (if g$655$16569 (begin (quote #f) (map cons g$655$16567 g$655$16569)) (quote #f))) (g$655$16563 (g$655$12207 g$655$16565)))) (quote #f))) ((lambda (g$655$16571) (list g$655$16571)) (g$655$12203 g$655$16565))) (if (g$655$12199 g$655$16565) (list (begin (quote stuff) (quote ()))) (quote #f)))))) g$655$16563) (g$655$12207 g$655$16557)))) (quote #f))) ((lambda (g$655$16573) (if (g$655$12209 g$655$16573) (if (g$655$12217 g$655$16573 (g$655$12639 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16557)))) (quote #f))) g$655$16543))) g$655$16539))) ((lambda (g$655$16623) (if (g$655$12195 g$655$16623) (begin (quote #f) ((lambda (g$655$16625) (if g$655$16625 (begin (quote #f) ((lambda (g$655$16627) (if g$655$16627 (begin (quote #f) (append g$655$16625 g$655$16627)) (quote #f))) ((lambda (g$655$16629) (if (g$655$12195 g$655$16629) (begin (quote #f) ((lambda (g$655$16631) (if g$655$16631 (begin (quote #f) ((lambda (g$655$16633) (if g$655$16633 (begin (quote #f) (append g$655$16631 g$655$16633)) (quote #f))) ((lambda (g$655$16635) (if (equal? (g$655$12229 g$655$16635) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16629)))) (quote #f))) ((lambda (g$655$16637) (list g$655$16637)) (g$655$12203 g$655$16629)))) (quote #f))) (g$655$12207 g$655$16623)))) (quote #f))) ((lambda (g$655$16639) (if (g$655$12209 g$655$16639) (if (g$655$12217 g$655$16639 (g$655$12639 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16623)))) (quote #f))) g$655$16539))) g$655$16537))) (set! g$655$15995 (lambda (g$655$16470 g$655$16471) ((lambda (g$655$16473) (if (null? g$655$16473) (list (g$655$12639 (quote quote)) (quote ())) (if (null? (cdr g$655$16473)) (car g$655$16473) (cons* (g$655$12639 (quote append)) g$655$16473)))) (letrec ((g$655$16475 (lambda (g$655$16477) (if (null? g$655$16477) ((lambda (g$655$16507) ((lambda (g$655$16509) (if (if g$655$16509 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16509)) (quote #f)) (apply (lambda () (quote ())) g$655$16509) ((lambda (g$655$16511) ((lambda (g$655$16513) (if (if g$655$16513 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16513)) (quote #f)) (apply (lambda () (list g$655$16471)) g$655$16513) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16511 (quote ()))))) ((lambda (g$655$16515) (quote ())) g$655$16511))) g$655$16507))) ((lambda (g$655$16517) (if (g$655$12195 g$655$16517) (begin (quote #f) ((lambda (g$655$16519) (if g$655$16519 (begin (quote #f) ((lambda (g$655$16521) (if g$655$16521 (begin (quote #f) (append g$655$16519 g$655$16521)) (quote #f))) ((lambda (g$655$16523) (if (g$655$12195 g$655$16523) (begin (quote #f) ((lambda (g$655$16525) (if g$655$16525 (begin (quote #f) ((lambda (g$655$16527) (if g$655$16527 (begin (quote #f) (append g$655$16525 g$655$16527)) (quote #f))) ((lambda (g$655$16529) (if (equal? (g$655$12229 g$655$16529) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16523)))) (quote #f))) ((lambda (g$655$16531) (if (equal? (g$655$12229 g$655$16531) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12203 g$655$16523)))) (quote #f))) (g$655$12207 g$655$16517)))) (quote #f))) ((lambda (g$655$16533) (if (g$655$12209 g$655$16533) (if (g$655$12217 g$655$16533 (g$655$12639 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16517)))) (quote #f))) g$655$16507))) g$655$16471) ((lambda (g$655$16479) ((lambda (g$655$16481) (if (if g$655$16481 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16481)) (quote #f)) (apply (lambda () (g$655$16475 (cdr g$655$16477))) g$655$16481) ((lambda (g$655$16483) ((lambda (g$655$16485) (if (if g$655$16485 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16485)) (quote #f)) (apply (lambda () (cons (car g$655$16477) (g$655$16475 (cdr g$655$16477)))) g$655$16485) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16483 (quote ()))))) ((lambda (g$655$16487) (quote ())) g$655$16483))) g$655$16479))) ((lambda (g$655$16489) (if (g$655$12195 g$655$16489) (begin (quote #f) ((lambda (g$655$16491) (if g$655$16491 (begin (quote #f) ((lambda (g$655$16493) (if g$655$16493 (begin (quote #f) (append g$655$16491 g$655$16493)) (quote #f))) ((lambda (g$655$16495) (if (g$655$12195 g$655$16495) (begin (quote #f) ((lambda (g$655$16497) (if g$655$16497 (begin (quote #f) ((lambda (g$655$16499) (if g$655$16499 (begin (quote #f) (append g$655$16497 g$655$16499)) (quote #f))) ((lambda (g$655$16501) (if (equal? (g$655$12229 g$655$16501) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16495)))) (quote #f))) ((lambda (g$655$16503) (if (equal? (g$655$12229 g$655$16503) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12203 g$655$16495)))) (quote #f))) (g$655$12207 g$655$16489)))) (quote #f))) ((lambda (g$655$16505) (if (g$655$12209 g$655$16505) (if (g$655$12217 g$655$16505 (g$655$12639 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16489)))) (quote #f))) g$655$16479))) (car g$655$16477)))))) (g$655$16475 g$655$16470))))) (set! g$655$15997 (lambda (g$655$16309) ((lambda (g$655$16311) ((lambda (g$655$16313) ((lambda (g$655$16315) (if (if g$655$16315 (begin (quote #f) (apply (lambda (g$655$16441) (quote #t)) g$655$16315)) (quote #f)) (apply (lambda (g$655$16439) (list (g$655$12639 (quote quote)) (list->vector g$655$16439))) g$655$16315) ((lambda (g$655$16317) ((lambda (g$655$16319) (if (if g$655$16319 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16319)) (quote #f)) (apply (lambda () (letrec ((g$655$16321 (lambda (g$655$16324 g$655$16325) ((lambda (g$655$16327) ((lambda (g$655$16329) (if (if g$655$16329 (begin (quote #f) (apply (lambda (g$655$16407) (quote #t)) g$655$16329)) (quote #f)) (apply (lambda (g$655$16403) (g$655$16325 (map (lambda (g$655$16405) (list (g$655$12639 (quote quote)) g$655$16405)) g$655$16403))) g$655$16329) ((lambda (g$655$16331) ((lambda (g$655$16333) (if (if g$655$16333 (begin (quote #f) (apply (lambda (g$655$16383) (quote #t)) g$655$16333)) (quote #f)) (apply (lambda (g$655$16381) (g$655$16325 g$655$16381)) g$655$16333) ((lambda (g$655$16335) ((lambda (g$655$16337) (if (if g$655$16337 (begin (quote #f) (apply (lambda (g$655$16352 g$655$16353) (quote #t)) g$655$16337)) (quote #f)) (apply (lambda (g$655$16346 g$655$16347) (g$655$16321 g$655$16347 (lambda (g$655$16349) (g$655$16325 (cons g$655$16346 g$655$16349))))) g$655$16337) ((lambda (g$655$16339) ((lambda (g$655$16341) (if (if g$655$16341 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16341)) (quote #f)) (apply (lambda () (list (g$655$12639 (quote list->vector)) g$655$16311)) g$655$16341) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16339 (quote ()))))) ((lambda (g$655$16343) (quote ())) g$655$16339))) g$655$16335))) ((lambda (g$655$16355) (if (g$655$12195 g$655$16355) (begin (quote #f) ((lambda (g$655$16357) (if g$655$16357 (begin (quote #f) ((lambda (g$655$16359) (if g$655$16359 (begin (quote #f) (append g$655$16357 g$655$16359)) (quote #f))) ((lambda (g$655$16361) (if (g$655$12195 g$655$16361) (begin (quote #f) ((lambda (g$655$16363) (if g$655$16363 (begin (quote #f) ((lambda (g$655$16365) (if g$655$16365 (begin (quote #f) (append g$655$16363 g$655$16365)) (quote #f))) ((lambda (g$655$16367) (if (g$655$12195 g$655$16367) (begin (quote #f) ((lambda (g$655$16369) (if g$655$16369 (begin (quote #f) ((lambda (g$655$16371) (if g$655$16371 (begin (quote #f) (append g$655$16369 g$655$16371)) (quote #f))) ((lambda (g$655$16373) (if (equal? (g$655$12229 g$655$16373) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16367)))) (quote #f))) ((lambda (g$655$16375) (list g$655$16375)) (g$655$12203 g$655$16367)))) (quote #f))) (g$655$12207 g$655$16361)))) (quote #f))) ((lambda (g$655$16377) (list g$655$16377)) (g$655$12203 g$655$16361)))) (quote #f))) (g$655$12207 g$655$16355)))) (quote #f))) ((lambda (g$655$16379) (if (g$655$12209 g$655$16379) (if (g$655$12217 g$655$16379 (g$655$12639 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16355)))) (quote #f))) g$655$16335))) g$655$16331))) ((lambda (g$655$16385) (if (g$655$12195 g$655$16385) (begin (quote #f) ((lambda (g$655$16387) (if g$655$16387 (begin (quote #f) ((lambda (g$655$16389) (if g$655$16389 (begin (quote #f) (append g$655$16387 g$655$16389)) (quote #f))) ((letrec ((g$655$16391 (lambda (g$655$16393) (if (g$655$12195 g$655$16393) ((lambda (g$655$16395) (if g$655$16395 (begin (quote #f) ((lambda (g$655$16397) (if g$655$16397 (begin (quote #f) (map cons g$655$16395 g$655$16397)) (quote #f))) (g$655$16391 (g$655$12207 g$655$16393)))) (quote #f))) ((lambda (g$655$16399) (list g$655$16399)) (g$655$12203 g$655$16393))) (if (g$655$12199 g$655$16393) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$16391) (g$655$12207 g$655$16385)))) (quote #f))) ((lambda (g$655$16401) (if (g$655$12209 g$655$16401) (if (g$655$12217 g$655$16401 (g$655$12639 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16385)))) (quote #f))) g$655$16331))) g$655$16327))) ((lambda (g$655$16409) (if (g$655$12195 g$655$16409) (begin (quote #f) ((lambda (g$655$16411) (if g$655$16411 (begin (quote #f) ((lambda (g$655$16413) (if g$655$16413 (begin (quote #f) (append g$655$16411 g$655$16413)) (quote #f))) ((lambda (g$655$16415) (if (g$655$12195 g$655$16415) (begin (quote #f) ((lambda (g$655$16417) (if g$655$16417 (begin (quote #f) ((lambda (g$655$16419) (if g$655$16419 (begin (quote #f) (append g$655$16417 g$655$16419)) (quote #f))) ((lambda (g$655$16421) (if (equal? (g$655$12229 g$655$16421) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16415)))) (quote #f))) ((letrec ((g$655$16423 (lambda (g$655$16425) (if (g$655$12195 g$655$16425) ((lambda (g$655$16427) (if g$655$16427 (begin (quote #f) ((lambda (g$655$16429) (if g$655$16429 (begin (quote #f) (map cons g$655$16427 g$655$16429)) (quote #f))) (g$655$16423 (g$655$12207 g$655$16425)))) (quote #f))) ((lambda (g$655$16431) (list g$655$16431)) (g$655$12203 g$655$16425))) (if (g$655$12199 g$655$16425) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$16423) (g$655$12203 g$655$16415)))) (quote #f))) (g$655$12207 g$655$16409)))) (quote #f))) ((lambda (g$655$16433) (if (g$655$12209 g$655$16433) (if (g$655$12217 g$655$16433 (g$655$12639 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16409)))) (quote #f))) g$655$16327))) g$655$16324)))) (g$655$16321 g$655$16309 (lambda (g$655$16435) (cons* (g$655$12639 (quote vector)) g$655$16435))))) g$655$16319) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16317 (quote ()))))) ((lambda (g$655$16437) (quote ())) g$655$16317))) g$655$16313))) ((lambda (g$655$16443) (if (g$655$12195 g$655$16443) (begin (quote #f) ((lambda (g$655$16445) (if g$655$16445 (begin (quote #f) ((lambda (g$655$16447) (if g$655$16447 (begin (quote #f) (append g$655$16445 g$655$16447)) (quote #f))) ((lambda (g$655$16449) (if (g$655$12195 g$655$16449) (begin (quote #f) ((lambda (g$655$16451) (if g$655$16451 (begin (quote #f) ((lambda (g$655$16453) (if g$655$16453 (begin (quote #f) (append g$655$16451 g$655$16453)) (quote #f))) ((lambda (g$655$16455) (if (equal? (g$655$12229 g$655$16455) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16449)))) (quote #f))) ((letrec ((g$655$16457 (lambda (g$655$16459) (if (g$655$12195 g$655$16459) ((lambda (g$655$16461) (if g$655$16461 (begin (quote #f) ((lambda (g$655$16463) (if g$655$16463 (begin (quote #f) (map cons g$655$16461 g$655$16463)) (quote #f))) (g$655$16457 (g$655$12207 g$655$16459)))) (quote #f))) ((lambda (g$655$16465) (list g$655$16465)) (g$655$12203 g$655$16459))) (if (g$655$12199 g$655$16459) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$16457) (g$655$12203 g$655$16449)))) (quote #f))) (g$655$12207 g$655$16443)))) (quote #f))) ((lambda (g$655$16467) (if (g$655$12209 g$655$16467) (if (g$655$12217 g$655$16467 (g$655$12639 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16443)))) (quote #f))) g$655$16313))) g$655$16311)) g$655$16309))) (set! g$655$15999 (lambda (g$655$16216 g$655$16217) ((lambda (g$655$16219) ((lambda (g$655$16221) (if (if g$655$16221 (begin (quote #f) (apply (lambda (g$655$16296 g$655$16297) (quote #t)) g$655$16221)) (quote #f)) (apply (lambda (g$655$16230 g$655$16231) ((lambda (g$655$16233) ((lambda (g$655$16235) (if (if g$655$16235 (begin (quote #f) (apply (lambda (g$655$16275) (quote #t)) g$655$16235)) (quote #f)) (apply (lambda (g$655$16273) (if (= g$655$16217 (quote 0)) (g$655$15991 g$655$16273 (g$655$15999 g$655$16231 g$655$16217)) (g$655$15993 (g$655$15993 (list (g$655$12639 (quote quote)) (quote unquote)) (g$655$16001 g$655$16273 (- g$655$16217 (quote 1)))) (g$655$15999 g$655$16231 g$655$16217)))) g$655$16235) ((lambda (g$655$16237) ((lambda (g$655$16239) (if (if g$655$16239 (begin (quote #f) (apply (lambda (g$655$16253) (quote #t)) g$655$16239)) (quote #f)) (apply (lambda (g$655$16251) (if (= g$655$16217 (quote 0)) (g$655$15995 g$655$16251 (g$655$15999 g$655$16231 g$655$16217)) (g$655$15993 (g$655$15993 (list (g$655$12639 (quote quote)) (quote unquote-splicing)) (g$655$16001 g$655$16251 (- g$655$16217 (quote 1)))) (g$655$15999 g$655$16231 g$655$16217)))) g$655$16239) ((lambda (g$655$16241) ((lambda (g$655$16243) (if (if g$655$16243 (begin (quote #f) (apply (lambda (g$655$16247) (quote #t)) g$655$16243)) (quote #f)) (apply (lambda (g$655$16245) (g$655$15993 (g$655$16001 g$655$16245 g$655$16217) (g$655$15999 g$655$16231 g$655$16217))) g$655$16243) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16241 (quote ()))))) ((lambda (g$655$16249) (list g$655$16249)) g$655$16241))) g$655$16237))) ((lambda (g$655$16255) (if (g$655$12195 g$655$16255) (begin (quote #f) ((lambda (g$655$16257) (if g$655$16257 (begin (quote #f) ((lambda (g$655$16259) (if g$655$16259 (begin (quote #f) (append g$655$16257 g$655$16259)) (quote #f))) ((letrec ((g$655$16261 (lambda (g$655$16263) (if (g$655$12195 g$655$16263) ((lambda (g$655$16265) (if g$655$16265 (begin (quote #f) ((lambda (g$655$16267) (if g$655$16267 (begin (quote #f) (map cons g$655$16265 g$655$16267)) (quote #f))) (g$655$16261 (g$655$12207 g$655$16263)))) (quote #f))) ((lambda (g$655$16269) (list g$655$16269)) (g$655$12203 g$655$16263))) (if (g$655$12199 g$655$16263) (list (begin (quote p) (quote ()))) (quote #f)))))) g$655$16261) (g$655$12207 g$655$16255)))) (quote #f))) ((lambda (g$655$16271) (if (g$655$12209 g$655$16271) (if (g$655$12217 g$655$16271 (g$655$12639 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16255)))) (quote #f))) g$655$16237))) g$655$16233))) ((lambda (g$655$16277) (if (g$655$12195 g$655$16277) (begin (quote #f) ((lambda (g$655$16279) (if g$655$16279 (begin (quote #f) ((lambda (g$655$16281) (if g$655$16281 (begin (quote #f) (append g$655$16279 g$655$16281)) (quote #f))) ((letrec ((g$655$16283 (lambda (g$655$16285) (if (g$655$12195 g$655$16285) ((lambda (g$655$16287) (if g$655$16287 (begin (quote #f) ((lambda (g$655$16289) (if g$655$16289 (begin (quote #f) (map cons g$655$16287 g$655$16289)) (quote #f))) (g$655$16283 (g$655$12207 g$655$16285)))) (quote #f))) ((lambda (g$655$16291) (list g$655$16291)) (g$655$12203 g$655$16285))) (if (g$655$12199 g$655$16285) (list (begin (quote p) (quote ()))) (quote #f)))))) g$655$16283) (g$655$12207 g$655$16277)))) (quote #f))) ((lambda (g$655$16293) (if (g$655$12209 g$655$16293) (if (g$655$12217 g$655$16293 (g$655$12639 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16277)))) (quote #f))) g$655$16233))) g$655$16230)) g$655$16221) ((lambda (g$655$16223) ((lambda (g$655$16225) (if (if g$655$16225 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16225)) (quote #f)) (apply (lambda () (list (g$655$12639 (quote quote)) (quote ()))) g$655$16225) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16223 (quote ()))))) ((lambda (g$655$16227) (if (equal? (g$655$12229 g$655$16227) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$655$16223))) g$655$16219))) ((lambda (g$655$16299) (if (g$655$12195 g$655$16299) (begin (quote #f) ((lambda (g$655$16301) (if g$655$16301 (begin (quote #f) ((lambda (g$655$16303) (if g$655$16303 (begin (quote #f) (append g$655$16301 g$655$16303)) (quote #f))) ((lambda (g$655$16305) (list g$655$16305)) (g$655$12207 g$655$16299)))) (quote #f))) ((lambda (g$655$16307) (list g$655$16307)) (g$655$12203 g$655$16299)))) (quote #f))) g$655$16219))) g$655$16216))) (set! g$655$16001 (lambda (g$655$16032 g$655$16033) ((lambda (g$655$16035) ((lambda (g$655$16037) (if (if g$655$16037 (begin (quote #f) (apply (lambda (g$655$16195) (quote #t)) g$655$16037)) (quote #f)) (apply (lambda (g$655$16193) (if (= g$655$16033 (quote 0)) g$655$16193 (g$655$15993 (list (g$655$12639 (quote quote)) (quote unquote)) (g$655$16001 (list g$655$16193) (- g$655$16033 (quote 1)))))) g$655$16037) ((lambda (g$655$16039) ((lambda (g$655$16041) (if (if g$655$16041 (begin (quote #f) (apply (lambda (g$655$16164 g$655$16165) (quote #t)) g$655$16041)) (quote #f)) (apply (lambda (g$655$16160 g$655$16161) (if (= g$655$16033 (quote 0)) (g$655$15991 g$655$16160 (g$655$16001 g$655$16161 g$655$16033)) (g$655$15993 (g$655$15993 (list (g$655$12639 (quote quote)) (quote unquote)) (g$655$16001 g$655$16160 (- g$655$16033 (quote 1)))) (g$655$16001 g$655$16161 g$655$16033)))) g$655$16041) ((lambda (g$655$16043) ((lambda (g$655$16045) (if (if g$655$16045 (begin (quote #f) (apply (lambda (g$655$16130 g$655$16131) (quote #t)) g$655$16045)) (quote #f)) (apply (lambda (g$655$16126 g$655$16127) (if (= g$655$16033 (quote 0)) (g$655$15995 g$655$16126 (g$655$16001 g$655$16127 g$655$16033)) (g$655$15993 (g$655$15993 (list (g$655$12639 (quote quote)) (quote unquote-splicing)) (g$655$16001 g$655$16126 (- g$655$16033 (quote 1)))) (g$655$16001 g$655$16127 g$655$16033)))) g$655$16045) ((lambda (g$655$16047) ((lambda (g$655$16049) (if (if g$655$16049 (begin (quote #f) (apply (lambda (g$655$16105) (quote #t)) g$655$16049)) (quote #f)) (apply (lambda (g$655$16103) (g$655$15993 (list (g$655$12639 (quote quote)) (quote quasiquote)) (g$655$16001 (list g$655$16103) (+ g$655$16033 (quote 1))))) g$655$16049) ((lambda (g$655$16051) ((lambda (g$655$16053) (if (if g$655$16053 (begin (quote #f) (apply (lambda (g$655$16090 g$655$16091) (quote #t)) g$655$16053)) (quote #f)) (apply (lambda (g$655$16086 g$655$16087) (g$655$15993 (g$655$16001 g$655$16086 g$655$16033) (g$655$16001 g$655$16087 g$655$16033))) g$655$16053) ((lambda (g$655$16055) ((lambda (g$655$16057) (if (if g$655$16057 (begin (quote #f) (apply (lambda (g$655$16071) (not (g$655$12161 g$655$16071))) g$655$16057)) (quote #f)) (apply (lambda (g$655$16069) (g$655$15997 (g$655$15999 g$655$16069 g$655$16033))) g$655$16057) ((lambda (g$655$16059) ((lambda (g$655$16061) (if (if g$655$16061 (begin (quote #f) (apply (lambda (g$655$16065) (quote #t)) g$655$16061)) (quote #f)) (apply (lambda (g$655$16063) (list (g$655$12639 (quote quote)) g$655$16063)) g$655$16061) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16059 (quote ()))))) ((lambda (g$655$16067) (list g$655$16067)) g$655$16059))) g$655$16055))) ((lambda (g$655$16073) (if (g$655$12197 g$655$16073) (begin (quote #f) ((letrec ((g$655$16075 (lambda (g$655$16077) (if (g$655$12195 g$655$16077) ((lambda (g$655$16079) (if g$655$16079 (begin (quote #f) ((lambda (g$655$16081) (if g$655$16081 (begin (quote #f) (map cons g$655$16079 g$655$16081)) (quote #f))) (g$655$16075 (g$655$12207 g$655$16077)))) (quote #f))) ((lambda (g$655$16083) (list g$655$16083)) (g$655$12203 g$655$16077))) (if (g$655$12199 g$655$16077) (list (begin (quote x) (quote ()))) (quote #f)))))) g$655$16075) (g$655$12193 g$655$16073))) (quote #f))) g$655$16055))) g$655$16051))) ((lambda (g$655$16093) (if (g$655$12195 g$655$16093) (begin (quote #f) ((lambda (g$655$16095) (if g$655$16095 (begin (quote #f) ((lambda (g$655$16097) (if g$655$16097 (begin (quote #f) (append g$655$16095 g$655$16097)) (quote #f))) ((lambda (g$655$16099) (list g$655$16099)) (g$655$12207 g$655$16093)))) (quote #f))) ((lambda (g$655$16101) (list g$655$16101)) (g$655$12203 g$655$16093)))) (quote #f))) g$655$16051))) g$655$16047))) ((lambda (g$655$16107) (if (g$655$12195 g$655$16107) (begin (quote #f) ((lambda (g$655$16109) (if g$655$16109 (begin (quote #f) ((lambda (g$655$16111) (if g$655$16111 (begin (quote #f) (append g$655$16109 g$655$16111)) (quote #f))) ((lambda (g$655$16113) (if (g$655$12195 g$655$16113) (begin (quote #f) ((lambda (g$655$16115) (if g$655$16115 (begin (quote #f) ((lambda (g$655$16117) (if g$655$16117 (begin (quote #f) (append g$655$16115 g$655$16117)) (quote #f))) ((lambda (g$655$16119) (if (equal? (g$655$12229 g$655$16119) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16113)))) (quote #f))) ((lambda (g$655$16121) (list g$655$16121)) (g$655$12203 g$655$16113)))) (quote #f))) (g$655$12207 g$655$16107)))) (quote #f))) ((lambda (g$655$16123) (if (g$655$12209 g$655$16123) (if (g$655$12217 g$655$16123 (g$655$12639 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16107)))) (quote #f))) g$655$16047))) g$655$16043))) ((lambda (g$655$16133) (if (g$655$12195 g$655$16133) (begin (quote #f) ((lambda (g$655$16135) (if g$655$16135 (begin (quote #f) ((lambda (g$655$16137) (if g$655$16137 (begin (quote #f) (append g$655$16135 g$655$16137)) (quote #f))) ((lambda (g$655$16139) (list g$655$16139)) (g$655$12207 g$655$16133)))) (quote #f))) ((lambda (g$655$16141) (if (g$655$12195 g$655$16141) (begin (quote #f) ((lambda (g$655$16143) (if g$655$16143 (begin (quote #f) ((lambda (g$655$16145) (if g$655$16145 (begin (quote #f) (append g$655$16143 g$655$16145)) (quote #f))) ((letrec ((g$655$16147 (lambda (g$655$16149) (if (g$655$12195 g$655$16149) ((lambda (g$655$16151) (if g$655$16151 (begin (quote #f) ((lambda (g$655$16153) (if g$655$16153 (begin (quote #f) (map cons g$655$16151 g$655$16153)) (quote #f))) (g$655$16147 (g$655$12207 g$655$16149)))) (quote #f))) ((lambda (g$655$16155) (list g$655$16155)) (g$655$12203 g$655$16149))) (if (g$655$12199 g$655$16149) (list (begin (quote p) (quote ()))) (quote #f)))))) g$655$16147) (g$655$12207 g$655$16141)))) (quote #f))) ((lambda (g$655$16157) (if (g$655$12209 g$655$16157) (if (g$655$12217 g$655$16157 (g$655$12639 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16141)))) (quote #f))) (g$655$12203 g$655$16133)))) (quote #f))) g$655$16043))) g$655$16039))) ((lambda (g$655$16167) (if (g$655$12195 g$655$16167) (begin (quote #f) ((lambda (g$655$16169) (if g$655$16169 (begin (quote #f) ((lambda (g$655$16171) (if g$655$16171 (begin (quote #f) (append g$655$16169 g$655$16171)) (quote #f))) ((lambda (g$655$16173) (list g$655$16173)) (g$655$12207 g$655$16167)))) (quote #f))) ((lambda (g$655$16175) (if (g$655$12195 g$655$16175) (begin (quote #f) ((lambda (g$655$16177) (if g$655$16177 (begin (quote #f) ((lambda (g$655$16179) (if g$655$16179 (begin (quote #f) (append g$655$16177 g$655$16179)) (quote #f))) ((letrec ((g$655$16181 (lambda (g$655$16183) (if (g$655$12195 g$655$16183) ((lambda (g$655$16185) (if g$655$16185 (begin (quote #f) ((lambda (g$655$16187) (if g$655$16187 (begin (quote #f) (map cons g$655$16185 g$655$16187)) (quote #f))) (g$655$16181 (g$655$12207 g$655$16183)))) (quote #f))) ((lambda (g$655$16189) (list g$655$16189)) (g$655$12203 g$655$16183))) (if (g$655$12199 g$655$16183) (list (begin (quote p) (quote ()))) (quote #f)))))) g$655$16181) (g$655$12207 g$655$16175)))) (quote #f))) ((lambda (g$655$16191) (if (g$655$12209 g$655$16191) (if (g$655$12217 g$655$16191 (g$655$12639 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16175)))) (quote #f))) (g$655$12203 g$655$16167)))) (quote #f))) g$655$16039))) g$655$16035))) ((lambda (g$655$16197) (if (g$655$12195 g$655$16197) (begin (quote #f) ((lambda (g$655$16199) (if g$655$16199 (begin (quote #f) ((lambda (g$655$16201) (if g$655$16201 (begin (quote #f) (append g$655$16199 g$655$16201)) (quote #f))) ((lambda (g$655$16203) (if (g$655$12195 g$655$16203) (begin (quote #f) ((lambda (g$655$16205) (if g$655$16205 (begin (quote #f) ((lambda (g$655$16207) (if g$655$16207 (begin (quote #f) (append g$655$16205 g$655$16207)) (quote #f))) ((lambda (g$655$16209) (if (equal? (g$655$12229 g$655$16209) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16203)))) (quote #f))) ((lambda (g$655$16211) (list g$655$16211)) (g$655$12203 g$655$16203)))) (quote #f))) (g$655$12207 g$655$16197)))) (quote #f))) ((lambda (g$655$16213) (if (g$655$12209 g$655$16213) (if (g$655$12217 g$655$16213 (g$655$12639 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16197)))) (quote #f))) g$655$16035))) g$655$16032))) (lambda (g$655$16003) ((lambda (g$655$16005) ((lambda (g$655$16007) (if (if g$655$16007 (begin (quote #f) (apply (lambda (g$655$16011) (quote #t)) g$655$16007)) (quote #f)) (apply (lambda (g$655$16009) (g$655$16001 g$655$16009 (quote 0))) g$655$16007) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16005 (quote ()))))) ((lambda (g$655$16013) (if (g$655$12195 g$655$16013) (begin (quote #f) ((lambda (g$655$16015) (if g$655$16015 (begin (quote #f) ((lambda (g$655$16017) (if g$655$16017 (begin (quote #f) (append g$655$16015 g$655$16017)) (quote #f))) ((lambda (g$655$16019) (if (g$655$12195 g$655$16019) (begin (quote #f) ((lambda (g$655$16021) (if g$655$16021 (begin (quote #f) ((lambda (g$655$16023) (if g$655$16023 (begin (quote #f) (append g$655$16021 g$655$16023)) (quote #f))) ((lambda (g$655$16025) (if (equal? (g$655$12229 g$655$16025) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16019)))) (quote #f))) ((lambda (g$655$16027) (list g$655$16027)) (g$655$12203 g$655$16019)))) (quote #f))) (g$655$12207 g$655$16013)))) (quote #f))) ((lambda (g$655$16029) (quote ())) (g$655$12203 g$655$16013)))) (quote #f))) g$655$16005))) g$655$16003)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$655$12705 ((lambda () ((lambda (g$655$16649) (begin (set! g$655$16649 (lambda (g$655$16686 g$655$16687) ((lambda (g$655$16689) ((lambda (g$655$16691) (if (if g$655$16691 (begin (quote #f) (apply (lambda (g$655$16881) (quote #t)) g$655$16691)) (quote #f)) (apply (lambda (g$655$16871) (if (= g$655$16687 (quote 0)) ((lambda (g$655$16879) (values (list g$655$16879) (list g$655$16871) g$655$16879)) (gensym)) (call-with-values (lambda () (g$655$16649 g$655$16871 (- g$655$16687 (quote 1)))) (lambda (g$655$16875 g$655$16876 g$655$16877) (values g$655$16875 g$655$16876 (list (quote unsyntax) g$655$16877)))))) g$655$16691) ((lambda (g$655$16693) ((lambda (g$655$16695) (if (if g$655$16695 (begin (quote #f) (apply (lambda () (= g$655$16687 (quote 0))) g$655$16695)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "incorrect use of unsyntax") (g$655$12227 g$655$16686 (quote ())))) g$655$16695) ((lambda (g$655$16697) ((lambda (g$655$16699) (if (if g$655$16699 (begin (quote #f) (apply (lambda (g$655$16840 g$655$16841) (quote #t)) g$655$16699)) (quote #f)) (apply (lambda (g$655$16822 g$655$16823) (call-with-values (lambda () (g$655$16649 g$655$16823 g$655$16687)) (lambda (g$655$16827 g$655$16828 g$655$16829) (if (= g$655$16687 (quote 0)) ((lambda (g$655$16837) (values (cons (cons g$655$16837 (quote (...))) g$655$16827) (cons g$655$16822 g$655$16828) (cons g$655$16837 (cons (quote ...) g$655$16829)))) (gensym)) (call-with-values (lambda () (g$655$16649 g$655$16822 (- g$655$16687 (quote 1)))) (lambda (g$655$16833 g$655$16834 g$655$16835) (values (append g$655$16833 g$655$16827) (append g$655$16834 g$655$16828) (cons (list (quote unsyntax-splicing) g$655$16835) g$655$16829)))))))) g$655$16699) ((lambda (g$655$16701) ((lambda (g$655$16703) (if (if g$655$16703 (begin (quote #f) (apply (lambda () (= g$655$16687 (quote 0))) g$655$16703)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "incorrect use of unsyntax-splicing") (g$655$12227 g$655$16686 (quote ())))) g$655$16703) ((lambda (g$655$16705) ((lambda (g$655$16707) (if (if g$655$16707 (begin (quote #f) (apply (lambda (g$655$16799) (quote #t)) g$655$16707)) (quote #f)) (apply (lambda (g$655$16791) (call-with-values (lambda () (g$655$16649 g$655$16791 (+ g$655$16687 (quote 1)))) (lambda (g$655$16795 g$655$16796 g$655$16797) (values g$655$16795 g$655$16796 (list (quote quasisyntax) g$655$16797))))) g$655$16707) ((lambda (g$655$16709) ((lambda (g$655$16711) (if (if g$655$16711 (begin (quote #f) (apply (lambda (g$655$16778 g$655$16779) (quote #t)) g$655$16711)) (quote #f)) (apply (lambda (g$655$16762 g$655$16763) (call-with-values (lambda () (g$655$16649 g$655$16762 g$655$16687)) (lambda (g$655$16770 g$655$16771 g$655$16772) (call-with-values (lambda () (g$655$16649 g$655$16763 g$655$16687)) (lambda (g$655$16773 g$655$16774 g$655$16775) (values (append g$655$16773 g$655$16770) (append g$655$16774 g$655$16771) (cons g$655$16772 g$655$16775))))))) g$655$16711) ((lambda (g$655$16713) ((lambda (g$655$16715) (if (if g$655$16715 (begin (quote #f) (apply (lambda (g$655$16747) (not (g$655$12161 g$655$16686))) g$655$16715)) (quote #f)) (apply (lambda (g$655$16723) (call-with-values (lambda () (letrec ((g$655$16725 (lambda (g$655$16727) (if (null? g$655$16727) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (g$655$16649 (car g$655$16727) g$655$16687)) (lambda (g$655$16731 g$655$16732 g$655$16733) (call-with-values (lambda () (g$655$16725 (cdr g$655$16727))) (lambda (g$655$16737 g$655$16738 g$655$16739) (values (append g$655$16731 g$655$16737) (append g$655$16732 g$655$16738) (cons g$655$16733 g$655$16739)))))))))) (g$655$16725 g$655$16723))) (lambda (g$655$16743 g$655$16744 g$655$16745) (values g$655$16743 g$655$16744 (list->vector g$655$16745))))) g$655$16715) ((lambda (g$655$16717) ((lambda (g$655$16719) (if (if g$655$16719 (begin (quote #f) (apply (lambda () (quote #t)) g$655$16719)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) g$655$16686)) g$655$16719) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16717 (quote ()))))) ((lambda (g$655$16721) (quote ())) g$655$16717))) g$655$16713))) ((lambda (g$655$16749) (if (g$655$12197 g$655$16749) (begin (quote #f) ((letrec ((g$655$16751 (lambda (g$655$16753) (if (g$655$12195 g$655$16753) ((lambda (g$655$16755) (if g$655$16755 (begin (quote #f) ((lambda (g$655$16757) (if g$655$16757 (begin (quote #f) (map cons g$655$16755 g$655$16757)) (quote #f))) (g$655$16751 (g$655$12207 g$655$16753)))) (quote #f))) ((lambda (g$655$16759) (list g$655$16759)) (g$655$12203 g$655$16753))) (if (g$655$12199 g$655$16753) (list (begin (quote x) (quote ()))) (quote #f)))))) g$655$16751) (g$655$12193 g$655$16749))) (quote #f))) g$655$16713))) g$655$16709))) ((lambda (g$655$16781) (if (g$655$12195 g$655$16781) (begin (quote #f) ((lambda (g$655$16783) (if g$655$16783 (begin (quote #f) ((lambda (g$655$16785) (if g$655$16785 (begin (quote #f) (append g$655$16783 g$655$16785)) (quote #f))) ((lambda (g$655$16787) (list g$655$16787)) (g$655$12207 g$655$16781)))) (quote #f))) ((lambda (g$655$16789) (list g$655$16789)) (g$655$12203 g$655$16781)))) (quote #f))) g$655$16709))) g$655$16705))) ((lambda (g$655$16801) (if (g$655$12195 g$655$16801) (begin (quote #f) ((lambda (g$655$16803) (if g$655$16803 (begin (quote #f) ((lambda (g$655$16805) (if g$655$16805 (begin (quote #f) (append g$655$16803 g$655$16805)) (quote #f))) ((lambda (g$655$16807) (if (g$655$12195 g$655$16807) (begin (quote #f) ((lambda (g$655$16809) (if g$655$16809 (begin (quote #f) ((lambda (g$655$16811) (if g$655$16811 (begin (quote #f) (append g$655$16809 g$655$16811)) (quote #f))) ((lambda (g$655$16813) (if (equal? (g$655$12229 g$655$16813) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16807)))) (quote #f))) ((lambda (g$655$16815) (list g$655$16815)) (g$655$12203 g$655$16807)))) (quote #f))) (g$655$12207 g$655$16801)))) (quote #f))) ((lambda (g$655$16817) (if (g$655$12209 g$655$16817) (if (g$655$12217 g$655$16817 (g$655$12639 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16801)))) (quote #f))) g$655$16705))) g$655$16701))) ((lambda (g$655$16819) (if (g$655$12209 g$655$16819) (if (g$655$12217 g$655$16819 (g$655$12639 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$655$16701))) g$655$16697))) ((lambda (g$655$16843) (if (g$655$12195 g$655$16843) (begin (quote #f) ((lambda (g$655$16845) (if g$655$16845 (begin (quote #f) ((lambda (g$655$16847) (if g$655$16847 (begin (quote #f) (append g$655$16845 g$655$16847)) (quote #f))) ((lambda (g$655$16849) (list g$655$16849)) (g$655$12207 g$655$16843)))) (quote #f))) ((lambda (g$655$16851) (if (g$655$12195 g$655$16851) (begin (quote #f) ((lambda (g$655$16853) (if g$655$16853 (begin (quote #f) ((lambda (g$655$16855) (if g$655$16855 (begin (quote #f) (append g$655$16853 g$655$16855)) (quote #f))) ((lambda (g$655$16857) (if (g$655$12195 g$655$16857) (begin (quote #f) ((lambda (g$655$16859) (if g$655$16859 (begin (quote #f) ((lambda (g$655$16861) (if g$655$16861 (begin (quote #f) (append g$655$16859 g$655$16861)) (quote #f))) ((lambda (g$655$16863) (if (equal? (g$655$12229 g$655$16863) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16857)))) (quote #f))) ((lambda (g$655$16865) (list g$655$16865)) (g$655$12203 g$655$16857)))) (quote #f))) (g$655$12207 g$655$16851)))) (quote #f))) ((lambda (g$655$16867) (if (g$655$12209 g$655$16867) (if (g$655$12217 g$655$16867 (g$655$12639 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16851)))) (quote #f))) (g$655$12203 g$655$16843)))) (quote #f))) g$655$16697))) g$655$16693))) ((lambda (g$655$16869) (if (g$655$12209 g$655$16869) (if (g$655$12217 g$655$16869 (g$655$12639 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$655$16693))) g$655$16689))) ((lambda (g$655$16883) (if (g$655$12195 g$655$16883) (begin (quote #f) ((lambda (g$655$16885) (if g$655$16885 (begin (quote #f) ((lambda (g$655$16887) (if g$655$16887 (begin (quote #f) (append g$655$16885 g$655$16887)) (quote #f))) ((lambda (g$655$16889) (if (g$655$12195 g$655$16889) (begin (quote #f) ((lambda (g$655$16891) (if g$655$16891 (begin (quote #f) ((lambda (g$655$16893) (if g$655$16893 (begin (quote #f) (append g$655$16891 g$655$16893)) (quote #f))) ((lambda (g$655$16895) (if (equal? (g$655$12229 g$655$16895) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16889)))) (quote #f))) ((lambda (g$655$16897) (list g$655$16897)) (g$655$12203 g$655$16889)))) (quote #f))) (g$655$12207 g$655$16883)))) (quote #f))) ((lambda (g$655$16899) (if (g$655$12209 g$655$16899) (if (g$655$12217 g$655$16899 (g$655$12639 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$655$12203 g$655$16883)))) (quote #f))) g$655$16689))) g$655$16686))) (lambda (g$655$16651) ((lambda (g$655$16653) ((lambda (g$655$16655) (if (if g$655$16655 (begin (quote #f) (apply (lambda (g$655$16665) (quote #t)) g$655$16655)) (quote #f)) (apply (lambda (g$655$16657) (call-with-values (lambda () (g$655$16649 g$655$16657 (quote 0))) (lambda (g$655$16661 g$655$16662 g$655$16663) (g$655$12669 (list (quote syntax-case) (cons (quote list) g$655$16662) (quote ()) (list g$655$16661 (list (quote syntax) g$655$16663))))))) g$655$16655) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16653 (quote ()))))) ((lambda (g$655$16667) (if (g$655$12195 g$655$16667) (begin (quote #f) ((lambda (g$655$16669) (if g$655$16669 (begin (quote #f) ((lambda (g$655$16671) (if g$655$16671 (begin (quote #f) (append g$655$16669 g$655$16671)) (quote #f))) ((lambda (g$655$16673) (if (g$655$12195 g$655$16673) (begin (quote #f) ((lambda (g$655$16675) (if g$655$16675 (begin (quote #f) ((lambda (g$655$16677) (if g$655$16677 (begin (quote #f) (append g$655$16675 g$655$16677)) (quote #f))) ((lambda (g$655$16679) (if (equal? (g$655$12229 g$655$16679) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16673)))) (quote #f))) ((lambda (g$655$16681) (list g$655$16681)) (g$655$12203 g$655$16673)))) (quote #f))) (g$655$12207 g$655$16667)))) (quote #f))) ((lambda (g$655$16683) (quote ())) (g$655$12203 g$655$16667)))) (quote #f))) g$655$16653))) g$655$16651)))) (quote #f))))) (set! g$655$12707 (lambda (g$655$16901) (error (quote expander) (quote #3#) (quote "define-record not supported") (g$655$12227 g$655$16901 (quote ()))))) (set! g$655$12709 (lambda (g$655$16903) (error (quote expander) (quote #3#) (quote "incorrect usage of auxilary keyword") (g$655$12227 g$655$16903 (quote ()))))) (set! g$655$12711 (lambda (g$655$16907 g$655$16908 g$655$16909) ((lambda (g$655$16911) ((lambda (g$655$16913) (if (if g$655$16913 (begin (quote #f) (apply (lambda (g$655$17018 g$655$17019) (quote #t)) g$655$16913)) (quote #f)) (apply (lambda (g$655$17014 g$655$17015) (g$655$12757 (cons g$655$17014 g$655$17015) g$655$16908 g$655$16909)) g$655$16913) ((lambda (g$655$16915) ((lambda (g$655$16917) (if (if g$655$16917 (begin (quote #f) (apply (lambda (g$655$16950 g$655$16951 g$655$16952 g$655$16953) (quote #t)) g$655$16917)) (quote #f)) (apply (lambda (g$655$16922 g$655$16923 g$655$16924 g$655$16925) ((lambda (g$655$16930 g$655$16931 g$655$16932 g$655$16933) (g$655$12095 (quote #f) (append g$655$16930 g$655$16931) (append (g$655$12737 g$655$16922 g$655$16908 g$655$16909) (g$655$12737 g$655$16923 g$655$16908 g$655$16909)) (g$655$12095 (quote #f) (list g$655$16933) (list (g$655$12097 (quote #f) (quote ()) (g$655$12091 (quote #f) (map (lambda (g$655$16937 g$655$16938 g$655$16939) (g$655$12095 (quote #f) (list g$655$16937) (list (list g$655$16938)) (g$655$12091 (quote #f) (list (list g$655$16938 g$655$16939) (list (quote set!) g$655$16939 g$655$16937))))) g$655$16932 g$655$16930 g$655$16931)))) (list (quote (primitive dynamic-wind)) g$655$16933 (g$655$12097 (quote #f) (quote ()) (g$655$12757 (cons g$655$16924 g$655$16925) g$655$16908 g$655$16909)) g$655$16933)))) (map (lambda (g$655$16941) (g$655$12119 (quote lhs))) g$655$16922) (map (lambda (g$655$16943) (g$655$12119 (quote rhs))) g$655$16922) (map (lambda (g$655$16945) (g$655$12119 (quote t))) g$655$16922) (g$655$12119 (quote swap)))) g$655$16917) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$16915 (quote ()))))) ((lambda (g$655$16955) (if (g$655$12195 g$655$16955) (begin (quote #f) ((lambda (g$655$16957) (if g$655$16957 (begin (quote #f) ((lambda (g$655$16959) (if g$655$16959 (begin (quote #f) (append g$655$16957 g$655$16959)) (quote #f))) ((lambda (g$655$16961) (if (g$655$12195 g$655$16961) (begin (quote #f) ((lambda (g$655$16963) (if g$655$16963 (begin (quote #f) ((lambda (g$655$16965) (if g$655$16965 (begin (quote #f) (append g$655$16963 g$655$16965)) (quote #f))) ((lambda (g$655$16967) (if (g$655$12195 g$655$16967) (begin (quote #f) ((lambda (g$655$16969) (if g$655$16969 (begin (quote #f) ((lambda (g$655$16971) (if g$655$16971 (begin (quote #f) (append g$655$16969 g$655$16971)) (quote #f))) ((letrec ((g$655$16973 (lambda (g$655$16975) (if (g$655$12195 g$655$16975) ((lambda (g$655$16977) (if g$655$16977 (begin (quote #f) ((lambda (g$655$16979) (if g$655$16979 (begin (quote #f) (map cons g$655$16977 g$655$16979)) (quote #f))) (g$655$16973 (g$655$12207 g$655$16975)))) (quote #f))) ((lambda (g$655$16981) (list g$655$16981)) (g$655$12203 g$655$16975))) (if (g$655$12199 g$655$16975) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$16973) (g$655$12207 g$655$16967)))) (quote #f))) ((lambda (g$655$16983) (list g$655$16983)) (g$655$12203 g$655$16967)))) (quote #f))) (g$655$12207 g$655$16961)))) (quote #f))) ((letrec ((g$655$16985 (lambda (g$655$16987) (if (g$655$12195 g$655$16987) ((lambda (g$655$16989) (if g$655$16989 (begin (quote #f) ((lambda (g$655$16991) (if g$655$16991 (begin (quote #f) (map cons g$655$16989 g$655$16991)) (quote #f))) (g$655$16985 (g$655$12207 g$655$16987)))) (quote #f))) ((lambda (g$655$16993) (if (g$655$12195 g$655$16993) (begin (quote #f) ((lambda (g$655$16995) (if g$655$16995 (begin (quote #f) ((lambda (g$655$16997) (if g$655$16997 (begin (quote #f) (append g$655$16995 g$655$16997)) (quote #f))) ((lambda (g$655$16999) (if (g$655$12195 g$655$16999) (begin (quote #f) ((lambda (g$655$17001) (if g$655$17001 (begin (quote #f) ((lambda (g$655$17003) (if g$655$17003 (begin (quote #f) (append g$655$17001 g$655$17003)) (quote #f))) ((lambda (g$655$17005) (if (equal? (g$655$12229 g$655$17005) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$16999)))) (quote #f))) ((lambda (g$655$17007) (list g$655$17007)) (g$655$12203 g$655$16999)))) (quote #f))) (g$655$12207 g$655$16993)))) (quote #f))) ((lambda (g$655$17009) (list g$655$17009)) (g$655$12203 g$655$16993)))) (quote #f))) (g$655$12203 g$655$16987))) (if (g$655$12199 g$655$16987) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) g$655$16985) (g$655$12203 g$655$16961)))) (quote #f))) (g$655$12207 g$655$16955)))) (quote #f))) ((lambda (g$655$17011) (quote ())) (g$655$12203 g$655$16955)))) (quote #f))) g$655$16915))) g$655$16911))) ((lambda (g$655$17021) (if (g$655$12195 g$655$17021) (begin (quote #f) ((lambda (g$655$17023) (if g$655$17023 (begin (quote #f) ((lambda (g$655$17025) (if g$655$17025 (begin (quote #f) (append g$655$17023 g$655$17025)) (quote #f))) ((lambda (g$655$17027) (if (g$655$12195 g$655$17027) (begin (quote #f) ((lambda (g$655$17029) (if g$655$17029 (begin (quote #f) ((lambda (g$655$17031) (if g$655$17031 (begin (quote #f) (append g$655$17029 g$655$17031)) (quote #f))) ((lambda (g$655$17033) (if (g$655$12195 g$655$17033) (begin (quote #f) ((lambda (g$655$17035) (if g$655$17035 (begin (quote #f) ((lambda (g$655$17037) (if g$655$17037 (begin (quote #f) (append g$655$17035 g$655$17037)) (quote #f))) ((letrec ((g$655$17039 (lambda (g$655$17041) (if (g$655$12195 g$655$17041) ((lambda (g$655$17043) (if g$655$17043 (begin (quote #f) ((lambda (g$655$17045) (if g$655$17045 (begin (quote #f) (map cons g$655$17043 g$655$17045)) (quote #f))) (g$655$17039 (g$655$12207 g$655$17041)))) (quote #f))) ((lambda (g$655$17047) (list g$655$17047)) (g$655$12203 g$655$17041))) (if (g$655$12199 g$655$17041) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$17039) (g$655$12207 g$655$17033)))) (quote #f))) ((lambda (g$655$17049) (list g$655$17049)) (g$655$12203 g$655$17033)))) (quote #f))) (g$655$12207 g$655$17027)))) (quote #f))) ((lambda (g$655$17051) (if (equal? (g$655$12229 g$655$17051) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12203 g$655$17027)))) (quote #f))) (g$655$12207 g$655$17021)))) (quote #f))) ((lambda (g$655$17053) (quote ())) (g$655$12203 g$655$17021)))) (quote #f))) g$655$16911))) g$655$16907))) (set! g$655$12713 (lambda (g$655$17057 g$655$17058 g$655$17059) ((lambda (g$655$17061) ((lambda (g$655$17063) (if (if g$655$17063 (begin (quote #f) (apply (lambda (g$655$17070 g$655$17071) (quote #t)) g$655$17063)) (quote #f)) (apply (lambda (g$655$17066 g$655$17067) (cons (quote foreign-call) (cons (g$655$12741 g$655$17066 g$655$17058 g$655$17059) (g$655$12737 g$655$17067 g$655$17058 g$655$17059)))) g$655$17063) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17061 (quote ()))))) ((lambda (g$655$17073) (if (g$655$12195 g$655$17073) (begin (quote #f) ((lambda (g$655$17075) (if g$655$17075 (begin (quote #f) ((lambda (g$655$17077) (if g$655$17077 (begin (quote #f) (append g$655$17075 g$655$17077)) (quote #f))) ((lambda (g$655$17079) (if (g$655$12195 g$655$17079) (begin (quote #f) ((lambda (g$655$17081) (if g$655$17081 (begin (quote #f) ((lambda (g$655$17083) (if g$655$17083 (begin (quote #f) (append g$655$17081 g$655$17083)) (quote #f))) ((letrec ((g$655$17085 (lambda (g$655$17087) (if (g$655$12195 g$655$17087) ((lambda (g$655$17089) (if g$655$17089 (begin (quote #f) ((lambda (g$655$17091) (if g$655$17091 (begin (quote #f) (map cons g$655$17089 g$655$17091)) (quote #f))) (g$655$17085 (g$655$12207 g$655$17087)))) (quote #f))) ((lambda (g$655$17093) (list g$655$17093)) (g$655$12203 g$655$17087))) (if (g$655$12199 g$655$17087) (list (begin (quote arg*) (quote ()))) (quote #f)))))) g$655$17085) (g$655$12207 g$655$17079)))) (quote #f))) ((lambda (g$655$17095) (list g$655$17095)) (g$655$12203 g$655$17079)))) (quote #f))) (g$655$12207 g$655$17073)))) (quote #f))) ((lambda (g$655$17097) (quote ())) (g$655$12203 g$655$17073)))) (quote #f))) g$655$17061))) g$655$17057))) (set! g$655$12715 (lambda (g$655$17100 g$655$17101) ((lambda (g$655$17103 g$655$17105) (begin (set! g$655$17103 (lambda (g$655$17295 g$655$17296 g$655$17297) (if (null? g$655$17295) (values (quote ()) g$655$17297) (call-with-values (lambda () (g$655$17103 (cdr g$655$17295) g$655$17296 g$655$17297)) (lambda (g$655$17300 g$655$17301) (call-with-values (lambda () (g$655$17105 (car g$655$17295) g$655$17296 g$655$17301)) (lambda (g$655$17304 g$655$17305) (values (cons g$655$17304 g$655$17300) g$655$17305)))))))) (set! g$655$17105 (lambda (g$655$17109 g$655$17110 g$655$17111) ((lambda (g$655$17113) ((lambda (g$655$17115) (if (if g$655$17115 (begin (quote #f) (apply (lambda (g$655$17289) (g$655$12209 g$655$17289)) g$655$17115)) (quote #f)) (apply (lambda (g$655$17287) (if (g$655$12223 g$655$17109 g$655$17101) (values (vector (quote free-id) g$655$17109) g$655$17111) (if (g$655$12217 g$655$17109 (g$655$12639 (quote _))) (values (quote _) g$655$17111) (values (quote any) (cons (cons g$655$17109 g$655$17110) g$655$17111))))) g$655$17115) ((lambda (g$655$17117) ((lambda (g$655$17119) (if (if g$655$17119 (begin (quote #f) (apply (lambda (g$655$17266 g$655$17267) (g$655$12719 g$655$17267)) g$655$17119)) (quote #f)) (apply (lambda (g$655$17258 g$655$17259) (call-with-values (lambda () (g$655$17105 g$655$17258 (+ g$655$17110 (quote 1)) g$655$17111)) (lambda (g$655$17262 g$655$17263) (values (if (eq? g$655$17262 (quote any)) (quote each-any) (vector (quote each) g$655$17262)) g$655$17263)))) g$655$17119) ((lambda (g$655$17121) ((lambda (g$655$17123) (if (if g$655$17123 (begin (quote #f) (apply (lambda (g$655$17218 g$655$17219 g$655$17220 g$655$17221) (g$655$12719 g$655$17219)) g$655$17123)) (quote #f)) (apply (lambda (g$655$17198 g$655$17199 g$655$17200 g$655$17201) (call-with-values (lambda () (g$655$17105 g$655$17201 g$655$17110 g$655$17111)) (lambda (g$655$17204 g$655$17205) (call-with-values (lambda () (g$655$17103 g$655$17200 g$655$17110 g$655$17205)) (lambda (g$655$17208 g$655$17209) (call-with-values (lambda () (g$655$17105 g$655$17198 (+ g$655$17110 (quote 1)) g$655$17209)) (lambda (g$655$17212 g$655$17213) (values (vector (quote each+) g$655$17212 (reverse g$655$17208) g$655$17204) g$655$17213)))))))) g$655$17123) ((lambda (g$655$17125) ((lambda (g$655$17127) (if (if g$655$17127 (begin (quote #f) (apply (lambda (g$655$17182 g$655$17183) (quote #t)) g$655$17127)) (quote #f)) (apply (lambda (g$655$17170 g$655$17171) (call-with-values (lambda () (g$655$17105 g$655$17171 g$655$17110 g$655$17111)) (lambda (g$655$17174 g$655$17175) (call-with-values (lambda () (g$655$17105 g$655$17170 g$655$17110 g$655$17175)) (lambda (g$655$17178 g$655$17179) (values (cons g$655$17178 g$655$17174) g$655$17179)))))) g$655$17127) ((lambda (g$655$17129) ((lambda (g$655$17131) (if (if g$655$17131 (begin (quote #f) (apply (lambda () (quote #t)) g$655$17131)) (quote #f)) (apply (lambda () (values (quote ()) g$655$17111)) g$655$17131) ((lambda (g$655$17133) ((lambda (g$655$17135) (if (if g$655$17135 (begin (quote #f) (apply (lambda (g$655$17153) (not (g$655$12161 g$655$17153))) g$655$17135)) (quote #f)) (apply (lambda (g$655$17147) (call-with-values (lambda () (g$655$17105 g$655$17147 g$655$17110 g$655$17111)) (lambda (g$655$17150 g$655$17151) (values (vector (quote vector) g$655$17150) g$655$17151)))) g$655$17135) ((lambda (g$655$17137) ((lambda (g$655$17139) (if (if g$655$17139 (begin (quote #f) (apply (lambda (g$655$17143) (quote #t)) g$655$17139)) (quote #f)) (apply (lambda (g$655$17141) (values (vector (quote atom) (g$655$12229 g$655$17141)) g$655$17111)) g$655$17139) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17137 (quote ()))))) ((lambda (g$655$17145) (list g$655$17145)) g$655$17137))) g$655$17133))) ((lambda (g$655$17155) (if (g$655$12197 g$655$17155) (begin (quote #f) ((letrec ((g$655$17157 (lambda (g$655$17159) (if (g$655$12195 g$655$17159) ((lambda (g$655$17161) (if g$655$17161 (begin (quote #f) ((lambda (g$655$17163) (if g$655$17163 (begin (quote #f) (map cons g$655$17161 g$655$17163)) (quote #f))) (g$655$17157 (g$655$12207 g$655$17159)))) (quote #f))) ((lambda (g$655$17165) (list g$655$17165)) (g$655$12203 g$655$17159))) (if (g$655$12199 g$655$17159) (list (begin (quote p) (quote ()))) (quote #f)))))) g$655$17157) (g$655$12193 g$655$17155))) (quote #f))) g$655$17133))) g$655$17129))) ((lambda (g$655$17167) (if (equal? (g$655$12229 g$655$17167) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$655$17129))) g$655$17125))) ((lambda (g$655$17185) (if (g$655$12195 g$655$17185) (begin (quote #f) ((lambda (g$655$17187) (if g$655$17187 (begin (quote #f) ((lambda (g$655$17189) (if g$655$17189 (begin (quote #f) (append g$655$17187 g$655$17189)) (quote #f))) ((lambda (g$655$17191) (list g$655$17191)) (g$655$12207 g$655$17185)))) (quote #f))) ((lambda (g$655$17193) (list g$655$17193)) (g$655$12203 g$655$17185)))) (quote #f))) g$655$17125))) g$655$17121))) ((lambda (g$655$17223) (if (g$655$12195 g$655$17223) (begin (quote #f) ((lambda (g$655$17225) (if g$655$17225 (begin (quote #f) ((lambda (g$655$17227) (if g$655$17227 (begin (quote #f) (append g$655$17225 g$655$17227)) (quote #f))) ((lambda (g$655$17229) (if (g$655$12195 g$655$17229) (begin (quote #f) ((lambda (g$655$17231) (if g$655$17231 (begin (quote #f) ((lambda (g$655$17233) (if g$655$17233 (begin (quote #f) (append g$655$17231 g$655$17233)) (quote #f))) ((letrec ((g$655$17235 (lambda (g$655$17237) (if (g$655$12195 g$655$17237) ((lambda (g$655$17243) (if g$655$17243 (begin (quote #f) ((lambda (g$655$17245) (if g$655$17245 (begin (quote #f) (cons (map cons g$655$17243 (car g$655$17245)) (cdr g$655$17245))) (quote #f))) (g$655$17235 (g$655$12207 g$655$17237)))) (quote #f))) ((lambda (g$655$17247) (list g$655$17247)) (g$655$12203 g$655$17237))) ((lambda (g$655$17239) (if g$655$17239 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) g$655$17239)) (quote #f))) ((lambda (g$655$17241) (list g$655$17241)) g$655$17237)))))) (lambda (g$655$17249) ((lambda (g$655$17251) (if g$655$17251 (begin (quote #f) (append (car g$655$17251) (cdr g$655$17251))) (quote #f))) (g$655$17235 g$655$17249)))) (g$655$12207 g$655$17229)))) (quote #f))) ((lambda (g$655$17253) (list g$655$17253)) (g$655$12203 g$655$17229)))) (quote #f))) (g$655$12207 g$655$17223)))) (quote #f))) ((lambda (g$655$17255) (list g$655$17255)) (g$655$12203 g$655$17223)))) (quote #f))) g$655$17121))) g$655$17117))) ((lambda (g$655$17269) (if (g$655$12195 g$655$17269) (begin (quote #f) ((lambda (g$655$17271) (if g$655$17271 (begin (quote #f) ((lambda (g$655$17273) (if g$655$17273 (begin (quote #f) (append g$655$17271 g$655$17273)) (quote #f))) ((lambda (g$655$17275) (if (g$655$12195 g$655$17275) (begin (quote #f) ((lambda (g$655$17277) (if g$655$17277 (begin (quote #f) ((lambda (g$655$17279) (if g$655$17279 (begin (quote #f) (append g$655$17277 g$655$17279)) (quote #f))) ((lambda (g$655$17281) (if (equal? (g$655$12229 g$655$17281) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$17275)))) (quote #f))) ((lambda (g$655$17283) (list g$655$17283)) (g$655$12203 g$655$17275)))) (quote #f))) (g$655$12207 g$655$17269)))) (quote #f))) ((lambda (g$655$17285) (list g$655$17285)) (g$655$12203 g$655$17269)))) (quote #f))) g$655$17117))) g$655$17113))) ((lambda (g$655$17291) (list g$655$17291)) g$655$17113))) g$655$17109))) (g$655$17105 g$655$17100 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! g$655$12717 (lambda (g$655$17308 g$655$17309) ((lambda (g$655$17311 g$655$17313 g$655$17315 g$655$17317 g$655$17319 g$655$17321 g$655$17323 g$655$17325) (begin (set! g$655$17311 (lambda (g$655$17435 g$655$17436 g$655$17437) (if (if (null? g$655$17436) (begin (quote #f) (null? g$655$17437)) (quote #f)) g$655$17435 (g$655$12185 g$655$17435 g$655$17436 g$655$17437)))) (set! g$655$17313 (lambda (g$655$17420 g$655$17421 g$655$17422 g$655$17423) (if (pair? g$655$17420) ((lambda (g$655$17429) (if g$655$17429 (begin (quote #f) ((lambda (g$655$17431) (if g$655$17431 (begin (quote #f) (cons g$655$17429 g$655$17431)) (quote #f))) (g$655$17313 (cdr g$655$17420) g$655$17421 g$655$17422 g$655$17423))) (quote #f))) (g$655$17325 (car g$655$17420) g$655$17421 g$655$17422 g$655$17423 (quote ()))) (if (null? g$655$17420) (quote ()) (if (g$655$12161 g$655$17420) (call-with-values (lambda () (g$655$12183 g$655$17422 g$655$17423 g$655$17420)) (lambda (g$655$17426 g$655$17427) (g$655$17313 (g$655$12163 g$655$17420) g$655$17421 g$655$17426 g$655$17427))) (quote #f)))))) (set! g$655$17315 (lambda (g$655$17389 g$655$17390 g$655$17391 g$655$17392 g$655$17393 g$655$17394 g$655$17395) (letrec ((g$655$17397 (lambda (g$655$17401 g$655$17402 g$655$17403) (if (pair? g$655$17401) (call-with-values (lambda () (g$655$17397 (cdr g$655$17401) g$655$17402 g$655$17403)) (lambda (g$655$17411 g$655$17412 g$655$17413) (if g$655$17413 (if (null? g$655$17412) ((lambda (g$655$17415) (if g$655$17415 (values (cons g$655$17415 g$655$17411) g$655$17412 g$655$17413) (values (quote #f) (quote #f) (quote #f)))) (g$655$17325 (car g$655$17401) g$655$17390 g$655$17402 g$655$17403 (quote ()))) (values (quote ()) (cdr g$655$17412) (g$655$17325 (car g$655$17401) (car g$655$17412) g$655$17402 g$655$17403 g$655$17413))) (values (quote #f) (quote #f) (quote #f))))) (if (g$655$12161 g$655$17401) (call-with-values (lambda () (g$655$12183 g$655$17402 g$655$17403 g$655$17401)) (lambda (g$655$17406 g$655$17407) (g$655$17397 (g$655$12163 g$655$17401) g$655$17406 g$655$17407))) (values (quote ()) g$655$17391 (g$655$17325 g$655$17401 g$655$17392 g$655$17402 g$655$17403 g$655$17395))))))) (g$655$17397 g$655$17389 g$655$17393 g$655$17394)))) (set! g$655$17317 (lambda (g$655$17373 g$655$17374 g$655$17375) (if (pair? g$655$17373) ((lambda (g$655$17381) (if g$655$17381 (begin (quote #f) (cons (g$655$17311 (car g$655$17373) g$655$17374 g$655$17375) g$655$17381)) (quote #f))) (g$655$17317 (cdr g$655$17373) g$655$17374 g$655$17375)) (if (null? g$655$17373) (quote ()) (if (g$655$12161 g$655$17373) (call-with-values (lambda () (g$655$12183 g$655$17374 g$655$17375 g$655$17373)) (lambda (g$655$17378 g$655$17379) (g$655$17317 (g$655$12163 g$655$17373) g$655$17378 g$655$17379))) (quote #f)))))) (set! g$655$17319 (lambda (g$655$17367 g$655$17368) (if (null? g$655$17367) g$655$17368 (if (eq? g$655$17367 (quote _)) g$655$17368 (if (eq? g$655$17367 (quote any)) (cons (quote ()) g$655$17368) (if (pair? g$655$17367) (g$655$17319 (car g$655$17367) (g$655$17319 (cdr g$655$17367) g$655$17368)) (if (eq? g$655$17367 (quote each-any)) (cons (quote ()) g$655$17368) ((lambda (g$655$17369) (if (memv g$655$17369 (quote (each))) (g$655$17319 (vector-ref g$655$17367 (quote 1)) g$655$17368) (if (memv g$655$17369 (quote (each+))) (g$655$17319 (vector-ref g$655$17367 (quote 1)) (g$655$17319 (reverse (vector-ref g$655$17367 (quote 2))) (g$655$17319 (vector-ref g$655$17367 (quote 3)) g$655$17368))) (if (memv g$655$17369 (quote (free-id atom))) g$655$17368 (if (memv g$655$17369 (quote (vector))) (g$655$17319 (vector-ref g$655$17367 (quote 1)) g$655$17368) (error (quote syntax-dispatch) (quote "invalid pattern") g$655$17367)))))) (vector-ref g$655$17367 (quote 0)))))))))) (set! g$655$17321 (lambda (g$655$17363 g$655$17364) (if (null? (car g$655$17363)) g$655$17364 (cons (map car g$655$17363) (g$655$17321 (map cdr g$655$17363) g$655$17364))))) (set! g$655$17323 (lambda (g$655$17345 g$655$17346 g$655$17347 g$655$17348 g$655$17349) (if (null? g$655$17346) (if (null? g$655$17345) (begin (quote #f) g$655$17349) (quote #f)) (if (pair? g$655$17346) (if (pair? g$655$17345) (begin (quote #f) (g$655$17325 (car g$655$17345) (car g$655$17346) g$655$17347 g$655$17348 (g$655$17325 (cdr g$655$17345) (cdr g$655$17346) g$655$17347 g$655$17348 g$655$17349))) (quote #f)) (if (eq? g$655$17346 (quote each-any)) ((lambda (g$655$17360) (if g$655$17360 (begin (quote #f) (cons g$655$17360 g$655$17349)) (quote #f))) (g$655$17317 g$655$17345 g$655$17347 g$655$17348)) ((lambda (g$655$17350) (if (memv g$655$17350 (quote (each))) (if (null? g$655$17345) (g$655$17319 (vector-ref g$655$17346 (quote 1)) g$655$17349) ((lambda (g$655$17358) (if g$655$17358 (begin (quote #f) (g$655$17321 g$655$17358 g$655$17349)) (quote #f))) (g$655$17313 g$655$17345 (vector-ref g$655$17346 (quote 1)) g$655$17347 g$655$17348))) (if (memv g$655$17350 (quote (free-id))) (if (symbol? g$655$17345) (if (g$655$12217 (g$655$17311 g$655$17345 g$655$17347 g$655$17348) (vector-ref g$655$17346 (quote 1))) (begin (quote #f) g$655$17349) (quote #f)) (quote #f)) (if (memv g$655$17350 (quote (each+))) (call-with-values (lambda () (g$655$17315 g$655$17345 (vector-ref g$655$17346 (quote 1)) (vector-ref g$655$17346 (quote 2)) (vector-ref g$655$17346 (quote 3)) g$655$17347 g$655$17348 g$655$17349)) (lambda (g$655$17354 g$655$17355 g$655$17356) (if g$655$17356 (if (null? g$655$17355) (begin (quote #f) (if (null? g$655$17354) (g$655$17319 (vector-ref g$655$17346 (quote 1)) g$655$17356) (g$655$17321 g$655$17354 g$655$17356))) (quote #f)) (quote #f)))) (if (memv g$655$17350 (quote (atom))) (if (equal? (vector-ref g$655$17346 (quote 1)) (g$655$12227 g$655$17345 g$655$17347)) (begin (quote #f) g$655$17349) (quote #f)) (if (memv g$655$17350 (quote (vector))) (if (vector? g$655$17345) (begin (quote #f) (g$655$17325 (vector->list g$655$17345) (vector-ref g$655$17346 (quote 1)) g$655$17347 g$655$17348 g$655$17349)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") g$655$17346))))))) (vector-ref g$655$17346 (quote 0)))))))) (set! g$655$17325 (lambda (g$655$17331 g$655$17332 g$655$17333 g$655$17334 g$655$17335) (if (not g$655$17335) (quote #f) (if (eq? g$655$17332 (quote _)) g$655$17335 (if (eq? g$655$17332 (quote any)) (cons (g$655$17311 g$655$17331 g$655$17333 g$655$17334) g$655$17335) (if (g$655$12161 g$655$17331) (call-with-values (lambda () (g$655$12183 g$655$17333 g$655$17334 g$655$17331)) (lambda (g$655$17338 g$655$17339) (g$655$17325 (g$655$12163 g$655$17331) g$655$17332 g$655$17338 g$655$17339 g$655$17335))) (g$655$17323 g$655$17331 g$655$17332 g$655$17333 g$655$17334 g$655$17335))))))) (g$655$17325 g$655$17308 g$655$17309 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$655$12719 (lambda (g$655$17439) (if (g$655$12209 g$655$17439) (begin (quote #f) (g$655$12217 g$655$17439 (g$655$12639 (quote ...)))) (quote #f)))) (set! g$655$12721 ((lambda () ((lambda (g$655$17441 g$655$17443 g$655$17445 g$655$17447) (begin (set! g$655$17441 (lambda (g$655$17655 g$655$17656 g$655$17657 g$655$17658 g$655$17659) ((lambda (g$655$17662 g$655$17663) ((lambda (g$655$17666 g$655$17667) ((lambda (g$655$17669) (list (quote (primitive apply)) (g$655$12097 (quote #f) g$655$17667 g$655$17669) g$655$17657)) (g$655$12741 (g$655$12189 (g$655$12156 g$655$17662 g$655$17666) g$655$17656) (append (map (lambda (g$655$17673 g$655$17674 g$655$17675) (cons g$655$17673 (g$655$12235 (quote syntax) (cons g$655$17674 g$655$17675)))) g$655$17666 g$655$17667 (map cdr g$655$17655)) g$655$17658) g$655$17659))) (map g$655$12123 g$655$17662) (map g$655$12119 g$655$17662))) (map car g$655$17655) (map cdr g$655$17655)))) (set! g$655$17443 (lambda (g$655$17641 g$655$17642 g$655$17643) (letrec ((g$655$17645 (lambda (g$655$17648 g$655$17649) (if (null? g$655$17648) (error (quote expander) (quote #5#) (g$655$12229 g$655$17642)) (if (g$655$12209 (car g$655$17648)) (if (g$655$12223 (car g$655$17648) g$655$17649) (g$655$12846 (car g$655$17648) (quote "duplicate ") g$655$17643) (g$655$17645 (cdr g$655$17648) (cons (car g$655$17648) g$655$17649))) (g$655$12846 (car g$655$17648) (quote "invalid ") g$655$17643)))))) (g$655$17645 g$655$17641 (quote ()))))) (set! g$655$17445 (lambda (g$655$17614 g$655$17615 g$655$17616 g$655$17617 g$655$17618 g$655$17619 g$655$17620 g$655$17621) (call-with-values (lambda () (g$655$12715 g$655$17619 g$655$17615)) (lambda (g$655$17624 g$655$17625) (if (not (g$655$12221 (map car g$655$17625))) (g$655$17443 (map car g$655$17625) g$655$17619 (quote "pattern variable")) (if (not (for-all (lambda (g$655$17637) (not (g$655$12719 (car g$655$17637)))) g$655$17625)) (error (quote expander) (quote #3#) (quote "misplaced ellipsis in syntax-case pattern") (g$655$12227 g$655$17619 (quote ()))) ((lambda (g$655$17627) ((lambda (g$655$17629) ((lambda (g$655$17631) ((lambda (g$655$17633) (list (g$655$12097 (quote #f) (list g$655$17627) (list (quote if) g$655$17629 g$655$17631 g$655$17633)) (list (quote (primitive syntax-dispatch)) g$655$17614 (list (quote quote) g$655$17624)))) (g$655$17447 g$655$17614 g$655$17615 g$655$17616 g$655$17617 g$655$17618))) (g$655$17441 g$655$17625 g$655$17621 g$655$17627 g$655$17617 g$655$17618))) (if (eq? g$655$17620 (quote #t)) g$655$17627 ((lambda (g$655$17635) (list (quote if) g$655$17627 g$655$17635 (list (quote quote) (quote #f)))) (g$655$17441 g$655$17625 g$655$17620 g$655$17627 g$655$17617 g$655$17618))))) (g$655$12119 (quote tmp))))))))) (set! g$655$17447 (lambda (g$655$17523 g$655$17524 g$655$17525 g$655$17526 g$655$17527) (if (null? g$655$17525) (list (quote (primitive syntax-error)) g$655$17523) ((lambda (g$655$17529) ((lambda (g$655$17531) (if (if g$655$17531 (begin (quote #f) (apply (lambda (g$655$17586 g$655$17587) (quote #t)) g$655$17531)) (quote #f)) (apply (lambda (g$655$17576 g$655$17577) (if (if (g$655$12209 g$655$17576) (if (not (g$655$12223 g$655$17576 g$655$17524)) (begin (quote #f) (not (g$655$12719 g$655$17576))) (quote #f)) (quote #f)) (if (g$655$12217 g$655$17576 (g$655$12639 (quote _))) (g$655$12741 g$655$17577 g$655$17526 g$655$17527) ((lambda (g$655$17580 g$655$17581) ((lambda (g$655$17583) (list (g$655$12097 (quote #f) (list g$655$17581) g$655$17583) g$655$17523)) (g$655$12741 (g$655$12189 (g$655$12156 (list g$655$17576) (list g$655$17580)) g$655$17577) (cons (cons g$655$17580 (g$655$12235 (quote syntax) (cons g$655$17581 (quote 0)))) g$655$17526) g$655$17527))) (g$655$12123 g$655$17576) (g$655$12119 g$655$17576))) (g$655$17445 g$655$17523 g$655$17524 (cdr g$655$17525) g$655$17526 g$655$17527 g$655$17576 (quote #t) g$655$17577))) g$655$17531) ((lambda (g$655$17533) ((lambda (g$655$17535) (if (if g$655$17535 (begin (quote #f) (apply (lambda (g$655$17545 g$655$17546 g$655$17547) (quote #t)) g$655$17535)) (quote #f)) (apply (lambda (g$655$17539 g$655$17540 g$655$17541) (g$655$17445 g$655$17523 g$655$17524 (cdr g$655$17525) g$655$17526 g$655$17527 g$655$17539 g$655$17540 g$655$17541)) g$655$17535) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17533 (quote ()))))) ((lambda (g$655$17549) (if (g$655$12195 g$655$17549) (begin (quote #f) ((lambda (g$655$17551) (if g$655$17551 (begin (quote #f) ((lambda (g$655$17553) (if g$655$17553 (begin (quote #f) (append g$655$17551 g$655$17553)) (quote #f))) ((lambda (g$655$17555) (if (g$655$12195 g$655$17555) (begin (quote #f) ((lambda (g$655$17557) (if g$655$17557 (begin (quote #f) ((lambda (g$655$17559) (if g$655$17559 (begin (quote #f) (append g$655$17557 g$655$17559)) (quote #f))) ((lambda (g$655$17561) (if (g$655$12195 g$655$17561) (begin (quote #f) ((lambda (g$655$17563) (if g$655$17563 (begin (quote #f) ((lambda (g$655$17565) (if g$655$17565 (begin (quote #f) (append g$655$17563 g$655$17565)) (quote #f))) ((lambda (g$655$17567) (if (equal? (g$655$12229 g$655$17567) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$17561)))) (quote #f))) ((lambda (g$655$17569) (list g$655$17569)) (g$655$12203 g$655$17561)))) (quote #f))) (g$655$12207 g$655$17555)))) (quote #f))) ((lambda (g$655$17571) (list g$655$17571)) (g$655$12203 g$655$17555)))) (quote #f))) (g$655$12207 g$655$17549)))) (quote #f))) ((lambda (g$655$17573) (list g$655$17573)) (g$655$12203 g$655$17549)))) (quote #f))) g$655$17533))) g$655$17529))) ((lambda (g$655$17589) (if (g$655$12195 g$655$17589) (begin (quote #f) ((lambda (g$655$17591) (if g$655$17591 (begin (quote #f) ((lambda (g$655$17593) (if g$655$17593 (begin (quote #f) (append g$655$17591 g$655$17593)) (quote #f))) ((lambda (g$655$17595) (if (g$655$12195 g$655$17595) (begin (quote #f) ((lambda (g$655$17597) (if g$655$17597 (begin (quote #f) ((lambda (g$655$17599) (if g$655$17599 (begin (quote #f) (append g$655$17597 g$655$17599)) (quote #f))) ((lambda (g$655$17601) (if (equal? (g$655$12229 g$655$17601) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$17595)))) (quote #f))) ((lambda (g$655$17603) (list g$655$17603)) (g$655$12203 g$655$17595)))) (quote #f))) (g$655$12207 g$655$17589)))) (quote #f))) ((lambda (g$655$17605) (list g$655$17605)) (g$655$12203 g$655$17589)))) (quote #f))) g$655$17529))) (car g$655$17525))))) (lambda (g$655$17451 g$655$17452 g$655$17453) ((lambda (g$655$17455) ((lambda (g$655$17457) (if (if g$655$17457 (begin (quote #f) (apply (lambda (g$655$17473 g$655$17474 g$655$17475) (quote #t)) g$655$17457)) (quote #f)) (apply (lambda (g$655$17461 g$655$17462 g$655$17463) (begin (if (for-all (lambda (g$655$17465) (if (g$655$12209 g$655$17465) (begin (quote #f) (not (g$655$12719 g$655$17465))) (quote #f))) g$655$17462) (void) (error (quote expander) (quote #3#) (quote "invalid literals") (g$655$12227 g$655$17451 (quote ())))) ((lambda (g$655$17467) ((lambda (g$655$17469) (list (g$655$12097 (quote #f) (list g$655$17467) g$655$17469) (g$655$12741 g$655$17461 g$655$17452 g$655$17453))) (g$655$17447 g$655$17467 g$655$17462 g$655$17463 g$655$17452 g$655$17453))) (g$655$12119 (quote tmp))))) g$655$17457) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17455 (quote ()))))) ((lambda (g$655$17477) (if (g$655$12195 g$655$17477) (begin (quote #f) ((lambda (g$655$17479) (if g$655$17479 (begin (quote #f) ((lambda (g$655$17481) (if g$655$17481 (begin (quote #f) (append g$655$17479 g$655$17481)) (quote #f))) ((lambda (g$655$17483) (if (g$655$12195 g$655$17483) (begin (quote #f) ((lambda (g$655$17485) (if g$655$17485 (begin (quote #f) ((lambda (g$655$17487) (if g$655$17487 (begin (quote #f) (append g$655$17485 g$655$17487)) (quote #f))) ((lambda (g$655$17489) (if (g$655$12195 g$655$17489) (begin (quote #f) ((lambda (g$655$17491) (if g$655$17491 (begin (quote #f) ((lambda (g$655$17493) (if g$655$17493 (begin (quote #f) (append g$655$17491 g$655$17493)) (quote #f))) ((letrec ((g$655$17495 (lambda (g$655$17497) (if (g$655$12195 g$655$17497) ((lambda (g$655$17499) (if g$655$17499 (begin (quote #f) ((lambda (g$655$17501) (if g$655$17501 (begin (quote #f) (map cons g$655$17499 g$655$17501)) (quote #f))) (g$655$17495 (g$655$12207 g$655$17497)))) (quote #f))) ((lambda (g$655$17503) (list g$655$17503)) (g$655$12203 g$655$17497))) (if (g$655$12199 g$655$17497) (list (begin (quote clauses) (quote ()))) (quote #f)))))) g$655$17495) (g$655$12207 g$655$17489)))) (quote #f))) ((letrec ((g$655$17505 (lambda (g$655$17507) (if (g$655$12195 g$655$17507) ((lambda (g$655$17509) (if g$655$17509 (begin (quote #f) ((lambda (g$655$17511) (if g$655$17511 (begin (quote #f) (map cons g$655$17509 g$655$17511)) (quote #f))) (g$655$17505 (g$655$12207 g$655$17507)))) (quote #f))) ((lambda (g$655$17513) (list g$655$17513)) (g$655$12203 g$655$17507))) (if (g$655$12199 g$655$17507) (list (begin (quote keys) (quote ()))) (quote #f)))))) g$655$17505) (g$655$12203 g$655$17489)))) (quote #f))) (g$655$12207 g$655$17483)))) (quote #f))) ((lambda (g$655$17515) (list g$655$17515)) (g$655$12203 g$655$17483)))) (quote #f))) (g$655$12207 g$655$17477)))) (quote #f))) ((lambda (g$655$17517) (quote ())) (g$655$12203 g$655$17477)))) (quote #f))) g$655$17455))) g$655$17451)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$655$12723 ((lambda () ((lambda (g$655$17677 g$655$17679 g$655$17681 g$655$17683 g$655$17685 g$655$17687 g$655$17689 g$655$17691) (begin (set! g$655$17677 (lambda (g$655$17804 g$655$17805 g$655$17806 g$655$17807 g$655$17808 g$655$17809) ((lambda (g$655$17811) ((lambda (g$655$17813) (if (if g$655$17813 (begin (quote #f) (apply (lambda (g$655$18023) (g$655$17808 g$655$18023)) g$655$17813)) (quote #f)) (apply (lambda (g$655$18021) (error (quote expander) (quote #3#) (quote "misplaced ellipsis in syntax form") (g$655$12227 g$655$17804 (quote ())))) g$655$17813) ((lambda (g$655$17815) ((lambda (g$655$17817) (if (if g$655$17817 (begin (quote #f) (apply (lambda (g$655$18017) (g$655$12209 g$655$18017)) g$655$17817)) (quote #f)) (apply (lambda (g$655$18005) ((lambda (g$655$18007) ((lambda (g$655$18009) ((lambda () (if (eq? (g$655$12237 g$655$18009) (quote syntax)) (call-with-values (lambda () ((lambda (g$655$18011) (g$655$17679 g$655$17804 (car g$655$18011) (cdr g$655$18011) g$655$17807)) (g$655$12239 g$655$18009))) (lambda (g$655$18014 g$655$18015) (values (list (quote ref) g$655$18014) g$655$18015))) (values (list (quote quote) g$655$17805) g$655$17807))))) (g$655$12233 g$655$18007 g$655$17806))) (g$655$12231 g$655$17805))) g$655$17817) ((lambda (g$655$17819) ((lambda (g$655$17821) (if (if g$655$17821 (begin (quote #f) (apply (lambda (g$655$17984 g$655$17985) (g$655$17808 g$655$17984)) g$655$17821)) (quote #f)) (apply (lambda (g$655$17978 g$655$17979) (if g$655$17809 (error (quote expander) (quote #3#) (quote "misplaced ellipsis in syntax form") (g$655$12227 g$655$17804 (quote ()))) (g$655$17677 g$655$17804 g$655$17979 g$655$17806 g$655$17807 (lambda (g$655$17981) (quote #f)) (quote #f)))) g$655$17821) ((lambda (g$655$17823) ((lambda (g$655$17825) (if (if g$655$17825 (begin (quote #f) (apply (lambda (g$655$17955 g$655$17956 g$655$17957) (g$655$17808 g$655$17956)) g$655$17825)) (quote #f)) (apply (lambda (g$655$17889 g$655$17890 g$655$17891) (letrec ((g$655$17893 (lambda (g$655$17896 g$655$17897) ((lambda (g$655$17899) ((lambda (g$655$17901) (if (if g$655$17901 (begin (quote #f) (apply (lambda () (quote #t)) g$655$17901)) (quote #f)) (apply (lambda () (g$655$17897 g$655$17807)) g$655$17901) ((lambda (g$655$17903) ((lambda (g$655$17905) (if (if g$655$17905 (begin (quote #f) (apply (lambda (g$655$17932 g$655$17933) (g$655$17808 g$655$17932)) g$655$17905)) (quote #f)) (apply (lambda (g$655$17922 g$655$17923) (g$655$17893 g$655$17923 (lambda (g$655$17925) (call-with-values (lambda () (g$655$17897 (cons (quote ()) g$655$17925))) (lambda (g$655$17928 g$655$17929) (if (null? (car g$655$17929)) (error (quote expander) (quote #3#) (quote "extra ellipsis in syntax form") (g$655$12227 g$655$17804 (quote ()))) (values (g$655$17683 g$655$17928 (car g$655$17929)) (cdr g$655$17929)))))))) g$655$17905) ((lambda (g$655$17907) ((lambda (g$655$17909) (if (if g$655$17909 (begin (quote #f) (apply (lambda () (quote #t)) g$655$17909)) (quote #f)) (apply (lambda () (call-with-values (lambda () (g$655$17677 g$655$17804 g$655$17896 g$655$17806 g$655$17807 g$655$17808 g$655$17809)) (lambda (g$655$17912 g$655$17913) (call-with-values (lambda () (g$655$17897 g$655$17913)) (lambda (g$655$17916 g$655$17917) (values (g$655$17681 g$655$17916 g$655$17912) g$655$17917)))))) g$655$17909) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17907 (quote ()))))) ((lambda (g$655$17919) (quote ())) g$655$17907))) g$655$17903))) ((lambda (g$655$17935) (if (g$655$12195 g$655$17935) (begin (quote #f) ((lambda (g$655$17937) (if g$655$17937 (begin (quote #f) ((lambda (g$655$17939) (if g$655$17939 (begin (quote #f) (append g$655$17937 g$655$17939)) (quote #f))) ((lambda (g$655$17941) (list g$655$17941)) (g$655$12207 g$655$17935)))) (quote #f))) ((lambda (g$655$17943) (list g$655$17943)) (g$655$12203 g$655$17935)))) (quote #f))) g$655$17903))) g$655$17899))) ((lambda (g$655$17945) (if (equal? (g$655$12229 g$655$17945) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$655$17899))) g$655$17896)))) (g$655$17893 g$655$17891 (lambda (g$655$17947) (call-with-values (lambda () (g$655$17677 g$655$17804 g$655$17889 g$655$17806 (cons (quote ()) g$655$17947) g$655$17808 (quote #f))) (lambda (g$655$17950 g$655$17951) (if (null? (car g$655$17951)) (error (quote expander) (quote #3#) (quote "extra ellipsis in syntax form") (g$655$12227 g$655$17804 (quote ()))) (values (g$655$17685 g$655$17950 (car g$655$17951)) (cdr g$655$17951))))))))) g$655$17825) ((lambda (g$655$17827) ((lambda (g$655$17829) (if (if g$655$17829 (begin (quote #f) (apply (lambda (g$655$17874 g$655$17875) (quote #t)) g$655$17829)) (quote #f)) (apply (lambda (g$655$17862 g$655$17863) (call-with-values (lambda () (g$655$17677 g$655$17804 g$655$17862 g$655$17806 g$655$17807 g$655$17808 (quote #f))) (lambda (g$655$17866 g$655$17867) (call-with-values (lambda () (g$655$17677 g$655$17804 g$655$17863 g$655$17806 g$655$17867 g$655$17808 g$655$17809)) (lambda (g$655$17870 g$655$17871) (values (g$655$17687 g$655$17805 g$655$17862 g$655$17863 g$655$17866 g$655$17870) g$655$17871)))))) g$655$17829) ((lambda (g$655$17831) ((lambda (g$655$17833) (if (if g$655$17833 (begin (quote #f) (apply (lambda (g$655$17847) (not (g$655$12161 g$655$17805))) g$655$17833)) (quote #f)) (apply (lambda (g$655$17841) (call-with-values (lambda () (g$655$17677 g$655$17804 g$655$17841 g$655$17806 g$655$17807 g$655$17808 (quote #t))) (lambda (g$655$17844 g$655$17845) (values (g$655$17689 g$655$17805 g$655$17841 g$655$17844) g$655$17845)))) g$655$17833) ((lambda (g$655$17835) ((lambda (g$655$17837) (if (if g$655$17837 (begin (quote #f) (apply (lambda () (quote #t)) g$655$17837)) (quote #f)) (apply (lambda () (values (list (quote quote) g$655$17805) g$655$17807)) g$655$17837) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17835 (quote ()))))) ((lambda (g$655$17839) (quote ())) g$655$17835))) g$655$17831))) ((lambda (g$655$17849) (if (g$655$12197 g$655$17849) (begin (quote #f) ((letrec ((g$655$17851 (lambda (g$655$17853) (if (g$655$12195 g$655$17853) ((lambda (g$655$17855) (if g$655$17855 (begin (quote #f) ((lambda (g$655$17857) (if g$655$17857 (begin (quote #f) (map cons g$655$17855 g$655$17857)) (quote #f))) (g$655$17851 (g$655$12207 g$655$17853)))) (quote #f))) ((lambda (g$655$17859) (list g$655$17859)) (g$655$12203 g$655$17853))) (if (g$655$12199 g$655$17853) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$655$17851) (g$655$12193 g$655$17849))) (quote #f))) g$655$17831))) g$655$17827))) ((lambda (g$655$17877) (if (g$655$12195 g$655$17877) (begin (quote #f) ((lambda (g$655$17879) (if g$655$17879 (begin (quote #f) ((lambda (g$655$17881) (if g$655$17881 (begin (quote #f) (append g$655$17879 g$655$17881)) (quote #f))) ((lambda (g$655$17883) (list g$655$17883)) (g$655$12207 g$655$17877)))) (quote #f))) ((lambda (g$655$17885) (list g$655$17885)) (g$655$12203 g$655$17877)))) (quote #f))) g$655$17827))) g$655$17823))) ((lambda (g$655$17959) (if (g$655$12195 g$655$17959) (begin (quote #f) ((lambda (g$655$17961) (if g$655$17961 (begin (quote #f) ((lambda (g$655$17963) (if g$655$17963 (begin (quote #f) (append g$655$17961 g$655$17963)) (quote #f))) ((lambda (g$655$17965) (if (g$655$12195 g$655$17965) (begin (quote #f) ((lambda (g$655$17967) (if g$655$17967 (begin (quote #f) ((lambda (g$655$17969) (if g$655$17969 (begin (quote #f) (append g$655$17967 g$655$17969)) (quote #f))) ((lambda (g$655$17971) (list g$655$17971)) (g$655$12207 g$655$17965)))) (quote #f))) ((lambda (g$655$17973) (list g$655$17973)) (g$655$12203 g$655$17965)))) (quote #f))) (g$655$12207 g$655$17959)))) (quote #f))) ((lambda (g$655$17975) (list g$655$17975)) (g$655$12203 g$655$17959)))) (quote #f))) g$655$17823))) g$655$17819))) ((lambda (g$655$17987) (if (g$655$12195 g$655$17987) (begin (quote #f) ((lambda (g$655$17989) (if g$655$17989 (begin (quote #f) ((lambda (g$655$17991) (if g$655$17991 (begin (quote #f) (append g$655$17989 g$655$17991)) (quote #f))) ((lambda (g$655$17993) (if (g$655$12195 g$655$17993) (begin (quote #f) ((lambda (g$655$17995) (if g$655$17995 (begin (quote #f) ((lambda (g$655$17997) (if g$655$17997 (begin (quote #f) (append g$655$17995 g$655$17997)) (quote #f))) ((lambda (g$655$17999) (if (equal? (g$655$12229 g$655$17999) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$17993)))) (quote #f))) ((lambda (g$655$18001) (list g$655$18001)) (g$655$12203 g$655$17993)))) (quote #f))) (g$655$12207 g$655$17987)))) (quote #f))) ((lambda (g$655$18003) (list g$655$18003)) (g$655$12203 g$655$17987)))) (quote #f))) g$655$17819))) g$655$17815))) ((lambda (g$655$18019) (list g$655$18019)) g$655$17815))) g$655$17811))) ((lambda (g$655$18025) (list g$655$18025)) g$655$17811))) g$655$17805))) (set! g$655$17679 (lambda (g$655$17784 g$655$17785 g$655$17786 g$655$17787) (if (= g$655$17786 (quote 0)) (values g$655$17785 g$655$17787) (if (null? g$655$17787) (error (quote expander) (quote #3#) (quote "missing ellipsis in syntax form") (g$655$12227 g$655$17784 (quote ()))) (call-with-values (lambda () (g$655$17679 g$655$17784 g$655$17785 (- g$655$17786 (quote 1)) (cdr g$655$17787))) (lambda (g$655$17790 g$655$17791) ((lambda (g$655$17793) (if g$655$17793 ((lambda (g$655$17797) (values (cdr g$655$17797) g$655$17787)) g$655$17793) ((lambda (g$655$17795) (values g$655$17795 (cons (cons (cons g$655$17790 g$655$17795) (car g$655$17787)) g$655$17791))) (g$655$12119 (quote tmp))))) (assq g$655$17790 (car g$655$17787))))))))) (set! g$655$17681 (lambda (g$655$17778 g$655$17779) (if (equal? g$655$17779 (quote (quote ()))) g$655$17778 (list (quote append) g$655$17778 g$655$17779)))) (set! g$655$17683 (lambda (g$655$17774 g$655$17775) (list (quote apply) (quote (primitive append)) (g$655$17685 g$655$17774 g$655$17775)))) (set! g$655$17685 (lambda (g$655$17756 g$655$17757) ((lambda (g$655$17760 g$655$17761) (if (eq? (car g$655$17756) (quote ref)) (car g$655$17761) (if (for-all (lambda (g$655$17769) (if (eq? (car g$655$17769) (quote ref)) (begin (quote #f) (memq (cadr g$655$17769) g$655$17760)) (quote #f))) (cdr g$655$17756)) ((lambda (g$655$17763) (cons (quote map) (cons (list (quote primitive) (car g$655$17756)) g$655$17763))) (map ((lambda (g$655$17765) (lambda (g$655$17767) (cdr (assq (cadr g$655$17767) g$655$17765)))) (map cons g$655$17760 g$655$17761)) (cdr g$655$17756))) (cons* (quote map) (list (quote lambda) g$655$17760 g$655$17756) g$655$17761)))) (map cdr g$655$17757) (map (lambda (g$655$17771) (list (quote ref) (car g$655$17771))) g$655$17757)))) (set! g$655$17687 (lambda (g$655$17744 g$655$17745 g$655$17746 g$655$17747 g$655$17748) ((lambda (g$655$17749) (if (memv g$655$17749 (quote (quote))) (if (eq? (car g$655$17747) (quote quote)) ((lambda (g$655$17752 g$655$17753) (if (if (eq? g$655$17752 g$655$17745) (begin (quote #f) (eq? g$655$17753 g$655$17746)) (quote #f)) (list (quote quote) g$655$17744) (list (quote quote) (cons g$655$17752 g$655$17753)))) (cadr g$655$17747) (cadr g$655$17748)) (if (null? (cadr g$655$17748)) (list (quote list) g$655$17747) (list (quote cons) g$655$17747 g$655$17748))) (if (memv g$655$17749 (quote (list))) (cons (quote list) (cons g$655$17747 (cdr g$655$17748))) (list (quote cons) g$655$17747 g$655$17748)))) (car g$655$17748)))) (set! g$655$17689 (lambda (g$655$17736 g$655$17737 g$655$17738) (if (eq? (car g$655$17738) (quote quote)) (if (eq? (cadr g$655$17738) g$655$17737) (list (quote quote) g$655$17736) (list (quote quote) (list->vector (cadr g$655$17738)))) (if (eq? (car g$655$17738) (quote list)) (cons (quote vector) (cdr g$655$17738)) (list (quote list->vector) g$655$17738))))) (set! g$655$17691 (lambda (g$655$17729) ((lambda (g$655$17730) (if (memv g$655$17730 (quote (ref))) (cadr g$655$17729) (if (memv g$655$17730 (quote (primitive))) (list (quote primitive) (cadr g$655$17729)) (if (memv g$655$17730 (quote (quote))) (list (quote quote) (cadr g$655$17729)) (if (memv g$655$17730 (quote (lambda))) (g$655$12097 (quote #f) (cadr g$655$17729) (g$655$17691 (caddr g$655$17729))) (if (memv g$655$17730 (quote (map))) ((lambda (g$655$17732) (cons (quote (primitive map)) g$655$17732)) (map g$655$17691 (cdr g$655$17729))) (cons (list (quote primitive) (car g$655$17729)) (map g$655$17691 (cdr g$655$17729))))))))) (car g$655$17729)))) (lambda (g$655$17695 g$655$17696 g$655$17697) ((lambda (g$655$17699) ((lambda (g$655$17701) (if (if g$655$17701 (begin (quote #f) (apply (lambda (g$655$17709) (quote #t)) g$655$17701)) (quote #f)) (apply (lambda (g$655$17703) (call-with-values (lambda () (g$655$17677 g$655$17695 g$655$17703 g$655$17696 (quote ()) g$655$12719 (quote #f))) (lambda (g$655$17706 g$655$17707) (g$655$17691 g$655$17706)))) g$655$17701) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$17699 (quote ()))))) ((lambda (g$655$17711) (if (g$655$12195 g$655$17711) (begin (quote #f) ((lambda (g$655$17713) (if g$655$17713 (begin (quote #f) ((lambda (g$655$17715) (if g$655$17715 (begin (quote #f) (append g$655$17713 g$655$17715)) (quote #f))) ((lambda (g$655$17717) (if (g$655$12195 g$655$17717) (begin (quote #f) ((lambda (g$655$17719) (if g$655$17719 (begin (quote #f) ((lambda (g$655$17721) (if g$655$17721 (begin (quote #f) (append g$655$17719 g$655$17721)) (quote #f))) ((lambda (g$655$17723) (if (equal? (g$655$12229 g$655$17723) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$17717)))) (quote #f))) ((lambda (g$655$17725) (list g$655$17725)) (g$655$12203 g$655$17717)))) (quote #f))) (g$655$12207 g$655$17711)))) (quote #f))) ((lambda (g$655$17727) (quote ())) (g$655$12203 g$655$17711)))) (quote #f))) g$655$17699))) g$655$17695)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$655$12725 (lambda (g$655$18027) ((lambda (g$655$18028) (if (memv g$655$18028 (quote (quote))) g$655$12663 (if (memv g$655$18028 (quote (lambda))) g$655$12667 (if (memv g$655$18028 (quote (case-lambda))) g$655$12665 (if (memv g$655$18028 (quote (let-values))) g$655$12645 (if (memv g$655$18028 (quote (letrec))) g$655$12649 (if (memv g$655$18028 (quote (letrec*))) g$655$12651 (if (memv g$655$18028 (quote (case))) g$655$12661 (if (memv g$655$18028 (quote (if))) g$655$12659 (if (memv g$655$18028 (quote (when))) g$655$12655 (if (memv g$655$18028 (quote (unless))) g$655$12657 (if (memv g$655$18028 (quote (parameterize))) g$655$12711 (if (memv g$655$18028 (quote (foreign-call))) g$655$12713 (if (memv g$655$18028 (quote (syntax-case))) g$655$12721 (if (memv g$655$18028 (quote (syntax))) g$655$12723 (if (memv g$655$18028 (quote (type-descriptor))) g$655$12653 (error (quote macro-transformer) (quote "cannot find ~s") g$655$18027))))))))))))))))) g$655$18027))) (set! g$655$12727 (lambda (g$655$18030) (if (procedure? g$655$18030) g$655$18030 (if (symbol? g$655$18030) ((lambda (g$655$18031) (if (memv g$655$18031 (quote (define-record))) g$655$12707 (if (memv g$655$18031 (quote (include))) g$655$12699 (if (memv g$655$18031 (quote (cond))) g$655$12697 (if (memv g$655$18031 (quote (let))) g$655$12673 (if (memv g$655$18031 (quote (do))) g$655$12689 (if (memv g$655$18031 (quote (or))) g$655$12693 (if (memv g$655$18031 (quote (and))) g$655$12695 (if (memv g$655$18031 (quote (let*))) g$655$12691 (if (memv g$655$18031 (quote (syntax-rules))) g$655$12701 (if (memv g$655$18031 (quote (quasiquote))) g$655$12703 (if (memv g$655$18031 (quote (quasisyntax))) g$655$12705 (if (memv g$655$18031 (quote (with-syntax))) g$655$12671 (if (memv g$655$18031 (quote (identifier-syntax))) g$655$12687 (if (memv g$655$18031 (quote (time))) g$655$12679 (if (memv g$655$18031 (quote (delay))) g$655$12681 (if (memv g$655$18031 (quote (assert))) g$655$12683 (if (memv g$655$18031 (quote (endianness))) g$655$12685 (if (memv g$655$18031 (quote (trace-lambda))) g$655$12675 (if (memv g$655$18031 (quote (trace-define))) g$655$12677 (if (memv g$655$18031 (quote (... => _ else unquote unquote-splicing unsyntax unsyntax-splicing))) g$655$12709 (error (quote macro-transformer) (quote "invalid macro ~s") g$655$18030)))))))))))))))))))))) g$655$18030) (error (quote core-macro-transformer) (quote "invalid macro ~s") g$655$18030))))) (set! g$655$12729 (lambda (g$655$18033) (car g$655$18033))) (set! g$655$12731 (lambda (g$655$18036 g$655$18037) ((lambda (g$655$18039) (g$655$12187 (g$655$12177) g$655$18039)) ((g$655$12727 g$655$18036) (g$655$12187 g$655$12179 g$655$18037))))) (set! g$655$12733 (lambda (g$655$18042 g$655$18043) ((lambda (g$655$18045) (g$655$12187 (g$655$12177) g$655$18045)) ((g$655$12729 g$655$18042) (g$655$12187 g$655$12179 g$655$18043))))) (set! g$655$12735 (lambda (g$655$18048 g$655$18049) ((lambda (g$655$18052 g$655$18053) (begin (g$655$11745 g$655$18052) ((lambda (g$655$18055) ((lambda (g$655$18057) ((lambda (g$655$18059) (g$655$12187 (g$655$12177) g$655$18059)) (g$655$18057 (g$655$12187 g$655$12179 g$655$18049)))) (if (procedure? g$655$18055) g$655$18055 (error (quote chi-global-macro) (quote "~s is not a procedure"))))) (symbol-value g$655$18053)))) (car g$655$18048) (cdr g$655$18048)))) (set! g$655$12737 (lambda (g$655$18063 g$655$18064 g$655$18065) (if (null? g$655$18063) (quote ()) ((lambda (g$655$18067) (cons g$655$18067 (g$655$12737 (cdr g$655$18063) g$655$18064 g$655$18065))) (g$655$12741 (car g$655$18063) g$655$18064 g$655$18065))))) (set! g$655$12739 (lambda (g$655$18071 g$655$18072 g$655$18073) ((lambda (g$655$18075) ((lambda (g$655$18077) (if (if g$655$18077 (begin (quote #f) (apply (lambda (g$655$18086 g$655$18087) (quote #t)) g$655$18077)) (quote #f)) (apply (lambda (g$655$18080 g$655$18081) ((lambda (g$655$18083) (cons g$655$18083 (g$655$12737 g$655$18081 g$655$18072 g$655$18073))) (g$655$12741 g$655$18080 g$655$18072 g$655$18073))) g$655$18077) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18075 (quote ()))))) ((lambda (g$655$18089) (if (g$655$12195 g$655$18089) (begin (quote #f) ((lambda (g$655$18091) (if g$655$18091 (begin (quote #f) ((lambda (g$655$18093) (if g$655$18093 (begin (quote #f) (append g$655$18091 g$655$18093)) (quote #f))) ((letrec ((g$655$18095 (lambda (g$655$18097) (if (g$655$12195 g$655$18097) ((lambda (g$655$18099) (if g$655$18099 (begin (quote #f) ((lambda (g$655$18101) (if g$655$18101 (begin (quote #f) (map cons g$655$18099 g$655$18101)) (quote #f))) (g$655$18095 (g$655$12207 g$655$18097)))) (quote #f))) ((lambda (g$655$18103) (list g$655$18103)) (g$655$12203 g$655$18097))) (if (g$655$12199 g$655$18097) (list (begin (quote rands) (quote ()))) (quote #f)))))) g$655$18095) (g$655$12207 g$655$18089)))) (quote #f))) ((lambda (g$655$18105) (list g$655$18105)) (g$655$12203 g$655$18089)))) (quote #f))) g$655$18075))) g$655$18071))) (set! g$655$12741 (lambda (g$655$18109 g$655$18110 g$655$18111) (call-with-values (lambda () (g$655$12241 g$655$18109 g$655$18110)) (lambda (g$655$18115 g$655$18116 g$655$18117) ((lambda (g$655$18118) (if (memv g$655$18118 (quote (core-macro))) ((lambda (g$655$18256) (g$655$18256 g$655$18109 g$655$18110 g$655$18111)) (g$655$12725 g$655$18116)) (if (memv g$655$18118 (quote (global))) ((lambda (g$655$18252) ((lambda (g$655$18254) ((lambda () (begin ((g$655$12789) g$655$18252) g$655$18254)))) (cdr g$655$18116))) (car g$655$18116)) (if (memv g$655$18118 (quote (core-prim))) ((lambda (g$655$18250) (list (quote primitive) g$655$18250)) g$655$18116) (if (memv g$655$18118 (quote (call))) (g$655$12739 g$655$18109 g$655$18110 g$655$18111) (if (memv g$655$18118 (quote (lexical))) ((lambda (g$655$18248) g$655$18248) g$655$18116) (if (memv g$655$18118 (quote (global-macro global-macro!))) (g$655$12741 (g$655$12735 g$655$18116 g$655$18109) g$655$18110 g$655$18111) (if (memv g$655$18118 (quote (local-macro local-macro!))) (g$655$12741 (g$655$12733 g$655$18116 g$655$18109) g$655$18110 g$655$18111) (if (memv g$655$18118 (quote (macro macro!))) (g$655$12741 (g$655$12731 g$655$18116 g$655$18109) g$655$18110 g$655$18111) (if (memv g$655$18118 (quote (constant))) ((lambda (g$655$18246) (list (quote quote) g$655$18246)) g$655$18116) (if (memv g$655$18118 (quote (set!))) (g$655$12743 g$655$18109 g$655$18110 g$655$18111) (if (memv g$655$18118 (quote (begin))) ((lambda (g$655$18208) ((lambda (g$655$18210) (if (if g$655$18210 (begin (quote #f) (apply (lambda (g$655$18217 g$655$18218) (quote #t)) g$655$18210)) (quote #f)) (apply (lambda (g$655$18213 g$655$18214) (g$655$12091 (quote #f) (g$655$12737 (cons g$655$18213 g$655$18214) g$655$18110 g$655$18111))) g$655$18210) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18208 (quote ()))))) ((lambda (g$655$18220) (if (g$655$12195 g$655$18220) (begin (quote #f) ((lambda (g$655$18222) (if g$655$18222 (begin (quote #f) ((lambda (g$655$18224) (if g$655$18224 (begin (quote #f) (append g$655$18222 g$655$18224)) (quote #f))) ((lambda (g$655$18226) (if (g$655$12195 g$655$18226) (begin (quote #f) ((lambda (g$655$18228) (if g$655$18228 (begin (quote #f) ((lambda (g$655$18230) (if g$655$18230 (begin (quote #f) (append g$655$18228 g$655$18230)) (quote #f))) ((letrec ((g$655$18232 (lambda (g$655$18234) (if (g$655$12195 g$655$18234) ((lambda (g$655$18236) (if g$655$18236 (begin (quote #f) ((lambda (g$655$18238) (if g$655$18238 (begin (quote #f) (map cons g$655$18236 g$655$18238)) (quote #f))) (g$655$18232 (g$655$12207 g$655$18234)))) (quote #f))) ((lambda (g$655$18240) (list g$655$18240)) (g$655$12203 g$655$18234))) (if (g$655$12199 g$655$18234) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$18232) (g$655$12207 g$655$18226)))) (quote #f))) ((lambda (g$655$18242) (list g$655$18242)) (g$655$12203 g$655$18226)))) (quote #f))) (g$655$12207 g$655$18220)))) (quote #f))) ((lambda (g$655$18244) (quote ())) (g$655$12203 g$655$18220)))) (quote #f))) g$655$18208))) g$655$18109) (if (memv g$655$18118 (quote (let-syntax letrec-syntax))) ((lambda (g$655$18120) ((lambda (g$655$18122) (if (if g$655$18122 (begin (quote #f) (apply (lambda (g$655$18145 g$655$18146 g$655$18147 g$655$18148) (if (g$655$12219 g$655$18145) (void) (error (quote expander) (quote #3#) (quote "invalid identifiers") (g$655$12227 g$655$18109 (quote ()))))) g$655$18122)) (quote #f)) (apply (lambda (g$655$18127 g$655$18128 g$655$18129 g$655$18130) ((lambda (g$655$18132) ((lambda (g$655$18134) ((lambda (g$655$18136) ((lambda () (g$655$12091 (quote #f) (g$655$12737 (map (lambda (g$655$18138) (g$655$12189 g$655$18134 g$655$18138)) (cons g$655$18129 g$655$18130)) (append (map cons g$655$18132 g$655$18136) g$655$18110) (append (map cons g$655$18132 g$655$18136) g$655$18111)))))) (map (lambda (g$655$18140) (g$655$12273 (g$655$12775 (if (eq? g$655$18115 (quote let-syntax)) g$655$18140 (g$655$12189 g$655$18134 g$655$18140)) g$655$18111))) g$655$18128))) (g$655$12156 g$655$18127 g$655$18132))) (map g$655$12123 g$655$18127))) g$655$18122) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18120 (quote ()))))) ((lambda (g$655$18150) (if (g$655$12195 g$655$18150) (begin (quote #f) ((lambda (g$655$18152) (if g$655$18152 (begin (quote #f) ((lambda (g$655$18154) (if g$655$18154 (begin (quote #f) (append g$655$18152 g$655$18154)) (quote #f))) ((lambda (g$655$18156) (if (g$655$12195 g$655$18156) (begin (quote #f) ((lambda (g$655$18158) (if g$655$18158 (begin (quote #f) ((lambda (g$655$18160) (if g$655$18160 (begin (quote #f) (append g$655$18158 g$655$18160)) (quote #f))) ((lambda (g$655$18162) (if (g$655$12195 g$655$18162) (begin (quote #f) ((lambda (g$655$18164) (if g$655$18164 (begin (quote #f) ((lambda (g$655$18166) (if g$655$18166 (begin (quote #f) (append g$655$18164 g$655$18166)) (quote #f))) ((letrec ((g$655$18168 (lambda (g$655$18170) (if (g$655$12195 g$655$18170) ((lambda (g$655$18172) (if g$655$18172 (begin (quote #f) ((lambda (g$655$18174) (if g$655$18174 (begin (quote #f) (map cons g$655$18172 g$655$18174)) (quote #f))) (g$655$18168 (g$655$12207 g$655$18170)))) (quote #f))) ((lambda (g$655$18176) (list g$655$18176)) (g$655$12203 g$655$18170))) (if (g$655$12199 g$655$18170) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$655$18168) (g$655$12207 g$655$18162)))) (quote #f))) ((lambda (g$655$18178) (list g$655$18178)) (g$655$12203 g$655$18162)))) (quote #f))) (g$655$12207 g$655$18156)))) (quote #f))) ((letrec ((g$655$18180 (lambda (g$655$18182) (if (g$655$12195 g$655$18182) ((lambda (g$655$18184) (if g$655$18184 (begin (quote #f) ((lambda (g$655$18186) (if g$655$18186 (begin (quote #f) (map cons g$655$18184 g$655$18186)) (quote #f))) (g$655$18180 (g$655$12207 g$655$18182)))) (quote #f))) ((lambda (g$655$18188) (if (g$655$12195 g$655$18188) (begin (quote #f) ((lambda (g$655$18190) (if g$655$18190 (begin (quote #f) ((lambda (g$655$18192) (if g$655$18192 (begin (quote #f) (append g$655$18190 g$655$18192)) (quote #f))) ((lambda (g$655$18194) (if (g$655$12195 g$655$18194) (begin (quote #f) ((lambda (g$655$18196) (if g$655$18196 (begin (quote #f) ((lambda (g$655$18198) (if g$655$18198 (begin (quote #f) (append g$655$18196 g$655$18198)) (quote #f))) ((lambda (g$655$18200) (if (equal? (g$655$12229 g$655$18200) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$18194)))) (quote #f))) ((lambda (g$655$18202) (list g$655$18202)) (g$655$12203 g$655$18194)))) (quote #f))) (g$655$12207 g$655$18188)))) (quote #f))) ((lambda (g$655$18204) (list g$655$18204)) (g$655$12203 g$655$18188)))) (quote #f))) (g$655$12203 g$655$18182))) (if (g$655$12199 g$655$18182) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$655$18180) (g$655$12203 g$655$18156)))) (quote #f))) (g$655$12207 g$655$18150)))) (quote #f))) ((lambda (g$655$18206) (quote ())) (g$655$12203 g$655$18150)))) (quote #f))) g$655$18120))) g$655$18109) (if (memv g$655$18118 (quote (displaced-lexical))) (error (quote expander) (quote #3#) (quote "identifier out of context") (g$655$12227 g$655$18109 (quote ()))) (if (memv g$655$18118 (quote (syntax))) (error (quote expander) (quote #3#) (quote "reference to pattern variable outside a syntax form") (g$655$12227 g$655$18109 (quote ()))) (if (memv g$655$18118 (quote (define define-syntax module import))) (error (quote expander) (quote #3#) (quote "invalid expression") (g$655$12227 g$655$18109 (quote ()))) (error (quote expander) (quote #3#) (quote "invalid expression") (g$655$12227 g$655$18109 (quote ()))))))))))))))))))) g$655$18115))))) (set! g$655$12743 (lambda (g$655$18260 g$655$18261 g$655$18262) ((lambda (g$655$18264) ((lambda (g$655$18266) (if (if g$655$18266 (begin (quote #f) (apply (lambda (g$655$18280 g$655$18281) (g$655$12209 g$655$18280)) g$655$18266)) (quote #f)) (apply (lambda (g$655$18269 g$655$18270) (call-with-values (lambda () (g$655$12241 g$655$18269 g$655$18261)) (lambda (g$655$18274 g$655$18275 g$655$18276) ((lambda (g$655$18277) (if (memv g$655$18277 (quote (lexical))) (list (quote set!) g$655$18275 (g$655$12741 g$655$18270 g$655$18261 g$655$18262)) (if (memv g$655$18277 (quote (global core-prim))) (error (quote expander) (quote #3#) (quote "cannot modify imported identifier in") (g$655$12227 g$655$18260 (quote ()))) (if (memv g$655$18277 (quote (global-macro!))) (g$655$12741 (g$655$12735 g$655$18275 g$655$18260) g$655$18261 g$655$18262) (if (memv g$655$18277 (quote (local-macro!))) (g$655$12741 (g$655$12733 g$655$18275 g$655$18260) g$655$18261 g$655$18262) (error (quote expander) (quote #5#) (g$655$12229 g$655$18260))))))) g$655$18274)))) g$655$18266) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18264 (quote ()))))) ((lambda (g$655$18283) (if (g$655$12195 g$655$18283) (begin (quote #f) ((lambda (g$655$18285) (if g$655$18285 (begin (quote #f) ((lambda (g$655$18287) (if g$655$18287 (begin (quote #f) (append g$655$18285 g$655$18287)) (quote #f))) ((lambda (g$655$18289) (if (g$655$12195 g$655$18289) (begin (quote #f) ((lambda (g$655$18291) (if g$655$18291 (begin (quote #f) ((lambda (g$655$18293) (if g$655$18293 (begin (quote #f) (append g$655$18291 g$655$18293)) (quote #f))) ((lambda (g$655$18295) (if (g$655$12195 g$655$18295) (begin (quote #f) ((lambda (g$655$18297) (if g$655$18297 (begin (quote #f) ((lambda (g$655$18299) (if g$655$18299 (begin (quote #f) (append g$655$18297 g$655$18299)) (quote #f))) ((lambda (g$655$18301) (if (equal? (g$655$12229 g$655$18301) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$18295)))) (quote #f))) ((lambda (g$655$18303) (list g$655$18303)) (g$655$12203 g$655$18295)))) (quote #f))) (g$655$12207 g$655$18289)))) (quote #f))) ((lambda (g$655$18305) (list g$655$18305)) (g$655$12203 g$655$18289)))) (quote #f))) (g$655$12207 g$655$18283)))) (quote #f))) ((lambda (g$655$18307) (quote ())) (g$655$12203 g$655$18283)))) (quote #f))) g$655$18264))) g$655$18260))) (set! g$655$12745 (lambda (g$655$18312 g$655$18313 g$655$18314 g$655$18315) ((lambda (g$655$18317) ((lambda (g$655$18319) (if (if g$655$18319 (begin (quote #f) (apply (lambda (g$655$18371) (quote #t)) g$655$18319)) (quote #f)) (apply (lambda (g$655$18365) (if (g$655$12219 g$655$18365) ((lambda (g$655$18368 g$655$18369) (values g$655$18368 (g$655$12757 (g$655$12189 (g$655$12156 g$655$18365 g$655$18369) g$655$18313) (g$655$12643 g$655$18369 g$655$18368 g$655$18314) g$655$18315))) (map g$655$12119 g$655$18365) (map g$655$12123 g$655$18365)) (error (quote expander) (quote #3#) (quote "invalid fmls") (g$655$12227 g$655$18312 (quote ()))))) g$655$18319) ((lambda (g$655$18321) ((lambda (g$655$18323) (if (if g$655$18323 (begin (quote #f) (apply (lambda (g$655$18344 g$655$18345) (quote #t)) g$655$18323)) (quote #f)) (apply (lambda (g$655$18332 g$655$18333) (if (g$655$12219 (cons g$655$18333 g$655$18332)) ((lambda (g$655$18338 g$655$18339 g$655$18340 g$655$18341) (values (append g$655$18338 g$655$18340) (g$655$12757 (g$655$12189 (g$655$12156 (cons g$655$18333 g$655$18332) (cons g$655$18341 g$655$18339)) g$655$18313) (g$655$12643 (cons g$655$18341 g$655$18339) (cons g$655$18340 g$655$18338) g$655$18314) g$655$18315))) (map g$655$12119 g$655$18332) (map g$655$12123 g$655$18332) (g$655$12119 g$655$18333) (g$655$12123 g$655$18333)) (error (quote expander) (quote #3#) (quote "invalid fmls") (g$655$12227 g$655$18312 (quote ()))))) g$655$18323) ((lambda (g$655$18325) ((lambda (g$655$18327) (if (if g$655$18327 (begin (quote #f) (apply (lambda () (quote #t)) g$655$18327)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "invalid fmls") (g$655$12227 g$655$18312 (quote ())))) g$655$18327) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18325 (quote ()))))) ((lambda (g$655$18329) (quote ())) g$655$18325))) g$655$18321))) ((letrec ((g$655$18347 (lambda (g$655$18349) (if (g$655$12195 g$655$18349) ((lambda (g$655$18355) (if g$655$18355 (begin (quote #f) ((lambda (g$655$18357) (if g$655$18357 (begin (quote #f) (cons (map cons g$655$18355 (car g$655$18357)) (cdr g$655$18357))) (quote #f))) (g$655$18347 (g$655$12207 g$655$18349)))) (quote #f))) ((lambda (g$655$18359) (list g$655$18359)) (g$655$12203 g$655$18349))) ((lambda (g$655$18351) (if g$655$18351 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$655$18351)) (quote #f))) ((lambda (g$655$18353) (list g$655$18353)) g$655$18349)))))) (lambda (g$655$18361) ((lambda (g$655$18363) (if g$655$18363 (begin (quote #f) (append (car g$655$18363) (cdr g$655$18363))) (quote #f))) (g$655$18347 g$655$18361)))) g$655$18321))) g$655$18317))) ((letrec ((g$655$18373 (lambda (g$655$18375) (if (g$655$12195 g$655$18375) ((lambda (g$655$18377) (if g$655$18377 (begin (quote #f) ((lambda (g$655$18379) (if g$655$18379 (begin (quote #f) (map cons g$655$18377 g$655$18379)) (quote #f))) (g$655$18373 (g$655$12207 g$655$18375)))) (quote #f))) ((lambda (g$655$18381) (list g$655$18381)) (g$655$12203 g$655$18375))) (if (g$655$12199 g$655$18375) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$18373) g$655$18317))) g$655$18312))) (set! g$655$12747 (lambda (g$655$18386 g$655$18387 g$655$18388 g$655$18389) (if (null? g$655$18386) (values (quote ()) (quote ())) (call-with-values (lambda () (g$655$12745 (car g$655$18386) (car g$655$18387) g$655$18388 g$655$18389)) (lambda (g$655$18392 g$655$18393) (call-with-values (lambda () (g$655$12747 (cdr g$655$18386) (cdr g$655$18387) g$655$18388 g$655$18389)) (lambda (g$655$18396 g$655$18397) (values (cons g$655$18392 g$655$18396) (cons g$655$18393 g$655$18397))))))))) (set! g$655$12749 (lambda (g$655$18401 g$655$18402 g$655$18403) ((lambda (g$655$18404) (if (memv g$655$18404 (quote (defun))) ((lambda (g$655$18410) ((lambda (g$655$18413 g$655$18414) (call-with-values (lambda () (g$655$12745 g$655$18413 g$655$18414 g$655$18402 g$655$18403)) (lambda (g$655$18417 g$655$18418) (g$655$12097 (quote #f) g$655$18417 g$655$18418)))) (car g$655$18410) (cdr g$655$18410))) (cdr g$655$18401)) (if (memv g$655$18404 (quote (expr))) ((lambda (g$655$18408) (g$655$12741 g$655$18408 g$655$18402 g$655$18403)) (cdr g$655$18401)) (if (memv g$655$18404 (quote (top-expr))) ((lambda (g$655$18406) (g$655$12091 (quote #f) (list (g$655$12741 g$655$18406 g$655$18402 g$655$18403) (g$655$12090)))) (cdr g$655$18401)) (error (quote chi-rhs) (quote "invalid rhs ~s") g$655$18401))))) (car g$655$18401)))) (set! g$655$12751 (lambda (g$655$18422 g$655$18423 g$655$18424) (letrec ((g$655$18426 (lambda (g$655$18428) (if (null? g$655$18428) (quote ()) ((lambda (g$655$18430) (cons g$655$18430 (g$655$18426 (cdr g$655$18428)))) (g$655$12749 (car g$655$18428) g$655$18423 g$655$18424)))))) (g$655$18426 g$655$18422)))) (set! g$655$12753 (lambda (g$655$18434 g$655$18435 g$655$18436) (if (null? g$655$18435) (quote #f) (if (g$655$12215 g$655$18434 (car g$655$18435)) (car g$655$18436) (g$655$12753 g$655$18434 (cdr g$655$18435) (cdr g$655$18436)))))) (set! g$655$12755 (lambda (g$655$18438) (letrec ((g$655$18440 (lambda (g$655$18443 g$655$18444) (if (null? g$655$18443) g$655$18444 ((lambda (g$655$18446) (if g$655$18446 ((lambda (g$655$18448) (g$655$18440 (cdr g$655$18443) (cons (list (car g$655$18443) g$655$18448) g$655$18444))) g$655$18446) (g$655$18440 (cdr g$655$18443) g$655$18444))) (g$655$12753 (car g$655$18443) (cdr g$655$18443) (cdr g$655$18443))))))) (g$655$18440 g$655$18438 (quote ()))))) (set! g$655$12757 (lambda (g$655$18452 g$655$18453 g$655$18454) ((lambda (g$655$18456) (call-with-values (lambda () (g$655$12763 (map (lambda (g$655$18458) (g$655$12189 g$655$18456 g$655$18458)) (g$655$12205 g$655$18452)) g$655$18453 g$655$18454 (quote ()) (quote ()) (quote ()) (quote ()) g$655$18456 (quote #f))) (lambda (g$655$18466 g$655$18467 g$655$18468 g$655$18469 g$655$18470 g$655$18471 g$655$18472) (begin (if (null? g$655$18466) (error (quote expander) (quote #3#) (quote "no expression in body") (g$655$12227 g$655$18466 (quote ()))) (void)) ((lambda (g$655$18475 g$655$18476) (g$655$12088 (quote #f) (reverse g$655$18469) (reverse g$655$18475) (g$655$12091 (quote #f) g$655$18476))) (g$655$12751 g$655$18470 g$655$18467 g$655$18468) (g$655$12737 (append (apply append (reverse g$655$18471)) g$655$18466) g$655$18467 g$655$18468)))))) (g$655$12146)))) (set! g$655$12759 (lambda (g$655$18478) ((lambda (g$655$18480) ((lambda (g$655$18482) (if (if g$655$18482 (begin (quote #f) (apply (lambda (g$655$18547 g$655$18548) (quote #t)) g$655$18482)) (quote #f)) (apply (lambda (g$655$18543 g$655$18544) (begin (if (for-all g$655$12209 g$655$18543) (void) (error (quote expander) (quote #3#) (quote "module exports must be identifiers") (g$655$12227 g$655$18478 (quote ())))) (values (quote #f) g$655$18543 g$655$18544))) g$655$18482) ((lambda (g$655$18484) ((lambda (g$655$18486) (if (if g$655$18486 (begin (quote #f) (apply (lambda (g$655$18496 g$655$18497 g$655$18498) (quote #t)) g$655$18486)) (quote #f)) (apply (lambda (g$655$18490 g$655$18491 g$655$18492) (begin (if (g$655$12209 g$655$18490) (void) (error (quote expander) (quote #3#) (quote "module name must be an identifier") (g$655$12227 g$655$18478 (quote ())))) (if (for-all g$655$12209 g$655$18491) (void) (error (quote expander) (quote #3#) (quote "module exports must be identifiers") (g$655$12227 g$655$18478 (quote ())))) (values g$655$18490 g$655$18491 g$655$18492))) g$655$18486) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18484 (quote ()))))) ((lambda (g$655$18500) (if (g$655$12195 g$655$18500) (begin (quote #f) ((lambda (g$655$18502) (if g$655$18502 (begin (quote #f) ((lambda (g$655$18504) (if g$655$18504 (begin (quote #f) (append g$655$18502 g$655$18504)) (quote #f))) ((lambda (g$655$18506) (if (g$655$12195 g$655$18506) (begin (quote #f) ((lambda (g$655$18508) (if g$655$18508 (begin (quote #f) ((lambda (g$655$18510) (if g$655$18510 (begin (quote #f) (append g$655$18508 g$655$18510)) (quote #f))) ((lambda (g$655$18512) (if (g$655$12195 g$655$18512) (begin (quote #f) ((lambda (g$655$18514) (if g$655$18514 (begin (quote #f) ((lambda (g$655$18516) (if g$655$18516 (begin (quote #f) (append g$655$18514 g$655$18516)) (quote #f))) ((letrec ((g$655$18518 (lambda (g$655$18520) (if (g$655$12195 g$655$18520) ((lambda (g$655$18522) (if g$655$18522 (begin (quote #f) ((lambda (g$655$18524) (if g$655$18524 (begin (quote #f) (map cons g$655$18522 g$655$18524)) (quote #f))) (g$655$18518 (g$655$12207 g$655$18520)))) (quote #f))) ((lambda (g$655$18526) (list g$655$18526)) (g$655$12203 g$655$18520))) (if (g$655$12199 g$655$18520) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$18518) (g$655$12207 g$655$18512)))) (quote #f))) ((letrec ((g$655$18528 (lambda (g$655$18530) (if (g$655$12195 g$655$18530) ((lambda (g$655$18532) (if g$655$18532 (begin (quote #f) ((lambda (g$655$18534) (if g$655$18534 (begin (quote #f) (map cons g$655$18532 g$655$18534)) (quote #f))) (g$655$18528 (g$655$12207 g$655$18530)))) (quote #f))) ((lambda (g$655$18536) (list g$655$18536)) (g$655$12203 g$655$18530))) (if (g$655$12199 g$655$18530) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$655$18528) (g$655$12203 g$655$18512)))) (quote #f))) (g$655$12207 g$655$18506)))) (quote #f))) ((lambda (g$655$18538) (list g$655$18538)) (g$655$12203 g$655$18506)))) (quote #f))) (g$655$12207 g$655$18500)))) (quote #f))) ((lambda (g$655$18540) (quote ())) (g$655$12203 g$655$18500)))) (quote #f))) g$655$18484))) g$655$18480))) ((lambda (g$655$18550) (if (g$655$12195 g$655$18550) (begin (quote #f) ((lambda (g$655$18552) (if g$655$18552 (begin (quote #f) ((lambda (g$655$18554) (if g$655$18554 (begin (quote #f) (append g$655$18552 g$655$18554)) (quote #f))) ((lambda (g$655$18556) (if (g$655$12195 g$655$18556) (begin (quote #f) ((lambda (g$655$18558) (if g$655$18558 (begin (quote #f) ((lambda (g$655$18560) (if g$655$18560 (begin (quote #f) (append g$655$18558 g$655$18560)) (quote #f))) ((letrec ((g$655$18562 (lambda (g$655$18564) (if (g$655$12195 g$655$18564) ((lambda (g$655$18566) (if g$655$18566 (begin (quote #f) ((lambda (g$655$18568) (if g$655$18568 (begin (quote #f) (map cons g$655$18566 g$655$18568)) (quote #f))) (g$655$18562 (g$655$12207 g$655$18564)))) (quote #f))) ((lambda (g$655$18570) (list g$655$18570)) (g$655$12203 g$655$18564))) (if (g$655$12199 g$655$18564) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$18562) (g$655$12207 g$655$18556)))) (quote #f))) ((letrec ((g$655$18572 (lambda (g$655$18574) (if (g$655$12195 g$655$18574) ((lambda (g$655$18576) (if g$655$18576 (begin (quote #f) ((lambda (g$655$18578) (if g$655$18578 (begin (quote #f) (map cons g$655$18576 g$655$18578)) (quote #f))) (g$655$18572 (g$655$12207 g$655$18574)))) (quote #f))) ((lambda (g$655$18580) (list g$655$18580)) (g$655$12203 g$655$18574))) (if (g$655$12199 g$655$18574) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$655$18572) (g$655$12203 g$655$18556)))) (quote #f))) (g$655$12207 g$655$18550)))) (quote #f))) ((lambda (g$655$18582) (quote ())) (g$655$12203 g$655$18550)))) (quote #f))) g$655$18480))) g$655$18478))) (set! g$655$12761 (lambda (g$655$18590 g$655$18591 g$655$18592 g$655$18593 g$655$18594 g$655$18595 g$655$18596) (call-with-values (lambda () (g$655$12759 g$655$18590)) (lambda (g$655$18600 g$655$18601 g$655$18602) ((lambda (g$655$18604) ((lambda (g$655$18606) ((lambda () (call-with-values (lambda () (g$655$12763 g$655$18606 g$655$18591 g$655$18592 g$655$18593 g$655$18594 g$655$18595 g$655$18596 g$655$18604 (quote #f))) (lambda (g$655$18614 g$655$18615 g$655$18616 g$655$18617 g$655$18618 g$655$18619 g$655$18620) ((lambda (g$655$18623 g$655$18624) (if (not g$655$18600) (values g$655$18617 g$655$18618 g$655$18601 g$655$18623 g$655$18615 g$655$18616 g$655$18624 g$655$18620) ((lambda (g$655$18627 g$655$18628) (values g$655$18617 g$655$18618 (list g$655$18600) (list g$655$18627) (cons (cons g$655$18627 (cons (quote $module) g$655$18628)) g$655$18615) (cons (cons g$655$18627 (cons (quote $module) g$655$18628)) g$655$18616) g$655$18624 g$655$18620)) (g$655$12123 (quote module)) (cons g$655$18601 g$655$18623)))) (map (lambda (g$655$18630) ((lambda (g$655$18632) (if g$655$18632 g$655$18632 (begin (quote #f) (error (quote expander) (quote #3#) (quote "cannot find module export") (g$655$12227 g$655$18630 (quote ())))))) (g$655$12231 (g$655$12189 g$655$18604 g$655$18630)))) g$655$18601) (cons g$655$18614 g$655$18619))))))) (map (lambda (g$655$18634) (g$655$12189 g$655$18604 g$655$18634)) (g$655$12205 g$655$18602)))) (g$655$12146)))))) (set! g$655$12763 (lambda (g$655$18644 g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18650 g$655$18651 g$655$18652) (if (null? g$655$18644) (values g$655$18644 g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18650) ((lambda (g$655$18654) (call-with-values (lambda () (g$655$12241 g$655$18654 g$655$18645)) (lambda (g$655$18658 g$655$18659 g$655$18660) ((lambda (g$655$18662) ((lambda (g$655$18663) (if (memv g$655$18663 (quote (define))) (call-with-values (lambda () (g$655$12635 g$655$18654)) (lambda (g$655$18851 g$655$18852) (begin (if (g$655$12223 g$655$18851 g$655$18662) (error (quote expander) (quote #3#) (quote "cannot redefine keyword") (g$655$12227 g$655$18654 (quote ()))) (void)) ((lambda (g$655$18855 g$655$18856) (begin (g$655$12148 g$655$18651 g$655$18851 g$655$18856) (g$655$12763 (cdr g$655$18644) (g$655$12641 g$655$18856 g$655$18855 g$655$18645) g$655$18646 (cons g$655$18855 g$655$18647) (cons g$655$18852 g$655$18648) g$655$18649 g$655$18662 g$655$18651 g$655$18652))) (g$655$12119 g$655$18851) (g$655$12123 g$655$18851))))) (if (memv g$655$18663 (quote (define-syntax))) (call-with-values (lambda () (g$655$12637 g$655$18654)) (lambda (g$655$18841 g$655$18842) (begin (if (g$655$12223 g$655$18841 g$655$18662) (error (quote expander) (quote #3#) (quote "cannot redefine keyword") (g$655$12227 g$655$18654 (quote ()))) (void)) ((lambda (g$655$18845 g$655$18846) (begin (g$655$12148 g$655$18651 g$655$18841 g$655$18845) ((lambda (g$655$18848) (g$655$12763 (cdr g$655$18644) (cons (cons g$655$18845 g$655$18848) g$655$18645) (cons (cons g$655$18845 g$655$18848) g$655$18646) g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652)) (g$655$12273 g$655$18846)))) (g$655$12123 g$655$18841) (g$655$12775 g$655$18842 g$655$18646))))) (if (memv g$655$18663 (quote (let-syntax letrec-syntax))) ((lambda (g$655$18764) ((lambda (g$655$18766) (if (if g$655$18766 (begin (quote #f) (apply (lambda (g$655$18786 g$655$18787 g$655$18788) (if (g$655$12219 g$655$18786) (void) (error (quote expander) (quote #3#) (quote "invalid identifiers") (g$655$12227 g$655$18654 (quote ()))))) g$655$18766)) (quote #f)) (apply (lambda (g$655$18770 g$655$18771 g$655$18772) ((lambda (g$655$18774) ((lambda (g$655$18776) ((lambda (g$655$18778) ((lambda () (g$655$12763 (append (map (lambda (g$655$18780) (g$655$12189 g$655$18776 g$655$18780)) g$655$18772) (cdr g$655$18644)) (append (map cons g$655$18774 g$655$18778) g$655$18645) (append (map cons g$655$18774 g$655$18778) g$655$18646) g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652)))) (map (lambda (g$655$18782) (g$655$12273 (g$655$12775 (if (eq? g$655$18658 (quote let-syntax)) g$655$18782 (g$655$12189 g$655$18776 g$655$18782)) g$655$18646))) g$655$18771))) (g$655$12156 g$655$18770 g$655$18774))) (map g$655$12123 g$655$18770))) g$655$18766) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18764 (quote ()))))) ((lambda (g$655$18790) (if (g$655$12195 g$655$18790) (begin (quote #f) ((lambda (g$655$18792) (if g$655$18792 (begin (quote #f) ((lambda (g$655$18794) (if g$655$18794 (begin (quote #f) (append g$655$18792 g$655$18794)) (quote #f))) ((lambda (g$655$18796) (if (g$655$12195 g$655$18796) (begin (quote #f) ((lambda (g$655$18798) (if g$655$18798 (begin (quote #f) ((lambda (g$655$18800) (if g$655$18800 (begin (quote #f) (append g$655$18798 g$655$18800)) (quote #f))) ((letrec ((g$655$18802 (lambda (g$655$18804) (if (g$655$12195 g$655$18804) ((lambda (g$655$18806) (if g$655$18806 (begin (quote #f) ((lambda (g$655$18808) (if g$655$18808 (begin (quote #f) (map cons g$655$18806 g$655$18808)) (quote #f))) (g$655$18802 (g$655$12207 g$655$18804)))) (quote #f))) ((lambda (g$655$18810) (list g$655$18810)) (g$655$12203 g$655$18804))) (if (g$655$12199 g$655$18804) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$655$18802) (g$655$12207 g$655$18796)))) (quote #f))) ((letrec ((g$655$18812 (lambda (g$655$18814) (if (g$655$12195 g$655$18814) ((lambda (g$655$18816) (if g$655$18816 (begin (quote #f) ((lambda (g$655$18818) (if g$655$18818 (begin (quote #f) (map cons g$655$18816 g$655$18818)) (quote #f))) (g$655$18812 (g$655$12207 g$655$18814)))) (quote #f))) ((lambda (g$655$18820) (if (g$655$12195 g$655$18820) (begin (quote #f) ((lambda (g$655$18822) (if g$655$18822 (begin (quote #f) ((lambda (g$655$18824) (if g$655$18824 (begin (quote #f) (append g$655$18822 g$655$18824)) (quote #f))) ((lambda (g$655$18826) (if (g$655$12195 g$655$18826) (begin (quote #f) ((lambda (g$655$18828) (if g$655$18828 (begin (quote #f) ((lambda (g$655$18830) (if g$655$18830 (begin (quote #f) (append g$655$18828 g$655$18830)) (quote #f))) ((lambda (g$655$18832) (if (equal? (g$655$12229 g$655$18832) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$18826)))) (quote #f))) ((lambda (g$655$18834) (list g$655$18834)) (g$655$12203 g$655$18826)))) (quote #f))) (g$655$12207 g$655$18820)))) (quote #f))) ((lambda (g$655$18836) (list g$655$18836)) (g$655$12203 g$655$18820)))) (quote #f))) (g$655$12203 g$655$18814))) (if (g$655$12199 g$655$18814) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$655$18812) (g$655$12203 g$655$18796)))) (quote #f))) (g$655$12207 g$655$18790)))) (quote #f))) ((lambda (g$655$18838) (quote ())) (g$655$12203 g$655$18790)))) (quote #f))) g$655$18764))) g$655$18654) (if (memv g$655$18663 (quote (begin))) ((lambda (g$655$18738) ((lambda (g$655$18740) (if (if g$655$18740 (begin (quote #f) (apply (lambda (g$655$18744) (quote #t)) g$655$18740)) (quote #f)) (apply (lambda (g$655$18742) (g$655$12763 (append g$655$18742 (cdr g$655$18644)) g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652)) g$655$18740) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18738 (quote ()))))) ((lambda (g$655$18746) (if (g$655$12195 g$655$18746) (begin (quote #f) ((lambda (g$655$18748) (if g$655$18748 (begin (quote #f) ((lambda (g$655$18750) (if g$655$18750 (begin (quote #f) (append g$655$18748 g$655$18750)) (quote #f))) ((letrec ((g$655$18752 (lambda (g$655$18754) (if (g$655$12195 g$655$18754) ((lambda (g$655$18756) (if g$655$18756 (begin (quote #f) ((lambda (g$655$18758) (if g$655$18758 (begin (quote #f) (map cons g$655$18756 g$655$18758)) (quote #f))) (g$655$18752 (g$655$12207 g$655$18754)))) (quote #f))) ((lambda (g$655$18760) (list g$655$18760)) (g$655$12203 g$655$18754))) (if (g$655$12199 g$655$18754) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$18752) (g$655$12207 g$655$18746)))) (quote #f))) ((lambda (g$655$18762) (quote ())) (g$655$12203 g$655$18746)))) (quote #f))) g$655$18738))) g$655$18654) (if (memv g$655$18663 (quote (global-macro global-macro!))) (g$655$12763 (cons (g$655$12189 g$655$18651 (g$655$12735 g$655$18659 g$655$18654)) (cdr g$655$18644)) g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652) (if (memv g$655$18663 (quote (local-macro local-macro!))) (g$655$12763 (cons (g$655$12189 g$655$18651 (g$655$12733 g$655$18659 g$655$18654)) (cdr g$655$18644)) g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652) (if (memv g$655$18663 (quote (macro macro!))) (g$655$12763 (cons (g$655$12189 g$655$18651 (g$655$12731 g$655$18659 g$655$18654)) (cdr g$655$18644)) g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652) (if (memv g$655$18663 (quote (module))) (call-with-values (lambda () (g$655$12761 g$655$18654 g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662)) (lambda (g$655$18725 g$655$18726 g$655$18727 g$655$18728 g$655$18729 g$655$18730 g$655$18731 g$655$18732) (begin (for-each (lambda (g$655$18735 g$655$18736) (g$655$12148 g$655$18651 g$655$18735 g$655$18736)) g$655$18727 g$655$18728) (g$655$12763 (cdr g$655$18644) g$655$18729 g$655$18730 g$655$18725 g$655$18726 g$655$18731 g$655$18732 g$655$18651 g$655$18652)))) (if (memv g$655$18663 (quote (import))) (begin ((lambda () ((lambda (g$655$18665) (begin (set! g$655$18665 (lambda (g$655$18676 g$655$18677) ((lambda (g$655$18679) ((lambda (g$655$18681) (if (if g$655$18681 (begin (quote #f) (apply (lambda (g$655$18698) (g$655$12209 g$655$18698)) g$655$18681)) (quote #f)) (apply (lambda (g$655$18683) (call-with-values (lambda () (g$655$12241 g$655$18683 g$655$18677)) (lambda (g$655$18687 g$655$18688 g$655$18689) ((lambda (g$655$18690) (if (memv g$655$18690 (quote ($module))) ((lambda (g$655$18692) ((lambda (g$655$18695 g$655$18696) (values g$655$18695 g$655$18696)) (car g$655$18692) (cdr g$655$18692))) g$655$18688) (error (quote expander) (quote #3#) (quote "invalid import") (g$655$12227 g$655$18676 (quote ()))))) g$655$18687)))) g$655$18681) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18679 (quote ()))))) ((lambda (g$655$18700) (if (g$655$12195 g$655$18700) (begin (quote #f) ((lambda (g$655$18702) (if g$655$18702 (begin (quote #f) ((lambda (g$655$18704) (if g$655$18704 (begin (quote #f) (append g$655$18702 g$655$18704)) (quote #f))) ((lambda (g$655$18706) (if (g$655$12195 g$655$18706) (begin (quote #f) ((lambda (g$655$18708) (if g$655$18708 (begin (quote #f) ((lambda (g$655$18710) (if g$655$18710 (begin (quote #f) (append g$655$18708 g$655$18710)) (quote #f))) ((lambda (g$655$18712) (if (equal? (g$655$12229 g$655$18712) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$18706)))) (quote #f))) ((lambda (g$655$18714) (list g$655$18714)) (g$655$12203 g$655$18706)))) (quote #f))) (g$655$12207 g$655$18700)))) (quote #f))) ((lambda (g$655$18716) (quote ())) (g$655$12203 g$655$18700)))) (quote #f))) g$655$18679))) g$655$18676))) (call-with-values (lambda () (g$655$18665 g$655$18654 g$655$18645)) (lambda (g$655$18668 g$655$18669) (for-each (lambda (g$655$18672 g$655$18673) (g$655$12148 g$655$18651 g$655$18672 g$655$18673)) g$655$18668 g$655$18669))))) (quote #f)))) (g$655$12763 (cdr g$655$18644) g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662 g$655$18651 g$655$18652)) (if g$655$18652 (g$655$12763 (cdr g$655$18644) g$655$18645 g$655$18646 (cons (g$655$12119 (quote dummy)) g$655$18647) (cons (cons (quote top-expr) g$655$18654) g$655$18648) g$655$18649 g$655$18662 g$655$18651 g$655$18652) (values g$655$18644 g$655$18645 g$655$18646 g$655$18647 g$655$18648 g$655$18649 g$655$18662)))))))))))) g$655$18658)) (if (g$655$12209 g$655$18660) (cons g$655$18660 g$655$18650) g$655$18650))))) (car g$655$18644))))) (set! g$655$12765 (lambda (g$655$18860 g$655$18861 g$655$18862) (begin (g$655$11749 (g$655$12856) g$655$18860 g$655$18861) (g$655$11748 (g$655$12856) g$655$18861 g$655$18862)))) (set! g$655$12767 (lambda (g$655$18865 g$655$18866) (g$655$12769 g$655$18865 g$655$18866))) (set! g$655$12769 (lambda (g$655$18869 g$655$18870) ((lambda (g$655$18872) ((lambda (g$655$18874) ((lambda (g$655$18875) (if (memv g$655$18875 (quote (global))) ((lambda (g$655$18877) ((lambda (g$655$18880 g$655$18881) (if (eq? g$655$18880 (g$655$12856)) g$655$18881 (error (quote expander) (quote #3#) (quote "cannot modify imported binding") (g$655$12227 g$655$18870 (quote ()))))) (car g$655$18877) (cdr g$655$18877))) (g$655$12239 g$655$18874)) (error (quote expander) (quote #3#) (quote "cannot modify binding in") (g$655$12227 g$655$18870 (quote ()))))) (g$655$12237 g$655$18874))) (g$655$11747 g$655$18872))) (g$655$12231 g$655$18869)))) (set! g$655$12771 (lambda (g$655$18883) ((lambda (g$655$18885) ((lambda (g$655$18887) (if (if g$655$18887 (begin (quote #f) (apply (lambda (g$655$18898 g$655$18899) (g$655$12209 g$655$18898)) g$655$18887)) (quote #f)) (apply (lambda (g$655$18890 g$655$18891) ((lambda (g$655$18893) ((lambda (g$655$18895) (values g$655$18893 g$655$18895)) (g$655$12741 g$655$18891 (quote ()) (quote ())))) (g$655$12769 g$655$18890 g$655$18883))) g$655$18887) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18885 (quote ()))))) ((lambda (g$655$18901) (if (g$655$12195 g$655$18901) (begin (quote #f) ((lambda (g$655$18903) (if g$655$18903 (begin (quote #f) ((lambda (g$655$18905) (if g$655$18905 (begin (quote #f) (append g$655$18903 g$655$18905)) (quote #f))) ((lambda (g$655$18907) (if (g$655$12195 g$655$18907) (begin (quote #f) ((lambda (g$655$18909) (if g$655$18909 (begin (quote #f) ((lambda (g$655$18911) (if g$655$18911 (begin (quote #f) (append g$655$18909 g$655$18911)) (quote #f))) ((lambda (g$655$18913) (if (g$655$12195 g$655$18913) (begin (quote #f) ((lambda (g$655$18915) (if g$655$18915 (begin (quote #f) ((lambda (g$655$18917) (if g$655$18917 (begin (quote #f) (append g$655$18915 g$655$18917)) (quote #f))) ((lambda (g$655$18919) (if (equal? (g$655$12229 g$655$18919) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$18913)))) (quote #f))) ((lambda (g$655$18921) (list g$655$18921)) (g$655$12203 g$655$18913)))) (quote #f))) (g$655$12207 g$655$18907)))) (quote #f))) ((lambda (g$655$18923) (list g$655$18923)) (g$655$12203 g$655$18907)))) (quote #f))) (g$655$12207 g$655$18901)))) (quote #f))) ((lambda (g$655$18925) (quote ())) (g$655$12203 g$655$18901)))) (quote #f))) g$655$18885))) g$655$18883))) (set! g$655$12773 (lambda (g$655$18928 g$655$18929) (if (null? g$655$18928) g$655$18929 ((lambda (g$655$18931) (call-with-values (lambda () (g$655$12241 g$655$18931 (quote ()))) (lambda (g$655$18935 g$655$18936 g$655$18937) ((lambda (g$655$18938) (if (memv g$655$18938 (quote (define))) (call-with-values (lambda () (g$655$12635 g$655$18931)) (lambda (g$655$18981 g$655$18982) ((lambda (g$655$18984) ((lambda (g$655$18986) (g$655$12773 (cdr g$655$18928) (cons (cons g$655$18984 g$655$18986) g$655$18929))) (g$655$12749 g$655$18982 (quote ()) (quote ())))) (g$655$12769 g$655$18981 g$655$18931)))) (if (memv g$655$18938 (quote (set!))) (call-with-values (lambda () (g$655$12771 g$655$18931)) (lambda (g$655$18977 g$655$18978) (g$655$12773 (cdr g$655$18928) (cons (cons g$655$18977 g$655$18978) g$655$18929)))) (if (memv g$655$18938 (quote (define-syntax))) (call-with-values (lambda () (g$655$12637 g$655$18931)) (lambda (g$655$18967 g$655$18968) ((lambda (g$655$18970) ((lambda (g$655$18972) ((lambda (g$655$18974) (begin (g$655$12765 (g$655$12211 g$655$18967) g$655$18970 g$655$18974) (g$655$12773 (cdr g$655$18928) g$655$18929))) (g$655$12273 g$655$18972))) (g$655$12775 g$655$18968 (quote ())))) (g$655$12767 g$655$18967 g$655$18931)))) (if (memv g$655$18938 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "~s is not supported yet at top level") g$655$18935) (if (memv g$655$18938 (quote (begin))) ((lambda (g$655$18940) ((lambda (g$655$18942) (if (if g$655$18942 (begin (quote #f) (apply (lambda (g$655$18946) (quote #t)) g$655$18942)) (quote #f)) (apply (lambda (g$655$18944) (g$655$12773 (append g$655$18944 (cdr g$655$18928)) g$655$18929)) g$655$18942) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$18940 (quote ()))))) ((lambda (g$655$18948) (if (g$655$12195 g$655$18948) (begin (quote #f) ((lambda (g$655$18950) (if g$655$18950 (begin (quote #f) ((lambda (g$655$18952) (if g$655$18952 (begin (quote #f) (append g$655$18950 g$655$18952)) (quote #f))) ((letrec ((g$655$18954 (lambda (g$655$18956) (if (g$655$12195 g$655$18956) ((lambda (g$655$18958) (if g$655$18958 (begin (quote #f) ((lambda (g$655$18960) (if g$655$18960 (begin (quote #f) (map cons g$655$18958 g$655$18960)) (quote #f))) (g$655$18954 (g$655$12207 g$655$18956)))) (quote #f))) ((lambda (g$655$18962) (list g$655$18962)) (g$655$12203 g$655$18956))) (if (g$655$12199 g$655$18956) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$18954) (g$655$12207 g$655$18948)))) (quote #f))) ((lambda (g$655$18964) (quote ())) (g$655$12203 g$655$18948)))) (quote #f))) g$655$18940))) g$655$18931) (if (memv g$655$18938 (quote (global-macro global-macro!))) (g$655$12773 (cons (g$655$12735 g$655$18936 g$655$18931) (cdr g$655$18928)) g$655$18929) (if (memv g$655$18938 (quote (local-macro local-macro!))) (g$655$12773 (cons (g$655$12733 g$655$18936 g$655$18931) (cdr g$655$18928)) g$655$18929) (if (memv g$655$18938 (quote (macro macro!))) (g$655$12773 (cons (g$655$12731 g$655$18936 g$655$18931) (cdr g$655$18928)) g$655$18929) (g$655$12773 (cdr g$655$18928) (cons (cons (quote #f) (g$655$12741 g$655$18931 (quote ()) (quote ()))) g$655$18929))))))))))) g$655$18935)))) (car g$655$18928))))) (set! g$655$12775 (lambda (g$655$18989 g$655$18990) ((lambda (g$655$18992) ((lambda (g$655$18994) (begin (for-each ((lambda (g$655$18996) (lambda (g$655$18998) (begin (g$655$11746 g$655$18998) (g$655$18996 g$655$18998)))) (g$655$12791)) (g$655$18992)) g$655$18994)) ((lambda (g$655$19007 g$655$19008 g$655$19009 g$655$19010) ((lambda (g$655$19012) (dynamic-wind g$655$19012 (lambda () (g$655$12741 g$655$18989 g$655$18990 g$655$18990)) g$655$19012)) (lambda () (begin ((lambda (g$655$19014) (begin (g$655$19007 g$655$19009) (set! g$655$19009 g$655$19014))) (g$655$19007)) ((lambda (g$655$19016) (begin (g$655$19008 g$655$19010) (set! g$655$19010 g$655$19016))) (g$655$19008)))))) g$655$12789 g$655$12791 g$655$18992 (lambda (g$655$19018) (values))))) (g$655$12787)))) (set! g$655$12777 (lambda (g$655$19020) (letrec ((g$655$19022 (lambda (g$655$19026 g$655$19027 g$655$19028) (if (null? g$655$19026) (begin ((lambda (g$655$19090) (if (g$655$12219 g$655$19090) (void) (error (quote expander) (quote "invalid exports of ~s") (g$655$12755 g$655$19090)))) (map (lambda (g$655$19092) (g$655$12185 g$655$19092 g$655$12115 (quote ()))) g$655$19028)) (values g$655$19027 g$655$19028)) ((lambda (g$655$19030) ((lambda (g$655$19032) (if (if g$655$19032 (begin (quote #f) (apply (lambda (g$655$19052 g$655$19053 g$655$19054) (quote #t)) g$655$19032)) (quote #f)) (apply (lambda (g$655$19046 g$655$19047 g$655$19048) (begin (if (if (eq? g$655$19046 (quote rename)) (if (for-all symbol? g$655$19047) (begin (quote #f) (for-all symbol? g$655$19048)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier ~s") (car g$655$19026))) (g$655$19022 (cdr g$655$19026) (append g$655$19047 g$655$19027) (append g$655$19048 g$655$19028)))) g$655$19032) ((lambda (g$655$19034) ((lambda (g$655$19036) (if (if g$655$19036 (begin (quote #f) (apply (lambda (g$655$19040) (quote #t)) g$655$19036)) (quote #f)) (apply (lambda (g$655$19038) (begin (if (symbol? g$655$19038) (void) (error (quote expander) (quote "invalid export ~s") g$655$19038)) (g$655$19022 (cdr g$655$19026) (cons g$655$19038 g$655$19027) (cons g$655$19038 g$655$19028)))) g$655$19036) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$19034 (quote ()))))) ((lambda (g$655$19042) (list g$655$19042)) g$655$19034))) g$655$19030))) ((lambda (g$655$19056) (if (g$655$12195 g$655$19056) (begin (quote #f) ((lambda (g$655$19058) (if g$655$19058 (begin (quote #f) ((lambda (g$655$19060) (if g$655$19060 (begin (quote #f) (append g$655$19058 g$655$19060)) (quote #f))) ((letrec ((g$655$19062 (lambda (g$655$19064) (if (g$655$12195 g$655$19064) ((lambda (g$655$19066) (if g$655$19066 (begin (quote #f) ((lambda (g$655$19068) (if g$655$19068 (begin (quote #f) (map cons g$655$19066 g$655$19068)) (quote #f))) (g$655$19062 (g$655$12207 g$655$19064)))) (quote #f))) ((lambda (g$655$19070) (if (g$655$12195 g$655$19070) (begin (quote #f) ((lambda (g$655$19072) (if g$655$19072 (begin (quote #f) ((lambda (g$655$19074) (if g$655$19074 (begin (quote #f) (append g$655$19072 g$655$19074)) (quote #f))) ((lambda (g$655$19076) (if (g$655$12195 g$655$19076) (begin (quote #f) ((lambda (g$655$19078) (if g$655$19078 (begin (quote #f) ((lambda (g$655$19080) (if g$655$19080 (begin (quote #f) (append g$655$19078 g$655$19080)) (quote #f))) ((lambda (g$655$19082) (if (equal? (g$655$12229 g$655$19082) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$19076)))) (quote #f))) ((lambda (g$655$19084) (list g$655$19084)) (g$655$12203 g$655$19076)))) (quote #f))) (g$655$12207 g$655$19070)))) (quote #f))) ((lambda (g$655$19086) (list g$655$19086)) (g$655$12203 g$655$19070)))) (quote #f))) (g$655$12203 g$655$19064))) (if (g$655$12199 g$655$19064) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) g$655$19062) (g$655$12207 g$655$19056)))) (quote #f))) ((lambda (g$655$19088) (list g$655$19088)) (g$655$12203 g$655$19056)))) (quote #f))) g$655$19030))) (car g$655$19026)))))) (g$655$19022 g$655$19020 (quote ()) (quote ()))))) (set! g$655$12779 (lambda (g$655$19094) ((lambda (g$655$19096) (begin (set! g$655$19096 (lambda (g$655$19102) ((lambda (g$655$19104) ((lambda (g$655$19106) (if (if g$655$19106 (begin (quote #f) (apply (lambda (g$655$19137 g$655$19138) (if (for-all symbol? g$655$19137) (begin (quote #f) (for-all (lambda (g$655$19140) (if (integer? g$655$19140) (begin (quote #f) (exact? g$655$19140)) (quote #f))) g$655$19138)) (quote #f))) g$655$19106)) (quote #f)) (apply (lambda (g$655$19133 g$655$19134) (values g$655$19133 g$655$19134)) g$655$19106) ((lambda (g$655$19108) ((lambda (g$655$19110) (if (if g$655$19110 (begin (quote #f) (apply (lambda (g$655$19120) (for-all symbol? g$655$19120)) g$655$19110)) (quote #f)) (apply (lambda (g$655$19118) (values g$655$19118 (quote ()))) g$655$19110) ((lambda (g$655$19112) ((lambda (g$655$19114) (if (if g$655$19114 (begin (quote #f) (apply (lambda () (quote #t)) g$655$19114)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "invalid library name") (g$655$12227 g$655$19102 (quote ())))) g$655$19114) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$19112 (quote ()))))) ((lambda (g$655$19116) (quote ())) g$655$19112))) g$655$19108))) ((letrec ((g$655$19122 (lambda (g$655$19124) (if (g$655$12195 g$655$19124) ((lambda (g$655$19126) (if g$655$19126 (begin (quote #f) ((lambda (g$655$19128) (if g$655$19128 (begin (quote #f) (map cons g$655$19126 g$655$19128)) (quote #f))) (g$655$19122 (g$655$12207 g$655$19124)))) (quote #f))) ((lambda (g$655$19130) (list g$655$19130)) (g$655$12203 g$655$19124))) (if (g$655$12199 g$655$19124) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$19122) g$655$19108))) g$655$19104))) ((letrec ((g$655$19142 (lambda (g$655$19144) (if (g$655$12195 g$655$19144) ((lambda (g$655$19166) (if g$655$19166 (begin (quote #f) ((lambda (g$655$19168) (if g$655$19168 (begin (quote #f) (cons (map cons g$655$19166 (car g$655$19168)) (cdr g$655$19168))) (quote #f))) (g$655$19142 (g$655$12207 g$655$19144)))) (quote #f))) ((lambda (g$655$19170) (list g$655$19170)) (g$655$12203 g$655$19144))) ((lambda (g$655$19146) (if g$655$19146 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$655$19146)) (quote #f))) ((lambda (g$655$19148) (if (g$655$12195 g$655$19148) (begin (quote #f) ((lambda (g$655$19150) (if g$655$19150 (begin (quote #f) ((lambda (g$655$19152) (if g$655$19152 (begin (quote #f) (append g$655$19150 g$655$19152)) (quote #f))) ((lambda (g$655$19154) (if (equal? (g$655$12229 g$655$19154) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$19148)))) (quote #f))) ((letrec ((g$655$19156 (lambda (g$655$19158) (if (g$655$12195 g$655$19158) ((lambda (g$655$19160) (if g$655$19160 (begin (quote #f) ((lambda (g$655$19162) (if g$655$19162 (begin (quote #f) (map cons g$655$19160 g$655$19162)) (quote #f))) (g$655$19156 (g$655$12207 g$655$19158)))) (quote #f))) ((lambda (g$655$19164) (list g$655$19164)) (g$655$12203 g$655$19158))) (if (g$655$12199 g$655$19158) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$655$19156) (g$655$12203 g$655$19148)))) (quote #f))) g$655$19144)))))) (lambda (g$655$19172) ((lambda (g$655$19174) (if g$655$19174 (begin (quote #f) (append (car g$655$19174) (cdr g$655$19174))) (quote #f))) (g$655$19142 g$655$19172)))) g$655$19104))) g$655$19102))) (call-with-values (lambda () (g$655$19096 g$655$19094)) (lambda (g$655$19099 g$655$19100) (begin (if (null? g$655$19099) (error (quote expander) (quote #3#) (quote "empty library name") (g$655$12227 g$655$19094 (quote ()))) (void)) (values g$655$19099 g$655$19100)))))) (quote #f)))) (set! g$655$12781 (lambda (g$655$19176) ((lambda (g$655$19178) ((lambda (g$655$19180) (if (if g$655$19180 (begin (quote #f) (apply (lambda (g$655$19208 g$655$19209 g$655$19210 g$655$19211 g$655$19212 g$655$19213 g$655$19214) (if (eq? g$655$19210 (quote export)) (if (eq? g$655$19212 (quote import)) (begin (quote #f) (eq? g$655$19208 (quote library))) (quote #f)) (quote #f))) g$655$19180)) (quote #f)) (apply (lambda (g$655$19194 g$655$19195 g$655$19196 g$655$19197 g$655$19198 g$655$19199 g$655$19200) (values g$655$19195 g$655$19197 g$655$19199 g$655$19200)) g$655$19180) ((lambda (g$655$19182) ((lambda (g$655$19184) (if (if g$655$19184 (begin (quote #f) (apply (lambda () (quote #t)) g$655$19184)) (quote #f)) (apply (lambda () (error (quote expander) (quote #3#) (quote "malformed library") (g$655$12227 g$655$19176 (quote ())))) g$655$19184) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$19182 (quote ()))))) ((lambda (g$655$19186) (quote ())) g$655$19182))) g$655$19178))) ((lambda (g$655$19216) (if (g$655$12195 g$655$19216) (begin (quote #f) ((lambda (g$655$19218) (if g$655$19218 (begin (quote #f) ((lambda (g$655$19220) (if g$655$19220 (begin (quote #f) (append g$655$19218 g$655$19220)) (quote #f))) ((lambda (g$655$19222) (if (g$655$12195 g$655$19222) (begin (quote #f) ((lambda (g$655$19224) (if g$655$19224 (begin (quote #f) ((lambda (g$655$19226) (if g$655$19226 (begin (quote #f) (append g$655$19224 g$655$19226)) (quote #f))) ((lambda (g$655$19228) (if (g$655$12195 g$655$19228) (begin (quote #f) ((lambda (g$655$19230) (if g$655$19230 (begin (quote #f) ((lambda (g$655$19232) (if g$655$19232 (begin (quote #f) (append g$655$19230 g$655$19232)) (quote #f))) ((lambda (g$655$19234) (if (g$655$12195 g$655$19234) (begin (quote #f) ((lambda (g$655$19236) (if g$655$19236 (begin (quote #f) ((lambda (g$655$19238) (if g$655$19238 (begin (quote #f) (append g$655$19236 g$655$19238)) (quote #f))) ((letrec ((g$655$19240 (lambda (g$655$19242) (if (g$655$12195 g$655$19242) ((lambda (g$655$19244) (if g$655$19244 (begin (quote #f) ((lambda (g$655$19246) (if g$655$19246 (begin (quote #f) (map cons g$655$19244 g$655$19246)) (quote #f))) (g$655$19240 (g$655$12207 g$655$19242)))) (quote #f))) ((lambda (g$655$19248) (list g$655$19248)) (g$655$12203 g$655$19242))) (if (g$655$12199 g$655$19242) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$19240) (g$655$12207 g$655$19234)))) (quote #f))) ((lambda (g$655$19250) (if (g$655$12195 g$655$19250) (begin (quote #f) ((lambda (g$655$19252) (if g$655$19252 (begin (quote #f) ((lambda (g$655$19254) (if g$655$19254 (begin (quote #f) (append g$655$19252 g$655$19254)) (quote #f))) ((letrec ((g$655$19256 (lambda (g$655$19258) (if (g$655$12195 g$655$19258) ((lambda (g$655$19260) (if g$655$19260 (begin (quote #f) ((lambda (g$655$19262) (if g$655$19262 (begin (quote #f) (map cons g$655$19260 g$655$19262)) (quote #f))) (g$655$19256 (g$655$12207 g$655$19258)))) (quote #f))) ((lambda (g$655$19264) (list g$655$19264)) (g$655$12203 g$655$19258))) (if (g$655$12199 g$655$19258) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$655$19256) (g$655$12207 g$655$19250)))) (quote #f))) ((lambda (g$655$19266) (list g$655$19266)) (g$655$12203 g$655$19250)))) (quote #f))) (g$655$12203 g$655$19234)))) (quote #f))) (g$655$12207 g$655$19228)))) (quote #f))) ((lambda (g$655$19268) (if (g$655$12195 g$655$19268) (begin (quote #f) ((lambda (g$655$19270) (if g$655$19270 (begin (quote #f) ((lambda (g$655$19272) (if g$655$19272 (begin (quote #f) (append g$655$19270 g$655$19272)) (quote #f))) ((letrec ((g$655$19274 (lambda (g$655$19276) (if (g$655$12195 g$655$19276) ((lambda (g$655$19278) (if g$655$19278 (begin (quote #f) ((lambda (g$655$19280) (if g$655$19280 (begin (quote #f) (map cons g$655$19278 g$655$19280)) (quote #f))) (g$655$19274 (g$655$12207 g$655$19276)))) (quote #f))) ((lambda (g$655$19282) (list g$655$19282)) (g$655$12203 g$655$19276))) (if (g$655$12199 g$655$19276) (list (begin (quote exp*) (quote ()))) (quote #f)))))) g$655$19274) (g$655$12207 g$655$19268)))) (quote #f))) ((lambda (g$655$19284) (list g$655$19284)) (g$655$12203 g$655$19268)))) (quote #f))) (g$655$12203 g$655$19228)))) (quote #f))) (g$655$12207 g$655$19222)))) (quote #f))) ((letrec ((g$655$19286 (lambda (g$655$19288) (if (g$655$12195 g$655$19288) ((lambda (g$655$19290) (if g$655$19290 (begin (quote #f) ((lambda (g$655$19292) (if g$655$19292 (begin (quote #f) (map cons g$655$19290 g$655$19292)) (quote #f))) (g$655$19286 (g$655$12207 g$655$19288)))) (quote #f))) ((lambda (g$655$19294) (list g$655$19294)) (g$655$12203 g$655$19288))) (if (g$655$12199 g$655$19288) (list (begin (quote name*) (quote ()))) (quote #f)))))) g$655$19286) (g$655$12203 g$655$19222)))) (quote #f))) (g$655$12207 g$655$19216)))) (quote #f))) ((lambda (g$655$19296) (list g$655$19296)) (g$655$12203 g$655$19216)))) (quote #f))) g$655$19178))) g$655$19176))) (set! g$655$12783 (lambda (g$655$19298) ((lambda (g$655$19300 g$655$19302 g$655$19304 g$655$19306 g$655$19308 g$655$19310 g$655$19312) (begin (set! g$655$19300 (g$655$12787)) (set! g$655$19302 (lambda (g$655$19643 g$655$19644) ((lambda (g$655$19646) (begin (set! g$655$19646 (lambda (g$655$19649 g$655$19650) ((lambda (g$655$19653 g$655$19654) ((lambda (g$655$19656) (if g$655$19656 ((lambda (g$655$19658) (if (eq? (cdr g$655$19658) g$655$19654) g$655$19650 (error (quote import) (quote "two imports of ~s with different bindings") g$655$19653))) g$655$19656) (cons g$655$19649 g$655$19650))) (assq g$655$19653 g$655$19650))) (car g$655$19649) (cdr g$655$19649)))) (if (null? g$655$19643) g$655$19644 (g$655$19646 (car g$655$19643) (g$655$19302 (cdr g$655$19643) g$655$19644))))) (quote #f)))) (set! g$655$19304 (lambda (g$655$19619 g$655$19620) ((lambda (g$655$19622) (begin (set! g$655$19622 (lambda (g$655$19633 g$655$19634) (if (null? g$655$19634) (error (quote import) (quote "cannot rename unbound identifier ~s") g$655$19633) (if (eq? g$655$19633 (caar g$655$19634)) (values (cdar g$655$19634) (cdr g$655$19634)) ((lambda (g$655$19636) (call-with-values (lambda () (g$655$19622 g$655$19633 (cdr g$655$19634))) (lambda (g$655$19639 g$655$19640) (values g$655$19639 (cons g$655$19636 g$655$19640))))) (car g$655$19634)))))) (if (null? g$655$19619) (values (quote ()) g$655$19620) (call-with-values (lambda () (g$655$19622 (car g$655$19619) g$655$19620)) (lambda (g$655$19625 g$655$19626) (call-with-values (lambda () (g$655$19304 (cdr g$655$19619) g$655$19626)) (lambda (g$655$19629 g$655$19630) (values (cons g$655$19625 g$655$19629) g$655$19630)))))))) (quote #f)))) (set! g$655$19306 (lambda (g$655$19611 g$655$19612) (map (lambda (g$655$19614) ((lambda (g$655$19616) (if g$655$19616 (cdr g$655$19616) (error (quote import) (quote "cannot find identifier ~s") g$655$19614))) (assq g$655$19614 g$655$19612))) g$655$19611))) (set! g$655$19308 (lambda (g$655$19603 g$655$19604) (letrec ((g$655$19606 (lambda (g$655$19608) (if (null? g$655$19608) (quote ()) (if (memq (caar g$655$19608) g$655$19603) (g$655$19606 (cdr g$655$19608)) (cons (car g$655$19608) (g$655$19606 (cdr g$655$19608)))))))) (g$655$19606 g$655$19604)))) (set! g$655$19310 (lambda (g$655$19600) (if (null? g$655$19600) (quote ()) (if (memq (car g$655$19600) (cdr g$655$19600)) (g$655$19310 (cdr g$655$19600)) (cons (car g$655$19600) (g$655$19310 (cdr g$655$19600))))))) (set! g$655$19312 (lambda (g$655$19320) ((lambda (g$655$19322) ((lambda (g$655$19324) (if (if g$655$19324 (begin (quote #f) (apply (lambda (g$655$19553 g$655$19554 g$655$19555 g$655$19556) (if (eq? g$655$19553 (quote rename)) (if (for-all symbol? g$655$19555) (begin (quote #f) (for-all symbol? g$655$19556)) (quote #f)) (quote #f))) g$655$19324)) (quote #f)) (apply (lambda (g$655$19539 g$655$19540 g$655$19541 g$655$19542) ((lambda (g$655$19544) ((lambda (g$655$19546) ((lambda (g$655$19548) (g$655$19302 (map cons g$655$19542 g$655$19546) g$655$19548)) (g$655$19308 g$655$19541 g$655$19544))) (g$655$19306 g$655$19541 g$655$19544))) (g$655$19312 g$655$19540))) g$655$19324) ((lambda (g$655$19326) ((lambda (g$655$19328) (if (if g$655$19328 (begin (quote #f) (apply (lambda (g$655$19506 g$655$19507 g$655$19508) (if (eq? g$655$19506 (quote except)) (begin (quote #f) (for-all symbol? g$655$19508)) (quote #f))) g$655$19328)) (quote #f)) (apply (lambda (g$655$19498 g$655$19499 g$655$19500) ((lambda (g$655$19502) (g$655$19308 g$655$19500 g$655$19502)) (g$655$19312 g$655$19499))) g$655$19328) ((lambda (g$655$19330) ((lambda (g$655$19332) (if (if g$655$19332 (begin (quote #f) (apply (lambda (g$655$19466 g$655$19467 g$655$19468) (if (eq? g$655$19466 (quote only)) (begin (quote #f) (for-all symbol? g$655$19468)) (quote #f))) g$655$19332)) (quote #f)) (apply (lambda (g$655$19454 g$655$19455 g$655$19456) ((lambda (g$655$19458) ((lambda (g$655$19460) ((lambda (g$655$19462) (map cons g$655$19460 g$655$19462)) (g$655$19306 g$655$19460 g$655$19458))) (g$655$19310 g$655$19456))) (g$655$19312 g$655$19455))) g$655$19332) ((lambda (g$655$19334) ((lambda (g$655$19336) (if (if g$655$19336 (begin (quote #f) (apply (lambda (g$655$19422 g$655$19423 g$655$19424) (if (eq? g$655$19422 (quote prefix)) (begin (quote #f) (symbol? g$655$19424)) (quote #f))) g$655$19336)) (quote #f)) (apply (lambda (g$655$19412 g$655$19413 g$655$19414) ((lambda (g$655$19416) (map (lambda (g$655$19418) (cons (string->symbol (string-append (symbol->string g$655$19414) (symbol->string (car g$655$19418)))) (cdr g$655$19418))) g$655$19416)) (g$655$19312 g$655$19413))) g$655$19336) ((lambda (g$655$19338) ((lambda (g$655$19340) (if (if g$655$19340 (begin (quote #f) (apply (lambda (g$655$19389 g$655$19390) (eq? g$655$19389 (quote library))) g$655$19340)) (quote #f)) (apply (lambda (g$655$19383 g$655$19384) ((lambda (g$655$19386) (begin (if g$655$19386 (void) (error (quote import) (quote "cannot find library satisfying ~s") g$655$19384)) (g$655$19300 g$655$19386) (g$655$11780 g$655$19386))) (g$655$11755 g$655$19384))) g$655$19340) ((lambda (g$655$19342) ((lambda (g$655$19344) (if (if g$655$19344 (begin (quote #f) (apply (lambda (g$655$19361 g$655$19362) (not (memq g$655$19361 (quote (rename except only prefix library))))) g$655$19344)) (quote #f)) (apply (lambda (g$655$19357 g$655$19358) (g$655$19312 (list (quote library) (cons g$655$19357 g$655$19358)))) g$655$19344) ((lambda (g$655$19346) ((lambda (g$655$19348) (if (if g$655$19348 (begin (quote #f) (apply (lambda (g$655$19352) (quote #t)) g$655$19348)) (quote #f)) (apply (lambda (g$655$19350) (error (quote import) (quote "invalid import spec ~s") g$655$19350)) g$655$19348) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$19346 (quote ()))))) ((lambda (g$655$19354) (list g$655$19354)) g$655$19346))) g$655$19342))) ((lambda (g$655$19364) (if (g$655$12195 g$655$19364) (begin (quote #f) ((lambda (g$655$19366) (if g$655$19366 (begin (quote #f) ((lambda (g$655$19368) (if g$655$19368 (begin (quote #f) (append g$655$19366 g$655$19368)) (quote #f))) ((letrec ((g$655$19370 (lambda (g$655$19372) (if (g$655$12195 g$655$19372) ((lambda (g$655$19374) (if g$655$19374 (begin (quote #f) ((lambda (g$655$19376) (if g$655$19376 (begin (quote #f) (map cons g$655$19374 g$655$19376)) (quote #f))) (g$655$19370 (g$655$12207 g$655$19372)))) (quote #f))) ((lambda (g$655$19378) (list g$655$19378)) (g$655$12203 g$655$19372))) (if (g$655$12199 g$655$19372) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$655$19370) (g$655$12207 g$655$19364)))) (quote #f))) ((lambda (g$655$19380) (list g$655$19380)) (g$655$12203 g$655$19364)))) (quote #f))) g$655$19342))) g$655$19338))) ((lambda (g$655$19392) (if (g$655$12195 g$655$19392) (begin (quote #f) ((lambda (g$655$19394) (if g$655$19394 (begin (quote #f) ((lambda (g$655$19396) (if g$655$19396 (begin (quote #f) (append g$655$19394 g$655$19396)) (quote #f))) ((lambda (g$655$19398) (if (g$655$12195 g$655$19398) (begin (quote #f) ((lambda (g$655$19400) (if g$655$19400 (begin (quote #f) ((lambda (g$655$19402) (if g$655$19402 (begin (quote #f) (append g$655$19400 g$655$19402)) (quote #f))) ((lambda (g$655$19404) (if (equal? (g$655$12229 g$655$19404) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$19398)))) (quote #f))) ((lambda (g$655$19406) (list g$655$19406)) (g$655$12203 g$655$19398)))) (quote #f))) (g$655$12207 g$655$19392)))) (quote #f))) ((lambda (g$655$19408) (list g$655$19408)) (g$655$12203 g$655$19392)))) (quote #f))) g$655$19338))) g$655$19334))) ((lambda (g$655$19426) (if (g$655$12195 g$655$19426) (begin (quote #f) ((lambda (g$655$19428) (if g$655$19428 (begin (quote #f) ((lambda (g$655$19430) (if g$655$19430 (begin (quote #f) (append g$655$19428 g$655$19430)) (quote #f))) ((lambda (g$655$19432) (if (g$655$12195 g$655$19432) (begin (quote #f) ((lambda (g$655$19434) (if g$655$19434 (begin (quote #f) ((lambda (g$655$19436) (if g$655$19436 (begin (quote #f) (append g$655$19434 g$655$19436)) (quote #f))) ((lambda (g$655$19438) (if (g$655$12195 g$655$19438) (begin (quote #f) ((lambda (g$655$19440) (if g$655$19440 (begin (quote #f) ((lambda (g$655$19442) (if g$655$19442 (begin (quote #f) (append g$655$19440 g$655$19442)) (quote #f))) ((lambda (g$655$19444) (if (equal? (g$655$12229 g$655$19444) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$19438)))) (quote #f))) ((lambda (g$655$19446) (list g$655$19446)) (g$655$12203 g$655$19438)))) (quote #f))) (g$655$12207 g$655$19432)))) (quote #f))) ((lambda (g$655$19448) (list g$655$19448)) (g$655$12203 g$655$19432)))) (quote #f))) (g$655$12207 g$655$19426)))) (quote #f))) ((lambda (g$655$19450) (list g$655$19450)) (g$655$12203 g$655$19426)))) (quote #f))) g$655$19334))) g$655$19330))) ((lambda (g$655$19470) (if (g$655$12195 g$655$19470) (begin (quote #f) ((lambda (g$655$19472) (if g$655$19472 (begin (quote #f) ((lambda (g$655$19474) (if g$655$19474 (begin (quote #f) (append g$655$19472 g$655$19474)) (quote #f))) ((lambda (g$655$19476) (if (g$655$12195 g$655$19476) (begin (quote #f) ((lambda (g$655$19478) (if g$655$19478 (begin (quote #f) ((lambda (g$655$19480) (if g$655$19480 (begin (quote #f) (append g$655$19478 g$655$19480)) (quote #f))) ((letrec ((g$655$19482 (lambda (g$655$19484) (if (g$655$12195 g$655$19484) ((lambda (g$655$19486) (if g$655$19486 (begin (quote #f) ((lambda (g$655$19488) (if g$655$19488 (begin (quote #f) (map cons g$655$19486 g$655$19488)) (quote #f))) (g$655$19482 (g$655$12207 g$655$19484)))) (quote #f))) ((lambda (g$655$19490) (list g$655$19490)) (g$655$12203 g$655$19484))) (if (g$655$12199 g$655$19484) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$655$19482) (g$655$12207 g$655$19476)))) (quote #f))) ((lambda (g$655$19492) (list g$655$19492)) (g$655$12203 g$655$19476)))) (quote #f))) (g$655$12207 g$655$19470)))) (quote #f))) ((lambda (g$655$19494) (list g$655$19494)) (g$655$12203 g$655$19470)))) (quote #f))) g$655$19330))) g$655$19326))) ((lambda (g$655$19510) (if (g$655$12195 g$655$19510) (begin (quote #f) ((lambda (g$655$19512) (if g$655$19512 (begin (quote #f) ((lambda (g$655$19514) (if g$655$19514 (begin (quote #f) (append g$655$19512 g$655$19514)) (quote #f))) ((lambda (g$655$19516) (if (g$655$12195 g$655$19516) (begin (quote #f) ((lambda (g$655$19518) (if g$655$19518 (begin (quote #f) ((lambda (g$655$19520) (if g$655$19520 (begin (quote #f) (append g$655$19518 g$655$19520)) (quote #f))) ((letrec ((g$655$19522 (lambda (g$655$19524) (if (g$655$12195 g$655$19524) ((lambda (g$655$19526) (if g$655$19526 (begin (quote #f) ((lambda (g$655$19528) (if g$655$19528 (begin (quote #f) (map cons g$655$19526 g$655$19528)) (quote #f))) (g$655$19522 (g$655$12207 g$655$19524)))) (quote #f))) ((lambda (g$655$19530) (list g$655$19530)) (g$655$12203 g$655$19524))) (if (g$655$12199 g$655$19524) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$655$19522) (g$655$12207 g$655$19516)))) (quote #f))) ((lambda (g$655$19532) (list g$655$19532)) (g$655$12203 g$655$19516)))) (quote #f))) (g$655$12207 g$655$19510)))) (quote #f))) ((lambda (g$655$19534) (list g$655$19534)) (g$655$12203 g$655$19510)))) (quote #f))) g$655$19326))) g$655$19322))) ((lambda (g$655$19558) (if (g$655$12195 g$655$19558) (begin (quote #f) ((lambda (g$655$19560) (if g$655$19560 (begin (quote #f) ((lambda (g$655$19562) (if g$655$19562 (begin (quote #f) (append g$655$19560 g$655$19562)) (quote #f))) ((lambda (g$655$19564) (if (g$655$12195 g$655$19564) (begin (quote #f) ((lambda (g$655$19566) (if g$655$19566 (begin (quote #f) ((lambda (g$655$19568) (if g$655$19568 (begin (quote #f) (append g$655$19566 g$655$19568)) (quote #f))) ((letrec ((g$655$19570 (lambda (g$655$19572) (if (g$655$12195 g$655$19572) ((lambda (g$655$19574) (if g$655$19574 (begin (quote #f) ((lambda (g$655$19576) (if g$655$19576 (begin (quote #f) (map cons g$655$19574 g$655$19576)) (quote #f))) (g$655$19570 (g$655$12207 g$655$19572)))) (quote #f))) ((lambda (g$655$19578) (if (g$655$12195 g$655$19578) (begin (quote #f) ((lambda (g$655$19580) (if g$655$19580 (begin (quote #f) ((lambda (g$655$19582) (if g$655$19582 (begin (quote #f) (append g$655$19580 g$655$19582)) (quote #f))) ((lambda (g$655$19584) (if (g$655$12195 g$655$19584) (begin (quote #f) ((lambda (g$655$19586) (if g$655$19586 (begin (quote #f) ((lambda (g$655$19588) (if g$655$19588 (begin (quote #f) (append g$655$19586 g$655$19588)) (quote #f))) ((lambda (g$655$19590) (if (equal? (g$655$12229 g$655$19590) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$655$12207 g$655$19584)))) (quote #f))) ((lambda (g$655$19592) (list g$655$19592)) (g$655$12203 g$655$19584)))) (quote #f))) (g$655$12207 g$655$19578)))) (quote #f))) ((lambda (g$655$19594) (list g$655$19594)) (g$655$12203 g$655$19578)))) (quote #f))) (g$655$12203 g$655$19572))) (if (g$655$12199 g$655$19572) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) g$655$19570) (g$655$12207 g$655$19564)))) (quote #f))) ((lambda (g$655$19596) (list g$655$19596)) (g$655$12203 g$655$19564)))) (quote #f))) (g$655$12207 g$655$19558)))) (quote #f))) ((lambda (g$655$19598) (list g$655$19598)) (g$655$12203 g$655$19558)))) (quote #f))) g$655$19322))) g$655$19320))) (letrec ((g$655$19314 (lambda (g$655$19317 g$655$19318) (if (null? g$655$19317) (values g$655$19318 (g$655$19300)) (g$655$19314 (cdr g$655$19317) (g$655$19302 (g$655$19312 (car g$655$19317)) g$655$19318)))))) (g$655$19314 g$655$19298 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$655$12785 (lambda (g$655$19660) ((lambda (g$655$19662) (begin (for-each (lambda (g$655$19664) ((lambda (g$655$19667 g$655$19668) (g$655$12148 g$655$19662 (g$655$12185 g$655$19667 g$655$12115 (quote ())) g$655$19668)) (car g$655$19664) (cdr g$655$19664))) g$655$19660) g$655$19662)) (g$655$12146)))) (set! g$655$12787 (lambda () ((lambda (g$655$19670) (lambda g$655$19674 ((lambda (g$655$19673) (if (= g$655$19673 (quote 0)) (apply (lambda () g$655$19670) g$655$19674) (if (= g$655$19673 (quote 1)) (apply (lambda (g$655$19672) (set! g$655$19670 (g$655$12108 g$655$19672 g$655$19670))) g$655$19674) (error (quote apply) (quote "invalid arg count"))))) (length g$655$19674)))) (quote ())))) (set! g$655$12789 (g$655$11224 (lambda g$655$19676 (error (quote inv-collector) (quote "not initialized"))) (lambda (g$655$19678) (begin (if (procedure? g$655$19678) (void) (error (quote inv-collector) (quote "~s is not a procedure") g$655$19678)) g$655$19678)))) (set! g$655$12791 (g$655$11224 (lambda g$655$19680 (error (quote vis-collector) (quote "not initialized"))) (lambda (g$655$19682) (begin (if (procedure? g$655$19682) (void) (error (quote vis-collector) (quote "~s is not a procedure") g$655$19682)) g$655$19682)))) (set! g$655$12793 (lambda (g$655$19686 g$655$19687 g$655$19688) (call-with-values (lambda () (g$655$12763 g$655$19686 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) g$655$19687 g$655$19688)) (lambda (g$655$19696 g$655$19697 g$655$19698 g$655$19699 g$655$19700 g$655$19701 g$655$19702) (values (append (apply append (reverse g$655$19701)) g$655$19696) g$655$19697 g$655$19698 (reverse g$655$19699) (reverse g$655$19700)))))) (set! g$655$12795 (lambda (g$655$19706 g$655$19707 g$655$19708) (call-with-values (lambda () (g$655$12777 g$655$19706)) (lambda (g$655$19713 g$655$19714) (call-with-values (lambda () (g$655$12783 g$655$19707)) (lambda (g$655$19715 g$655$19716) ((lambda (g$655$19718) ((lambda (g$655$19722 g$655$19723 g$655$19724) ((lambda (g$655$19733 g$655$19734 g$655$19735 g$655$19736) ((lambda (g$655$19738) (dynamic-wind g$655$19738 (lambda () (call-with-values (lambda () (g$655$12793 g$655$19722 g$655$19718 (quote #f))) (lambda (g$655$19744 g$655$19745 g$655$19746 g$655$19747 g$655$19748) (begin (g$655$12150 g$655$19718) ((lambda (g$655$19751 g$655$19752) (begin (g$655$12152 g$655$19718) ((lambda (g$655$19754) (call-with-values (lambda () (g$655$12838 g$655$19745)) (lambda (g$655$19758 g$655$19759 g$655$19760) ((lambda (g$655$19763 g$655$19764) (values g$655$19716 (g$655$19723) (g$655$19724) (g$655$12091 (quote #f) (append g$655$19764 (list g$655$19763))) g$655$19760 g$655$19754 g$655$19758)) (g$655$12088 (quote #f) g$655$19747 g$655$19751 (g$655$12834 g$655$19759 g$655$19752)) (map g$655$12105 (map cdr g$655$19759)))))) (g$655$12836 g$655$19713 g$655$19714 g$655$19718)))) (g$655$12751 g$655$19748 g$655$19745 g$655$19746) (g$655$12737 g$655$19744 g$655$19745 g$655$19746)))))) g$655$19738)) (lambda () (begin ((lambda (g$655$19766) (begin (g$655$19733 g$655$19735) (set! g$655$19735 g$655$19766))) (g$655$19733)) ((lambda (g$655$19768) (begin (g$655$19734 g$655$19736) (set! g$655$19736 g$655$19768))) (g$655$19734)))))) g$655$12789 g$655$12791 g$655$19723 g$655$19724)) (map (lambda (g$655$19770) (g$655$12185 g$655$19770 g$655$12115 (list g$655$19718))) g$655$19708) (g$655$12787) (g$655$12787))) (g$655$12785 g$655$19715)))))))) (set! g$655$12797 (lambda (g$655$19772) (call-with-values (lambda () (g$655$12781 g$655$19772)) (lambda (g$655$19777 g$655$19778 g$655$19779 g$655$19780) (call-with-values (lambda () (g$655$12779 g$655$19777)) (lambda (g$655$19783 g$655$19784) (call-with-values (lambda () (g$655$12795 g$655$19778 g$655$19779 g$655$19780)) (lambda (g$655$19792 g$655$19793 g$655$19794 g$655$19795 g$655$19796 g$655$19797 g$655$19798) (values g$655$19783 g$655$19792 g$655$19793 g$655$19794 g$655$19795 g$655$19796 g$655$19797 g$655$19798))))))))) (set! g$655$12799 (lambda (g$655$19800) ((lambda (g$655$19802) ((lambda (g$655$19804) (if (if g$655$19804 (begin (quote #f) (apply (lambda (g$655$19820 g$655$19821 g$655$19822) (eq? g$655$19820 (quote import))) g$655$19804)) (quote #f)) (apply (lambda (g$655$19814 g$655$19815 g$655$19816) (values g$655$19815 g$655$19816)) g$655$19804) ((lambda (g$655$19806) ((lambda (g$655$19808) (if (if g$655$19808 (begin (quote #f) (apply (lambda () (quote #t)) g$655$19808)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) g$655$19808) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$19806 (quote ()))))) ((lambda (g$655$19810) (quote ())) g$655$19806))) g$655$19802))) ((lambda (g$655$19824) (if (g$655$12195 g$655$19824) (begin (quote #f) ((lambda (g$655$19826) (if g$655$19826 (begin (quote #f) ((lambda (g$655$19828) (if g$655$19828 (begin (quote #f) (append g$655$19826 g$655$19828)) (quote #f))) ((letrec ((g$655$19830 (lambda (g$655$19832) (if (g$655$12195 g$655$19832) ((lambda (g$655$19834) (if g$655$19834 (begin (quote #f) ((lambda (g$655$19836) (if g$655$19836 (begin (quote #f) (map cons g$655$19834 g$655$19836)) (quote #f))) (g$655$19830 (g$655$12207 g$655$19832)))) (quote #f))) ((lambda (g$655$19838) (list g$655$19838)) (g$655$12203 g$655$19832))) (if (g$655$12199 g$655$19832) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$655$19830) (g$655$12207 g$655$19824)))) (quote #f))) ((lambda (g$655$19840) (if (g$655$12195 g$655$19840) (begin (quote #f) ((lambda (g$655$19842) (if g$655$19842 (begin (quote #f) ((lambda (g$655$19844) (if g$655$19844 (begin (quote #f) (append g$655$19842 g$655$19844)) (quote #f))) ((letrec ((g$655$19846 (lambda (g$655$19848) (if (g$655$12195 g$655$19848) ((lambda (g$655$19850) (if g$655$19850 (begin (quote #f) ((lambda (g$655$19852) (if g$655$19852 (begin (quote #f) (map cons g$655$19850 g$655$19852)) (quote #f))) (g$655$19846 (g$655$12207 g$655$19848)))) (quote #f))) ((lambda (g$655$19854) (list g$655$19854)) (g$655$12203 g$655$19848))) (if (g$655$12199 g$655$19848) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$655$19846) (g$655$12207 g$655$19840)))) (quote #f))) ((lambda (g$655$19856) (list g$655$19856)) (g$655$12203 g$655$19840)))) (quote #f))) (g$655$12203 g$655$19824)))) (quote #f))) g$655$19802))) g$655$19800))) (set! g$655$12801 (lambda (g$655$19858) (call-with-values (lambda () (g$655$12799 g$655$19858)) (lambda (g$655$19861 g$655$19862) (call-with-values (lambda () (g$655$12795 (quote ()) g$655$19861 g$655$19862)) (lambda (g$655$19870 g$655$19871 g$655$19872 g$655$19873 g$655$19874 g$655$19875 g$655$19876) (values g$655$19871 g$655$19873))))))) (set! g$655$12804 (lambda (g$655$19879 g$655$19880) (vector (quote g$655$12802) g$655$19879 g$655$19880))) (set! g$655$12806 (lambda (g$655$19882) (if (vector? g$655$19882) (if (= (vector-length g$655$19882) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref g$655$19882 (quote 0)) (quote g$655$12802))) (quote #f)) (quote #f)))) (set! g$655$12808 (lambda (g$655$19884) (if (g$655$12806 g$655$19884) (vector-ref g$655$19884 (quote 1)) (error (quote env-subst) (quote #1#) g$655$19884 (quote env))))) (set! g$655$12810 (lambda (g$655$19886) (if (g$655$12806 g$655$19886) (vector-ref g$655$19886 (quote 2)) (error (quote env-imp*) (quote #1#) g$655$19886 (quote env))))) (set! g$655$12812 (lambda (g$655$19889 g$655$19890) (if (g$655$12806 g$655$19889) (vector-set! g$655$19889 (quote 1) g$655$19890) (error (quote set-env-subst!) (quote #2#) g$655$19889 (quote env))))) (set! g$655$12814 (lambda (g$655$19893 g$655$19894) (if (g$655$12806 g$655$19893) (vector-set! g$655$19893 (quote 2) g$655$19894) (error (quote set-env-imp*!) (quote #2#) g$655$19893 (quote env))))) (set! g$655$12816 (lambda (g$655$19896) (g$655$12806 g$655$19896))) (set! g$655$12818 (lambda g$655$19898 (call-with-values (lambda () (g$655$12783 g$655$19898)) (lambda (g$655$19901 g$655$19902) (g$655$12804 g$655$19901 g$655$19902))))) (set! g$655$12820 (lambda (g$655$19904) (begin (if (eqv? g$655$19904 (quote 5)) (void) (error (quote null-environment) (quote "~s is not 5") g$655$19904)) (g$655$12818 (quote (psyntax null-environment-5)))))) (set! g$655$12822 (lambda (g$655$19906) (begin (if (eqv? g$655$19906 (quote 5)) (void) (error (quote scheme-report-environment) (quote "~s is not 5") g$655$19906)) (g$655$12818 (quote (psyntax scheme-report-environment-5)))))) (set! g$655$12824 (lambda (g$655$19909 g$655$19910) (begin (if (g$655$12806 g$655$19910) (void) (error (quote expand) (quote "~s is not an environment") g$655$19910)) ((lambda (g$655$19912) ((lambda (g$655$19914) ((lambda (g$655$19918 g$655$19919 g$655$19920) ((lambda (g$655$19922) (begin (g$655$12150 g$655$19914) (values g$655$19922 (g$655$19919)))) ((lambda (g$655$19931 g$655$19932 g$655$19933 g$655$19934) ((lambda (g$655$19936) (dynamic-wind g$655$19936 (lambda () (g$655$12741 g$655$19918 (quote ()) (quote ()))) g$655$19936)) (lambda () (begin ((lambda (g$655$19938) (begin (g$655$19931 g$655$19933) (set! g$655$19933 g$655$19938))) (g$655$19931)) ((lambda (g$655$19940) (begin (g$655$19932 g$655$19934) (set! g$655$19934 g$655$19940))) (g$655$19932)))))) g$655$12789 g$655$12791 g$655$19919 g$655$19920))) (g$655$12185 g$655$19909 g$655$12115 (list g$655$19914)) (g$655$12787) (g$655$12787))) (g$655$12785 g$655$19912))) (g$655$12808 g$655$19910))))) (set! g$655$12826 (lambda (g$655$19943 g$655$19944) (begin (if (g$655$12806 g$655$19944) (void) (error (quote eval) (quote "~s is not an environment") g$655$19944)) (call-with-values (lambda () (g$655$12824 g$655$19943 g$655$19944)) (lambda (g$655$19947 g$655$19948) (begin (for-each g$655$11746 g$655$19948) (eval-core (g$655$11298 g$655$19947)))))))) (set! g$655$12828 (lambda (g$655$19950) ((lambda (g$655$19952 g$655$19954) (begin (set! g$655$19952 (lambda (g$655$19992) (if (null? g$655$19992) (g$655$12090) (g$655$12091 (quote #f) (map (lambda (g$655$19994) ((lambda (g$655$19997 g$655$19998) (list (quote set!) g$655$19997 g$655$19998)) (car g$655$19994) (cddr g$655$19994))) g$655$19992))))) (set! g$655$19954 (lambda (g$655$19984) (for-each (lambda (g$655$19986) ((lambda (g$655$19989 g$655$19990) (set-symbol-value! g$655$19989 g$655$19990)) (car g$655$19986) (cadr g$655$19986))) g$655$19984))) (call-with-values (lambda () (g$655$12797 g$655$19950)) (lambda (g$655$19963 g$655$19964 g$655$19965 g$655$19966 g$655$19967 g$655$19968 g$655$19969 g$655$19970) ((lambda (g$655$19977 g$655$19978 g$655$19979 g$655$19980 g$655$19981 g$655$19982) (begin (g$655$11750 g$655$19977 g$655$19978 g$655$19979 g$655$19980 g$655$19981 g$655$19982 g$655$19969 g$655$19970 (lambda () (g$655$19954 g$655$19968)) (lambda () (eval-core (g$655$11298 g$655$19967))) (quote #t)) (values g$655$19967 (g$655$19952 g$655$19968) g$655$19969 g$655$19970))) (gensym) g$655$19963 (quote ()) (map g$655$11742 g$655$19964) (map g$655$11742 g$655$19966) (map g$655$11742 g$655$19965)))))) (quote #f) (quote #f)))) (set! g$655$12830 (lambda (g$655$20000) (call-with-values (lambda () (g$655$12828 g$655$20000)) (lambda (g$655$20005 g$655$20006 g$655$20007 g$655$20008) (values g$655$20005 g$655$20007 g$655$20008))))) (set! g$655$12832 (lambda (g$655$20012 g$655$20013 g$655$20014) (if (null? g$655$20013) g$655$20014 (g$655$12832 g$655$20012 (cdr g$655$20013) (cons (g$655$20012 (car g$655$20013)) g$655$20014))))) (set! g$655$12834 (lambda (g$655$20017 g$655$20018) (g$655$12091 (quote #f) (cons (g$655$12090) (g$655$12832 (lambda (g$655$20020) (list (quote set!) (cdr g$655$20020) (car g$655$20020))) g$655$20017 g$655$20018))))) (set! g$655$12836 (lambda (g$655$20024 g$655$20025 g$655$20026) (map (lambda (g$655$20029 g$655$20030) ((lambda (g$655$20032) ((lambda (g$655$20034) ((lambda () (begin (if g$655$20034 (void) (error (quote expander) (quote #3#) (quote "cannot export unbound identifier") (g$655$12227 g$655$20032 (quote ())))) (cons g$655$20030 g$655$20034))))) (g$655$12231 g$655$20032))) (g$655$12185 g$655$20029 g$655$12115 (list g$655$20026)))) g$655$20024 g$655$20025))) (set! g$655$12838 (lambda (g$655$20036) (letrec ((g$655$20038 (lambda (g$655$20043 g$655$20044 g$655$20045 g$655$20046) (if (null? g$655$20043) (values g$655$20044 g$655$20045 g$655$20046) ((lambda (g$655$20048) ((lambda (g$655$20051 g$655$20052) ((lambda (g$655$20053) (if (memv g$655$20053 (quote (lexical))) ((lambda (g$655$20059) (g$655$20038 (cdr g$655$20043) (cons (cons* g$655$20051 (quote global) g$655$20059) g$655$20044) (cons (cons (g$655$12239 g$655$20052) g$655$20059) g$655$20045) g$655$20046)) (g$655$12121 (g$655$12239 g$655$20052))) (if (memv g$655$20053 (quote (local-macro))) ((lambda (g$655$20057) (g$655$20038 (cdr g$655$20043) (cons (cons* g$655$20051 (quote global-macro) g$655$20057) g$655$20044) g$655$20045 (cons (cons g$655$20057 (g$655$12239 g$655$20052)) g$655$20046))) (gensym)) (if (memv g$655$20053 (quote (local-macro!))) ((lambda (g$655$20055) (g$655$20038 (cdr g$655$20043) (cons (cons* g$655$20051 (quote global-macro!) g$655$20055) g$655$20044) g$655$20045 (cons (cons g$655$20055 (g$655$12239 g$655$20052)) g$655$20046))) (gensym)) (if (memv g$655$20053 (quote ($rtd $module))) (g$655$20038 (cdr g$655$20043) (cons g$655$20048 g$655$20044) g$655$20045 g$655$20046) (error (quote expander) (quote "BUG: do not know how to export ~s ~s") (g$655$12237 g$655$20052) (g$655$12239 g$655$20052))))))) (g$655$12237 g$655$20052))) (car g$655$20048) (cdr g$655$20048))) (car g$655$20043)))))) (g$655$20038 g$655$20036 (quote ()) (quote ()) (quote ()))))) (set! g$655$12840 (lambda (g$655$20061) ((lambda (g$655$20063) ((lambda (g$655$20065) (if (if g$655$20065 (begin (quote #f) (apply (lambda (g$655$20077) (quote #t)) g$655$20065)) (quote #f)) (apply (lambda (g$655$20073) (map (lambda (g$655$20075) (g$655$12159 (gensym (quote t)) g$655$12115 (quote ()))) g$655$20073)) g$655$20065) ((lambda (g$655$20067) ((lambda (g$655$20069) (if (if g$655$20069 (begin (quote #f) (apply (lambda () (quote #t)) g$655$20069)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "~s is not a list"))) g$655$20069) (error (quote expander) (quote #3#) (quote #4#) (g$655$12227 g$655$20067 (quote ()))))) ((lambda (g$655$20071) (quote ())) g$655$20067))) g$655$20063))) ((letrec ((g$655$20079 (lambda (g$655$20081) (if (g$655$12195 g$655$20081) ((lambda (g$655$20083) (if g$655$20083 (begin (quote #f) ((lambda (g$655$20085) (if g$655$20085 (begin (quote #f) (map cons g$655$20083 g$655$20085)) (quote #f))) (g$655$20079 (g$655$12207 g$655$20081)))) (quote #f))) ((lambda (g$655$20087) (list g$655$20087)) (g$655$12203 g$655$20081))) (if (g$655$12199 g$655$20081) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$655$20079) g$655$20063))) g$655$20061))) (set! g$655$12842 (lambda (g$655$20090 g$655$20091) (if (g$655$12209 g$655$20090) (if (g$655$12209 g$655$20091) (g$655$12217 g$655$20090 g$655$20091) (error (quote free-identifier=?) (quote "~s is not an identifier") g$655$20091)) (error (quote free-identifier=?) (quote "~s is not an identifier") g$655$20090)))) (set! g$655$12844 (lambda (g$655$20094 g$655$20095) (if (g$655$12209 g$655$20094) (if (g$655$12209 g$655$20095) (g$655$12215 g$655$20094 g$655$20095) (error (quote bound-identifier=?) (quote "~s is not an identifier") g$655$20095)) (error (quote bound-identifier=?) (quote "~s is not an identifier") g$655$20094)))) (set! g$655$12846 (lambda (g$655$20099 . g$655$20097) (begin (if (for-all string? g$655$20097) (void) (error (quote syntax-error) (quote "invalid argument ~s") g$655$20097)) (if (null? g$655$20097) (error (quote expander) (quote "invalid syntax ~s") (g$655$12229 g$655$20099)) (error (quote expander) (quote "~s ~a") (g$655$12229 g$655$20099) (apply string-append g$655$20097)))))) (set! g$655$12848 (lambda (g$655$20101) (g$655$12209 g$655$20101))) (set! g$655$12850 (lambda (g$655$20104 g$655$20105) (if (g$655$12209 g$655$20104) (g$655$12175 g$655$20104 g$655$20105) (error (quote datum->syntax) (quote "~s is not an identifier") g$655$20104)))) (set! g$655$12852 (lambda (g$655$20107) (g$655$12229 g$655$20107))) (set! g$655$12854 (lambda (g$655$20109) (call-with-values (lambda () (g$655$12801 g$655$20109)) (lambda (g$655$20112 g$655$20113) (begin (for-each g$655$11746 g$655$20112) (eval-core (g$655$11298 g$655$20113))))))) (set! g$655$12856 (g$655$11224 (quote #f))) (set! g$655$12858 (lambda (g$655$20115) ((lambda (g$655$20117) (if g$655$20117 ((lambda (g$655$20119) ((lambda (g$655$20121) (if g$655$20121 (cdr g$655$20121) ((lambda (g$655$20123) ((lambda (g$655$20125) (if g$655$20125 ((lambda (g$655$20129) ((lambda (g$655$20131) (begin (g$655$11749 g$655$20119 g$655$20115 g$655$20131) g$655$20131)) (cdr g$655$20129))) g$655$20125) ((lambda (g$655$20127) (begin (g$655$11749 g$655$20119 g$655$20115 g$655$20127) (g$655$11748 g$655$20119 g$655$20127 (cons (quote global) (cons g$655$20119 (g$655$12121 g$655$20115)))) g$655$20127)) (g$655$12123 g$655$20115)))) (assq g$655$20115 g$655$20123))) (if (g$655$11754 (quote (ikarus))) (g$655$11780 (g$655$11755 (quote (ikarus)))) (quote ()))))) (assq g$655$20115 (g$655$11780 g$655$20119)))) g$655$20117) (quote #f))) (g$655$12856)))) (set! g$655$12860 (lambda (g$655$20133) ((lambda (g$655$20135) (begin (set! g$655$20135 (lambda (g$655$20169) ((lambda (g$655$20172 g$655$20173) (if g$655$20172 (set-symbol-value! g$655$20172 (eval-core (g$655$11298 g$655$20173))) (eval-core (g$655$11298 g$655$20173)))) (car g$655$20169) (cdr g$655$20169)))) ((lambda (g$655$20138 g$655$20139) ((lambda (g$655$20141) (begin (for-each g$655$11746 (g$655$20138)) (if (null? g$655$20141) (void) (begin (for-each g$655$20135 (reverse (cdr g$655$20141))) (g$655$20135 (car g$655$20141)))))) ((lambda (g$655$20154 g$655$20155 g$655$20156 g$655$20157 g$655$20158 g$655$20159) ((lambda (g$655$20161) (dynamic-wind g$655$20161 (lambda () (g$655$12773 (list (g$655$12185 g$655$20133 g$655$12115 (quote ()))) (quote ()))) g$655$20161)) (lambda () (begin ((lambda (g$655$20163) (begin (g$655$20154 g$655$20157) (set! g$655$20157 g$655$20163))) (g$655$20154)) ((lambda (g$655$20165) (begin (g$655$20155 g$655$20158) (set! g$655$20158 g$655$20165))) (g$655$20155)) ((lambda (g$655$20167) (begin (g$655$20156 g$655$20159) (set! g$655$20159 g$655$20167))) (g$655$20156)))))) g$655$12789 g$655$12791 g$655$12856 g$655$20138 g$655$20139 (g$655$11755 (quote (ikarus interaction)))))) (g$655$12787) (g$655$12787)))) (quote #f)))) (begin (set! g$655$20174 g$655$12860) (set! g$655$20175 g$655$12858) (set! g$655$20176 g$655$12856) (set! g$655$20177 g$655$12854) (set! g$655$20178 g$655$12852) (set! g$655$20179 g$655$12850) (set! g$655$20180 g$655$12848) (set! g$655$20181 g$655$12846) (set! g$655$20182 g$655$12844) (set! g$655$20183 g$655$12842) (set! g$655$20184 g$655$12840) (set! g$655$20185 g$655$12838) (set! g$655$20186 g$655$12836) (set! g$655$20187 g$655$12834) (set! g$655$20188 g$655$12832) (set! g$655$20189 g$655$12830) (set! g$655$20190 g$655$12828) (set! g$655$20191 g$655$12826) (set! g$655$20192 g$655$12824) (set! g$655$20193 g$655$12822) (set! g$655$20194 g$655$12820) (set! g$655$20195 g$655$12818) (set! g$655$20196 g$655$12816) (set! g$655$20197 g$655$12814) (set! g$655$20198 g$655$12812) (set! g$655$20199 g$655$12810) (set! g$655$20200 g$655$12808) (set! g$655$20201 g$655$12806) (set! g$655$20202 g$655$12804) (set! g$655$20203 g$655$12801) (set! g$655$20204 g$655$12799) (set! g$655$20205 g$655$12797) (set! g$655$20206 g$655$12795) (set! g$655$20207 g$655$12793) (set! g$655$20208 g$655$12791) (set! g$655$20209 g$655$12789) (set! g$655$20210 g$655$12787) (set! g$655$20211 g$655$12785) (set! g$655$20212 g$655$12783) (set! g$655$20213 g$655$12781) (set! g$655$20214 g$655$12779) (set! g$655$20215 g$655$12777) (set! g$655$20216 g$655$12775) (set! g$655$20217 g$655$12773) (set! g$655$20218 g$655$12771) (set! g$655$20219 g$655$12769) (set! g$655$20220 g$655$12767) (set! g$655$20221 g$655$12765) (set! g$655$20222 g$655$12763) (set! g$655$20223 g$655$12761) (set! g$655$20224 g$655$12759) (set! g$655$20225 g$655$12757) (set! g$655$20226 g$655$12755) (set! g$655$20227 g$655$12753) (set! g$655$20228 g$655$12751) (set! g$655$20229 g$655$12749) (set! g$655$20230 g$655$12747) (set! g$655$20231 g$655$12745) (set! g$655$20232 g$655$12743) (set! g$655$20233 g$655$12741) (set! g$655$20234 g$655$12739) (set! g$655$20235 g$655$12737) (set! g$655$20236 g$655$12735) (set! g$655$20237 g$655$12733) (set! g$655$20238 g$655$12731) (set! g$655$20239 g$655$12729) (set! g$655$20240 g$655$12727) (set! g$655$20241 g$655$12725) (set! g$655$20242 g$655$12723) (set! g$655$20243 g$655$12721) (set! g$655$20244 g$655$12719) (set! g$655$20245 g$655$12717) (set! g$655$20246 g$655$12715) (set! g$655$20247 g$655$12713) (set! g$655$20248 g$655$12711) (set! g$655$20249 g$655$12709) (set! g$655$20250 g$655$12707) (set! g$655$20251 g$655$12705) (set! g$655$20252 g$655$12703) (set! g$655$20253 g$655$12701) (set! g$655$20254 g$655$12699) (set! g$655$20255 g$655$12697) (set! g$655$20256 g$655$12695) (set! g$655$20257 g$655$12693) (set! g$655$20258 g$655$12691) (set! g$655$20259 g$655$12689) (set! g$655$20260 g$655$12687) (set! g$655$20261 g$655$12685) (set! g$655$20262 g$655$12683) (set! g$655$20263 g$655$12681) (set! g$655$20264 g$655$12679) (set! g$655$20265 g$655$12677) (set! g$655$20266 g$655$12675) (set! g$655$20267 g$655$12673) (set! g$655$20268 g$655$12671) (set! g$655$20269 g$655$12669) (set! g$655$20270 g$655$12667) (set! g$655$20271 g$655$12665) (set! g$655$20272 g$655$12663) (set! g$655$20273 g$655$12661) (set! g$655$20274 g$655$12659) (set! g$655$20275 g$655$12657) (set! g$655$20276 g$655$12655) (set! g$655$20277 g$655$12653) (set! g$655$20278 g$655$12651) (set! g$655$20279 g$655$12649) (set! g$655$20280 g$655$12647) (set! g$655$20281 g$655$12645) (set! g$655$20282 g$655$12643) (set! g$655$20283 g$655$12641) (set! g$655$20284 g$655$12639) (set! g$655$20285 g$655$12637) (set! g$655$20286 g$655$12635) (set! g$655$20288 g$655$12273) (set! g$655$20289 g$655$12271) (set! g$655$20290 g$655$12269) (set! g$655$20292 g$655$12241) (set! g$655$20293 g$655$12239) (set! g$655$20294 g$655$12237) (set! g$655$20295 g$655$12235) (set! g$655$20296 g$655$12233) (set! g$655$20297 g$655$12231) (set! g$655$20298 g$655$12229) (set! g$655$20299 g$655$12227) (set! g$655$20300 g$655$12225) (set! g$655$20301 g$655$12223) (set! g$655$20302 g$655$12221) (set! g$655$20303 g$655$12219) (set! g$655$20304 g$655$12217) (set! g$655$20305 g$655$12215) (set! g$655$20306 g$655$12213) (set! g$655$20307 g$655$12211) (set! g$655$20308 g$655$12209) (set! g$655$20309 g$655$12207) (set! g$655$20310 g$655$12205) (set! g$655$20311 g$655$12203) (set! g$655$20312 g$655$12201) (set! g$655$20313 g$655$12199) (set! g$655$20314 g$655$12197) (set! g$655$20315 g$655$12195) (set! g$655$20316 g$655$12193) (set! g$655$20317 g$655$12191) (set! g$655$20318 g$655$12189) (set! g$655$20319 g$655$12187) (set! g$655$20320 g$655$12185) (set! g$655$20321 g$655$12183) (set! g$655$20322 g$655$12181) (set! g$655$20323 g$655$12179) (set! g$655$20324 g$655$12177) (set! g$655$20325 g$655$12175) (set! g$655$20326 g$655$12173) (set! g$655$20327 g$655$12171) (set! g$655$20328 g$655$12169) (set! g$655$20329 g$655$12167) (set! g$655$20330 g$655$12165) (set! g$655$20331 g$655$12163) (set! g$655$20332 g$655$12161) (set! g$655$20333 g$655$12159) (set! g$655$20334 g$655$12156) (set! g$655$20335 g$655$12154) (set! g$655$20336 g$655$12152) (set! g$655$20337 g$655$12150) (set! g$655$20338 g$655$12148) (set! g$655$20339 g$655$12146) (set! g$655$20340 g$655$12144) (set! g$655$20341 g$655$12142) (set! g$655$20342 g$655$12140) (set! g$655$20343 g$655$12138) (set! g$655$20344 g$655$12136) (set! g$655$20345 g$655$12134) (set! g$655$20346 g$655$12132) (set! g$655$20347 g$655$12130) (set! g$655$20348 g$655$12128) (set! g$655$20349 g$655$12126) (set! g$655$20350 g$655$12123) (set! g$655$20351 g$655$12121) (set! g$655$20352 g$655$12119) (set! g$655$20353 g$655$12117) (set! g$655$20354 g$655$12115) (set! g$655$20356 g$655$12110) (set! g$655$20357 g$655$12108) (g$655$11758 g$655$12828)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (g$655$11302 (lambda (g$655$21119) ((lambda (g$655$21121) (if g$655$21121 (cdr g$655$21121) (quote #f))) (assq g$655$21119 (quote ((syntax-error . g$655$20181) (syntax-dispatch . g$655$20245) (make-variable-transformer . g$655$20289) (identifier? . g$655$20180) (generate-temporaries . g$655$20184) (free-identifier=? . g$655$20183) (syntax->datum . g$655$20178) (datum->syntax . g$655$20179) (bound-identifier=? . g$655$20182) (null-environment . g$655$20194) (eval . g$655$20191) (environment . g$655$20195))))))) (g$655$11750 (quote g$655$21085) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21086) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#0=(unquote-splicing . g$655$20422) #1=(unquote . g$655$20421) #2=(delay . g$655$20414) #3=(or . g$655$20412) #4=(and . g$655$20411) #5=(do . g$655$20410) #6=(cond . g$655$20409) #7=(let* . g$655$20408) #8=(let . g$655$20407) #9=(quasiquote . g$655$20403) #10=(syntax-rules . g$655$20402) #11=(case . g$655$20398) #12=(if . g$655$20394) #13=(letrec . g$655$20392) #14=(lambda . g$655$20389) #15=(quote . g$655$20386) #16=(letrec-syntax . g$655$20384) #17=(let-syntax . g$655$20383) #18=(set! . g$655$20382) #19=(begin . g$655$20380) #20=(define-syntax . g$655$20378) #21=(define . g$655$20377))) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21087) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#22=(string-ci>? . g$655$21067) #23=(string-ci>=? . g$655$21066) #24=(string-ci=? . g$655$21065) #25=(string-ci<? . g$655$21064) #26=(string-ci<=? . g$655$21063) #27=(char-whitespace? . g$655$21062) #28=(char-upper-case? . g$655$21061) #29=(char-numeric? . g$655$21059) #30=(char-lower-case? . g$655$21058) #31=(char-upcase . g$655$21056) #32=(char-downcase . g$655$21053) #33=(char-ci>? . g$655$21052) #34=(char-ci>=? . g$655$21051) #35=(char-ci=? . g$655$21050) #36=(char-ci<? . g$655$21049) #37=(char-ci<=? . g$655$21048) #38=(char-alphabetic? . g$655$21047) #39=(call-with-output-file . g$655$20991) #40=(call-with-input-file . g$655$20990) #41=(write-char . g$655$20989) #42=(write . g$655$20988) #43=(with-output-to-file . g$655$20987) #44=(with-input-from-file . g$655$20986) #45=(read-char . g$655$20985) #46=(read . g$655$20984) #47=(peek-char . g$655$20983) #48=(open-output-file . g$655$20982) #49=(open-input-file . g$655$20981) #50=(newline . g$655$20980) #51=(display . g$655$20979) #52=(close-output-port . g$655$20978) #53=(close-input-port . g$655$20977) #54=(eof-object . g$655$20975) #55=(current-output-port . g$655$20973) #56=(current-input-port . g$655$20972) #57=(output-port? . g$655$20971) #58=(input-port? . g$655$20970) #59=(scheme-report-environment . g$655$20870) #60=(quotient . g$655$20869) #61=(null-environment . g$655$12819) #62=(remainder . g$655$20868) #63=(modulo . g$655$20867) #64=(inexact->exact . g$655$20866) #65=(force . g$655$20865) #66=(exact->inexact . g$655$20864) #67=(string-fill! . g$655$20861) #68=(string-set! . g$655$20860) #69=(set-cdr! . g$655$20859) #70=(set-car! . g$655$20858) #71=(memv . g$655$20852) #72=(memq . g$655$20851) #73=(member . g$655$20849) #74=(assv . g$655$20841) #75=(assq . g$655$20840) #76=(assoc . g$655$20838) #77=(eval . g$655$12825) #78=(zero? . g$655$20589) #79=(vector? . g$655$20588) #80=(vector-set! . g$655$20587) #81=(vector-ref . g$655$20586) #82=(vector-length . g$655$20584) #83=(vector-fill! . g$655$20582) #84=(vector->list . g$655$20581) #85=(vector . g$655$20580) #86=(values . g$655$20579) #87=(truncate . g$655$20578) #88=(tan . g$655$20577) #89=(symbol? . g$655$20576) #90=(symbol->string . g$655$20574) #91=(substring . g$655$20573) #92=(string? . g$655$20572) #93=(string>? . g$655$20571) #94=(string>=? . g$655$20570) #95=(string=? . g$655$20569) #96=(string<? . g$655$20568) #97=(string<=? . g$655$20567) #98=(string-ref . g$655$20566) #99=(string-length . g$655$20565) #100=(string-copy . g$655$20563) #101=(string-append . g$655$20562) #102=(string->symbol . g$655$20561) #103=(string->number . g$655$20560) #104=(string->list . g$655$20559) #105=(string . g$655$20558) #106=(sqrt . g$655$20557) #107=(sin . g$655$20556) #108=(round . g$655$20555) #109=(reverse . g$655$20554) #110=(real? . g$655$20553) #111=(real-part . g$655$20551) #112=(rationalize . g$655$20550) #113=(rational? . g$655$20549) #114=(procedure? . g$655$20547) #115=(positive? . g$655$20546) #116=(pair? . g$655$20545) #117=(odd? . g$655$20544) #118=(numerator . g$655$20543) #119=(number? . g$655$20542) #120=(number->string . g$655$20541) #121=(not . g$655$20539) #122=(negative? . g$655$20538) #123=(min . g$655$20536) #124=(max . g$655$20535) #125=(map . g$655$20534) #126=(make-vector . g$655$20533) #127=(make-string . g$655$20532) #128=(make-rectangular . g$655$20531) #129=(make-polar . g$655$20530) #130=(magnitude . g$655$20529) #131=(log . g$655$20528) #132=(list? . g$655$20527) #133=(list-tail . g$655$20526) #134=(list-ref . g$655$20525) #135=(list->vector . g$655$20524) #136=(list->string . g$655$20523) #137=(list . g$655$20522) #138=(length . g$655$20521) #139=(lcm . g$655$20520) #140=(integer? . g$655$20519) #141=(integer->char . g$655$20517) #142=(inexact? . g$655$20515) #143=(imag-part . g$655$20513) #144=(gcd . g$655$20512) #145=(for-each . g$655$20511) #146=(floor . g$655$20510) #147=(expt . g$655$20508) #148=(exp . g$655$20507) #149=(exact? . g$655$20506) #150=(even? . g$655$20503) #151=(eqv? . g$655$20501) #152=(equal? . g$655$20500) #153=(eq? . g$655$20499) #154=(dynamic-wind . g$655$20498) #155=(denominator . g$655$20491) #156=(cos . g$655$20490) #157=(cons . g$655$20489) #158=(complex? . g$655$20488) #159=(char? . g$655$20487) #160=(char>? . g$655$20486) #161=(char>=? . g$655$20485) #162=(char=? . g$655$20484) #163=(char<? . g$655$20483) #164=(char<=? . g$655$20482) #165=(char->integer . g$655$20481) #166=(ceiling . g$655$20480) #167=(call-with-values . g$655$20479) #168=(call-with-current-continuation . g$655$20477) #169=(cddddr . g$655$20476) #170=(cdddar . g$655$20475) #171=(cddadr . g$655$20474) #172=(cddaar . g$655$20473) #173=(cdaddr . g$655$20472) #174=(cdadar . g$655$20471) #175=(cdaadr . g$655$20470) #176=(cdaaar . g$655$20469) #177=(cadddr . g$655$20468) #178=(caddar . g$655$20467) #179=(cadadr . g$655$20466) #180=(cadaar . g$655$20465) #181=(caaddr . g$655$20464) #182=(caadar . g$655$20463) #183=(caaadr . g$655$20462) #184=(caaaar . g$655$20461) #185=(cdddr . g$655$20460) #186=(cddar . g$655$20459) #187=(cdadr . g$655$20458) #188=(cdaar . g$655$20457) #189=(caddr . g$655$20456) #190=(cadar . g$655$20455) #191=(caadr . g$655$20454) #192=(caaar . g$655$20453) #193=(cddr . g$655$20452) #194=(cdar . g$655$20451) #195=(cadr . g$655$20450) #196=(caar . g$655$20449) #197=(cdr . g$655$20448) #198=(car . g$655$20447) #199=(boolean? . g$655$20446) #200=(atan . g$655$20444) #201=(asin . g$655$20442) #202=(apply . g$655$20441) #203=(append . g$655$20440) #204=(angle . g$655$20439) #205=(acos . g$655$20438) #206=(abs . g$655$20437) #207=(/ . g$655$20436) #208=(* . g$655$20435) #209=(- . g$655$20434) #210=(+ . g$655$20433) #211=(>= . g$655$20432) #212=(> . g$655$20431) #213=(= . g$655$20430) #214=(<= . g$655$20429) #215=(< . g$655$20428) #0# #1# #2# #3# #4# #5# #6# #7# #8# #9# #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21088) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#216=(module . g$655$20379))) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21089) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21090) (quote (rnrs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#217=(string-upcase . g$655$21075) #218=(string-titlecase . g$655$21074) #219=(string-normalize-nfkd . g$655$21073) #220=(string-normalize-nfkc . g$655$21072) #221=(string-normalize-nfd . g$655$21071) #222=(string-normalize-nfc . g$655$21070) #223=(string-foldcase . g$655$21069) #224=(string-downcase . g$655$21068) #22# #23# #24# #25# #26# #27# #28# #225=(char-title-case? . g$655$21060) #29# #30# #226=(char-general-category . g$655$21057) #31# #227=(char-titlecase . g$655$21055) #228=(char-foldcase . g$655$21054) #32# #33# #34# #35# #36# #37# #38# #229=(make-variable-transformer . g$655$12270) #230=(identifier? . g$655$12847) #231=(generate-temporaries . g$655$12839) #232=(free-identifier=? . g$655$12841) #233=(syntax->datum . g$655$12851) #234=(datum->syntax . g$655$12849) #235=(bound-identifier=? . g$655$12843) #236=(record-type-descriptor? . g$655$21046) #237=(record-predicate . g$655$21045) #238=(record-mutator . g$655$21044) #239=(record-constructor . g$655$21043) #240=(record-accessor . g$655$21042) #241=(make-record-type-descriptor . g$655$21041) #242=(make-record-constructor-descriptor . g$655$21040) #243=(record? . g$655$21039) #244=(record-type-uid . g$655$21038) #245=(record-type-sealed? . g$655$21037) #246=(record-type-parent . g$655$21036) #247=(record-type-opaque? . g$655$21035) #248=(record-type-name . g$655$21034) #249=(record-type-generative? . g$655$21033) #250=(record-type-field-names . g$655$21032) #251=(record-rtd . g$655$21031) #252=(record-field-mutable? . g$655$21030) #253=(nongenerative . g$655$21029) #254=(sealed . g$655$21028) #255=(record-type-descriptor . g$655$21027) #256=(record-constructor-descriptor . g$655$21026) #257=(protocol . g$655$21025) #258=(parent-rtd . g$655$21024) #259=(parent . g$655$21023) #260=(opaque . g$655$21022) #261=(mutable . g$655$21021) #262=(immutable . g$655$21020) #263=(fields . g$655$21019) #264=(define-record-type . g$655$21018) #265=(delete-file . g$655$21017) #266=(file-exists? . g$655$21016) #267=(vector-sort! . g$655$21015) #268=(vector-sort . g$655$21014) #269=(list-sort . g$655$21013) #270=(symbol-hash . g$655$21012) #271=(string-ci-hash . g$655$21011) #272=(string-hash . g$655$21010) #273=(equal-hash . g$655$21009) #274=(hashtable-equivalence-function . g$655$21008) #275=(make-hashtable . g$655$21007) #276=(hashtable-hash-function . g$655$21006) #277=(make-eqv-hashtable . g$655$21005) #278=(make-eq-hashtable . g$655$21004) #279=(hashtable? . g$655$21003) #280=(hashtable-update! . g$655$21002) #281=(hashtable-size . g$655$21001) #282=(hashtable-set! . g$655$21000) #283=(hashtable-ref . g$655$20999) #284=(hashtable-mutable? . g$655$20998) #285=(hashtable-keys . g$655$20997) #286=(hashtable-entries . g$655$20996) #287=(hashtable-delete! . g$655$20995) #288=(hashtable-copy . g$655$20994) #289=(hashtable-contains? . g$655$20993) #290=(hashtable-clear! . g$655$20992) #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #291=(eof-object? . g$655$20976) #54# #292=(current-error-port . g$655$20974) #55# #56# #57# #58# #293=(utf-8-codec . g$655$20969) #294=(utf-16-codec . g$655$20968) #295=(transcoder-error-handling-mode . g$655$20967) #296=(transcoder-eol-style . g$655$20966) #297=(transcoder-codec . g$655$20965) #298=(transcoded-port . g$655$20964) #299=(textual-port? . g$655$20963) #300=(string->bytevector . g$655$20962) #301=(standard-output-port . g$655$20961) #302=(standard-input-port . g$655$20960) #303=(standard-error-port . g$655$20959) #304=(set-port-position! . g$655$20958) #305=(put-u8 . g$655$20957) #306=(put-string . g$655$20956) #307=(put-datum . g$655$20955) #308=(put-char . g$655$20954) #309=(put-bytevector . g$655$20953) #310=(port? . g$655$20952) #311=(port-transcoder . g$655$20951) #312=(port-position . g$655$20950) #313=(port-has-set-port-position!? . g$655$20949) #314=(port-has-port-position? . g$655$20948) #315=(port-eof? . g$655$20947) #316=(output-port-buffer-mode . g$655$20946) #317=(open-string-output-port . g$655$20945) #318=(open-string-input-port . g$655$20944) #319=(open-file-output-port . g$655$20943) #320=(open-file-input/output-port . g$655$20942) #321=(open-file-input-port . g$655$20941) #322=(open-bytevector-output-port . g$655$20940) #323=(open-bytevector-input-port . g$655$20939) #324=(native-transcoder . g$655$20938) #325=(native-eol-style . g$655$20937) #326=(make-transcoder . g$655$20936) #327=(latin-1-codec . g$655$20935) #328=(make-i/o-write-error . g$655$20934) #329=(make-i/o-read-error . g$655$20933) #330=(make-i/o-port-error . g$655$20932) #331=(make-i/o-invalid-position-error . g$655$20931) #332=(make-i/o-filename-error . g$655$20930) #333=(make-i/o-file-protection-error . g$655$20929) #334=(make-i/o-file-is-read-only-error . g$655$20928) #335=(make-i/o-file-does-not-exist-error . g$655$20927) #336=(make-i/o-file-already-exists-error . g$655$20926) #337=(make-i/o-error . g$655$20925) #338=(make-i/o-encoding-error . g$655$20924) #339=(make-i/o-decoding-error . g$655$20923) #340=(make-custom-textual-output-port . g$655$20922) #341=(make-custom-textual-input/output-port . g$655$20921) #342=(make-custom-textual-input-port . g$655$20920) #343=(make-custom-binary-output-port . g$655$20919) #344=(make-custom-binary-input/output-port . g$655$20918) #345=(make-custom-binary-input-port . g$655$20917) #346=(make-bytevector . g$655$20916) #347=(lookahead-u8 . g$655$20915) #348=(lookahead-char . g$655$20914) #349=(i/o-write-error? . g$655$20913) #350=(&i/o-write . g$655$20912) #351=(i/o-read-error? . g$655$20911) #352=(&i/o-read . g$655$20910) #353=(i/o-port-error? . g$655$20909) #354=(&i/o-port . g$655$20908) #355=(i/o-invalid-position-error? . g$655$20907) #356=(&i/o-invalid-position . g$655$20906) #357=(i/o-filename-error? . g$655$20905) #358=(&i/o-filename . g$655$20904) #359=(i/o-file-protection-error? . g$655$20903) #360=(&i/o-file-protection . g$655$20902) #361=(i/o-file-is-read-only-error? . g$655$20901) #362=(&i/o-file-is-read-only . g$655$20900) #363=(i/o-file-does-not-exist-error? . g$655$20899) #364=(&i/o-file-does-not-exist . g$655$20898) #365=(i/o-file-already-exists-error? . g$655$20897) #366=(&i/o-file-already-exists . g$655$20896) #367=(i/o-error? . g$655$20895) #368=(i/o-error-port . g$655$20894) #369=(i/o-error-filename . g$655$20893) #370=(i/o-encoding-error? . g$655$20892) #371=(i/o-encoding-error-char . g$655$20891) #372=(&i/o-encoding . g$655$20890) #373=(i/o-decoding-error? . g$655$20889) #374=(&i/o-decoding . g$655$20888) #375=(&i/o . g$655$20887) #376=(get-u8 . g$655$20886) #377=(get-string-n! . g$655$20885) #378=(get-string-n . g$655$20884) #379=(get-string-all . g$655$20883) #380=(get-line . g$655$20882) #381=(get-datum . g$655$20881) #382=(get-char . g$655$20880) #383=(get-bytevector-some . g$655$20879) #384=(get-bytevector-n! . g$655$20878) #385=(get-bytevector-n . g$655$20877) #386=(get-bytevector-all . g$655$20876) #387=(flush-output-port . g$655$20875) #388=(file-options . g$655$20874) #389=(error-handling-mode . g$655$20873) #390=(eol-style . g$655$20872) #391=(close-port . g$655$20871) #392=(exit . g$655$20863) #393=(command-line . g$655$20862) #394=(remove . g$655$20857) #395=(remv . g$655$20856) #396=(remp . g$655$20855) #397=(remq . g$655$20854) #398=(partition . g$655$20853) #71# #72# #399=(memp . g$655$20850) #73# #400=(exists . g$655$20848) #401=(for-all . g$655$20847) #402=(fold-right . g$655$20846) #403=(fold-left . g$655$20845) #404=(find . g$655$20844) #405=(filter . g$655$20843) #406=(cons* . g$655$20842) #74# #75# #407=(assp . g$655$20839) #76# #408=(call-with-string-output-port . g$655$20837) #409=(call-with-port . g$655$20836) #410=(call-with-bytevector-output-port . g$655$20835) #411=(bytevector->string . g$655$20834) #412=(buffer-mode? . g$655$20833) #413=(buffer-mode . g$655$20832) #414=(binary-port? . g$655$20831) #415=(guard . g$655$20830) #416=(with-exception-handler . g$655$20829) #417=(raise-continuable . g$655$20828) #418=(raise . g$655$20827) #419=(make-enumeration . g$655$20826) #420=(enum-set=? . g$655$20825) #421=(enum-set-universe . g$655$20824) #422=(enum-set-union . g$655$20823) #423=(enum-set-subset? . g$655$20822) #424=(enum-set-projection . g$655$20821) #425=(enum-set-member? . g$655$20820) #426=(enum-set-intersection . g$655$20819) #427=(enum-set-indexer . g$655$20818) #428=(enum-set-difference . g$655$20817) #429=(enum-set-constructor . g$655$20816) #430=(enum-set-complement . g$655$20815) #431=(enum-set->list . g$655$20814) #432=(define-enumeration . g$655$20813) #433=(who-condition? . g$655$20812) #434=(&who . g$655$20811) #435=(warning? . g$655$20810) #436=(&warning . g$655$20809) #437=(violation? . g$655$20808) #438=(&violation . g$655$20807) #439=(undefined-violation? . g$655$20806) #440=(&undefined . g$655$20805) #441=(syntax-violation? . g$655$20804) #442=(syntax-violation-subform . g$655$20803) #443=(syntax-violation-form . g$655$20802) #444=(syntax-violation . g$655$20801) #445=(&syntax . g$655$20800) #446=(simple-conditions . g$655$20799) #447=(serious-condition? . g$655$20798) #448=(&serious . g$655$20797) #449=(non-continuable-violation? . g$655$20796) #450=(&non-continuable . g$655$20795) #451=(message-condition? . g$655$20794) #452=(&message . g$655$20793) #453=(make-who-condition . g$655$20792) #454=(make-warning . g$655$20791) #455=(make-violation . g$655$20790) #456=(make-undefined-violation . g$655$20789) #457=(make-syntax-violation . g$655$20788) #458=(make-serious-condition . g$655$20787) #459=(make-non-continuable-violation . g$655$20786) #460=(make-message-condition . g$655$20785) #461=(make-lexical-violation . g$655$20784) #462=(make-irritants-condition . g$655$20783) #463=(make-implementation-restriction-violation . g$655$20782) #464=(make-error . g$655$20781) #465=(make-assertion-violation . g$655$20780) #466=(lexical-violation? . g$655$20779) #467=(&lexical . g$655$20778) #468=(irritants-condition? . g$655$20777) #469=(&irritants . g$655$20776) #470=(implementation-restriction-violation? . g$655$20775) #471=(&implementation-restriction . g$655$20774) #472=(error? . g$655$20773) #473=(&error . g$655$20772) #474=(define-condition-type . g$655$20771) #475=(condition-who . g$655$20770) #476=(condition-predicate . g$655$20769) #477=(condition-message . g$655$20768) #478=(condition-irritants . g$655$20767) #479=(condition-accessor . g$655$20766) #480=(condition . g$655$20765) #481=(&condition . g$655$20764) #482=(assertion-violation? . g$655$20763) #483=(&assertion . g$655$20762) #484=(condition? . g$655$20761) #485=(utf32->string . g$655$20760) #486=(utf16->string . g$655$20759) #487=(utf8->string . g$655$20758) #488=(uint-list->bytevector . g$655$20757) #489=(u8-list->bytevector . g$655$20756) #490=(string->utf8 . g$655$20755) #491=(string->utf32 . g$655$20754) #492=(string->utf16 . g$655$20753) #493=(sint-list->bytevector . g$655$20752) #494=(native-endianness . g$655$20751) #495=(bytevector? . g$655$20750) #496=(bytevector=? . g$655$20749) #497=(bytevector-uint-set! . g$655$20748) #498=(bytevector-uint-ref . g$655$20747) #499=(bytevector-u8-set! . g$655$20746) #500=(bytevector-u8-ref . g$655$20745) #501=(bytevector-u64-set! . g$655$20744) #502=(bytevector-u64-ref . g$655$20743) #503=(bytevector-u64-native-set! . g$655$20742) #504=(bytevector-u64-native-ref . g$655$20741) #505=(bytevector-u32-set! . g$655$20740) #506=(bytevector-u32-ref . g$655$20739) #507=(bytevector-u32-native-set! . g$655$20738) #508=(bytevector-u32-native-ref . g$655$20737) #509=(bytevector-u16-set! . g$655$20736) #510=(bytevector-u16-ref . g$655$20735) #511=(bytevector-u16-native-set! . g$655$20734) #512=(bytevector-u16-native-ref . g$655$20733) #513=(bytevector-sint-set! . g$655$20732) #514=(bytevector-sint-ref . g$655$20731) #515=(bytevector-s8-set! . g$655$20730) #516=(bytevector-s8-ref . g$655$20729) #517=(bytevector-s64-set! . g$655$20728) #518=(bytevector-s64-ref . g$655$20727) #519=(bytevector-s64-native-set! . g$655$20726) #520=(bytevector-s64-native-ref . g$655$20725) #521=(bytevector-s32-set! . g$655$20724) #522=(bytevector-s32-ref . g$655$20723) #523=(bytevector-s32-native-set! . g$655$20722) #524=(bytevector-s32-native-ref . g$655$20721) #525=(bytevector-s16-set! . g$655$20720) #526=(bytevector-s16-ref . g$655$20719) #527=(bytevector-s16-native-set! . g$655$20718) #528=(bytevector-s16-native-ref . g$655$20717) #529=(bytevector-length . g$655$20716) #530=(bytevector-ieee-single-ref . g$655$20715) #531=(bytevector-ieee-single-native-set! . g$655$20714) #532=(bytevector-ieee-single-native-ref . g$655$20713) #533=(bytevector-ieee-double-ref . g$655$20712) #534=(bytevector-ieee-double-native-set! . g$655$20711) #535=(bytevector-ieee-double-native-ref . g$655$20710) #536=(bytevector-fill! . g$655$20709) #537=(bytevector-copy! . g$655$20708) #538=(bytevector-copy . g$655$20707) #539=(bytevector->uint-list . g$655$20706) #540=(bytevector->u8-list . g$655$20705) #541=(bytevector->sint-list . g$655$20704) #542=(no-nans-violation? . g$655$20703) #543=(&no-nans . g$655$20702) #544=(no-infinities-violation? . g$655$20701) #545=(&no-infinities . g$655$20700) #546=(make-no-nans-violation . g$655$20699) #547=(make-no-infinities-violation . g$655$20698) #548=(real->flonum . g$655$20697) #549=(flzero? . g$655$20696) #550=(fltruncate . g$655$20695) #551=(fltan . g$655$20694) #552=(flsqrt . g$655$20693) #553=(flsin . g$655$20692) #554=(flround . g$655$20691) #555=(flpositive? . g$655$20690) #556=(flonum? . g$655$20689) #557=(flodd? . g$655$20688) #558=(flnumerator . g$655$20687) #559=(flnegative? . g$655$20686) #560=(flnan? . g$655$20685) #561=(flmod0 . g$655$20684) #562=(flmod . g$655$20683) #563=(flmin . g$655$20682) #564=(flmax . g$655$20681) #565=(fllog . g$655$20680) #566=(flinteger? . g$655$20679) #567=(flinfinite? . g$655$20678) #568=(flfloor . g$655$20677) #569=(flfinite? . g$655$20676) #570=(flexpt . g$655$20675) #571=(flexp . g$655$20674) #572=(fleven? . g$655$20673) #573=(fldiv0-and-mod0 . g$655$20672) #574=(fldiv0 . g$655$20671) #575=(fldiv-and-mod . g$655$20670) #576=(fldiv . g$655$20669) #577=(fldenominator . g$655$20668) #578=(flcos . g$655$20667) #579=(flceiling . g$655$20666) #580=(flatan . g$655$20665) #581=(flasin . g$655$20664) #582=(flacos . g$655$20663) #583=(flabs . g$655$20662) #584=(fl>? . g$655$20661) #585=(fl>=? . g$655$20660) #586=(fl=? . g$655$20659) #587=(fl<? . g$655$20658) #588=(fl<=? . g$655$20657) #589=(fl/ . g$655$20656) #590=(fl- . g$655$20655) #591=(fl+ . g$655$20654) #592=(fl* . g$655$20653) #593=(fixnum->flonum . g$655$20652) #594=(fxzero? . g$655$20651) #595=(fxxor . g$655$20650) #596=(fxrotate-bit-field . g$655$20649) #597=(fxreverse-bit-field . g$655$20648) #598=(fxpositive? . g$655$20647) #599=(fxodd? . g$655$20646) #600=(fxnot . g$655$20645) #601=(fxnegative? . g$655$20644) #602=(fxmod0 . g$655$20643) #603=(fxmod . g$655$20642) #604=(fxmin . g$655$20641) #605=(fxmax . g$655$20640) #606=(fxlength . g$655$20639) #607=(fxior . g$655$20638) #608=(fxif . g$655$20637) #609=(fxfirst-bit-set . g$655$20636) #610=(fxeven? . g$655$20635) #611=(fxdiv0-and-mod0 . g$655$20634) #612=(fxdiv0 . g$655$20633) #613=(fxdiv-and-mod . g$655$20632) #614=(fxdiv . g$655$20631) #615=(fxcopy-bit-field . g$655$20630) #616=(fxcopy-bit . g$655$20629) #617=(fxbit-set? . g$655$20628) #618=(fxbit-field . g$655$20627) #619=(fxbit-count . g$655$20626) #620=(fxarithmetic-shift-right . g$655$20625) #621=(fxarithmetic-shift-left . g$655$20624) #622=(fxarithmetic-shift . g$655$20623) #623=(fxand . g$655$20622) #624=(fx>? . g$655$20621) #625=(fx>=? . g$655$20620) #626=(fx=? . g$655$20619) #627=(fx<? . g$655$20618) #628=(fx<=? . g$655$20617) #629=(fx-/carry . g$655$20616) #630=(fx- . g$655$20615) #631=(fx+/carry . g$655$20614) #632=(fx+ . g$655$20613) #633=(fx*/carry . g$655$20612) #634=(fx* . g$655$20611) #635=(greatest-fixnum . g$655$20610) #636=(least-fixnum . g$655$20609) #637=(fixnum-width . g$655$20608) #638=(fixnum? . g$655$20607) #639=(bitwise-rotate-bit-field . g$655$20606) #640=(bitwise-reverse-bit-field . g$655$20605) #641=(bitwise-length . g$655$20604) #642=(bitwise-if . g$655$20603) #643=(bitwise-first-bit-set . g$655$20602) #644=(bitwise-copy-bit-field . g$655$20601) #645=(bitwise-copy-bit . g$655$20600) #646=(bitwise-bit-set? . g$655$20599) #647=(bitwise-bit-field . g$655$20598) #648=(bitwise-bit-count . g$655$20597) #649=(bitwise-xor . g$655$20596) #650=(bitwise-ior . g$655$20595) #651=(bitwise-and . g$655$20594) #652=(bitwise-not . g$655$20593) #653=(bitwise-arithmetic-shift-right . g$655$20592) #654=(bitwise-arithmetic-shift-left . g$655$20591) #655=(bitwise-arithmetic-shift . g$655$20590) #78# #79# #80# #81# #656=(vector-map . g$655$20585) #82# #657=(vector-for-each . g$655$20583) #83# #84# #85# #86# #87# #88# #89# #658=(symbol=? . g$655$20575) #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #659=(string-for-each . g$655$20564) #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #660=(real-valued? . g$655$20552) #111# #112# #113# #661=(rational-valued? . g$655$20548) #114# #115# #116# #117# #118# #119# #120# #662=(null? . g$655$20540) #121# #122# #663=(nan? . g$655$20537) #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #664=(integer-valued? . g$655$20518) #141# #665=(infinite? . g$655$20516) #142# #666=(inexact . g$655$20514) #143# #144# #145# #146# #667=(finite? . g$655$20509) #147# #148# #149# #668=(exact-integer-sqrt . g$655$20505) #669=(exact . g$655$20504) #150# #670=(error . g$655$20502) #151# #152# #153# #154# #671=(div0-and-mod0 . g$655$20497) #672=(mod0 . g$655$20496) #673=(div0 . g$655$20495) #674=(div-and-mod . g$655$20494) #675=(mod . g$655$20493) #676=(div . g$655$20492) #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #677=(call/cc . g$655$20478) #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #678=(boolean=? . g$655$20445) #200# #679=(assertion-violation . g$655$20443) #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #680=(let*-values . g$655$20427) #681=(unsyntax-splicing . g$655$20424) #682=(unsyntax . g$655$20423) #0# #1# #683=(_ . g$655$20420) #684=(else . g$655$20419) #685=(=> . g$655$20418) #686=(... . g$655$20417) #687=(assert . g$655$20416) #688=(endianness . g$655$20415) #3# #4# #5# #6# #7# #8# #689=(identifier-syntax . g$655$20406) #690=(with-syntax . g$655$20405) #691=(quasisyntax . g$655$20404) #9# #10# #692=(let-values . g$655$20399) #11# #693=(unless . g$655$20396) #694=(when . g$655$20395) #12# #695=(letrec* . g$655$20393) #13# #696=(case-lambda . g$655$20390) #14# #697=(syntax . g$655$20388) #698=(syntax-case . g$655$20387) #15# #16# #17# #18# #19# #20# #21#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21091) (quote (rnrs r5rs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#59# #60# #61# #62# #63# #64# #65# #66# #2#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21092) (quote (rnrs control)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#5# #693# #694# #696#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21093) (quote (rnrs eval)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#77# #699=(environment . g$655$12817))) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21094) (quote (rnrs mutable-pairs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#69# #70#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21095) (quote (rnrs mutable-strings)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#67# #68#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21096) (quote (rnrs programs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#392# #393#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21097) (quote (rnrs syntax-case)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#229# #230# #231# #232# #233# #234# #235# #444# #681# #682# #683# #686# #690# #691# #697# #698#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21098) (quote (rnrs files)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#265# #266# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #375#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21099) (quote (rnrs sorting)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#267# #268# #269#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21100) (quote (rnrs base)) (quote ()) (quote ()) (quote ()) (quote ()) (quotequote ()) values values (quote #t)) (g$655$11750 (quote g$655$21101) (quote (rnrs lists)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#394# #395# #396# #397# #398# #71# #72# #399# #73# #400# #401# #402# #403# #404# #405# #406# #74# #75# #407# #76#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21102) (quote (rnrs io simple)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #291# #54# #292# #55# #56# #57# #58# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #375#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21103) (quote (rnrs bytevectors)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#346# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #688#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21104) (quote (rnrs unicode)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#217# #218# #219# #220# #221# #222# #223# #224# #22# #23# #24# #25# #26# #27# #28# #225# #29# #30# #226# #31# #227# #228# #32# #33# #34# #35# #36# #37# #38#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21105) (quote (rnrs exceptions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#415# #416# #417# #418# #684# #685#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21106) (quote (rnrs arithmetic bitwise)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21107) (quote (rnrs arithmetic fixnums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21108) (quote (rnrs arithmetic flonums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21109) (quote (rnrs hashtables)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#270# #271# #272# #273# #274# #275# #276# #277# #278# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21110) (quote (rnrs io ports)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#291# #54# #292# #55# #56# #57# #58# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #307# #308# #309# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #408# #409# #410# #411# #412# #413# #414#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21111) (quote (rnrs enums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21112) (quote (rnrs conditions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21113) (quote (rnrs records inspection)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#243# #244# #245# #246# #247# #248# #249# #250# #251# #252#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21114) (quote (rnrs records procedural)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#236# #237# #238# #239# #240# #241# #242#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21115) (quote (rnrs records syntactic)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264#)) (quote ()) values values (quote #t)) (g$655$11750 (quote g$655$21116) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$655$12845) (syntax-dispatch . g$655$12716) #700=(pretty-print . g$655$21084) #701=(eval-core . g$655$21083) #702=(set-symbol-value! . g$655$21082) #703=(symbol-value . g$655$21081) #704=(gensym . g$655$21080) #705=(void . g$655$21079) (load . g$655$21078) (interaction-environment . g$655$21077) (char-ready? . g$655$21076) #217# #218# #219# #220# #221# #222# #223# #224# #22# #23# #24# #25# #26# #27# #28# #225# #29# #30# #226# #31# #227# #228# #32# #33# #34# #35# #36# #37# #38# #229# #230# #231# #232# #233# #234# #235# #236# #237# #238# #239# #240# #241# #242# #243# #244# #245# #246# #247# #248# #249# #250# #251# #252# #253# #254# #255# #256# #257# #258# #259# #260# #261# #262# #263# #264# #265# #266# #267# #268# #269# #270# #271# #272# #273# #274# #275# #276# #277# #278# #279# #280# #281# #282# #283# #284# #285# #286# #287# #288# #289# #290# #39# #40# #41# #42# #43# #44# #45# #46# #47# #48# #49# #50# #51# #52# #53# #291# #54# #292# #55# #56# #57# #58# #293# #294# #295# #296# #297# #298# #299# #300# #301# #302# #303# #304# #305# #306# #307# #308# #309# #310# #311# #312# #313# #314# #315# #316# #317# #318# #319# #320# #321# #322# #323# #324# #325# #326# #327# #328# #329# #330# #331# #332# #333# #334# #335# #336# #337# #338# #339# #340# #341# #342# #343# #344# #345# #346# #347# #348# #349# #350# #351# #352# #353# #354# #355# #356# #357# #358# #359# #360# #361# #362# #363# #364# #365# #366# #367# #368# #369# #370# #371# #372# #373# #374# #375# #376# #377# #378# #379# #380# #381# #382# #383# #384# #385# #386# #387# #388# #389# #390# #391# #59# #60# #61# #62# #63# #64# #65# #66# #392# #393# #67# #68# #69# #70# #394# #395# #396# #397# #398# #71# #72# #399# #73# #400# #401# #402# #403# #404# #405# #406# #74# #75# #407# #76# #408# #409# #410# #411# #412# #413# #414# #415# #416# #417# #418# #77# #699# #419# #420# #421# #422# #423# #424# #425# #426# #427# #428# #429# #430# #431# #432# #433# #434# #435# #436# #437# #438# #439# #440# #441# #442# #443# #444# #445# #446# #447# #448# #449# #450# #451# #452# #453# #454# #455# #456# #457# #458# #459# #460# #461# #462# #463# #464# #465# #466# #467# #468# #469# #470# #471# #472# #473# #474# #475# #476# #477# #478# #479# #480# #481# #482# #483# #484# #485# #486# #487# #488# #489# #490# #491# #492# #493# #494# #495# #496# #497# #498# #499# #500# #501# #502# #503# #504# #505# #506# #507# #508# #509# #510# #511# #512# #513# #514# #515# #516# #517# #518# #519# #520# #521# #522# #523# #524# #525# #526# #527# #528# #529# #530# #531# #532# #533# #534# #535# #536# #537# #538# #539# #540# #541# #542# #543# #544# #545# #546# #547# #548# #549# #550# #551# #552# #553# #554# #555# #556# #557# #558# #559# #560# #561# #562# #563# #564# #565# #566# #567# #568# #569# #570# #571# #572# #573# #574# #575# #576# #577# #578# #579# #580# #581# #582# #583# #584# #585# #586# #587# #588# #589# #590# #591# #592# #593# #594# #595# #596# #597# #598# #599# #600# #601# #602# #603# #604# #605# #606# #607# #608# #609# #610# #611# #612# #613# #614# #615# #616# #617# #618# #619# #620# #621# #622# #623# #624# #625# #626# #627# #628# #629# #630# #631# #632# #633# #634# #635# #636# #637# #638# #639# #640# #641# #642# #643# #644# #645# #646# #647# #648# #649# #650# #651# #652# #653# #654# #655# #78# #79# #80# #81# #656# #82# #657# #83# #84# #85# #86# #87# #88# #89# #658# #90# #91# #92# #93# #94# #95# #96# #97# #98# #99# #659# #100# #101# #102# #103# #104# #105# #106# #107# #108# #109# #110# #660# #111# #112# #113# #661# #114# #115# #116# #117# #118# #119# #120# #662# #121# #122# #663# #123# #124# #125# #126# #127# #128# #129# #130# #131# #132# #133# #134# #135# #136# #137# #138# #139# #140# #664# #141# #665# #142# #666# #143# #144# #145# #146# #667# #147# #148# #149# #668# #669# #150# #670# #151# #152# #153# #154# #671# #672# #673# #674# #675# #676# #155# #156# #157# #158# #159# #160# #161# #162# #163# #164# #165# #166# #167# #677# #168# #169# #170# #171# #172# #173# #174# #175# #176# #177# #178# #179# #180# #181# #182# #183# #184# #185# #186# #187# #188# #189# #190# #191# #192# #193# #194# #195# #196# #197# #198# #199# #678# #200# #679# #201# #202# #203# #204# #205# #206# #207# #208# #209# #210# #211# #212# #213# #214# #215# #680# (trace-define . g$655$20426) (trace-lambda . g$655$20425) #681# #682# #0# #1# #683# #684# #685# #686# #687# #688# #2# (time . g$655$20413) #3# #4# #5# #6# #7# #8# #689# #690# #691# #9# #10# (include . g$655$20401) (define-record . g$655$20400) #692# #11# (parameterize . g$655$20397) #693# #694# #12# #695# #13# (type-descriptor . g$655$20391) #696# #14# #697# #698# #15# (foreign-call . g$655$20385) #16# #17# #18# (import . g$655$20381) #19# #216# #20# #21#)) (quote ((g$655$12845 core-prim . syntax-error) (g$655$12716 core-prim . syntax-dispatch) (g$655$21084 core-prim . pretty-print) (g$655$21083 core-prim . eval-core) (g$655$21082 core-prim . set-symbol-value!) (g$655$21081 core-prim . symbol-value) (g$655$21080 core-prim . gensym) (g$655$21079 core-prim . void) (g$655$21078 core-prim . load) (g$655$21077 core-prim . interaction-environment) (g$655$21076 core-prim . char-ready?) (g$655$21075 core-prim . string-upcase) (g$655$21074 core-prim . string-titlecase) (g$655$21073 core-prim . string-normalize-nfkd) (g$655$21072 core-prim . string-normalize-nfkc) (g$655$21071 core-prim . string-normalize-nfd) (g$655$21070 core-prim . string-normalize-nfc) (g$655$21069 core-prim . string-foldcase) (g$655$21068 core-prim . string-downcase) (g$655$21067 core-prim . string-ci>?) (g$655$21066 core-prim . string-ci>=?) (g$655$21065 core-prim . string-ci=?) (g$655$21064 core-prim . string-ci<?) (g$655$21063 core-prim . string-ci<=?) (g$655$21062 core-prim . char-whitespace?) (g$655$21061 core-prim . char-upper-case?) (g$655$21060 core-prim . char-title-case?) (g$655$21059 core-prim . char-numeric?) (g$655$21058 core-prim . char-lower-case?) (g$655$21057 core-prim . char-general-category) (g$655$21056 core-prim . char-upcase) (g$655$21055 core-prim . char-titlecase) (g$655$21054 core-prim . char-foldcase) (g$655$21053 core-prim . char-downcase) (g$655$21052 core-prim . char-ci>?) (g$655$21051 core-prim . char-ci>=?) (g$655$21050 core-prim . char-ci=?) (g$655$21049 core-prim . char-ci<?) (g$655$21048 core-prim . char-ci<=?) (g$655$21047 core-prim . char-alphabetic?) (g$655$12270 core-prim . make-variable-transformer) (g$655$12847 core-prim . identifier?) (g$655$12839 core-prim . generate-temporaries) (g$655$12841 core-prim . free-identifier=?) (g$655$12851 core-prim . syntax->datum) (g$655$12849 core-prim . datum->syntax) (g$655$12843 core-prim . bound-identifier=?) (g$655$21046 core-prim . record-type-descriptor?) (g$655$21045 core-prim . record-predicate) (g$655$21044 core-prim . record-mutator) (g$655$21043 core-prim . record-constructor) (g$655$21042 core-prim . record-accessor) (g$655$21041 core-prim . make-record-type-descriptor) (g$655$21040 core-prim . make-record-constructor-descriptor) (g$655$21039 core-prim . record?) (g$655$21038 core-prim . record-type-uid) (g$655$21037 core-prim . record-type-sealed?) (g$655$21036 core-prim . record-type-parent) (g$655$21035 core-prim . record-type-opaque?) (g$655$21034 core-prim . record-type-name) (g$655$21033 core-prim . record-type-generative?) (g$655$21032 core-prim . record-type-field-names) (g$655$21031 core-prim . record-rtd) (g$655$21030 core-prim . record-field-mutable?) (g$655$21029 core-prim . nongenerative) (g$655$21028 core-prim . sealed) (g$655$21027 core-prim . record-type-descriptor) (g$655$21026 core-prim . record-constructor-descriptor) (g$655$21025 core-prim . protocol) (g$655$21024 core-prim . parent-rtd) (g$655$21023 core-prim . parent) (g$655$21022 core-prim . opaque) (g$655$21021 core-prim . mutable) (g$655$21020 core-prim . immutable) (g$655$21019 core-prim . fields) (g$655$21018 core-prim . define-record-type) (g$655$21017 core-prim . delete-file) (g$655$21016 core-prim . file-exists?) (g$655$21015 core-prim . vector-sort!) (g$655$21014 core-prim . vector-sort) (g$655$21013 core-prim . list-sort) (g$655$21012 core-prim . symbol-hash) (g$655$21011 core-prim . string-ci-hash) (g$655$21010 core-prim . string-hash) (g$655$21009 core-prim . equal-hash) (g$655$21008 core-prim . hashtable-equivalence-function) (g$655$21007 core-prim . make-hashtable) (g$655$21006 core-prim . hashtable-hash-function) (g$655$21005 core-prim . make-eqv-hashtable) (g$655$21004 core-prim . make-eq-hashtable) (g$655$21003 core-prim . hashtable?) (g$655$21002 core-prim . hashtable-update!) (g$655$21001 core-prim . hashtable-size) (g$655$21000 core-prim . hashtable-set!) (g$655$20999 core-prim . hashtable-ref) (g$655$20998 core-prim . hashtable-mutable?) (g$655$20997 core-prim . hashtable-keys) (g$655$20996 core-prim . hashtable-entries) (g$655$20995 core-prim . hashtable-delete!) (g$655$20994 core-prim . hashtable-copy) (g$655$20993 core-prim . hashtable-contains?) (g$655$20992 core-prim . hashtable-clear!) (g$655$20991 core-prim . call-with-output-file) (g$655$20990 core-prim . call-with-input-file) (g$655$20989 core-prim . write-char) (g$655$20988 core-prim . write) (g$655$20987 core-prim . with-output-to-file) (g$655$20986 core-prim . with-input-from-file) (g$655$20985 core-prim . read-char) (g$655$20984 core-prim . read) (g$655$20983 core-prim . peek-char) (g$655$20982 core-prim . open-output-file) (g$655$20981 core-prim . open-input-file) (g$655$20980 core-prim . newline) (g$655$20979 core-prim . display) (g$655$20978 core-prim . close-output-port) (g$655$20977 core-prim . close-input-port) (g$655$20976 core-prim . eof-object?) (g$655$20975 core-prim . eof-object) (g$655$20974 core-prim . current-error-port) (g$655$20973 core-prim . current-output-port) (g$655$20972 core-prim . current-input-port) (g$655$20971 core-prim . output-port?) (g$655$20970 core-prim . input-port?) (g$655$20969 core-prim . utf-8-codec) (g$655$20968 core-prim . utf-16-codec) (g$655$20967 core-prim . transcoder-error-handling-mode) (g$655$20966 core-prim . transcoder-eol-style) (g$655$20965 core-prim . transcoder-codec) (g$655$20964 core-prim . transcoded-port) (g$655$20963 core-prim . textual-port?) (g$655$20962 core-prim . string->bytevector) (g$655$20961 core-prim . standard-output-port) (g$655$20960 core-prim . standard-input-port) (g$655$20959 core-prim . standard-error-port) (g$655$20958 core-prim . set-port-position!) (g$655$20957 core-prim . put-u8) (g$655$20956 core-prim . put-string) (g$655$20955 core-prim . put-datum) (g$655$20954 core-prim . put-char) (g$655$20953 core-prim . put-bytevector) (g$655$20952 core-prim . port?) (g$655$20951 core-prim . port-transcoder) (g$655$20950 core-prim . port-position) (g$655$20949 core-prim . port-has-set-port-position!?) (g$655$20948 core-prim . port-has-port-position?) (g$655$20947 core-prim . port-eof?) (g$655$20946 core-prim . output-port-buffer-mode) (g$655$20945 core-prim . open-string-output-port) (g$655$20944 core-prim . open-string-input-port) (g$655$20943 core-prim . open-file-output-port) (g$655$20942 core-prim . open-file-input/output-port) (g$655$20941 core-prim . open-file-input-port) (g$655$20940 core-prim . open-bytevector-output-port) (g$655$20939 core-prim . open-bytevector-input-port) (g$655$20938 core-prim . native-transcoder) (g$655$20937 core-prim . native-eol-style) (g$655$20936 core-prim . make-transcoder) (g$655$20935 core-prim . latin-1-codec) (g$655$20934 core-prim . make-i/o-write-error) (g$655$20933 core-prim . make-i/o-read-error) (g$655$20932 core-prim . make-i/o-port-error) (g$655$20931 core-prim . make-i/o-invalid-position-error) (g$655$20930 core-prim . make-i/o-filename-error) (g$655$20929 core-prim . make-i/o-file-protection-error) (g$655$20928 core-prim . make-i/o-file-is-read-only-error) (g$655$20927 core-prim . make-i/o-file-does-not-exist-error) (g$655$20926 core-prim . make-i/o-file-already-exists-error) (g$655$20925 core-prim . make-i/o-error) (g$655$20924 core-prim . make-i/o-encoding-error) (g$655$20923 core-prim . make-i/o-decoding-error) (g$655$20922 core-prim . make-custom-textual-output-port) (g$655$20921 core-prim . make-custom-textual-input/output-port) (g$655$20920 core-prim . make-custom-textual-input-port) (g$655$20919 core-prim . make-custom-binary-output-port) (g$655$20918 core-prim . make-custom-binary-input/output-port) (g$655$20917 core-prim . make-custom-binary-input-port) (g$655$20916 core-prim . make-bytevector) (g$655$20915 core-prim . lookahead-u8) (g$655$20914 core-prim . lookahead-char) (g$655$20913 core-prim . i/o-write-error?) (g$655$20912 core-prim . &i/o-write) (g$655$20911 core-prim . i/o-read-error?) (g$655$20910 core-prim . &i/o-read) (g$655$20909 core-prim . i/o-port-error?) (g$655$20908 core-prim . &i/o-port) (g$655$20907 core-prim . i/o-invalid-position-error?) (g$655$20906 core-prim . &i/o-invalid-position) (g$655$20905 core-prim . i/o-filename-error?) (g$655$20904 core-prim . &i/o-filename) (g$655$20903 core-prim . i/o-file-protection-error?) (g$655$20902 core-prim . &i/o-file-protection) (g$655$20901 core-prim . i/o-file-is-read-only-error?) (g$655$20900 core-prim . &i/o-file-is-read-only) (g$655$20899 core-prim . i/o-file-does-not-exist-error?) (g$655$20898 core-prim . &i/o-file-does-not-exist) (g$655$20897 core-prim . i/o-file-already-exists-error?) (g$655$20896 core-prim . &i/o-file-already-exists) (g$655$20895 core-prim . i/o-error?) (g$655$20894 core-prim . i/o-error-port) (g$655$20893 core-prim . i/o-error-filename) (g$655$20892 core-prim . i/o-encoding-error?) (g$655$20891 core-prim . i/o-encoding-error-char) (g$655$20890 core-prim . &i/o-encoding) (g$655$20889 core-prim . i/o-decoding-error?) (g$655$20888 core-prim . &i/o-decoding) (g$655$20887 core-prim . &i/o) (g$655$20886 core-prim . get-u8) (g$655$20885 core-prim . get-string-n!) (g$655$20884 core-prim . get-string-n) (g$655$20883 core-prim . get-string-all) (g$655$20882 core-prim . get-line) (g$655$20881 core-prim . get-datum) (g$655$20880 core-prim . get-char) (g$655$20879 core-prim . get-bytevector-some) (g$655$20878 core-prim . get-bytevector-n!) (g$655$20877 core-prim . get-bytevector-n) (g$655$20876 core-prim . get-bytevector-all) (g$655$20875 core-prim . flush-output-port) (g$655$20874 core-prim . file-options) (g$655$20873 core-prim . error-handling-mode) (g$655$20872 core-prim . eol-style) (g$655$20871 core-prim . close-port) (g$655$20870 core-prim . scheme-report-environment) (g$655$20869 core-prim . quotient) (g$655$12819 core-prim . null-environment) (g$655$20868 core-prim . remainder) (g$655$20867 core-prim . modulo) (g$655$20866 core-prim . inexact->exact) (g$655$20865 core-prim . force) (g$655$20864 core-prim . exact->inexact) (g$655$20863 core-prim . exit) (g$655$20862 core-prim . command-line) (g$655$20861 core-prim . string-fill!) (g$655$20860 core-prim . string-set!) (g$655$20859 core-prim . set-cdr!) (g$655$20858 core-prim . set-car!) (g$655$20857 core-prim . remove) (g$655$20856 core-prim . remv) (g$655$20855 core-prim . remp) (g$655$20854 core-prim . remq) (g$655$20853 core-prim . partition) (g$655$20852 core-prim . memv) (g$655$20851 core-prim . memq) (g$655$20850 core-prim . memp) (g$655$20849 core-prim . member) (g$655$20848 core-prim . exists) (g$655$20847 core-prim . for-all) (g$655$20846 core-prim . fold-right) (g$655$20845 core-prim . fold-left) (g$655$20844 core-prim . find) (g$655$20843 core-prim . filter) (g$655$20842 core-prim . cons*) (g$655$20841 core-prim . assv) (g$655$20840 core-prim . assq) (g$655$20839 core-prim . assp) (g$655$20838 core-prim . assoc) (g$655$20837 core-prim . call-with-string-output-port) (g$655$20836 core-prim . call-with-port) (g$655$20835 core-prim . call-with-bytevector-output-port) (g$655$20834 core-prim . bytevector->string) (g$655$20833 core-prim . buffer-mode?) (g$655$20832 core-prim . buffer-mode) (g$655$20831 core-prim . binary-port?) (g$655$20830 core-prim . guard) (g$655$20829 core-prim . with-exception-handler) (g$655$20828 core-prim . raise-continuable) (g$655$20827 core-prim . raise) (g$655$12825 core-prim . eval) (g$655$12817 core-prim . environment) (g$655$20826 core-prim . make-enumeration) (g$655$20825 core-prim . enum-set=?) (g$655$20824 core-prim . enum-set-universe) (g$655$20823 core-prim . enum-set-union) (g$655$20822 core-prim . enum-set-subset?) (g$655$20821 core-prim . enum-set-projection) (g$655$20820 core-prim . enum-set-member?) (g$655$20819 core-prim . enum-set-intersection) (g$655$20818 core-prim . enum-set-indexer) (g$655$20817 core-prim . enum-set-difference) (g$655$20816 core-prim . enum-set-constructor) (g$655$20815 core-prim . enum-set-complement) (g$655$20814 core-prim . enum-set->list) (g$655$20813 core-prim . define-enumeration) (g$655$20812 core-prim . who-condition?) (g$655$20811 core-prim . &who) (g$655$20810 core-prim . warning?) (g$655$20809 core-prim . &warning) (g$655$20808 core-prim . violation?) (g$655$20807 core-prim . &violation) (g$655$20806 core-prim . undefined-violation?) (g$655$20805 core-prim . &undefined) (g$655$20804 core-prim . syntax-violation?) (g$655$20803 core-prim . syntax-violation-subform) (g$655$20802 core-prim . syntax-violation-form) (g$655$20801 core-prim . syntax-violation) (g$655$20800 core-prim . &syntax) (g$655$20799 core-prim . simple-conditions) (g$655$20798 core-prim . serious-condition?) (g$655$20797 core-prim . &serious) (g$655$20796 core-prim . non-continuable-violation?) (g$655$20795 core-prim . &non-continuable) (g$655$20794 core-prim . message-condition?) (g$655$20793 core-prim . &message) (g$655$20792 core-prim . make-who-condition) (g$655$20791 core-prim . make-warning) (g$655$20790 core-prim . make-violation) (g$655$20789 core-prim . make-undefined-violation) (g$655$20788 core-prim . make-syntax-violation) (g$655$20787 core-prim . make-serious-condition) (g$655$20786 core-prim . make-non-continuable-violation) (g$655$20785 core-prim . make-message-condition) (g$655$20784 core-prim . make-lexical-violation) (g$655$20783 core-prim . make-irritants-condition) (g$655$20782 core-prim . make-implementation-restriction-violation) (g$655$20781 core-prim . make-error) (g$655$20780 core-prim . make-assertion-violation) (g$655$20779 core-prim . lexical-violation?) (g$655$20778 core-prim . &lexical) (g$655$20777 core-prim . irritants-condition?) (g$655$20776 core-prim . &irritants) (g$655$20775 core-prim . implementation-restriction-violation?) (g$655$20774 core-prim . &implementation-restriction) (g$655$20773 core-prim . error?) (g$655$20772 core-prim . &error) (g$655$20771 core-prim . define-condition-type) (g$655$20770 core-prim . condition-who) (g$655$20769 core-prim . condition-predicate) (g$655$20768 core-prim . condition-message) (g$655$20767 core-prim . condition-irritants) (g$655$20766 core-prim . condition-accessor) (g$655$20765 core-prim . condition) (g$655$20764 core-prim . &condition) (g$655$20763 core-prim . assertion-violation?) (g$655$20762 core-prim . &assertion) (g$655$20761 core-prim . condition?) (g$655$20760 core-prim . utf32->string) (g$655$20759 core-prim . utf16->string) (g$655$20758 core-prim . utf8->string) (g$655$20757 core-prim . uint-list->bytevector) (g$655$20756 core-prim . u8-list->bytevector) (g$655$20755 core-prim . string->utf8) (g$655$20754 core-prim . string->utf32) (g$655$20753 core-prim . string->utf16) (g$655$20752 core-prim . sint-list->bytevector) (g$655$20751 core-prim . native-endianness) (g$655$20750 core-prim . bytevector?) (g$655$20749 core-prim . bytevector=?) (g$655$20748 core-prim . bytevector-uint-set!) (g$655$20747 core-prim . bytevector-uint-ref) (g$655$20746 core-prim . bytevector-u8-set!) (g$655$20745 core-prim . bytevector-u8-ref) (g$655$20744 core-prim . bytevector-u64-set!) (g$655$20743 core-prim . bytevector-u64-ref) (g$655$20742 core-prim . bytevector-u64-native-set!) (g$655$20741 core-prim . bytevector-u64-native-ref) (g$655$20740 core-prim . bytevector-u32-set!) (g$655$20739 core-prim . bytevector-u32-ref) (g$655$20738 core-prim . bytevector-u32-native-set!) (g$655$20737 core-prim . bytevector-u32-native-ref) (g$655$20736 core-prim . bytevector-u16-set!) (g$655$20735 core-prim . bytevector-u16-ref) (g$655$20734 core-prim . bytevector-u16-native-set!) (g$655$20733 core-prim . bytevector-u16-native-ref) (g$655$20732 core-prim . bytevector-sint-set!) (g$655$20731 core-prim . bytevector-sint-ref) (g$655$20730 core-prim . bytevector-s8-set!) (g$655$20729 core-prim . bytevector-s8-ref) (g$655$20728 core-prim . bytevector-s64-set!) (g$655$20727 core-prim . bytevector-s64-ref) (g$655$20726 core-prim . bytevector-s64-native-set!) (g$655$20725 core-prim . bytevector-s64-native-ref) (g$655$20724 core-prim . bytevector-s32-set!) (g$655$20723 core-prim . bytevector-s32-ref) (g$655$20722 core-prim . bytevector-s32-native-set!) (g$655$20721 core-prim . bytevector-s32-native-ref) (g$655$20720 core-prim . bytevector-s16-set!) (g$655$20719 core-prim . bytevector-s16-ref) (g$655$20718 core-prim . bytevector-s16-native-set!) (g$655$20717 core-prim . bytevector-s16-native-ref) (g$655$20716 core-prim . bytevector-length) (g$655$20715 core-prim . bytevector-ieee-single-ref) (g$655$20714 core-prim . bytevector-ieee-single-native-set!) (g$655$20713 core-prim . bytevector-ieee-single-native-ref) (g$655$20712 core-prim . bytevector-ieee-double-ref) (g$655$20711 core-prim . bytevector-ieee-double-native-set!) (g$655$20710 core-prim . bytevector-ieee-double-native-ref) (g$655$20709 core-prim . bytevector-fill!) (g$655$20708 core-prim . bytevector-copy!) (g$655$20707 core-prim . bytevector-copy) (g$655$20706 core-prim . bytevector->uint-list) (g$655$20705 core-prim . bytevector->u8-list) (g$655$20704 core-prim . bytevector->sint-list) (g$655$20703 core-prim . no-nans-violation?) (g$655$20702 core-prim . &no-nans) (g$655$20701 core-prim . no-infinities-violation?) (g$655$20700 core-prim . &no-infinities) (g$655$20699 core-prim . make-no-nans-violation) (g$655$20698 core-prim . make-no-infinities-violation) (g$655$20697 core-prim . real->flonum) (g$655$20696 core-prim . flzero?) (g$655$20695 core-prim . fltruncate) (g$655$20694 core-prim . fltan) (g$655$20693 core-prim . flsqrt) (g$655$20692 core-prim . flsin) (g$655$20691 core-prim . flround) (g$655$20690 core-prim . flpositive?) (g$655$20689 core-prim . flonum?) (g$655$20688 core-prim . flodd?) (g$655$20687 core-prim . flnumerator) (g$655$20686 core-prim . flnegative?) (g$655$20685 core-prim . flnan?) (g$655$20684 core-prim . flmod0) (g$655$20683 core-prim . flmod) (g$655$20682 core-prim . flmin) (g$655$20681 core-prim . flmax) (g$655$20680 core-prim . fllog) (g$655$20679 core-prim . flinteger?) (g$655$20678 core-prim . flinfinite?) (g$655$20677 core-prim . flfloor) (g$655$20676 core-prim . flfinite?) (g$655$20675 core-prim . flexpt) (g$655$20674 core-prim . flexp) (g$655$20673 core-prim . fleven?) (g$655$20672 core-prim . fldiv0-and-mod0) (g$655$20671 core-prim . fldiv0) (g$655$20670 core-prim . fldiv-and-mod) (g$655$20669 core-prim . fldiv) (g$655$20668 core-prim . fldenominator) (g$655$20667 core-prim . flcos) (g$655$20666 core-prim . flceiling) (g$655$20665 core-prim . flatan) (g$655$20664 core-prim . flasin) (g$655$20663 core-prim . flacos) (g$655$20662 core-prim . flabs) (g$655$20661 core-prim . fl>?) (g$655$20660 core-prim . fl>=?) (g$655$20659 core-prim . fl=?) (g$655$20658 core-prim . fl<?) (g$655$20657 core-prim . fl<=?) (g$655$20656 core-prim . fl/) (g$655$20655 core-prim . fl-) (g$655$20654 core-prim . fl+) (g$655$20653 core-prim . fl*) (g$655$20652 core-prim . fixnum->flonum) (g$655$20651 core-prim . fxzero?) (g$655$20650 core-prim . fxxor) (g$655$20649 core-prim . fxrotate-bit-field) (g$655$20648 core-prim . fxreverse-bit-field) (g$655$20647 core-prim . fxpositive?) (g$655$20646 core-prim . fxodd?) (g$655$20645 core-prim . fxnot) (g$655$20644 core-prim . fxnegative?) (g$655$20643 core-prim . fxmod0) (g$655$20642 core-prim . fxmod) (g$655$20641 core-prim . fxmin) (g$655$20640 core-prim . fxmax) (g$655$20639 core-prim . fxlength) (g$655$20638 core-prim . fxior) (g$655$20637 core-prim . fxif) (g$655$20636 core-prim . fxfirst-bit-set) (g$655$20635 core-prim . fxeven?) (g$655$20634 core-prim . fxdiv0-and-mod0) (g$655$20633 core-prim . fxdiv0) (g$655$20632 core-prim . fxdiv-and-mod) (g$655$20631 core-prim . fxdiv) (g$655$20630 core-prim . fxcopy-bit-field) (g$655$20629 core-prim . fxcopy-bit) (g$655$20628 core-prim . fxbit-set?) (g$655$20627 core-prim . fxbit-field) (g$655$20626 core-prim . fxbit-count) (g$655$20625 core-prim . fxarithmetic-shift-right) (g$655$20624 core-prim . fxarithmetic-shift-left) (g$655$20623 core-prim . fxarithmetic-shift) (g$655$20622 core-prim . fxand) (g$655$20621 core-prim . fx>?) (g$655$20620 core-prim . fx>=?) (g$655$20619 core-prim . fx=?) (g$655$20618 core-prim . fx<?) (g$655$20617 core-prim . fx<=?) (g$655$20616 core-prim . fx-/carry) (g$655$20615 core-prim . fx-) (g$655$20614 core-prim . fx+/carry) (g$655$20613 core-prim . fx+) (g$655$20612 core-prim . fx*/carry) (g$655$20611 core-prim . fx*) (g$655$20610 core-prim . greatest-fixnum) (g$655$20609 core-prim . least-fixnum) (g$655$20608 core-prim . fixnum-width) (g$655$20607 core-prim . fixnum?) (g$655$20606 core-prim . bitwise-rotate-bit-field) (g$655$20605 core-prim . bitwise-reverse-bit-field) (g$655$20604 core-prim . bitwise-length) (g$655$20603 core-prim . bitwise-if) (g$655$20602 core-prim . bitwise-first-bit-set) (g$655$20601 core-prim . bitwise-copy-bit-field) (g$655$20600 core-prim . bitwise-copy-bit) (g$655$20599 core-prim . bitwise-bit-set?) (g$655$20598 core-prim . bitwise-bit-field) (g$655$20597 core-prim . bitwise-bit-count) (g$655$20596 core-prim . bitwise-xor) (g$655$20595 core-prim . bitwise-ior) (g$655$20594 core-prim . bitwise-and) (g$655$20593 core-prim . bitwise-not) (g$655$20592 core-prim . bitwise-arithmetic-shift-right) (g$655$20591 core-prim . bitwise-arithmetic-shift-left) (g$655$20590 core-prim . bitwise-arithmetic-shift) (g$655$20589 core-prim . zero?) (g$655$20588 core-prim . vector?) (g$655$20587 core-prim . vector-set!) (g$655$20586 core-prim . vector-ref) (g$655$20585 core-prim . vector-map) (g$655$20584 core-prim . vector-length) (g$655$20583 core-prim . vector-for-each) (g$655$20582 core-prim . vector-fill!) (g$655$20581 core-prim . vector->list) (g$655$20580 core-prim . vector) (g$655$20579 core-prim . values) (g$655$20578 core-prim . truncate) (g$655$20577 core-prim . tan) (g$655$20576 core-prim . symbol?) (g$655$20575 core-prim . symbol=?) (g$655$20574 core-prim . symbol->string) (g$655$20573 core-prim . substring) (g$655$20572 core-prim . string?) (g$655$20571 core-prim . string>?) (g$655$20570 core-prim . string>=?) (g$655$20569 core-prim . string=?) (g$655$20568 core-prim . string<?) (g$655$20567 core-prim . string<=?) (g$655$20566 core-prim . string-ref) (g$655$20565 core-prim . string-length) (g$655$20564 core-prim . string-for-each) (g$655$20563 core-prim . string-copy) (g$655$20562 core-prim . string-append) (g$655$20561 core-prim . string->symbol) (g$655$20560 core-prim . string->number) (g$655$20559 core-prim . string->list) (g$655$20558 core-prim . string) (g$655$20557 core-prim . sqrt) (g$655$20556 core-prim . sin) (g$655$20555 core-prim . round) (g$655$20554 core-prim . reverse) (g$655$20553 core-prim . real?) (g$655$20552 core-prim . real-valued?) (g$655$20551 core-prim . real-part) (g$655$20550 core-prim . rationalize) (g$655$20549 core-prim . rational?) (g$655$20548 core-prim . rational-valued?) (g$655$20547 core-prim . procedure?) (g$655$20546 core-prim . positive?) (g$655$20545 core-prim . pair?) (g$655$20544 core-prim . odd?) (g$655$20543 core-prim . numerator) (g$655$20542 core-prim . number?) (g$655$20541 core-prim . number->string) (g$655$20540 core-prim . null?) (g$655$20539 core-prim . not) (g$655$20538 core-prim . negative?) (g$655$20537 core-prim . nan?) (g$655$20536 core-prim . min) (g$655$20535 core-prim . max) (g$655$20534 core-prim . map) (g$655$20533 core-prim . make-vector) (g$655$20532 core-prim . make-string) (g$655$20531 core-prim . make-rectangular) (g$655$20530 core-prim . make-polar) (g$655$20529 core-prim . magnitude) (g$655$20528 core-prim . log) (g$655$20527 core-prim . list?) (g$655$20526 core-prim . list-tail) (g$655$20525 core-prim . list-ref) (g$655$20524 core-prim . list->vector) (g$655$20523 core-prim . list->string) (g$655$20522 core-prim . list) (g$655$20521 core-prim . length) (g$655$20520 core-prim . lcm) (g$655$20519 core-prim . integer?) (g$655$20518 core-prim . integer-valued?) (g$655$20517 core-prim . integer->char) (g$655$20516 core-prim . infinite?) (g$655$20515 core-prim . inexact?) (g$655$20514 core-prim . inexact) (g$655$20513 core-prim . imag-part) (g$655$20512 core-prim . gcd) (g$655$20511 core-prim . for-each) (g$655$20510 core-prim . floor) (g$655$20509 core-prim . finite?) (g$655$20508 core-prim . expt) (g$655$20507 core-prim . exp) (g$655$20506 core-prim . exact?) (g$655$20505 core-prim . exact-integer-sqrt) (g$655$20504 core-prim . exact) (g$655$20503 core-prim . even?) (g$655$20502 core-prim . error) (g$655$20501 core-prim . eqv?) (g$655$20500 core-prim . equal?) (g$655$20499 core-prim . eq?) (g$655$20498 core-prim . dynamic-wind) (g$655$20497 core-prim . div0-and-mod0) (g$655$20496 core-prim . mod0) (g$655$20495 core-prim . div0) (g$655$20494 core-prim . div-and-mod) (g$655$20493 core-prim . mod) (g$655$20492 core-prim . div) (g$655$20491 core-prim . denominator) (g$655$20490 core-prim . cos) (g$655$20489 core-prim . cons) (g$655$20488 core-prim . complex?) (g$655$20487 core-prim . char?) (g$655$20486 core-prim . char>?) (g$655$20485 core-prim . char>=?) (g$655$20484 core-prim . char=?) (g$655$20483 core-prim . char<?) (g$655$20482 core-prim . char<=?) (g$655$20481 core-prim . char->integer) (g$655$20480 core-prim . ceiling) (g$655$20479 core-prim . call-with-values) (g$655$20478 core-prim . call/cc) (g$655$20477 core-prim . call-with-current-continuation) (g$655$20476 core-prim . cddddr) (g$655$20475 core-prim . cdddar) (g$655$20474 core-prim . cddadr) (g$655$20473 core-prim . cddaar) (g$655$20472 core-prim . cdaddr) (g$655$20471 core-prim . cdadar) (g$655$20470 core-prim . cdaadr) (g$655$20469 core-prim . cdaaar) (g$655$20468 core-prim . cadddr) (g$655$20467 core-prim . caddar) (g$655$20466 core-prim . cadadr) (g$655$20465 core-prim . cadaar) (g$655$20464 core-prim . caaddr) (g$655$20463 core-prim . caadar) (g$655$20462 core-prim . caaadr) (g$655$20461 core-prim . caaaar) (g$655$20460 core-prim . cdddr) (g$655$20459 core-prim . cddar) (g$655$20458 core-prim . cdadr) (g$655$20457 core-prim . cdaar) (g$655$20456 core-prim . caddr) (g$655$20455 core-prim . cadar) (g$655$20454 core-prim . caadr) (g$655$20453 core-prim . caaar) (g$655$20452 core-prim . cddr) (g$655$20451 core-prim . cdar) (g$655$20450 core-prim . cadr) (g$655$20449 core-prim . caar) (g$655$20448 core-prim . cdr) (g$655$20447 core-prim . car) (g$655$20446 core-prim . boolean?) (g$655$20445 core-prim . boolean=?) (g$655$20444 core-prim . atan) (g$655$20443 core-prim . assertion-violation) (g$655$20442 core-prim . asin) (g$655$20441 core-prim . apply) (g$655$20440 core-prim . append) (g$655$20439 core-prim . angle) (g$655$20438 core-prim . acos) (g$655$20437 core-prim . abs) (g$655$20436 core-prim . /) (g$655$20435 core-prim . *) (g$655$20434 core-prim . -) (g$655$20433 core-prim . +) (g$655$20432 core-prim . >=) (g$655$20431 core-prim . >) (g$655$20430 core-prim . =) (g$655$20429 core-prim . <=) (g$655$20428 core-prim . <) (g$655$20427 core-prim . let*-values) (g$655$20426 macro . trace-define) (g$655$20425 macro . trace-lambda) (g$655$20424 macro . unsyntax-splicing) (g$655$20423 macro . unsyntax) (g$655$20422 macro . unquote-splicing) (g$655$20421 macro . unquote) (g$655$20420 macro . _) (g$655$20419 macro . else) (g$655$20418 macro . =>) (g$655$20417 macro . ...) (g$655$20416 macro . assert) (g$655$20415 macro . endianness) (g$655$20414 macro . delay) (g$655$20413 macro . time) (g$655$20412 macro . or) (g$655$20411 macro . and) (g$655$20410 macro . do) (g$655$20409 macro . cond) (g$655$20408 macro . let*) (g$655$20407 macro . let) (g$655$20406 macro . identifier-syntax) (g$655$20405 macro . with-syntax) (g$655$20404 macro . quasisyntax) (g$655$20403 macro . quasiquote) (g$655$20402 macro . syntax-rules) (g$655$20401 macro . include) (g$655$20400 macro . define-record) (g$655$20399 core-macro . let-values) (g$655$20398 core-macro . case) (g$655$20397 core-macro . parameterize) (g$655$20396 core-macro . unless) (g$655$20395 core-macro . when) (g$655$20394 core-macro . if) (g$655$20393 core-macro . letrec*) (g$655$20392 core-macro . letrec) (g$655$20391 core-macro . type-descriptor) (g$655$20390 core-macro . case-lambda) (g$655$20389 core-macro . lambda) (g$655$20388 core-macro . syntax) (g$655$20387 core-macro . syntax-case) (g$655$20386 core-macro . quote) (g$655$20385 core-macro . foreign-call) (g$655$20384 letrec-syntax) (g$655$20383 let-syntax) (g$655$20382 set!) (g$655$20381 import) (g$655$20380 begin) (g$655$20379 module) (g$655$20378 define-syntax) (g$655$20377 define))) values values (quote #f)) (g$655$11750 (quote g$655$21117) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote (#700# #701# #702# #703# #704# #705#)) (quote ()) values values (quote #f)))


(begin (define g$655$20375 (quote #f)) ((lambda (g$655$20360) (begin (set! g$655$20360 (lambda (g$655$20368) ((lambda (g$655$20370) (g$655$20177 g$655$20370)) (with-input-from-file g$655$20368 (lambda () (letrec ((g$655$20372 (lambda () ((lambda (g$655$20374) (if (eof-object? g$655$20374) (quote ()) (cons g$655$20374 (g$655$20372)))) (read))))) (g$655$20372))))))) (begin (set! g$655$20375 g$655$20360) (display (quote "r6rs psyntax ready\n")) ((lambda (g$655$20362) (begin (if (= (length g$655$20362) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (g$655$20365 g$655$20366) (g$655$20360 (car g$655$20366))) (car g$655$20362) (cdr g$655$20362)))) (command-line)) (exit (quote 0))))) (quote #f)))


