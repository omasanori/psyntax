;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$665$10133 '#f) ((lambda (g$665$10028) (begin (set! g$665$10028 (lambda g$665$10129 ((lambda (g$665$10130) (if (= g$665$10130 '1) (apply (lambda (g$665$10115) (g$665$10028 g$665$10115 (lambda (g$665$10117) g$665$10117))) g$665$10129) (if (= g$665$10130 '2) (apply (lambda (g$665$10119 g$665$10120) (begin (if (procedure? g$665$10120) (void) (error 'assert '"~s failed" '(procedure? fender))) ((lambda (g$665$10123) (lambda g$665$10127 ((lambda (g$665$10128) (if (= g$665$10128 '0) (apply (lambda () g$665$10123) g$665$10127) (if (= g$665$10128 '1) (apply (lambda (g$665$10125) (set! g$665$10123 (g$665$10120 g$665$10125))) g$665$10127) (error 'apply '"invalid arg count")))) (length g$665$10127)))) (g$665$10120 g$665$10119)))) g$665$10129) (error 'apply '"invalid arg count")))) (length g$665$10129)))) (set! g$665$10133 g$665$10028))) '#f))


(begin (define g$665$10211 '#f) (define g$665$10210 '#f) (define g$665$10209 '#f) (define g$665$10208 '#f) (define g$665$10207 '#f) (define g$665$10206 '#f) ((lambda (g$665$10135 g$665$10137 g$665$10139 g$665$10141 g$665$10143 g$665$10145) (begin (set! g$665$10135 (g$665$10133 (lambda (g$665$10147) '#f) (lambda (g$665$10149) (begin (if (procedure? g$665$10149) (void) (error 'assert '"~s failed" '(procedure? p))) g$665$10149)))) (set! g$665$10137 (lambda (g$665$10151) ((lambda (g$665$10153) (begin (set! g$665$10153 (lambda (g$665$10155) ((lambda (g$665$10157) (if g$665$10157 g$665$10157 ((lambda (g$665$10159) (if g$665$10159 g$665$10159 ((lambda (g$665$10161) (if g$665$10161 g$665$10161 ((lambda (g$665$10163) (if g$665$10163 g$665$10163 (begin '#f (number? g$665$10155)))) (boolean? g$665$10155)))) (symbol? g$665$10155)))) (char? g$665$10155)))) (null? g$665$10155)))) (not (g$665$10153 g$665$10151)))) '#f))) (set! g$665$10139 (lambda (g$665$10165) ((lambda (g$665$10167) (begin (set! g$665$10167 (lambda (g$665$10169) (if (pair? g$665$10169) ((lambda (g$665$10171) (if (memv g$665$10171 '(quote)) (if (if g$665$10165 (begin '#f (g$665$10137 (cadr g$665$10169))) '#f) ((lambda (g$665$10196) (begin (set-symbol-value! g$665$10196 (cadr g$665$10169)) g$665$10196)) (gensym)) g$665$10169) (if (memv g$665$10171 '(case-lambda)) (cons 'case-lambda (map (lambda (g$665$10194) (cons (car g$665$10194) (map g$665$10167 (cdr g$665$10194)))) (cdr g$665$10169))) (if (memv g$665$10171 '(lambda)) (cons* 'lambda (cadr g$665$10169) (map g$665$10167 (cddr g$665$10169))) (if (memv g$665$10171 '(letrec)) ((lambda (g$665$10186 g$665$10187) ((lambda (g$665$10190 g$665$10191) (cons* 'letrec (map list g$665$10190 (map g$665$10167 g$665$10191)) (map g$665$10167 g$665$10187))) (map car g$665$10186) (map cadr g$665$10186))) (cadr g$665$10169) (cddr g$665$10169)) (if (memv g$665$10171 '(letrec*)) ((lambda (g$665$10178 g$665$10179) ((lambda (g$665$10182 g$665$10183) (cons* 'letrec* (map list g$665$10182 (map g$665$10167 g$665$10183)) (map g$665$10167 g$665$10179))) (map car g$665$10178) (map cadr g$665$10178))) (cadr g$665$10169) (cddr g$665$10169)) (if (memv g$665$10171 '(begin)) (cons 'begin (map g$665$10167 (cdr g$665$10169))) (if (memv g$665$10171 '(set!)) (list 'set! (cadr g$665$10169) (g$665$10167 (caddr g$665$10169))) (if (memv g$665$10171 '(primitive)) ((lambda (g$665$10172) ((lambda (g$665$10174) (if g$665$10174 ((lambda (g$665$10176) g$665$10176) g$665$10174) g$665$10172)) ((g$665$10135) g$665$10172))) (cadr g$665$10169)) (if (memv g$665$10171 '(define)) g$665$10169 (if (list? g$665$10169) (map g$665$10167 g$665$10169) (error 'rewrite '"invalid form ~s ~s" g$665$10169 (list? g$665$10169))))))))))))) (car g$665$10169)) g$665$10169))) g$665$10167)) '#f))) (set! g$665$10141 ((lambda (g$665$10198) (not (eq? (eval-core (list 'quote g$665$10198)) (eval-core (list 'quote g$665$10198))))) (cons '1 '2))) (set! g$665$10143 (lambda (g$665$10200) ((g$665$10139 g$665$10141) g$665$10200))) (set! g$665$10145 (lambda (g$665$10202 g$665$10203) (begin (pretty-print ((g$665$10139 '#f) g$665$10202) g$665$10203) (newline g$665$10203)))) (begin (set! g$665$10206 g$665$10145) (set! g$665$10207 g$665$10143) (set! g$665$10208 g$665$10141) (set! g$665$10209 g$665$10139) (set! g$665$10210 g$665$10137) (set! g$665$10211 g$665$10135)))) '#f '#f '#f '#f '#f '#f))


(void)


(begin (define g$665$10689 '#f) (define g$665$10688 '#f) (define g$665$10687 '#f) (define g$665$10686 '#f) (define g$665$10685 '#f) (define g$665$10684 '#f) (define g$665$10683 '#f) (define g$665$10682 '#f) (define g$665$10681 '#f) (define g$665$10680 '#f) (define g$665$10679 '#f) (define g$665$10678 '#f) (define g$665$10677 '#f) (define g$665$10676 '#f) (define g$665$10675 '#f) (define g$665$10674 '#f) (define g$665$10673 '#f) (define g$665$10672 '#f) (define g$665$10671 '#f) (define g$665$10670 '#f) (define g$665$10669 '#f) (define g$665$10668 '#f) (define g$665$10667 '#f) (define g$665$10666 '#f) (define g$665$10665 '#f) (define g$665$10664 '#f) (define g$665$10663 '#f) (define g$665$10662 '#f) (define g$665$10661 '#f) (define g$665$10660 '#f) (define g$665$10659 '#f) (define g$665$10658 '#f) (define g$665$10657 '#f) (define g$665$10656 '#f) (define g$665$10655 '#f) (define g$665$10654 '#f) (define g$665$10653 '#f) (define g$665$10652 '#f) (define g$665$10651 '#f) (define g$665$10650 '#f) (define g$665$10649 '#f) (define g$665$10648 '#f) (define g$665$10647 '#f) (define g$665$10646 '#f) (define g$665$10645 '#f) (define g$665$10644 '#f) (define g$665$10643 '#f) (define g$665$10642 '#f) (define g$665$10641 '#f) ((lambda (g$665$10265 g$665$10267 g$665$10270 g$665$10272 g$665$10274 g$665$10276 g$665$10278 g$665$10280 g$665$10282 g$665$10284 g$665$10286 g$665$10288 g$665$10290 g$665$10292 g$665$10294 g$665$10296 g$665$10298 g$665$10300 g$665$10302 g$665$10304 g$665$10306 g$665$10308 g$665$10310 g$665$10312 g$665$10314 g$665$10316 g$665$10318 g$665$10320 g$665$10322 g$665$10324 g$665$10326 g$665$10328 g$665$10330 g$665$10332 g$665$10334 g$665$10336 g$665$10338 g$665$10340 g$665$10342 g$665$10344 g$665$10346 g$665$10348 g$665$10350 g$665$10352 g$665$10354 g$665$10356 g$665$10358 g$665$10360 g$665$10362) (begin (set! g$665$10265 (lambda () ((lambda (g$665$10364) ((lambda (g$665$10366) (begin (set! g$665$10366 (lambda (g$665$10368 g$665$10369) (if (memq g$665$10368 g$665$10369) g$665$10369 (cons g$665$10368 g$665$10369)))) (lambda g$665$10374 ((lambda (g$665$10375) (if (= g$665$10375 '0) (apply (lambda () g$665$10364) g$665$10374) (if (= g$665$10375 '1) (apply (lambda (g$665$10372) (set! g$665$10364 (g$665$10366 g$665$10372 g$665$10364))) g$665$10374) (error 'apply '"invalid arg count")))) (length g$665$10374))))) '#f)) '()))) (set! g$665$10267 (g$665$10133 (g$665$10265) (lambda (g$665$10376) (begin (if (procedure? g$665$10376) (void) (error 'current-library-collection '"~s is not a procedure" g$665$10376)) g$665$10376)))) (set! g$665$10270 (lambda (g$665$10378 g$665$10379 g$665$10380 g$665$10381 g$665$10382 g$665$10383 g$665$10384 g$665$10385 g$665$10386 g$665$10387 g$665$10388) (vector 'g$665$10269 g$665$10378 g$665$10379 g$665$10380 g$665$10381 g$665$10382 g$665$10383 g$665$10384 g$665$10385 g$665$10386 g$665$10387 g$665$10388))) (set! g$665$10272 (lambda (g$665$10400) (if (vector? g$665$10400) (if (= (vector-length g$665$10400) (+ '1 (length '(id name ver imp* vis* inv* subst env visit-state invoke-state visible?)))) (begin '#f (eq? (vector-ref g$665$10400 '0) 'g$665$10269)) '#f) '#f))) (set! g$665$10274 (lambda (g$665$10402) (if (g$665$10272 g$665$10402) (vector-ref g$665$10402 '1) (error 'library-id '"~s is not of type ~s" g$665$10402 'library)))) (set! g$665$10276 (lambda (g$665$10404) (if (g$665$10272 g$665$10404) (vector-ref g$665$10404 '2) (error 'library-name '"~s is not of type ~s" g$665$10404 'library)))) (set! g$665$10278 (lambda (g$665$10406) (if (g$665$10272 g$665$10406) (vector-ref g$665$10406 '3) (error 'library-ver '"~s is not of type ~s" g$665$10406 'library)))) (set! g$665$10280 (lambda (g$665$10408) (if (g$665$10272 g$665$10408) (vector-ref g$665$10408 '4) (error 'library-imp* '"~s is not of type ~s" g$665$10408 'library)))) (set! g$665$10282 (lambda (g$665$10410) (if (g$665$10272 g$665$10410) (vector-ref g$665$10410 '5) (error 'library-vis* '"~s is not of type ~s" g$665$10410 'library)))) (set! g$665$10284 (lambda (g$665$10412) (if (g$665$10272 g$665$10412) (vector-ref g$665$10412 '6) (error 'library-inv* '"~s is not of type ~s" g$665$10412 'library)))) (set! g$665$10286 (lambda (g$665$10414) (if (g$665$10272 g$665$10414) (vector-ref g$665$10414 '7) (error 'library-subst '"~s is not of type ~s" g$665$10414 'library)))) (set! g$665$10288 (lambda (g$665$10416) (if (g$665$10272 g$665$10416) (vector-ref g$665$10416 '8) (error 'library-env '"~s is not of type ~s" g$665$10416 'library)))) (set! g$665$10290 (lambda (g$665$10418) (if (g$665$10272 g$665$10418) (vector-ref g$665$10418 '9) (error 'library-visit-state '"~s is not of type ~s" g$665$10418 'library)))) (set! g$665$10292 (lambda (g$665$10420) (if (g$665$10272 g$665$10420) (vector-ref g$665$10420 '10) (error 'library-invoke-state '"~s is not of type ~s" g$665$10420 'library)))) (set! g$665$10294 (lambda (g$665$10422) (if (g$665$10272 g$665$10422) (vector-ref g$665$10422 '11) (error 'library-visible? '"~s is not of type ~s" g$665$10422 'library)))) (set! g$665$10296 (lambda (g$665$10424 g$665$10425) (if (g$665$10272 g$665$10424) (vector-set! g$665$10424 '1 g$665$10425) (error 'set-library-id! '"~s is not of type ~s" g$665$10424 'library)))) (set! g$665$10298 (lambda (g$665$10428 g$665$10429) (if (g$665$10272 g$665$10428) (vector-set! g$665$10428 '2 g$665$10429) (error 'set-library-name! '"~s is not of type ~s" g$665$10428 'library)))) (set! g$665$10300 (lambda (g$665$10432 g$665$10433) (if (g$665$10272 g$665$10432) (vector-set! g$665$10432 '3 g$665$10433) (error 'set-library-ver! '"~s is not of type ~s" g$665$10432 'library)))) (set! g$665$10302 (lambda (g$665$10436 g$665$10437) (if (g$665$10272 g$665$10436) (vector-set! g$665$10436 '4 g$665$10437) (error 'set-library-imp*! '"~s is not of type ~s" g$665$10436 'library)))) (set! g$665$10304 (lambda (g$665$10440 g$665$10441) (if (g$665$10272 g$665$10440) (vector-set! g$665$10440 '5 g$665$10441) (error 'set-library-vis*! '"~s is not of type ~s" g$665$10440 'library)))) (set! g$665$10306 (lambda (g$665$10444 g$665$10445) (if (g$665$10272 g$665$10444) (vector-set! g$665$10444 '6 g$665$10445) (error 'set-library-inv*! '"~s is not of type ~s" g$665$10444 'library)))) (set! g$665$10308 (lambda (g$665$10448 g$665$10449) (if (g$665$10272 g$665$10448) (vector-set! g$665$10448 '7 g$665$10449) (error 'set-library-subst! '"~s is not of type ~s" g$665$10448 'library)))) (set! g$665$10310 (lambda (g$665$10452 g$665$10453) (if (g$665$10272 g$665$10452) (vector-set! g$665$10452 '8 g$665$10453) (error 'set-library-env! '"~s is not of type ~s" g$665$10452 'library)))) (set! g$665$10312 (lambda (g$665$10456 g$665$10457) (if (g$665$10272 g$665$10456) (vector-set! g$665$10456 '9 g$665$10457) (error 'set-library-visit-state! '"~s is not of type ~s" g$665$10456 'library)))) (set! g$665$10314 (lambda (g$665$10460 g$665$10461) (if (g$665$10272 g$665$10460) (vector-set! g$665$10460 '10 g$665$10461) (error 'set-library-invoke-state! '"~s is not of type ~s" g$665$10460 'library)))) (set! g$665$10316 (lambda (g$665$10464 g$665$10465) (if (g$665$10272 g$665$10464) (vector-set! g$665$10464 '11 g$665$10465) (error 'set-library-visible?! '"~s is not of type ~s" g$665$10464 'library)))) (set! g$665$10318 (lambda (g$665$10468) (if (null? g$665$10468) '() (error 'find-dependencies '"cannot handle deps yet")))) (set! g$665$10320 (lambda (g$665$10470) (letrec ((g$665$10472 (lambda (g$665$10474) (if (null? g$665$10474) '#f (if (g$665$10470 (car g$665$10474)) (car g$665$10474) (g$665$10472 (cdr g$665$10474))))))) (g$665$10472 ((g$665$10267)))))) (set! g$665$10322 (g$665$10133 '(".") (lambda (g$665$10476) (if (if (list? g$665$10476) (begin '#f (for-all string? g$665$10476)) '#f) (map (lambda (g$665$10478) g$665$10478) g$665$10476) (error 'library-path '"~s is not a list of strings" g$665$10476))))) (set! g$665$10324 (lambda (g$665$10480) (call-with-values (lambda () (open-string-output-port)) (lambda (g$665$10482 g$665$10483) ((lambda (g$665$10486) (begin (set! g$665$10486 (lambda (g$665$10488) (if (<= '0 g$665$10488 '9) (display g$665$10488 g$665$10482) (display (integer->char (+ (char->integer '#\A) (- g$665$10488 '10))) g$665$10482)))) (begin (letrec ((g$665$10490 (lambda (g$665$10492) (if (null? g$665$10492) (display '".ss" g$665$10482) (begin (display '"/" g$665$10482) (for-each (lambda (g$665$10494) (if ((lambda (g$665$10496) (if g$665$10496 g$665$10496 ((lambda (g$665$10498) (if g$665$10498 g$665$10498 ((lambda (g$665$10500) (if g$665$10500 g$665$10500 (begin '#f (memv g$665$10494 '(#\- #\. #\_ #\~))))) (char<=? '#\0 g$665$10494 '#\9)))) (char<=? '#\A g$665$10494 '#\Z)))) (char<=? '#\a g$665$10494 '#\z)) (display g$665$10494 g$665$10482) (begin (display '"%" g$665$10482) ((lambda (g$665$10502) (begin (g$665$10486 (quotient g$665$10502 '16)) (g$665$10486 (remainder g$665$10502 '16)))) (char->integer g$665$10494))))) (string->list (symbol->string (car g$665$10492)))) (g$665$10490 (cdr g$665$10492))))))) (g$665$10490 g$665$10480)) (g$665$10483)))) '#f))))) (set! g$665$10326 (g$665$10133 (lambda (g$665$10504) ((lambda (g$665$10506) (letrec ((g$665$10508 (lambda (g$665$10510) (if (pair? g$665$10510) (begin '#f ((lambda (g$665$10512) (if (file-exists? g$665$10512) g$665$10512 (g$665$10508 (cdr g$665$10510)))) (string-append (car g$665$10510) g$665$10506))) '#f)))) (g$665$10508 (g$665$10322)))) (g$665$10324 g$665$10504))) (lambda (g$665$10514) (if (procedure? g$665$10514) g$665$10514 (error 'file-locator '"~s is not a procedure" g$665$10514))))) (set! g$665$10328 (g$665$10133 (lambda (g$665$10516) ((lambda (g$665$10518) (if (string? g$665$10518) (begin '#f (with-input-from-file g$665$10518 read)) '#f)) ((g$665$10326) g$665$10516))) (lambda (g$665$10520) (if (procedure? g$665$10520) g$665$10520 (error 'library-locator '"~s is not a procedure" g$665$10520))))) (set! g$665$10330 (g$665$10133 (lambda (g$665$10522) (error 'library-expander '"not initialized")) (lambda (g$665$10524) (if (procedure? g$665$10524) g$665$10524 (error 'library-expander '"~s is not a procedure" g$665$10524))))) (set! g$665$10332 (g$665$10133 '())) (set! g$665$10334 (lambda (g$665$10526) (begin (if (member g$665$10526 (g$665$10332)) (error '#f '"circular attempt to import library ~s detected" g$665$10526) (void)) ((lambda (g$665$10530 g$665$10531) ((lambda (g$665$10534) (dynamic-wind g$665$10534 (lambda () ((lambda (g$665$10536) (begin (if g$665$10536 (void) (error '#f '"cannot find library ~s" g$665$10526)) ((g$665$10330) g$665$10536) ((lambda (g$665$10538) (if g$665$10538 g$665$10538 (begin '#f (error '#f '"handling external library of ~s did not yield the currect library" g$665$10526)))) (g$665$10320 (lambda (g$665$10540) (equal? (g$665$10276 g$665$10540) g$665$10526)))))) ((g$665$10328) g$665$10526))) g$665$10534)) (lambda () ((lambda (g$665$10542) (begin (g$665$10530 g$665$10531) (set! g$665$10531 g$665$10542))) (g$665$10530))))) g$665$10332 (cons g$665$10526 (g$665$10332)))))) (set! g$665$10336 (lambda (g$665$10544) ((lambda (g$665$10546) (if g$665$10546 g$665$10546 (begin '#f (g$665$10334 g$665$10544)))) (g$665$10320 (lambda (g$665$10548) (equal? (g$665$10276 g$665$10548) g$665$10544)))))) (set! g$665$10338 (lambda (g$665$10550) (if (g$665$10320 (lambda (g$665$10552) (equal? (g$665$10276 g$665$10552) g$665$10550))) (begin '#f '#t) '#f))) (set! g$665$10340 (lambda (g$665$10554) ((lambda (g$665$10556) ((lambda (g$665$10558) (if g$665$10558 g$665$10558 (begin '#f (error '#f '"cannot find library with spec ~s" g$665$10554)))) (g$665$10320 (lambda (g$665$10560) (eq? g$665$10556 (g$665$10274 g$665$10560)))))) (car g$665$10554)))) (set! g$665$10342 (make-eq-hashtable)) (set! g$665$10344 (lambda (g$665$10562) (begin ((lambda (g$665$10564) (for-each (lambda (g$665$10566) ((lambda (g$665$10568 g$665$10569) ((lambda (g$665$10572) (hashtable-set! g$665$10342 g$665$10568 g$665$10572)) ((lambda (g$665$10574) (if (memv g$665$10574 '(global)) (cons 'global (cons g$665$10562 (cdr g$665$10569))) (if (memv g$665$10574 '(global-macro)) (cons 'global-macro (cons g$665$10562 (cdr g$665$10569))) (if (memv g$665$10574 '(global-macro!)) (cons 'global-macro! (cons g$665$10562 (cdr g$665$10569))) g$665$10569)))) (car g$665$10569)))) (car g$665$10566) (cdr g$665$10566))) g$665$10564)) (g$665$10288 g$665$10562)) ((g$665$10267) g$665$10562)))) (set! g$665$10346 (lambda (g$665$10575 g$665$10576 g$665$10577 g$665$10578 g$665$10579 g$665$10580 g$665$10581 g$665$10582 g$665$10583 g$665$10584 g$665$10585) ((lambda (g$665$10597 g$665$10598 g$665$10599) (begin (if (if (symbol? g$665$10575) (if (list? g$665$10576) (begin '#f (list? g$665$10577)) '#f) '#f) (void) (error 'install-library '"invalid spec ~s ~s ~s" g$665$10575 g$665$10576 g$665$10577)) (if (g$665$10338 g$665$10576) (error 'install-library '"~s is already installed" g$665$10576) (void)) ((lambda (g$665$10603) (g$665$10344 g$665$10603)) (g$665$10270 g$665$10575 g$665$10576 g$665$10577 g$665$10597 g$665$10598 g$665$10599 g$665$10581 g$665$10582 g$665$10583 g$665$10584 g$665$10585)))) (map g$665$10340 g$665$10578) (map g$665$10340 g$665$10579) (map g$665$10340 g$665$10580)))) (set! g$665$10348 (lambda (g$665$10605 g$665$10606 g$665$10607) (g$665$10308 g$665$10605 (cons (cons g$665$10606 g$665$10607) (g$665$10286 g$665$10605))))) (set! g$665$10350 (lambda (g$665$10611 g$665$10612 g$665$10613) (begin (g$665$10310 g$665$10611 (cons (cons g$665$10612 g$665$10613) (g$665$10288 g$665$10611))) (hashtable-set! g$665$10342 g$665$10612 g$665$10613)))) (set! g$665$10352 (lambda (g$665$10617) (hashtable-ref g$665$10342 g$665$10617 '#f))) (set! g$665$10354 (lambda (g$665$10619) ((lambda (g$665$10621) (if (procedure? g$665$10621) (begin (g$665$10314 g$665$10619 (lambda () (error 'invoke '"circularity detected for ~s" g$665$10619))) (for-each g$665$10354 (g$665$10284 g$665$10619)) (g$665$10314 g$665$10619 (lambda () (error 'invoke '"first invoke did not return for ~s" g$665$10619))) (g$665$10621) (g$665$10314 g$665$10619 '#t)) (void))) (g$665$10292 g$665$10619)))) (set! g$665$10356 (lambda (g$665$10623) ((lambda (g$665$10625) (if (procedure? g$665$10625) (begin (g$665$10312 g$665$10623 (lambda () (error 'visit '"circularity detected for ~s" g$665$10623))) (for-each g$665$10354 (g$665$10282 g$665$10623)) (g$665$10312 g$665$10623 (lambda () (error 'invoke '"first visit did not return for ~s" g$665$10623))) (g$665$10625) (g$665$10312 g$665$10623 '#t)) (void))) (g$665$10290 g$665$10623)))) (set! g$665$10358 (lambda (g$665$10627) (g$665$10354 (g$665$10340 g$665$10627)))) (set! g$665$10360 (lambda g$665$10637 ((lambda (g$665$10638) (if (= g$665$10638 '1) (apply (lambda (g$665$10629) (letrec ((g$665$10631 (lambda (g$665$10633) (if (null? g$665$10633) '() (if ((lambda (g$665$10635) (if g$665$10635 g$665$10635 (begin '#f (g$665$10294 (car g$665$10633))))) g$665$10629) (cons (car g$665$10633) (g$665$10631 (cdr g$665$10633))) (g$665$10631 (cdr g$665$10633))))))) (g$665$10631 ((g$665$10267))))) g$665$10637) (if (= g$665$10638 '0) (apply (lambda () (g$665$10360 '#f)) g$665$10637) (error 'apply '"invalid arg count")))) (length g$665$10637)))) (set! g$665$10362 (lambda (g$665$10639) (begin (if (g$665$10272 g$665$10639) (void) (error 'library-spec '"~s is not a library" g$665$10639)) (list (g$665$10274 g$665$10639) (g$665$10276 g$665$10639) (g$665$10278 g$665$10639))))) (begin (set! g$665$10641 g$665$10362) (set! g$665$10642 g$665$10360) (set! g$665$10643 g$665$10358) (set! g$665$10644 g$665$10356) (set! g$665$10645 g$665$10354) (set! g$665$10646 g$665$10352) (set! g$665$10647 g$665$10350) (set! g$665$10648 g$665$10348) (set! g$665$10649 g$665$10346) (set! g$665$10650 g$665$10344) (set! g$665$10651 g$665$10342) (set! g$665$10652 g$665$10340) (set! g$665$10653 g$665$10338) (set! g$665$10654 g$665$10336) (set! g$665$10655 g$665$10334) (set! g$665$10656 g$665$10332) (set! g$665$10657 g$665$10330) (set! g$665$10658 g$665$10328) (set! g$665$10659 g$665$10326) (set! g$665$10660 g$665$10324) (set! g$665$10661 g$665$10322) (set! g$665$10662 g$665$10320) (set! g$665$10663 g$665$10318) (set! g$665$10664 g$665$10316) (set! g$665$10665 g$665$10314) (set! g$665$10666 g$665$10312) (set! g$665$10667 g$665$10310) (set! g$665$10668 g$665$10308) (set! g$665$10669 g$665$10306) (set! g$665$10670 g$665$10304) (set! g$665$10671 g$665$10302) (set! g$665$10672 g$665$10300) (set! g$665$10673 g$665$10298) (set! g$665$10674 g$665$10296) (set! g$665$10675 g$665$10294) (set! g$665$10676 g$665$10292) (set! g$665$10677 g$665$10290) (set! g$665$10678 g$665$10288) (set! g$665$10679 g$665$10286) (set! g$665$10680 g$665$10284) (set! g$665$10681 g$665$10282) (set! g$665$10682 g$665$10280) (set! g$665$10683 g$665$10278) (set! g$665$10684 g$665$10276) (set! g$665$10685 g$665$10274) (set! g$665$10686 g$665$10272) (set! g$665$10687 g$665$10270) (set! g$665$10688 g$665$10267) (set! g$665$10689 g$665$10265)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$665$10937 '#f) (define g$665$10929 '#f) (define g$665$10928 '#f) (define g$665$10927 '#f) (define g$665$10923 '#f) (define g$665$10922 '#f) (define g$665$10921 '#f) (define g$665$10920 '#f) ((lambda (g$665$10691 g$665$10768 g$665$10770 g$665$10772 g$665$10810 g$665$10812 g$665$10814 g$665$10816) (begin (set! g$665$10691 (lambda (g$665$10818) (cons 'define (cons g$665$10818 '('#f))))) (set! g$665$10768 (lambda (g$665$10820 g$665$10821 g$665$10822) (list 'lambda g$665$10821 g$665$10822))) (set! g$665$10770 (lambda (g$665$10826 g$665$10827 g$665$10828) ((lambda (g$665$10832 g$665$10834 g$665$10836 g$665$10838) (begin (set! g$665$10832 (lambda (g$665$10880) (list '(primitive error) ''apply (list 'quote '"invalid arg count")))) (set! g$665$10834 (lambda (g$665$10864 g$665$10865 g$665$10866) (call-with-values (lambda () (letrec ((g$665$10870 (lambda (g$665$10872 g$665$10873) (if (pair? g$665$10872) (g$665$10870 (cdr g$665$10872) (+ g$665$10873 '1)) (if (null? g$665$10872) (values g$665$10873 '=) (values g$665$10873 '>=)))))) (g$665$10870 g$665$10866 '0))) (lambda (g$665$10876 g$665$10877) (list (list 'primitive g$665$10877) g$665$10865 (list 'quote g$665$10876)))))) (set! g$665$10836 (lambda (g$665$10856 g$665$10857 g$665$10858 g$665$10859) (list '(primitive apply) (g$665$10768 g$665$10856 g$665$10858 g$665$10859) g$665$10857))) (set! g$665$10838 (lambda (g$665$10840 g$665$10841 g$665$10842) ((lambda (g$665$10846 g$665$10847) (list 'lambda g$665$10846 (g$665$10772 g$665$10840 (list g$665$10847) (list (list '(primitive length) g$665$10846)) (letrec ((g$665$10850 (lambda (g$665$10852 g$665$10853) (if (null? g$665$10852) (g$665$10832 g$665$10840) (list 'if (g$665$10834 g$665$10840 g$665$10847 (car g$665$10852)) (g$665$10836 g$665$10840 g$665$10846 (car g$665$10852) (car g$665$10853)) (g$665$10850 (cdr g$665$10852) (cdr g$665$10853))))))) (g$665$10850 g$665$10827 g$665$10842))))) (gensym) (gensym)))) (if (= (length g$665$10828) '1) (g$665$10768 g$665$10826 (car g$665$10827) (car g$665$10828)) (g$665$10838 g$665$10826 g$665$10827 g$665$10828)))) '#f '#f '#f '#f))) (set! g$665$10772 (lambda (g$665$10882 g$665$10883 g$665$10884 g$665$10885) (cons (g$665$10768 g$665$10882 g$665$10883 g$665$10885) g$665$10884))) (set! g$665$10810 (lambda (g$665$10890 g$665$10891) (letrec ((g$665$10894 (lambda (g$665$10896) (if (null? (cdr g$665$10896)) (car g$665$10896) (if (equal? (car g$665$10896) (g$665$10812)) (g$665$10894 (cdr g$665$10896)) (cons 'begin g$665$10896)))))) (g$665$10894 g$665$10891)))) (set! g$665$10812 (lambda () '((primitive void)))) (set! g$665$10814 (lambda (g$665$10898 g$665$10899 g$665$10900 g$665$10901) (if (null? g$665$10899) g$665$10901 (list 'letrec (map list g$665$10899 g$665$10900) g$665$10901)))) (set! g$665$10816 (lambda (g$665$10906 g$665$10907 g$665$10908 g$665$10909) (if (null? g$665$10907) g$665$10909 (g$665$10772 g$665$10906 g$665$10907 (map (lambda (g$665$10914) (list 'quote '#f)) g$665$10907) (g$665$10810 g$665$10906 (append (map (lambda (g$665$10916 g$665$10917) (list 'set! g$665$10916 g$665$10917)) g$665$10907 g$665$10908) (list g$665$10909))))))) (begin (set! g$665$10920 g$665$10816) (set! g$665$10921 g$665$10814) (set! g$665$10922 g$665$10812) (set! g$665$10923 g$665$10810) (set! g$665$10927 g$665$10772) (set! g$665$10928 g$665$10770) (set! g$665$10929 g$665$10768) (set! g$665$10937 g$665$10691)))) '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (define g$665$18999 '#f) (define g$665$18998 '#f) (define g$665$18996 '#f) (define g$665$18995 '#f) (define g$665$18994 '#f) (define g$665$18993 '#f) (define g$665$18992 '#f) (define g$665$18991 '#f) (define g$665$18990 '#f) (define g$665$18989 '#f) (define g$665$18988 '#f) (define g$665$18987 '#f) (define g$665$18986 '#f) (define g$665$18985 '#f) (define g$665$18984 '#f) (define g$665$18983 '#f) (define g$665$18982 '#f) (define g$665$18981 '#f) (define g$665$18980 '#f) (define g$665$18979 '#f) (define g$665$18978 '#f) (define g$665$18977 '#f) (define g$665$18976 '#f) (define g$665$18975 '#f) (define g$665$18974 '#f) (define g$665$18973 '#f) (define g$665$18972 '#f) (define g$665$18971 '#f) (define g$665$18970 '#f) (define g$665$18969 '#f) (define g$665$18968 '#f) (define g$665$18967 '#f) (define g$665$18966 '#f) (define g$665$18965 '#f) (define g$665$18964 '#f) (define g$665$18963 '#f) (define g$665$18962 '#f) (define g$665$18961 '#f) (define g$665$18960 '#f) (define g$665$18959 '#f) (define g$665$18958 '#f) (define g$665$18957 '#f) (define g$665$18956 '#f) (define g$665$18955 '#f) (define g$665$18954 '#f) (define g$665$18953 '#f) (define g$665$18952 '#f) (define g$665$18951 '#f) (define g$665$18950 '#f) (define g$665$18949 '#f) (define g$665$18948 '#f) (define g$665$18947 '#f) (define g$665$18946 '#f) (define g$665$18945 '#f) (define g$665$18944 '#f) (define g$665$18943 '#f) (define g$665$18942 '#f) (define g$665$18941 '#f) (define g$665$18940 '#f) (define g$665$18939 '#f) (define g$665$18938 '#f) (define g$665$18937 '#f) (define g$665$18936 '#f) (define g$665$18935 '#f) (define g$665$18934 '#f) (define g$665$18932 '#f) (define g$665$18931 '#f) (define g$665$18930 '#f) (define g$665$18928 '#f) (define g$665$18927 '#f) (define g$665$18926 '#f) (define g$665$18925 '#f) (define g$665$18924 '#f) (define g$665$18923 '#f) (define g$665$18922 '#f) (define g$665$18921 '#f) (define g$665$18920 '#f) (define g$665$18919 '#f) (define g$665$18918 '#f) (define g$665$18917 '#f) (define g$665$18916 '#f) (define g$665$18915 '#f) (define g$665$18914 '#f) (define g$665$18913 '#f) (define g$665$18912 '#f) (define g$665$18911 '#f) (define g$665$18910 '#f) (define g$665$18909 '#f) (define g$665$18908 '#f) (define g$665$18907 '#f) (define g$665$18906 '#f) (define g$665$18905 '#f) (define g$665$18904 '#f) (define g$665$18903 '#f) (define g$665$18902 '#f) (define g$665$18901 '#f) (define g$665$18900 '#f) (define g$665$18899 '#f) (define g$665$18898 '#f) (define g$665$18897 '#f) (define g$665$18896 '#f) (define g$665$18895 '#f) (define g$665$18894 '#f) (define g$665$18893 '#f) (define g$665$18892 '#f) (define g$665$18891 '#f) (define g$665$18890 '#f) (define g$665$18889 '#f) (define g$665$18888 '#f) (define g$665$18887 '#f) (define g$665$18886 '#f) (define g$665$18885 '#f) (define g$665$18884 '#f) (define g$665$18883 '#f) (define g$665$18882 '#f) (define g$665$18881 '#f) (define g$665$18880 '#f) (define g$665$18879 '#f) (define g$665$18878 '#f) (define g$665$18877 '#f) (define g$665$18876 '#f) (define g$665$18875 '#f) (define g$665$18874 '#f) (define g$665$18873 '#f) (define g$665$18872 '#f) (define g$665$18871 '#f) (define g$665$18870 '#f) (define g$665$18869 '#f) (define g$665$18868 '#f) (define g$665$18867 '#f) (define g$665$18866 '#f) (define g$665$18865 '#f) (define g$665$18864 '#f) (define g$665$18863 '#f) (define g$665$18862 '#f) (define g$665$18861 '#f) (define g$665$18860 '#f) (define g$665$18859 '#f) (define g$665$18858 '#f) (define g$665$18857 '#f) (define g$665$18856 '#f) (define g$665$18855 '#f) (define g$665$18854 '#f) (define g$665$18853 '#f) (define g$665$18852 '#f) (define g$665$18851 '#f) (define g$665$18850 '#f) (define g$665$18849 '#f) (define g$665$18848 '#f) (define g$665$18847 '#f) (define g$665$18846 '#f) (define g$665$18845 '#f) (define g$665$18844 '#f) (define g$665$18843 '#f) (define g$665$18842 '#f) (define g$665$18841 '#f) (define g$665$18840 '#f) (define g$665$18839 '#f) (define g$665$18838 '#f) (define g$665$18837 '#f) (define g$665$18836 '#f) (define g$665$18835 '#f) (define g$665$18834 '#f) (define g$665$18833 '#f) (define g$665$18832 '#f) (define g$665$18831 '#f) (define g$665$18830 '#f) (define g$665$18829 '#f) (define g$665$18828 '#f) (define g$665$18827 '#f) (define g$665$18826 '#f) (define g$665$18825 '#f) (define g$665$18824 '#f) (define g$665$18823 '#f) (define g$665$18822 '#f) (define g$665$18821 '#f) (define g$665$18820 '#f) (define g$665$18819 '#f) (define g$665$18818 '#f) (define g$665$18817 '#f) (define g$665$18816 '#f) ((lambda (g$665$10939 g$665$10941 g$665$10946 g$665$10948 g$665$10950 g$665$10952 g$665$10954 g$665$10957 g$665$10959 g$665$10961 g$665$10963 g$665$10965 g$665$10967 g$665$10969 g$665$10971 g$665$10973 g$665$10975 g$665$10977 g$665$10979 g$665$10981 g$665$10983 g$665$10985 g$665$10987 g$665$10990 g$665$10992 g$665$10994 g$665$10996 g$665$10998 g$665$11000 g$665$11002 g$665$11004 g$665$11006 g$665$11008 g$665$11010 g$665$11012 g$665$11014 g$665$11016 g$665$11018 g$665$11020 g$665$11022 g$665$11024 g$665$11026 g$665$11028 g$665$11030 g$665$11032 g$665$11034 g$665$11036 g$665$11038 g$665$11040 g$665$11042 g$665$11044 g$665$11046 g$665$11048 g$665$11050 g$665$11052 g$665$11054 g$665$11056 g$665$11058 g$665$11060 g$665$11062 g$665$11064 g$665$11066 g$665$11068 g$665$11070 g$665$11072 g$665$11086 g$665$11088 g$665$11090 g$665$11289 g$665$11291 g$665$11293 g$665$11295 g$665$11297 g$665$11299 g$665$11301 g$665$11303 g$665$11305 g$665$11307 g$665$11309 g$665$11311 g$665$11313 g$665$11315 g$665$11317 g$665$11319 g$665$11321 g$665$11323 g$665$11325 g$665$11327 g$665$11329 g$665$11331 g$665$11333 g$665$11335 g$665$11337 g$665$11339 g$665$11341 g$665$11343 g$665$11345 g$665$11347 g$665$11349 g$665$11351 g$665$11353 g$665$11355 g$665$11357 g$665$11359 g$665$11361 g$665$11363 g$665$11365 g$665$11367 g$665$11369 g$665$11371 g$665$11373 g$665$11375 g$665$11377 g$665$11379 g$665$11381 g$665$11383 g$665$11385 g$665$11387 g$665$11389 g$665$11391 g$665$11393 g$665$11395 g$665$11397 g$665$11399 g$665$11401 g$665$11403 g$665$11405 g$665$11407 g$665$11409 g$665$11411 g$665$11413 g$665$11415 g$665$11417 g$665$11419 g$665$11421 g$665$11423 g$665$11425 g$665$11427 g$665$11429 g$665$11431 g$665$11433 g$665$11435 g$665$11437 g$665$11439 g$665$11441 g$665$11443 g$665$11445 g$665$11447 g$665$11449 g$665$11451 g$665$11453 g$665$11455 g$665$11458 g$665$11460 g$665$11462 g$665$11464 g$665$11466 g$665$11468 g$665$11470 g$665$11472 g$665$11474 g$665$11476 g$665$11478 g$665$11480 g$665$11482 g$665$11484 g$665$11486 g$665$11488 g$665$11490 g$665$11492 g$665$11494 g$665$11496 g$665$11498 g$665$11500 g$665$11502 g$665$11504 g$665$11506 g$665$11508 g$665$11510 g$665$11512 g$665$11514) (begin (set! g$665$10939 (lambda (g$665$11516 g$665$11517) (if (memq g$665$11516 g$665$11517) g$665$11517 (cons g$665$11516 g$665$11517)))) (set! g$665$10941 (lambda (g$665$11520 g$665$11521) (if (null? g$665$11520) g$665$11521 (if (memq (car g$665$11520) g$665$11521) (g$665$10941 (cdr g$665$11520) g$665$11521) (cons (car g$665$11520) (g$665$10941 (cdr g$665$11520) g$665$11521)))))) (set! g$665$10946 '(top)) (set! g$665$10948 (lambda (g$665$11524) (memq 'top g$665$11524))) (set! g$665$10950 (lambda (g$665$11526) (if (symbol? g$665$11526) (gensym g$665$11526) (if (g$665$10992 g$665$11526) (g$665$10950 (g$665$11042 g$665$11526)) (error 'gen-lexical '"BUG: invalid arg ~s" g$665$11526))))) (set! g$665$10952 (lambda (g$665$11528) (g$665$10950 g$665$11528))) (set! g$665$10954 (lambda (g$665$11530) (gensym))) (set! g$665$10957 (lambda (g$665$11532 g$665$11533 g$665$11534 g$665$11535) (vector 'g$665$10956 g$665$11532 g$665$11533 g$665$11534 g$665$11535))) (set! g$665$10959 (lambda (g$665$11540) (if (vector? g$665$11540) (if (= (vector-length g$665$11540) (+ '1 (length '(sym* mark** label* sealed/freq)))) (begin '#f (eq? (vector-ref g$665$11540 '0) 'g$665$10956)) '#f) '#f))) (set! g$665$10961 (lambda (g$665$11542) (if (g$665$10959 g$665$11542) (vector-ref g$665$11542 '1) (error 'rib-sym* '"~s is not of type ~s" g$665$11542 'rib)))) (set! g$665$10963 (lambda (g$665$11544) (if (g$665$10959 g$665$11544) (vector-ref g$665$11544 '2) (error 'rib-mark** '"~s is not of type ~s" g$665$11544 'rib)))) (set! g$665$10965 (lambda (g$665$11546) (if (g$665$10959 g$665$11546) (vector-ref g$665$11546 '3) (error 'rib-label* '"~s is not of type ~s" g$665$11546 'rib)))) (set! g$665$10967 (lambda (g$665$11548) (if (g$665$10959 g$665$11548) (vector-ref g$665$11548 '4) (error 'rib-sealed/freq '"~s is not of type ~s" g$665$11548 'rib)))) (set! g$665$10969 (lambda (g$665$11550 g$665$11551) (if (g$665$10959 g$665$11550) (vector-set! g$665$11550 '1 g$665$11551) (error 'set-rib-sym*! '"~s is not of type ~s" g$665$11550 'rib)))) (set! g$665$10971 (lambda (g$665$11554 g$665$11555) (if (g$665$10959 g$665$11554) (vector-set! g$665$11554 '2 g$665$11555) (error 'set-rib-mark**! '"~s is not of type ~s" g$665$11554 'rib)))) (set! g$665$10973 (lambda (g$665$11558 g$665$11559) (if (g$665$10959 g$665$11558) (vector-set! g$665$11558 '3 g$665$11559) (error 'set-rib-label*! '"~s is not of type ~s" g$665$11558 'rib)))) (set! g$665$10975 (lambda (g$665$11562 g$665$11563) (if (g$665$10959 g$665$11562) (vector-set! g$665$11562 '4 g$665$11563) (error 'set-rib-sealed/freq! '"~s is not of type ~s" g$665$11562 'rib)))) (set! g$665$10977 (lambda () (g$665$10957 '() '() '() '#f))) (set! g$665$10979 (lambda (g$665$11566 g$665$11567 g$665$11568) ((lambda (g$665$11572) (begin (set! g$665$11572 (lambda (g$665$11574 g$665$11575 g$665$11576 g$665$11577) (if (pair? g$665$11576) (begin '#f ((lambda (g$665$11582) (if g$665$11582 g$665$11582 (begin '#f (g$665$11572 g$665$11574 g$665$11575 (cdr g$665$11576) (cdr g$665$11577))))) (if (eq? g$665$11574 (car g$665$11576)) (begin '#f (g$665$11044 g$665$11575 (car g$665$11577))) '#f))) '#f))) (begin (if (g$665$10967 g$665$11566) (error 'extend-rib! '"rib ~s is sealed" g$665$11566) (void)) ((lambda (g$665$11584 g$665$11585) ((lambda (g$665$11588) (begin (if (if (memq g$665$11584 (g$665$10961 g$665$11566)) (begin '#f (g$665$11572 g$665$11584 g$665$11585 g$665$11588 (g$665$10963 g$665$11566))) '#f) (error 'expander '"~a ~s" '"cannot redefine" (g$665$11058 g$665$11567 '())) (void)) (g$665$10969 g$665$11566 (cons g$665$11584 g$665$11588)) (g$665$10971 g$665$11566 (cons g$665$11585 (g$665$10963 g$665$11566))) (g$665$10973 g$665$11566 (cons g$665$11568 (g$665$10965 g$665$11566))))) (g$665$10961 g$665$11566))) (g$665$11042 g$665$11567) (g$665$10996 g$665$11567))))) '#f))) (set! g$665$10981 (lambda (g$665$11590) ((lambda (g$665$11592) (if (null? g$665$11592) (void) ((lambda (g$665$11594) (begin (g$665$10969 g$665$11590 g$665$11594) (g$665$10971 g$665$11590 (list->vector (g$665$10963 g$665$11590))) (g$665$10973 g$665$11590 (list->vector (g$665$10965 g$665$11590))) (g$665$10975 g$665$11590 (make-vector (vector-length g$665$11594) '0)))) (list->vector g$665$11592)))) (g$665$10961 g$665$11590)))) (set! g$665$10983 (lambda (g$665$11596) (if (g$665$10967 g$665$11596) (begin (g$665$10975 g$665$11596 '#f) (g$665$10969 g$665$11596 (vector->list (g$665$10961 g$665$11596))) (g$665$10971 g$665$11596 (vector->list (g$665$10963 g$665$11596))) (g$665$10973 g$665$11596 (vector->list (g$665$10965 g$665$11596)))) (void)))) (set! g$665$10985 (lambda (g$665$11598 g$665$11599) ((lambda (g$665$11602) ((lambda (g$665$11604) ((lambda (g$665$11606) (begin (vector-set! g$665$11602 g$665$11606 (+ g$665$11604 '1)) (if (= g$665$11606 g$665$11599) (void) ((lambda (g$665$11608 g$665$11609 g$665$11610) (begin ((lambda (g$665$11614) (begin (vector-set! g$665$11608 g$665$11599 (vector-ref g$665$11608 g$665$11606)) (vector-set! g$665$11608 g$665$11606 g$665$11614))) (vector-ref g$665$11608 g$665$11599)) ((lambda (g$665$11616) (begin (vector-set! g$665$11609 g$665$11599 (vector-ref g$665$11609 g$665$11606)) (vector-set! g$665$11609 g$665$11606 g$665$11616))) (vector-ref g$665$11609 g$665$11599)) ((lambda (g$665$11618) (begin (vector-set! g$665$11610 g$665$11599 (vector-ref g$665$11610 g$665$11606)) (vector-set! g$665$11610 g$665$11606 g$665$11618))) (vector-ref g$665$11610 g$665$11599)))) (g$665$10961 g$665$11598) (g$665$10963 g$665$11598) (g$665$10965 g$665$11598))))) (letrec ((g$665$11620 (lambda (g$665$11622) (if (zero? g$665$11622) '0 ((lambda (g$665$11624) (if (= g$665$11604 (vector-ref g$665$11602 g$665$11624)) (g$665$11620 g$665$11624) g$665$11622)) (- g$665$11622 '1)))))) (g$665$11620 g$665$11599)))) (vector-ref g$665$11602 g$665$11599))) (g$665$10967 g$665$11598)))) (set! g$665$10987 (lambda (g$665$11626 g$665$11627) (g$665$10957 (map g$665$11042 g$665$11626) (map g$665$10996 g$665$11626) g$665$11627 '#f))) (set! g$665$10990 (lambda (g$665$11630 g$665$11631 g$665$11632) (vector 'g$665$10989 g$665$11630 g$665$11631 g$665$11632))) (set! g$665$10992 (lambda (g$665$11636) (if (vector? g$665$11636) (if (= (vector-length g$665$11636) (+ '1 (length '(expr mark* subst*)))) (begin '#f (eq? (vector-ref g$665$11636 '0) 'g$665$10989)) '#f) '#f))) (set! g$665$10994 (lambda (g$665$11638) (if (g$665$10992 g$665$11638) (vector-ref g$665$11638 '1) (error 'stx-expr '"~s is not of type ~s" g$665$11638 'stx)))) (set! g$665$10996 (lambda (g$665$11640) (if (g$665$10992 g$665$11640) (vector-ref g$665$11640 '2) (error 'stx-mark* '"~s is not of type ~s" g$665$11640 'stx)))) (set! g$665$10998 (lambda (g$665$11642) (if (g$665$10992 g$665$11642) (vector-ref g$665$11642 '3) (error 'stx-subst* '"~s is not of type ~s" g$665$11642 'stx)))) (set! g$665$11000 (lambda (g$665$11644 g$665$11645) (if (g$665$10992 g$665$11644) (vector-set! g$665$11644 '1 g$665$11645) (error 'set-stx-expr! '"~s is not of type ~s" g$665$11644 'stx)))) (set! g$665$11002 (lambda (g$665$11648 g$665$11649) (if (g$665$10992 g$665$11648) (vector-set! g$665$11648 '2 g$665$11649) (error 'set-stx-mark*! '"~s is not of type ~s" g$665$11648 'stx)))) (set! g$665$11004 (lambda (g$665$11652 g$665$11653) (if (g$665$10992 g$665$11652) (vector-set! g$665$11652 '3 g$665$11653) (error 'set-stx-subst*! '"~s is not of type ~s" g$665$11652 'stx)))) (set! g$665$11006 (lambda (g$665$11656 g$665$11657) (g$665$10990 g$665$11657 (g$665$10996 g$665$11656) (g$665$10998 g$665$11656)))) (set! g$665$11008 (lambda () (string '#\m))) (set! g$665$11010 '#f) (set! g$665$11012 not) (set! g$665$11014 (lambda (g$665$11660 g$665$11661 g$665$11662) ((lambda (g$665$11666) (begin (set! g$665$11666 (lambda (g$665$11668 g$665$11669) (letrec ((g$665$11672 (lambda (g$665$11674 g$665$11675) (if (null? g$665$11675) (cdr g$665$11669) (cons g$665$11674 (g$665$11672 (car g$665$11675) (cdr g$665$11675))))))) (g$665$11672 (car g$665$11668) (cdr g$665$11668))))) ((lambda (g$665$11678 g$665$11679) (if (if (not (null? g$665$11660)) (if (not (null? g$665$11678)) (begin '#f (g$665$11012 (car g$665$11678))) '#f) '#f) (values (g$665$11666 g$665$11660 g$665$11678) (g$665$11666 g$665$11661 g$665$11679)) (values (append g$665$11660 g$665$11678) (append g$665$11661 g$665$11679)))) (g$665$10996 g$665$11662) (g$665$10998 g$665$11662)))) '#f))) (set! g$665$11016 (lambda (g$665$11682 g$665$11683 g$665$11684) (if (g$665$10992 g$665$11682) (call-with-values (lambda () (g$665$11014 g$665$11683 g$665$11684 g$665$11682)) (lambda (g$665$11688 g$665$11689) (g$665$10990 (g$665$10994 g$665$11682) g$665$11688 g$665$11689))) (g$665$10990 g$665$11682 g$665$11683 g$665$11684)))) (set! g$665$11018 (lambda (g$665$11692 g$665$11693) (g$665$11016 g$665$11693 (list g$665$11692) '(shift)))) (set! g$665$11020 (lambda (g$665$11696 g$665$11697) (g$665$11016 g$665$11697 '() (list g$665$11696)))) (set! g$665$11022 (lambda (g$665$11700 g$665$11701) (if (g$665$10992 g$665$11700) (g$665$11022 (g$665$10994 g$665$11700) g$665$11701) (g$665$11701 g$665$11700)))) (set! g$665$11024 (lambda (g$665$11704) (if (g$665$10992 g$665$11704) ((lambda (g$665$11706 g$665$11707 g$665$11708) (map (lambda (g$665$11712) (g$665$11016 g$665$11712 g$665$11707 g$665$11708)) g$665$11706)) (g$665$11024 (g$665$10994 g$665$11704)) (g$665$10996 g$665$11704) (g$665$10998 g$665$11704)) (if (vector? g$665$11704) (vector->list g$665$11704) (error 'syntax-vector->list '"not a syntax vector ~s" g$665$11704))))) (set! g$665$11026 (lambda (g$665$11714) (g$665$11022 g$665$11714 pair?))) (set! g$665$11028 (lambda (g$665$11716) (g$665$11022 g$665$11716 vector?))) (set! g$665$11030 (lambda (g$665$11718) (g$665$11022 g$665$11718 null?))) (set! g$665$11032 (lambda (g$665$11720) ((lambda (g$665$11722) (if g$665$11722 g$665$11722 (begin '#f (if (g$665$11026 g$665$11720) (begin '#f (g$665$11032 (g$665$11038 g$665$11720))) '#f)))) (g$665$11030 g$665$11720)))) (set! g$665$11034 (lambda (g$665$11724) (if (g$665$10992 g$665$11724) (g$665$11016 (g$665$11034 (g$665$10994 g$665$11724)) (g$665$10996 g$665$11724) (g$665$10998 g$665$11724)) (if (pair? g$665$11724) (car g$665$11724) (error 'syntax-car '"~s is not a pair" g$665$11724))))) (set! g$665$11036 (lambda (g$665$11726) (if (g$665$11026 g$665$11726) (cons (g$665$11034 g$665$11726) (g$665$11036 (g$665$11038 g$665$11726))) (if (g$665$11030 g$665$11726) '() (error 'syntax->list '"invalid ~s" g$665$11726))))) (set! g$665$11038 (lambda (g$665$11728) (if (g$665$10992 g$665$11728) (g$665$11016 (g$665$11038 (g$665$10994 g$665$11728)) (g$665$10996 g$665$11728) (g$665$10998 g$665$11728)) (if (pair? g$665$11728) (cdr g$665$11728) (error 'syntax-cdr '"~s is not a pair" g$665$11728))))) (set! g$665$11040 (lambda (g$665$11730) (g$665$11022 g$665$11730 symbol?))) (set! g$665$11042 (lambda (g$665$11732) (if (g$665$10992 g$665$11732) (g$665$11042 (g$665$10994 g$665$11732)) (if (symbol? g$665$11732) g$665$11732 (error 'id->sym '"~s is not an id" g$665$11732))))) (set! g$665$11044 (lambda (g$665$11734 g$665$11735) ((lambda (g$665$11738) (if g$665$11738 g$665$11738 (begin '#f (if (pair? g$665$11734) (if (pair? g$665$11735) (if (eq? (car g$665$11734) (car g$665$11735)) (begin '#f (g$665$11044 (cdr g$665$11734) (cdr g$665$11735))) '#f) '#f) '#f)))) (if (null? g$665$11734) (begin '#f (null? g$665$11735)) '#f)))) (set! g$665$11046 (lambda (g$665$11740 g$665$11741) (if (eq? (g$665$11042 g$665$11740) (g$665$11042 g$665$11741)) (begin '#f (g$665$11044 (g$665$10996 g$665$11740) (g$665$10996 g$665$11741))) '#f))) (set! g$665$11048 (lambda (g$665$11744 g$665$11745) ((lambda (g$665$11748 g$665$11749) (if ((lambda (g$665$11752) (if g$665$11752 g$665$11752 (begin '#f g$665$11749))) g$665$11748) (eq? g$665$11748 g$665$11749) (eq? (g$665$11042 g$665$11744) (g$665$11042 g$665$11745)))) (g$665$11062 g$665$11744) (g$665$11062 g$665$11745)))) (set! g$665$11050 (lambda (g$665$11754) (if (for-all g$665$11040 g$665$11754) (begin '#f (g$665$11052 g$665$11754)) '#f))) (set! g$665$11052 (lambda (g$665$11756) ((lambda (g$665$11758) (if g$665$11758 g$665$11758 (begin '#f (if (not (g$665$11054 (car g$665$11756) (cdr g$665$11756))) (begin '#f (g$665$11052 (cdr g$665$11756))) '#f)))) (null? g$665$11756)))) (set! g$665$11054 (lambda (g$665$11760 g$665$11761) (if (pair? g$665$11761) (begin '#f ((lambda (g$665$11764) (if g$665$11764 g$665$11764 (begin '#f (g$665$11054 g$665$11760 (cdr g$665$11761))))) (g$665$11046 g$665$11760 (car g$665$11761)))) '#f))) (set! g$665$11056 (lambda (g$665$11766) ((lambda (g$665$11768) (if g$665$11768 g$665$11768 ((lambda (g$665$11770) (if g$665$11770 g$665$11770 ((lambda (g$665$11772) (if g$665$11772 g$665$11772 (begin '#f (boolean? g$665$11766)))) (char? g$665$11766)))) (string? g$665$11766)))) (number? g$665$11766)))) (set! g$665$11058 (lambda (g$665$11774 g$665$11775) (if (g$665$10948 g$665$11775) g$665$11774 (letrec ((g$665$11778 (lambda (g$665$11780) (if (g$665$10992 g$665$11780) (g$665$11058 (g$665$10994 g$665$11780) (g$665$10996 g$665$11780)) (if (pair? g$665$11780) ((lambda (g$665$11782 g$665$11783) (if (if (eq? g$665$11782 (car g$665$11780)) (begin '#f (eq? g$665$11783 (cdr g$665$11780))) '#f) g$665$11780 (cons g$665$11782 g$665$11783))) (g$665$11778 (car g$665$11780)) (g$665$11778 (cdr g$665$11780))) (if (vector? g$665$11780) ((lambda (g$665$11786) ((lambda (g$665$11788) (if (for-all eq? g$665$11786 g$665$11788) g$665$11780 (list->vector g$665$11788))) (map g$665$11778 g$665$11786))) (vector->list g$665$11780)) g$665$11780)))))) (g$665$11778 g$665$11774))))) (set! g$665$11060 (lambda (g$665$11790) (g$665$11058 g$665$11790 '()))) (set! g$665$11062 (lambda (g$665$11792) ((lambda (g$665$11794) (letrec ((g$665$11796 (lambda (g$665$11798 g$665$11799) (if (null? g$665$11798) (g$665$11512 g$665$11794) (if (eq? (car g$665$11798) 'shift) (g$665$11796 (cdr g$665$11798) (cdr g$665$11799)) ((lambda (g$665$11802) (if (g$665$10967 g$665$11802) ((lambda (g$665$11804) (letrec ((g$665$11806 (lambda (g$665$11808 g$665$11809) (if (= g$665$11808 g$665$11809) (g$665$11796 (cdr g$665$11798) g$665$11799) (if (if (eq? (vector-ref g$665$11804 g$665$11808) g$665$11794) (begin '#f (g$665$11044 g$665$11799 (vector-ref (g$665$10963 g$665$11802) g$665$11808))) '#f) ((lambda (g$665$11812) (begin (g$665$10985 g$665$11802 g$665$11808) g$665$11812)) (vector-ref (g$665$10965 g$665$11802) g$665$11808)) (g$665$11806 (+ g$665$11808 '1) g$665$11809)))))) (g$665$11806 '0 (vector-length g$665$11804)))) (g$665$10961 g$665$11802)) (letrec ((g$665$11814 (lambda (g$665$11816 g$665$11817 g$665$11818) (if (null? g$665$11816) (g$665$11796 (cdr g$665$11798) g$665$11799) (if (if (eq? (car g$665$11816) g$665$11794) (begin '#f (g$665$11044 (car g$665$11817) g$665$11799)) '#f) (car g$665$11818) (g$665$11814 (cdr g$665$11816) (cdr g$665$11817) (cdr g$665$11818))))))) (g$665$11814 (g$665$10961 g$665$11802) (g$665$10963 g$665$11802) (g$665$10965 g$665$11802))))) (car g$665$11798))))))) (g$665$11796 (g$665$10998 g$665$11792) (g$665$10996 g$665$11792)))) (g$665$11042 g$665$11792)))) (set! g$665$11064 (lambda (g$665$11822 g$665$11823) ((lambda (g$665$11826) (if g$665$11826 g$665$11826 (begin '#f ((lambda (g$665$11828) (if g$665$11828 (cdr g$665$11828) '(displaced-lexical . #f))) (assq g$665$11822 g$665$11823))))) (g$665$10646 g$665$11822)))) (set! g$665$11066 cons) (set! g$665$11068 car) (set! g$665$11070 cdr) (set! g$665$11072 (lambda (g$665$11830 g$665$11831) (if (g$665$11040 g$665$11830) ((lambda (g$665$11834) ((lambda (g$665$11836) ((lambda (g$665$11838) ((lambda (g$665$11840) ((lambda () (begin (if g$665$11836 (void) (error 'expander '"~a ~s" '"unbound identifier" (g$665$11058 g$665$11830 '()))) ((lambda (g$665$11842) (if (memv g$665$11842 '(lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module)) (values g$665$11840 (g$665$11070 g$665$11838) g$665$11834) (values 'other '#f '#f))) g$665$11840))))) (g$665$11068 g$665$11838))) (g$665$11064 g$665$11836 g$665$11831))) (g$665$11062 g$665$11834))) g$665$11830) (if (g$665$11026 g$665$11830) ((lambda (g$665$11843) (if (g$665$11040 g$665$11843) ((lambda (g$665$11845) ((lambda (g$665$11847) ((lambda (g$665$11849) ((lambda () (begin (if g$665$11845 (void) (error 'expander '"~a ~s" '"unbound identifier" (g$665$11058 g$665$11830 '()))) ((lambda (g$665$11851) (if (memv g$665$11851 '(define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import)) (values g$665$11849 (g$665$11070 g$665$11847) g$665$11843) (values 'call '#f '#f))) g$665$11849))))) (g$665$11068 g$665$11847))) (g$665$11064 g$665$11845 g$665$11831))) (g$665$11062 g$665$11843)) (values 'call '#f '#f))) (g$665$11034 g$665$11830)) ((lambda (g$665$11852) (if (g$665$11056 g$665$11852) (values 'constant g$665$11852 '#f) (values 'other '#f '#f))) (g$665$11060 g$665$11830)))))) (set! g$665$11086 (lambda (g$665$11854 g$665$11855) (if (procedure? g$665$11854) (cons* 'local-macro g$665$11854 g$665$11855) (if (if (pair? g$665$11854) (if (eq? (car g$665$11854) 'macro!) (begin '#f (procedure? (cdr g$665$11854))) '#f) '#f) (cons* 'local-macro! (cdr g$665$11854) g$665$11855) (if (if (pair? g$665$11854) (begin '#f (eq? (car g$665$11854) '$rtd)) '#f) g$665$11854 (error 'expand '"invalid transformer ~s" g$665$11854)))))) (set! g$665$11088 (lambda (g$665$11858) (if (procedure? g$665$11858) (cons 'macro! g$665$11858) (error 'make-variable-transformer '"~s is not a procedure" g$665$11858)))) (set! g$665$11090 (lambda (g$665$11860) (g$665$11086 (eval-core (g$665$10207 g$665$11860)) g$665$11860))) (set! g$665$11289 (lambda (g$665$11862) ((lambda (g$665$11864) ((lambda (g$665$11866) (if (if g$665$11866 (begin '#f (apply (lambda (g$665$11868 g$665$11869 g$665$11870 g$665$11871) (g$665$11040 g$665$11868)) g$665$11866)) '#f) (apply (lambda (g$665$11876 g$665$11877 g$665$11878 g$665$11879) (values g$665$11876 (cons 'defun (cons g$665$11877 (cons g$665$11878 g$665$11879))))) g$665$11866) ((lambda (g$665$11884) ((lambda (g$665$11886) (if (if g$665$11886 (begin '#f (apply (lambda (g$665$11888 g$665$11889) (g$665$11040 g$665$11888)) g$665$11886)) '#f) (apply (lambda (g$665$11892 g$665$11893) (values g$665$11892 (cons 'expr g$665$11893))) g$665$11886) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$11884 '())))) ((lambda (g$665$11896) (if (g$665$11026 g$665$11896) (begin '#f ((lambda (g$665$11898) (if g$665$11898 (begin '#f ((lambda (g$665$11900) (if g$665$11900 (begin '#f (append g$665$11898 g$665$11900)) '#f)) ((lambda (g$665$11902) (if (g$665$11026 g$665$11902) (begin '#f ((lambda (g$665$11904) (if g$665$11904 (begin '#f ((lambda (g$665$11906) (if g$665$11906 (begin '#f (append g$665$11904 g$665$11906)) '#f)) ((lambda (g$665$11908) (if (g$665$11026 g$665$11908) (begin '#f ((lambda (g$665$11910) (if g$665$11910 (begin '#f ((lambda (g$665$11912) (if g$665$11912 (begin '#f (append g$665$11910 g$665$11912)) '#f)) ((lambda (g$665$11914) (if (equal? (g$665$11060 g$665$11914) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$11908)))) '#f)) ((lambda (g$665$11916) (list g$665$11916)) (g$665$11034 g$665$11908)))) '#f)) (g$665$11038 g$665$11902)))) '#f)) ((lambda (g$665$11918) (list g$665$11918)) (g$665$11034 g$665$11902)))) '#f)) (g$665$11038 g$665$11896)))) '#f)) ((lambda (g$665$11920) '()) (g$665$11034 g$665$11896)))) '#f)) g$665$11884))) g$665$11864))) ((lambda (g$665$11922) (if (g$665$11026 g$665$11922) (begin '#f ((lambda (g$665$11924) (if g$665$11924 (begin '#f ((lambda (g$665$11926) (if g$665$11926 (begin '#f (append g$665$11924 g$665$11926)) '#f)) ((lambda (g$665$11928) (if (g$665$11026 g$665$11928) (begin '#f ((lambda (g$665$11930) (if g$665$11930 (begin '#f ((lambda (g$665$11932) (if g$665$11932 (begin '#f (append g$665$11930 g$665$11932)) '#f)) ((lambda (g$665$11934) (if (g$665$11026 g$665$11934) (begin '#f ((lambda (g$665$11936) (if g$665$11936 (begin '#f ((lambda (g$665$11938) (if g$665$11938 (begin '#f (append g$665$11936 g$665$11938)) '#f)) ((letrec ((g$665$11940 (lambda (g$665$11942) (if (g$665$11026 g$665$11942) ((lambda (g$665$11944) (if g$665$11944 (begin '#f ((lambda (g$665$11946) (if g$665$11946 (begin '#f (map cons g$665$11944 g$665$11946)) '#f)) (g$665$11940 (g$665$11038 g$665$11942)))) '#f)) ((lambda (g$665$11948) (list g$665$11948)) (g$665$11034 g$665$11942))) (if (g$665$11030 g$665$11942) (list (begin 'b* '())) '#f))))) g$665$11940) (g$665$11038 g$665$11934)))) '#f)) ((lambda (g$665$11950) (list g$665$11950)) (g$665$11034 g$665$11934)))) '#f)) (g$665$11038 g$665$11928)))) '#f)) ((lambda (g$665$11952) (if (g$665$11026 g$665$11952) (begin '#f ((lambda (g$665$11954) (if g$665$11954 (begin '#f ((lambda (g$665$11956) (if g$665$11956 (begin '#f (append g$665$11954 g$665$11956)) '#f)) ((lambda (g$665$11958) (list g$665$11958)) (g$665$11038 g$665$11952)))) '#f)) ((lambda (g$665$11960) (list g$665$11960)) (g$665$11034 g$665$11952)))) '#f)) (g$665$11034 g$665$11928)))) '#f)) (g$665$11038 g$665$11922)))) '#f)) ((lambda (g$665$11962) '()) (g$665$11034 g$665$11922)))) '#f)) g$665$11864))) g$665$11862))) (set! g$665$11291 (lambda (g$665$11964) ((lambda (g$665$11966) ((lambda (g$665$11968) (if (if g$665$11968 (begin '#f (apply (lambda (g$665$11970 g$665$11971) (g$665$11040 g$665$11970)) g$665$11968)) '#f) (apply (lambda (g$665$11974 g$665$11975) (values g$665$11974 g$665$11975)) g$665$11968) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$11966 '())))) ((lambda (g$665$11978) (if (g$665$11026 g$665$11978) (begin '#f ((lambda (g$665$11980) (if g$665$11980 (begin '#f ((lambda (g$665$11982) (if g$665$11982 (begin '#f (append g$665$11980 g$665$11982)) '#f)) ((lambda (g$665$11984) (if (g$665$11026 g$665$11984) (begin '#f ((lambda (g$665$11986) (if g$665$11986 (begin '#f ((lambda (g$665$11988) (if g$665$11988 (begin '#f (append g$665$11986 g$665$11988)) '#f)) ((lambda (g$665$11990) (if (g$665$11026 g$665$11990) (begin '#f ((lambda (g$665$11992) (if g$665$11992 (begin '#f ((lambda (g$665$11994) (if g$665$11994 (begin '#f (append g$665$11992 g$665$11994)) '#f)) ((lambda (g$665$11996) (if (equal? (g$665$11060 g$665$11996) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$11990)))) '#f)) ((lambda (g$665$11998) (list g$665$11998)) (g$665$11034 g$665$11990)))) '#f)) (g$665$11038 g$665$11984)))) '#f)) ((lambda (g$665$12000) (list g$665$12000)) (g$665$11034 g$665$11984)))) '#f)) (g$665$11038 g$665$11978)))) '#f)) ((lambda (g$665$12002) '()) (g$665$11034 g$665$11978)))) '#f)) g$665$11966))) g$665$11964))) (set! g$665$11293 (lambda (g$665$12004) ((lambda (g$665$12006) ((lambda (g$665$12008) (if g$665$12008 ((lambda (g$665$12010) ((lambda (g$665$12012 g$665$12013) (g$665$11020 (g$665$10957 (list g$665$12012) (list g$665$10946) (list g$665$12013) '#f) (g$665$11016 g$665$12004 g$665$10946 '()))) (car g$665$12010) (cdr g$665$12010))) g$665$12008) (g$665$11016 g$665$12004 g$665$10946 '()))) (assq g$665$12004 g$665$12006))) (g$665$10679 (g$665$10654 '(psyntax system $all)))))) (set! g$665$11295 (lambda (g$665$12016 g$665$12017 g$665$12018) (cons (cons* g$665$12016 'lexical g$665$12017) g$665$12018))) (set! g$665$11297 (lambda (g$665$12022 g$665$12023 g$665$12024) (if (null? g$665$12022) g$665$12024 (g$665$11297 (cdr g$665$12022) (cdr g$665$12023) (g$665$11295 (car g$665$12022) (car g$665$12023) g$665$12024))))) (set! g$665$11299 (lambda (g$665$12028 g$665$12029 g$665$12030) ((lambda (g$665$12034) ((lambda (g$665$12036) (if (if g$665$12036 (begin '#f (apply (lambda (g$665$12038 g$665$12039 g$665$12040 g$665$12041) '#t) g$665$12036)) '#f) (apply (lambda (g$665$12046 g$665$12047 g$665$12048 g$665$12049) ((lambda (g$665$12054) ((lambda (g$665$12056 g$665$12057) ((lambda (g$665$12060 g$665$12061 g$665$12062) (letrec ((g$665$12066 (lambda (g$665$12068 g$665$12069) (if (null? g$665$12068) (g$665$11411 (g$665$11020 (g$665$10987 g$665$12060 g$665$12061) (cons g$665$12048 g$665$12049)) (g$665$11297 g$665$12061 g$665$12062 g$665$12029) g$665$12030) (list '(primitive call-with-values) (g$665$10929 '#f '() (car g$665$12069)) (g$665$10929 '#f (car g$665$12068) (g$665$12066 (cdr g$665$12068) (cdr g$665$12069)))))))) (g$665$12066 g$665$12056 g$665$12054))) (apply append g$665$12046) (apply append g$665$12057) (apply append g$665$12056))) (map (lambda (g$665$12072) (map g$665$10950 g$665$12072)) g$665$12046) (map (lambda (g$665$12074) (map g$665$10954 g$665$12074)) g$665$12046))) (g$665$11391 g$665$12047 g$665$12029 g$665$12030))) g$665$12036) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12034 '())))) ((lambda (g$665$12076) (if (g$665$11026 g$665$12076) (begin '#f ((lambda (g$665$12078) (if g$665$12078 (begin '#f ((lambda (g$665$12080) (if g$665$12080 (begin '#f (append g$665$12078 g$665$12080)) '#f)) ((lambda (g$665$12082) (if (g$665$11026 g$665$12082) (begin '#f ((lambda (g$665$12084) (if g$665$12084 (begin '#f ((lambda (g$665$12086) (if g$665$12086 (begin '#f (append g$665$12084 g$665$12086)) '#f)) ((lambda (g$665$12088) (if (g$665$11026 g$665$12088) (begin '#f ((lambda (g$665$12090) (if g$665$12090 (begin '#f ((lambda (g$665$12092) (if g$665$12092 (begin '#f (append g$665$12090 g$665$12092)) '#f)) ((letrec ((g$665$12094 (lambda (g$665$12096) (if (g$665$11026 g$665$12096) ((lambda (g$665$12098) (if g$665$12098 (begin '#f ((lambda (g$665$12100) (if g$665$12100 (begin '#f (map cons g$665$12098 g$665$12100)) '#f)) (g$665$12094 (g$665$11038 g$665$12096)))) '#f)) ((lambda (g$665$12102) (list g$665$12102)) (g$665$11034 g$665$12096))) (if (g$665$11030 g$665$12096) (list (begin 'b* '())) '#f))))) g$665$12094) (g$665$11038 g$665$12088)))) '#f)) ((lambda (g$665$12104) (list g$665$12104)) (g$665$11034 g$665$12088)))) '#f)) (g$665$11038 g$665$12082)))) '#f)) ((letrec ((g$665$12106 (lambda (g$665$12108) (if (g$665$11026 g$665$12108) ((lambda (g$665$12110) (if g$665$12110 (begin '#f ((lambda (g$665$12112) (if g$665$12112 (begin '#f (map cons g$665$12110 g$665$12112)) '#f)) (g$665$12106 (g$665$11038 g$665$12108)))) '#f)) ((lambda (g$665$12114) (if (g$665$11026 g$665$12114) (begin '#f ((lambda (g$665$12116) (if g$665$12116 (begin '#f ((lambda (g$665$12118) (if g$665$12118 (begin '#f (append g$665$12116 g$665$12118)) '#f)) ((lambda (g$665$12120) (if (g$665$11026 g$665$12120) (begin '#f ((lambda (g$665$12122) (if g$665$12122 (begin '#f ((lambda (g$665$12124) (if g$665$12124 (begin '#f (append g$665$12122 g$665$12124)) '#f)) ((lambda (g$665$12126) (if (equal? (g$665$11060 g$665$12126) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12120)))) '#f)) ((lambda (g$665$12128) (list g$665$12128)) (g$665$11034 g$665$12120)))) '#f)) (g$665$11038 g$665$12114)))) '#f)) ((letrec ((g$665$12130 (lambda (g$665$12132) (if (g$665$11026 g$665$12132) ((lambda (g$665$12134) (if g$665$12134 (begin '#f ((lambda (g$665$12136) (if g$665$12136 (begin '#f (map cons g$665$12134 g$665$12136)) '#f)) (g$665$12130 (g$665$11038 g$665$12132)))) '#f)) ((lambda (g$665$12138) (list g$665$12138)) (g$665$11034 g$665$12132))) (if (g$665$11030 g$665$12132) (list (begin 'fml** '())) '#f))))) g$665$12130) (g$665$11034 g$665$12114)))) '#f)) (g$665$11034 g$665$12108))) (if (g$665$11030 g$665$12108) (list (begin 'fml** '()) (begin 'rhs* '())) '#f))))) g$665$12106) (g$665$11034 g$665$12082)))) '#f)) (g$665$11038 g$665$12076)))) '#f)) ((lambda (g$665$12140) '()) (g$665$11034 g$665$12076)))) '#f)) g$665$12034))) g$665$12028))) (set! g$665$11301 (lambda (g$665$12142 g$665$12143 g$665$12144 g$665$12145) ((lambda (g$665$12150) ((lambda (g$665$12152) (if (if g$665$12152 (begin '#f (apply (lambda (g$665$12154 g$665$12155 g$665$12156 g$665$12157) '#t) g$665$12152)) '#f) (apply (lambda (g$665$12162 g$665$12163 g$665$12164 g$665$12165) (if (not (g$665$11050 g$665$12162)) (error 'expander '"~a ~s" '"invalid identifiers" (g$665$11058 g$665$12142 '())) ((lambda (g$665$12170 g$665$12171) ((lambda (g$665$12174 g$665$12175) ((lambda (g$665$12178 g$665$12179) (g$665$12145 '#f g$665$12170 g$665$12179 g$665$12178)) (g$665$11411 (g$665$11020 g$665$12174 (cons g$665$12164 g$665$12165)) g$665$12175 g$665$12144) (g$665$11391 (map (lambda (g$665$12182) (g$665$11020 g$665$12174 g$665$12182)) g$665$12163) g$665$12175 g$665$12144))) (g$665$10987 g$665$12162 g$665$12171) (g$665$11297 g$665$12171 g$665$12170 g$665$12143))) (map g$665$10950 g$665$12162) (map g$665$10954 g$665$12162)))) g$665$12152) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12150 '())))) ((lambda (g$665$12184) (if (g$665$11026 g$665$12184) (begin '#f ((lambda (g$665$12186) (if g$665$12186 (begin '#f ((lambda (g$665$12188) (if g$665$12188 (begin '#f (append g$665$12186 g$665$12188)) '#f)) ((lambda (g$665$12190) (if (g$665$11026 g$665$12190) (begin '#f ((lambda (g$665$12192) (if g$665$12192 (begin '#f ((lambda (g$665$12194) (if g$665$12194 (begin '#f (append g$665$12192 g$665$12194)) '#f)) ((lambda (g$665$12196) (if (g$665$11026 g$665$12196) (begin '#f ((lambda (g$665$12198) (if g$665$12198 (begin '#f ((lambda (g$665$12200) (if g$665$12200 (begin '#f (append g$665$12198 g$665$12200)) '#f)) ((letrec ((g$665$12202 (lambda (g$665$12204) (if (g$665$11026 g$665$12204) ((lambda (g$665$12206) (if g$665$12206 (begin '#f ((lambda (g$665$12208) (if g$665$12208 (begin '#f (map cons g$665$12206 g$665$12208)) '#f)) (g$665$12202 (g$665$11038 g$665$12204)))) '#f)) ((lambda (g$665$12210) (list g$665$12210)) (g$665$11034 g$665$12204))) (if (g$665$11030 g$665$12204) (list (begin 'b* '())) '#f))))) g$665$12202) (g$665$11038 g$665$12196)))) '#f)) ((lambda (g$665$12212) (list g$665$12212)) (g$665$11034 g$665$12196)))) '#f)) (g$665$11038 g$665$12190)))) '#f)) ((letrec ((g$665$12214 (lambda (g$665$12216) (if (g$665$11026 g$665$12216) ((lambda (g$665$12218) (if g$665$12218 (begin '#f ((lambda (g$665$12220) (if g$665$12220 (begin '#f (map cons g$665$12218 g$665$12220)) '#f)) (g$665$12214 (g$665$11038 g$665$12216)))) '#f)) ((lambda (g$665$12222) (if (g$665$11026 g$665$12222) (begin '#f ((lambda (g$665$12224) (if g$665$12224 (begin '#f ((lambda (g$665$12226) (if g$665$12226 (begin '#f (append g$665$12224 g$665$12226)) '#f)) ((lambda (g$665$12228) (if (g$665$11026 g$665$12228) (begin '#f ((lambda (g$665$12230) (if g$665$12230 (begin '#f ((lambda (g$665$12232) (if g$665$12232 (begin '#f (append g$665$12230 g$665$12232)) '#f)) ((lambda (g$665$12234) (if (equal? (g$665$11060 g$665$12234) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12228)))) '#f)) ((lambda (g$665$12236) (list g$665$12236)) (g$665$11034 g$665$12228)))) '#f)) (g$665$11038 g$665$12222)))) '#f)) ((lambda (g$665$12238) (list g$665$12238)) (g$665$11034 g$665$12222)))) '#f)) (g$665$11034 g$665$12216))) (if (g$665$11030 g$665$12216) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$665$12214) (g$665$11034 g$665$12190)))) '#f)) (g$665$11038 g$665$12184)))) '#f)) ((lambda (g$665$12240) '()) (g$665$11034 g$665$12184)))) '#f)) g$665$12150))) g$665$12142))) (set! g$665$11303 (lambda (g$665$12242 g$665$12243 g$665$12244) (g$665$11301 g$665$12242 g$665$12243 g$665$12244 g$665$10921))) (set! g$665$11305 (lambda (g$665$12248 g$665$12249 g$665$12250) (g$665$11301 g$665$12248 g$665$12249 g$665$12250 g$665$10920))) (set! g$665$11307 (lambda (g$665$12254 g$665$12255 g$665$12256) ((lambda (g$665$12260) ((lambda (g$665$12262) (if (if g$665$12262 (begin '#f (apply (lambda (g$665$12264) (g$665$11040 g$665$12264)) g$665$12262)) '#f) (apply (lambda (g$665$12266) ((lambda (g$665$12268) ((lambda (g$665$12270) ((lambda (g$665$12272) ((lambda () (begin (if g$665$12268 (void) (error 'expander '"~a ~s" '"unbound identifier" (g$665$11058 g$665$12254 '()))) ((lambda (g$665$12274) (if (memv g$665$12274 '($rtd)) (list 'quote (g$665$11070 g$665$12270)) (error 'expander '"~a ~s" '"invalid type" (g$665$11058 g$665$12254 '())))) g$665$12272))))) (g$665$11068 g$665$12270))) (g$665$11064 g$665$12268 g$665$12255))) (g$665$11062 g$665$12266))) g$665$12262) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12260 '())))) ((lambda (g$665$12275) (if (g$665$11026 g$665$12275) (begin '#f ((lambda (g$665$12277) (if g$665$12277 (begin '#f ((lambda (g$665$12279) (if g$665$12279 (begin '#f (append g$665$12277 g$665$12279)) '#f)) ((lambda (g$665$12281) (if (g$665$11026 g$665$12281) (begin '#f ((lambda (g$665$12283) (if g$665$12283 (begin '#f ((lambda (g$665$12285) (if g$665$12285 (begin '#f (append g$665$12283 g$665$12285)) '#f)) ((lambda (g$665$12287) (if (equal? (g$665$11060 g$665$12287) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12281)))) '#f)) ((lambda (g$665$12289) (list g$665$12289)) (g$665$11034 g$665$12281)))) '#f)) (g$665$11038 g$665$12275)))) '#f)) ((lambda (g$665$12291) '()) (g$665$11034 g$665$12275)))) '#f)) g$665$12260))) g$665$12254))) (set! g$665$11309 (lambda (g$665$12293 g$665$12294 g$665$12295) ((lambda (g$665$12299) ((lambda (g$665$12301) (if (if g$665$12301 (begin '#f (apply (lambda (g$665$12303 g$665$12304 g$665$12305) '#t) g$665$12301)) '#f) (apply (lambda (g$665$12309 g$665$12310 g$665$12311) (list 'if (g$665$11395 g$665$12309 g$665$12294 g$665$12295) (g$665$10923 '#f (g$665$11391 (cons g$665$12310 g$665$12311) g$665$12294 g$665$12295)) (g$665$10922))) g$665$12301) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12299 '())))) ((lambda (g$665$12315) (if (g$665$11026 g$665$12315) (begin '#f ((lambda (g$665$12317) (if g$665$12317 (begin '#f ((lambda (g$665$12319) (if g$665$12319 (begin '#f (append g$665$12317 g$665$12319)) '#f)) ((lambda (g$665$12321) (if (g$665$11026 g$665$12321) (begin '#f ((lambda (g$665$12323) (if g$665$12323 (begin '#f ((lambda (g$665$12325) (if g$665$12325 (begin '#f (append g$665$12323 g$665$12325)) '#f)) ((lambda (g$665$12327) (if (g$665$11026 g$665$12327) (begin '#f ((lambda (g$665$12329) (if g$665$12329 (begin '#f ((lambda (g$665$12331) (if g$665$12331 (begin '#f (append g$665$12329 g$665$12331)) '#f)) ((letrec ((g$665$12333 (lambda (g$665$12335) (if (g$665$11026 g$665$12335) ((lambda (g$665$12337) (if g$665$12337 (begin '#f ((lambda (g$665$12339) (if g$665$12339 (begin '#f (map cons g$665$12337 g$665$12339)) '#f)) (g$665$12333 (g$665$11038 g$665$12335)))) '#f)) ((lambda (g$665$12341) (list g$665$12341)) (g$665$11034 g$665$12335))) (if (g$665$11030 g$665$12335) (list (begin 'e* '())) '#f))))) g$665$12333) (g$665$11038 g$665$12327)))) '#f)) ((lambda (g$665$12343) (list g$665$12343)) (g$665$11034 g$665$12327)))) '#f)) (g$665$11038 g$665$12321)))) '#f)) ((lambda (g$665$12345) (list g$665$12345)) (g$665$11034 g$665$12321)))) '#f)) (g$665$11038 g$665$12315)))) '#f)) ((lambda (g$665$12347) '()) (g$665$11034 g$665$12315)))) '#f)) g$665$12299))) g$665$12293))) (set! g$665$11311 (lambda (g$665$12349 g$665$12350 g$665$12351) ((lambda (g$665$12355) ((lambda (g$665$12357) (if (if g$665$12357 (begin '#f (apply (lambda (g$665$12359 g$665$12360 g$665$12361) '#t) g$665$12357)) '#f) (apply (lambda (g$665$12365 g$665$12366 g$665$12367) (list 'if (g$665$11395 g$665$12365 g$665$12350 g$665$12351) (g$665$10922) (g$665$10923 '#f (g$665$11391 (cons g$665$12366 g$665$12367) g$665$12350 g$665$12351)))) g$665$12357) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12355 '())))) ((lambda (g$665$12371) (if (g$665$11026 g$665$12371) (begin '#f ((lambda (g$665$12373) (if g$665$12373 (begin '#f ((lambda (g$665$12375) (if g$665$12375 (begin '#f (append g$665$12373 g$665$12375)) '#f)) ((lambda (g$665$12377) (if (g$665$11026 g$665$12377) (begin '#f ((lambda (g$665$12379) (if g$665$12379 (begin '#f ((lambda (g$665$12381) (if g$665$12381 (begin '#f (append g$665$12379 g$665$12381)) '#f)) ((lambda (g$665$12383) (if (g$665$11026 g$665$12383) (begin '#f ((lambda (g$665$12385) (if g$665$12385 (begin '#f ((lambda (g$665$12387) (if g$665$12387 (begin '#f (append g$665$12385 g$665$12387)) '#f)) ((letrec ((g$665$12389 (lambda (g$665$12391) (if (g$665$11026 g$665$12391) ((lambda (g$665$12393) (if g$665$12393 (begin '#f ((lambda (g$665$12395) (if g$665$12395 (begin '#f (map cons g$665$12393 g$665$12395)) '#f)) (g$665$12389 (g$665$11038 g$665$12391)))) '#f)) ((lambda (g$665$12397) (list g$665$12397)) (g$665$11034 g$665$12391))) (if (g$665$11030 g$665$12391) (list (begin 'e* '())) '#f))))) g$665$12389) (g$665$11038 g$665$12383)))) '#f)) ((lambda (g$665$12399) (list g$665$12399)) (g$665$11034 g$665$12383)))) '#f)) (g$665$11038 g$665$12377)))) '#f)) ((lambda (g$665$12401) (list g$665$12401)) (g$665$11034 g$665$12377)))) '#f)) (g$665$11038 g$665$12371)))) '#f)) ((lambda (g$665$12403) '()) (g$665$11034 g$665$12371)))) '#f)) g$665$12355))) g$665$12349))) (set! g$665$11313 (lambda (g$665$12405 g$665$12406 g$665$12407) ((lambda (g$665$12411) ((lambda (g$665$12413) (if (if g$665$12413 (begin '#f (apply (lambda (g$665$12415 g$665$12416 g$665$12417) '#t) g$665$12413)) '#f) (apply (lambda (g$665$12421 g$665$12422 g$665$12423) (list 'if (g$665$11395 g$665$12421 g$665$12406 g$665$12407) (g$665$11395 g$665$12422 g$665$12406 g$665$12407) (g$665$11395 g$665$12423 g$665$12406 g$665$12407))) g$665$12413) ((lambda (g$665$12427) ((lambda (g$665$12429) (if (if g$665$12429 (begin '#f (apply (lambda (g$665$12431 g$665$12432) '#t) g$665$12429)) '#f) (apply (lambda (g$665$12435 g$665$12436) (list 'if (g$665$11395 g$665$12435 g$665$12406 g$665$12407) (g$665$11395 g$665$12436 g$665$12406 g$665$12407) (g$665$10922))) g$665$12429) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12427 '())))) ((lambda (g$665$12439) (if (g$665$11026 g$665$12439) (begin '#f ((lambda (g$665$12441) (if g$665$12441 (begin '#f ((lambda (g$665$12443) (if g$665$12443 (begin '#f (append g$665$12441 g$665$12443)) '#f)) ((lambda (g$665$12445) (if (g$665$11026 g$665$12445) (begin '#f ((lambda (g$665$12447) (if g$665$12447 (begin '#f ((lambda (g$665$12449) (if g$665$12449 (begin '#f (append g$665$12447 g$665$12449)) '#f)) ((lambda (g$665$12451) (if (g$665$11026 g$665$12451) (begin '#f ((lambda (g$665$12453) (if g$665$12453 (begin '#f ((lambda (g$665$12455) (if g$665$12455 (begin '#f (append g$665$12453 g$665$12455)) '#f)) ((lambda (g$665$12457) (if (equal? (g$665$11060 g$665$12457) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12451)))) '#f)) ((lambda (g$665$12459) (list g$665$12459)) (g$665$11034 g$665$12451)))) '#f)) (g$665$11038 g$665$12445)))) '#f)) ((lambda (g$665$12461) (list g$665$12461)) (g$665$11034 g$665$12445)))) '#f)) (g$665$11038 g$665$12439)))) '#f)) ((lambda (g$665$12463) '()) (g$665$11034 g$665$12439)))) '#f)) g$665$12427))) g$665$12411))) ((lambda (g$665$12465) (if (g$665$11026 g$665$12465) (begin '#f ((lambda (g$665$12467) (if g$665$12467 (begin '#f ((lambda (g$665$12469) (if g$665$12469 (begin '#f (append g$665$12467 g$665$12469)) '#f)) ((lambda (g$665$12471) (if (g$665$11026 g$665$12471) (begin '#f ((lambda (g$665$12473) (if g$665$12473 (begin '#f ((lambda (g$665$12475) (if g$665$12475 (begin '#f (append g$665$12473 g$665$12475)) '#f)) ((lambda (g$665$12477) (if (g$665$11026 g$665$12477) (begin '#f ((lambda (g$665$12479) (if g$665$12479 (begin '#f ((lambda (g$665$12481) (if g$665$12481 (begin '#f (append g$665$12479 g$665$12481)) '#f)) ((lambda (g$665$12483) (if (g$665$11026 g$665$12483) (begin '#f ((lambda (g$665$12485) (if g$665$12485 (begin '#f ((lambda (g$665$12487) (if g$665$12487 (begin '#f (append g$665$12485 g$665$12487)) '#f)) ((lambda (g$665$12489) (if (equal? (g$665$11060 g$665$12489) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12483)))) '#f)) ((lambda (g$665$12491) (list g$665$12491)) (g$665$11034 g$665$12483)))) '#f)) (g$665$11038 g$665$12477)))) '#f)) ((lambda (g$665$12493) (list g$665$12493)) (g$665$11034 g$665$12477)))) '#f)) (g$665$11038 g$665$12471)))) '#f)) ((lambda (g$665$12495) (list g$665$12495)) (g$665$11034 g$665$12471)))) '#f)) (g$665$11038 g$665$12465)))) '#f)) ((lambda (g$665$12497) '()) (g$665$11034 g$665$12465)))) '#f)) g$665$12411))) g$665$12405))) (set! g$665$11315 (lambda (g$665$12499 g$665$12500 g$665$12501) ((lambda (g$665$12505 g$665$12507) (begin (set! g$665$12505 (lambda (g$665$12615 g$665$12616 g$665$12617) ((lambda (g$665$12621) ((lambda (g$665$12623) (if (if g$665$12623 (begin '#f (apply (lambda (g$665$12625 g$665$12626 g$665$12627) '#t) g$665$12623)) '#f) (apply (lambda (g$665$12631 g$665$12632 g$665$12633) (list 'if (list '(primitive memv) g$665$12615 (list 'quote (g$665$11060 g$665$12631))) (g$665$10923 '#f (g$665$11391 (cons g$665$12632 g$665$12633) g$665$12500 g$665$12501)) g$665$12617)) g$665$12623) ((lambda (g$665$12637) ((lambda (g$665$12639) (if (if g$665$12639 (begin '#f (apply (lambda (g$665$12641) '#t) g$665$12639)) '#f) (apply (lambda (g$665$12643) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$12499))) g$665$12639) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12637 '())))) ((lambda (g$665$12645) (list g$665$12645)) g$665$12637))) g$665$12621))) ((lambda (g$665$12647) (if (g$665$11026 g$665$12647) (begin '#f ((lambda (g$665$12649) (if g$665$12649 (begin '#f ((lambda (g$665$12651) (if g$665$12651 (begin '#f (append g$665$12649 g$665$12651)) '#f)) ((lambda (g$665$12653) (if (g$665$11026 g$665$12653) (begin '#f ((lambda (g$665$12655) (if g$665$12655 (begin '#f ((lambda (g$665$12657) (if g$665$12657 (begin '#f (append g$665$12655 g$665$12657)) '#f)) ((letrec ((g$665$12659 (lambda (g$665$12661) (if (g$665$11026 g$665$12661) ((lambda (g$665$12663) (if g$665$12663 (begin '#f ((lambda (g$665$12665) (if g$665$12665 (begin '#f (map cons g$665$12663 g$665$12665)) '#f)) (g$665$12659 (g$665$11038 g$665$12661)))) '#f)) ((lambda (g$665$12667) (list g$665$12667)) (g$665$11034 g$665$12661))) (if (g$665$11030 g$665$12661) (list (begin 'e* '())) '#f))))) g$665$12659) (g$665$11038 g$665$12653)))) '#f)) ((lambda (g$665$12669) (list g$665$12669)) (g$665$11034 g$665$12653)))) '#f)) (g$665$11038 g$665$12647)))) '#f)) ((letrec ((g$665$12671 (lambda (g$665$12673) (if (g$665$11026 g$665$12673) ((lambda (g$665$12675) (if g$665$12675 (begin '#f ((lambda (g$665$12677) (if g$665$12677 (begin '#f (map cons g$665$12675 g$665$12677)) '#f)) (g$665$12671 (g$665$11038 g$665$12673)))) '#f)) ((lambda (g$665$12679) (list g$665$12679)) (g$665$11034 g$665$12673))) (if (g$665$11030 g$665$12673) (list (begin 'd* '())) '#f))))) g$665$12671) (g$665$11034 g$665$12647)))) '#f)) g$665$12621))) g$665$12616))) (set! g$665$12507 (lambda (g$665$12509 g$665$12510) ((lambda (g$665$12513) ((lambda (g$665$12515) (if (if g$665$12515 (begin '#f (apply (lambda (g$665$12517 g$665$12518 g$665$12519) '#t) g$665$12515)) '#f) (apply (lambda (g$665$12523 g$665$12524 g$665$12525) (g$665$12505 g$665$12509 g$665$12510 (g$665$10922))) g$665$12515) ((lambda (g$665$12529) ((lambda (g$665$12531) (if (if g$665$12531 (begin '#f (apply (lambda (g$665$12533 g$665$12534 g$665$12535) '#t) g$665$12531)) '#f) (apply (lambda (g$665$12539 g$665$12540 g$665$12541) (if (if (g$665$11040 g$665$12539) (begin '#f (g$665$11048 g$665$12539 (g$665$11293 'else))) '#f) (g$665$10923 '#f (g$665$11391 (cons g$665$12540 g$665$12541) g$665$12500 g$665$12501)) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$12499)))) g$665$12531) ((lambda (g$665$12545) ((lambda (g$665$12547) (if (if g$665$12547 (begin '#f (apply (lambda (g$665$12549) '#t) g$665$12547)) '#f) (apply (lambda (g$665$12551) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$12499))) g$665$12547) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12545 '())))) ((lambda (g$665$12553) (list g$665$12553)) g$665$12545))) g$665$12529))) ((lambda (g$665$12555) (if (g$665$11026 g$665$12555) (begin '#f ((lambda (g$665$12557) (if g$665$12557 (begin '#f ((lambda (g$665$12559) (if g$665$12559 (begin '#f (append g$665$12557 g$665$12559)) '#f)) ((lambda (g$665$12561) (if (g$665$11026 g$665$12561) (begin '#f ((lambda (g$665$12563) (if g$665$12563 (begin '#f ((lambda (g$665$12565) (if g$665$12565 (begin '#f (append g$665$12563 g$665$12565)) '#f)) ((letrec ((g$665$12567 (lambda (g$665$12569) (if (g$665$11026 g$665$12569) ((lambda (g$665$12571) (if g$665$12571 (begin '#f ((lambda (g$665$12573) (if g$665$12573 (begin '#f (map cons g$665$12571 g$665$12573)) '#f)) (g$665$12567 (g$665$11038 g$665$12569)))) '#f)) ((lambda (g$665$12575) (list g$665$12575)) (g$665$11034 g$665$12569))) (if (g$665$11030 g$665$12569) (list (begin 'x* '())) '#f))))) g$665$12567) (g$665$11038 g$665$12561)))) '#f)) ((lambda (g$665$12577) (list g$665$12577)) (g$665$11034 g$665$12561)))) '#f)) (g$665$11038 g$665$12555)))) '#f)) ((lambda (g$665$12579) (list g$665$12579)) (g$665$11034 g$665$12555)))) '#f)) g$665$12529))) g$665$12513))) ((lambda (g$665$12581) (if (g$665$11026 g$665$12581) (begin '#f ((lambda (g$665$12583) (if g$665$12583 (begin '#f ((lambda (g$665$12585) (if g$665$12585 (begin '#f (append g$665$12583 g$665$12585)) '#f)) ((lambda (g$665$12587) (if (g$665$11026 g$665$12587) (begin '#f ((lambda (g$665$12589) (if g$665$12589 (begin '#f ((lambda (g$665$12591) (if g$665$12591 (begin '#f (append g$665$12589 g$665$12591)) '#f)) ((letrec ((g$665$12593 (lambda (g$665$12595) (if (g$665$11026 g$665$12595) ((lambda (g$665$12597) (if g$665$12597 (begin '#f ((lambda (g$665$12599) (if g$665$12599 (begin '#f (map cons g$665$12597 g$665$12599)) '#f)) (g$665$12593 (g$665$11038 g$665$12595)))) '#f)) ((lambda (g$665$12601) (list g$665$12601)) (g$665$11034 g$665$12595))) (if (g$665$11030 g$665$12595) (list (begin 'e* '())) '#f))))) g$665$12593) (g$665$11038 g$665$12587)))) '#f)) ((lambda (g$665$12603) (list g$665$12603)) (g$665$11034 g$665$12587)))) '#f)) (g$665$11038 g$665$12581)))) '#f)) ((letrec ((g$665$12605 (lambda (g$665$12607) (if (g$665$11026 g$665$12607) ((lambda (g$665$12609) (if g$665$12609 (begin '#f ((lambda (g$665$12611) (if g$665$12611 (begin '#f (map cons g$665$12609 g$665$12611)) '#f)) (g$665$12605 (g$665$11038 g$665$12607)))) '#f)) ((lambda (g$665$12613) (list g$665$12613)) (g$665$11034 g$665$12607))) (if (g$665$11030 g$665$12607) (list (begin 'd* '())) '#f))))) g$665$12605) (g$665$11034 g$665$12581)))) '#f)) g$665$12513))) g$665$12510))) ((lambda (g$665$12681) ((lambda (g$665$12683) (if (if g$665$12683 (begin '#f (apply (lambda (g$665$12685) '#t) g$665$12683)) '#f) (apply (lambda (g$665$12687) (g$665$10923 '#f (list (g$665$11395 g$665$12687 g$665$12500 g$665$12501) (g$665$10922)))) g$665$12683) ((lambda (g$665$12689) ((lambda (g$665$12691) (if (if g$665$12691 (begin '#f (apply (lambda (g$665$12693 g$665$12694 g$665$12695) '#t) g$665$12691)) '#f) (apply (lambda (g$665$12699 g$665$12700 g$665$12701) ((lambda (g$665$12705) (g$665$10927 '#f (list g$665$12705) (list (g$665$11395 g$665$12699 g$665$12500 g$665$12501)) (letrec ((g$665$12707 (lambda (g$665$12709 g$665$12710) (if (null? g$665$12710) (g$665$12507 g$665$12705 g$665$12709) (g$665$12505 g$665$12705 g$665$12709 (g$665$12707 (car g$665$12710) (cdr g$665$12710))))))) (g$665$12707 g$665$12700 g$665$12701)))) (g$665$10950 't))) g$665$12691) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12689 '())))) ((lambda (g$665$12713) (if (g$665$11026 g$665$12713) (begin '#f ((lambda (g$665$12715) (if g$665$12715 (begin '#f ((lambda (g$665$12717) (if g$665$12717 (begin '#f (append g$665$12715 g$665$12717)) '#f)) ((lambda (g$665$12719) (if (g$665$11026 g$665$12719) (begin '#f ((lambda (g$665$12721) (if g$665$12721 (begin '#f ((lambda (g$665$12723) (if g$665$12723 (begin '#f (append g$665$12721 g$665$12723)) '#f)) ((lambda (g$665$12725) (if (g$665$11026 g$665$12725) (begin '#f ((lambda (g$665$12727) (if g$665$12727 (begin '#f ((lambda (g$665$12729) (if g$665$12729 (begin '#f (append g$665$12727 g$665$12729)) '#f)) ((letrec ((g$665$12731 (lambda (g$665$12733) (if (g$665$11026 g$665$12733) ((lambda (g$665$12735) (if g$665$12735 (begin '#f ((lambda (g$665$12737) (if g$665$12737 (begin '#f (map cons g$665$12735 g$665$12737)) '#f)) (g$665$12731 (g$665$11038 g$665$12733)))) '#f)) ((lambda (g$665$12739) (list g$665$12739)) (g$665$11034 g$665$12733))) (if (g$665$11030 g$665$12733) (list (begin 'cls* '())) '#f))))) g$665$12731) (g$665$11038 g$665$12725)))) '#f)) ((lambda (g$665$12741) (list g$665$12741)) (g$665$11034 g$665$12725)))) '#f)) (g$665$11038 g$665$12719)))) '#f)) ((lambda (g$665$12743) (list g$665$12743)) (g$665$11034 g$665$12719)))) '#f)) (g$665$11038 g$665$12713)))) '#f)) ((lambda (g$665$12745) '()) (g$665$11034 g$665$12713)))) '#f)) g$665$12689))) g$665$12681))) ((lambda (g$665$12747) (if (g$665$11026 g$665$12747) (begin '#f ((lambda (g$665$12749) (if g$665$12749 (begin '#f ((lambda (g$665$12751) (if g$665$12751 (begin '#f (append g$665$12749 g$665$12751)) '#f)) ((lambda (g$665$12753) (if (g$665$11026 g$665$12753) (begin '#f ((lambda (g$665$12755) (if g$665$12755 (begin '#f ((lambda (g$665$12757) (if g$665$12757 (begin '#f (append g$665$12755 g$665$12757)) '#f)) ((lambda (g$665$12759) (if (equal? (g$665$11060 g$665$12759) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12753)))) '#f)) ((lambda (g$665$12761) (list g$665$12761)) (g$665$11034 g$665$12753)))) '#f)) (g$665$11038 g$665$12747)))) '#f)) ((lambda (g$665$12763) '()) (g$665$11034 g$665$12747)))) '#f)) g$665$12681))) g$665$12499))) '#f '#f))) (set! g$665$11317 (lambda (g$665$12765 g$665$12766 g$665$12767) ((lambda (g$665$12771) ((lambda (g$665$12773) (if (if g$665$12773 (begin '#f (apply (lambda (g$665$12775) '#t) g$665$12773)) '#f) (apply (lambda (g$665$12777) (list 'quote (g$665$11060 g$665$12777))) g$665$12773) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12771 '())))) ((lambda (g$665$12779) (if (g$665$11026 g$665$12779) (begin '#f ((lambda (g$665$12781) (if g$665$12781 (begin '#f ((lambda (g$665$12783) (if g$665$12783 (begin '#f (append g$665$12781 g$665$12783)) '#f)) ((lambda (g$665$12785) (if (g$665$11026 g$665$12785) (begin '#f ((lambda (g$665$12787) (if g$665$12787 (begin '#f ((lambda (g$665$12789) (if g$665$12789 (begin '#f (append g$665$12787 g$665$12789)) '#f)) ((lambda (g$665$12791) (if (equal? (g$665$11060 g$665$12791) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12785)))) '#f)) ((lambda (g$665$12793) (list g$665$12793)) (g$665$11034 g$665$12785)))) '#f)) (g$665$11038 g$665$12779)))) '#f)) ((lambda (g$665$12795) '()) (g$665$11034 g$665$12779)))) '#f)) g$665$12771))) g$665$12765))) (set! g$665$11319 (lambda (g$665$12797 g$665$12798 g$665$12799) ((lambda (g$665$12803) ((lambda (g$665$12805) (if (if g$665$12805 (begin '#f (apply (lambda (g$665$12807 g$665$12808 g$665$12809) '#t) g$665$12805)) '#f) (apply (lambda (g$665$12813 g$665$12814 g$665$12815) (call-with-values (lambda () (g$665$11401 g$665$12813 (map cons g$665$12814 g$665$12815) g$665$12798 g$665$12799)) (lambda (g$665$12819 g$665$12820) (g$665$10928 '#f g$665$12819 g$665$12820)))) g$665$12805) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12803 '())))) ((lambda (g$665$12823) (if (g$665$11026 g$665$12823) (begin '#f ((lambda (g$665$12825) (if g$665$12825 (begin '#f ((lambda (g$665$12827) (if g$665$12827 (begin '#f (append g$665$12825 g$665$12827)) '#f)) ((letrec ((g$665$12829 (lambda (g$665$12831) (if (g$665$11026 g$665$12831) ((lambda (g$665$12833) (if g$665$12833 (begin '#f ((lambda (g$665$12835) (if g$665$12835 (begin '#f (map cons g$665$12833 g$665$12835)) '#f)) (g$665$12829 (g$665$11038 g$665$12831)))) '#f)) ((lambda (g$665$12837) (if (g$665$11026 g$665$12837) (begin '#f ((lambda (g$665$12839) (if g$665$12839 (begin '#f ((lambda (g$665$12841) (if g$665$12841 (begin '#f (append g$665$12839 g$665$12841)) '#f)) ((lambda (g$665$12843) (if (g$665$11026 g$665$12843) (begin '#f ((lambda (g$665$12845) (if g$665$12845 (begin '#f ((lambda (g$665$12847) (if g$665$12847 (begin '#f (append g$665$12845 g$665$12847)) '#f)) ((letrec ((g$665$12849 (lambda (g$665$12851) (if (g$665$11026 g$665$12851) ((lambda (g$665$12853) (if g$665$12853 (begin '#f ((lambda (g$665$12855) (if g$665$12855 (begin '#f (map cons g$665$12853 g$665$12855)) '#f)) (g$665$12849 (g$665$11038 g$665$12851)))) '#f)) ((lambda (g$665$12857) (list g$665$12857)) (g$665$11034 g$665$12851))) (if (g$665$11030 g$665$12851) (list (begin 'b** '())) '#f))))) g$665$12849) (g$665$11038 g$665$12843)))) '#f)) ((lambda (g$665$12859) (list g$665$12859)) (g$665$11034 g$665$12843)))) '#f)) (g$665$11038 g$665$12837)))) '#f)) ((lambda (g$665$12861) (list g$665$12861)) (g$665$11034 g$665$12837)))) '#f)) (g$665$11034 g$665$12831))) (if (g$665$11030 g$665$12831) (list (begin 'fmls* '()) (begin 'b* '()) (begin 'b** '())) '#f))))) g$665$12829) (g$665$11038 g$665$12823)))) '#f)) ((lambda (g$665$12863) '()) (g$665$11034 g$665$12823)))) '#f)) g$665$12803))) g$665$12797))) (set! g$665$11321 (lambda (g$665$12865 g$665$12866 g$665$12867) ((lambda (g$665$12871) ((lambda (g$665$12873) (if (if g$665$12873 (begin '#f (apply (lambda (g$665$12875 g$665$12876 g$665$12877) '#t) g$665$12873)) '#f) (apply (lambda (g$665$12881 g$665$12882 g$665$12883) (call-with-values (lambda () (g$665$11399 g$665$12881 (cons g$665$12882 g$665$12883) g$665$12866 g$665$12867)) (lambda (g$665$12887 g$665$12888) (g$665$10929 '#f g$665$12887 g$665$12888)))) g$665$12873) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12871 '())))) ((lambda (g$665$12891) (if (g$665$11026 g$665$12891) (begin '#f ((lambda (g$665$12893) (if g$665$12893 (begin '#f ((lambda (g$665$12895) (if g$665$12895 (begin '#f (append g$665$12893 g$665$12895)) '#f)) ((lambda (g$665$12897) (if (g$665$11026 g$665$12897) (begin '#f ((lambda (g$665$12899) (if g$665$12899 (begin '#f ((lambda (g$665$12901) (if g$665$12901 (begin '#f (append g$665$12899 g$665$12901)) '#f)) ((lambda (g$665$12903) (if (g$665$11026 g$665$12903) (begin '#f ((lambda (g$665$12905) (if g$665$12905 (begin '#f ((lambda (g$665$12907) (if g$665$12907 (begin '#f (append g$665$12905 g$665$12907)) '#f)) ((letrec ((g$665$12909 (lambda (g$665$12911) (if (g$665$11026 g$665$12911) ((lambda (g$665$12913) (if g$665$12913 (begin '#f ((lambda (g$665$12915) (if g$665$12915 (begin '#f (map cons g$665$12913 g$665$12915)) '#f)) (g$665$12909 (g$665$11038 g$665$12911)))) '#f)) ((lambda (g$665$12917) (list g$665$12917)) (g$665$11034 g$665$12911))) (if (g$665$11030 g$665$12911) (list (begin 'b* '())) '#f))))) g$665$12909) (g$665$11038 g$665$12903)))) '#f)) ((lambda (g$665$12919) (list g$665$12919)) (g$665$11034 g$665$12903)))) '#f)) (g$665$11038 g$665$12897)))) '#f)) ((lambda (g$665$12921) (list g$665$12921)) (g$665$11034 g$665$12897)))) '#f)) (g$665$11038 g$665$12891)))) '#f)) ((lambda (g$665$12923) '()) (g$665$11034 g$665$12891)))) '#f)) g$665$12871))) g$665$12865))) (set! g$665$11323 (lambda (g$665$12925) (g$665$11016 (letrec ((g$665$12927 (lambda (g$665$12929) (if (g$665$10992 g$665$12929) g$665$12929 (if (pair? g$665$12929) (cons (g$665$12927 (car g$665$12929)) (g$665$12927 (cdr g$665$12929))) (if (symbol? g$665$12929) (g$665$11293 g$665$12929) (if (vector? g$665$12929) (list->vector (map g$665$12927 (vector->list g$665$12929))) g$665$12929))))))) (g$665$12927 g$665$12925)) '() '()))) (set! g$665$11325 (lambda (g$665$12931) ((lambda (g$665$12933) ((lambda (g$665$12935) (if (if g$665$12935 (begin '#f (apply (lambda (g$665$12937 g$665$12938 g$665$12939 g$665$12940) '#t) g$665$12935)) '#f) (apply (lambda (g$665$12945 g$665$12946 g$665$12947 g$665$12948) (g$665$11323 (list 'syntax-case (cons 'list g$665$12946) '() (list g$665$12945 (cons 'begin (cons g$665$12947 g$665$12948)))))) g$665$12935) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$12933 '())))) ((lambda (g$665$12953) (if (g$665$11026 g$665$12953) (begin '#f ((lambda (g$665$12955) (if g$665$12955 (begin '#f ((lambda (g$665$12957) (if g$665$12957 (begin '#f (append g$665$12955 g$665$12957)) '#f)) ((lambda (g$665$12959) (if (g$665$11026 g$665$12959) (begin '#f ((lambda (g$665$12961) (if g$665$12961 (begin '#f ((lambda (g$665$12963) (if g$665$12963 (begin '#f (append g$665$12961 g$665$12963)) '#f)) ((lambda (g$665$12965) (if (g$665$11026 g$665$12965) (begin '#f ((lambda (g$665$12967) (if g$665$12967 (begin '#f ((lambda (g$665$12969) (if g$665$12969 (begin '#f (append g$665$12967 g$665$12969)) '#f)) ((letrec ((g$665$12971 (lambda (g$665$12973) (if (g$665$11026 g$665$12973) ((lambda (g$665$12975) (if g$665$12975 (begin '#f ((lambda (g$665$12977) (if g$665$12977 (begin '#f (map cons g$665$12975 g$665$12977)) '#f)) (g$665$12971 (g$665$11038 g$665$12973)))) '#f)) ((lambda (g$665$12979) (list g$665$12979)) (g$665$11034 g$665$12973))) (if (g$665$11030 g$665$12973) (list (begin 'b* '())) '#f))))) g$665$12971) (g$665$11038 g$665$12965)))) '#f)) ((lambda (g$665$12981) (list g$665$12981)) (g$665$11034 g$665$12965)))) '#f)) (g$665$11038 g$665$12959)))) '#f)) ((letrec ((g$665$12983 (lambda (g$665$12985) (if (g$665$11026 g$665$12985) ((lambda (g$665$12987) (if g$665$12987 (begin '#f ((lambda (g$665$12989) (if g$665$12989 (begin '#f (map cons g$665$12987 g$665$12989)) '#f)) (g$665$12983 (g$665$11038 g$665$12985)))) '#f)) ((lambda (g$665$12991) (if (g$665$11026 g$665$12991) (begin '#f ((lambda (g$665$12993) (if g$665$12993 (begin '#f ((lambda (g$665$12995) (if g$665$12995 (begin '#f (append g$665$12993 g$665$12995)) '#f)) ((lambda (g$665$12997) (if (g$665$11026 g$665$12997) (begin '#f ((lambda (g$665$12999) (if g$665$12999 (begin '#f ((lambda (g$665$13001) (if g$665$13001 (begin '#f (append g$665$12999 g$665$13001)) '#f)) ((lambda (g$665$13003) (if (equal? (g$665$11060 g$665$13003) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$12997)))) '#f)) ((lambda (g$665$13005) (list g$665$13005)) (g$665$11034 g$665$12997)))) '#f)) (g$665$11038 g$665$12991)))) '#f)) ((lambda (g$665$13007) (list g$665$13007)) (g$665$11034 g$665$12991)))) '#f)) (g$665$11034 g$665$12985))) (if (g$665$11030 g$665$12985) (list (begin 'fml* '()) (begin 'expr* '())) '#f))))) g$665$12983) (g$665$11034 g$665$12959)))) '#f)) (g$665$11038 g$665$12953)))) '#f)) ((lambda (g$665$13009) '()) (g$665$11034 g$665$12953)))) '#f)) g$665$12933))) g$665$12931))) (set! g$665$11327 (lambda (g$665$13011) ((lambda (g$665$13013) ((lambda (g$665$13015) (if (if g$665$13015 (begin '#f (apply (lambda (g$665$13017 g$665$13018 g$665$13019 g$665$13020) '#t) g$665$13015)) '#f) (apply (lambda (g$665$13025 g$665$13026 g$665$13027 g$665$13028) (if (g$665$11050 g$665$13025) (g$665$11323 (cons (cons 'lambda (cons g$665$13025 (cons g$665$13027 g$665$13028))) g$665$13026)) (error 'expander '"~a ~s" '"invalid bindings" (g$665$11058 g$665$13011 '())))) g$665$13015) ((lambda (g$665$13033) ((lambda (g$665$13035) (if (if g$665$13035 (begin '#f (apply (lambda (g$665$13037 g$665$13038 g$665$13039 g$665$13040 g$665$13041) (g$665$11040 g$665$13037)) g$665$13035)) '#f) (apply (lambda (g$665$13047 g$665$13048 g$665$13049 g$665$13050 g$665$13051) (if (g$665$11050 g$665$13048) (g$665$11323 (list 'letrec (list (list g$665$13047 (cons 'lambda (cons g$665$13048 (cons g$665$13050 g$665$13051))))) (cons g$665$13047 g$665$13049))) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13011 '())))) g$665$13035) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13033 '())))) ((lambda (g$665$13057) (if (g$665$11026 g$665$13057) (begin '#f ((lambda (g$665$13059) (if g$665$13059 (begin '#f ((lambda (g$665$13061) (if g$665$13061 (begin '#f (append g$665$13059 g$665$13061)) '#f)) ((lambda (g$665$13063) (if (g$665$11026 g$665$13063) (begin '#f ((lambda (g$665$13065) (if g$665$13065 (begin '#f ((lambda (g$665$13067) (if g$665$13067 (begin '#f (append g$665$13065 g$665$13067)) '#f)) ((lambda (g$665$13069) (if (g$665$11026 g$665$13069) (begin '#f ((lambda (g$665$13071) (if g$665$13071 (begin '#f ((lambda (g$665$13073) (if g$665$13073 (begin '#f (append g$665$13071 g$665$13073)) '#f)) ((lambda (g$665$13075) (if (g$665$11026 g$665$13075) (begin '#f ((lambda (g$665$13077) (if g$665$13077 (begin '#f ((lambda (g$665$13079) (if g$665$13079 (begin '#f (append g$665$13077 g$665$13079)) '#f)) ((letrec ((g$665$13081 (lambda (g$665$13083) (if (g$665$11026 g$665$13083) ((lambda (g$665$13085) (if g$665$13085 (begin '#f ((lambda (g$665$13087) (if g$665$13087 (begin '#f (map cons g$665$13085 g$665$13087)) '#f)) (g$665$13081 (g$665$11038 g$665$13083)))) '#f)) ((lambda (g$665$13089) (list g$665$13089)) (g$665$11034 g$665$13083))) (if (g$665$11030 g$665$13083) (list (begin 'b* '())) '#f))))) g$665$13081) (g$665$11038 g$665$13075)))) '#f)) ((lambda (g$665$13091) (list g$665$13091)) (g$665$11034 g$665$13075)))) '#f)) (g$665$11038 g$665$13069)))) '#f)) ((letrec ((g$665$13093 (lambda (g$665$13095) (if (g$665$11026 g$665$13095) ((lambda (g$665$13097) (if g$665$13097 (begin '#f ((lambda (g$665$13099) (if g$665$13099 (begin '#f (map cons g$665$13097 g$665$13099)) '#f)) (g$665$13093 (g$665$11038 g$665$13095)))) '#f)) ((lambda (g$665$13101) (if (g$665$11026 g$665$13101) (begin '#f ((lambda (g$665$13103) (if g$665$13103 (begin '#f ((lambda (g$665$13105) (if g$665$13105 (begin '#f (append g$665$13103 g$665$13105)) '#f)) ((lambda (g$665$13107) (if (g$665$11026 g$665$13107) (begin '#f ((lambda (g$665$13109) (if g$665$13109 (begin '#f ((lambda (g$665$13111) (if g$665$13111 (begin '#f (append g$665$13109 g$665$13111)) '#f)) ((lambda (g$665$13113) (if (equal? (g$665$11060 g$665$13113) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13107)))) '#f)) ((lambda (g$665$13115) (list g$665$13115)) (g$665$11034 g$665$13107)))) '#f)) (g$665$11038 g$665$13101)))) '#f)) ((lambda (g$665$13117) (list g$665$13117)) (g$665$11034 g$665$13101)))) '#f)) (g$665$11034 g$665$13095))) (if (g$665$11030 g$665$13095) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$665$13093) (g$665$11034 g$665$13069)))) '#f)) (g$665$11038 g$665$13063)))) '#f)) ((lambda (g$665$13119) (list g$665$13119)) (g$665$11034 g$665$13063)))) '#f)) (g$665$11038 g$665$13057)))) '#f)) ((lambda (g$665$13121) '()) (g$665$11034 g$665$13057)))) '#f)) g$665$13033))) g$665$13013))) ((lambda (g$665$13123) (if (g$665$11026 g$665$13123) (begin '#f ((lambda (g$665$13125) (if g$665$13125 (begin '#f ((lambda (g$665$13127) (if g$665$13127 (begin '#f (append g$665$13125 g$665$13127)) '#f)) ((lambda (g$665$13129) (if (g$665$11026 g$665$13129) (begin '#f ((lambda (g$665$13131) (if g$665$13131 (begin '#f ((lambda (g$665$13133) (if g$665$13133 (begin '#f (append g$665$13131 g$665$13133)) '#f)) ((lambda (g$665$13135) (if (g$665$11026 g$665$13135) (begin '#f ((lambda (g$665$13137) (if g$665$13137 (begin '#f ((lambda (g$665$13139) (if g$665$13139 (begin '#f (append g$665$13137 g$665$13139)) '#f)) ((letrec ((g$665$13141 (lambda (g$665$13143) (if (g$665$11026 g$665$13143) ((lambda (g$665$13145) (if g$665$13145 (begin '#f ((lambda (g$665$13147) (if g$665$13147 (begin '#f (map cons g$665$13145 g$665$13147)) '#f)) (g$665$13141 (g$665$11038 g$665$13143)))) '#f)) ((lambda (g$665$13149) (list g$665$13149)) (g$665$11034 g$665$13143))) (if (g$665$11030 g$665$13143) (list (begin 'b* '())) '#f))))) g$665$13141) (g$665$11038 g$665$13135)))) '#f)) ((lambda (g$665$13151) (list g$665$13151)) (g$665$11034 g$665$13135)))) '#f)) (g$665$11038 g$665$13129)))) '#f)) ((letrec ((g$665$13153 (lambda (g$665$13155) (if (g$665$11026 g$665$13155) ((lambda (g$665$13157) (if g$665$13157 (begin '#f ((lambda (g$665$13159) (if g$665$13159 (begin '#f (map cons g$665$13157 g$665$13159)) '#f)) (g$665$13153 (g$665$11038 g$665$13155)))) '#f)) ((lambda (g$665$13161) (if (g$665$11026 g$665$13161) (begin '#f ((lambda (g$665$13163) (if g$665$13163 (begin '#f ((lambda (g$665$13165) (if g$665$13165 (begin '#f (append g$665$13163 g$665$13165)) '#f)) ((lambda (g$665$13167) (if (g$665$11026 g$665$13167) (begin '#f ((lambda (g$665$13169) (if g$665$13169 (begin '#f ((lambda (g$665$13171) (if g$665$13171 (begin '#f (append g$665$13169 g$665$13171)) '#f)) ((lambda (g$665$13173) (if (equal? (g$665$11060 g$665$13173) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13167)))) '#f)) ((lambda (g$665$13175) (list g$665$13175)) (g$665$11034 g$665$13167)))) '#f)) (g$665$11038 g$665$13161)))) '#f)) ((lambda (g$665$13177) (list g$665$13177)) (g$665$11034 g$665$13161)))) '#f)) (g$665$11034 g$665$13155))) (if (g$665$11030 g$665$13155) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$665$13153) (g$665$11034 g$665$13129)))) '#f)) (g$665$11038 g$665$13123)))) '#f)) ((lambda (g$665$13179) '()) (g$665$11034 g$665$13123)))) '#f)) g$665$13013))) g$665$13011))) (set! g$665$11329 (lambda (g$665$13181) ((lambda (g$665$13183) ((lambda (g$665$13185) (if (if g$665$13185 (begin '#f (apply (lambda (g$665$13187 g$665$13188 g$665$13189 g$665$13190) '#t) g$665$13185)) '#f) (apply (lambda (g$665$13195 g$665$13196 g$665$13197 g$665$13198) (if (g$665$11050 g$665$13196) (g$665$11323 (list 'make-traced-procedure (list 'quote g$665$13195) (cons 'lambda (cons g$665$13196 (cons g$665$13197 g$665$13198))))) (error 'expander '"~a ~s" '"invalid formals" (g$665$11058 g$665$13181 '())))) g$665$13185) ((lambda (g$665$13203) ((lambda (g$665$13205) (if (if g$665$13205 (begin '#f (apply (lambda (g$665$13207 g$665$13208 g$665$13209 g$665$13210 g$665$13211) '#t) g$665$13205)) '#f) (apply (lambda (g$665$13217 g$665$13218 g$665$13219 g$665$13220 g$665$13221) (if (g$665$11050 (cons g$665$13219 g$665$13218)) (g$665$11323 (list 'make-traced-procedure (list 'quote g$665$13217) (cons 'lambda (cons (append g$665$13218 g$665$13219) (cons g$665$13220 g$665$13221))))) (error 'expander '"~a ~s" '"invalid formals" (g$665$11058 g$665$13181 '())))) g$665$13205) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13203 '())))) ((lambda (g$665$13227) (if (g$665$11026 g$665$13227) (begin '#f ((lambda (g$665$13229) (if g$665$13229 (begin '#f ((lambda (g$665$13231) (if g$665$13231 (begin '#f (append g$665$13229 g$665$13231)) '#f)) ((lambda (g$665$13233) (if (g$665$11026 g$665$13233) (begin '#f ((lambda (g$665$13235) (if g$665$13235 (begin '#f ((lambda (g$665$13237) (if g$665$13237 (begin '#f (append g$665$13235 g$665$13237)) '#f)) ((lambda (g$665$13239) (if (g$665$11026 g$665$13239) (begin '#f ((lambda (g$665$13241) (if g$665$13241 (begin '#f ((lambda (g$665$13243) (if g$665$13243 (begin '#f (append g$665$13241 g$665$13243)) '#f)) ((lambda (g$665$13245) (if (g$665$11026 g$665$13245) (begin '#f ((lambda (g$665$13247) (if g$665$13247 (begin '#f ((lambda (g$665$13249) (if g$665$13249 (begin '#f (append g$665$13247 g$665$13249)) '#f)) ((letrec ((g$665$13251 (lambda (g$665$13253) (if (g$665$11026 g$665$13253) ((lambda (g$665$13255) (if g$665$13255 (begin '#f ((lambda (g$665$13257) (if g$665$13257 (begin '#f (map cons g$665$13255 g$665$13257)) '#f)) (g$665$13251 (g$665$11038 g$665$13253)))) '#f)) ((lambda (g$665$13259) (list g$665$13259)) (g$665$11034 g$665$13253))) (if (g$665$11030 g$665$13253) (list (begin 'b* '())) '#f))))) g$665$13251) (g$665$11038 g$665$13245)))) '#f)) ((lambda (g$665$13261) (list g$665$13261)) (g$665$11034 g$665$13245)))) '#f)) (g$665$11038 g$665$13239)))) '#f)) ((letrec ((g$665$13263 (lambda (g$665$13269) (if (g$665$11026 g$665$13269) ((lambda (g$665$13271) (if g$665$13271 (begin '#f ((lambda (g$665$13273) (if g$665$13273 (begin '#f (cons (map cons g$665$13271 (car g$665$13273)) (cdr g$665$13273))) '#f)) (g$665$13263 (g$665$11038 g$665$13269)))) '#f)) ((lambda (g$665$13275) (list g$665$13275)) (g$665$11034 g$665$13269))) ((lambda (g$665$13277) (if g$665$13277 (begin '#f (cons (list (begin 'fmls '())) g$665$13277)) '#f)) ((lambda (g$665$13279) (list g$665$13279)) g$665$13269)))))) (lambda (g$665$13265) ((lambda (g$665$13267) (if g$665$13267 (begin '#f (append (car g$665$13267) (cdr g$665$13267))) '#f)) (g$665$13263 g$665$13265)))) (g$665$11034 g$665$13239)))) '#f)) (g$665$11038 g$665$13233)))) '#f)) ((lambda (g$665$13281) (list g$665$13281)) (g$665$11034 g$665$13233)))) '#f)) (g$665$11038 g$665$13227)))) '#f)) ((lambda (g$665$13283) '()) (g$665$11034 g$665$13227)))) '#f)) g$665$13203))) g$665$13183))) ((lambda (g$665$13285) (if (g$665$11026 g$665$13285) (begin '#f ((lambda (g$665$13287) (if g$665$13287 (begin '#f ((lambda (g$665$13289) (if g$665$13289 (begin '#f (append g$665$13287 g$665$13289)) '#f)) ((lambda (g$665$13291) (if (g$665$11026 g$665$13291) (begin '#f ((lambda (g$665$13293) (if g$665$13293 (begin '#f ((lambda (g$665$13295) (if g$665$13295 (begin '#f (append g$665$13293 g$665$13295)) '#f)) ((lambda (g$665$13297) (if (g$665$11026 g$665$13297) (begin '#f ((lambda (g$665$13299) (if g$665$13299 (begin '#f ((lambda (g$665$13301) (if g$665$13301 (begin '#f (append g$665$13299 g$665$13301)) '#f)) ((lambda (g$665$13303) (if (g$665$11026 g$665$13303) (begin '#f ((lambda (g$665$13305) (if g$665$13305 (begin '#f ((lambda (g$665$13307) (if g$665$13307 (begin '#f (append g$665$13305 g$665$13307)) '#f)) ((letrec ((g$665$13309 (lambda (g$665$13311) (if (g$665$11026 g$665$13311) ((lambda (g$665$13313) (if g$665$13313 (begin '#f ((lambda (g$665$13315) (if g$665$13315 (begin '#f (map cons g$665$13313 g$665$13315)) '#f)) (g$665$13309 (g$665$11038 g$665$13311)))) '#f)) ((lambda (g$665$13317) (list g$665$13317)) (g$665$11034 g$665$13311))) (if (g$665$11030 g$665$13311) (list (begin 'b* '())) '#f))))) g$665$13309) (g$665$11038 g$665$13303)))) '#f)) ((lambda (g$665$13319) (list g$665$13319)) (g$665$11034 g$665$13303)))) '#f)) (g$665$11038 g$665$13297)))) '#f)) ((letrec ((g$665$13321 (lambda (g$665$13323) (if (g$665$11026 g$665$13323) ((lambda (g$665$13325) (if g$665$13325 (begin '#f ((lambda (g$665$13327) (if g$665$13327 (begin '#f (map cons g$665$13325 g$665$13327)) '#f)) (g$665$13321 (g$665$11038 g$665$13323)))) '#f)) ((lambda (g$665$13329) (list g$665$13329)) (g$665$11034 g$665$13323))) (if (g$665$11030 g$665$13323) (list (begin 'fmls '())) '#f))))) g$665$13321) (g$665$11034 g$665$13297)))) '#f)) (g$665$11038 g$665$13291)))) '#f)) ((lambda (g$665$13331) (list g$665$13331)) (g$665$11034 g$665$13291)))) '#f)) (g$665$11038 g$665$13285)))) '#f)) ((lambda (g$665$13333) '()) (g$665$11034 g$665$13285)))) '#f)) g$665$13183))) g$665$13181))) (set! g$665$11331 (lambda (g$665$13335) ((lambda (g$665$13337) ((lambda (g$665$13339) (if (if g$665$13339 (begin '#f (apply (lambda (g$665$13341 g$665$13342 g$665$13343 g$665$13344) '#t) g$665$13339)) '#f) (apply (lambda (g$665$13349 g$665$13350 g$665$13351 g$665$13352) (if (g$665$11050 g$665$13350) (g$665$11323 (list 'define g$665$13349 (list 'make-traced-procedure (list 'quote g$665$13349) (cons 'lambda (cons g$665$13350 (cons g$665$13351 g$665$13352)))))) (error 'expander '"~a ~s" '"invalid formals" (g$665$11058 g$665$13335 '())))) g$665$13339) ((lambda (g$665$13357) ((lambda (g$665$13359) (if (if g$665$13359 (begin '#f (apply (lambda (g$665$13361 g$665$13362 g$665$13363 g$665$13364 g$665$13365) '#t) g$665$13359)) '#f) (apply (lambda (g$665$13371 g$665$13372 g$665$13373 g$665$13374 g$665$13375) (if (g$665$11050 (cons g$665$13373 g$665$13372)) (g$665$11323 (list 'define g$665$13371 (list 'make-traced-procedure (list 'quote g$665$13371) (cons 'lambda (cons (append g$665$13372 g$665$13373) (cons g$665$13374 g$665$13375)))))) (error 'expander '"~a ~s" '"invalid formals" (g$665$11058 g$665$13335 '())))) g$665$13359) ((lambda (g$665$13381) ((lambda (g$665$13383) (if (if g$665$13383 (begin '#f (apply (lambda (g$665$13385 g$665$13386) '#t) g$665$13383)) '#f) (apply (lambda (g$665$13389 g$665$13390) (if (g$665$11040 g$665$13389) (g$665$11323 (list 'define g$665$13389 (list 'let (list (list 'v g$665$13390)) (cons 'if (cons '(procedure? v) (cons (cons 'make-traced-procedure (cons (list 'quote g$665$13389) '(v))) '((error 'trace-define "~s is not a procedure" v)))))))) (error 'expander '"~a ~s" '"invalid formals" (g$665$11058 g$665$13335 '())))) g$665$13383) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13381 '())))) ((lambda (g$665$13393) (if (g$665$11026 g$665$13393) (begin '#f ((lambda (g$665$13395) (if g$665$13395 (begin '#f ((lambda (g$665$13397) (if g$665$13397 (begin '#f (append g$665$13395 g$665$13397)) '#f)) ((lambda (g$665$13399) (if (g$665$11026 g$665$13399) (begin '#f ((lambda (g$665$13401) (if g$665$13401 (begin '#f ((lambda (g$665$13403) (if g$665$13403 (begin '#f (append g$665$13401 g$665$13403)) '#f)) ((lambda (g$665$13405) (if (g$665$11026 g$665$13405) (begin '#f ((lambda (g$665$13407) (if g$665$13407 (begin '#f ((lambda (g$665$13409) (if g$665$13409 (begin '#f (append g$665$13407 g$665$13409)) '#f)) ((lambda (g$665$13411) (if (equal? (g$665$11060 g$665$13411) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13405)))) '#f)) ((lambda (g$665$13413) (list g$665$13413)) (g$665$11034 g$665$13405)))) '#f)) (g$665$11038 g$665$13399)))) '#f)) ((lambda (g$665$13415) (list g$665$13415)) (g$665$11034 g$665$13399)))) '#f)) (g$665$11038 g$665$13393)))) '#f)) ((lambda (g$665$13417) '()) (g$665$11034 g$665$13393)))) '#f)) g$665$13381))) g$665$13357))) ((lambda (g$665$13419) (if (g$665$11026 g$665$13419) (begin '#f ((lambda (g$665$13421) (if g$665$13421 (begin '#f ((lambda (g$665$13423) (if g$665$13423 (begin '#f (append g$665$13421 g$665$13423)) '#f)) ((lambda (g$665$13425) (if (g$665$11026 g$665$13425) (begin '#f ((lambda (g$665$13427) (if g$665$13427 (begin '#f ((lambda (g$665$13429) (if g$665$13429 (begin '#f (append g$665$13427 g$665$13429)) '#f)) ((lambda (g$665$13431) (if (g$665$11026 g$665$13431) (begin '#f ((lambda (g$665$13433) (if g$665$13433 (begin '#f ((lambda (g$665$13435) (if g$665$13435 (begin '#f (append g$665$13433 g$665$13435)) '#f)) ((letrec ((g$665$13437 (lambda (g$665$13439) (if (g$665$11026 g$665$13439) ((lambda (g$665$13441) (if g$665$13441 (begin '#f ((lambda (g$665$13443) (if g$665$13443 (begin '#f (map cons g$665$13441 g$665$13443)) '#f)) (g$665$13437 (g$665$11038 g$665$13439)))) '#f)) ((lambda (g$665$13445) (list g$665$13445)) (g$665$11034 g$665$13439))) (if (g$665$11030 g$665$13439) (list (begin 'b* '())) '#f))))) g$665$13437) (g$665$11038 g$665$13431)))) '#f)) ((lambda (g$665$13447) (list g$665$13447)) (g$665$11034 g$665$13431)))) '#f)) (g$665$11038 g$665$13425)))) '#f)) ((lambda (g$665$13449) (if (g$665$11026 g$665$13449) (begin '#f ((lambda (g$665$13451) (if g$665$13451 (begin '#f ((lambda (g$665$13453) (if g$665$13453 (begin '#f (append g$665$13451 g$665$13453)) '#f)) ((letrec ((g$665$13455 (lambda (g$665$13461) (if (g$665$11026 g$665$13461) ((lambda (g$665$13463) (if g$665$13463 (begin '#f ((lambda (g$665$13465) (if g$665$13465 (begin '#f (cons (map cons g$665$13463 (car g$665$13465)) (cdr g$665$13465))) '#f)) (g$665$13455 (g$665$11038 g$665$13461)))) '#f)) ((lambda (g$665$13467) (list g$665$13467)) (g$665$11034 g$665$13461))) ((lambda (g$665$13469) (if g$665$13469 (begin '#f (cons (list (begin 'fmls '())) g$665$13469)) '#f)) ((lambda (g$665$13471) (list g$665$13471)) g$665$13461)))))) (lambda (g$665$13457) ((lambda (g$665$13459) (if g$665$13459 (begin '#f (append (car g$665$13459) (cdr g$665$13459))) '#f)) (g$665$13455 g$665$13457)))) (g$665$11038 g$665$13449)))) '#f)) ((lambda (g$665$13473) (list g$665$13473)) (g$665$11034 g$665$13449)))) '#f)) (g$665$11034 g$665$13425)))) '#f)) (g$665$11038 g$665$13419)))) '#f)) ((lambda (g$665$13475) '()) (g$665$11034 g$665$13419)))) '#f)) g$665$13357))) g$665$13337))) ((lambda (g$665$13477) (if (g$665$11026 g$665$13477) (begin '#f ((lambda (g$665$13479) (if g$665$13479 (begin '#f ((lambda (g$665$13481) (if g$665$13481 (begin '#f (append g$665$13479 g$665$13481)) '#f)) ((lambda (g$665$13483) (if (g$665$11026 g$665$13483) (begin '#f ((lambda (g$665$13485) (if g$665$13485 (begin '#f ((lambda (g$665$13487) (if g$665$13487 (begin '#f (append g$665$13485 g$665$13487)) '#f)) ((lambda (g$665$13489) (if (g$665$11026 g$665$13489) (begin '#f ((lambda (g$665$13491) (if g$665$13491 (begin '#f ((lambda (g$665$13493) (if g$665$13493 (begin '#f (append g$665$13491 g$665$13493)) '#f)) ((letrec ((g$665$13495 (lambda (g$665$13497) (if (g$665$11026 g$665$13497) ((lambda (g$665$13499) (if g$665$13499 (begin '#f ((lambda (g$665$13501) (if g$665$13501 (begin '#f (map cons g$665$13499 g$665$13501)) '#f)) (g$665$13495 (g$665$11038 g$665$13497)))) '#f)) ((lambda (g$665$13503) (list g$665$13503)) (g$665$11034 g$665$13497))) (if (g$665$11030 g$665$13497) (list (begin 'b* '())) '#f))))) g$665$13495) (g$665$11038 g$665$13489)))) '#f)) ((lambda (g$665$13505) (list g$665$13505)) (g$665$11034 g$665$13489)))) '#f)) (g$665$11038 g$665$13483)))) '#f)) ((lambda (g$665$13507) (if (g$665$11026 g$665$13507) (begin '#f ((lambda (g$665$13509) (if g$665$13509 (begin '#f ((lambda (g$665$13511) (if g$665$13511 (begin '#f (append g$665$13509 g$665$13511)) '#f)) ((letrec ((g$665$13513 (lambda (g$665$13515) (if (g$665$11026 g$665$13515) ((lambda (g$665$13517) (if g$665$13517 (begin '#f ((lambda (g$665$13519) (if g$665$13519 (begin '#f (map cons g$665$13517 g$665$13519)) '#f)) (g$665$13513 (g$665$11038 g$665$13515)))) '#f)) ((lambda (g$665$13521) (list g$665$13521)) (g$665$11034 g$665$13515))) (if (g$665$11030 g$665$13515) (list (begin 'fmls '())) '#f))))) g$665$13513) (g$665$11038 g$665$13507)))) '#f)) ((lambda (g$665$13523) (list g$665$13523)) (g$665$11034 g$665$13507)))) '#f)) (g$665$11034 g$665$13483)))) '#f)) (g$665$11038 g$665$13477)))) '#f)) ((lambda (g$665$13525) '()) (g$665$11034 g$665$13477)))) '#f)) g$665$13337))) g$665$13335))) (set! g$665$11333 (lambda (g$665$13527) ((lambda (g$665$13529) ((lambda (g$665$13531) (if (if g$665$13531 (begin '#f (apply (lambda (g$665$13533) '#t) g$665$13531)) '#f) (apply (lambda (g$665$13535) (g$665$11323 (list 'time-it (list 'quote g$665$13535) (list 'lambda '() g$665$13535)))) g$665$13531) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13529 '())))) ((lambda (g$665$13537) (if (g$665$11026 g$665$13537) (begin '#f ((lambda (g$665$13539) (if g$665$13539 (begin '#f ((lambda (g$665$13541) (if g$665$13541 (begin '#f (append g$665$13539 g$665$13541)) '#f)) ((lambda (g$665$13543) (if (g$665$11026 g$665$13543) (begin '#f ((lambda (g$665$13545) (if g$665$13545 (begin '#f ((lambda (g$665$13547) (if g$665$13547 (begin '#f (append g$665$13545 g$665$13547)) '#f)) ((lambda (g$665$13549) (if (equal? (g$665$11060 g$665$13549) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13543)))) '#f)) ((lambda (g$665$13551) (list g$665$13551)) (g$665$11034 g$665$13543)))) '#f)) (g$665$11038 g$665$13537)))) '#f)) ((lambda (g$665$13553) '()) (g$665$11034 g$665$13537)))) '#f)) g$665$13529))) g$665$13527))) (set! g$665$11335 (lambda (g$665$13555) ((lambda (g$665$13557) ((lambda (g$665$13559) (if (if g$665$13559 (begin '#f (apply (lambda (g$665$13561) '#t) g$665$13559)) '#f) (apply (lambda (g$665$13563) (g$665$11323 (list 'make-promise (list 'lambda '() g$665$13563)))) g$665$13559) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13557 '())))) ((lambda (g$665$13565) (if (g$665$11026 g$665$13565) (begin '#f ((lambda (g$665$13567) (if g$665$13567 (begin '#f ((lambda (g$665$13569) (if g$665$13569 (begin '#f (append g$665$13567 g$665$13569)) '#f)) ((lambda (g$665$13571) (if (g$665$11026 g$665$13571) (begin '#f ((lambda (g$665$13573) (if g$665$13573 (begin '#f ((lambda (g$665$13575) (if g$665$13575 (begin '#f (append g$665$13573 g$665$13575)) '#f)) ((lambda (g$665$13577) (if (equal? (g$665$11060 g$665$13577) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13571)))) '#f)) ((lambda (g$665$13579) (list g$665$13579)) (g$665$11034 g$665$13571)))) '#f)) (g$665$11038 g$665$13565)))) '#f)) ((lambda (g$665$13581) '()) (g$665$11034 g$665$13565)))) '#f)) g$665$13557))) g$665$13555))) (set! g$665$11337 (lambda (g$665$13583) ((lambda (g$665$13585) ((lambda (g$665$13587) (if (if g$665$13587 (begin '#f (apply (lambda (g$665$13589) '#t) g$665$13587)) '#f) (apply (lambda (g$665$13591) (g$665$11323 (list 'unless g$665$13591 (list 'error ''assert '"~s failed" (list 'quote g$665$13591))))) g$665$13587) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13585 '())))) ((lambda (g$665$13593) (if (g$665$11026 g$665$13593) (begin '#f ((lambda (g$665$13595) (if g$665$13595 (begin '#f ((lambda (g$665$13597) (if g$665$13597 (begin '#f (append g$665$13595 g$665$13597)) '#f)) ((lambda (g$665$13599) (if (g$665$11026 g$665$13599) (begin '#f ((lambda (g$665$13601) (if g$665$13601 (begin '#f ((lambda (g$665$13603) (if g$665$13603 (begin '#f (append g$665$13601 g$665$13603)) '#f)) ((lambda (g$665$13605) (if (equal? (g$665$11060 g$665$13605) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13599)))) '#f)) ((lambda (g$665$13607) (list g$665$13607)) (g$665$11034 g$665$13599)))) '#f)) (g$665$11038 g$665$13593)))) '#f)) ((lambda (g$665$13609) '()) (g$665$11034 g$665$13593)))) '#f)) g$665$13585))) g$665$13583))) (set! g$665$11339 (lambda (g$665$13611) ((lambda (g$665$13613) ((lambda (g$665$13615) (if (if g$665$13615 (begin '#f (apply (lambda (g$665$13617) '#t) g$665$13615)) '#f) (apply (lambda (g$665$13619) ((lambda (g$665$13621) (if (memv g$665$13621 '(little)) (g$665$11323 ''little) (if (memv g$665$13621 '(big)) (g$665$11323 ''big) (error 'expander '"~a ~s" '"endianness must be big or little" (g$665$11058 g$665$13611 '()))))) (g$665$11506 g$665$13619))) g$665$13615) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13613 '())))) ((lambda (g$665$13622) (if (g$665$11026 g$665$13622) (begin '#f ((lambda (g$665$13624) (if g$665$13624 (begin '#f ((lambda (g$665$13626) (if g$665$13626 (begin '#f (append g$665$13624 g$665$13626)) '#f)) ((lambda (g$665$13628) (if (g$665$11026 g$665$13628) (begin '#f ((lambda (g$665$13630) (if g$665$13630 (begin '#f ((lambda (g$665$13632) (if g$665$13632 (begin '#f (append g$665$13630 g$665$13632)) '#f)) ((lambda (g$665$13634) (if (equal? (g$665$11060 g$665$13634) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13628)))) '#f)) ((lambda (g$665$13636) (list g$665$13636)) (g$665$11034 g$665$13628)))) '#f)) (g$665$11038 g$665$13622)))) '#f)) ((lambda (g$665$13638) '()) (g$665$11034 g$665$13622)))) '#f)) g$665$13613))) g$665$13611))) (set! g$665$11341 (lambda (g$665$13640) ((lambda (g$665$13642) ((lambda (g$665$13644) (if (if g$665$13644 (begin '#f (apply (lambda (g$665$13646) '#t) g$665$13644)) '#f) (apply (lambda (g$665$13648) (g$665$11323 (list 'lambda '(x) (list 'syntax-case 'x '() (list 'id '(identifier? (syntax id)) (list 'syntax g$665$13648)) (list '(id e* |...|) '(identifier? (syntax id)) (cons 'cons (cons (list 'syntax g$665$13648) '((syntax (e* |...|)))))))))) g$665$13644) ((lambda (g$665$13650) ((lambda (g$665$13652) (if (if g$665$13652 (begin '#f (apply (lambda (g$665$13654 g$665$13655 g$665$13656 g$665$13657 g$665$13658) (if (g$665$11040 g$665$13654) (if (g$665$11040 g$665$13656) (begin '#f (g$665$11040 g$665$13657)) '#f) '#f)) g$665$13652)) '#f) (apply (lambda (g$665$13664 g$665$13665 g$665$13666 g$665$13667 g$665$13668) (g$665$11323 (list 'cons ''macro! (list 'lambda '(x) (list 'syntax-case 'x '(set!) (list 'id '(identifier? (syntax id)) (list 'syntax g$665$13665)) (list (list 'set! 'id g$665$13667) (list 'syntax g$665$13668)) (list '(id e* |...|) '(identifier? (syntax id)) (list 'syntax (cons g$665$13665 '(e* |...|))))))))) g$665$13652) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13650 '())))) ((lambda (g$665$13674) (if (g$665$11026 g$665$13674) (begin '#f ((lambda (g$665$13676) (if g$665$13676 (begin '#f ((lambda (g$665$13678) (if g$665$13678 (begin '#f (append g$665$13676 g$665$13678)) '#f)) ((lambda (g$665$13680) (if (g$665$11026 g$665$13680) (begin '#f ((lambda (g$665$13682) (if g$665$13682 (begin '#f ((lambda (g$665$13684) (if g$665$13684 (begin '#f (append g$665$13682 g$665$13684)) '#f)) ((lambda (g$665$13686) (if (g$665$11026 g$665$13686) (begin '#f ((lambda (g$665$13688) (if g$665$13688 (begin '#f ((lambda (g$665$13690) (if g$665$13690 (begin '#f (append g$665$13688 g$665$13690)) '#f)) ((lambda (g$665$13692) (if (equal? (g$665$11060 g$665$13692) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13686)))) '#f)) ((lambda (g$665$13694) (if (g$665$11026 g$665$13694) (begin '#f ((lambda (g$665$13696) (if g$665$13696 (begin '#f ((lambda (g$665$13698) (if g$665$13698 (begin '#f (append g$665$13696 g$665$13698)) '#f)) ((lambda (g$665$13700) (if (g$665$11026 g$665$13700) (begin '#f ((lambda (g$665$13702) (if g$665$13702 (begin '#f ((lambda (g$665$13704) (if g$665$13704 (begin '#f (append g$665$13702 g$665$13704)) '#f)) ((lambda (g$665$13706) (if (equal? (g$665$11060 g$665$13706) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13700)))) '#f)) ((lambda (g$665$13708) (list g$665$13708)) (g$665$11034 g$665$13700)))) '#f)) (g$665$11038 g$665$13694)))) '#f)) ((lambda (g$665$13710) (if (g$665$11026 g$665$13710) (begin '#f ((lambda (g$665$13712) (if g$665$13712 (begin '#f ((lambda (g$665$13714) (if g$665$13714 (begin '#f (append g$665$13712 g$665$13714)) '#f)) ((lambda (g$665$13716) (if (g$665$11026 g$665$13716) (begin '#f ((lambda (g$665$13718) (if g$665$13718 (begin '#f ((lambda (g$665$13720) (if g$665$13720 (begin '#f (append g$665$13718 g$665$13720)) '#f)) ((lambda (g$665$13722) (if (g$665$11026 g$665$13722) (begin '#f ((lambda (g$665$13724) (if g$665$13724 (begin '#f ((lambda (g$665$13726) (if g$665$13726 (begin '#f (append g$665$13724 g$665$13726)) '#f)) ((lambda (g$665$13728) (if (equal? (g$665$11060 g$665$13728) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13722)))) '#f)) ((lambda (g$665$13730) (list g$665$13730)) (g$665$11034 g$665$13722)))) '#f)) (g$665$11038 g$665$13716)))) '#f)) ((lambda (g$665$13732) (list g$665$13732)) (g$665$11034 g$665$13716)))) '#f)) (g$665$11038 g$665$13710)))) '#f)) ((lambda (g$665$13734) (if (g$665$11040 g$665$13734) (if (g$665$11048 g$665$13734 (g$665$11293 'set!)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$13710)))) '#f)) (g$665$11034 g$665$13694)))) '#f)) (g$665$11034 g$665$13686)))) '#f)) (g$665$11038 g$665$13680)))) '#f)) ((lambda (g$665$13736) (if (g$665$11026 g$665$13736) (begin '#f ((lambda (g$665$13738) (if g$665$13738 (begin '#f ((lambda (g$665$13740) (if g$665$13740 (begin '#f (append g$665$13738 g$665$13740)) '#f)) ((lambda (g$665$13742) (if (g$665$11026 g$665$13742) (begin '#f ((lambda (g$665$13744) (if g$665$13744 (begin '#f ((lambda (g$665$13746) (if g$665$13746 (begin '#f (append g$665$13744 g$665$13746)) '#f)) ((lambda (g$665$13748) (if (equal? (g$665$11060 g$665$13748) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13742)))) '#f)) ((lambda (g$665$13750) (list g$665$13750)) (g$665$11034 g$665$13742)))) '#f)) (g$665$11038 g$665$13736)))) '#f)) ((lambda (g$665$13752) (list g$665$13752)) (g$665$11034 g$665$13736)))) '#f)) (g$665$11034 g$665$13680)))) '#f)) (g$665$11038 g$665$13674)))) '#f)) ((lambda (g$665$13754) '()) (g$665$11034 g$665$13674)))) '#f)) g$665$13650))) g$665$13642))) ((lambda (g$665$13756) (if (g$665$11026 g$665$13756) (begin '#f ((lambda (g$665$13758) (if g$665$13758 (begin '#f ((lambda (g$665$13760) (if g$665$13760 (begin '#f (append g$665$13758 g$665$13760)) '#f)) ((lambda (g$665$13762) (if (g$665$11026 g$665$13762) (begin '#f ((lambda (g$665$13764) (if g$665$13764 (begin '#f ((lambda (g$665$13766) (if g$665$13766 (begin '#f (append g$665$13764 g$665$13766)) '#f)) ((lambda (g$665$13768) (if (equal? (g$665$11060 g$665$13768) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13762)))) '#f)) ((lambda (g$665$13770) (list g$665$13770)) (g$665$11034 g$665$13762)))) '#f)) (g$665$11038 g$665$13756)))) '#f)) ((lambda (g$665$13772) '()) (g$665$11034 g$665$13756)))) '#f)) g$665$13642))) g$665$13640))) (set! g$665$11343 (lambda (g$665$13774) ((lambda (g$665$13776) (begin (set! g$665$13776 (lambda (g$665$13778) ((lambda (g$665$13780) ((lambda (g$665$13782) (if (if g$665$13782 (begin '#f (apply (lambda (g$665$13784 g$665$13785) '#t) g$665$13782)) '#f) (apply (lambda (g$665$13788 g$665$13789) (list g$665$13788 g$665$13789 g$665$13788)) g$665$13782) ((lambda (g$665$13792) ((lambda (g$665$13794) (if (if g$665$13794 (begin '#f (apply (lambda (g$665$13796 g$665$13797 g$665$13798) '#t) g$665$13794)) '#f) (apply (lambda (g$665$13802 g$665$13803 g$665$13804) (list g$665$13802 g$665$13803 g$665$13804)) g$665$13794) ((lambda (g$665$13808) ((lambda (g$665$13810) (if (if g$665$13810 (begin '#f (apply (lambda () '#t) g$665$13810)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"invalid binding" (g$665$11058 g$665$13774 '()))) g$665$13810) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13808 '())))) ((lambda (g$665$13812) '()) g$665$13808))) g$665$13792))) ((lambda (g$665$13814) (if (g$665$11026 g$665$13814) (begin '#f ((lambda (g$665$13816) (if g$665$13816 (begin '#f ((lambda (g$665$13818) (if g$665$13818 (begin '#f (append g$665$13816 g$665$13818)) '#f)) ((lambda (g$665$13820) (if (g$665$11026 g$665$13820) (begin '#f ((lambda (g$665$13822) (if g$665$13822 (begin '#f ((lambda (g$665$13824) (if g$665$13824 (begin '#f (append g$665$13822 g$665$13824)) '#f)) ((lambda (g$665$13826) (if (g$665$11026 g$665$13826) (begin '#f ((lambda (g$665$13828) (if g$665$13828 (begin '#f ((lambda (g$665$13830) (if g$665$13830 (begin '#f (append g$665$13828 g$665$13830)) '#f)) ((lambda (g$665$13832) (if (equal? (g$665$11060 g$665$13832) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13826)))) '#f)) ((lambda (g$665$13834) (list g$665$13834)) (g$665$11034 g$665$13826)))) '#f)) (g$665$11038 g$665$13820)))) '#f)) ((lambda (g$665$13836) (list g$665$13836)) (g$665$11034 g$665$13820)))) '#f)) (g$665$11038 g$665$13814)))) '#f)) ((lambda (g$665$13838) (list g$665$13838)) (g$665$11034 g$665$13814)))) '#f)) g$665$13792))) g$665$13780))) ((lambda (g$665$13840) (if (g$665$11026 g$665$13840) (begin '#f ((lambda (g$665$13842) (if g$665$13842 (begin '#f ((lambda (g$665$13844) (if g$665$13844 (begin '#f (append g$665$13842 g$665$13844)) '#f)) ((lambda (g$665$13846) (if (g$665$11026 g$665$13846) (begin '#f ((lambda (g$665$13848) (if g$665$13848 (begin '#f ((lambda (g$665$13850) (if g$665$13850 (begin '#f (append g$665$13848 g$665$13850)) '#f)) ((lambda (g$665$13852) (if (equal? (g$665$11060 g$665$13852) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13846)))) '#f)) ((lambda (g$665$13854) (list g$665$13854)) (g$665$11034 g$665$13846)))) '#f)) (g$665$11038 g$665$13840)))) '#f)) ((lambda (g$665$13856) (list g$665$13856)) (g$665$11034 g$665$13840)))) '#f)) g$665$13780))) g$665$13778))) ((lambda (g$665$13858) ((lambda (g$665$13860) (if (if g$665$13860 (begin '#f (apply (lambda (g$665$13862 g$665$13863 g$665$13864 g$665$13865) '#t) g$665$13860)) '#f) (apply (lambda (g$665$13870 g$665$13871 g$665$13872 g$665$13873) ((lambda (g$665$13878) ((lambda (g$665$13880) (if (if g$665$13880 (begin '#f (apply (lambda (g$665$13882 g$665$13883 g$665$13884) '#t) g$665$13880)) '#f) (apply (lambda (g$665$13888 g$665$13889 g$665$13890) (if (g$665$11050 g$665$13888) (g$665$11323 (list 'letrec (list (list 'loop (list 'lambda g$665$13888 (list 'if g$665$13871 (cons 'begin (cons '(if #f #f) g$665$13872)) (cons 'begin (append g$665$13873 (list (cons 'loop g$665$13890)))))))) (cons 'loop g$665$13889))) (error 'expander '"~a ~s" '"invalid bindings" (g$665$11058 g$665$13774 '())))) g$665$13880) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13878 '())))) ((letrec ((g$665$13894 (lambda (g$665$13896) (if (g$665$11026 g$665$13896) ((lambda (g$665$13898) (if g$665$13898 (begin '#f ((lambda (g$665$13900) (if g$665$13900 (begin '#f (map cons g$665$13898 g$665$13900)) '#f)) (g$665$13894 (g$665$11038 g$665$13896)))) '#f)) ((lambda (g$665$13902) (if (g$665$11026 g$665$13902) (begin '#f ((lambda (g$665$13904) (if g$665$13904 (begin '#f ((lambda (g$665$13906) (if g$665$13906 (begin '#f (append g$665$13904 g$665$13906)) '#f)) ((lambda (g$665$13908) (if (g$665$11026 g$665$13908) (begin '#f ((lambda (g$665$13910) (if g$665$13910 (begin '#f ((lambda (g$665$13912) (if g$665$13912 (begin '#f (append g$665$13910 g$665$13912)) '#f)) ((lambda (g$665$13914) (if (g$665$11026 g$665$13914) (begin '#f ((lambda (g$665$13916) (if g$665$13916 (begin '#f ((lambda (g$665$13918) (if g$665$13918 (begin '#f (append g$665$13916 g$665$13918)) '#f)) ((lambda (g$665$13920) (if (equal? (g$665$11060 g$665$13920) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$13914)))) '#f)) ((lambda (g$665$13922) (list g$665$13922)) (g$665$11034 g$665$13914)))) '#f)) (g$665$11038 g$665$13908)))) '#f)) ((lambda (g$665$13924) (list g$665$13924)) (g$665$11034 g$665$13908)))) '#f)) (g$665$11038 g$665$13902)))) '#f)) ((lambda (g$665$13926) (list g$665$13926)) (g$665$11034 g$665$13902)))) '#f)) (g$665$11034 g$665$13896))) (if (g$665$11030 g$665$13896) (list (begin 'x* '()) (begin 'init* '()) (begin 'step* '())) '#f))))) g$665$13894) g$665$13878))) (map g$665$13776 g$665$13870))) g$665$13860) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13858 '())))) ((lambda (g$665$13928) (if (g$665$11026 g$665$13928) (begin '#f ((lambda (g$665$13930) (if g$665$13930 (begin '#f ((lambda (g$665$13932) (if g$665$13932 (begin '#f (append g$665$13930 g$665$13932)) '#f)) ((lambda (g$665$13934) (if (g$665$11026 g$665$13934) (begin '#f ((lambda (g$665$13936) (if g$665$13936 (begin '#f ((lambda (g$665$13938) (if g$665$13938 (begin '#f (append g$665$13936 g$665$13938)) '#f)) ((lambda (g$665$13940) (if (g$665$11026 g$665$13940) (begin '#f ((lambda (g$665$13942) (if g$665$13942 (begin '#f ((lambda (g$665$13944) (if g$665$13944 (begin '#f (append g$665$13942 g$665$13944)) '#f)) ((letrec ((g$665$13946 (lambda (g$665$13948) (if (g$665$11026 g$665$13948) ((lambda (g$665$13950) (if g$665$13950 (begin '#f ((lambda (g$665$13952) (if g$665$13952 (begin '#f (map cons g$665$13950 g$665$13952)) '#f)) (g$665$13946 (g$665$11038 g$665$13948)))) '#f)) ((lambda (g$665$13954) (list g$665$13954)) (g$665$11034 g$665$13948))) (if (g$665$11030 g$665$13948) (list (begin 'command* '())) '#f))))) g$665$13946) (g$665$11038 g$665$13940)))) '#f)) ((lambda (g$665$13956) (if (g$665$11026 g$665$13956) (begin '#f ((lambda (g$665$13958) (if g$665$13958 (begin '#f ((lambda (g$665$13960) (if g$665$13960 (begin '#f (append g$665$13958 g$665$13960)) '#f)) ((letrec ((g$665$13962 (lambda (g$665$13964) (if (g$665$11026 g$665$13964) ((lambda (g$665$13966) (if g$665$13966 (begin '#f ((lambda (g$665$13968) (if g$665$13968 (begin '#f (map cons g$665$13966 g$665$13968)) '#f)) (g$665$13962 (g$665$11038 g$665$13964)))) '#f)) ((lambda (g$665$13970) (list g$665$13970)) (g$665$11034 g$665$13964))) (if (g$665$11030 g$665$13964) (list (begin 'expr* '())) '#f))))) g$665$13962) (g$665$11038 g$665$13956)))) '#f)) ((lambda (g$665$13972) (list g$665$13972)) (g$665$11034 g$665$13956)))) '#f)) (g$665$11034 g$665$13940)))) '#f)) (g$665$11038 g$665$13934)))) '#f)) ((letrec ((g$665$13974 (lambda (g$665$13976) (if (g$665$11026 g$665$13976) ((lambda (g$665$13978) (if g$665$13978 (begin '#f ((lambda (g$665$13980) (if g$665$13980 (begin '#f (map cons g$665$13978 g$665$13980)) '#f)) (g$665$13974 (g$665$11038 g$665$13976)))) '#f)) ((lambda (g$665$13982) (list g$665$13982)) (g$665$11034 g$665$13976))) (if (g$665$11030 g$665$13976) (list (begin 'binding* '())) '#f))))) g$665$13974) (g$665$11034 g$665$13934)))) '#f)) (g$665$11038 g$665$13928)))) '#f)) ((lambda (g$665$13984) '()) (g$665$11034 g$665$13928)))) '#f)) g$665$13858))) g$665$13774))) '#f))) (set! g$665$11345 (lambda (g$665$13986) ((lambda (g$665$13988) ((lambda (g$665$13990) (if (if g$665$13990 (begin '#f (apply (lambda (g$665$13992 g$665$13993 g$665$13994 g$665$13995) (for-all g$665$11040 g$665$13992)) g$665$13990)) '#f) (apply (lambda (g$665$14000 g$665$14001 g$665$14002 g$665$14003) (g$665$11323 (letrec ((g$665$14008 (lambda (g$665$14010) (if (null? g$665$14010) (cons 'let (cons '() (cons g$665$14002 g$665$14003))) (list 'let (list (car g$665$14010)) (g$665$14008 (cdr g$665$14010))))))) (g$665$14008 (map list g$665$14000 g$665$14001))))) g$665$13990) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$13988 '())))) ((lambda (g$665$14012) (if (g$665$11026 g$665$14012) (begin '#f ((lambda (g$665$14014) (if g$665$14014 (begin '#f ((lambda (g$665$14016) (if g$665$14016 (begin '#f (append g$665$14014 g$665$14016)) '#f)) ((lambda (g$665$14018) (if (g$665$11026 g$665$14018) (begin '#f ((lambda (g$665$14020) (if g$665$14020 (begin '#f ((lambda (g$665$14022) (if g$665$14022 (begin '#f (append g$665$14020 g$665$14022)) '#f)) ((lambda (g$665$14024) (if (g$665$11026 g$665$14024) (begin '#f ((lambda (g$665$14026) (if g$665$14026 (begin '#f ((lambda (g$665$14028) (if g$665$14028 (begin '#f (append g$665$14026 g$665$14028)) '#f)) ((letrec ((g$665$14030 (lambda (g$665$14032) (if (g$665$11026 g$665$14032) ((lambda (g$665$14034) (if g$665$14034 (begin '#f ((lambda (g$665$14036) (if g$665$14036 (begin '#f (map cons g$665$14034 g$665$14036)) '#f)) (g$665$14030 (g$665$11038 g$665$14032)))) '#f)) ((lambda (g$665$14038) (list g$665$14038)) (g$665$11034 g$665$14032))) (if (g$665$11030 g$665$14032) (list (begin 'b* '())) '#f))))) g$665$14030) (g$665$11038 g$665$14024)))) '#f)) ((lambda (g$665$14040) (list g$665$14040)) (g$665$11034 g$665$14024)))) '#f)) (g$665$11038 g$665$14018)))) '#f)) ((letrec ((g$665$14042 (lambda (g$665$14044) (if (g$665$11026 g$665$14044) ((lambda (g$665$14046) (if g$665$14046 (begin '#f ((lambda (g$665$14048) (if g$665$14048 (begin '#f (map cons g$665$14046 g$665$14048)) '#f)) (g$665$14042 (g$665$11038 g$665$14044)))) '#f)) ((lambda (g$665$14050) (if (g$665$11026 g$665$14050) (begin '#f ((lambda (g$665$14052) (if g$665$14052 (begin '#f ((lambda (g$665$14054) (if g$665$14054 (begin '#f (append g$665$14052 g$665$14054)) '#f)) ((lambda (g$665$14056) (if (g$665$11026 g$665$14056) (begin '#f ((lambda (g$665$14058) (if g$665$14058 (begin '#f ((lambda (g$665$14060) (if g$665$14060 (begin '#f (append g$665$14058 g$665$14060)) '#f)) ((lambda (g$665$14062) (if (equal? (g$665$11060 g$665$14062) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14056)))) '#f)) ((lambda (g$665$14064) (list g$665$14064)) (g$665$11034 g$665$14056)))) '#f)) (g$665$11038 g$665$14050)))) '#f)) ((lambda (g$665$14066) (list g$665$14066)) (g$665$11034 g$665$14050)))) '#f)) (g$665$11034 g$665$14044))) (if (g$665$11030 g$665$14044) (list (begin 'lhs* '()) (begin 'rhs* '())) '#f))))) g$665$14042) (g$665$11034 g$665$14018)))) '#f)) (g$665$11038 g$665$14012)))) '#f)) ((lambda (g$665$14068) '()) (g$665$11034 g$665$14012)))) '#f)) g$665$13988))) g$665$13986))) (set! g$665$11347 (lambda (g$665$14070) ((lambda (g$665$14072) ((lambda (g$665$14074) (if (if g$665$14074 (begin '#f (apply (lambda () '#t) g$665$14074)) '#f) (apply (lambda () '#f) g$665$14074) ((lambda (g$665$14076) ((lambda (g$665$14078) (if (if g$665$14078 (begin '#f (apply (lambda (g$665$14080 g$665$14081) '#t) g$665$14078)) '#f) (apply (lambda (g$665$14084 g$665$14085) (g$665$11323 (letrec ((g$665$14088 (lambda (g$665$14090 g$665$14091) (if (null? g$665$14091) (list 'begin '#f g$665$14090) (list 'let (list (list 't g$665$14090)) (list 'if 't 't (g$665$14088 (car g$665$14091) (cdr g$665$14091)))))))) (g$665$14088 g$665$14084 g$665$14085)))) g$665$14078) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14076 '())))) ((lambda (g$665$14094) (if (g$665$11026 g$665$14094) (begin '#f ((lambda (g$665$14096) (if g$665$14096 (begin '#f ((lambda (g$665$14098) (if g$665$14098 (begin '#f (append g$665$14096 g$665$14098)) '#f)) ((lambda (g$665$14100) (if (g$665$11026 g$665$14100) (begin '#f ((lambda (g$665$14102) (if g$665$14102 (begin '#f ((lambda (g$665$14104) (if g$665$14104 (begin '#f (append g$665$14102 g$665$14104)) '#f)) ((letrec ((g$665$14106 (lambda (g$665$14108) (if (g$665$11026 g$665$14108) ((lambda (g$665$14110) (if g$665$14110 (begin '#f ((lambda (g$665$14112) (if g$665$14112 (begin '#f (map cons g$665$14110 g$665$14112)) '#f)) (g$665$14106 (g$665$11038 g$665$14108)))) '#f)) ((lambda (g$665$14114) (list g$665$14114)) (g$665$11034 g$665$14108))) (if (g$665$11030 g$665$14108) (list (begin 'e* '())) '#f))))) g$665$14106) (g$665$11038 g$665$14100)))) '#f)) ((lambda (g$665$14116) (list g$665$14116)) (g$665$11034 g$665$14100)))) '#f)) (g$665$11038 g$665$14094)))) '#f)) ((lambda (g$665$14118) '()) (g$665$11034 g$665$14094)))) '#f)) g$665$14076))) g$665$14072))) ((lambda (g$665$14120) (if (g$665$11026 g$665$14120) (begin '#f ((lambda (g$665$14122) (if g$665$14122 (begin '#f ((lambda (g$665$14124) (if g$665$14124 (begin '#f (append g$665$14122 g$665$14124)) '#f)) ((lambda (g$665$14126) (if (equal? (g$665$11060 g$665$14126) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14120)))) '#f)) ((lambda (g$665$14128) '()) (g$665$11034 g$665$14120)))) '#f)) g$665$14072))) g$665$14070))) (set! g$665$11349 (lambda (g$665$14130) ((lambda (g$665$14132) ((lambda (g$665$14134) (if (if g$665$14134 (begin '#f (apply (lambda () '#t) g$665$14134)) '#f) (apply (lambda () '#t) g$665$14134) ((lambda (g$665$14136) ((lambda (g$665$14138) (if (if g$665$14138 (begin '#f (apply (lambda (g$665$14140 g$665$14141) '#t) g$665$14138)) '#f) (apply (lambda (g$665$14144 g$665$14145) (g$665$11323 (letrec ((g$665$14148 (lambda (g$665$14150 g$665$14151) (if (null? g$665$14151) (list 'begin '#f g$665$14150) (cons 'if (cons g$665$14150 (cons (g$665$14148 (car g$665$14151) (cdr g$665$14151)) '(#f)))))))) (g$665$14148 g$665$14144 g$665$14145)))) g$665$14138) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14136 '())))) ((lambda (g$665$14154) (if (g$665$11026 g$665$14154) (begin '#f ((lambda (g$665$14156) (if g$665$14156 (begin '#f ((lambda (g$665$14158) (if g$665$14158 (begin '#f (append g$665$14156 g$665$14158)) '#f)) ((lambda (g$665$14160) (if (g$665$11026 g$665$14160) (begin '#f ((lambda (g$665$14162) (if g$665$14162 (begin '#f ((lambda (g$665$14164) (if g$665$14164 (begin '#f (append g$665$14162 g$665$14164)) '#f)) ((letrec ((g$665$14166 (lambda (g$665$14168) (if (g$665$11026 g$665$14168) ((lambda (g$665$14170) (if g$665$14170 (begin '#f ((lambda (g$665$14172) (if g$665$14172 (begin '#f (map cons g$665$14170 g$665$14172)) '#f)) (g$665$14166 (g$665$11038 g$665$14168)))) '#f)) ((lambda (g$665$14174) (list g$665$14174)) (g$665$11034 g$665$14168))) (if (g$665$11030 g$665$14168) (list (begin 'e* '())) '#f))))) g$665$14166) (g$665$11038 g$665$14160)))) '#f)) ((lambda (g$665$14176) (list g$665$14176)) (g$665$11034 g$665$14160)))) '#f)) (g$665$11038 g$665$14154)))) '#f)) ((lambda (g$665$14178) '()) (g$665$11034 g$665$14154)))) '#f)) g$665$14136))) g$665$14132))) ((lambda (g$665$14180) (if (g$665$11026 g$665$14180) (begin '#f ((lambda (g$665$14182) (if g$665$14182 (begin '#f ((lambda (g$665$14184) (if g$665$14184 (begin '#f (append g$665$14182 g$665$14184)) '#f)) ((lambda (g$665$14186) (if (equal? (g$665$11060 g$665$14186) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14180)))) '#f)) ((lambda (g$665$14188) '()) (g$665$11034 g$665$14180)))) '#f)) g$665$14132))) g$665$14130))) (set! g$665$11351 (lambda (g$665$14190) ((lambda (g$665$14192) ((lambda (g$665$14194) (if (if g$665$14194 (begin '#f (apply (lambda (g$665$14196 g$665$14197) '#t) g$665$14194)) '#f) (apply (lambda (g$665$14200 g$665$14201) (g$665$11323 (letrec ((g$665$14204 (lambda (g$665$14206 g$665$14207) (if (null? g$665$14207) ((lambda (g$665$14210) ((lambda (g$665$14212) (if (if g$665$14212 (begin '#f (apply (lambda (g$665$14214 g$665$14215) '#t) g$665$14212)) '#f) (apply (lambda (g$665$14218 g$665$14219) (cons 'begin (cons g$665$14218 g$665$14219))) g$665$14212) ((lambda (g$665$14222) ((lambda (g$665$14224) (if (if g$665$14224 (begin '#f (apply (lambda (g$665$14226 g$665$14227) '#t) g$665$14224)) '#f) (apply (lambda (g$665$14230 g$665$14231) (list 'let (list (list 't g$665$14230)) (list 'if 't (cons g$665$14231 '(t))))) g$665$14224) ((lambda (g$665$14234) ((lambda (g$665$14236) (if (if g$665$14236 (begin '#f (apply (lambda (g$665$14238) '#t) g$665$14236)) '#f) (apply (lambda (g$665$14240) (cons 'or (cons g$665$14240 '((if #f #f))))) g$665$14236) ((lambda (g$665$14242) ((lambda (g$665$14244) (if (if g$665$14244 (begin '#f (apply (lambda (g$665$14246 g$665$14247) '#t) g$665$14244)) '#f) (apply (lambda (g$665$14250 g$665$14251) (list 'if g$665$14250 (cons 'begin g$665$14251))) g$665$14244) ((lambda (g$665$14254) ((lambda (g$665$14256) (if (if g$665$14256 (begin '#f (apply (lambda () '#t) g$665$14256)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"invalid last clause" (g$665$11058 g$665$14190 '()))) g$665$14256) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14254 '())))) ((lambda (g$665$14258) '()) g$665$14254))) g$665$14242))) ((lambda (g$665$14260) (if (g$665$11026 g$665$14260) (begin '#f ((lambda (g$665$14262) (if g$665$14262 (begin '#f ((lambda (g$665$14264) (if g$665$14264 (begin '#f (append g$665$14262 g$665$14264)) '#f)) ((letrec ((g$665$14266 (lambda (g$665$14268) (if (g$665$11026 g$665$14268) ((lambda (g$665$14270) (if g$665$14270 (begin '#f ((lambda (g$665$14272) (if g$665$14272 (begin '#f (map cons g$665$14270 g$665$14272)) '#f)) (g$665$14266 (g$665$11038 g$665$14268)))) '#f)) ((lambda (g$665$14274) (list g$665$14274)) (g$665$11034 g$665$14268))) (if (g$665$11030 g$665$14268) (list (begin 'e* '())) '#f))))) g$665$14266) (g$665$11038 g$665$14260)))) '#f)) ((lambda (g$665$14276) (list g$665$14276)) (g$665$11034 g$665$14260)))) '#f)) g$665$14242))) g$665$14234))) ((lambda (g$665$14278) (if (g$665$11026 g$665$14278) (begin '#f ((lambda (g$665$14280) (if g$665$14280 (begin '#f ((lambda (g$665$14282) (if g$665$14282 (begin '#f (append g$665$14280 g$665$14282)) '#f)) ((lambda (g$665$14284) (if (equal? (g$665$11060 g$665$14284) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14278)))) '#f)) ((lambda (g$665$14286) (list g$665$14286)) (g$665$11034 g$665$14278)))) '#f)) g$665$14234))) g$665$14222))) ((lambda (g$665$14288) (if (g$665$11026 g$665$14288) (begin '#f ((lambda (g$665$14290) (if g$665$14290 (begin '#f ((lambda (g$665$14292) (if g$665$14292 (begin '#f (append g$665$14290 g$665$14292)) '#f)) ((lambda (g$665$14294) (if (g$665$11026 g$665$14294) (begin '#f ((lambda (g$665$14296) (if g$665$14296 (begin '#f ((lambda (g$665$14298) (if g$665$14298 (begin '#f (append g$665$14296 g$665$14298)) '#f)) ((lambda (g$665$14300) (if (g$665$11026 g$665$14300) (begin '#f ((lambda (g$665$14302) (if g$665$14302 (begin '#f ((lambda (g$665$14304) (if g$665$14304 (begin '#f (append g$665$14302 g$665$14304)) '#f)) ((lambda (g$665$14306) (if (equal? (g$665$11060 g$665$14306) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14300)))) '#f)) ((lambda (g$665$14308) (list g$665$14308)) (g$665$11034 g$665$14300)))) '#f)) (g$665$11038 g$665$14294)))) '#f)) ((lambda (g$665$14310) (if (g$665$11040 g$665$14310) (if (g$665$11048 g$665$14310 (g$665$11293 '=>)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14294)))) '#f)) (g$665$11038 g$665$14288)))) '#f)) ((lambda (g$665$14312) (list g$665$14312)) (g$665$11034 g$665$14288)))) '#f)) g$665$14222))) g$665$14210))) ((lambda (g$665$14314) (if (g$665$11026 g$665$14314) (begin '#f ((lambda (g$665$14316) (if g$665$14316 (begin '#f ((lambda (g$665$14318) (if g$665$14318 (begin '#f (append g$665$14316 g$665$14318)) '#f)) ((lambda (g$665$14320) (if (g$665$11026 g$665$14320) (begin '#f ((lambda (g$665$14322) (if g$665$14322 (begin '#f ((lambda (g$665$14324) (if g$665$14324 (begin '#f (append g$665$14322 g$665$14324)) '#f)) ((letrec ((g$665$14326 (lambda (g$665$14328) (if (g$665$11026 g$665$14328) ((lambda (g$665$14330) (if g$665$14330 (begin '#f ((lambda (g$665$14332) (if g$665$14332 (begin '#f (map cons g$665$14330 g$665$14332)) '#f)) (g$665$14326 (g$665$11038 g$665$14328)))) '#f)) ((lambda (g$665$14334) (list g$665$14334)) (g$665$11034 g$665$14328))) (if (g$665$11030 g$665$14328) (list (begin 'e* '())) '#f))))) g$665$14326) (g$665$11038 g$665$14320)))) '#f)) ((lambda (g$665$14336) (list g$665$14336)) (g$665$11034 g$665$14320)))) '#f)) (g$665$11038 g$665$14314)))) '#f)) ((lambda (g$665$14338) (if (g$665$11040 g$665$14338) (if (g$665$11048 g$665$14338 (g$665$11293 'else)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14314)))) '#f)) g$665$14210))) g$665$14206) ((lambda (g$665$14340) ((lambda (g$665$14342) (if (if g$665$14342 (begin '#f (apply (lambda (g$665$14344 g$665$14345) '#t) g$665$14342)) '#f) (apply (lambda (g$665$14348 g$665$14349) (error 'expander '"~a ~s" '"incorrect position of keyword else" (g$665$11058 g$665$14190 '()))) g$665$14342) ((lambda (g$665$14352) ((lambda (g$665$14354) (if (if g$665$14354 (begin '#f (apply (lambda (g$665$14356 g$665$14357) '#t) g$665$14354)) '#f) (apply (lambda (g$665$14360 g$665$14361) (list 'let (list (list 't g$665$14360)) (list 'if 't (cons g$665$14361 '(t)) (g$665$14204 (car g$665$14207) (cdr g$665$14207))))) g$665$14354) ((lambda (g$665$14364) ((lambda (g$665$14366) (if (if g$665$14366 (begin '#f (apply (lambda (g$665$14368) '#t) g$665$14366)) '#f) (apply (lambda (g$665$14370) (list 'or g$665$14370 (g$665$14204 (car g$665$14207) (cdr g$665$14207)))) g$665$14366) ((lambda (g$665$14372) ((lambda (g$665$14374) (if (if g$665$14374 (begin '#f (apply (lambda (g$665$14376 g$665$14377) '#t) g$665$14374)) '#f) (apply (lambda (g$665$14380 g$665$14381) (list 'if g$665$14380 (cons 'begin g$665$14381) (g$665$14204 (car g$665$14207) (cdr g$665$14207)))) g$665$14374) ((lambda (g$665$14384) ((lambda (g$665$14386) (if (if g$665$14386 (begin '#f (apply (lambda () '#t) g$665$14386)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"invalid last clause" (g$665$11058 g$665$14190 '()))) g$665$14386) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14384 '())))) ((lambda (g$665$14388) '()) g$665$14384))) g$665$14372))) ((lambda (g$665$14390) (if (g$665$11026 g$665$14390) (begin '#f ((lambda (g$665$14392) (if g$665$14392 (begin '#f ((lambda (g$665$14394) (if g$665$14394 (begin '#f (append g$665$14392 g$665$14394)) '#f)) ((letrec ((g$665$14396 (lambda (g$665$14398) (if (g$665$11026 g$665$14398) ((lambda (g$665$14400) (if g$665$14400 (begin '#f ((lambda (g$665$14402) (if g$665$14402 (begin '#f (map cons g$665$14400 g$665$14402)) '#f)) (g$665$14396 (g$665$11038 g$665$14398)))) '#f)) ((lambda (g$665$14404) (list g$665$14404)) (g$665$11034 g$665$14398))) (if (g$665$11030 g$665$14398) (list (begin 'e* '())) '#f))))) g$665$14396) (g$665$11038 g$665$14390)))) '#f)) ((lambda (g$665$14406) (list g$665$14406)) (g$665$11034 g$665$14390)))) '#f)) g$665$14372))) g$665$14364))) ((lambda (g$665$14408) (if (g$665$11026 g$665$14408) (begin '#f ((lambda (g$665$14410) (if g$665$14410 (begin '#f ((lambda (g$665$14412) (if g$665$14412 (begin '#f (append g$665$14410 g$665$14412)) '#f)) ((lambda (g$665$14414) (if (equal? (g$665$11060 g$665$14414) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14408)))) '#f)) ((lambda (g$665$14416) (list g$665$14416)) (g$665$11034 g$665$14408)))) '#f)) g$665$14364))) g$665$14352))) ((lambda (g$665$14418) (if (g$665$11026 g$665$14418) (begin '#f ((lambda (g$665$14420) (if g$665$14420 (begin '#f ((lambda (g$665$14422) (if g$665$14422 (begin '#f (append g$665$14420 g$665$14422)) '#f)) ((lambda (g$665$14424) (if (g$665$11026 g$665$14424) (begin '#f ((lambda (g$665$14426) (if g$665$14426 (begin '#f ((lambda (g$665$14428) (if g$665$14428 (begin '#f (append g$665$14426 g$665$14428)) '#f)) ((lambda (g$665$14430) (if (g$665$11026 g$665$14430) (begin '#f ((lambda (g$665$14432) (if g$665$14432 (begin '#f ((lambda (g$665$14434) (if g$665$14434 (begin '#f (append g$665$14432 g$665$14434)) '#f)) ((lambda (g$665$14436) (if (equal? (g$665$11060 g$665$14436) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14430)))) '#f)) ((lambda (g$665$14438) (list g$665$14438)) (g$665$11034 g$665$14430)))) '#f)) (g$665$11038 g$665$14424)))) '#f)) ((lambda (g$665$14440) (if (g$665$11040 g$665$14440) (if (g$665$11048 g$665$14440 (g$665$11293 '=>)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14424)))) '#f)) (g$665$11038 g$665$14418)))) '#f)) ((lambda (g$665$14442) (list g$665$14442)) (g$665$11034 g$665$14418)))) '#f)) g$665$14352))) g$665$14340))) ((lambda (g$665$14444) (if (g$665$11026 g$665$14444) (begin '#f ((lambda (g$665$14446) (if g$665$14446 (begin '#f ((lambda (g$665$14448) (if g$665$14448 (begin '#f (append g$665$14446 g$665$14448)) '#f)) ((lambda (g$665$14450) (if (g$665$11026 g$665$14450) (begin '#f ((lambda (g$665$14452) (if g$665$14452 (begin '#f ((lambda (g$665$14454) (if g$665$14454 (begin '#f (append g$665$14452 g$665$14454)) '#f)) ((letrec ((g$665$14456 (lambda (g$665$14458) (if (g$665$11026 g$665$14458) ((lambda (g$665$14460) (if g$665$14460 (begin '#f ((lambda (g$665$14462) (if g$665$14462 (begin '#f (map cons g$665$14460 g$665$14462)) '#f)) (g$665$14456 (g$665$11038 g$665$14458)))) '#f)) ((lambda (g$665$14464) (list g$665$14464)) (g$665$11034 g$665$14458))) (if (g$665$11030 g$665$14458) (list (begin 'e* '())) '#f))))) g$665$14456) (g$665$11038 g$665$14450)))) '#f)) ((lambda (g$665$14466) (list g$665$14466)) (g$665$11034 g$665$14450)))) '#f)) (g$665$11038 g$665$14444)))) '#f)) ((lambda (g$665$14468) (if (g$665$11040 g$665$14468) (if (g$665$11048 g$665$14468 (g$665$11293 'else)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14444)))) '#f)) g$665$14340))) g$665$14206))))) (g$665$14204 g$665$14200 g$665$14201)))) g$665$14194) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14192 '())))) ((lambda (g$665$14470) (if (g$665$11026 g$665$14470) (begin '#f ((lambda (g$665$14472) (if g$665$14472 (begin '#f ((lambda (g$665$14474) (if g$665$14474 (begin '#f (append g$665$14472 g$665$14474)) '#f)) ((lambda (g$665$14476) (if (g$665$11026 g$665$14476) (begin '#f ((lambda (g$665$14478) (if g$665$14478 (begin '#f ((lambda (g$665$14480) (if g$665$14480 (begin '#f (append g$665$14478 g$665$14480)) '#f)) ((letrec ((g$665$14482 (lambda (g$665$14484) (if (g$665$11026 g$665$14484) ((lambda (g$665$14486) (if g$665$14486 (begin '#f ((lambda (g$665$14488) (if g$665$14488 (begin '#f (map cons g$665$14486 g$665$14488)) '#f)) (g$665$14482 (g$665$11038 g$665$14484)))) '#f)) ((lambda (g$665$14490) (list g$665$14490)) (g$665$11034 g$665$14484))) (if (g$665$11030 g$665$14484) (list (begin 'cls* '())) '#f))))) g$665$14482) (g$665$11038 g$665$14476)))) '#f)) ((lambda (g$665$14492) (list g$665$14492)) (g$665$11034 g$665$14476)))) '#f)) (g$665$11038 g$665$14470)))) '#f)) ((lambda (g$665$14494) '()) (g$665$11034 g$665$14470)))) '#f)) g$665$14192))) g$665$14190))) (set! g$665$11353 (lambda (g$665$14496) ((lambda (g$665$14498) ((lambda (g$665$14500) (if (if g$665$14500 (begin '#f (apply (lambda (g$665$14502 g$665$14503) '#t) g$665$14500)) '#f) (apply (lambda (g$665$14506 g$665$14507) ((lambda (g$665$14510) (begin (if (string? g$665$14510) (void) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$14496))) (with-input-from-file g$665$14510 (lambda () (letrec ((g$665$14512 (lambda (g$665$14514) ((lambda (g$665$14516) (if (eof-object? g$665$14516) (cons (g$665$11323 'begin) (g$665$11006 g$665$14506 (reverse g$665$14514))) (g$665$14512 (cons g$665$14516 g$665$14514)))) (read))))) (g$665$14512 '())))))) (g$665$11060 g$665$14507))) g$665$14500) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14498 '())))) ((lambda (g$665$14518) (if (g$665$11026 g$665$14518) (begin '#f ((lambda (g$665$14520) (if g$665$14520 (begin '#f ((lambda (g$665$14522) (if g$665$14522 (begin '#f (append g$665$14520 g$665$14522)) '#f)) ((lambda (g$665$14524) (if (g$665$11026 g$665$14524) (begin '#f ((lambda (g$665$14526) (if g$665$14526 (begin '#f ((lambda (g$665$14528) (if g$665$14528 (begin '#f (append g$665$14526 g$665$14528)) '#f)) ((lambda (g$665$14530) (if (equal? (g$665$11060 g$665$14530) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14524)))) '#f)) ((lambda (g$665$14532) (list g$665$14532)) (g$665$11034 g$665$14524)))) '#f)) (g$665$11038 g$665$14518)))) '#f)) ((lambda (g$665$14534) (list g$665$14534)) (g$665$11034 g$665$14518)))) '#f)) g$665$14498))) g$665$14496))) (set! g$665$11355 (lambda (g$665$14536) ((lambda (g$665$14538) ((lambda (g$665$14540) (if (if g$665$14540 (begin '#f (apply (lambda (g$665$14542 g$665$14543 g$665$14544) '#t) g$665$14540)) '#f) (apply (lambda (g$665$14548 g$665$14549 g$665$14550) (begin (if (for-all (lambda (g$665$14554) (if (g$665$11040 g$665$14554) (if (not (g$665$11048 g$665$14554 (g$665$11293 '|...|))) (begin '#f (not (g$665$11048 g$665$14554 (g$665$11293 '_)))) '#f) '#f)) g$665$14548) (void) (error 'expander '"~a ~s" '"invalid literals" (g$665$11058 g$665$14536 '()))) (g$665$11323 (list 'lambda '(x) (cons 'syntax-case (cons 'x (cons g$665$14548 (map (lambda (g$665$14556 g$665$14557) (list g$665$14556 (list 'syntax g$665$14557))) g$665$14549 g$665$14550)))))))) g$665$14540) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14538 '())))) ((lambda (g$665$14560) (if (g$665$11026 g$665$14560) (begin '#f ((lambda (g$665$14562) (if g$665$14562 (begin '#f ((lambda (g$665$14564) (if g$665$14564 (begin '#f (append g$665$14562 g$665$14564)) '#f)) ((lambda (g$665$14566) (if (g$665$11026 g$665$14566) (begin '#f ((lambda (g$665$14568) (if g$665$14568 (begin '#f ((lambda (g$665$14570) (if g$665$14570 (begin '#f (append g$665$14568 g$665$14570)) '#f)) ((letrec ((g$665$14572 (lambda (g$665$14574) (if (g$665$11026 g$665$14574) ((lambda (g$665$14576) (if g$665$14576 (begin '#f ((lambda (g$665$14578) (if g$665$14578 (begin '#f (map cons g$665$14576 g$665$14578)) '#f)) (g$665$14572 (g$665$11038 g$665$14574)))) '#f)) ((lambda (g$665$14580) (if (g$665$11026 g$665$14580) (begin '#f ((lambda (g$665$14582) (if g$665$14582 (begin '#f ((lambda (g$665$14584) (if g$665$14584 (begin '#f (append g$665$14582 g$665$14584)) '#f)) ((lambda (g$665$14586) (if (g$665$11026 g$665$14586) (begin '#f ((lambda (g$665$14588) (if g$665$14588 (begin '#f ((lambda (g$665$14590) (if g$665$14590 (begin '#f (append g$665$14588 g$665$14590)) '#f)) ((lambda (g$665$14592) (if (equal? (g$665$11060 g$665$14592) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14586)))) '#f)) ((lambda (g$665$14594) (list g$665$14594)) (g$665$11034 g$665$14586)))) '#f)) (g$665$11038 g$665$14580)))) '#f)) ((lambda (g$665$14596) (list g$665$14596)) (g$665$11034 g$665$14580)))) '#f)) (g$665$11034 g$665$14574))) (if (g$665$11030 g$665$14574) (list (begin 'pat* '()) (begin 'tmp* '())) '#f))))) g$665$14572) (g$665$11038 g$665$14566)))) '#f)) ((letrec ((g$665$14598 (lambda (g$665$14600) (if (g$665$11026 g$665$14600) ((lambda (g$665$14602) (if g$665$14602 (begin '#f ((lambda (g$665$14604) (if g$665$14604 (begin '#f (map cons g$665$14602 g$665$14604)) '#f)) (g$665$14598 (g$665$11038 g$665$14600)))) '#f)) ((lambda (g$665$14606) (list g$665$14606)) (g$665$11034 g$665$14600))) (if (g$665$11030 g$665$14600) (list (begin 'lits '())) '#f))))) g$665$14598) (g$665$11034 g$665$14566)))) '#f)) (g$665$11038 g$665$14560)))) '#f)) ((lambda (g$665$14608) '()) (g$665$11034 g$665$14560)))) '#f)) g$665$14538))) g$665$14536))) (set! g$665$11357 ((lambda () ((lambda (g$665$14632 g$665$14634 g$665$14636 g$665$14638 g$665$14640 g$665$14642) (begin (set! g$665$14632 (lambda (g$665$15254 g$665$15255) (letrec ((g$665$15258 (lambda (g$665$15260) (if (null? g$665$15260) g$665$15255 (g$665$14634 (car g$665$15260) (g$665$15258 (cdr g$665$15260))))))) (g$665$15258 g$665$15254)))) (set! g$665$14634 (lambda (g$665$15148 g$665$15149) ((lambda (g$665$15152) ((lambda (g$665$15154) (if (if g$665$15154 (begin '#f (apply (lambda (g$665$15156) '#t) g$665$15154)) '#f) (apply (lambda (g$665$15158) ((lambda (g$665$15160) ((lambda (g$665$15162) (if (if g$665$15162 (begin '#f (apply (lambda (g$665$15164) '#t) g$665$15162)) '#f) (apply (lambda (g$665$15166) (list (g$665$11293 'quote) (cons g$665$15166 g$665$15158))) g$665$15162) ((lambda (g$665$15168) ((lambda (g$665$15170) (if (if g$665$15170 (begin '#f (apply (lambda () '#t) g$665$15170)) '#f) (apply (lambda () ((lambda (g$665$15172) ((lambda (g$665$15174) (if (if g$665$15174 (begin '#f (apply (lambda () '#t) g$665$15174)) '#f) (apply (lambda () (list (g$665$11293 'list) g$665$15148)) g$665$15174) ((lambda (g$665$15176) ((lambda (g$665$15178) (if (if g$665$15178 (begin '#f (apply (lambda () '#t) g$665$15178)) '#f) (apply (lambda () (list (g$665$11293 'cons) g$665$15148 g$665$15149)) g$665$15178) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15176 '())))) ((lambda (g$665$15180) '()) g$665$15176))) g$665$15172))) ((lambda (g$665$15182) (if (equal? (g$665$11060 g$665$15182) '()) (begin '#f '()) '#f)) g$665$15172))) g$665$15158)) g$665$15170) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15168 '())))) ((lambda (g$665$15184) '()) g$665$15168))) g$665$15160))) ((lambda (g$665$15186) (if (g$665$11026 g$665$15186) (begin '#f ((lambda (g$665$15188) (if g$665$15188 (begin '#f ((lambda (g$665$15190) (if g$665$15190 (begin '#f (append g$665$15188 g$665$15190)) '#f)) ((lambda (g$665$15192) (if (g$665$11026 g$665$15192) (begin '#f ((lambda (g$665$15194) (if g$665$15194 (begin '#f ((lambda (g$665$15196) (if g$665$15196 (begin '#f (append g$665$15194 g$665$15196)) '#f)) ((lambda (g$665$15198) (if (equal? (g$665$11060 g$665$15198) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15192)))) '#f)) ((lambda (g$665$15200) (list g$665$15200)) (g$665$11034 g$665$15192)))) '#f)) (g$665$11038 g$665$15186)))) '#f)) ((lambda (g$665$15202) (if (g$665$11040 g$665$15202) (if (g$665$11048 g$665$15202 (g$665$11293 'quote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15186)))) '#f)) g$665$15160))) g$665$15148)) g$665$15154) ((lambda (g$665$15204) ((lambda (g$665$15206) (if (if g$665$15206 (begin '#f (apply (lambda (g$665$15208) '#t) g$665$15206)) '#f) (apply (lambda (g$665$15210) (cons* (g$665$11293 'list) g$665$15148 g$665$15210)) g$665$15206) ((lambda (g$665$15212) ((lambda (g$665$15214) (if (if g$665$15214 (begin '#f (apply (lambda () '#t) g$665$15214)) '#f) (apply (lambda () (list (g$665$11293 'cons) g$665$15148 g$665$15149)) g$665$15214) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15212 '())))) ((lambda (g$665$15216) '()) g$665$15212))) g$665$15204))) ((lambda (g$665$15218) (if (g$665$11026 g$665$15218) (begin '#f ((lambda (g$665$15220) (if g$665$15220 (begin '#f ((lambda (g$665$15222) (if g$665$15222 (begin '#f (append g$665$15220 g$665$15222)) '#f)) ((letrec ((g$665$15224 (lambda (g$665$15226) (if (g$665$11026 g$665$15226) ((lambda (g$665$15228) (if g$665$15228 (begin '#f ((lambda (g$665$15230) (if g$665$15230 (begin '#f (map cons g$665$15228 g$665$15230)) '#f)) (g$665$15224 (g$665$11038 g$665$15226)))) '#f)) ((lambda (g$665$15232) (list g$665$15232)) (g$665$11034 g$665$15226))) (if (g$665$11030 g$665$15226) (list (begin 'stuff '())) '#f))))) g$665$15224) (g$665$11038 g$665$15218)))) '#f)) ((lambda (g$665$15234) (if (g$665$11040 g$665$15234) (if (g$665$11048 g$665$15234 (g$665$11293 'list)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15218)))) '#f)) g$665$15204))) g$665$15152))) ((lambda (g$665$15236) (if (g$665$11026 g$665$15236) (begin '#f ((lambda (g$665$15238) (if g$665$15238 (begin '#f ((lambda (g$665$15240) (if g$665$15240 (begin '#f (append g$665$15238 g$665$15240)) '#f)) ((lambda (g$665$15242) (if (g$665$11026 g$665$15242) (begin '#f ((lambda (g$665$15244) (if g$665$15244 (begin '#f ((lambda (g$665$15246) (if g$665$15246 (begin '#f (append g$665$15244 g$665$15246)) '#f)) ((lambda (g$665$15248) (if (equal? (g$665$11060 g$665$15248) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15242)))) '#f)) ((lambda (g$665$15250) (list g$665$15250)) (g$665$11034 g$665$15242)))) '#f)) (g$665$11038 g$665$15236)))) '#f)) ((lambda (g$665$15252) (if (g$665$11040 g$665$15252) (if (g$665$11048 g$665$15252 (g$665$11293 'quote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15236)))) '#f)) g$665$15152))) g$665$15149))) (set! g$665$14636 (lambda (g$665$15082 g$665$15083) ((lambda (g$665$15086) (if (null? g$665$15086) (list (g$665$11293 'quote) '()) (if (null? (cdr g$665$15086)) (car g$665$15086) (cons* (g$665$11293 'append) g$665$15086)))) (letrec ((g$665$15088 (lambda (g$665$15090) (if (null? g$665$15090) ((lambda (g$665$15092) ((lambda (g$665$15094) (if (if g$665$15094 (begin '#f (apply (lambda () '#t) g$665$15094)) '#f) (apply (lambda () '()) g$665$15094) ((lambda (g$665$15096) ((lambda (g$665$15098) (if (if g$665$15098 (begin '#f (apply (lambda () '#t) g$665$15098)) '#f) (apply (lambda () (list g$665$15083)) g$665$15098) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15096 '())))) ((lambda (g$665$15100) '()) g$665$15096))) g$665$15092))) ((lambda (g$665$15102) (if (g$665$11026 g$665$15102) (begin '#f ((lambda (g$665$15104) (if g$665$15104 (begin '#f ((lambda (g$665$15106) (if g$665$15106 (begin '#f (append g$665$15104 g$665$15106)) '#f)) ((lambda (g$665$15108) (if (g$665$11026 g$665$15108) (begin '#f ((lambda (g$665$15110) (if g$665$15110 (begin '#f ((lambda (g$665$15112) (if g$665$15112 (begin '#f (append g$665$15110 g$665$15112)) '#f)) ((lambda (g$665$15114) (if (equal? (g$665$11060 g$665$15114) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15108)))) '#f)) ((lambda (g$665$15116) (if (equal? (g$665$11060 g$665$15116) '()) (begin '#f '()) '#f)) (g$665$11034 g$665$15108)))) '#f)) (g$665$11038 g$665$15102)))) '#f)) ((lambda (g$665$15118) (if (g$665$11040 g$665$15118) (if (g$665$11048 g$665$15118 (g$665$11293 'quote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15102)))) '#f)) g$665$15092))) g$665$15083) ((lambda (g$665$15120) ((lambda (g$665$15122) (if (if g$665$15122 (begin '#f (apply (lambda () '#t) g$665$15122)) '#f) (apply (lambda () (g$665$15088 (cdr g$665$15090))) g$665$15122) ((lambda (g$665$15124) ((lambda (g$665$15126) (if (if g$665$15126 (begin '#f (apply (lambda () '#t) g$665$15126)) '#f) (apply (lambda () (cons (car g$665$15090) (g$665$15088 (cdr g$665$15090)))) g$665$15126) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15124 '())))) ((lambda (g$665$15128) '()) g$665$15124))) g$665$15120))) ((lambda (g$665$15130) (if (g$665$11026 g$665$15130) (begin '#f ((lambda (g$665$15132) (if g$665$15132 (begin '#f ((lambda (g$665$15134) (if g$665$15134 (begin '#f (append g$665$15132 g$665$15134)) '#f)) ((lambda (g$665$15136) (if (g$665$11026 g$665$15136) (begin '#f ((lambda (g$665$15138) (if g$665$15138 (begin '#f ((lambda (g$665$15140) (if g$665$15140 (begin '#f (append g$665$15138 g$665$15140)) '#f)) ((lambda (g$665$15142) (if (equal? (g$665$11060 g$665$15142) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15136)))) '#f)) ((lambda (g$665$15144) (if (equal? (g$665$11060 g$665$15144) '()) (begin '#f '()) '#f)) (g$665$11034 g$665$15136)))) '#f)) (g$665$11038 g$665$15130)))) '#f)) ((lambda (g$665$15146) (if (g$665$11040 g$665$15146) (if (g$665$11048 g$665$15146 (g$665$11293 'quote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15130)))) '#f)) g$665$15120))) (car g$665$15090)))))) (g$665$15088 g$665$15082))))) (set! g$665$14638 (lambda (g$665$14922) ((lambda (g$665$14924) ((lambda (g$665$14926) ((lambda (g$665$14928) (if (if g$665$14928 (begin '#f (apply (lambda (g$665$14930) '#t) g$665$14928)) '#f) (apply (lambda (g$665$14932) (list (g$665$11293 'quote) (list->vector g$665$14932))) g$665$14928) ((lambda (g$665$14934) ((lambda (g$665$14936) (if (if g$665$14936 (begin '#f (apply (lambda () '#t) g$665$14936)) '#f) (apply (lambda () (letrec ((g$665$14938 (lambda (g$665$14942 g$665$14943) ((lambda (g$665$14946) ((lambda (g$665$14948) (if (if g$665$14948 (begin '#f (apply (lambda (g$665$14950) '#t) g$665$14948)) '#f) (apply (lambda (g$665$14952) (g$665$14943 (map (lambda (g$665$14954) (list (g$665$11293 'quote) g$665$14954)) g$665$14952))) g$665$14948) ((lambda (g$665$14956) ((lambda (g$665$14958) (if (if g$665$14958 (begin '#f (apply (lambda (g$665$14960) '#t) g$665$14958)) '#f) (apply (lambda (g$665$14962) (g$665$14943 g$665$14962)) g$665$14958) ((lambda (g$665$14964) ((lambda (g$665$14966) (if (if g$665$14966 (begin '#f (apply (lambda (g$665$14968 g$665$14969) '#t) g$665$14966)) '#f) (apply (lambda (g$665$14972 g$665$14973) (g$665$14938 g$665$14973 (lambda (g$665$14976) (g$665$14943 (cons g$665$14972 g$665$14976))))) g$665$14966) ((lambda (g$665$14978) ((lambda (g$665$14980) (if (if g$665$14980 (begin '#f (apply (lambda () '#t) g$665$14980)) '#f) (apply (lambda () (list (g$665$11293 'list->vector) g$665$14924)) g$665$14980) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14978 '())))) ((lambda (g$665$14982) '()) g$665$14978))) g$665$14964))) ((lambda (g$665$14984) (if (g$665$11026 g$665$14984) (begin '#f ((lambda (g$665$14986) (if g$665$14986 (begin '#f ((lambda (g$665$14988) (if g$665$14988 (begin '#f (append g$665$14986 g$665$14988)) '#f)) ((lambda (g$665$14990) (if (g$665$11026 g$665$14990) (begin '#f ((lambda (g$665$14992) (if g$665$14992 (begin '#f ((lambda (g$665$14994) (if g$665$14994 (begin '#f (append g$665$14992 g$665$14994)) '#f)) ((lambda (g$665$14996) (if (g$665$11026 g$665$14996) (begin '#f ((lambda (g$665$14998) (if g$665$14998 (begin '#f ((lambda (g$665$15000) (if g$665$15000 (begin '#f (append g$665$14998 g$665$15000)) '#f)) ((lambda (g$665$15002) (if (equal? (g$665$11060 g$665$15002) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14996)))) '#f)) ((lambda (g$665$15004) (list g$665$15004)) (g$665$11034 g$665$14996)))) '#f)) (g$665$11038 g$665$14990)))) '#f)) ((lambda (g$665$15006) (list g$665$15006)) (g$665$11034 g$665$14990)))) '#f)) (g$665$11038 g$665$14984)))) '#f)) ((lambda (g$665$15008) (if (g$665$11040 g$665$15008) (if (g$665$11048 g$665$15008 (g$665$11293 'cons)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14984)))) '#f)) g$665$14964))) g$665$14956))) ((lambda (g$665$15010) (if (g$665$11026 g$665$15010) (begin '#f ((lambda (g$665$15012) (if g$665$15012 (begin '#f ((lambda (g$665$15014) (if g$665$15014 (begin '#f (append g$665$15012 g$665$15014)) '#f)) ((letrec ((g$665$15016 (lambda (g$665$15018) (if (g$665$11026 g$665$15018) ((lambda (g$665$15020) (if g$665$15020 (begin '#f ((lambda (g$665$15022) (if g$665$15022 (begin '#f (map cons g$665$15020 g$665$15022)) '#f)) (g$665$15016 (g$665$11038 g$665$15018)))) '#f)) ((lambda (g$665$15024) (list g$665$15024)) (g$665$11034 g$665$15018))) (if (g$665$11030 g$665$15018) (list (begin 'x* '())) '#f))))) g$665$15016) (g$665$11038 g$665$15010)))) '#f)) ((lambda (g$665$15026) (if (g$665$11040 g$665$15026) (if (g$665$11048 g$665$15026 (g$665$11293 'list)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15010)))) '#f)) g$665$14956))) g$665$14946))) ((lambda (g$665$15028) (if (g$665$11026 g$665$15028) (begin '#f ((lambda (g$665$15030) (if g$665$15030 (begin '#f ((lambda (g$665$15032) (if g$665$15032 (begin '#f (append g$665$15030 g$665$15032)) '#f)) ((lambda (g$665$15034) (if (g$665$11026 g$665$15034) (begin '#f ((lambda (g$665$15036) (if g$665$15036 (begin '#f ((lambda (g$665$15038) (if g$665$15038 (begin '#f (append g$665$15036 g$665$15038)) '#f)) ((lambda (g$665$15040) (if (equal? (g$665$11060 g$665$15040) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15034)))) '#f)) ((letrec ((g$665$15042 (lambda (g$665$15044) (if (g$665$11026 g$665$15044) ((lambda (g$665$15046) (if g$665$15046 (begin '#f ((lambda (g$665$15048) (if g$665$15048 (begin '#f (map cons g$665$15046 g$665$15048)) '#f)) (g$665$15042 (g$665$11038 g$665$15044)))) '#f)) ((lambda (g$665$15050) (list g$665$15050)) (g$665$11034 g$665$15044))) (if (g$665$11030 g$665$15044) (list (begin 'x* '())) '#f))))) g$665$15042) (g$665$11034 g$665$15034)))) '#f)) (g$665$11038 g$665$15028)))) '#f)) ((lambda (g$665$15052) (if (g$665$11040 g$665$15052) (if (g$665$11048 g$665$15052 (g$665$11293 'quote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15028)))) '#f)) g$665$14946))) g$665$14942)))) (g$665$14938 g$665$14922 (lambda (g$665$14940) (cons* (g$665$11293 'vector) g$665$14940))))) g$665$14936) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14934 '())))) ((lambda (g$665$15054) '()) g$665$14934))) g$665$14926))) ((lambda (g$665$15056) (if (g$665$11026 g$665$15056) (begin '#f ((lambda (g$665$15058) (if g$665$15058 (begin '#f ((lambda (g$665$15060) (if g$665$15060 (begin '#f (append g$665$15058 g$665$15060)) '#f)) ((lambda (g$665$15062) (if (g$665$11026 g$665$15062) (begin '#f ((lambda (g$665$15064) (if g$665$15064 (begin '#f ((lambda (g$665$15066) (if g$665$15066 (begin '#f (append g$665$15064 g$665$15066)) '#f)) ((lambda (g$665$15068) (if (equal? (g$665$11060 g$665$15068) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15062)))) '#f)) ((letrec ((g$665$15070 (lambda (g$665$15072) (if (g$665$11026 g$665$15072) ((lambda (g$665$15074) (if g$665$15074 (begin '#f ((lambda (g$665$15076) (if g$665$15076 (begin '#f (map cons g$665$15074 g$665$15076)) '#f)) (g$665$15070 (g$665$11038 g$665$15072)))) '#f)) ((lambda (g$665$15078) (list g$665$15078)) (g$665$11034 g$665$15072))) (if (g$665$11030 g$665$15072) (list (begin 'x* '())) '#f))))) g$665$15070) (g$665$11034 g$665$15062)))) '#f)) (g$665$11038 g$665$15056)))) '#f)) ((lambda (g$665$15080) (if (g$665$11040 g$665$15080) (if (g$665$11048 g$665$15080 (g$665$11293 'quote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15056)))) '#f)) g$665$14926))) g$665$14924)) g$665$14922))) (set! g$665$14640 (lambda (g$665$14828 g$665$14829) ((lambda (g$665$14832) ((lambda (g$665$14834) (if (if g$665$14834 (begin '#f (apply (lambda (g$665$14836 g$665$14837) '#t) g$665$14834)) '#f) (apply (lambda (g$665$14840 g$665$14841) ((lambda (g$665$14844) ((lambda (g$665$14846) (if (if g$665$14846 (begin '#f (apply (lambda (g$665$14848) '#t) g$665$14846)) '#f) (apply (lambda (g$665$14850) (if (= g$665$14829 '0) (g$665$14632 g$665$14850 (g$665$14640 g$665$14841 g$665$14829)) (g$665$14634 (g$665$14634 (list (g$665$11293 'quote) 'unquote) (g$665$14642 g$665$14850 (- g$665$14829 '1))) (g$665$14640 g$665$14841 g$665$14829)))) g$665$14846) ((lambda (g$665$14852) ((lambda (g$665$14854) (if (if g$665$14854 (begin '#f (apply (lambda (g$665$14856) '#t) g$665$14854)) '#f) (apply (lambda (g$665$14858) (if (= g$665$14829 '0) (g$665$14636 g$665$14858 (g$665$14640 g$665$14841 g$665$14829)) (g$665$14634 (g$665$14634 (list (g$665$11293 'quote) 'unquote-splicing) (g$665$14642 g$665$14858 (- g$665$14829 '1))) (g$665$14640 g$665$14841 g$665$14829)))) g$665$14854) ((lambda (g$665$14860) ((lambda (g$665$14862) (if (if g$665$14862 (begin '#f (apply (lambda (g$665$14864) '#t) g$665$14862)) '#f) (apply (lambda (g$665$14866) (g$665$14634 (g$665$14642 g$665$14866 g$665$14829) (g$665$14640 g$665$14841 g$665$14829))) g$665$14862) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14860 '())))) ((lambda (g$665$14868) (list g$665$14868)) g$665$14860))) g$665$14852))) ((lambda (g$665$14870) (if (g$665$11026 g$665$14870) (begin '#f ((lambda (g$665$14872) (if g$665$14872 (begin '#f ((lambda (g$665$14874) (if g$665$14874 (begin '#f (append g$665$14872 g$665$14874)) '#f)) ((letrec ((g$665$14876 (lambda (g$665$14878) (if (g$665$11026 g$665$14878) ((lambda (g$665$14880) (if g$665$14880 (begin '#f ((lambda (g$665$14882) (if g$665$14882 (begin '#f (map cons g$665$14880 g$665$14882)) '#f)) (g$665$14876 (g$665$11038 g$665$14878)))) '#f)) ((lambda (g$665$14884) (list g$665$14884)) (g$665$11034 g$665$14878))) (if (g$665$11030 g$665$14878) (list (begin 'p '())) '#f))))) g$665$14876) (g$665$11038 g$665$14870)))) '#f)) ((lambda (g$665$14886) (if (g$665$11040 g$665$14886) (if (g$665$11048 g$665$14886 (g$665$11293 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14870)))) '#f)) g$665$14852))) g$665$14844))) ((lambda (g$665$14888) (if (g$665$11026 g$665$14888) (begin '#f ((lambda (g$665$14890) (if g$665$14890 (begin '#f ((lambda (g$665$14892) (if g$665$14892 (begin '#f (append g$665$14890 g$665$14892)) '#f)) ((letrec ((g$665$14894 (lambda (g$665$14896) (if (g$665$11026 g$665$14896) ((lambda (g$665$14898) (if g$665$14898 (begin '#f ((lambda (g$665$14900) (if g$665$14900 (begin '#f (map cons g$665$14898 g$665$14900)) '#f)) (g$665$14894 (g$665$11038 g$665$14896)))) '#f)) ((lambda (g$665$14902) (list g$665$14902)) (g$665$11034 g$665$14896))) (if (g$665$11030 g$665$14896) (list (begin 'p '())) '#f))))) g$665$14894) (g$665$11038 g$665$14888)))) '#f)) ((lambda (g$665$14904) (if (g$665$11040 g$665$14904) (if (g$665$11048 g$665$14904 (g$665$11293 'unquote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14888)))) '#f)) g$665$14844))) g$665$14840)) g$665$14834) ((lambda (g$665$14906) ((lambda (g$665$14908) (if (if g$665$14908 (begin '#f (apply (lambda () '#t) g$665$14908)) '#f) (apply (lambda () (list (g$665$11293 'quote) '())) g$665$14908) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14906 '())))) ((lambda (g$665$14910) (if (equal? (g$665$11060 g$665$14910) '()) (begin '#f '()) '#f)) g$665$14906))) g$665$14832))) ((lambda (g$665$14912) (if (g$665$11026 g$665$14912) (begin '#f ((lambda (g$665$14914) (if g$665$14914 (begin '#f ((lambda (g$665$14916) (if g$665$14916 (begin '#f (append g$665$14914 g$665$14916)) '#f)) ((lambda (g$665$14918) (list g$665$14918)) (g$665$11038 g$665$14912)))) '#f)) ((lambda (g$665$14920) (list g$665$14920)) (g$665$11034 g$665$14912)))) '#f)) g$665$14832))) g$665$14828))) (set! g$665$14642 (lambda (g$665$14644 g$665$14645) ((lambda (g$665$14648) ((lambda (g$665$14650) (if (if g$665$14650 (begin '#f (apply (lambda (g$665$14652) '#t) g$665$14650)) '#f) (apply (lambda (g$665$14654) (if (= g$665$14645 '0) g$665$14654 (g$665$14634 (list (g$665$11293 'quote) 'unquote) (g$665$14642 (list g$665$14654) (- g$665$14645 '1))))) g$665$14650) ((lambda (g$665$14656) ((lambda (g$665$14658) (if (if g$665$14658 (begin '#f (apply (lambda (g$665$14660 g$665$14661) '#t) g$665$14658)) '#f) (apply (lambda (g$665$14664 g$665$14665) (if (= g$665$14645 '0) (g$665$14632 g$665$14664 (g$665$14642 g$665$14665 g$665$14645)) (g$665$14634 (g$665$14634 (list (g$665$11293 'quote) 'unquote) (g$665$14642 g$665$14664 (- g$665$14645 '1))) (g$665$14642 g$665$14665 g$665$14645)))) g$665$14658) ((lambda (g$665$14668) ((lambda (g$665$14670) (if (if g$665$14670 (begin '#f (apply (lambda (g$665$14672 g$665$14673) '#t) g$665$14670)) '#f) (apply (lambda (g$665$14676 g$665$14677) (if (= g$665$14645 '0) (g$665$14636 g$665$14676 (g$665$14642 g$665$14677 g$665$14645)) (g$665$14634 (g$665$14634 (list (g$665$11293 'quote) 'unquote-splicing) (g$665$14642 g$665$14676 (- g$665$14645 '1))) (g$665$14642 g$665$14677 g$665$14645)))) g$665$14670) ((lambda (g$665$14680) ((lambda (g$665$14682) (if (if g$665$14682 (begin '#f (apply (lambda (g$665$14684) '#t) g$665$14682)) '#f) (apply (lambda (g$665$14686) (g$665$14634 (list (g$665$11293 'quote) 'quasiquote) (g$665$14642 (list g$665$14686) (+ g$665$14645 '1)))) g$665$14682) ((lambda (g$665$14688) ((lambda (g$665$14690) (if (if g$665$14690 (begin '#f (apply (lambda (g$665$14692 g$665$14693) '#t) g$665$14690)) '#f) (apply (lambda (g$665$14696 g$665$14697) (g$665$14634 (g$665$14642 g$665$14696 g$665$14645) (g$665$14642 g$665$14697 g$665$14645))) g$665$14690) ((lambda (g$665$14700) ((lambda (g$665$14702) (if (if g$665$14702 (begin '#f (apply (lambda (g$665$14704) (not (g$665$10992 g$665$14704))) g$665$14702)) '#f) (apply (lambda (g$665$14706) (g$665$14638 (g$665$14640 g$665$14706 g$665$14645))) g$665$14702) ((lambda (g$665$14708) ((lambda (g$665$14710) (if (if g$665$14710 (begin '#f (apply (lambda (g$665$14712) '#t) g$665$14710)) '#f) (apply (lambda (g$665$14714) (list (g$665$11293 'quote) g$665$14714)) g$665$14710) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$14708 '())))) ((lambda (g$665$14716) (list g$665$14716)) g$665$14708))) g$665$14700))) ((lambda (g$665$14718) (if (g$665$11028 g$665$14718) (begin '#f ((letrec ((g$665$14720 (lambda (g$665$14722) (if (g$665$11026 g$665$14722) ((lambda (g$665$14724) (if g$665$14724 (begin '#f ((lambda (g$665$14726) (if g$665$14726 (begin '#f (map cons g$665$14724 g$665$14726)) '#f)) (g$665$14720 (g$665$11038 g$665$14722)))) '#f)) ((lambda (g$665$14728) (list g$665$14728)) (g$665$11034 g$665$14722))) (if (g$665$11030 g$665$14722) (list (begin 'x '())) '#f))))) g$665$14720) (g$665$11024 g$665$14718))) '#f)) g$665$14700))) g$665$14688))) ((lambda (g$665$14730) (if (g$665$11026 g$665$14730) (begin '#f ((lambda (g$665$14732) (if g$665$14732 (begin '#f ((lambda (g$665$14734) (if g$665$14734 (begin '#f (append g$665$14732 g$665$14734)) '#f)) ((lambda (g$665$14736) (list g$665$14736)) (g$665$11038 g$665$14730)))) '#f)) ((lambda (g$665$14738) (list g$665$14738)) (g$665$11034 g$665$14730)))) '#f)) g$665$14688))) g$665$14680))) ((lambda (g$665$14740) (if (g$665$11026 g$665$14740) (begin '#f ((lambda (g$665$14742) (if g$665$14742 (begin '#f ((lambda (g$665$14744) (if g$665$14744 (begin '#f (append g$665$14742 g$665$14744)) '#f)) ((lambda (g$665$14746) (if (g$665$11026 g$665$14746) (begin '#f ((lambda (g$665$14748) (if g$665$14748 (begin '#f ((lambda (g$665$14750) (if g$665$14750 (begin '#f (append g$665$14748 g$665$14750)) '#f)) ((lambda (g$665$14752) (if (equal? (g$665$11060 g$665$14752) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14746)))) '#f)) ((lambda (g$665$14754) (list g$665$14754)) (g$665$11034 g$665$14746)))) '#f)) (g$665$11038 g$665$14740)))) '#f)) ((lambda (g$665$14756) (if (g$665$11040 g$665$14756) (if (g$665$11048 g$665$14756 (g$665$11293 'quasiquote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14740)))) '#f)) g$665$14680))) g$665$14668))) ((lambda (g$665$14758) (if (g$665$11026 g$665$14758) (begin '#f ((lambda (g$665$14760) (if g$665$14760 (begin '#f ((lambda (g$665$14762) (if g$665$14762 (begin '#f (append g$665$14760 g$665$14762)) '#f)) ((lambda (g$665$14764) (list g$665$14764)) (g$665$11038 g$665$14758)))) '#f)) ((lambda (g$665$14766) (if (g$665$11026 g$665$14766) (begin '#f ((lambda (g$665$14768) (if g$665$14768 (begin '#f ((lambda (g$665$14770) (if g$665$14770 (begin '#f (append g$665$14768 g$665$14770)) '#f)) ((letrec ((g$665$14772 (lambda (g$665$14774) (if (g$665$11026 g$665$14774) ((lambda (g$665$14776) (if g$665$14776 (begin '#f ((lambda (g$665$14778) (if g$665$14778 (begin '#f (map cons g$665$14776 g$665$14778)) '#f)) (g$665$14772 (g$665$11038 g$665$14774)))) '#f)) ((lambda (g$665$14780) (list g$665$14780)) (g$665$11034 g$665$14774))) (if (g$665$11030 g$665$14774) (list (begin 'p '())) '#f))))) g$665$14772) (g$665$11038 g$665$14766)))) '#f)) ((lambda (g$665$14782) (if (g$665$11040 g$665$14782) (if (g$665$11048 g$665$14782 (g$665$11293 'unquote-splicing)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14766)))) '#f)) (g$665$11034 g$665$14758)))) '#f)) g$665$14668))) g$665$14656))) ((lambda (g$665$14784) (if (g$665$11026 g$665$14784) (begin '#f ((lambda (g$665$14786) (if g$665$14786 (begin '#f ((lambda (g$665$14788) (if g$665$14788 (begin '#f (append g$665$14786 g$665$14788)) '#f)) ((lambda (g$665$14790) (list g$665$14790)) (g$665$11038 g$665$14784)))) '#f)) ((lambda (g$665$14792) (if (g$665$11026 g$665$14792) (begin '#f ((lambda (g$665$14794) (if g$665$14794 (begin '#f ((lambda (g$665$14796) (if g$665$14796 (begin '#f (append g$665$14794 g$665$14796)) '#f)) ((letrec ((g$665$14798 (lambda (g$665$14800) (if (g$665$11026 g$665$14800) ((lambda (g$665$14802) (if g$665$14802 (begin '#f ((lambda (g$665$14804) (if g$665$14804 (begin '#f (map cons g$665$14802 g$665$14804)) '#f)) (g$665$14798 (g$665$11038 g$665$14800)))) '#f)) ((lambda (g$665$14806) (list g$665$14806)) (g$665$11034 g$665$14800))) (if (g$665$11030 g$665$14800) (list (begin 'p '())) '#f))))) g$665$14798) (g$665$11038 g$665$14792)))) '#f)) ((lambda (g$665$14808) (if (g$665$11040 g$665$14808) (if (g$665$11048 g$665$14808 (g$665$11293 'unquote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14792)))) '#f)) (g$665$11034 g$665$14784)))) '#f)) g$665$14656))) g$665$14648))) ((lambda (g$665$14810) (if (g$665$11026 g$665$14810) (begin '#f ((lambda (g$665$14812) (if g$665$14812 (begin '#f ((lambda (g$665$14814) (if g$665$14814 (begin '#f (append g$665$14812 g$665$14814)) '#f)) ((lambda (g$665$14816) (if (g$665$11026 g$665$14816) (begin '#f ((lambda (g$665$14818) (if g$665$14818 (begin '#f ((lambda (g$665$14820) (if g$665$14820 (begin '#f (append g$665$14818 g$665$14820)) '#f)) ((lambda (g$665$14822) (if (equal? (g$665$11060 g$665$14822) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$14816)))) '#f)) ((lambda (g$665$14824) (list g$665$14824)) (g$665$11034 g$665$14816)))) '#f)) (g$665$11038 g$665$14810)))) '#f)) ((lambda (g$665$14826) (if (g$665$11040 g$665$14826) (if (g$665$11048 g$665$14826 (g$665$11293 'unquote)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$14810)))) '#f)) g$665$14648))) g$665$14644))) (lambda (g$665$15262) ((lambda (g$665$15264) ((lambda (g$665$15266) (if (if g$665$15266 (begin '#f (apply (lambda (g$665$15268) '#t) g$665$15266)) '#f) (apply (lambda (g$665$15270) (g$665$14642 g$665$15270 '0)) g$665$15266) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15264 '())))) ((lambda (g$665$15272) (if (g$665$11026 g$665$15272) (begin '#f ((lambda (g$665$15274) (if g$665$15274 (begin '#f ((lambda (g$665$15276) (if g$665$15276 (begin '#f (append g$665$15274 g$665$15276)) '#f)) ((lambda (g$665$15278) (if (g$665$11026 g$665$15278) (begin '#f ((lambda (g$665$15280) (if g$665$15280 (begin '#f ((lambda (g$665$15282) (if g$665$15282 (begin '#f (append g$665$15280 g$665$15282)) '#f)) ((lambda (g$665$15284) (if (equal? (g$665$11060 g$665$15284) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15278)))) '#f)) ((lambda (g$665$15286) (list g$665$15286)) (g$665$11034 g$665$15278)))) '#f)) (g$665$11038 g$665$15272)))) '#f)) ((lambda (g$665$15288) '()) (g$665$11034 g$665$15272)))) '#f)) g$665$15264))) g$665$15262)))) '#f '#f '#f '#f '#f '#f)))) (set! g$665$11359 ((lambda () ((lambda (g$665$15290) (begin (set! g$665$15290 (lambda (g$665$15292 g$665$15293) ((lambda (g$665$15296) ((lambda (g$665$15298) (if (if g$665$15298 (begin '#f (apply (lambda (g$665$15300) '#t) g$665$15298)) '#f) (apply (lambda (g$665$15302) (if (= g$665$15293 '0) ((lambda (g$665$15304) (values (list g$665$15304) (list g$665$15302) g$665$15304)) (gensym)) (call-with-values (lambda () (g$665$15290 g$665$15302 (- g$665$15293 '1))) (lambda (g$665$15306 g$665$15307 g$665$15308) (values g$665$15306 g$665$15307 (list 'unsyntax g$665$15308)))))) g$665$15298) ((lambda (g$665$15312) ((lambda (g$665$15314) (if (if g$665$15314 (begin '#f (apply (lambda () (= g$665$15293 '0)) g$665$15314)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"incorrect use of unsyntax" (g$665$11058 g$665$15292 '()))) g$665$15314) ((lambda (g$665$15316) ((lambda (g$665$15318) (if (if g$665$15318 (begin '#f (apply (lambda (g$665$15320 g$665$15321) '#t) g$665$15318)) '#f) (apply (lambda (g$665$15324 g$665$15325) (call-with-values (lambda () (g$665$15290 g$665$15325 g$665$15293)) (lambda (g$665$15328 g$665$15329 g$665$15330) (if (= g$665$15293 '0) ((lambda (g$665$15334) (values (cons (cons g$665$15334 '(|...|)) g$665$15328) (cons g$665$15324 g$665$15329) (cons g$665$15334 (cons '|...| g$665$15330)))) (gensym)) (call-with-values (lambda () (g$665$15290 g$665$15324 (- g$665$15293 '1))) (lambda (g$665$15336 g$665$15337 g$665$15338) (values (append g$665$15336 g$665$15328) (append g$665$15337 g$665$15329) (cons (list 'unsyntax-splicing g$665$15338) g$665$15330)))))))) g$665$15318) ((lambda (g$665$15342) ((lambda (g$665$15344) (if (if g$665$15344 (begin '#f (apply (lambda () (= g$665$15293 '0)) g$665$15344)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"incorrect use of unsyntax-splicing" (g$665$11058 g$665$15292 '()))) g$665$15344) ((lambda (g$665$15346) ((lambda (g$665$15348) (if (if g$665$15348 (begin '#f (apply (lambda (g$665$15350) '#t) g$665$15348)) '#f) (apply (lambda (g$665$15352) (call-with-values (lambda () (g$665$15290 g$665$15352 (+ g$665$15293 '1))) (lambda (g$665$15354 g$665$15355 g$665$15356) (values g$665$15354 g$665$15355 (list 'quasisyntax g$665$15356))))) g$665$15348) ((lambda (g$665$15360) ((lambda (g$665$15362) (if (if g$665$15362 (begin '#f (apply (lambda (g$665$15364 g$665$15365) '#t) g$665$15362)) '#f) (apply (lambda (g$665$15368 g$665$15369) (call-with-values (lambda () (g$665$15290 g$665$15368 g$665$15293)) (lambda (g$665$15372 g$665$15373 g$665$15374) (call-with-values (lambda () (g$665$15290 g$665$15369 g$665$15293)) (lambda (g$665$15375 g$665$15376 g$665$15377) (values (append g$665$15375 g$665$15372) (append g$665$15376 g$665$15373) (cons g$665$15374 g$665$15377))))))) g$665$15362) ((lambda (g$665$15384) ((lambda (g$665$15386) (if (if g$665$15386 (begin '#f (apply (lambda (g$665$15388) (not (g$665$10992 g$665$15292))) g$665$15386)) '#f) (apply (lambda (g$665$15390) (call-with-values (lambda () (letrec ((g$665$15392 (lambda (g$665$15394) (if (null? g$665$15394) (values '() '() '()) (call-with-values (lambda () (g$665$15290 (car g$665$15394) g$665$15293)) (lambda (g$665$15396 g$665$15397 g$665$15398) (call-with-values (lambda () (g$665$15392 (cdr g$665$15394))) (lambda (g$665$15402 g$665$15403 g$665$15404) (values (append g$665$15396 g$665$15402) (append g$665$15397 g$665$15403) (cons g$665$15398 g$665$15404)))))))))) (g$665$15392 g$665$15390))) (lambda (g$665$15408 g$665$15409 g$665$15410) (values g$665$15408 g$665$15409 (list->vector g$665$15410))))) g$665$15386) ((lambda (g$665$15414) ((lambda (g$665$15416) (if (if g$665$15416 (begin '#f (apply (lambda () '#t) g$665$15416)) '#f) (apply (lambda () (values '() '() g$665$15292)) g$665$15416) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15414 '())))) ((lambda (g$665$15418) '()) g$665$15414))) g$665$15384))) ((lambda (g$665$15420) (if (g$665$11028 g$665$15420) (begin '#f ((letrec ((g$665$15422 (lambda (g$665$15424) (if (g$665$11026 g$665$15424) ((lambda (g$665$15426) (if g$665$15426 (begin '#f ((lambda (g$665$15428) (if g$665$15428 (begin '#f (map cons g$665$15426 g$665$15428)) '#f)) (g$665$15422 (g$665$11038 g$665$15424)))) '#f)) ((lambda (g$665$15430) (list g$665$15430)) (g$665$11034 g$665$15424))) (if (g$665$11030 g$665$15424) (list (begin 'x '())) '#f))))) g$665$15422) (g$665$11024 g$665$15420))) '#f)) g$665$15384))) g$665$15360))) ((lambda (g$665$15432) (if (g$665$11026 g$665$15432) (begin '#f ((lambda (g$665$15434) (if g$665$15434 (begin '#f ((lambda (g$665$15436) (if g$665$15436 (begin '#f (append g$665$15434 g$665$15436)) '#f)) ((lambda (g$665$15438) (list g$665$15438)) (g$665$11038 g$665$15432)))) '#f)) ((lambda (g$665$15440) (list g$665$15440)) (g$665$11034 g$665$15432)))) '#f)) g$665$15360))) g$665$15346))) ((lambda (g$665$15442) (if (g$665$11026 g$665$15442) (begin '#f ((lambda (g$665$15444) (if g$665$15444 (begin '#f ((lambda (g$665$15446) (if g$665$15446 (begin '#f (append g$665$15444 g$665$15446)) '#f)) ((lambda (g$665$15448) (if (g$665$11026 g$665$15448) (begin '#f ((lambda (g$665$15450) (if g$665$15450 (begin '#f ((lambda (g$665$15452) (if g$665$15452 (begin '#f (append g$665$15450 g$665$15452)) '#f)) ((lambda (g$665$15454) (if (equal? (g$665$11060 g$665$15454) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15448)))) '#f)) ((lambda (g$665$15456) (list g$665$15456)) (g$665$11034 g$665$15448)))) '#f)) (g$665$11038 g$665$15442)))) '#f)) ((lambda (g$665$15458) (if (g$665$11040 g$665$15458) (if (g$665$11048 g$665$15458 (g$665$11293 'quasisyntax)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15442)))) '#f)) g$665$15346))) g$665$15342))) ((lambda (g$665$15460) (if (g$665$11040 g$665$15460) (if (g$665$11048 g$665$15460 (g$665$11293 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) g$665$15342))) g$665$15316))) ((lambda (g$665$15462) (if (g$665$11026 g$665$15462) (begin '#f ((lambda (g$665$15464) (if g$665$15464 (begin '#f ((lambda (g$665$15466) (if g$665$15466 (begin '#f (append g$665$15464 g$665$15466)) '#f)) ((lambda (g$665$15468) (list g$665$15468)) (g$665$11038 g$665$15462)))) '#f)) ((lambda (g$665$15470) (if (g$665$11026 g$665$15470) (begin '#f ((lambda (g$665$15472) (if g$665$15472 (begin '#f ((lambda (g$665$15474) (if g$665$15474 (begin '#f (append g$665$15472 g$665$15474)) '#f)) ((lambda (g$665$15476) (if (g$665$11026 g$665$15476) (begin '#f ((lambda (g$665$15478) (if g$665$15478 (begin '#f ((lambda (g$665$15480) (if g$665$15480 (begin '#f (append g$665$15478 g$665$15480)) '#f)) ((lambda (g$665$15482) (if (equal? (g$665$11060 g$665$15482) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15476)))) '#f)) ((lambda (g$665$15484) (list g$665$15484)) (g$665$11034 g$665$15476)))) '#f)) (g$665$11038 g$665$15470)))) '#f)) ((lambda (g$665$15486) (if (g$665$11040 g$665$15486) (if (g$665$11048 g$665$15486 (g$665$11293 'unsyntax-splicing)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15470)))) '#f)) (g$665$11034 g$665$15462)))) '#f)) g$665$15316))) g$665$15312))) ((lambda (g$665$15488) (if (g$665$11040 g$665$15488) (if (g$665$11048 g$665$15488 (g$665$11293 'unsyntax)) (begin '#f '()) '#f) '#f)) g$665$15312))) g$665$15296))) ((lambda (g$665$15490) (if (g$665$11026 g$665$15490) (begin '#f ((lambda (g$665$15492) (if g$665$15492 (begin '#f ((lambda (g$665$15494) (if g$665$15494 (begin '#f (append g$665$15492 g$665$15494)) '#f)) ((lambda (g$665$15496) (if (g$665$11026 g$665$15496) (begin '#f ((lambda (g$665$15498) (if g$665$15498 (begin '#f ((lambda (g$665$15500) (if g$665$15500 (begin '#f (append g$665$15498 g$665$15500)) '#f)) ((lambda (g$665$15502) (if (equal? (g$665$11060 g$665$15502) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15496)))) '#f)) ((lambda (g$665$15504) (list g$665$15504)) (g$665$11034 g$665$15496)))) '#f)) (g$665$11038 g$665$15490)))) '#f)) ((lambda (g$665$15506) (if (g$665$11040 g$665$15506) (if (g$665$11048 g$665$15506 (g$665$11293 'unsyntax)) (begin '#f '()) '#f) '#f)) (g$665$11034 g$665$15490)))) '#f)) g$665$15296))) g$665$15292))) (lambda (g$665$15508) ((lambda (g$665$15510) ((lambda (g$665$15512) (if (if g$665$15512 (begin '#f (apply (lambda (g$665$15514) '#t) g$665$15512)) '#f) (apply (lambda (g$665$15516) (call-with-values (lambda () (g$665$15290 g$665$15516 '0)) (lambda (g$665$15518 g$665$15519 g$665$15520) (g$665$11323 (list 'syntax-case (cons 'list g$665$15519) '() (list g$665$15518 (list 'syntax g$665$15520))))))) g$665$15512) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15510 '())))) ((lambda (g$665$15524) (if (g$665$11026 g$665$15524) (begin '#f ((lambda (g$665$15526) (if g$665$15526 (begin '#f ((lambda (g$665$15528) (if g$665$15528 (begin '#f (append g$665$15526 g$665$15528)) '#f)) ((lambda (g$665$15530) (if (g$665$11026 g$665$15530) (begin '#f ((lambda (g$665$15532) (if g$665$15532 (begin '#f ((lambda (g$665$15534) (if g$665$15534 (begin '#f (append g$665$15532 g$665$15534)) '#f)) ((lambda (g$665$15536) (if (equal? (g$665$11060 g$665$15536) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15530)))) '#f)) ((lambda (g$665$15538) (list g$665$15538)) (g$665$11034 g$665$15530)))) '#f)) (g$665$11038 g$665$15524)))) '#f)) ((lambda (g$665$15540) '()) (g$665$11034 g$665$15524)))) '#f)) g$665$15510))) g$665$15508)))) '#f)))) (set! g$665$11361 (lambda (g$665$15542) (error 'expander '"~a ~s" '"define-record not supported" (g$665$11058 g$665$15542 '())))) (set! g$665$11363 (lambda (g$665$15544) (error 'expander '"~a ~s" '"incorrect usage of auxilary keyword" (g$665$11058 g$665$15544 '())))) (set! g$665$11365 (lambda (g$665$15546 g$665$15547 g$665$15548) ((lambda (g$665$15552) ((lambda (g$665$15554) (if (if g$665$15554 (begin '#f (apply (lambda (g$665$15556 g$665$15557) '#t) g$665$15554)) '#f) (apply (lambda (g$665$15560 g$665$15561) (g$665$11411 (cons g$665$15560 g$665$15561) g$665$15547 g$665$15548)) g$665$15554) ((lambda (g$665$15564) ((lambda (g$665$15566) (if (if g$665$15566 (begin '#f (apply (lambda (g$665$15568 g$665$15569 g$665$15570 g$665$15571) '#t) g$665$15566)) '#f) (apply (lambda (g$665$15576 g$665$15577 g$665$15578 g$665$15579) ((lambda (g$665$15584 g$665$15585 g$665$15586 g$665$15587) (g$665$10927 '#f (append g$665$15584 g$665$15585) (append (g$665$11391 g$665$15576 g$665$15547 g$665$15548) (g$665$11391 g$665$15577 g$665$15547 g$665$15548)) (g$665$10927 '#f (list g$665$15587) (list (g$665$10929 '#f '() (g$665$10923 '#f (map (lambda (g$665$15592 g$665$15593 g$665$15594) (g$665$10927 '#f (list g$665$15592) (list (list g$665$15593)) (g$665$10923 '#f (list (list g$665$15593 g$665$15594) (list 'set! g$665$15594 g$665$15592))))) g$665$15586 g$665$15584 g$665$15585)))) (list '(primitive dynamic-wind) g$665$15587 (g$665$10929 '#f '() (g$665$11411 (cons g$665$15578 g$665$15579) g$665$15547 g$665$15548)) g$665$15587)))) (map (lambda (g$665$15598) (g$665$10950 'lhs)) g$665$15576) (map (lambda (g$665$15600) (g$665$10950 'rhs)) g$665$15576) (map (lambda (g$665$15602) (g$665$10950 't)) g$665$15576) (g$665$10950 'swap))) g$665$15566) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15564 '())))) ((lambda (g$665$15604) (if (g$665$11026 g$665$15604) (begin '#f ((lambda (g$665$15606) (if g$665$15606 (begin '#f ((lambda (g$665$15608) (if g$665$15608 (begin '#f (append g$665$15606 g$665$15608)) '#f)) ((lambda (g$665$15610) (if (g$665$11026 g$665$15610) (begin '#f ((lambda (g$665$15612) (if g$665$15612 (begin '#f ((lambda (g$665$15614) (if g$665$15614 (begin '#f (append g$665$15612 g$665$15614)) '#f)) ((lambda (g$665$15616) (if (g$665$11026 g$665$15616) (begin '#f ((lambda (g$665$15618) (if g$665$15618 (begin '#f ((lambda (g$665$15620) (if g$665$15620 (begin '#f (append g$665$15618 g$665$15620)) '#f)) ((letrec ((g$665$15622 (lambda (g$665$15624) (if (g$665$11026 g$665$15624) ((lambda (g$665$15626) (if g$665$15626 (begin '#f ((lambda (g$665$15628) (if g$665$15628 (begin '#f (map cons g$665$15626 g$665$15628)) '#f)) (g$665$15622 (g$665$11038 g$665$15624)))) '#f)) ((lambda (g$665$15630) (list g$665$15630)) (g$665$11034 g$665$15624))) (if (g$665$11030 g$665$15624) (list (begin 'b* '())) '#f))))) g$665$15622) (g$665$11038 g$665$15616)))) '#f)) ((lambda (g$665$15632) (list g$665$15632)) (g$665$11034 g$665$15616)))) '#f)) (g$665$11038 g$665$15610)))) '#f)) ((letrec ((g$665$15634 (lambda (g$665$15636) (if (g$665$11026 g$665$15636) ((lambda (g$665$15638) (if g$665$15638 (begin '#f ((lambda (g$665$15640) (if g$665$15640 (begin '#f (map cons g$665$15638 g$665$15640)) '#f)) (g$665$15634 (g$665$11038 g$665$15636)))) '#f)) ((lambda (g$665$15642) (if (g$665$11026 g$665$15642) (begin '#f ((lambda (g$665$15644) (if g$665$15644 (begin '#f ((lambda (g$665$15646) (if g$665$15646 (begin '#f (append g$665$15644 g$665$15646)) '#f)) ((lambda (g$665$15648) (if (g$665$11026 g$665$15648) (begin '#f ((lambda (g$665$15650) (if g$665$15650 (begin '#f ((lambda (g$665$15652) (if g$665$15652 (begin '#f (append g$665$15650 g$665$15652)) '#f)) ((lambda (g$665$15654) (if (equal? (g$665$11060 g$665$15654) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15648)))) '#f)) ((lambda (g$665$15656) (list g$665$15656)) (g$665$11034 g$665$15648)))) '#f)) (g$665$11038 g$665$15642)))) '#f)) ((lambda (g$665$15658) (list g$665$15658)) (g$665$11034 g$665$15642)))) '#f)) (g$665$11034 g$665$15636))) (if (g$665$11030 g$665$15636) (list (begin 'olhs* '()) (begin 'orhs* '())) '#f))))) g$665$15634) (g$665$11034 g$665$15610)))) '#f)) (g$665$11038 g$665$15604)))) '#f)) ((lambda (g$665$15660) '()) (g$665$11034 g$665$15604)))) '#f)) g$665$15564))) g$665$15552))) ((lambda (g$665$15662) (if (g$665$11026 g$665$15662) (begin '#f ((lambda (g$665$15664) (if g$665$15664 (begin '#f ((lambda (g$665$15666) (if g$665$15666 (begin '#f (append g$665$15664 g$665$15666)) '#f)) ((lambda (g$665$15668) (if (g$665$11026 g$665$15668) (begin '#f ((lambda (g$665$15670) (if g$665$15670 (begin '#f ((lambda (g$665$15672) (if g$665$15672 (begin '#f (append g$665$15670 g$665$15672)) '#f)) ((lambda (g$665$15674) (if (g$665$11026 g$665$15674) (begin '#f ((lambda (g$665$15676) (if g$665$15676 (begin '#f ((lambda (g$665$15678) (if g$665$15678 (begin '#f (append g$665$15676 g$665$15678)) '#f)) ((letrec ((g$665$15680 (lambda (g$665$15682) (if (g$665$11026 g$665$15682) ((lambda (g$665$15684) (if g$665$15684 (begin '#f ((lambda (g$665$15686) (if g$665$15686 (begin '#f (map cons g$665$15684 g$665$15686)) '#f)) (g$665$15680 (g$665$11038 g$665$15682)))) '#f)) ((lambda (g$665$15688) (list g$665$15688)) (g$665$11034 g$665$15682))) (if (g$665$11030 g$665$15682) (list (begin 'b* '())) '#f))))) g$665$15680) (g$665$11038 g$665$15674)))) '#f)) ((lambda (g$665$15690) (list g$665$15690)) (g$665$11034 g$665$15674)))) '#f)) (g$665$11038 g$665$15668)))) '#f)) ((lambda (g$665$15692) (if (equal? (g$665$11060 g$665$15692) '()) (begin '#f '()) '#f)) (g$665$11034 g$665$15668)))) '#f)) (g$665$11038 g$665$15662)))) '#f)) ((lambda (g$665$15694) '()) (g$665$11034 g$665$15662)))) '#f)) g$665$15552))) g$665$15546))) (set! g$665$11367 (lambda (g$665$15696 g$665$15697 g$665$15698) ((lambda (g$665$15702) ((lambda (g$665$15704) (if (if g$665$15704 (begin '#f (apply (lambda (g$665$15706 g$665$15707) '#t) g$665$15704)) '#f) (apply (lambda (g$665$15710 g$665$15711) (cons 'foreign-call (cons (g$665$11395 g$665$15710 g$665$15697 g$665$15698) (g$665$11391 g$665$15711 g$665$15697 g$665$15698)))) g$665$15704) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15702 '())))) ((lambda (g$665$15714) (if (g$665$11026 g$665$15714) (begin '#f ((lambda (g$665$15716) (if g$665$15716 (begin '#f ((lambda (g$665$15718) (if g$665$15718 (begin '#f (append g$665$15716 g$665$15718)) '#f)) ((lambda (g$665$15720) (if (g$665$11026 g$665$15720) (begin '#f ((lambda (g$665$15722) (if g$665$15722 (begin '#f ((lambda (g$665$15724) (if g$665$15724 (begin '#f (append g$665$15722 g$665$15724)) '#f)) ((letrec ((g$665$15726 (lambda (g$665$15728) (if (g$665$11026 g$665$15728) ((lambda (g$665$15730) (if g$665$15730 (begin '#f ((lambda (g$665$15732) (if g$665$15732 (begin '#f (map cons g$665$15730 g$665$15732)) '#f)) (g$665$15726 (g$665$11038 g$665$15728)))) '#f)) ((lambda (g$665$15734) (list g$665$15734)) (g$665$11034 g$665$15728))) (if (g$665$11030 g$665$15728) (list (begin 'arg* '())) '#f))))) g$665$15726) (g$665$11038 g$665$15720)))) '#f)) ((lambda (g$665$15736) (list g$665$15736)) (g$665$11034 g$665$15720)))) '#f)) (g$665$11038 g$665$15714)))) '#f)) ((lambda (g$665$15738) '()) (g$665$11034 g$665$15714)))) '#f)) g$665$15702))) g$665$15696))) (set! g$665$11369 (lambda (g$665$15740 g$665$15741) ((lambda (g$665$15744 g$665$15746) (begin (set! g$665$15744 (lambda (g$665$15934 g$665$15935 g$665$15936) (if (null? g$665$15934) (values '() g$665$15936) (call-with-values (lambda () (g$665$15744 (cdr g$665$15934) g$665$15935 g$665$15936)) (lambda (g$665$15940 g$665$15941) (call-with-values (lambda () (g$665$15746 (car g$665$15934) g$665$15935 g$665$15941)) (lambda (g$665$15944 g$665$15945) (values (cons g$665$15944 g$665$15940) g$665$15945)))))))) (set! g$665$15746 (lambda (g$665$15748 g$665$15749 g$665$15750) ((lambda (g$665$15754) ((lambda (g$665$15756) (if (if g$665$15756 (begin '#f (apply (lambda (g$665$15758) (g$665$11040 g$665$15758)) g$665$15756)) '#f) (apply (lambda (g$665$15760) (if (g$665$11054 g$665$15748 g$665$15741) (values (vector 'free-id g$665$15748) g$665$15750) (if (g$665$11048 g$665$15748 (g$665$11293 '_)) (values '_ g$665$15750) (values 'any (cons (cons g$665$15748 g$665$15749) g$665$15750))))) g$665$15756) ((lambda (g$665$15762) ((lambda (g$665$15764) (if (if g$665$15764 (begin '#f (apply (lambda (g$665$15766 g$665$15767) (g$665$11373 g$665$15767)) g$665$15764)) '#f) (apply (lambda (g$665$15770 g$665$15771) (call-with-values (lambda () (g$665$15746 g$665$15770 (+ g$665$15749 '1) g$665$15750)) (lambda (g$665$15774 g$665$15775) (values (if (eq? g$665$15774 'any) 'each-any (vector 'each g$665$15774)) g$665$15775)))) g$665$15764) ((lambda (g$665$15778) ((lambda (g$665$15780) (if (if g$665$15780 (begin '#f (apply (lambda (g$665$15782 g$665$15783 g$665$15784 g$665$15785) (g$665$11373 g$665$15783)) g$665$15780)) '#f) (apply (lambda (g$665$15790 g$665$15791 g$665$15792 g$665$15793) (call-with-values (lambda () (g$665$15746 g$665$15793 g$665$15749 g$665$15750)) (lambda (g$665$15798 g$665$15799) (call-with-values (lambda () (g$665$15744 g$665$15792 g$665$15749 g$665$15799)) (lambda (g$665$15802 g$665$15803) (call-with-values (lambda () (g$665$15746 g$665$15790 (+ g$665$15749 '1) g$665$15803)) (lambda (g$665$15806 g$665$15807) (values (vector 'each+ g$665$15806 (reverse g$665$15802) g$665$15798) g$665$15807)))))))) g$665$15780) ((lambda (g$665$15810) ((lambda (g$665$15812) (if (if g$665$15812 (begin '#f (apply (lambda (g$665$15814 g$665$15815) '#t) g$665$15812)) '#f) (apply (lambda (g$665$15818 g$665$15819) (call-with-values (lambda () (g$665$15746 g$665$15819 g$665$15749 g$665$15750)) (lambda (g$665$15822 g$665$15823) (call-with-values (lambda () (g$665$15746 g$665$15818 g$665$15749 g$665$15823)) (lambda (g$665$15826 g$665$15827) (values (cons g$665$15826 g$665$15822) g$665$15827)))))) g$665$15812) ((lambda (g$665$15830) ((lambda (g$665$15832) (if (if g$665$15832 (begin '#f (apply (lambda () '#t) g$665$15832)) '#f) (apply (lambda () (values '() g$665$15750)) g$665$15832) ((lambda (g$665$15834) ((lambda (g$665$15836) (if (if g$665$15836 (begin '#f (apply (lambda (g$665$15838) (not (g$665$10992 g$665$15838))) g$665$15836)) '#f) (apply (lambda (g$665$15840) (call-with-values (lambda () (g$665$15746 g$665$15840 g$665$15749 g$665$15750)) (lambda (g$665$15842 g$665$15843) (values (vector 'vector g$665$15842) g$665$15843)))) g$665$15836) ((lambda (g$665$15846) ((lambda (g$665$15848) (if (if g$665$15848 (begin '#f (apply (lambda (g$665$15850) '#t) g$665$15848)) '#f) (apply (lambda (g$665$15852) (values (vector 'atom (g$665$11060 g$665$15852)) g$665$15750)) g$665$15848) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$15846 '())))) ((lambda (g$665$15854) (list g$665$15854)) g$665$15846))) g$665$15834))) ((lambda (g$665$15856) (if (g$665$11028 g$665$15856) (begin '#f ((letrec ((g$665$15858 (lambda (g$665$15860) (if (g$665$11026 g$665$15860) ((lambda (g$665$15862) (if g$665$15862 (begin '#f ((lambda (g$665$15864) (if g$665$15864 (begin '#f (map cons g$665$15862 g$665$15864)) '#f)) (g$665$15858 (g$665$11038 g$665$15860)))) '#f)) ((lambda (g$665$15866) (list g$665$15866)) (g$665$11034 g$665$15860))) (if (g$665$11030 g$665$15860) (list (begin 'p '())) '#f))))) g$665$15858) (g$665$11024 g$665$15856))) '#f)) g$665$15834))) g$665$15830))) ((lambda (g$665$15868) (if (equal? (g$665$11060 g$665$15868) '()) (begin '#f '()) '#f)) g$665$15830))) g$665$15810))) ((lambda (g$665$15870) (if (g$665$11026 g$665$15870) (begin '#f ((lambda (g$665$15872) (if g$665$15872 (begin '#f ((lambda (g$665$15874) (if g$665$15874 (begin '#f (append g$665$15872 g$665$15874)) '#f)) ((lambda (g$665$15876) (list g$665$15876)) (g$665$11038 g$665$15870)))) '#f)) ((lambda (g$665$15878) (list g$665$15878)) (g$665$11034 g$665$15870)))) '#f)) g$665$15810))) g$665$15778))) ((lambda (g$665$15880) (if (g$665$11026 g$665$15880) (begin '#f ((lambda (g$665$15882) (if g$665$15882 (begin '#f ((lambda (g$665$15884) (if g$665$15884 (begin '#f (append g$665$15882 g$665$15884)) '#f)) ((lambda (g$665$15886) (if (g$665$11026 g$665$15886) (begin '#f ((lambda (g$665$15888) (if g$665$15888 (begin '#f ((lambda (g$665$15890) (if g$665$15890 (begin '#f (append g$665$15888 g$665$15890)) '#f)) ((letrec ((g$665$15892 (lambda (g$665$15898) (if (g$665$11026 g$665$15898) ((lambda (g$665$15900) (if g$665$15900 (begin '#f ((lambda (g$665$15902) (if g$665$15902 (begin '#f (cons (map cons g$665$15900 (car g$665$15902)) (cdr g$665$15902))) '#f)) (g$665$15892 (g$665$11038 g$665$15898)))) '#f)) ((lambda (g$665$15904) (list g$665$15904)) (g$665$11034 g$665$15898))) ((lambda (g$665$15906) (if g$665$15906 (begin '#f (cons (list (begin 'ys '())) g$665$15906)) '#f)) ((lambda (g$665$15908) (list g$665$15908)) g$665$15898)))))) (lambda (g$665$15894) ((lambda (g$665$15896) (if g$665$15896 (begin '#f (append (car g$665$15896) (cdr g$665$15896))) '#f)) (g$665$15892 g$665$15894)))) (g$665$11038 g$665$15886)))) '#f)) ((lambda (g$665$15910) (list g$665$15910)) (g$665$11034 g$665$15886)))) '#f)) (g$665$11038 g$665$15880)))) '#f)) ((lambda (g$665$15912) (list g$665$15912)) (g$665$11034 g$665$15880)))) '#f)) g$665$15778))) g$665$15762))) ((lambda (g$665$15914) (if (g$665$11026 g$665$15914) (begin '#f ((lambda (g$665$15916) (if g$665$15916 (begin '#f ((lambda (g$665$15918) (if g$665$15918 (begin '#f (append g$665$15916 g$665$15918)) '#f)) ((lambda (g$665$15920) (if (g$665$11026 g$665$15920) (begin '#f ((lambda (g$665$15922) (if g$665$15922 (begin '#f ((lambda (g$665$15924) (if g$665$15924 (begin '#f (append g$665$15922 g$665$15924)) '#f)) ((lambda (g$665$15926) (if (equal? (g$665$11060 g$665$15926) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$15920)))) '#f)) ((lambda (g$665$15928) (list g$665$15928)) (g$665$11034 g$665$15920)))) '#f)) (g$665$11038 g$665$15914)))) '#f)) ((lambda (g$665$15930) (list g$665$15930)) (g$665$11034 g$665$15914)))) '#f)) g$665$15762))) g$665$15754))) ((lambda (g$665$15932) (list g$665$15932)) g$665$15754))) g$665$15748))) (g$665$15746 g$665$15740 '0 '()))) '#f '#f))) (set! g$665$11371 (lambda (g$665$15948 g$665$15949) ((lambda (g$665$15952 g$665$15954 g$665$15956 g$665$15958 g$665$15960 g$665$15962 g$665$15964 g$665$15966) (begin (set! g$665$15952 (lambda (g$665$16074 g$665$16075 g$665$16076) (if (if (null? g$665$16075) (begin '#f (null? g$665$16076)) '#f) g$665$16074 (g$665$11016 g$665$16074 g$665$16075 g$665$16076)))) (set! g$665$15954 (lambda (g$665$16058 g$665$16059 g$665$16060 g$665$16061) (if (pair? g$665$16058) ((lambda (g$665$16066) (if g$665$16066 (begin '#f ((lambda (g$665$16068) (if g$665$16068 (begin '#f (cons g$665$16066 g$665$16068)) '#f)) (g$665$15954 (cdr g$665$16058) g$665$16059 g$665$16060 g$665$16061))) '#f)) (g$665$15966 (car g$665$16058) g$665$16059 g$665$16060 g$665$16061 '())) (if (null? g$665$16058) '() (if (g$665$10992 g$665$16058) (call-with-values (lambda () (g$665$11014 g$665$16060 g$665$16061 g$665$16058)) (lambda (g$665$16070 g$665$16071) (g$665$15954 (g$665$10994 g$665$16058) g$665$16059 g$665$16070 g$665$16071))) '#f))))) (set! g$665$15956 (lambda (g$665$16024 g$665$16025 g$665$16026 g$665$16027 g$665$16028 g$665$16029 g$665$16030) (letrec ((g$665$16038 (lambda (g$665$16040 g$665$16041 g$665$16042) (if (pair? g$665$16040) (call-with-values (lambda () (g$665$16038 (cdr g$665$16040) g$665$16041 g$665$16042)) (lambda (g$665$16046 g$665$16047 g$665$16048) (if g$665$16048 (if (null? g$665$16047) ((lambda (g$665$16052) (if g$665$16052 (values (cons g$665$16052 g$665$16046) g$665$16047 g$665$16048) (values '#f '#f '#f))) (g$665$15966 (car g$665$16040) g$665$16025 g$665$16041 g$665$16042 '())) (values '() (cdr g$665$16047) (g$665$15966 (car g$665$16040) (car g$665$16047) g$665$16041 g$665$16042 g$665$16048))) (values '#f '#f '#f)))) (if (g$665$10992 g$665$16040) (call-with-values (lambda () (g$665$11014 g$665$16041 g$665$16042 g$665$16040)) (lambda (g$665$16054 g$665$16055) (g$665$16038 (g$665$10994 g$665$16040) g$665$16054 g$665$16055))) (values '() g$665$16026 (g$665$15966 g$665$16040 g$665$16027 g$665$16041 g$665$16042 g$665$16030))))))) (g$665$16038 g$665$16024 g$665$16028 g$665$16029)))) (set! g$665$15958 (lambda (g$665$16012 g$665$16013 g$665$16014) (if (pair? g$665$16012) ((lambda (g$665$16018) (if g$665$16018 (begin '#f (cons (g$665$15952 (car g$665$16012) g$665$16013 g$665$16014) g$665$16018)) '#f)) (g$665$15958 (cdr g$665$16012) g$665$16013 g$665$16014)) (if (null? g$665$16012) '() (if (g$665$10992 g$665$16012) (call-with-values (lambda () (g$665$11014 g$665$16013 g$665$16014 g$665$16012)) (lambda (g$665$16020 g$665$16021) (g$665$15958 (g$665$10994 g$665$16012) g$665$16020 g$665$16021))) '#f))))) (set! g$665$15960 (lambda (g$665$16007 g$665$16008) (if (null? g$665$16007) g$665$16008 (if (eq? g$665$16007 '_) g$665$16008 (if (eq? g$665$16007 'any) (cons '() g$665$16008) (if (pair? g$665$16007) (g$665$15960 (car g$665$16007) (g$665$15960 (cdr g$665$16007) g$665$16008)) (if (eq? g$665$16007 'each-any) (cons '() g$665$16008) ((lambda (g$665$16011) (if (memv g$665$16011 '(each)) (g$665$15960 (vector-ref g$665$16007 '1) g$665$16008) (if (memv g$665$16011 '(each+)) (g$665$15960 (vector-ref g$665$16007 '1) (g$665$15960 (reverse (vector-ref g$665$16007 '2)) (g$665$15960 (vector-ref g$665$16007 '3) g$665$16008))) (if (memv g$665$16011 '(free-id atom)) g$665$16008 (if (memv g$665$16011 '(vector)) (g$665$15960 (vector-ref g$665$16007 '1) g$665$16008) (error 'syntax-dispatch '"invalid pattern" g$665$16007)))))) (vector-ref g$665$16007 '0))))))))) (set! g$665$15962 (lambda (g$665$16003 g$665$16004) (if (null? (car g$665$16003)) g$665$16004 (cons (map car g$665$16003) (g$665$15962 (map cdr g$665$16003) g$665$16004))))) (set! g$665$15964 (lambda (g$665$15982 g$665$15983 g$665$15984 g$665$15985 g$665$15986) (if (null? g$665$15983) (if (null? g$665$15982) (begin '#f g$665$15986) '#f) (if (pair? g$665$15983) (if (pair? g$665$15982) (begin '#f (g$665$15966 (car g$665$15982) (car g$665$15983) g$665$15984 g$665$15985 (g$665$15966 (cdr g$665$15982) (cdr g$665$15983) g$665$15984 g$665$15985 g$665$15986))) '#f) (if (eq? g$665$15983 'each-any) ((lambda (g$665$15992) (if g$665$15992 (begin '#f (cons g$665$15992 g$665$15986)) '#f)) (g$665$15958 g$665$15982 g$665$15984 g$665$15985)) ((lambda (g$665$15994) (if (memv g$665$15994 '(each)) (if (null? g$665$15982) (g$665$15960 (vector-ref g$665$15983 '1) g$665$15986) ((lambda (g$665$16001) (if g$665$16001 (begin '#f (g$665$15962 g$665$16001 g$665$15986)) '#f)) (g$665$15954 g$665$15982 (vector-ref g$665$15983 '1) g$665$15984 g$665$15985))) (if (memv g$665$15994 '(free-id)) (if (symbol? g$665$15982) (if (g$665$11048 (g$665$15952 g$665$15982 g$665$15984 g$665$15985) (vector-ref g$665$15983 '1)) (begin '#f g$665$15986) '#f) '#f) (if (memv g$665$15994 '(each+)) (call-with-values (lambda () (g$665$15956 g$665$15982 (vector-ref g$665$15983 '1) (vector-ref g$665$15983 '2) (vector-ref g$665$15983 '3) g$665$15984 g$665$15985 g$665$15986)) (lambda (g$665$15995 g$665$15996 g$665$15997) (if g$665$15997 (if (null? g$665$15996) (begin '#f (if (null? g$665$15995) (g$665$15960 (vector-ref g$665$15983 '1) g$665$15997) (g$665$15962 g$665$15995 g$665$15997))) '#f) '#f))) (if (memv g$665$15994 '(atom)) (if (equal? (vector-ref g$665$15983 '1) (g$665$11058 g$665$15982 g$665$15984)) (begin '#f g$665$15986) '#f) (if (memv g$665$15994 '(vector)) (if (vector? g$665$15982) (begin '#f (g$665$15966 (vector->list g$665$15982) (vector-ref g$665$15983 '1) g$665$15984 g$665$15985 g$665$15986)) '#f) (error 'syntax-dispatch '"invalid pattern" g$665$15983))))))) (vector-ref g$665$15983 '0))))))) (set! g$665$15966 (lambda (g$665$15968 g$665$15969 g$665$15970 g$665$15971 g$665$15972) (if (not g$665$15972) '#f (if (eq? g$665$15969 '_) g$665$15972 (if (eq? g$665$15969 'any) (cons (g$665$15952 g$665$15968 g$665$15970 g$665$15971) g$665$15972) (if (g$665$10992 g$665$15968) (call-with-values (lambda () (g$665$11014 g$665$15970 g$665$15971 g$665$15968)) (lambda (g$665$15978 g$665$15979) (g$665$15966 (g$665$10994 g$665$15968) g$665$15969 g$665$15978 g$665$15979 g$665$15972))) (g$665$15964 g$665$15968 g$665$15969 g$665$15970 g$665$15971 g$665$15972))))))) (g$665$15966 g$665$15948 g$665$15949 '() '() '()))) '#f '#f '#f '#f '#f '#f '#f '#f))) (set! g$665$11373 (lambda (g$665$16080) (if (g$665$11040 g$665$16080) (begin '#f (g$665$11048 g$665$16080 (g$665$11293 '|...|))) '#f))) (set! g$665$11375 ((lambda () ((lambda (g$665$16082 g$665$16084 g$665$16086 g$665$16088) (begin (set! g$665$16082 (lambda (g$665$16222 g$665$16223 g$665$16224 g$665$16225 g$665$16226) ((lambda (g$665$16232 g$665$16233) ((lambda (g$665$16236 g$665$16237) ((lambda (g$665$16240) (list '(primitive apply) (g$665$10929 '#f g$665$16237 g$665$16240) g$665$16224)) (g$665$11395 (g$665$11020 (g$665$10987 g$665$16232 g$665$16236) g$665$16223) (append (map (lambda (g$665$16242 g$665$16243 g$665$16244) (cons g$665$16242 (g$665$11066 'syntax (cons g$665$16243 g$665$16244)))) g$665$16236 g$665$16237 (map cdr g$665$16222)) g$665$16225) g$665$16226))) (map g$665$10954 g$665$16232) (map g$665$10950 g$665$16232))) (map car g$665$16222) (map cdr g$665$16222)))) (set! g$665$16084 (lambda (g$665$16210 g$665$16211 g$665$16212) (letrec ((g$665$16216 (lambda (g$665$16218 g$665$16219) (if (null? g$665$16218) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$16211)) (if (g$665$11040 (car g$665$16218)) (if (g$665$11054 (car g$665$16218) g$665$16219) (g$665$11500 (car g$665$16218) '"duplicate " g$665$16212) (g$665$16216 (cdr g$665$16218) (cons (car g$665$16218) g$665$16219))) (g$665$11500 (car g$665$16218) '"invalid " g$665$16212)))))) (g$665$16216 g$665$16210 '())))) (set! g$665$16086 (lambda (g$665$16178 g$665$16179 g$665$16180 g$665$16181 g$665$16182 g$665$16183 g$665$16184 g$665$16185) (call-with-values (lambda () (g$665$11369 g$665$16183 g$665$16179)) (lambda (g$665$16194 g$665$16195) (if (not (g$665$11052 (map car g$665$16195))) (g$665$16084 (map car g$665$16195) g$665$16183 '"pattern variable") (if (not (for-all (lambda (g$665$16198) (not (g$665$11373 (car g$665$16198)))) g$665$16195)) (error 'expander '"~a ~s" '"misplaced ellipsis in syntax-case pattern" (g$665$11058 g$665$16183 '())) ((lambda (g$665$16200) ((lambda (g$665$16202) ((lambda (g$665$16204) ((lambda (g$665$16206) (list (g$665$10929 '#f (list g$665$16200) (list 'if g$665$16202 g$665$16204 g$665$16206)) (list '(primitive syntax-dispatch) g$665$16178 (list 'quote g$665$16194)))) (g$665$16088 g$665$16178 g$665$16179 g$665$16180 g$665$16181 g$665$16182))) (g$665$16082 g$665$16195 g$665$16185 g$665$16200 g$665$16181 g$665$16182))) (if (eq? g$665$16184 '#t) g$665$16200 ((lambda (g$665$16208) (list 'if g$665$16200 g$665$16208 (list 'quote '#f))) (g$665$16082 g$665$16195 g$665$16184 g$665$16200 g$665$16181 g$665$16182))))) (g$665$10950 'tmp)))))))) (set! g$665$16088 (lambda (g$665$16090 g$665$16091 g$665$16092 g$665$16093 g$665$16094) (if (null? g$665$16092) (list '(primitive syntax-error) g$665$16090) ((lambda (g$665$16100) ((lambda (g$665$16102) (if (if g$665$16102 (begin '#f (apply (lambda (g$665$16104 g$665$16105) '#t) g$665$16102)) '#f) (apply (lambda (g$665$16108 g$665$16109) (if (if (g$665$11040 g$665$16108) (if (not (g$665$11054 g$665$16108 g$665$16091)) (begin '#f (not (g$665$11373 g$665$16108))) '#f) '#f) (if (g$665$11048 g$665$16108 (g$665$11293 '_)) (g$665$11395 g$665$16109 g$665$16093 g$665$16094) ((lambda (g$665$16112 g$665$16113) ((lambda (g$665$16116) (list (g$665$10929 '#f (list g$665$16113) g$665$16116) g$665$16090)) (g$665$11395 (g$665$11020 (g$665$10987 (list g$665$16108) (list g$665$16112)) g$665$16109) (cons (cons g$665$16112 (g$665$11066 'syntax (cons g$665$16113 '0))) g$665$16093) g$665$16094))) (g$665$10954 g$665$16108) (g$665$10950 g$665$16108))) (g$665$16086 g$665$16090 g$665$16091 (cdr g$665$16092) g$665$16093 g$665$16094 g$665$16108 '#t g$665$16109))) g$665$16102) ((lambda (g$665$16118) ((lambda (g$665$16120) (if (if g$665$16120 (begin '#f (apply (lambda (g$665$16122 g$665$16123 g$665$16124) '#t) g$665$16120)) '#f) (apply (lambda (g$665$16128 g$665$16129 g$665$16130) (g$665$16086 g$665$16090 g$665$16091 (cdr g$665$16092) g$665$16093 g$665$16094 g$665$16128 g$665$16129 g$665$16130)) g$665$16120) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16118 '())))) ((lambda (g$665$16134) (if (g$665$11026 g$665$16134) (begin '#f ((lambda (g$665$16136) (if g$665$16136 (begin '#f ((lambda (g$665$16138) (if g$665$16138 (begin '#f (append g$665$16136 g$665$16138)) '#f)) ((lambda (g$665$16140) (if (g$665$11026 g$665$16140) (begin '#f ((lambda (g$665$16142) (if g$665$16142 (begin '#f ((lambda (g$665$16144) (if g$665$16144 (begin '#f (append g$665$16142 g$665$16144)) '#f)) ((lambda (g$665$16146) (if (g$665$11026 g$665$16146) (begin '#f ((lambda (g$665$16148) (if g$665$16148 (begin '#f ((lambda (g$665$16150) (if g$665$16150 (begin '#f (append g$665$16148 g$665$16150)) '#f)) ((lambda (g$665$16152) (if (equal? (g$665$11060 g$665$16152) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$16146)))) '#f)) ((lambda (g$665$16154) (list g$665$16154)) (g$665$11034 g$665$16146)))) '#f)) (g$665$11038 g$665$16140)))) '#f)) ((lambda (g$665$16156) (list g$665$16156)) (g$665$11034 g$665$16140)))) '#f)) (g$665$11038 g$665$16134)))) '#f)) ((lambda (g$665$16158) (list g$665$16158)) (g$665$11034 g$665$16134)))) '#f)) g$665$16118))) g$665$16100))) ((lambda (g$665$16160) (if (g$665$11026 g$665$16160) (begin '#f ((lambda (g$665$16162) (if g$665$16162 (begin '#f ((lambda (g$665$16164) (if g$665$16164 (begin '#f (append g$665$16162 g$665$16164)) '#f)) ((lambda (g$665$16166) (if (g$665$11026 g$665$16166) (begin '#f ((lambda (g$665$16168) (if g$665$16168 (begin '#f ((lambda (g$665$16170) (if g$665$16170 (begin '#f (append g$665$16168 g$665$16170)) '#f)) ((lambda (g$665$16172) (if (equal? (g$665$11060 g$665$16172) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$16166)))) '#f)) ((lambda (g$665$16174) (list g$665$16174)) (g$665$11034 g$665$16166)))) '#f)) (g$665$11038 g$665$16160)))) '#f)) ((lambda (g$665$16176) (list g$665$16176)) (g$665$11034 g$665$16160)))) '#f)) g$665$16100))) (car g$665$16092))))) (lambda (g$665$16248 g$665$16249 g$665$16250) ((lambda (g$665$16254) ((lambda (g$665$16256) (if (if g$665$16256 (begin '#f (apply (lambda (g$665$16258 g$665$16259 g$665$16260) '#t) g$665$16256)) '#f) (apply (lambda (g$665$16264 g$665$16265 g$665$16266) (begin (if (for-all (lambda (g$665$16270) (if (g$665$11040 g$665$16270) (begin '#f (not (g$665$11373 g$665$16270))) '#f)) g$665$16265) (void) (error 'expander '"~a ~s" '"invalid literals" (g$665$11058 g$665$16248 '()))) ((lambda (g$665$16272) ((lambda (g$665$16274) (list (g$665$10929 '#f (list g$665$16272) g$665$16274) (g$665$11395 g$665$16264 g$665$16249 g$665$16250))) (g$665$16088 g$665$16272 g$665$16265 g$665$16266 g$665$16249 g$665$16250))) (g$665$10950 'tmp)))) g$665$16256) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16254 '())))) ((lambda (g$665$16276) (if (g$665$11026 g$665$16276) (begin '#f ((lambda (g$665$16278) (if g$665$16278 (begin '#f ((lambda (g$665$16280) (if g$665$16280 (begin '#f (append g$665$16278 g$665$16280)) '#f)) ((lambda (g$665$16282) (if (g$665$11026 g$665$16282) (begin '#f ((lambda (g$665$16284) (if g$665$16284 (begin '#f ((lambda (g$665$16286) (if g$665$16286 (begin '#f (append g$665$16284 g$665$16286)) '#f)) ((lambda (g$665$16288) (if (g$665$11026 g$665$16288) (begin '#f ((lambda (g$665$16290) (if g$665$16290 (begin '#f ((lambda (g$665$16292) (if g$665$16292 (begin '#f (append g$665$16290 g$665$16292)) '#f)) ((letrec ((g$665$16294 (lambda (g$665$16296) (if (g$665$11026 g$665$16296) ((lambda (g$665$16298) (if g$665$16298 (begin '#f ((lambda (g$665$16300) (if g$665$16300 (begin '#f (map cons g$665$16298 g$665$16300)) '#f)) (g$665$16294 (g$665$11038 g$665$16296)))) '#f)) ((lambda (g$665$16302) (list g$665$16302)) (g$665$11034 g$665$16296))) (if (g$665$11030 g$665$16296) (list (begin 'clauses '())) '#f))))) g$665$16294) (g$665$11038 g$665$16288)))) '#f)) ((letrec ((g$665$16304 (lambda (g$665$16306) (if (g$665$11026 g$665$16306) ((lambda (g$665$16308) (if g$665$16308 (begin '#f ((lambda (g$665$16310) (if g$665$16310 (begin '#f (map cons g$665$16308 g$665$16310)) '#f)) (g$665$16304 (g$665$11038 g$665$16306)))) '#f)) ((lambda (g$665$16312) (list g$665$16312)) (g$665$11034 g$665$16306))) (if (g$665$11030 g$665$16306) (list (begin 'keys '())) '#f))))) g$665$16304) (g$665$11034 g$665$16288)))) '#f)) (g$665$11038 g$665$16282)))) '#f)) ((lambda (g$665$16314) (list g$665$16314)) (g$665$11034 g$665$16282)))) '#f)) (g$665$11038 g$665$16276)))) '#f)) ((lambda (g$665$16316) '()) (g$665$11034 g$665$16276)))) '#f)) g$665$16254))) g$665$16248)))) '#f '#f '#f '#f)))) (set! g$665$11377 ((lambda () ((lambda (g$665$16318 g$665$16320 g$665$16322 g$665$16324 g$665$16326 g$665$16328 g$665$16330 g$665$16332) (begin (set! g$665$16318 (lambda (g$665$16404 g$665$16405 g$665$16406 g$665$16407 g$665$16408 g$665$16409) ((lambda (g$665$16416) ((lambda (g$665$16418) (if (if g$665$16418 (begin '#f (apply (lambda (g$665$16420) (g$665$16408 g$665$16420)) g$665$16418)) '#f) (apply (lambda (g$665$16422) (error 'expander '"~a ~s" '"misplaced ellipsis in syntax form" (g$665$11058 g$665$16404 '()))) g$665$16418) ((lambda (g$665$16424) ((lambda (g$665$16426) (if (if g$665$16426 (begin '#f (apply (lambda (g$665$16428) (g$665$11040 g$665$16428)) g$665$16426)) '#f) (apply (lambda (g$665$16430) ((lambda (g$665$16432) ((lambda (g$665$16434) ((lambda () (if (eq? (g$665$11068 g$665$16434) 'syntax) (call-with-values (lambda () ((lambda (g$665$16436) (g$665$16320 g$665$16404 (car g$665$16436) (cdr g$665$16436) g$665$16407)) (g$665$11070 g$665$16434))) (lambda (g$665$16438 g$665$16439) (values (list 'ref g$665$16438) g$665$16439))) (values (list 'quote g$665$16405) g$665$16407))))) (g$665$11064 g$665$16432 g$665$16406))) (g$665$11062 g$665$16405))) g$665$16426) ((lambda (g$665$16442) ((lambda (g$665$16444) (if (if g$665$16444 (begin '#f (apply (lambda (g$665$16446 g$665$16447) (g$665$16408 g$665$16446)) g$665$16444)) '#f) (apply (lambda (g$665$16450 g$665$16451) (if g$665$16409 (error 'expander '"~a ~s" '"misplaced ellipsis in syntax form" (g$665$11058 g$665$16404 '())) (g$665$16318 g$665$16404 g$665$16451 g$665$16406 g$665$16407 (lambda (g$665$16454) '#f) '#f))) g$665$16444) ((lambda (g$665$16456) ((lambda (g$665$16458) (if (if g$665$16458 (begin '#f (apply (lambda (g$665$16460 g$665$16461 g$665$16462) (g$665$16408 g$665$16461)) g$665$16458)) '#f) (apply (lambda (g$665$16466 g$665$16467 g$665$16468) (letrec ((g$665$16472 (lambda (g$665$16480 g$665$16481) ((lambda (g$665$16484) ((lambda (g$665$16486) (if (if g$665$16486 (begin '#f (apply (lambda () '#t) g$665$16486)) '#f) (apply (lambda () (g$665$16481 g$665$16407)) g$665$16486) ((lambda (g$665$16488) ((lambda (g$665$16490) (if (if g$665$16490 (begin '#f (apply (lambda (g$665$16492 g$665$16493) (g$665$16408 g$665$16492)) g$665$16490)) '#f) (apply (lambda (g$665$16496 g$665$16497) (g$665$16472 g$665$16497 (lambda (g$665$16500) (call-with-values (lambda () (g$665$16481 (cons '() g$665$16500))) (lambda (g$665$16502 g$665$16503) (if (null? (car g$665$16503)) (error 'expander '"~a ~s" '"extra ellipsis in syntax form" (g$665$11058 g$665$16404 '())) (values (g$665$16324 g$665$16502 (car g$665$16503)) (cdr g$665$16503)))))))) g$665$16490) ((lambda (g$665$16506) ((lambda (g$665$16508) (if (if g$665$16508 (begin '#f (apply (lambda () '#t) g$665$16508)) '#f) (apply (lambda () (call-with-values (lambda () (g$665$16318 g$665$16404 g$665$16480 g$665$16406 g$665$16407 g$665$16408 g$665$16409)) (lambda (g$665$16510 g$665$16511) (call-with-values (lambda () (g$665$16481 g$665$16511)) (lambda (g$665$16514 g$665$16515) (values (g$665$16322 g$665$16514 g$665$16510) g$665$16515)))))) g$665$16508) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16506 '())))) ((lambda (g$665$16518) '()) g$665$16506))) g$665$16488))) ((lambda (g$665$16520) (if (g$665$11026 g$665$16520) (begin '#f ((lambda (g$665$16522) (if g$665$16522 (begin '#f ((lambda (g$665$16524) (if g$665$16524 (begin '#f (append g$665$16522 g$665$16524)) '#f)) ((lambda (g$665$16526) (list g$665$16526)) (g$665$11038 g$665$16520)))) '#f)) ((lambda (g$665$16528) (list g$665$16528)) (g$665$11034 g$665$16520)))) '#f)) g$665$16488))) g$665$16484))) ((lambda (g$665$16530) (if (equal? (g$665$11060 g$665$16530) '()) (begin '#f '()) '#f)) g$665$16484))) g$665$16480)))) (g$665$16472 g$665$16468 (lambda (g$665$16474) (call-with-values (lambda () (g$665$16318 g$665$16404 g$665$16466 g$665$16406 (cons '() g$665$16474) g$665$16408 '#f)) (lambda (g$665$16476 g$665$16477) (if (null? (car g$665$16477)) (error 'expander '"~a ~s" '"extra ellipsis in syntax form" (g$665$11058 g$665$16404 '())) (values (g$665$16326 g$665$16476 (car g$665$16477)) (cdr g$665$16477))))))))) g$665$16458) ((lambda (g$665$16532) ((lambda (g$665$16534) (if (if g$665$16534 (begin '#f (apply (lambda (g$665$16536 g$665$16537) '#t) g$665$16534)) '#f) (apply (lambda (g$665$16540 g$665$16541) (call-with-values (lambda () (g$665$16318 g$665$16404 g$665$16540 g$665$16406 g$665$16407 g$665$16408 '#f)) (lambda (g$665$16544 g$665$16545) (call-with-values (lambda () (g$665$16318 g$665$16404 g$665$16541 g$665$16406 g$665$16545 g$665$16408 g$665$16409)) (lambda (g$665$16548 g$665$16549) (values (g$665$16328 g$665$16405 g$665$16540 g$665$16541 g$665$16544 g$665$16548) g$665$16549)))))) g$665$16534) ((lambda (g$665$16552) ((lambda (g$665$16554) (if (if g$665$16554 (begin '#f (apply (lambda (g$665$16556) (not (g$665$10992 g$665$16405))) g$665$16554)) '#f) (apply (lambda (g$665$16558) (call-with-values (lambda () (g$665$16318 g$665$16404 g$665$16558 g$665$16406 g$665$16407 g$665$16408 '#t)) (lambda (g$665$16560 g$665$16561) (values (g$665$16330 g$665$16405 g$665$16558 g$665$16560) g$665$16561)))) g$665$16554) ((lambda (g$665$16564) ((lambda (g$665$16566) (if (if g$665$16566 (begin '#f (apply (lambda () '#t) g$665$16566)) '#f) (apply (lambda () (values (list 'quote g$665$16405) g$665$16407)) g$665$16566) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16564 '())))) ((lambda (g$665$16568) '()) g$665$16564))) g$665$16552))) ((lambda (g$665$16570) (if (g$665$11028 g$665$16570) (begin '#f ((letrec ((g$665$16572 (lambda (g$665$16574) (if (g$665$11026 g$665$16574) ((lambda (g$665$16576) (if g$665$16576 (begin '#f ((lambda (g$665$16578) (if g$665$16578 (begin '#f (map cons g$665$16576 g$665$16578)) '#f)) (g$665$16572 (g$665$11038 g$665$16574)))) '#f)) ((lambda (g$665$16580) (list g$665$16580)) (g$665$11034 g$665$16574))) (if (g$665$11030 g$665$16574) (list (begin 'ls '())) '#f))))) g$665$16572) (g$665$11024 g$665$16570))) '#f)) g$665$16552))) g$665$16532))) ((lambda (g$665$16582) (if (g$665$11026 g$665$16582) (begin '#f ((lambda (g$665$16584) (if g$665$16584 (begin '#f ((lambda (g$665$16586) (if g$665$16586 (begin '#f (append g$665$16584 g$665$16586)) '#f)) ((lambda (g$665$16588) (list g$665$16588)) (g$665$11038 g$665$16582)))) '#f)) ((lambda (g$665$16590) (list g$665$16590)) (g$665$11034 g$665$16582)))) '#f)) g$665$16532))) g$665$16456))) ((lambda (g$665$16592) (if (g$665$11026 g$665$16592) (begin '#f ((lambda (g$665$16594) (if g$665$16594 (begin '#f ((lambda (g$665$16596) (if g$665$16596 (begin '#f (append g$665$16594 g$665$16596)) '#f)) ((lambda (g$665$16598) (if (g$665$11026 g$665$16598) (begin '#f ((lambda (g$665$16600) (if g$665$16600 (begin '#f ((lambda (g$665$16602) (if g$665$16602 (begin '#f (append g$665$16600 g$665$16602)) '#f)) ((lambda (g$665$16604) (list g$665$16604)) (g$665$11038 g$665$16598)))) '#f)) ((lambda (g$665$16606) (list g$665$16606)) (g$665$11034 g$665$16598)))) '#f)) (g$665$11038 g$665$16592)))) '#f)) ((lambda (g$665$16608) (list g$665$16608)) (g$665$11034 g$665$16592)))) '#f)) g$665$16456))) g$665$16442))) ((lambda (g$665$16610) (if (g$665$11026 g$665$16610) (begin '#f ((lambda (g$665$16612) (if g$665$16612 (begin '#f ((lambda (g$665$16614) (if g$665$16614 (begin '#f (append g$665$16612 g$665$16614)) '#f)) ((lambda (g$665$16616) (if (g$665$11026 g$665$16616) (begin '#f ((lambda (g$665$16618) (if g$665$16618 (begin '#f ((lambda (g$665$16620) (if g$665$16620 (begin '#f (append g$665$16618 g$665$16620)) '#f)) ((lambda (g$665$16622) (if (equal? (g$665$11060 g$665$16622) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$16616)))) '#f)) ((lambda (g$665$16624) (list g$665$16624)) (g$665$11034 g$665$16616)))) '#f)) (g$665$11038 g$665$16610)))) '#f)) ((lambda (g$665$16626) (list g$665$16626)) (g$665$11034 g$665$16610)))) '#f)) g$665$16442))) g$665$16424))) ((lambda (g$665$16628) (list g$665$16628)) g$665$16424))) g$665$16416))) ((lambda (g$665$16630) (list g$665$16630)) g$665$16416))) g$665$16405))) (set! g$665$16320 (lambda (g$665$16386 g$665$16387 g$665$16388 g$665$16389) (if (= g$665$16388 '0) (values g$665$16387 g$665$16389) (if (null? g$665$16389) (error 'expander '"~a ~s" '"missing ellipsis in syntax form" (g$665$11058 g$665$16386 '())) (call-with-values (lambda () (g$665$16320 g$665$16386 g$665$16387 (- g$665$16388 '1) (cdr g$665$16389))) (lambda (g$665$16394 g$665$16395) ((lambda (g$665$16398) (if g$665$16398 ((lambda (g$665$16400) (values (cdr g$665$16400) g$665$16389)) g$665$16398) ((lambda (g$665$16402) (values g$665$16402 (cons (cons (cons g$665$16394 g$665$16402) (car g$665$16389)) g$665$16395))) (g$665$10950 'tmp)))) (assq g$665$16394 (car g$665$16389))))))))) (set! g$665$16322 (lambda (g$665$16382 g$665$16383) (if (equal? g$665$16383 ''()) g$665$16382 (list 'append g$665$16382 g$665$16383)))) (set! g$665$16324 (lambda (g$665$16378 g$665$16379) (list 'apply '(primitive append) (g$665$16326 g$665$16378 g$665$16379)))) (set! g$665$16326 (lambda (g$665$16360 g$665$16361) ((lambda (g$665$16364 g$665$16365) (if (eq? (car g$665$16360) 'ref) (car g$665$16365) (if (for-all (lambda (g$665$16368) (if (eq? (car g$665$16368) 'ref) (begin '#f (memq (cadr g$665$16368) g$665$16364)) '#f)) (cdr g$665$16360)) ((lambda (g$665$16370) (cons 'map (cons (list 'primitive (car g$665$16360)) g$665$16370))) (map ((lambda (g$665$16372) (lambda (g$665$16374) (cdr (assq (cadr g$665$16374) g$665$16372)))) (map cons g$665$16364 g$665$16365)) (cdr g$665$16360))) (cons* 'map (list 'lambda g$665$16364 g$665$16360) g$665$16365)))) (map cdr g$665$16361) (map (lambda (g$665$16376) (list 'ref (car g$665$16376))) g$665$16361)))) (set! g$665$16328 (lambda (g$665$16345 g$665$16346 g$665$16347 g$665$16348 g$665$16349) ((lambda (g$665$16355) (if (memv g$665$16355 '(quote)) (if (eq? (car g$665$16348) 'quote) ((lambda (g$665$16356 g$665$16357) (if (if (eq? g$665$16356 g$665$16346) (begin '#f (eq? g$665$16357 g$665$16347)) '#f) (list 'quote g$665$16345) (list 'quote (cons g$665$16356 g$665$16357)))) (cadr g$665$16348) (cadr g$665$16349)) (if (null? (cadr g$665$16349)) (list 'list g$665$16348) (list 'cons g$665$16348 g$665$16349))) (if (memv g$665$16355 '(list)) (cons 'list (cons g$665$16348 (cdr g$665$16349))) (list 'cons g$665$16348 g$665$16349)))) (car g$665$16349)))) (set! g$665$16330 (lambda (g$665$16339 g$665$16340 g$665$16341) (if (eq? (car g$665$16341) 'quote) (if (eq? (cadr g$665$16341) g$665$16340) (list 'quote g$665$16339) (list 'quote (list->vector (cadr g$665$16341)))) (if (eq? (car g$665$16341) 'list) (cons 'vector (cdr g$665$16341)) (list 'list->vector g$665$16341))))) (set! g$665$16332 (lambda (g$665$16334) ((lambda (g$665$16336) (if (memv g$665$16336 '(ref)) (cadr g$665$16334) (if (memv g$665$16336 '(primitive)) (list 'primitive (cadr g$665$16334)) (if (memv g$665$16336 '(quote)) (list 'quote (cadr g$665$16334)) (if (memv g$665$16336 '(lambda)) (g$665$10929 '#f (cadr g$665$16334) (g$665$16332 (caddr g$665$16334))) (if (memv g$665$16336 '(map)) ((lambda (g$665$16337) (cons '(primitive map) g$665$16337)) (map g$665$16332 (cdr g$665$16334))) (cons (list 'primitive (car g$665$16334)) (map g$665$16332 (cdr g$665$16334))))))))) (car g$665$16334)))) (lambda (g$665$16632 g$665$16633 g$665$16634) ((lambda (g$665$16638) ((lambda (g$665$16640) (if (if g$665$16640 (begin '#f (apply (lambda (g$665$16642) '#t) g$665$16640)) '#f) (apply (lambda (g$665$16644) (call-with-values (lambda () (g$665$16318 g$665$16632 g$665$16644 g$665$16633 '() g$665$11373 '#f)) (lambda (g$665$16646 g$665$16647) (g$665$16332 g$665$16646)))) g$665$16640) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16638 '())))) ((lambda (g$665$16650) (if (g$665$11026 g$665$16650) (begin '#f ((lambda (g$665$16652) (if g$665$16652 (begin '#f ((lambda (g$665$16654) (if g$665$16654 (begin '#f (append g$665$16652 g$665$16654)) '#f)) ((lambda (g$665$16656) (if (g$665$11026 g$665$16656) (begin '#f ((lambda (g$665$16658) (if g$665$16658 (begin '#f ((lambda (g$665$16660) (if g$665$16660 (begin '#f (append g$665$16658 g$665$16660)) '#f)) ((lambda (g$665$16662) (if (equal? (g$665$11060 g$665$16662) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$16656)))) '#f)) ((lambda (g$665$16664) (list g$665$16664)) (g$665$11034 g$665$16656)))) '#f)) (g$665$11038 g$665$16650)))) '#f)) ((lambda (g$665$16666) '()) (g$665$11034 g$665$16650)))) '#f)) g$665$16638))) g$665$16632)))) '#f '#f '#f '#f '#f '#f '#f '#f)))) (set! g$665$11379 (lambda (g$665$16668) ((lambda (g$665$16670) (if (memv g$665$16670 '(quote)) g$665$11317 (if (memv g$665$16670 '(lambda)) g$665$11321 (if (memv g$665$16670 '(case-lambda)) g$665$11319 (if (memv g$665$16670 '(let-values)) g$665$11299 (if (memv g$665$16670 '(letrec)) g$665$11303 (if (memv g$665$16670 '(letrec*)) g$665$11305 (if (memv g$665$16670 '(case)) g$665$11315 (if (memv g$665$16670 '(if)) g$665$11313 (if (memv g$665$16670 '(when)) g$665$11309 (if (memv g$665$16670 '(unless)) g$665$11311 (if (memv g$665$16670 '(parameterize)) g$665$11365 (if (memv g$665$16670 '(foreign-call)) g$665$11367 (if (memv g$665$16670 '(syntax-case)) g$665$11375 (if (memv g$665$16670 '(syntax)) g$665$11377 (if (memv g$665$16670 '(type-descriptor)) g$665$11307 (error 'macro-transformer '"cannot find ~s" g$665$16668))))))))))))))))) g$665$16668))) (set! g$665$11381 (lambda (g$665$16671) (if (procedure? g$665$16671) g$665$16671 (if (symbol? g$665$16671) ((lambda (g$665$16673) (if (memv g$665$16673 '(define-record)) g$665$11361 (if (memv g$665$16673 '(include)) g$665$11353 (if (memv g$665$16673 '(cond)) g$665$11351 (if (memv g$665$16673 '(let)) g$665$11327 (if (memv g$665$16673 '(do)) g$665$11343 (if (memv g$665$16673 '(or)) g$665$11347 (if (memv g$665$16673 '(and)) g$665$11349 (if (memv g$665$16673 '(let*)) g$665$11345 (if (memv g$665$16673 '(syntax-rules)) g$665$11355 (if (memv g$665$16673 '(quasiquote)) g$665$11357 (if (memv g$665$16673 '(quasisyntax)) g$665$11359 (if (memv g$665$16673 '(with-syntax)) g$665$11325 (if (memv g$665$16673 '(identifier-syntax)) g$665$11341 (if (memv g$665$16673 '(time)) g$665$11333 (if (memv g$665$16673 '(delay)) g$665$11335 (if (memv g$665$16673 '(assert)) g$665$11337 (if (memv g$665$16673 '(endianness)) g$665$11339 (if (memv g$665$16673 '(trace-lambda)) g$665$11329 (if (memv g$665$16673 '(trace-define)) g$665$11331 (if (memv g$665$16673 '(|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing)) g$665$11363 (error 'macro-transformer '"invalid macro ~s" g$665$16671)))))))))))))))))))))) g$665$16671) (error 'core-macro-transformer '"invalid macro ~s" g$665$16671))))) (set! g$665$11383 (lambda (g$665$16674) (car g$665$16674))) (set! g$665$11385 (lambda (g$665$16676 g$665$16677) ((lambda (g$665$16680) (g$665$11018 (g$665$11008) g$665$16680)) ((g$665$11381 g$665$16676) (g$665$11018 g$665$11010 g$665$16677))))) (set! g$665$11387 (lambda (g$665$16682 g$665$16683) ((lambda (g$665$16686) (g$665$11018 (g$665$11008) g$665$16686)) ((g$665$11383 g$665$16682) (g$665$11018 g$665$11010 g$665$16683))))) (set! g$665$11389 (lambda (g$665$16688 g$665$16689) ((lambda (g$665$16692 g$665$16693) (begin (g$665$10644 g$665$16692) ((lambda (g$665$16696) ((lambda (g$665$16698) ((lambda (g$665$16700) (g$665$11018 (g$665$11008) g$665$16700)) (g$665$16698 (g$665$11018 g$665$11010 g$665$16689)))) (if (procedure? g$665$16696) g$665$16696 (error 'chi-global-macro '"~s is not a procedure")))) (symbol-value g$665$16693)))) (car g$665$16688) (cdr g$665$16688)))) (set! g$665$11391 (lambda (g$665$16702 g$665$16703 g$665$16704) (if (null? g$665$16702) '() ((lambda (g$665$16708) (cons g$665$16708 (g$665$11391 (cdr g$665$16702) g$665$16703 g$665$16704))) (g$665$11395 (car g$665$16702) g$665$16703 g$665$16704))))) (set! g$665$11393 (lambda (g$665$16710 g$665$16711 g$665$16712) ((lambda (g$665$16716) ((lambda (g$665$16718) (if (if g$665$16718 (begin '#f (apply (lambda (g$665$16720 g$665$16721) '#t) g$665$16718)) '#f) (apply (lambda (g$665$16724 g$665$16725) ((lambda (g$665$16728) (cons g$665$16728 (g$665$11391 g$665$16725 g$665$16711 g$665$16712))) (g$665$11395 g$665$16724 g$665$16711 g$665$16712))) g$665$16718) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16716 '())))) ((lambda (g$665$16730) (if (g$665$11026 g$665$16730) (begin '#f ((lambda (g$665$16732) (if g$665$16732 (begin '#f ((lambda (g$665$16734) (if g$665$16734 (begin '#f (append g$665$16732 g$665$16734)) '#f)) ((letrec ((g$665$16736 (lambda (g$665$16738) (if (g$665$11026 g$665$16738) ((lambda (g$665$16740) (if g$665$16740 (begin '#f ((lambda (g$665$16742) (if g$665$16742 (begin '#f (map cons g$665$16740 g$665$16742)) '#f)) (g$665$16736 (g$665$11038 g$665$16738)))) '#f)) ((lambda (g$665$16744) (list g$665$16744)) (g$665$11034 g$665$16738))) (if (g$665$11030 g$665$16738) (list (begin 'rands '())) '#f))))) g$665$16736) (g$665$11038 g$665$16730)))) '#f)) ((lambda (g$665$16746) (list g$665$16746)) (g$665$11034 g$665$16730)))) '#f)) g$665$16716))) g$665$16710))) (set! g$665$11395 (lambda (g$665$16748 g$665$16749 g$665$16750) (call-with-values (lambda () (g$665$11072 g$665$16748 g$665$16749)) (lambda (g$665$16754 g$665$16755 g$665$16756) ((lambda (g$665$16760) (if (memv g$665$16760 '(core-macro)) ((lambda (g$665$16897) (g$665$16897 g$665$16748 g$665$16749 g$665$16750)) (g$665$11379 g$665$16755)) (if (memv g$665$16760 '(global)) ((lambda (g$665$16893) ((lambda (g$665$16895) ((lambda () (begin ((g$665$11443) g$665$16893) g$665$16895)))) (cdr g$665$16755))) (car g$665$16755)) (if (memv g$665$16760 '(core-prim)) ((lambda (g$665$16891) (list 'primitive g$665$16891)) g$665$16755) (if (memv g$665$16760 '(call)) (g$665$11393 g$665$16748 g$665$16749 g$665$16750) (if (memv g$665$16760 '(lexical)) ((lambda (g$665$16889) g$665$16889) g$665$16755) (if (memv g$665$16760 '(global-macro global-macro!)) (g$665$11395 (g$665$11389 g$665$16755 g$665$16748) g$665$16749 g$665$16750) (if (memv g$665$16760 '(local-macro local-macro!)) (g$665$11395 (g$665$11387 g$665$16755 g$665$16748) g$665$16749 g$665$16750) (if (memv g$665$16760 '(macro macro!)) (g$665$11395 (g$665$11385 g$665$16755 g$665$16748) g$665$16749 g$665$16750) (if (memv g$665$16760 '(constant)) ((lambda (g$665$16887) (list 'quote g$665$16887)) g$665$16755) (if (memv g$665$16760 '(set!)) (g$665$11397 g$665$16748 g$665$16749 g$665$16750) (if (memv g$665$16760 '(begin)) ((lambda (g$665$16849) ((lambda (g$665$16851) (if (if g$665$16851 (begin '#f (apply (lambda (g$665$16853 g$665$16854) '#t) g$665$16851)) '#f) (apply (lambda (g$665$16857 g$665$16858) (g$665$10923 '#f (g$665$11391 (cons g$665$16857 g$665$16858) g$665$16749 g$665$16750))) g$665$16851) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16849 '())))) ((lambda (g$665$16861) (if (g$665$11026 g$665$16861) (begin '#f ((lambda (g$665$16863) (if g$665$16863 (begin '#f ((lambda (g$665$16865) (if g$665$16865 (begin '#f (append g$665$16863 g$665$16865)) '#f)) ((lambda (g$665$16867) (if (g$665$11026 g$665$16867) (begin '#f ((lambda (g$665$16869) (if g$665$16869 (begin '#f ((lambda (g$665$16871) (if g$665$16871 (begin '#f (append g$665$16869 g$665$16871)) '#f)) ((letrec ((g$665$16873 (lambda (g$665$16875) (if (g$665$11026 g$665$16875) ((lambda (g$665$16877) (if g$665$16877 (begin '#f ((lambda (g$665$16879) (if g$665$16879 (begin '#f (map cons g$665$16877 g$665$16879)) '#f)) (g$665$16873 (g$665$11038 g$665$16875)))) '#f)) ((lambda (g$665$16881) (list g$665$16881)) (g$665$11034 g$665$16875))) (if (g$665$11030 g$665$16875) (list (begin 'x* '())) '#f))))) g$665$16873) (g$665$11038 g$665$16867)))) '#f)) ((lambda (g$665$16883) (list g$665$16883)) (g$665$11034 g$665$16867)))) '#f)) (g$665$11038 g$665$16861)))) '#f)) ((lambda (g$665$16885) '()) (g$665$11034 g$665$16861)))) '#f)) g$665$16849))) g$665$16748) (if (memv g$665$16760 '(let-syntax letrec-syntax)) ((lambda (g$665$16761) ((lambda (g$665$16763) (if (if g$665$16763 (begin '#f (apply (lambda (g$665$16765 g$665$16766 g$665$16767 g$665$16768) (if (g$665$11050 g$665$16765) (void) (error 'expander '"~a ~s" '"invalid identifiers" (g$665$11058 g$665$16748 '())))) g$665$16763)) '#f) (apply (lambda (g$665$16773 g$665$16774 g$665$16775 g$665$16776) ((lambda (g$665$16781) ((lambda (g$665$16783) ((lambda (g$665$16785) ((lambda () (g$665$10923 '#f (g$665$11391 (map (lambda (g$665$16787) (g$665$11020 g$665$16783 g$665$16787)) (cons g$665$16775 g$665$16776)) (append (map cons g$665$16781 g$665$16785) g$665$16749) (append (map cons g$665$16781 g$665$16785) g$665$16750)))))) (map (lambda (g$665$16789) (g$665$11090 (g$665$11429 (if (eq? g$665$16754 'let-syntax) g$665$16789 (g$665$11020 g$665$16783 g$665$16789)) g$665$16750))) g$665$16774))) (g$665$10987 g$665$16773 g$665$16781))) (map g$665$10954 g$665$16773))) g$665$16763) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16761 '())))) ((lambda (g$665$16791) (if (g$665$11026 g$665$16791) (begin '#f ((lambda (g$665$16793) (if g$665$16793 (begin '#f ((lambda (g$665$16795) (if g$665$16795 (begin '#f (append g$665$16793 g$665$16795)) '#f)) ((lambda (g$665$16797) (if (g$665$11026 g$665$16797) (begin '#f ((lambda (g$665$16799) (if g$665$16799 (begin '#f ((lambda (g$665$16801) (if g$665$16801 (begin '#f (append g$665$16799 g$665$16801)) '#f)) ((lambda (g$665$16803) (if (g$665$11026 g$665$16803) (begin '#f ((lambda (g$665$16805) (if g$665$16805 (begin '#f ((lambda (g$665$16807) (if g$665$16807 (begin '#f (append g$665$16805 g$665$16807)) '#f)) ((letrec ((g$665$16809 (lambda (g$665$16811) (if (g$665$11026 g$665$16811) ((lambda (g$665$16813) (if g$665$16813 (begin '#f ((lambda (g$665$16815) (if g$665$16815 (begin '#f (map cons g$665$16813 g$665$16815)) '#f)) (g$665$16809 (g$665$11038 g$665$16811)))) '#f)) ((lambda (g$665$16817) (list g$665$16817)) (g$665$11034 g$665$16811))) (if (g$665$11030 g$665$16811) (list (begin 'xbody* '())) '#f))))) g$665$16809) (g$665$11038 g$665$16803)))) '#f)) ((lambda (g$665$16819) (list g$665$16819)) (g$665$11034 g$665$16803)))) '#f)) (g$665$11038 g$665$16797)))) '#f)) ((letrec ((g$665$16821 (lambda (g$665$16823) (if (g$665$11026 g$665$16823) ((lambda (g$665$16825) (if g$665$16825 (begin '#f ((lambda (g$665$16827) (if g$665$16827 (begin '#f (map cons g$665$16825 g$665$16827)) '#f)) (g$665$16821 (g$665$11038 g$665$16823)))) '#f)) ((lambda (g$665$16829) (if (g$665$11026 g$665$16829) (begin '#f ((lambda (g$665$16831) (if g$665$16831 (begin '#f ((lambda (g$665$16833) (if g$665$16833 (begin '#f (append g$665$16831 g$665$16833)) '#f)) ((lambda (g$665$16835) (if (g$665$11026 g$665$16835) (begin '#f ((lambda (g$665$16837) (if g$665$16837 (begin '#f ((lambda (g$665$16839) (if g$665$16839 (begin '#f (append g$665$16837 g$665$16839)) '#f)) ((lambda (g$665$16841) (if (equal? (g$665$11060 g$665$16841) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$16835)))) '#f)) ((lambda (g$665$16843) (list g$665$16843)) (g$665$11034 g$665$16835)))) '#f)) (g$665$11038 g$665$16829)))) '#f)) ((lambda (g$665$16845) (list g$665$16845)) (g$665$11034 g$665$16829)))) '#f)) (g$665$11034 g$665$16823))) (if (g$665$11030 g$665$16823) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$665$16821) (g$665$11034 g$665$16797)))) '#f)) (g$665$11038 g$665$16791)))) '#f)) ((lambda (g$665$16847) '()) (g$665$11034 g$665$16791)))) '#f)) g$665$16761))) g$665$16748) (if (memv g$665$16760 '(displaced-lexical)) (error 'expander '"~a ~s" '"identifier out of context" (g$665$11058 g$665$16748 '())) (if (memv g$665$16760 '(syntax)) (error 'expander '"~a ~s" '"reference to pattern variable outside a syntax form" (g$665$11058 g$665$16748 '())) (if (memv g$665$16760 '(define define-syntax module import)) (error 'expander '"~a ~s" '"invalid expression" (g$665$11058 g$665$16748 '())) (error 'expander '"~a ~s" '"invalid expression" (g$665$11058 g$665$16748 '())))))))))))))))))) g$665$16754))))) (set! g$665$11397 (lambda (g$665$16899 g$665$16900 g$665$16901) ((lambda (g$665$16905) ((lambda (g$665$16907) (if (if g$665$16907 (begin '#f (apply (lambda (g$665$16909 g$665$16910) (g$665$11040 g$665$16909)) g$665$16907)) '#f) (apply (lambda (g$665$16913 g$665$16914) (call-with-values (lambda () (g$665$11072 g$665$16913 g$665$16900)) (lambda (g$665$16917 g$665$16918 g$665$16919) ((lambda (g$665$16923) (if (memv g$665$16923 '(lexical)) (list 'set! g$665$16918 (g$665$11395 g$665$16914 g$665$16900 g$665$16901)) (if (memv g$665$16923 '(global core-prim)) (error 'expander '"~a ~s" '"cannot modify imported identifier in" (g$665$11058 g$665$16899 '())) (if (memv g$665$16923 '(global-macro!)) (g$665$11395 (g$665$11389 g$665$16918 g$665$16899) g$665$16900 g$665$16901) (if (memv g$665$16923 '(local-macro!)) (g$665$11395 (g$665$11387 g$665$16918 g$665$16899) g$665$16900 g$665$16901) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$16899))))))) g$665$16917)))) g$665$16907) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16905 '())))) ((lambda (g$665$16924) (if (g$665$11026 g$665$16924) (begin '#f ((lambda (g$665$16926) (if g$665$16926 (begin '#f ((lambda (g$665$16928) (if g$665$16928 (begin '#f (append g$665$16926 g$665$16928)) '#f)) ((lambda (g$665$16930) (if (g$665$11026 g$665$16930) (begin '#f ((lambda (g$665$16932) (if g$665$16932 (begin '#f ((lambda (g$665$16934) (if g$665$16934 (begin '#f (append g$665$16932 g$665$16934)) '#f)) ((lambda (g$665$16936) (if (g$665$11026 g$665$16936) (begin '#f ((lambda (g$665$16938) (if g$665$16938 (begin '#f ((lambda (g$665$16940) (if g$665$16940 (begin '#f (append g$665$16938 g$665$16940)) '#f)) ((lambda (g$665$16942) (if (equal? (g$665$11060 g$665$16942) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$16936)))) '#f)) ((lambda (g$665$16944) (list g$665$16944)) (g$665$11034 g$665$16936)))) '#f)) (g$665$11038 g$665$16930)))) '#f)) ((lambda (g$665$16946) (list g$665$16946)) (g$665$11034 g$665$16930)))) '#f)) (g$665$11038 g$665$16924)))) '#f)) ((lambda (g$665$16948) '()) (g$665$11034 g$665$16924)))) '#f)) g$665$16905))) g$665$16899))) (set! g$665$11399 (lambda (g$665$16950 g$665$16951 g$665$16952 g$665$16953) ((lambda (g$665$16958) ((lambda (g$665$16960) (if (if g$665$16960 (begin '#f (apply (lambda (g$665$16962) '#t) g$665$16960)) '#f) (apply (lambda (g$665$16964) (if (g$665$11050 g$665$16964) ((lambda (g$665$16966 g$665$16967) (values g$665$16966 (g$665$11411 (g$665$11020 (g$665$10987 g$665$16964 g$665$16967) g$665$16951) (g$665$11297 g$665$16967 g$665$16966 g$665$16952) g$665$16953))) (map g$665$10950 g$665$16964) (map g$665$10954 g$665$16964)) (error 'expander '"~a ~s" '"invalid fmls" (g$665$11058 g$665$16950 '())))) g$665$16960) ((lambda (g$665$16970) ((lambda (g$665$16972) (if (if g$665$16972 (begin '#f (apply (lambda (g$665$16974 g$665$16975) '#t) g$665$16972)) '#f) (apply (lambda (g$665$16978 g$665$16979) (if (g$665$11050 (cons g$665$16979 g$665$16978)) ((lambda (g$665$16982 g$665$16983 g$665$16984 g$665$16985) (values (append g$665$16982 g$665$16984) (g$665$11411 (g$665$11020 (g$665$10987 (cons g$665$16979 g$665$16978) (cons g$665$16985 g$665$16983)) g$665$16951) (g$665$11297 (cons g$665$16985 g$665$16983) (cons g$665$16984 g$665$16982) g$665$16952) g$665$16953))) (map g$665$10950 g$665$16978) (map g$665$10954 g$665$16978) (g$665$10950 g$665$16979) (g$665$10954 g$665$16979)) (error 'expander '"~a ~s" '"invalid fmls" (g$665$11058 g$665$16950 '())))) g$665$16972) ((lambda (g$665$16990) ((lambda (g$665$16992) (if (if g$665$16992 (begin '#f (apply (lambda () '#t) g$665$16992)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"invalid fmls" (g$665$11058 g$665$16950 '()))) g$665$16992) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$16990 '())))) ((lambda (g$665$16994) '()) g$665$16990))) g$665$16970))) ((letrec ((g$665$16996 (lambda (g$665$17002) (if (g$665$11026 g$665$17002) ((lambda (g$665$17004) (if g$665$17004 (begin '#f ((lambda (g$665$17006) (if g$665$17006 (begin '#f (cons (map cons g$665$17004 (car g$665$17006)) (cdr g$665$17006))) '#f)) (g$665$16996 (g$665$11038 g$665$17002)))) '#f)) ((lambda (g$665$17008) (list g$665$17008)) (g$665$11034 g$665$17002))) ((lambda (g$665$17010) (if g$665$17010 (begin '#f (cons (list (begin 'x* '())) g$665$17010)) '#f)) ((lambda (g$665$17012) (list g$665$17012)) g$665$17002)))))) (lambda (g$665$16998) ((lambda (g$665$17000) (if g$665$17000 (begin '#f (append (car g$665$17000) (cdr g$665$17000))) '#f)) (g$665$16996 g$665$16998)))) g$665$16970))) g$665$16958))) ((letrec ((g$665$17014 (lambda (g$665$17016) (if (g$665$11026 g$665$17016) ((lambda (g$665$17018) (if g$665$17018 (begin '#f ((lambda (g$665$17020) (if g$665$17020 (begin '#f (map cons g$665$17018 g$665$17020)) '#f)) (g$665$17014 (g$665$11038 g$665$17016)))) '#f)) ((lambda (g$665$17022) (list g$665$17022)) (g$665$11034 g$665$17016))) (if (g$665$11030 g$665$17016) (list (begin 'x* '())) '#f))))) g$665$17014) g$665$16958))) g$665$16950))) (set! g$665$11401 (lambda (g$665$17024 g$665$17025 g$665$17026 g$665$17027) (if (null? g$665$17024) (values '() '()) (call-with-values (lambda () (g$665$11399 (car g$665$17024) (car g$665$17025) g$665$17026 g$665$17027)) (lambda (g$665$17032 g$665$17033) (call-with-values (lambda () (g$665$11401 (cdr g$665$17024) (cdr g$665$17025) g$665$17026 g$665$17027)) (lambda (g$665$17036 g$665$17037) (values (cons g$665$17032 g$665$17036) (cons g$665$17033 g$665$17037))))))))) (set! g$665$11403 (lambda (g$665$17040 g$665$17041 g$665$17042) ((lambda (g$665$17046) (if (memv g$665$17046 '(defun)) ((lambda (g$665$17051) ((lambda (g$665$17053 g$665$17054) (call-with-values (lambda () (g$665$11399 g$665$17053 g$665$17054 g$665$17041 g$665$17042)) (lambda (g$665$17057 g$665$17058) (g$665$10929 '#f g$665$17057 g$665$17058)))) (car g$665$17051) (cdr g$665$17051))) (cdr g$665$17040)) (if (memv g$665$17046 '(expr)) ((lambda (g$665$17049) (g$665$11395 g$665$17049 g$665$17041 g$665$17042)) (cdr g$665$17040)) (if (memv g$665$17046 '(top-expr)) ((lambda (g$665$17047) (g$665$10923 '#f (list (g$665$11395 g$665$17047 g$665$17041 g$665$17042) (g$665$10922)))) (cdr g$665$17040)) (error 'chi-rhs '"invalid rhs ~s" g$665$17040))))) (car g$665$17040)))) (set! g$665$11405 (lambda (g$665$17061 g$665$17062 g$665$17063) (letrec ((g$665$17067 (lambda (g$665$17069) (if (null? g$665$17069) '() ((lambda (g$665$17071) (cons g$665$17071 (g$665$17067 (cdr g$665$17069)))) (g$665$11403 (car g$665$17069) g$665$17062 g$665$17063)))))) (g$665$17067 g$665$17061)))) (set! g$665$11407 (lambda (g$665$17073 g$665$17074 g$665$17075) (if (null? g$665$17074) '#f (if (g$665$11046 g$665$17073 (car g$665$17074)) (car g$665$17075) (g$665$11407 g$665$17073 (cdr g$665$17074) (cdr g$665$17075)))))) (set! g$665$11409 (lambda (g$665$17079) (letrec ((g$665$17081 (lambda (g$665$17083 g$665$17084) (if (null? g$665$17083) g$665$17084 ((lambda (g$665$17087) (if g$665$17087 ((lambda (g$665$17089) (g$665$17081 (cdr g$665$17083) (cons (list (car g$665$17083) g$665$17089) g$665$17084))) g$665$17087) (g$665$17081 (cdr g$665$17083) g$665$17084))) (g$665$11407 (car g$665$17083) (cdr g$665$17083) (cdr g$665$17083))))))) (g$665$17081 g$665$17079 '())))) (set! g$665$11411 (lambda (g$665$17091 g$665$17092 g$665$17093) ((lambda (g$665$17097) (call-with-values (lambda () (g$665$11417 (map (lambda (g$665$17099) (g$665$11020 g$665$17097 g$665$17099)) (g$665$11036 g$665$17091)) g$665$17092 g$665$17093 '() '() '() '() g$665$17097 '#f)) (lambda (g$665$17101 g$665$17102 g$665$17103 g$665$17104 g$665$17105 g$665$17106 g$665$17107) (begin (if (null? g$665$17101) (error 'expander '"~a ~s" '"no expression in body" (g$665$11058 g$665$17101 '())) (void)) ((lambda (g$665$17115 g$665$17116) (g$665$10920 '#f (reverse g$665$17104) (reverse g$665$17115) (g$665$10923 '#f g$665$17116))) (g$665$11405 g$665$17105 g$665$17102 g$665$17103) (g$665$11391 (append (apply append (reverse g$665$17106)) g$665$17101) g$665$17102 g$665$17103)))))) (g$665$10977)))) (set! g$665$11413 (lambda (g$665$17119) ((lambda (g$665$17121) ((lambda (g$665$17123) (if (if g$665$17123 (begin '#f (apply (lambda (g$665$17125 g$665$17126) '#t) g$665$17123)) '#f) (apply (lambda (g$665$17129 g$665$17130) (begin (if (for-all g$665$11040 g$665$17129) (void) (error 'expander '"~a ~s" '"module exports must be identifiers" (g$665$11058 g$665$17119 '()))) (values '#f g$665$17129 g$665$17130))) g$665$17123) ((lambda (g$665$17133) ((lambda (g$665$17135) (if (if g$665$17135 (begin '#f (apply (lambda (g$665$17137 g$665$17138 g$665$17139) '#t) g$665$17135)) '#f) (apply (lambda (g$665$17143 g$665$17144 g$665$17145) (begin (if (g$665$11040 g$665$17143) (void) (error 'expander '"~a ~s" '"module name must be an identifier" (g$665$11058 g$665$17119 '()))) (if (for-all g$665$11040 g$665$17144) (void) (error 'expander '"~a ~s" '"module exports must be identifiers" (g$665$11058 g$665$17119 '()))) (values g$665$17143 g$665$17144 g$665$17145))) g$665$17135) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17133 '())))) ((lambda (g$665$17149) (if (g$665$11026 g$665$17149) (begin '#f ((lambda (g$665$17151) (if g$665$17151 (begin '#f ((lambda (g$665$17153) (if g$665$17153 (begin '#f (append g$665$17151 g$665$17153)) '#f)) ((lambda (g$665$17155) (if (g$665$11026 g$665$17155) (begin '#f ((lambda (g$665$17157) (if g$665$17157 (begin '#f ((lambda (g$665$17159) (if g$665$17159 (begin '#f (append g$665$17157 g$665$17159)) '#f)) ((lambda (g$665$17161) (if (g$665$11026 g$665$17161) (begin '#f ((lambda (g$665$17163) (if g$665$17163 (begin '#f ((lambda (g$665$17165) (if g$665$17165 (begin '#f (append g$665$17163 g$665$17165)) '#f)) ((letrec ((g$665$17167 (lambda (g$665$17169) (if (g$665$11026 g$665$17169) ((lambda (g$665$17171) (if g$665$17171 (begin '#f ((lambda (g$665$17173) (if g$665$17173 (begin '#f (map cons g$665$17171 g$665$17173)) '#f)) (g$665$17167 (g$665$11038 g$665$17169)))) '#f)) ((lambda (g$665$17175) (list g$665$17175)) (g$665$11034 g$665$17169))) (if (g$665$11030 g$665$17169) (list (begin 'b* '())) '#f))))) g$665$17167) (g$665$11038 g$665$17161)))) '#f)) ((letrec ((g$665$17177 (lambda (g$665$17179) (if (g$665$11026 g$665$17179) ((lambda (g$665$17181) (if g$665$17181 (begin '#f ((lambda (g$665$17183) (if g$665$17183 (begin '#f (map cons g$665$17181 g$665$17183)) '#f)) (g$665$17177 (g$665$11038 g$665$17179)))) '#f)) ((lambda (g$665$17185) (list g$665$17185)) (g$665$11034 g$665$17179))) (if (g$665$11030 g$665$17179) (list (begin 'export* '())) '#f))))) g$665$17177) (g$665$11034 g$665$17161)))) '#f)) (g$665$11038 g$665$17155)))) '#f)) ((lambda (g$665$17187) (list g$665$17187)) (g$665$11034 g$665$17155)))) '#f)) (g$665$11038 g$665$17149)))) '#f)) ((lambda (g$665$17189) '()) (g$665$11034 g$665$17149)))) '#f)) g$665$17133))) g$665$17121))) ((lambda (g$665$17191) (if (g$665$11026 g$665$17191) (begin '#f ((lambda (g$665$17193) (if g$665$17193 (begin '#f ((lambda (g$665$17195) (if g$665$17195 (begin '#f (append g$665$17193 g$665$17195)) '#f)) ((lambda (g$665$17197) (if (g$665$11026 g$665$17197) (begin '#f ((lambda (g$665$17199) (if g$665$17199 (begin '#f ((lambda (g$665$17201) (if g$665$17201 (begin '#f (append g$665$17199 g$665$17201)) '#f)) ((letrec ((g$665$17203 (lambda (g$665$17205) (if (g$665$11026 g$665$17205) ((lambda (g$665$17207) (if g$665$17207 (begin '#f ((lambda (g$665$17209) (if g$665$17209 (begin '#f (map cons g$665$17207 g$665$17209)) '#f)) (g$665$17203 (g$665$11038 g$665$17205)))) '#f)) ((lambda (g$665$17211) (list g$665$17211)) (g$665$11034 g$665$17205))) (if (g$665$11030 g$665$17205) (list (begin 'b* '())) '#f))))) g$665$17203) (g$665$11038 g$665$17197)))) '#f)) ((letrec ((g$665$17213 (lambda (g$665$17215) (if (g$665$11026 g$665$17215) ((lambda (g$665$17217) (if g$665$17217 (begin '#f ((lambda (g$665$17219) (if g$665$17219 (begin '#f (map cons g$665$17217 g$665$17219)) '#f)) (g$665$17213 (g$665$11038 g$665$17215)))) '#f)) ((lambda (g$665$17221) (list g$665$17221)) (g$665$11034 g$665$17215))) (if (g$665$11030 g$665$17215) (list (begin 'export* '())) '#f))))) g$665$17213) (g$665$11034 g$665$17197)))) '#f)) (g$665$11038 g$665$17191)))) '#f)) ((lambda (g$665$17223) '()) (g$665$11034 g$665$17191)))) '#f)) g$665$17121))) g$665$17119))) (set! g$665$11415 (lambda (g$665$17225 g$665$17226 g$665$17227 g$665$17228 g$665$17229 g$665$17230 g$665$17231) (call-with-values (lambda () (g$665$11413 g$665$17225)) (lambda (g$665$17239 g$665$17240 g$665$17241) ((lambda (g$665$17245) ((lambda (g$665$17247) ((lambda () (call-with-values (lambda () (g$665$11417 g$665$17247 g$665$17226 g$665$17227 g$665$17228 g$665$17229 g$665$17230 g$665$17231 g$665$17245 '#f)) (lambda (g$665$17249 g$665$17250 g$665$17251 g$665$17252 g$665$17253 g$665$17254 g$665$17255) ((lambda (g$665$17263 g$665$17264) (if (not g$665$17239) (values g$665$17252 g$665$17253 g$665$17240 g$665$17263 g$665$17250 g$665$17251 g$665$17264 g$665$17255) ((lambda (g$665$17267 g$665$17268) (values g$665$17252 g$665$17253 (list g$665$17239) (list g$665$17267) (cons (cons g$665$17267 (cons '$module g$665$17268)) g$665$17250) (cons (cons g$665$17267 (cons '$module g$665$17268)) g$665$17251) g$665$17264 g$665$17255)) (g$665$10954 'module) (cons g$665$17240 g$665$17263)))) (map (lambda (g$665$17271) ((lambda (g$665$17273) (if g$665$17273 g$665$17273 (begin '#f (error 'expander '"~a ~s" '"cannot find module export" (g$665$11058 g$665$17271 '()))))) (g$665$11062 (g$665$11020 g$665$17245 g$665$17271)))) g$665$17240) (cons g$665$17249 g$665$17254))))))) (map (lambda (g$665$17275) (g$665$11020 g$665$17245 g$665$17275)) (g$665$11036 g$665$17241)))) (g$665$10977)))))) (set! g$665$11417 (lambda (g$665$17277 g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17283 g$665$17284 g$665$17285) (if (null? g$665$17277) (values g$665$17277 g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17283) ((lambda (g$665$17295) (call-with-values (lambda () (g$665$11072 g$665$17295 g$665$17278)) (lambda (g$665$17297 g$665$17298 g$665$17299) ((lambda (g$665$17303) ((lambda (g$665$17305) (if (memv g$665$17305 '(define)) (call-with-values (lambda () (g$665$11289 g$665$17295)) (lambda (g$665$17491 g$665$17492) (begin (if (g$665$11054 g$665$17491 g$665$17303) (error 'expander '"~a ~s" '"cannot redefine keyword" (g$665$11058 g$665$17295 '())) (void)) ((lambda (g$665$17495 g$665$17496) (begin (g$665$10979 g$665$17284 g$665$17491 g$665$17496) (g$665$11417 (cdr g$665$17277) (g$665$11295 g$665$17496 g$665$17495 g$665$17278) g$665$17279 (cons g$665$17495 g$665$17280) (cons g$665$17492 g$665$17281) g$665$17282 g$665$17303 g$665$17284 g$665$17285))) (g$665$10950 g$665$17491) (g$665$10954 g$665$17491))))) (if (memv g$665$17305 '(define-syntax)) (call-with-values (lambda () (g$665$11291 g$665$17295)) (lambda (g$665$17481 g$665$17482) (begin (if (g$665$11054 g$665$17481 g$665$17303) (error 'expander '"~a ~s" '"cannot redefine keyword" (g$665$11058 g$665$17295 '())) (void)) ((lambda (g$665$17485 g$665$17486) (begin (g$665$10979 g$665$17284 g$665$17481 g$665$17485) ((lambda (g$665$17489) (g$665$11417 (cdr g$665$17277) (cons (cons g$665$17485 g$665$17489) g$665$17278) (cons (cons g$665$17485 g$665$17489) g$665$17279) g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285)) (g$665$11090 g$665$17486)))) (g$665$10954 g$665$17481) (g$665$11429 g$665$17482 g$665$17279))))) (if (memv g$665$17305 '(let-syntax letrec-syntax)) ((lambda (g$665$17405) ((lambda (g$665$17407) (if (if g$665$17407 (begin '#f (apply (lambda (g$665$17409 g$665$17410 g$665$17411) (if (g$665$11050 g$665$17409) (void) (error 'expander '"~a ~s" '"invalid identifiers" (g$665$11058 g$665$17295 '())))) g$665$17407)) '#f) (apply (lambda (g$665$17415 g$665$17416 g$665$17417) ((lambda (g$665$17421) ((lambda (g$665$17423) ((lambda (g$665$17425) ((lambda () (g$665$11417 (append (map (lambda (g$665$17427) (g$665$11020 g$665$17423 g$665$17427)) g$665$17417) (cdr g$665$17277)) (append (map cons g$665$17421 g$665$17425) g$665$17278) (append (map cons g$665$17421 g$665$17425) g$665$17279) g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285)))) (map (lambda (g$665$17429) (g$665$11090 (g$665$11429 (if (eq? g$665$17297 'let-syntax) g$665$17429 (g$665$11020 g$665$17423 g$665$17429)) g$665$17279))) g$665$17416))) (g$665$10987 g$665$17415 g$665$17421))) (map g$665$10954 g$665$17415))) g$665$17407) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17405 '())))) ((lambda (g$665$17431) (if (g$665$11026 g$665$17431) (begin '#f ((lambda (g$665$17433) (if g$665$17433 (begin '#f ((lambda (g$665$17435) (if g$665$17435 (begin '#f (append g$665$17433 g$665$17435)) '#f)) ((lambda (g$665$17437) (if (g$665$11026 g$665$17437) (begin '#f ((lambda (g$665$17439) (if g$665$17439 (begin '#f ((lambda (g$665$17441) (if g$665$17441 (begin '#f (append g$665$17439 g$665$17441)) '#f)) ((letrec ((g$665$17443 (lambda (g$665$17445) (if (g$665$11026 g$665$17445) ((lambda (g$665$17447) (if g$665$17447 (begin '#f ((lambda (g$665$17449) (if g$665$17449 (begin '#f (map cons g$665$17447 g$665$17449)) '#f)) (g$665$17443 (g$665$11038 g$665$17445)))) '#f)) ((lambda (g$665$17451) (list g$665$17451)) (g$665$11034 g$665$17445))) (if (g$665$11030 g$665$17445) (list (begin 'xbody* '())) '#f))))) g$665$17443) (g$665$11038 g$665$17437)))) '#f)) ((letrec ((g$665$17453 (lambda (g$665$17455) (if (g$665$11026 g$665$17455) ((lambda (g$665$17457) (if g$665$17457 (begin '#f ((lambda (g$665$17459) (if g$665$17459 (begin '#f (map cons g$665$17457 g$665$17459)) '#f)) (g$665$17453 (g$665$11038 g$665$17455)))) '#f)) ((lambda (g$665$17461) (if (g$665$11026 g$665$17461) (begin '#f ((lambda (g$665$17463) (if g$665$17463 (begin '#f ((lambda (g$665$17465) (if g$665$17465 (begin '#f (append g$665$17463 g$665$17465)) '#f)) ((lambda (g$665$17467) (if (g$665$11026 g$665$17467) (begin '#f ((lambda (g$665$17469) (if g$665$17469 (begin '#f ((lambda (g$665$17471) (if g$665$17471 (begin '#f (append g$665$17469 g$665$17471)) '#f)) ((lambda (g$665$17473) (if (equal? (g$665$11060 g$665$17473) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$17467)))) '#f)) ((lambda (g$665$17475) (list g$665$17475)) (g$665$11034 g$665$17467)))) '#f)) (g$665$11038 g$665$17461)))) '#f)) ((lambda (g$665$17477) (list g$665$17477)) (g$665$11034 g$665$17461)))) '#f)) (g$665$11034 g$665$17455))) (if (g$665$11030 g$665$17455) (list (begin 'xlhs* '()) (begin 'xrhs* '())) '#f))))) g$665$17453) (g$665$11034 g$665$17437)))) '#f)) (g$665$11038 g$665$17431)))) '#f)) ((lambda (g$665$17479) '()) (g$665$11034 g$665$17431)))) '#f)) g$665$17405))) g$665$17295) (if (memv g$665$17305 '(begin)) ((lambda (g$665$17379) ((lambda (g$665$17381) (if (if g$665$17381 (begin '#f (apply (lambda (g$665$17383) '#t) g$665$17381)) '#f) (apply (lambda (g$665$17385) (g$665$11417 (append g$665$17385 (cdr g$665$17277)) g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285)) g$665$17381) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17379 '())))) ((lambda (g$665$17387) (if (g$665$11026 g$665$17387) (begin '#f ((lambda (g$665$17389) (if g$665$17389 (begin '#f ((lambda (g$665$17391) (if g$665$17391 (begin '#f (append g$665$17389 g$665$17391)) '#f)) ((letrec ((g$665$17393 (lambda (g$665$17395) (if (g$665$11026 g$665$17395) ((lambda (g$665$17397) (if g$665$17397 (begin '#f ((lambda (g$665$17399) (if g$665$17399 (begin '#f (map cons g$665$17397 g$665$17399)) '#f)) (g$665$17393 (g$665$11038 g$665$17395)))) '#f)) ((lambda (g$665$17401) (list g$665$17401)) (g$665$11034 g$665$17395))) (if (g$665$11030 g$665$17395) (list (begin 'x* '())) '#f))))) g$665$17393) (g$665$11038 g$665$17387)))) '#f)) ((lambda (g$665$17403) '()) (g$665$11034 g$665$17387)))) '#f)) g$665$17379))) g$665$17295) (if (memv g$665$17305 '(global-macro global-macro!)) (g$665$11417 (cons (g$665$11020 g$665$17284 (g$665$11389 g$665$17298 g$665$17295)) (cdr g$665$17277)) g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285) (if (memv g$665$17305 '(local-macro local-macro!)) (g$665$11417 (cons (g$665$11020 g$665$17284 (g$665$11387 g$665$17298 g$665$17295)) (cdr g$665$17277)) g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285) (if (memv g$665$17305 '(macro macro!)) (g$665$11417 (cons (g$665$11020 g$665$17284 (g$665$11385 g$665$17298 g$665$17295)) (cdr g$665$17277)) g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285) (if (memv g$665$17305 '(module)) (call-with-values (lambda () (g$665$11415 g$665$17295 g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303)) (lambda (g$665$17359 g$665$17360 g$665$17361 g$665$17362 g$665$17363 g$665$17364 g$665$17365 g$665$17366) (begin (for-each (lambda (g$665$17375 g$665$17376) (g$665$10979 g$665$17284 g$665$17375 g$665$17376)) g$665$17361 g$665$17362) (g$665$11417 (cdr g$665$17277) g$665$17363 g$665$17364 g$665$17359 g$665$17360 g$665$17365 g$665$17366 g$665$17284 g$665$17285)))) (if (memv g$665$17305 '(import)) (begin ((lambda () ((lambda (g$665$17306) (begin (set! g$665$17306 (lambda (g$665$17308 g$665$17309) ((lambda (g$665$17312) ((lambda (g$665$17314) (if (if g$665$17314 (begin '#f (apply (lambda (g$665$17316) (g$665$11040 g$665$17316)) g$665$17314)) '#f) (apply (lambda (g$665$17318) (call-with-values (lambda () (g$665$11072 g$665$17318 g$665$17309)) (lambda (g$665$17320 g$665$17321 g$665$17322) ((lambda (g$665$17326) (if (memv g$665$17326 '($module)) ((lambda (g$665$17327) ((lambda (g$665$17329 g$665$17330) (values g$665$17329 g$665$17330)) (car g$665$17327) (cdr g$665$17327))) g$665$17321) (error 'expander '"~a ~s" '"invalid import" (g$665$11058 g$665$17308 '())))) g$665$17320)))) g$665$17314) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17312 '())))) ((lambda (g$665$17333) (if (g$665$11026 g$665$17333) (begin '#f ((lambda (g$665$17335) (if g$665$17335 (begin '#f ((lambda (g$665$17337) (if g$665$17337 (begin '#f (append g$665$17335 g$665$17337)) '#f)) ((lambda (g$665$17339) (if (g$665$11026 g$665$17339) (begin '#f ((lambda (g$665$17341) (if g$665$17341 (begin '#f ((lambda (g$665$17343) (if g$665$17343 (begin '#f (append g$665$17341 g$665$17343)) '#f)) ((lambda (g$665$17345) (if (equal? (g$665$11060 g$665$17345) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$17339)))) '#f)) ((lambda (g$665$17347) (list g$665$17347)) (g$665$11034 g$665$17339)))) '#f)) (g$665$11038 g$665$17333)))) '#f)) ((lambda (g$665$17349) '()) (g$665$11034 g$665$17333)))) '#f)) g$665$17312))) g$665$17308))) (call-with-values (lambda () (g$665$17306 g$665$17295 g$665$17278)) (lambda (g$665$17351 g$665$17352) (for-each (lambda (g$665$17355 g$665$17356) (g$665$10979 g$665$17284 g$665$17355 g$665$17356)) g$665$17351 g$665$17352))))) '#f))) (g$665$11417 (cdr g$665$17277) g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303 g$665$17284 g$665$17285)) (if g$665$17285 (g$665$11417 (cdr g$665$17277) g$665$17278 g$665$17279 (cons (g$665$10950 'dummy) g$665$17280) (cons (cons 'top-expr g$665$17295) g$665$17281) g$665$17282 g$665$17303 g$665$17284 g$665$17285) (values g$665$17277 g$665$17278 g$665$17279 g$665$17280 g$665$17281 g$665$17282 g$665$17303)))))))))))) g$665$17297)) (if (g$665$11040 g$665$17299) (cons g$665$17299 g$665$17283) g$665$17283))))) (car g$665$17277))))) (set! g$665$11419 (lambda (g$665$17499 g$665$17500 g$665$17501) (begin (g$665$10648 (g$665$11510) g$665$17499 g$665$17500) (g$665$10647 (g$665$11510) g$665$17500 g$665$17501)))) (set! g$665$11421 (lambda (g$665$17505 g$665$17506) (g$665$11423 g$665$17505 g$665$17506))) (set! g$665$11423 (lambda (g$665$17509 g$665$17510) ((lambda (g$665$17513) ((lambda (g$665$17515) ((lambda (g$665$17517) (if (memv g$665$17517 '(global)) ((lambda (g$665$17518) ((lambda (g$665$17520 g$665$17521) (if (eq? g$665$17520 (g$665$11510)) g$665$17521 (error 'expander '"~a ~s" '"cannot modify imported binding" (g$665$11058 g$665$17510 '())))) (car g$665$17518) (cdr g$665$17518))) (g$665$11070 g$665$17515)) (error 'expander '"~a ~s" '"cannot modify binding in" (g$665$11058 g$665$17510 '())))) (g$665$11068 g$665$17515))) (g$665$10646 g$665$17513))) (g$665$11062 g$665$17509)))) (set! g$665$11425 (lambda (g$665$17524) ((lambda (g$665$17526) ((lambda (g$665$17528) (if (if g$665$17528 (begin '#f (apply (lambda (g$665$17530 g$665$17531) (g$665$11040 g$665$17530)) g$665$17528)) '#f) (apply (lambda (g$665$17534 g$665$17535) ((lambda (g$665$17538) ((lambda (g$665$17540) (values g$665$17538 g$665$17540)) (g$665$11395 g$665$17535 '() '()))) (g$665$11423 g$665$17534 g$665$17524))) g$665$17528) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17526 '())))) ((lambda (g$665$17542) (if (g$665$11026 g$665$17542) (begin '#f ((lambda (g$665$17544) (if g$665$17544 (begin '#f ((lambda (g$665$17546) (if g$665$17546 (begin '#f (append g$665$17544 g$665$17546)) '#f)) ((lambda (g$665$17548) (if (g$665$11026 g$665$17548) (begin '#f ((lambda (g$665$17550) (if g$665$17550 (begin '#f ((lambda (g$665$17552) (if g$665$17552 (begin '#f (append g$665$17550 g$665$17552)) '#f)) ((lambda (g$665$17554) (if (g$665$11026 g$665$17554) (begin '#f ((lambda (g$665$17556) (if g$665$17556 (begin '#f ((lambda (g$665$17558) (if g$665$17558 (begin '#f (append g$665$17556 g$665$17558)) '#f)) ((lambda (g$665$17560) (if (equal? (g$665$11060 g$665$17560) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$17554)))) '#f)) ((lambda (g$665$17562) (list g$665$17562)) (g$665$11034 g$665$17554)))) '#f)) (g$665$11038 g$665$17548)))) '#f)) ((lambda (g$665$17564) (list g$665$17564)) (g$665$11034 g$665$17548)))) '#f)) (g$665$11038 g$665$17542)))) '#f)) ((lambda (g$665$17566) '()) (g$665$11034 g$665$17542)))) '#f)) g$665$17526))) g$665$17524))) (set! g$665$11427 (lambda (g$665$17568 g$665$17569) (if (null? g$665$17568) g$665$17569 ((lambda (g$665$17572) (call-with-values (lambda () (g$665$11072 g$665$17572 '())) (lambda (g$665$17574 g$665$17575 g$665$17576) ((lambda (g$665$17580) (if (memv g$665$17580 '(define)) (call-with-values (lambda () (g$665$11289 g$665$17572)) (lambda (g$665$17621 g$665$17622) ((lambda (g$665$17625) ((lambda (g$665$17627) (g$665$11427 (cdr g$665$17568) (cons (cons g$665$17625 g$665$17627) g$665$17569))) (g$665$11403 g$665$17622 '() '()))) (g$665$11423 g$665$17621 g$665$17572)))) (if (memv g$665$17580 '(set!)) (call-with-values (lambda () (g$665$11425 g$665$17572)) (lambda (g$665$17617 g$665$17618) (g$665$11427 (cdr g$665$17568) (cons (cons g$665$17617 g$665$17618) g$665$17569)))) (if (memv g$665$17580 '(define-syntax)) (call-with-values (lambda () (g$665$11291 g$665$17572)) (lambda (g$665$17607 g$665$17608) ((lambda (g$665$17611) ((lambda (g$665$17613) ((lambda (g$665$17615) (begin (g$665$11419 (g$665$11042 g$665$17607) g$665$17611 g$665$17615) (g$665$11427 (cdr g$665$17568) g$665$17569))) (g$665$11090 g$665$17613))) (g$665$11429 g$665$17608 '()))) (g$665$11421 g$665$17607 g$665$17572)))) (if (memv g$665$17580 '(let-syntax letrec-syntax)) (error 'chi-top* '"~s is not supported yet at top level" g$665$17574) (if (memv g$665$17580 '(begin)) ((lambda (g$665$17581) ((lambda (g$665$17583) (if (if g$665$17583 (begin '#f (apply (lambda (g$665$17585) '#t) g$665$17583)) '#f) (apply (lambda (g$665$17587) (g$665$11427 (append g$665$17587 (cdr g$665$17568)) g$665$17569)) g$665$17583) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17581 '())))) ((lambda (g$665$17589) (if (g$665$11026 g$665$17589) (begin '#f ((lambda (g$665$17591) (if g$665$17591 (begin '#f ((lambda (g$665$17593) (if g$665$17593 (begin '#f (append g$665$17591 g$665$17593)) '#f)) ((letrec ((g$665$17595 (lambda (g$665$17597) (if (g$665$11026 g$665$17597) ((lambda (g$665$17599) (if g$665$17599 (begin '#f ((lambda (g$665$17601) (if g$665$17601 (begin '#f (map cons g$665$17599 g$665$17601)) '#f)) (g$665$17595 (g$665$11038 g$665$17597)))) '#f)) ((lambda (g$665$17603) (list g$665$17603)) (g$665$11034 g$665$17597))) (if (g$665$11030 g$665$17597) (list (begin 'x* '())) '#f))))) g$665$17595) (g$665$11038 g$665$17589)))) '#f)) ((lambda (g$665$17605) '()) (g$665$11034 g$665$17589)))) '#f)) g$665$17581))) g$665$17572) (if (memv g$665$17580 '(global-macro global-macro!)) (g$665$11427 (cons (g$665$11389 g$665$17575 g$665$17572) (cdr g$665$17568)) g$665$17569) (if (memv g$665$17580 '(local-macro local-macro!)) (g$665$11427 (cons (g$665$11387 g$665$17575 g$665$17572) (cdr g$665$17568)) g$665$17569) (if (memv g$665$17580 '(macro macro!)) (g$665$11427 (cons (g$665$11385 g$665$17575 g$665$17572) (cdr g$665$17568)) g$665$17569) (g$665$11427 (cdr g$665$17568) (cons (cons '#f (g$665$11395 g$665$17572 '() '())) g$665$17569))))))))))) g$665$17574)))) (car g$665$17568))))) (set! g$665$11429 (lambda (g$665$17629 g$665$17630) ((lambda (g$665$17633) ((lambda (g$665$17635) (begin (for-each ((lambda (g$665$17637) (lambda (g$665$17639) (begin (g$665$10645 g$665$17639) (g$665$17637 g$665$17639)))) (g$665$11445)) (g$665$17633)) g$665$17635)) ((lambda (g$665$17645 g$665$17646 g$665$17647 g$665$17648) ((lambda (g$665$17653) (dynamic-wind g$665$17653 (lambda () (g$665$11395 g$665$17629 g$665$17630 g$665$17630)) g$665$17653)) (lambda () (begin ((lambda (g$665$17655) (begin (g$665$17645 g$665$17647) (set! g$665$17647 g$665$17655))) (g$665$17645)) ((lambda (g$665$17657) (begin (g$665$17646 g$665$17648) (set! g$665$17648 g$665$17657))) (g$665$17646)))))) g$665$11443 g$665$11445 g$665$17633 (lambda (g$665$17659) (values))))) (g$665$11441)))) (set! g$665$11431 (lambda (g$665$17661) (letrec ((g$665$17663 (lambda (g$665$17665 g$665$17666 g$665$17667) (if (null? g$665$17665) (begin ((lambda (g$665$17671) (if (g$665$11050 g$665$17671) (void) (error 'expander '"invalid exports of ~s" (g$665$11409 g$665$17671)))) (map (lambda (g$665$17673) (g$665$11016 g$665$17673 g$665$10946 '())) g$665$17667)) (values g$665$17666 g$665$17667)) ((lambda (g$665$17675) ((lambda (g$665$17677) (if (if g$665$17677 (begin '#f (apply (lambda (g$665$17679 g$665$17680 g$665$17681) '#t) g$665$17677)) '#f) (apply (lambda (g$665$17685 g$665$17686 g$665$17687) (begin (if (if (eq? g$665$17685 'rename) (if (for-all symbol? g$665$17686) (begin '#f (for-all symbol? g$665$17687)) '#f) '#f) (void) (error 'expander '"invalid export specifier ~s" (car g$665$17665))) (g$665$17663 (cdr g$665$17665) (append g$665$17686 g$665$17666) (append g$665$17687 g$665$17667)))) g$665$17677) ((lambda (g$665$17691) ((lambda (g$665$17693) (if (if g$665$17693 (begin '#f (apply (lambda (g$665$17695) '#t) g$665$17693)) '#f) (apply (lambda (g$665$17697) (begin (if (symbol? g$665$17697) (void) (error 'expander '"invalid export ~s" g$665$17697)) (g$665$17663 (cdr g$665$17665) (cons g$665$17697 g$665$17666) (cons g$665$17697 g$665$17667)))) g$665$17693) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17691 '())))) ((lambda (g$665$17699) (list g$665$17699)) g$665$17691))) g$665$17675))) ((lambda (g$665$17701) (if (g$665$11026 g$665$17701) (begin '#f ((lambda (g$665$17703) (if g$665$17703 (begin '#f ((lambda (g$665$17705) (if g$665$17705 (begin '#f (append g$665$17703 g$665$17705)) '#f)) ((letrec ((g$665$17707 (lambda (g$665$17709) (if (g$665$11026 g$665$17709) ((lambda (g$665$17711) (if g$665$17711 (begin '#f ((lambda (g$665$17713) (if g$665$17713 (begin '#f (map cons g$665$17711 g$665$17713)) '#f)) (g$665$17707 (g$665$11038 g$665$17709)))) '#f)) ((lambda (g$665$17715) (if (g$665$11026 g$665$17715) (begin '#f ((lambda (g$665$17717) (if g$665$17717 (begin '#f ((lambda (g$665$17719) (if g$665$17719 (begin '#f (append g$665$17717 g$665$17719)) '#f)) ((lambda (g$665$17721) (if (g$665$11026 g$665$17721) (begin '#f ((lambda (g$665$17723) (if g$665$17723 (begin '#f ((lambda (g$665$17725) (if g$665$17725 (begin '#f (append g$665$17723 g$665$17725)) '#f)) ((lambda (g$665$17727) (if (equal? (g$665$11060 g$665$17727) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$17721)))) '#f)) ((lambda (g$665$17729) (list g$665$17729)) (g$665$11034 g$665$17721)))) '#f)) (g$665$11038 g$665$17715)))) '#f)) ((lambda (g$665$17731) (list g$665$17731)) (g$665$11034 g$665$17715)))) '#f)) (g$665$11034 g$665$17709))) (if (g$665$11030 g$665$17709) (list (begin 'i* '()) (begin 'e* '())) '#f))))) g$665$17707) (g$665$11038 g$665$17701)))) '#f)) ((lambda (g$665$17733) (list g$665$17733)) (g$665$11034 g$665$17701)))) '#f)) g$665$17675))) (car g$665$17665)))))) (g$665$17663 g$665$17661 '() '())))) (set! g$665$11433 (lambda (g$665$17735) ((lambda (g$665$17737) (begin (set! g$665$17737 (lambda (g$665$17739) ((lambda (g$665$17741) ((lambda (g$665$17743) (if (if g$665$17743 (begin '#f (apply (lambda (g$665$17745 g$665$17746) (if (for-all symbol? g$665$17745) (begin '#f (for-all (lambda (g$665$17749) (if (integer? g$665$17749) (begin '#f (exact? g$665$17749)) '#f)) g$665$17746)) '#f)) g$665$17743)) '#f) (apply (lambda (g$665$17751 g$665$17752) (values g$665$17751 g$665$17752)) g$665$17743) ((lambda (g$665$17755) ((lambda (g$665$17757) (if (if g$665$17757 (begin '#f (apply (lambda (g$665$17759) (for-all symbol? g$665$17759)) g$665$17757)) '#f) (apply (lambda (g$665$17761) (values g$665$17761 '())) g$665$17757) ((lambda (g$665$17763) ((lambda (g$665$17765) (if (if g$665$17765 (begin '#f (apply (lambda () '#t) g$665$17765)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"invalid library name" (g$665$11058 g$665$17739 '()))) g$665$17765) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17763 '())))) ((lambda (g$665$17767) '()) g$665$17763))) g$665$17755))) ((letrec ((g$665$17769 (lambda (g$665$17771) (if (g$665$11026 g$665$17771) ((lambda (g$665$17773) (if g$665$17773 (begin '#f ((lambda (g$665$17775) (if g$665$17775 (begin '#f (map cons g$665$17773 g$665$17775)) '#f)) (g$665$17769 (g$665$11038 g$665$17771)))) '#f)) ((lambda (g$665$17777) (list g$665$17777)) (g$665$11034 g$665$17771))) (if (g$665$11030 g$665$17771) (list (begin 'x* '())) '#f))))) g$665$17769) g$665$17755))) g$665$17741))) ((letrec ((g$665$17779 (lambda (g$665$17785) (if (g$665$11026 g$665$17785) ((lambda (g$665$17787) (if g$665$17787 (begin '#f ((lambda (g$665$17789) (if g$665$17789 (begin '#f (cons (map cons g$665$17787 (car g$665$17789)) (cdr g$665$17789))) '#f)) (g$665$17779 (g$665$11038 g$665$17785)))) '#f)) ((lambda (g$665$17791) (list g$665$17791)) (g$665$11034 g$665$17785))) ((lambda (g$665$17793) (if g$665$17793 (begin '#f (cons (list (begin 'x* '())) g$665$17793)) '#f)) ((lambda (g$665$17795) (if (g$665$11026 g$665$17795) (begin '#f ((lambda (g$665$17797) (if g$665$17797 (begin '#f ((lambda (g$665$17799) (if g$665$17799 (begin '#f (append g$665$17797 g$665$17799)) '#f)) ((lambda (g$665$17801) (if (equal? (g$665$11060 g$665$17801) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$17795)))) '#f)) ((letrec ((g$665$17803 (lambda (g$665$17805) (if (g$665$11026 g$665$17805) ((lambda (g$665$17807) (if g$665$17807 (begin '#f ((lambda (g$665$17809) (if g$665$17809 (begin '#f (map cons g$665$17807 g$665$17809)) '#f)) (g$665$17803 (g$665$11038 g$665$17805)))) '#f)) ((lambda (g$665$17811) (list g$665$17811)) (g$665$11034 g$665$17805))) (if (g$665$11030 g$665$17805) (list (begin 'v* '())) '#f))))) g$665$17803) (g$665$11034 g$665$17795)))) '#f)) g$665$17785)))))) (lambda (g$665$17781) ((lambda (g$665$17783) (if g$665$17783 (begin '#f (append (car g$665$17783) (cdr g$665$17783))) '#f)) (g$665$17779 g$665$17781)))) g$665$17741))) g$665$17739))) (call-with-values (lambda () (g$665$17737 g$665$17735)) (lambda (g$665$17813 g$665$17814) (begin (if (null? g$665$17813) (error 'expander '"~a ~s" '"empty library name" (g$665$11058 g$665$17735 '())) (void)) (values g$665$17813 g$665$17814)))))) '#f))) (set! g$665$11435 (lambda (g$665$17817) ((lambda (g$665$17819) ((lambda (g$665$17821) (if (if g$665$17821 (begin '#f (apply (lambda (g$665$17823 g$665$17824 g$665$17825 g$665$17826 g$665$17827 g$665$17828 g$665$17829) (if (eq? g$665$17825 'export) (if (eq? g$665$17827 'import) (begin '#f (eq? g$665$17823 'library)) '#f) '#f)) g$665$17821)) '#f) (apply (lambda (g$665$17837 g$665$17838 g$665$17839 g$665$17840 g$665$17841 g$665$17842 g$665$17843) (values g$665$17838 g$665$17840 g$665$17842 g$665$17843)) g$665$17821) ((lambda (g$665$17851) ((lambda (g$665$17853) (if (if g$665$17853 (begin '#f (apply (lambda () '#t) g$665$17853)) '#f) (apply (lambda () (error 'expander '"~a ~s" '"malformed library" (g$665$11058 g$665$17817 '()))) g$665$17853) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$17851 '())))) ((lambda (g$665$17855) '()) g$665$17851))) g$665$17819))) ((lambda (g$665$17857) (if (g$665$11026 g$665$17857) (begin '#f ((lambda (g$665$17859) (if g$665$17859 (begin '#f ((lambda (g$665$17861) (if g$665$17861 (begin '#f (append g$665$17859 g$665$17861)) '#f)) ((lambda (g$665$17863) (if (g$665$11026 g$665$17863) (begin '#f ((lambda (g$665$17865) (if g$665$17865 (begin '#f ((lambda (g$665$17867) (if g$665$17867 (begin '#f (append g$665$17865 g$665$17867)) '#f)) ((lambda (g$665$17869) (if (g$665$11026 g$665$17869) (begin '#f ((lambda (g$665$17871) (if g$665$17871 (begin '#f ((lambda (g$665$17873) (if g$665$17873 (begin '#f (append g$665$17871 g$665$17873)) '#f)) ((lambda (g$665$17875) (if (g$665$11026 g$665$17875) (begin '#f ((lambda (g$665$17877) (if g$665$17877 (begin '#f ((lambda (g$665$17879) (if g$665$17879 (begin '#f (append g$665$17877 g$665$17879)) '#f)) ((letrec ((g$665$17881 (lambda (g$665$17883) (if (g$665$11026 g$665$17883) ((lambda (g$665$17885) (if g$665$17885 (begin '#f ((lambda (g$665$17887) (if g$665$17887 (begin '#f (map cons g$665$17885 g$665$17887)) '#f)) (g$665$17881 (g$665$11038 g$665$17883)))) '#f)) ((lambda (g$665$17889) (list g$665$17889)) (g$665$11034 g$665$17883))) (if (g$665$11030 g$665$17883) (list (begin 'b* '())) '#f))))) g$665$17881) (g$665$11038 g$665$17875)))) '#f)) ((lambda (g$665$17891) (if (g$665$11026 g$665$17891) (begin '#f ((lambda (g$665$17893) (if g$665$17893 (begin '#f ((lambda (g$665$17895) (if g$665$17895 (begin '#f (append g$665$17893 g$665$17895)) '#f)) ((letrec ((g$665$17897 (lambda (g$665$17899) (if (g$665$11026 g$665$17899) ((lambda (g$665$17901) (if g$665$17901 (begin '#f ((lambda (g$665$17903) (if g$665$17903 (begin '#f (map cons g$665$17901 g$665$17903)) '#f)) (g$665$17897 (g$665$11038 g$665$17899)))) '#f)) ((lambda (g$665$17905) (list g$665$17905)) (g$665$11034 g$665$17899))) (if (g$665$11030 g$665$17899) (list (begin 'imp* '())) '#f))))) g$665$17897) (g$665$11038 g$665$17891)))) '#f)) ((lambda (g$665$17907) (list g$665$17907)) (g$665$11034 g$665$17891)))) '#f)) (g$665$11034 g$665$17875)))) '#f)) (g$665$11038 g$665$17869)))) '#f)) ((lambda (g$665$17909) (if (g$665$11026 g$665$17909) (begin '#f ((lambda (g$665$17911) (if g$665$17911 (begin '#f ((lambda (g$665$17913) (if g$665$17913 (begin '#f (append g$665$17911 g$665$17913)) '#f)) ((letrec ((g$665$17915 (lambda (g$665$17917) (if (g$665$11026 g$665$17917) ((lambda (g$665$17919) (if g$665$17919 (begin '#f ((lambda (g$665$17921) (if g$665$17921 (begin '#f (map cons g$665$17919 g$665$17921)) '#f)) (g$665$17915 (g$665$11038 g$665$17917)))) '#f)) ((lambda (g$665$17923) (list g$665$17923)) (g$665$11034 g$665$17917))) (if (g$665$11030 g$665$17917) (list (begin 'exp* '())) '#f))))) g$665$17915) (g$665$11038 g$665$17909)))) '#f)) ((lambda (g$665$17925) (list g$665$17925)) (g$665$11034 g$665$17909)))) '#f)) (g$665$11034 g$665$17869)))) '#f)) (g$665$11038 g$665$17863)))) '#f)) ((letrec ((g$665$17927 (lambda (g$665$17929) (if (g$665$11026 g$665$17929) ((lambda (g$665$17931) (if g$665$17931 (begin '#f ((lambda (g$665$17933) (if g$665$17933 (begin '#f (map cons g$665$17931 g$665$17933)) '#f)) (g$665$17927 (g$665$11038 g$665$17929)))) '#f)) ((lambda (g$665$17935) (list g$665$17935)) (g$665$11034 g$665$17929))) (if (g$665$11030 g$665$17929) (list (begin 'name* '())) '#f))))) g$665$17927) (g$665$11034 g$665$17863)))) '#f)) (g$665$11038 g$665$17857)))) '#f)) ((lambda (g$665$17937) (list g$665$17937)) (g$665$11034 g$665$17857)))) '#f)) g$665$17819))) g$665$17817))) (set! g$665$11437 (lambda (g$665$17939) ((lambda (g$665$17941 g$665$17943 g$665$17945 g$665$17947 g$665$17949 g$665$17951 g$665$17953) (begin (set! g$665$17941 (g$665$11441)) (set! g$665$17943 (lambda (g$665$18277 g$665$18278) ((lambda (g$665$18281) (begin (set! g$665$18281 (lambda (g$665$18283 g$665$18284) ((lambda (g$665$18287 g$665$18288) ((lambda (g$665$18291) (if g$665$18291 ((lambda (g$665$18293) (if (eq? (cdr g$665$18293) g$665$18288) g$665$18284 (error 'import '"two imports of ~s with different bindings" g$665$18287))) g$665$18291) (cons g$665$18283 g$665$18284))) (assq g$665$18287 g$665$18284))) (car g$665$18283) (cdr g$665$18283)))) (if (null? g$665$18277) g$665$18278 (g$665$18281 (car g$665$18277) (g$665$17943 (cdr g$665$18277) g$665$18278))))) '#f))) (set! g$665$17945 (lambda (g$665$18253 g$665$18254) ((lambda (g$665$18257) (begin (set! g$665$18257 (lambda (g$665$18259 g$665$18260) (if (null? g$665$18260) (error 'import '"cannot rename unbound identifier ~s" g$665$18259) (if (eq? g$665$18259 (caar g$665$18260)) (values (cdar g$665$18260) (cdr g$665$18260)) ((lambda (g$665$18263) (call-with-values (lambda () (g$665$18257 g$665$18259 (cdr g$665$18260))) (lambda (g$665$18265 g$665$18266) (values g$665$18265 (cons g$665$18263 g$665$18266))))) (car g$665$18260)))))) (if (null? g$665$18253) (values '() g$665$18254) (call-with-values (lambda () (g$665$18257 (car g$665$18253) g$665$18254)) (lambda (g$665$18269 g$665$18270) (call-with-values (lambda () (g$665$17945 (cdr g$665$18253) g$665$18270)) (lambda (g$665$18273 g$665$18274) (values (cons g$665$18269 g$665$18273) g$665$18274)))))))) '#f))) (set! g$665$17947 (lambda (g$665$18245 g$665$18246) (map (lambda (g$665$18249) ((lambda (g$665$18251) (if g$665$18251 (cdr g$665$18251) (error 'import '"cannot find identifier ~s" g$665$18249))) (assq g$665$18249 g$665$18246))) g$665$18245))) (set! g$665$17949 (lambda (g$665$18237 g$665$18238) (letrec ((g$665$18241 (lambda (g$665$18243) (if (null? g$665$18243) '() (if (memq (caar g$665$18243) g$665$18237) (g$665$18241 (cdr g$665$18243)) (cons (car g$665$18243) (g$665$18241 (cdr g$665$18243)))))))) (g$665$18241 g$665$18238)))) (set! g$665$17951 (lambda (g$665$18235) (if (null? g$665$18235) '() (if (memq (car g$665$18235) (cdr g$665$18235)) (g$665$17951 (cdr g$665$18235)) (cons (car g$665$18235) (g$665$17951 (cdr g$665$18235))))))) (set! g$665$17953 (lambda (g$665$17955) ((lambda (g$665$17957) ((lambda (g$665$17959) (if (if g$665$17959 (begin '#f (apply (lambda (g$665$17961 g$665$17962 g$665$17963 g$665$17964) (if (eq? g$665$17961 'rename) (if (for-all symbol? g$665$17963) (begin '#f (for-all symbol? g$665$17964)) '#f) '#f)) g$665$17959)) '#f) (apply (lambda (g$665$17969 g$665$17970 g$665$17971 g$665$17972) ((lambda (g$665$17977) ((lambda (g$665$17979) ((lambda (g$665$17981) (g$665$17943 (map cons g$665$17972 g$665$17979) g$665$17981)) (g$665$17949 g$665$17971 g$665$17977))) (g$665$17947 g$665$17971 g$665$17977))) (g$665$17953 g$665$17970))) g$665$17959) ((lambda (g$665$17983) ((lambda (g$665$17985) (if (if g$665$17985 (begin '#f (apply (lambda (g$665$17987 g$665$17988 g$665$17989) (if (eq? g$665$17987 'except) (begin '#f (for-all symbol? g$665$17989)) '#f)) g$665$17985)) '#f) (apply (lambda (g$665$17993 g$665$17994 g$665$17995) ((lambda (g$665$17999) (g$665$17949 g$665$17995 g$665$17999)) (g$665$17953 g$665$17994))) g$665$17985) ((lambda (g$665$18001) ((lambda (g$665$18003) (if (if g$665$18003 (begin '#f (apply (lambda (g$665$18005 g$665$18006 g$665$18007) (if (eq? g$665$18005 'only) (begin '#f (for-all symbol? g$665$18007)) '#f)) g$665$18003)) '#f) (apply (lambda (g$665$18011 g$665$18012 g$665$18013) ((lambda (g$665$18017) ((lambda (g$665$18019) ((lambda (g$665$18021) (map cons g$665$18019 g$665$18021)) (g$665$17947 g$665$18019 g$665$18017))) (g$665$17951 g$665$18013))) (g$665$17953 g$665$18012))) g$665$18003) ((lambda (g$665$18023) ((lambda (g$665$18025) (if (if g$665$18025 (begin '#f (apply (lambda (g$665$18027 g$665$18028 g$665$18029) (if (eq? g$665$18027 'prefix) (begin '#f (symbol? g$665$18029)) '#f)) g$665$18025)) '#f) (apply (lambda (g$665$18033 g$665$18034 g$665$18035) ((lambda (g$665$18039) (map (lambda (g$665$18041) (cons (string->symbol (string-append (symbol->string g$665$18035) (symbol->string (car g$665$18041)))) (cdr g$665$18041))) g$665$18039)) (g$665$17953 g$665$18034))) g$665$18025) ((lambda (g$665$18043) ((lambda (g$665$18045) (if (if g$665$18045 (begin '#f (apply (lambda (g$665$18047 g$665$18048) (eq? g$665$18047 'library)) g$665$18045)) '#f) (apply (lambda (g$665$18051 g$665$18052) ((lambda (g$665$18055) (begin (if g$665$18055 (void) (error 'import '"cannot find library satisfying ~s" g$665$18052)) (g$665$17941 g$665$18055) (g$665$10679 g$665$18055))) (g$665$10654 g$665$18052))) g$665$18045) ((lambda (g$665$18057) ((lambda (g$665$18059) (if (if g$665$18059 (begin '#f (apply (lambda (g$665$18061 g$665$18062) (not (memq g$665$18061 '(rename except only prefix library)))) g$665$18059)) '#f) (apply (lambda (g$665$18065 g$665$18066) (g$665$17953 (list 'library (cons g$665$18065 g$665$18066)))) g$665$18059) ((lambda (g$665$18069) ((lambda (g$665$18071) (if (if g$665$18071 (begin '#f (apply (lambda (g$665$18073) '#t) g$665$18071)) '#f) (apply (lambda (g$665$18075) (error 'import '"invalid import spec ~s" g$665$18075)) g$665$18071) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$18069 '())))) ((lambda (g$665$18077) (list g$665$18077)) g$665$18069))) g$665$18057))) ((lambda (g$665$18079) (if (g$665$11026 g$665$18079) (begin '#f ((lambda (g$665$18081) (if g$665$18081 (begin '#f ((lambda (g$665$18083) (if g$665$18083 (begin '#f (append g$665$18081 g$665$18083)) '#f)) ((letrec ((g$665$18085 (lambda (g$665$18087) (if (g$665$11026 g$665$18087) ((lambda (g$665$18089) (if g$665$18089 (begin '#f ((lambda (g$665$18091) (if g$665$18091 (begin '#f (map cons g$665$18089 g$665$18091)) '#f)) (g$665$18085 (g$665$11038 g$665$18087)))) '#f)) ((lambda (g$665$18093) (list g$665$18093)) (g$665$11034 g$665$18087))) (if (g$665$11030 g$665$18087) (list (begin 'x* '())) '#f))))) g$665$18085) (g$665$11038 g$665$18079)))) '#f)) ((lambda (g$665$18095) (list g$665$18095)) (g$665$11034 g$665$18079)))) '#f)) g$665$18057))) g$665$18043))) ((lambda (g$665$18097) (if (g$665$11026 g$665$18097) (begin '#f ((lambda (g$665$18099) (if g$665$18099 (begin '#f ((lambda (g$665$18101) (if g$665$18101 (begin '#f (append g$665$18099 g$665$18101)) '#f)) ((lambda (g$665$18103) (if (g$665$11026 g$665$18103) (begin '#f ((lambda (g$665$18105) (if g$665$18105 (begin '#f ((lambda (g$665$18107) (if g$665$18107 (begin '#f (append g$665$18105 g$665$18107)) '#f)) ((lambda (g$665$18109) (if (equal? (g$665$11060 g$665$18109) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$18103)))) '#f)) ((lambda (g$665$18111) (list g$665$18111)) (g$665$11034 g$665$18103)))) '#f)) (g$665$11038 g$665$18097)))) '#f)) ((lambda (g$665$18113) (list g$665$18113)) (g$665$11034 g$665$18097)))) '#f)) g$665$18043))) g$665$18023))) ((lambda (g$665$18115) (if (g$665$11026 g$665$18115) (begin '#f ((lambda (g$665$18117) (if g$665$18117 (begin '#f ((lambda (g$665$18119) (if g$665$18119 (begin '#f (append g$665$18117 g$665$18119)) '#f)) ((lambda (g$665$18121) (if (g$665$11026 g$665$18121) (begin '#f ((lambda (g$665$18123) (if g$665$18123 (begin '#f ((lambda (g$665$18125) (if g$665$18125 (begin '#f (append g$665$18123 g$665$18125)) '#f)) ((lambda (g$665$18127) (if (g$665$11026 g$665$18127) (begin '#f ((lambda (g$665$18129) (if g$665$18129 (begin '#f ((lambda (g$665$18131) (if g$665$18131 (begin '#f (append g$665$18129 g$665$18131)) '#f)) ((lambda (g$665$18133) (if (equal? (g$665$11060 g$665$18133) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$18127)))) '#f)) ((lambda (g$665$18135) (list g$665$18135)) (g$665$11034 g$665$18127)))) '#f)) (g$665$11038 g$665$18121)))) '#f)) ((lambda (g$665$18137) (list g$665$18137)) (g$665$11034 g$665$18121)))) '#f)) (g$665$11038 g$665$18115)))) '#f)) ((lambda (g$665$18139) (list g$665$18139)) (g$665$11034 g$665$18115)))) '#f)) g$665$18023))) g$665$18001))) ((lambda (g$665$18141) (if (g$665$11026 g$665$18141) (begin '#f ((lambda (g$665$18143) (if g$665$18143 (begin '#f ((lambda (g$665$18145) (if g$665$18145 (begin '#f (append g$665$18143 g$665$18145)) '#f)) ((lambda (g$665$18147) (if (g$665$11026 g$665$18147) (begin '#f ((lambda (g$665$18149) (if g$665$18149 (begin '#f ((lambda (g$665$18151) (if g$665$18151 (begin '#f (append g$665$18149 g$665$18151)) '#f)) ((letrec ((g$665$18153 (lambda (g$665$18155) (if (g$665$11026 g$665$18155) ((lambda (g$665$18157) (if g$665$18157 (begin '#f ((lambda (g$665$18159) (if g$665$18159 (begin '#f (map cons g$665$18157 g$665$18159)) '#f)) (g$665$18153 (g$665$11038 g$665$18155)))) '#f)) ((lambda (g$665$18161) (list g$665$18161)) (g$665$11034 g$665$18155))) (if (g$665$11030 g$665$18155) (list (begin 'sym* '())) '#f))))) g$665$18153) (g$665$11038 g$665$18147)))) '#f)) ((lambda (g$665$18163) (list g$665$18163)) (g$665$11034 g$665$18147)))) '#f)) (g$665$11038 g$665$18141)))) '#f)) ((lambda (g$665$18165) (list g$665$18165)) (g$665$11034 g$665$18141)))) '#f)) g$665$18001))) g$665$17983))) ((lambda (g$665$18167) (if (g$665$11026 g$665$18167) (begin '#f ((lambda (g$665$18169) (if g$665$18169 (begin '#f ((lambda (g$665$18171) (if g$665$18171 (begin '#f (append g$665$18169 g$665$18171)) '#f)) ((lambda (g$665$18173) (if (g$665$11026 g$665$18173) (begin '#f ((lambda (g$665$18175) (if g$665$18175 (begin '#f ((lambda (g$665$18177) (if g$665$18177 (begin '#f (append g$665$18175 g$665$18177)) '#f)) ((letrec ((g$665$18179 (lambda (g$665$18181) (if (g$665$11026 g$665$18181) ((lambda (g$665$18183) (if g$665$18183 (begin '#f ((lambda (g$665$18185) (if g$665$18185 (begin '#f (map cons g$665$18183 g$665$18185)) '#f)) (g$665$18179 (g$665$11038 g$665$18181)))) '#f)) ((lambda (g$665$18187) (list g$665$18187)) (g$665$11034 g$665$18181))) (if (g$665$11030 g$665$18181) (list (begin 'sym* '())) '#f))))) g$665$18179) (g$665$11038 g$665$18173)))) '#f)) ((lambda (g$665$18189) (list g$665$18189)) (g$665$11034 g$665$18173)))) '#f)) (g$665$11038 g$665$18167)))) '#f)) ((lambda (g$665$18191) (list g$665$18191)) (g$665$11034 g$665$18167)))) '#f)) g$665$17983))) g$665$17957))) ((lambda (g$665$18193) (if (g$665$11026 g$665$18193) (begin '#f ((lambda (g$665$18195) (if g$665$18195 (begin '#f ((lambda (g$665$18197) (if g$665$18197 (begin '#f (append g$665$18195 g$665$18197)) '#f)) ((lambda (g$665$18199) (if (g$665$11026 g$665$18199) (begin '#f ((lambda (g$665$18201) (if g$665$18201 (begin '#f ((lambda (g$665$18203) (if g$665$18203 (begin '#f (append g$665$18201 g$665$18203)) '#f)) ((letrec ((g$665$18205 (lambda (g$665$18207) (if (g$665$11026 g$665$18207) ((lambda (g$665$18209) (if g$665$18209 (begin '#f ((lambda (g$665$18211) (if g$665$18211 (begin '#f (map cons g$665$18209 g$665$18211)) '#f)) (g$665$18205 (g$665$11038 g$665$18207)))) '#f)) ((lambda (g$665$18213) (if (g$665$11026 g$665$18213) (begin '#f ((lambda (g$665$18215) (if g$665$18215 (begin '#f ((lambda (g$665$18217) (if g$665$18217 (begin '#f (append g$665$18215 g$665$18217)) '#f)) ((lambda (g$665$18219) (if (g$665$11026 g$665$18219) (begin '#f ((lambda (g$665$18221) (if g$665$18221 (begin '#f ((lambda (g$665$18223) (if g$665$18223 (begin '#f (append g$665$18221 g$665$18223)) '#f)) ((lambda (g$665$18225) (if (equal? (g$665$11060 g$665$18225) '()) (begin '#f '()) '#f)) (g$665$11038 g$665$18219)))) '#f)) ((lambda (g$665$18227) (list g$665$18227)) (g$665$11034 g$665$18219)))) '#f)) (g$665$11038 g$665$18213)))) '#f)) ((lambda (g$665$18229) (list g$665$18229)) (g$665$11034 g$665$18213)))) '#f)) (g$665$11034 g$665$18207))) (if (g$665$11030 g$665$18207) (list (begin 'old* '()) (begin 'new* '())) '#f))))) g$665$18205) (g$665$11038 g$665$18199)))) '#f)) ((lambda (g$665$18231) (list g$665$18231)) (g$665$11034 g$665$18199)))) '#f)) (g$665$11038 g$665$18193)))) '#f)) ((lambda (g$665$18233) (list g$665$18233)) (g$665$11034 g$665$18193)))) '#f)) g$665$17957))) g$665$17955))) (letrec ((g$665$18295 (lambda (g$665$18297 g$665$18298) (if (null? g$665$18297) (values g$665$18298 (g$665$17941)) (g$665$18295 (cdr g$665$18297) (g$665$17943 (g$665$17953 (car g$665$18297)) g$665$18298)))))) (g$665$18295 g$665$17939 '())))) '#f '#f '#f '#f '#f '#f '#f))) (set! g$665$11439 (lambda (g$665$18301) ((lambda (g$665$18303) (begin (for-each (lambda (g$665$18305) ((lambda (g$665$18307 g$665$18308) (g$665$10979 g$665$18303 (g$665$11016 g$665$18307 g$665$10946 '()) g$665$18308)) (car g$665$18305) (cdr g$665$18305))) g$665$18301) g$665$18303)) (g$665$10977)))) (set! g$665$11441 (lambda () ((lambda (g$665$18311) (lambda g$665$18315 ((lambda (g$665$18316) (if (= g$665$18316 '0) (apply (lambda () g$665$18311) g$665$18315) (if (= g$665$18316 '1) (apply (lambda (g$665$18313) (set! g$665$18311 (g$665$10939 g$665$18313 g$665$18311))) g$665$18315) (error 'apply '"invalid arg count")))) (length g$665$18315)))) '()))) (set! g$665$11443 (g$665$10133 (lambda g$665$18317 (error 'inv-collector '"not initialized")) (lambda (g$665$18319) (begin (if (procedure? g$665$18319) (void) (error 'inv-collector '"~s is not a procedure" g$665$18319)) g$665$18319)))) (set! g$665$11445 (g$665$10133 (lambda g$665$18321 (error 'vis-collector '"not initialized")) (lambda (g$665$18323) (begin (if (procedure? g$665$18323) (void) (error 'vis-collector '"~s is not a procedure" g$665$18323)) g$665$18323)))) (set! g$665$11447 (lambda (g$665$18325 g$665$18326 g$665$18327) (call-with-values (lambda () (g$665$11417 g$665$18325 '() '() '() '() '() '() g$665$18326 g$665$18327)) (lambda (g$665$18331 g$665$18332 g$665$18333 g$665$18334 g$665$18335 g$665$18336 g$665$18337) (values (append (apply append (reverse g$665$18336)) g$665$18331) g$665$18332 g$665$18333 (reverse g$665$18334) (reverse g$665$18335)))))) (set! g$665$11449 (lambda (g$665$18345 g$665$18346 g$665$18347) (call-with-values (lambda () (g$665$11431 g$665$18345)) (lambda (g$665$18351 g$665$18352) (call-with-values (lambda () (g$665$11437 g$665$18346)) (lambda (g$665$18353 g$665$18354) ((lambda (g$665$18359) ((lambda (g$665$18361 g$665$18362 g$665$18363) ((lambda (g$665$18371 g$665$18372 g$665$18373 g$665$18374) ((lambda (g$665$18379) (dynamic-wind g$665$18379 (lambda () (call-with-values (lambda () (g$665$11447 g$665$18361 g$665$18359 '#f)) (lambda (g$665$18381 g$665$18382 g$665$18383 g$665$18384 g$665$18385) (begin (g$665$10981 g$665$18359) ((lambda (g$665$18391 g$665$18392) (begin (g$665$10983 g$665$18359) ((lambda (g$665$18395) (call-with-values (lambda () (g$665$11492 g$665$18382)) (lambda (g$665$18397 g$665$18398 g$665$18399) ((lambda (g$665$18403 g$665$18404) (values g$665$18354 (g$665$18362) (g$665$18363) (g$665$10923 '#f (append g$665$18404 (list g$665$18403))) g$665$18399 g$665$18395 g$665$18397)) (g$665$10920 '#f g$665$18384 g$665$18391 (g$665$11488 g$665$18398 g$665$18392)) (map g$665$10937 (map cdr g$665$18398)))))) (g$665$11490 g$665$18351 g$665$18352 g$665$18359)))) (g$665$11405 g$665$18385 g$665$18382 g$665$18383) (g$665$11391 g$665$18381 g$665$18382 g$665$18383)))))) g$665$18379)) (lambda () (begin ((lambda (g$665$18407) (begin (g$665$18371 g$665$18373) (set! g$665$18373 g$665$18407))) (g$665$18371)) ((lambda (g$665$18409) (begin (g$665$18372 g$665$18374) (set! g$665$18374 g$665$18409))) (g$665$18372)))))) g$665$11443 g$665$11445 g$665$18362 g$665$18363)) (map (lambda (g$665$18411) (g$665$11016 g$665$18411 g$665$10946 (list g$665$18359))) g$665$18347) (g$665$11441) (g$665$11441))) (g$665$11439 g$665$18353)))))))) (set! g$665$11451 (lambda (g$665$18413) (call-with-values (lambda () (g$665$11435 g$665$18413)) (lambda (g$665$18415 g$665$18416 g$665$18417 g$665$18418) (call-with-values (lambda () (g$665$11433 g$665$18415)) (lambda (g$665$18423 g$665$18424) (call-with-values (lambda () (g$665$11449 g$665$18416 g$665$18417 g$665$18418)) (lambda (g$665$18427 g$665$18428 g$665$18429 g$665$18430 g$665$18431 g$665$18432 g$665$18433) (values g$665$18423 g$665$18427 g$665$18428 g$665$18429 g$665$18430 g$665$18431 g$665$18432 g$665$18433))))))))) (set! g$665$11453 (lambda (g$665$18441) ((lambda (g$665$18443) ((lambda (g$665$18445) (if (if g$665$18445 (begin '#f (apply (lambda (g$665$18447 g$665$18448 g$665$18449) (eq? g$665$18447 'import)) g$665$18445)) '#f) (apply (lambda (g$665$18453 g$665$18454 g$665$18455) (values g$665$18454 g$665$18455)) g$665$18445) ((lambda (g$665$18459) ((lambda (g$665$18461) (if (if g$665$18461 (begin '#f (apply (lambda () '#t) g$665$18461)) '#f) (apply (lambda () (error '"invalid syntax of top-level program")) g$665$18461) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$18459 '())))) ((lambda (g$665$18463) '()) g$665$18459))) g$665$18443))) ((lambda (g$665$18465) (if (g$665$11026 g$665$18465) (begin '#f ((lambda (g$665$18467) (if g$665$18467 (begin '#f ((lambda (g$665$18469) (if g$665$18469 (begin '#f (append g$665$18467 g$665$18469)) '#f)) ((letrec ((g$665$18471 (lambda (g$665$18473) (if (g$665$11026 g$665$18473) ((lambda (g$665$18475) (if g$665$18475 (begin '#f ((lambda (g$665$18477) (if g$665$18477 (begin '#f (map cons g$665$18475 g$665$18477)) '#f)) (g$665$18471 (g$665$11038 g$665$18473)))) '#f)) ((lambda (g$665$18479) (list g$665$18479)) (g$665$11034 g$665$18473))) (if (g$665$11030 g$665$18473) (list (begin 'b* '())) '#f))))) g$665$18471) (g$665$11038 g$665$18465)))) '#f)) ((lambda (g$665$18481) (if (g$665$11026 g$665$18481) (begin '#f ((lambda (g$665$18483) (if g$665$18483 (begin '#f ((lambda (g$665$18485) (if g$665$18485 (begin '#f (append g$665$18483 g$665$18485)) '#f)) ((letrec ((g$665$18487 (lambda (g$665$18489) (if (g$665$11026 g$665$18489) ((lambda (g$665$18491) (if g$665$18491 (begin '#f ((lambda (g$665$18493) (if g$665$18493 (begin '#f (map cons g$665$18491 g$665$18493)) '#f)) (g$665$18487 (g$665$11038 g$665$18489)))) '#f)) ((lambda (g$665$18495) (list g$665$18495)) (g$665$11034 g$665$18489))) (if (g$665$11030 g$665$18489) (list (begin 'imp* '())) '#f))))) g$665$18487) (g$665$11038 g$665$18481)))) '#f)) ((lambda (g$665$18497) (list g$665$18497)) (g$665$11034 g$665$18481)))) '#f)) (g$665$11034 g$665$18465)))) '#f)) g$665$18443))) g$665$18441))) (set! g$665$11455 (lambda (g$665$18499) (call-with-values (lambda () (g$665$11453 g$665$18499)) (lambda (g$665$18501 g$665$18502) (call-with-values (lambda () (g$665$11449 '() g$665$18501 g$665$18502)) (lambda (g$665$18505 g$665$18506 g$665$18507 g$665$18508 g$665$18509 g$665$18510 g$665$18511) (values g$665$18506 g$665$18508))))))) (set! g$665$11458 (lambda (g$665$18519 g$665$18520) (vector 'g$665$11457 g$665$18519 g$665$18520))) (set! g$665$11460 (lambda (g$665$18523) (if (vector? g$665$18523) (if (= (vector-length g$665$18523) (+ '1 (length '(subst imp*)))) (begin '#f (eq? (vector-ref g$665$18523 '0) 'g$665$11457)) '#f) '#f))) (set! g$665$11462 (lambda (g$665$18525) (if (g$665$11460 g$665$18525) (vector-ref g$665$18525 '1) (error 'env-subst '"~s is not of type ~s" g$665$18525 'env)))) (set! g$665$11464 (lambda (g$665$18527) (if (g$665$11460 g$665$18527) (vector-ref g$665$18527 '2) (error 'env-imp* '"~s is not of type ~s" g$665$18527 'env)))) (set! g$665$11466 (lambda (g$665$18529 g$665$18530) (if (g$665$11460 g$665$18529) (vector-set! g$665$18529 '1 g$665$18530) (error 'set-env-subst! '"~s is not of type ~s" g$665$18529 'env)))) (set! g$665$11468 (lambda (g$665$18533 g$665$18534) (if (g$665$11460 g$665$18533) (vector-set! g$665$18533 '2 g$665$18534) (error 'set-env-imp*! '"~s is not of type ~s" g$665$18533 'env)))) (set! g$665$11470 (lambda (g$665$18537) (g$665$11460 g$665$18537))) (set! g$665$11472 (lambda g$665$18539 (call-with-values (lambda () (g$665$11437 g$665$18539)) (lambda (g$665$18541 g$665$18542) (g$665$11458 g$665$18541 g$665$18542))))) (set! g$665$11474 (lambda (g$665$18545) (begin (if (eqv? g$665$18545 '5) (void) (error 'null-environment '"~s is not 5" g$665$18545)) (g$665$11472 '(psyntax null-environment-5))))) (set! g$665$11476 (lambda (g$665$18547) (begin (if (eqv? g$665$18547 '5) (void) (error 'scheme-report-environment '"~s is not 5" g$665$18547)) (g$665$11472 '(psyntax scheme-report-environment-5))))) (set! g$665$11478 (lambda (g$665$18549 g$665$18550) (begin (if (g$665$11460 g$665$18550) (void) (error 'expand '"~s is not an environment" g$665$18550)) ((lambda (g$665$18553) ((lambda (g$665$18555) ((lambda (g$665$18557 g$665$18558 g$665$18559) ((lambda (g$665$18563) (begin (g$665$10981 g$665$18555) (values g$665$18563 (g$665$18558)))) ((lambda (g$665$18569 g$665$18570 g$665$18571 g$665$18572) ((lambda (g$665$18577) (dynamic-wind g$665$18577 (lambda () (g$665$11395 g$665$18557 '() '())) g$665$18577)) (lambda () (begin ((lambda (g$665$18579) (begin (g$665$18569 g$665$18571) (set! g$665$18571 g$665$18579))) (g$665$18569)) ((lambda (g$665$18581) (begin (g$665$18570 g$665$18572) (set! g$665$18572 g$665$18581))) (g$665$18570)))))) g$665$11443 g$665$11445 g$665$18558 g$665$18559))) (g$665$11016 g$665$18549 g$665$10946 (list g$665$18555)) (g$665$11441) (g$665$11441))) (g$665$11439 g$665$18553))) (g$665$11462 g$665$18550))))) (set! g$665$11480 (lambda (g$665$18583 g$665$18584) (begin (if (g$665$11460 g$665$18584) (void) (error 'eval '"~s is not an environment" g$665$18584)) (call-with-values (lambda () (g$665$11478 g$665$18583 g$665$18584)) (lambda (g$665$18587 g$665$18588) (begin (for-each g$665$10645 g$665$18588) (eval-core (g$665$10207 g$665$18587)))))))) (set! g$665$11482 (lambda (g$665$18591) ((lambda (g$665$18593 g$665$18595) (begin (set! g$665$18593 (lambda (g$665$18605) (if (null? g$665$18605) (g$665$10922) (g$665$10923 '#f (map (lambda (g$665$18607) ((lambda (g$665$18609 g$665$18610) (list 'set! g$665$18609 g$665$18610)) (car g$665$18607) (cddr g$665$18607))) g$665$18605))))) (set! g$665$18595 (lambda (g$665$18597) (for-each (lambda (g$665$18599) ((lambda (g$665$18601 g$665$18602) (set-symbol-value! g$665$18601 g$665$18602)) (car g$665$18599) (cadr g$665$18599))) g$665$18597))) (call-with-values (lambda () (g$665$11451 g$665$18591)) (lambda (g$665$18613 g$665$18614 g$665$18615 g$665$18616 g$665$18617 g$665$18618 g$665$18619 g$665$18620) ((lambda (g$665$18629 g$665$18630 g$665$18631 g$665$18632 g$665$18633 g$665$18634) (begin (g$665$10649 g$665$18629 g$665$18630 g$665$18631 g$665$18632 g$665$18633 g$665$18634 g$665$18619 g$665$18620 (lambda () (g$665$18595 g$665$18618)) (lambda () (eval-core (g$665$10207 g$665$18617))) '#t) (values g$665$18617 (g$665$18593 g$665$18618) g$665$18619 g$665$18620))) (gensym) g$665$18613 '() (map g$665$10641 g$665$18614) (map g$665$10641 g$665$18616) (map g$665$10641 g$665$18615)))))) '#f '#f))) (set! g$665$11484 (lambda (g$665$18641) (call-with-values (lambda () (g$665$11482 g$665$18641)) (lambda (g$665$18643 g$665$18644 g$665$18645 g$665$18646) (values g$665$18643 g$665$18645 g$665$18646))))) (set! g$665$11486 (lambda (g$665$18651 g$665$18652 g$665$18653) (if (null? g$665$18652) g$665$18653 (g$665$11486 g$665$18651 (cdr g$665$18652) (cons (g$665$18651 (car g$665$18652)) g$665$18653))))) (set! g$665$11488 (lambda (g$665$18657 g$665$18658) (g$665$10923 '#f (cons (g$665$10922) (g$665$11486 (lambda (g$665$18661) (list 'set! (cdr g$665$18661) (car g$665$18661))) g$665$18657 g$665$18658))))) (set! g$665$11490 (lambda (g$665$18663 g$665$18664 g$665$18665) (map (lambda (g$665$18669 g$665$18670) ((lambda (g$665$18673) ((lambda (g$665$18675) ((lambda () (begin (if g$665$18675 (void) (error 'expander '"~a ~s" '"cannot export unbound identifier" (g$665$11058 g$665$18673 '()))) (cons g$665$18670 g$665$18675))))) (g$665$11062 g$665$18673))) (g$665$11016 g$665$18669 g$665$10946 (list g$665$18665)))) g$665$18663 g$665$18664))) (set! g$665$11492 (lambda (g$665$18677) (letrec ((g$665$18679 (lambda (g$665$18681 g$665$18682 g$665$18683 g$665$18684) (if (null? g$665$18681) (values g$665$18682 g$665$18683 g$665$18684) ((lambda (g$665$18689) ((lambda (g$665$18691 g$665$18692) ((lambda (g$665$18695) (if (memv g$665$18695 '(lexical)) ((lambda (g$665$18700) (g$665$18679 (cdr g$665$18681) (cons (cons* g$665$18691 'global g$665$18700) g$665$18682) (cons (cons (g$665$11070 g$665$18692) g$665$18700) g$665$18683) g$665$18684)) (g$665$10952 (g$665$11070 g$665$18692))) (if (memv g$665$18695 '(local-macro)) ((lambda (g$665$18698) (g$665$18679 (cdr g$665$18681) (cons (cons* g$665$18691 'global-macro g$665$18698) g$665$18682) g$665$18683 (cons (cons g$665$18698 (g$665$11070 g$665$18692)) g$665$18684))) (gensym)) (if (memv g$665$18695 '(local-macro!)) ((lambda (g$665$18696) (g$665$18679 (cdr g$665$18681) (cons (cons* g$665$18691 'global-macro! g$665$18696) g$665$18682) g$665$18683 (cons (cons g$665$18696 (g$665$11070 g$665$18692)) g$665$18684))) (gensym)) (if (memv g$665$18695 '($rtd $module)) (g$665$18679 (cdr g$665$18681) (cons g$665$18689 g$665$18682) g$665$18683 g$665$18684) (error 'expander '"BUG: do not know how to export ~s ~s" (g$665$11068 g$665$18692) (g$665$11070 g$665$18692))))))) (g$665$11068 g$665$18692))) (car g$665$18689) (cdr g$665$18689))) (car g$665$18681)))))) (g$665$18679 g$665$18677 '() '() '())))) (set! g$665$11494 (lambda (g$665$18702) ((lambda (g$665$18704) ((lambda (g$665$18706) (if (if g$665$18706 (begin '#f (apply (lambda (g$665$18708) '#t) g$665$18706)) '#f) (apply (lambda (g$665$18710) (map (lambda (g$665$18712) (g$665$10990 (gensym 't) g$665$10946 '())) g$665$18710)) g$665$18706) ((lambda (g$665$18714) ((lambda (g$665$18716) (if (if g$665$18716 (begin '#f (apply (lambda () '#t) g$665$18716)) '#f) (apply (lambda () (error 'generate-temporaries '"~s is not a list")) g$665$18716) (error 'expander '"~a ~s" '"invalid syntax" (g$665$11058 g$665$18714 '())))) ((lambda (g$665$18718) '()) g$665$18714))) g$665$18704))) ((letrec ((g$665$18720 (lambda (g$665$18722) (if (g$665$11026 g$665$18722) ((lambda (g$665$18724) (if g$665$18724 (begin '#f ((lambda (g$665$18726) (if g$665$18726 (begin '#f (map cons g$665$18724 g$665$18726)) '#f)) (g$665$18720 (g$665$11038 g$665$18722)))) '#f)) ((lambda (g$665$18728) (list g$665$18728)) (g$665$11034 g$665$18722))) (if (g$665$11030 g$665$18722) (list (begin 'ls '())) '#f))))) g$665$18720) g$665$18704))) g$665$18702))) (set! g$665$11496 (lambda (g$665$18730 g$665$18731) (if (g$665$11040 g$665$18730) (if (g$665$11040 g$665$18731) (g$665$11048 g$665$18730 g$665$18731) (error 'free-identifier=? '"~s is not an identifier" g$665$18731)) (error 'free-identifier=? '"~s is not an identifier" g$665$18730)))) (set! g$665$11498 (lambda (g$665$18734 g$665$18735) (if (g$665$11040 g$665$18734) (if (g$665$11040 g$665$18735) (g$665$11046 g$665$18734 g$665$18735) (error 'bound-identifier=? '"~s is not an identifier" g$665$18735)) (error 'bound-identifier=? '"~s is not an identifier" g$665$18734)))) (set! g$665$11500 (lambda (g$665$18738 . g$665$18740) (begin (if (for-all string? g$665$18740) (void) (error 'syntax-error '"invalid argument ~s" g$665$18740)) (if (null? g$665$18740) (error 'expander '"invalid syntax ~s" (g$665$11060 g$665$18738)) (error 'expander '"~s ~a" (g$665$11060 g$665$18738) (apply string-append g$665$18740)))))) (set! g$665$11502 (lambda (g$665$18742) (g$665$11040 g$665$18742))) (set! g$665$11504 (lambda (g$665$18744 g$665$18745) (if (g$665$11040 g$665$18744) (g$665$11006 g$665$18744 g$665$18745) (error 'datum->syntax '"~s is not an identifier" g$665$18744)))) (set! g$665$11506 (lambda (g$665$18748) (g$665$11060 g$665$18748))) (set! g$665$11508 (lambda (g$665$18750) (call-with-values (lambda () (g$665$11455 g$665$18750)) (lambda (g$665$18752 g$665$18753) (begin (for-each g$665$10645 g$665$18752) (eval-core (g$665$10207 g$665$18753))))))) (set! g$665$11510 (g$665$10133 '#f)) (set! g$665$11512 (lambda (g$665$18756) ((lambda (g$665$18758) (if g$665$18758 ((lambda (g$665$18760) ((lambda (g$665$18762) (if g$665$18762 (cdr g$665$18762) ((lambda (g$665$18764) ((lambda (g$665$18766) (if g$665$18766 ((lambda (g$665$18768) ((lambda (g$665$18770) (begin (g$665$10648 g$665$18760 g$665$18756 g$665$18770) g$665$18770)) (cdr g$665$18768))) g$665$18766) ((lambda (g$665$18772) (begin (g$665$10648 g$665$18760 g$665$18756 g$665$18772) (g$665$10647 g$665$18760 g$665$18772 (cons 'global (cons g$665$18760 (g$665$10952 g$665$18756)))) g$665$18772)) (g$665$10954 g$665$18756)))) (assq g$665$18756 g$665$18764))) (if (g$665$10653 '(ikarus)) (g$665$10679 (g$665$10654 '(ikarus))) '())))) (assq g$665$18756 (g$665$10679 g$665$18760)))) g$665$18758) '#f)) (g$665$11510)))) (set! g$665$11514 (lambda (g$665$18774) ((lambda (g$665$18776) (begin (set! g$665$18776 (lambda (g$665$18778) ((lambda (g$665$18780 g$665$18781) (if g$665$18780 (set-symbol-value! g$665$18780 (eval-core (g$665$10207 g$665$18781))) (eval-core (g$665$10207 g$665$18781)))) (car g$665$18778) (cdr g$665$18778)))) ((lambda (g$665$18784 g$665$18785) ((lambda (g$665$18788) (begin (for-each g$665$10645 (g$665$18784)) (if (null? g$665$18788) (void) (begin (for-each g$665$18776 (reverse (cdr g$665$18788))) (g$665$18776 (car g$665$18788)))))) ((lambda (g$665$18796 g$665$18797 g$665$18798 g$665$18799 g$665$18800 g$665$18801) ((lambda (g$665$18808) (dynamic-wind g$665$18808 (lambda () (g$665$11427 (list (g$665$11016 g$665$18774 g$665$10946 '())) '())) g$665$18808)) (lambda () (begin ((lambda (g$665$18810) (begin (g$665$18796 g$665$18799) (set! g$665$18799 g$665$18810))) (g$665$18796)) ((lambda (g$665$18812) (begin (g$665$18797 g$665$18800) (set! g$665$18800 g$665$18812))) (g$665$18797)) ((lambda (g$665$18814) (begin (g$665$18798 g$665$18801) (set! g$665$18801 g$665$18814))) (g$665$18798)))))) g$665$11443 g$665$11445 g$665$11510 g$665$18784 g$665$18785 (g$665$10654 '(ikarus interaction))))) (g$665$11441) (g$665$11441)))) '#f))) (begin (set! g$665$18816 g$665$11514) (set! g$665$18817 g$665$11512) (set! g$665$18818 g$665$11510) (set! g$665$18819 g$665$11508) (set! g$665$18820 g$665$11506) (set! g$665$18821 g$665$11504) (set! g$665$18822 g$665$11502) (set! g$665$18823 g$665$11500) (set! g$665$18824 g$665$11498) (set! g$665$18825 g$665$11496) (set! g$665$18826 g$665$11494) (set! g$665$18827 g$665$11492) (set! g$665$18828 g$665$11490) (set! g$665$18829 g$665$11488) (set! g$665$18830 g$665$11486) (set! g$665$18831 g$665$11484) (set! g$665$18832 g$665$11482) (set! g$665$18833 g$665$11480) (set! g$665$18834 g$665$11478) (set! g$665$18835 g$665$11476) (set! g$665$18836 g$665$11474) (set! g$665$18837 g$665$11472) (set! g$665$18838 g$665$11470) (set! g$665$18839 g$665$11468) (set! g$665$18840 g$665$11466) (set! g$665$18841 g$665$11464) (set! g$665$18842 g$665$11462) (set! g$665$18843 g$665$11460) (set! g$665$18844 g$665$11458) (set! g$665$18845 g$665$11455) (set! g$665$18846 g$665$11453) (set! g$665$18847 g$665$11451) (set! g$665$18848 g$665$11449) (set! g$665$18849 g$665$11447) (set! g$665$18850 g$665$11445) (set! g$665$18851 g$665$11443) (set! g$665$18852 g$665$11441) (set! g$665$18853 g$665$11439) (set! g$665$18854 g$665$11437) (set! g$665$18855 g$665$11435) (set! g$665$18856 g$665$11433) (set! g$665$18857 g$665$11431) (set! g$665$18858 g$665$11429) (set! g$665$18859 g$665$11427) (set! g$665$18860 g$665$11425) (set! g$665$18861 g$665$11423) (set! g$665$18862 g$665$11421) (set! g$665$18863 g$665$11419) (set! g$665$18864 g$665$11417) (set! g$665$18865 g$665$11415) (set! g$665$18866 g$665$11413) (set! g$665$18867 g$665$11411) (set! g$665$18868 g$665$11409) (set! g$665$18869 g$665$11407) (set! g$665$18870 g$665$11405) (set! g$665$18871 g$665$11403) (set! g$665$18872 g$665$11401) (set! g$665$18873 g$665$11399) (set! g$665$18874 g$665$11397) (set! g$665$18875 g$665$11395) (set! g$665$18876 g$665$11393) (set! g$665$18877 g$665$11391) (set! g$665$18878 g$665$11389) (set! g$665$18879 g$665$11387) (set! g$665$18880 g$665$11385) (set! g$665$18881 g$665$11383) (set! g$665$18882 g$665$11381) (set! g$665$18883 g$665$11379) (set! g$665$18884 g$665$11377) (set! g$665$18885 g$665$11375) (set! g$665$18886 g$665$11373) (set! g$665$18887 g$665$11371) (set! g$665$18888 g$665$11369) (set! g$665$18889 g$665$11367) (set! g$665$18890 g$665$11365) (set! g$665$18891 g$665$11363) (set! g$665$18892 g$665$11361) (set! g$665$18893 g$665$11359) (set! g$665$18894 g$665$11357) (set! g$665$18895 g$665$11355) (set! g$665$18896 g$665$11353) (set! g$665$18897 g$665$11351) (set! g$665$18898 g$665$11349) (set! g$665$18899 g$665$11347) (set! g$665$18900 g$665$11345) (set! g$665$18901 g$665$11343) (set! g$665$18902 g$665$11341) (set! g$665$18903 g$665$11339) (set! g$665$18904 g$665$11337) (set! g$665$18905 g$665$11335) (set! g$665$18906 g$665$11333) (set! g$665$18907 g$665$11331) (set! g$665$18908 g$665$11329) (set! g$665$18909 g$665$11327) (set! g$665$18910 g$665$11325) (set! g$665$18911 g$665$11323) (set! g$665$18912 g$665$11321) (set! g$665$18913 g$665$11319) (set! g$665$18914 g$665$11317) (set! g$665$18915 g$665$11315) (set! g$665$18916 g$665$11313) (set! g$665$18917 g$665$11311) (set! g$665$18918 g$665$11309) (set! g$665$18919 g$665$11307) (set! g$665$18920 g$665$11305) (set! g$665$18921 g$665$11303) (set! g$665$18922 g$665$11301) (set! g$665$18923 g$665$11299) (set! g$665$18924 g$665$11297) (set! g$665$18925 g$665$11295) (set! g$665$18926 g$665$11293) (set! g$665$18927 g$665$11291) (set! g$665$18928 g$665$11289) (set! g$665$18930 g$665$11090) (set! g$665$18931 g$665$11088) (set! g$665$18932 g$665$11086) (set! g$665$18934 g$665$11072) (set! g$665$18935 g$665$11070) (set! g$665$18936 g$665$11068) (set! g$665$18937 g$665$11066) (set! g$665$18938 g$665$11064) (set! g$665$18939 g$665$11062) (set! g$665$18940 g$665$11060) (set! g$665$18941 g$665$11058) (set! g$665$18942 g$665$11056) (set! g$665$18943 g$665$11054) (set! g$665$18944 g$665$11052) (set! g$665$18945 g$665$11050) (set! g$665$18946 g$665$11048) (set! g$665$18947 g$665$11046) (set! g$665$18948 g$665$11044) (set! g$665$18949 g$665$11042) (set! g$665$18950 g$665$11040) (set! g$665$18951 g$665$11038) (set! g$665$18952 g$665$11036) (set! g$665$18953 g$665$11034) (set! g$665$18954 g$665$11032) (set! g$665$18955 g$665$11030) (set! g$665$18956 g$665$11028) (set! g$665$18957 g$665$11026) (set! g$665$18958 g$665$11024) (set! g$665$18959 g$665$11022) (set! g$665$18960 g$665$11020) (set! g$665$18961 g$665$11018) (set! g$665$18962 g$665$11016) (set! g$665$18963 g$665$11014) (set! g$665$18964 g$665$11012) (set! g$665$18965 g$665$11010) (set! g$665$18966 g$665$11008) (set! g$665$18967 g$665$11006) (set! g$665$18968 g$665$11004) (set! g$665$18969 g$665$11002) (set! g$665$18970 g$665$11000) (set! g$665$18971 g$665$10998) (set! g$665$18972 g$665$10996) (set! g$665$18973 g$665$10994) (set! g$665$18974 g$665$10992) (set! g$665$18975 g$665$10990) (set! g$665$18976 g$665$10987) (set! g$665$18977 g$665$10985) (set! g$665$18978 g$665$10983) (set! g$665$18979 g$665$10981) (set! g$665$18980 g$665$10979) (set! g$665$18981 g$665$10977) (set! g$665$18982 g$665$10975) (set! g$665$18983 g$665$10973) (set! g$665$18984 g$665$10971) (set! g$665$18985 g$665$10969) (set! g$665$18986 g$665$10967) (set! g$665$18987 g$665$10965) (set! g$665$18988 g$665$10963) (set! g$665$18989 g$665$10961) (set! g$665$18990 g$665$10959) (set! g$665$18991 g$665$10957) (set! g$665$18992 g$665$10954) (set! g$665$18993 g$665$10952) (set! g$665$18994 g$665$10950) (set! g$665$18995 g$665$10948) (set! g$665$18996 g$665$10946) (set! g$665$18998 g$665$10941) (set! g$665$18999 g$665$10939) (g$665$10657 g$665$11482)))) '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f '#f))


(begin (g$665$10211 (lambda (g$665$19760) ((lambda (g$665$19762) (if g$665$19762 (cdr g$665$19762) '#f)) (assq g$665$19760 '((syntax-error . g$665$18823) (syntax-dispatch . g$665$18887) (make-variable-transformer . g$665$18931) (identifier? . g$665$18822) (generate-temporaries . g$665$18826) (free-identifier=? . g$665$18825) (syntax->datum . g$665$18820) (datum->syntax . g$665$18821) (bound-identifier=? . g$665$18824) (null-environment . g$665$18836) (eval . g$665$18833) (environment . g$665$18837)))))) (g$665$10649 'g$665$19727 '(ikarus interaction) '() '() '() '() '() '() values values '#t) (g$665$10649 'g$665$19728 '(psyntax null-environment-5) '() '() '() '() '((unquote-splicing . g$665$19064) (unquote . g$665$19063) (delay . g$665$19056) (or . g$665$19054) (and . g$665$19053) (do . g$665$19052) (cond . g$665$19051) (let* . g$665$19050) (let . g$665$19049) (quasiquote . g$665$19045) (syntax-rules . g$665$19044) (case . g$665$19040) (if . g$665$19036) (letrec . g$665$19034) (lambda . g$665$19031) (quote . g$665$19028) (letrec-syntax . g$665$19026) (let-syntax . g$665$19025) (set! . g$665$19024) (begin . g$665$19022) (define-syntax . g$665$19020) (define . g$665$19019)) '() values values '#t) (g$665$10649 'g$665$19729 '(psyntax scheme-report-environment-5) '() '() '() '() '((string-ci>? . g$665$19709) (string-ci>=? . g$665$19708) (string-ci=? . g$665$19707) (string-ci<? . g$665$19706) (string-ci<=? . g$665$19705) (char-whitespace? . g$665$19704) (char-upper-case? . g$665$19703) (char-numeric? . g$665$19701) (char-lower-case? . g$665$19700) (char-upcase . g$665$19698) (char-downcase . g$665$19695) (char-ci>? . g$665$19694) (char-ci>=? . g$665$19693) (char-ci=? . g$665$19692) (char-ci<? . g$665$19691) (char-ci<=? . g$665$19690) (char-alphabetic? . g$665$19689) (call-with-output-file . g$665$19633) (call-with-input-file . g$665$19632) (write-char . g$665$19631) (write . g$665$19630) (with-output-to-file . g$665$19629) (with-input-from-file . g$665$19628) (read-char . g$665$19627) (read . g$665$19626) (peek-char . g$665$19625) (open-output-file . g$665$19624) (open-input-file . g$665$19623) (newline . g$665$19622) (display . g$665$19621) (close-output-port . g$665$19620) (close-input-port . g$665$19619) (eof-object . g$665$19617) (current-output-port . g$665$19615) (current-input-port . g$665$19614) (output-port? . g$665$19613) (input-port? . g$665$19612) (scheme-report-environment . g$665$19512) (quotient . g$665$19511) (null-environment . g$665$11475) (remainder . g$665$19510) (modulo . g$665$19509) (inexact->exact . g$665$19508) (force . g$665$19507) (exact->inexact . g$665$19506) (string-fill! . g$665$19503) (string-set! . g$665$19502) (set-cdr! . g$665$19501) (set-car! . g$665$19500) (memv . g$665$19494) (memq . g$665$19493) (member . g$665$19491) (assv . g$665$19483) (assq . g$665$19482) (assoc . g$665$19480) (eval . g$665$11481) (zero? . g$665$19231) (vector? . g$665$19230) (vector-set! . g$665$19229) (vector-ref . g$665$19228) (vector-length . g$665$19226) (vector-fill! . g$665$19224) (vector->list . g$665$19223) (vector . g$665$19222) (values . g$665$19221) (truncate . g$665$19220) (tan . g$665$19219) (symbol? . g$665$19218) (symbol->string . g$665$19216) (substring . g$665$19215) (string? . g$665$19214) (string>? . g$665$19213) (string>=? . g$665$19212) (string=? . g$665$19211) (string<? . g$665$19210) (string<=? . g$665$19209) (string-ref . g$665$19208) (string-length . g$665$19207) (string-copy . g$665$19205) (string-append . g$665$19204) (string->symbol . g$665$19203) (string->number . g$665$19202) (string->list . g$665$19201) (string . g$665$19200) (sqrt . g$665$19199) (sin . g$665$19198) (round . g$665$19197) (reverse . g$665$19196) (real? . g$665$19195) (real-part . g$665$19193) (rationalize . g$665$19192) (rational? . g$665$19191) (procedure? . g$665$19189) (positive? . g$665$19188) (pair? . g$665$19187) (odd? . g$665$19186) (numerator . g$665$19185) (number? . g$665$19184) (number->string . g$665$19183) (not . g$665$19181) (negative? . g$665$19180) (min . g$665$19178) (max . g$665$19177) (map . g$665$19176) (make-vector . g$665$19175) (make-string . g$665$19174) (make-rectangular . g$665$19173) (make-polar . g$665$19172) (magnitude . g$665$19171) (log . g$665$19170) (list? . g$665$19169) (list-tail . g$665$19168) (list-ref . g$665$19167) (list->vector . g$665$19166) (list->string . g$665$19165) (list . g$665$19164) (length . g$665$19163) (lcm . g$665$19162) (integer? . g$665$19161) (integer->char . g$665$19159) (inexact? . g$665$19157) (imag-part . g$665$19155) (gcd . g$665$19154) (for-each . g$665$19153) (floor . g$665$19152) (expt . g$665$19150) (exp . g$665$19149) (exact? . g$665$19148) (even? . g$665$19145) (eqv? . g$665$19143) (equal? . g$665$19142) (eq? . g$665$19141) (dynamic-wind . g$665$19140) (denominator . g$665$19133) (cos . g$665$19132) (cons . g$665$19131) (complex? . g$665$19130) (char? . g$665$19129) (char>? . g$665$19128) (char>=? . g$665$19127) (char=? . g$665$19126) (char<? . g$665$19125) (char<=? . g$665$19124) (char->integer . g$665$19123) (ceiling . g$665$19122) (call-with-values . g$665$19121) (call-with-current-continuation . g$665$19119) (cddddr . g$665$19118) (cdddar . g$665$19117) (cddadr . g$665$19116) (cddaar . g$665$19115) (cdaddr . g$665$19114) (cdadar . g$665$19113) (cdaadr . g$665$19112) (cdaaar . g$665$19111) (cadddr . g$665$19110) (caddar . g$665$19109) (cadadr . g$665$19108) (cadaar . g$665$19107) (caaddr . g$665$19106) (caadar . g$665$19105) (caaadr . g$665$19104) (caaaar . g$665$19103) (cdddr . g$665$19102) (cddar . g$665$19101) (cdadr . g$665$19100) (cdaar . g$665$19099) (caddr . g$665$19098) (cadar . g$665$19097) (caadr . g$665$19096) (caaar . g$665$19095) (cddr . g$665$19094) (cdar . g$665$19093) (cadr . g$665$19092) (caar . g$665$19091) (cdr . g$665$19090) (car . g$665$19089) (boolean? . g$665$19088) (atan . g$665$19086) (asin . g$665$19084) (apply . g$665$19083) (append . g$665$19082) (angle . g$665$19081) (acos . g$665$19080) (abs . g$665$19079) (/ . g$665$19078) (* . g$665$19077) (- . g$665$19076) (+ . g$665$19075) (>= . g$665$19074) (> . g$665$19073) (= . g$665$19072) (<= . g$665$19071) (< . g$665$19070) (unquote-splicing . g$665$19064) (unquote . g$665$19063) (delay . g$665$19056) (or . g$665$19054) (and . g$665$19053) (do . g$665$19052) (cond . g$665$19051) (let* . g$665$19050) (let . g$665$19049) (quasiquote . g$665$19045) (syntax-rules . g$665$19044) (case . g$665$19040) (if . g$665$19036) (letrec . g$665$19034) (lambda . g$665$19031) (quote . g$665$19028) (letrec-syntax . g$665$19026) (let-syntax . g$665$19025) (set! . g$665$19024) (begin . g$665$19022) (define-syntax . g$665$19020) (define . g$665$19019)) '() values values '#t) (g$665$10649 'g$665$19730 '(psyntax modules) '() '() '() '() '((module . g$665$19021)) '() values values '#t) (g$665$10649 'g$665$19731 '(chez parameters) '() '() '() '() '() '() values values '#t) (g$665$10649 'g$665$19732 '(rnrs) '() '() '() '() '((string-upcase . g$665$19717) (string-titlecase . g$665$19716) (string-normalize-nfkd . g$665$19715) (string-normalize-nfkc . g$665$19714) (string-normalize-nfd . g$665$19713) (string-normalize-nfc . g$665$19712) (string-foldcase . g$665$19711) (string-downcase . g$665$19710) (string-ci>? . g$665$19709) (string-ci>=? . g$665$19708) (string-ci=? . g$665$19707) (string-ci<? . g$665$19706) (string-ci<=? . g$665$19705) (char-whitespace? . g$665$19704) (char-upper-case? . g$665$19703) (char-title-case? . g$665$19702) (char-numeric? . g$665$19701) (char-lower-case? . g$665$19700) (char-general-category . g$665$19699) (char-upcase . g$665$19698) (char-titlecase . g$665$19697) (char-foldcase . g$665$19696) (char-downcase . g$665$19695) (char-ci>? . g$665$19694) (char-ci>=? . g$665$19693) (char-ci=? . g$665$19692) (char-ci<? . g$665$19691) (char-ci<=? . g$665$19690) (char-alphabetic? . g$665$19689) (make-variable-transformer . g$665$11089) (identifier? . g$665$11503) (generate-temporaries . g$665$11495) (free-identifier=? . g$665$11497) (syntax->datum . g$665$11507) (datum->syntax . g$665$11505) (bound-identifier=? . g$665$11499) (record-type-descriptor? . g$665$19688) (record-predicate . g$665$19687) (record-mutator . g$665$19686) (record-constructor . g$665$19685) (record-accessor . g$665$19684) (make-record-type-descriptor . g$665$19683) (make-record-constructor-descriptor . g$665$19682) (record? . g$665$19681) (record-type-uid . g$665$19680) (record-type-sealed? . g$665$19679) (record-type-parent . g$665$19678) (record-type-opaque? . g$665$19677) (record-type-name . g$665$19676) (record-type-generative? . g$665$19675) (record-type-field-names . g$665$19674) (record-rtd . g$665$19673) (record-field-mutable? . g$665$19672) (nongenerative . g$665$19671) (sealed . g$665$19670) (record-type-descriptor . g$665$19669) (record-constructor-descriptor . g$665$19668) (protocol . g$665$19667) (parent-rtd . g$665$19666) (parent . g$665$19665) (opaque . g$665$19664) (mutable . g$665$19663) (immutable . g$665$19662) (fields . g$665$19661) (define-record-type . g$665$19660) (delete-file . g$665$19659) (file-exists? . g$665$19658) (vector-sort! . g$665$19657) (vector-sort . g$665$19656) (list-sort . g$665$19655) (symbol-hash . g$665$19654) (string-ci-hash . g$665$19653) (string-hash . g$665$19652) (equal-hash . g$665$19651) (hashtable-equivalence-function . g$665$19650) (make-hashtable . g$665$19649) (hashtable-hash-function . g$665$19648) (make-eqv-hashtable . g$665$19647) (make-eq-hashtable . g$665$19646) (hashtable? . g$665$19645) (hashtable-update! . g$665$19644) (hashtable-size . g$665$19643) (hashtable-set! . g$665$19642) (hashtable-ref . g$665$19641) (hashtable-mutable? . g$665$19640) (hashtable-keys . g$665$19639) (hashtable-entries . g$665$19638) (hashtable-delete! . g$665$19637) (hashtable-copy . g$665$19636) (hashtable-contains? . g$665$19635) (hashtable-clear! . g$665$19634) (call-with-output-file . g$665$19633) (call-with-input-file . g$665$19632) (write-char . g$665$19631) (write . g$665$19630) (with-output-to-file . g$665$19629) (with-input-from-file . g$665$19628) (read-char . g$665$19627) (read . g$665$19626) (peek-char . g$665$19625) (open-output-file . g$665$19624) (open-input-file . g$665$19623) (newline . g$665$19622) (display . g$665$19621) (close-output-port . g$665$19620) (close-input-port . g$665$19619) (eof-object? . g$665$19618) (eof-object . g$665$19617) (current-error-port . g$665$19616) (current-output-port . g$665$19615) (current-input-port . g$665$19614) (output-port? . g$665$19613) (input-port? . g$665$19612) (utf-8-codec . g$665$19611) (utf-16-codec . g$665$19610) (transcoder-error-handling-mode . g$665$19609) (transcoder-eol-style . g$665$19608) (transcoder-codec . g$665$19607) (transcoded-port . g$665$19606) (textual-port? . g$665$19605) (string->bytevector . g$665$19604) (standard-output-port . g$665$19603) (standard-input-port . g$665$19602) (standard-error-port . g$665$19601) (set-port-position! . g$665$19600) (put-u8 . g$665$19599) (put-string . g$665$19598) (put-datum . g$665$19597) (put-char . g$665$19596) (put-bytevector . g$665$19595) (port? . g$665$19594) (port-transcoder . g$665$19593) (port-position . g$665$19592) (port-has-set-port-position!? . g$665$19591) (port-has-port-position? . g$665$19590) (port-eof? . g$665$19589) (output-port-buffer-mode . g$665$19588) (open-string-output-port . g$665$19587) (open-string-input-port . g$665$19586) (open-file-output-port . g$665$19585) (open-file-input/output-port . g$665$19584) (open-file-input-port . g$665$19583) (open-bytevector-output-port . g$665$19582) (open-bytevector-input-port . g$665$19581) (native-transcoder . g$665$19580) (native-eol-style . g$665$19579) (make-transcoder . g$665$19578) (latin-1-codec . g$665$19577) (make-i/o-write-error . g$665$19576) (make-i/o-read-error . g$665$19575) (make-i/o-port-error . g$665$19574) (make-i/o-invalid-position-error . g$665$19573) (make-i/o-filename-error . g$665$19572) (make-i/o-file-protection-error . g$665$19571) (make-i/o-file-is-read-only-error . g$665$19570) (make-i/o-file-does-not-exist-error . g$665$19569) (make-i/o-file-already-exists-error . g$665$19568) (make-i/o-error . g$665$19567) (make-i/o-encoding-error . g$665$19566) (make-i/o-decoding-error . g$665$19565) (make-custom-textual-output-port . g$665$19564) (make-custom-textual-input/output-port . g$665$19563) (make-custom-textual-input-port . g$665$19562) (make-custom-binary-output-port . g$665$19561) (make-custom-binary-input/output-port . g$665$19560) (make-custom-binary-input-port . g$665$19559) (make-bytevector . g$665$19558) (lookahead-u8 . g$665$19557) (lookahead-char . g$665$19556) (i/o-write-error? . g$665$19555) (&i/o-write . g$665$19554) (i/o-read-error? . g$665$19553) (&i/o-read . g$665$19552) (i/o-port-error? . g$665$19551) (&i/o-port . g$665$19550) (i/o-invalid-position-error? . g$665$19549) (&i/o-invalid-position . g$665$19548) (i/o-filename-error? . g$665$19547) (&i/o-filename . g$665$19546) (i/o-file-protection-error? . g$665$19545) (&i/o-file-protection . g$665$19544) (i/o-file-is-read-only-error? . g$665$19543) (&i/o-file-is-read-only . g$665$19542) (i/o-file-does-not-exist-error? . g$665$19541) (&i/o-file-does-not-exist . g$665$19540) (i/o-file-already-exists-error? . g$665$19539) (&i/o-file-already-exists . g$665$19538) (i/o-error? . g$665$19537) (i/o-error-port . g$665$19536) (i/o-error-filename . g$665$19535) (i/o-encoding-error? . g$665$19534) (i/o-encoding-error-char . g$665$19533) (&i/o-encoding . g$665$19532) (i/o-decoding-error? . g$665$19531) (&i/o-decoding . g$665$19530) (&i/o . g$665$19529) (get-u8 . g$665$19528) (get-string-n! . g$665$19527) (get-string-n . g$665$19526) (get-string-all . g$665$19525) (get-line . g$665$19524) (get-datum . g$665$19523) (get-char . g$665$19522) (get-bytevector-some . g$665$19521) (get-bytevector-n! . g$665$19520) (get-bytevector-n . g$665$19519) (get-bytevector-all . g$665$19518) (flush-output-port . g$665$19517) (file-options . g$665$19516) (error-handling-mode . g$665$19515) (eol-style . g$665$19514) (close-port . g$665$19513) (exit . g$665$19505) (command-line . g$665$19504) (remove . g$665$19499) (remv . g$665$19498) (remp . g$665$19497) (remq . g$665$19496) (partition . g$665$19495) (memv . g$665$19494) (memq . g$665$19493) (memp . g$665$19492) (member . g$665$19491) (exists . g$665$19490) (for-all . g$665$19489) (fold-right . g$665$19488) (fold-left . g$665$19487) (find . g$665$19486) (filter . g$665$19485) (cons* . g$665$19484) (assv . g$665$19483) (assq . g$665$19482) (assp . g$665$19481) (assoc . g$665$19480) (call-with-string-output-port . g$665$19479) (call-with-port . g$665$19478) (call-with-bytevector-output-port . g$665$19477) (bytevector->string . g$665$19476) (buffer-mode? . g$665$19475) (buffer-mode . g$665$19474) (binary-port? . g$665$19473) (guard . g$665$19472) (with-exception-handler . g$665$19471) (raise-continuable . g$665$19470) (raise . g$665$19469) (make-enumeration . g$665$19468) (enum-set=? . g$665$19467) (enum-set-universe . g$665$19466) (enum-set-union . g$665$19465) (enum-set-subset? . g$665$19464) (enum-set-projection . g$665$19463) (enum-set-member? . g$665$19462) (enum-set-intersection . g$665$19461) (enum-set-indexer . g$665$19460) (enum-set-difference . g$665$19459) (enum-set-constructor . g$665$19458) (enum-set-complement . g$665$19457) (enum-set->list . g$665$19456) (define-enumeration . g$665$19455) (who-condition? . g$665$19454) (&who . g$665$19453) (warning? . g$665$19452) (&warning . g$665$19451) (violation? . g$665$19450) (&violation . g$665$19449) (undefined-violation? . g$665$19448) (&undefined . g$665$19447) (syntax-violation? . g$665$19446) (syntax-violation-subform . g$665$19445) (syntax-violation-form . g$665$19444) (syntax-violation . g$665$19443) (&syntax . g$665$19442) (simple-conditions . g$665$19441) (serious-condition? . g$665$19440) (&serious . g$665$19439) (non-continuable-violation? . g$665$19438) (&non-continuable . g$665$19437) (message-condition? . g$665$19436) (&message . g$665$19435) (make-who-condition . g$665$19434) (make-warning . g$665$19433) (make-violation . g$665$19432) (make-undefined-violation . g$665$19431) (make-syntax-violation . g$665$19430) (make-serious-condition . g$665$19429) (make-non-continuable-violation . g$665$19428) (make-message-condition . g$665$19427) (make-lexical-violation . g$665$19426) (make-irritants-condition . g$665$19425) (make-implementation-restriction-violation . g$665$19424) (make-error . g$665$19423) (make-assertion-violation . g$665$19422) (lexical-violation? . g$665$19421) (&lexical . g$665$19420) (irritants-condition? . g$665$19419) (&irritants . g$665$19418) (implementation-restriction-violation? . g$665$19417) (&implementation-restriction . g$665$19416) (error? . g$665$19415) (&error . g$665$19414) (define-condition-type . g$665$19413) (condition-who . g$665$19412) (condition-predicate . g$665$19411) (condition-message . g$665$19410) (condition-irritants . g$665$19409) (condition-accessor . g$665$19408) (condition . g$665$19407) (&condition . g$665$19406) (assertion-violation? . g$665$19405) (&assertion . g$665$19404) (condition? . g$665$19403) (utf32->string . g$665$19402) (utf16->string . g$665$19401) (utf8->string . g$665$19400) (uint-list->bytevector . g$665$19399) (u8-list->bytevector . g$665$19398) (string->utf8 . g$665$19397) (string->utf32 . g$665$19396) (string->utf16 . g$665$19395) (sint-list->bytevector . g$665$19394) (native-endianness . g$665$19393) (bytevector? . g$665$19392) (bytevector=? . g$665$19391) (bytevector-uint-set! . g$665$19390) (bytevector-uint-ref . g$665$19389) (bytevector-u8-set! . g$665$19388) (bytevector-u8-ref . g$665$19387) (bytevector-u64-set! . g$665$19386) (bytevector-u64-ref . g$665$19385) (bytevector-u64-native-set! . g$665$19384) (bytevector-u64-native-ref . g$665$19383) (bytevector-u32-set! . g$665$19382) (bytevector-u32-ref . g$665$19381) (bytevector-u32-native-set! . g$665$19380) (bytevector-u32-native-ref . g$665$19379) (bytevector-u16-set! . g$665$19378) (bytevector-u16-ref . g$665$19377) (bytevector-u16-native-set! . g$665$19376) (bytevector-u16-native-ref . g$665$19375) (bytevector-sint-set! . g$665$19374) (bytevector-sint-ref . g$665$19373) (bytevector-s8-set! . g$665$19372) (bytevector-s8-ref . g$665$19371) (bytevector-s64-set! . g$665$19370) (bytevector-s64-ref . g$665$19369) (bytevector-s64-native-set! . g$665$19368) (bytevector-s64-native-ref . g$665$19367) (bytevector-s32-set! . g$665$19366) (bytevector-s32-ref . g$665$19365) (bytevector-s32-native-set! . g$665$19364) (bytevector-s32-native-ref . g$665$19363) (bytevector-s16-set! . g$665$19362) (bytevector-s16-ref . g$665$19361) (bytevector-s16-native-set! . g$665$19360) (bytevector-s16-native-ref . g$665$19359) (bytevector-length . g$665$19358) (bytevector-ieee-single-ref . g$665$19357) (bytevector-ieee-single-native-set! . g$665$19356) (bytevector-ieee-single-native-ref . g$665$19355) (bytevector-ieee-double-ref . g$665$19354) (bytevector-ieee-double-native-set! . g$665$19353) (bytevector-ieee-double-native-ref . g$665$19352) (bytevector-fill! . g$665$19351) (bytevector-copy! . g$665$19350) (bytevector-copy . g$665$19349) (bytevector->uint-list . g$665$19348) (bytevector->u8-list . g$665$19347) (bytevector->sint-list . g$665$19346) (no-nans-violation? . g$665$19345) (&no-nans . g$665$19344) (no-infinities-violation? . g$665$19343) (&no-infinities . g$665$19342) (make-no-nans-violation . g$665$19341) (make-no-infinities-violation . g$665$19340) (real->flonum . g$665$19339) (flzero? . g$665$19338) (fltruncate . g$665$19337) (fltan . g$665$19336) (flsqrt . g$665$19335) (flsin . g$665$19334) (flround . g$665$19333) (flpositive? . g$665$19332) (flonum? . g$665$19331) (flodd? . g$665$19330) (flnumerator . g$665$19329) (flnegative? . g$665$19328) (flnan? . g$665$19327) (flmod0 . g$665$19326) (flmod . g$665$19325) (flmin . g$665$19324) (flmax . g$665$19323) (fllog . g$665$19322) (flinteger? . g$665$19321) (flinfinite? . g$665$19320) (flfloor . g$665$19319) (flfinite? . g$665$19318) (flexpt . g$665$19317) (flexp . g$665$19316) (fleven? . g$665$19315) (fldiv0-and-mod0 . g$665$19314) (fldiv0 . g$665$19313) (fldiv-and-mod . g$665$19312) (fldiv . g$665$19311) (fldenominator . g$665$19310) (flcos . g$665$19309) (flceiling . g$665$19308) (flatan . g$665$19307) (flasin . g$665$19306) (flacos . g$665$19305) (flabs . g$665$19304) (fl>? . g$665$19303) (fl>=? . g$665$19302) (fl=? . g$665$19301) (fl<? . g$665$19300) (fl<=? . g$665$19299) (fl/ . g$665$19298) (fl- . g$665$19297) (fl+ . g$665$19296) (fl* . g$665$19295) (fixnum->flonum . g$665$19294) (fxzero? . g$665$19293) (fxxor . g$665$19292) (fxrotate-bit-field . g$665$19291) (fxreverse-bit-field . g$665$19290) (fxpositive? . g$665$19289) (fxodd? . g$665$19288) (fxnot . g$665$19287) (fxnegative? . g$665$19286) (fxmod0 . g$665$19285) (fxmod . g$665$19284) (fxmin . g$665$19283) (fxmax . g$665$19282) (fxlength . g$665$19281) (fxior . g$665$19280) (fxif . g$665$19279) (fxfirst-bit-set . g$665$19278) (fxeven? . g$665$19277) (fxdiv0-and-mod0 . g$665$19276) (fxdiv0 . g$665$19275) (fxdiv-and-mod . g$665$19274) (fxdiv . g$665$19273) (fxcopy-bit-field . g$665$19272) (fxcopy-bit . g$665$19271) (fxbit-set? . g$665$19270) (fxbit-field . g$665$19269) (fxbit-count . g$665$19268) (fxarithmetic-shift-right . g$665$19267) (fxarithmetic-shift-left . g$665$19266) (fxarithmetic-shift . g$665$19265) (fxand . g$665$19264) (fx>? . g$665$19263) (fx>=? . g$665$19262) (fx=? . g$665$19261) (fx<? . g$665$19260) (fx<=? . g$665$19259) (fx-/carry . g$665$19258) (fx- . g$665$19257) (fx+/carry . g$665$19256) (fx+ . g$665$19255) (fx*/carry . g$665$19254) (fx* . g$665$19253) (greatest-fixnum . g$665$19252) (least-fixnum . g$665$19251) (fixnum-width . g$665$19250) (fixnum? . g$665$19249) (bitwise-rotate-bit-field . g$665$19248) (bitwise-reverse-bit-field . g$665$19247) (bitwise-length . g$665$19246) (bitwise-if . g$665$19245) (bitwise-first-bit-set . g$665$19244) (bitwise-copy-bit-field . g$665$19243) (bitwise-copy-bit . g$665$19242) (bitwise-bit-set? . g$665$19241) (bitwise-bit-field . g$665$19240) (bitwise-bit-count . g$665$19239) (bitwise-xor . g$665$19238) (bitwise-ior . g$665$19237) (bitwise-and . g$665$19236) (bitwise-not . g$665$19235) (bitwise-arithmetic-shift-right . g$665$19234) (bitwise-arithmetic-shift-left . g$665$19233) (bitwise-arithmetic-shift . g$665$19232) (zero? . g$665$19231) (vector? . g$665$19230) (vector-set! . g$665$19229) (vector-ref . g$665$19228) (vector-map . g$665$19227) (vector-length . g$665$19226) (vector-for-each . g$665$19225) (vector-fill! . g$665$19224) (vector->list . g$665$19223) (vector . g$665$19222) (values . g$665$19221) (truncate . g$665$19220) (tan . g$665$19219) (symbol? . g$665$19218) (symbol=? . g$665$19217) (symbol->string . g$665$19216) (substring . g$665$19215) (string? . g$665$19214) (string>? . g$665$19213) (string>=? . g$665$19212) (string=? . g$665$19211) (string<? . g$665$19210) (string<=? . g$665$19209) (string-ref . g$665$19208) (string-length . g$665$19207) (string-for-each . g$665$19206) (string-copy . g$665$19205) (string-append . g$665$19204) (string->symbol . g$665$19203) (string->number . g$665$19202) (string->list . g$665$19201) (string . g$665$19200) (sqrt . g$665$19199) (sin . g$665$19198) (round . g$665$19197) (reverse . g$665$19196) (real? . g$665$19195) (real-valued? . g$665$19194) (real-part . g$665$19193) (rationalize . g$665$19192) (rational? . g$665$19191) (rational-valued? . g$665$19190) (procedure? . g$665$19189) (positive? . g$665$19188) (pair? . g$665$19187) (odd? . g$665$19186) (numerator . g$665$19185) (number? . g$665$19184) (number->string . g$665$19183) (null? . g$665$19182) (not . g$665$19181) (negative? . g$665$19180) (nan? . g$665$19179) (min . g$665$19178) (max . g$665$19177) (map . g$665$19176) (make-vector . g$665$19175) (make-string . g$665$19174) (make-rectangular . g$665$19173) (make-polar . g$665$19172) (magnitude . g$665$19171) (log . g$665$19170) (list? . g$665$19169) (list-tail . g$665$19168) (list-ref . g$665$19167) (list->vector . g$665$19166) (list->string . g$665$19165) (list . g$665$19164) (length . g$665$19163) (lcm . g$665$19162) (integer? . g$665$19161) (integer-valued? . g$665$19160) (integer->char . g$665$19159) (infinite? . g$665$19158) (inexact? . g$665$19157) (inexact . g$665$19156) (imag-part . g$665$19155) (gcd . g$665$19154) (for-each . g$665$19153) (floor . g$665$19152) (finite? . g$665$19151) (expt . g$665$19150) (exp . g$665$19149) (exact? . g$665$19148) (exact-integer-sqrt . g$665$19147) (exact . g$665$19146) (even? . g$665$19145) (error . g$665$19144) (eqv? . g$665$19143) (equal? . g$665$19142) (eq? . g$665$19141) (dynamic-wind . g$665$19140) (div0-and-mod0 . g$665$19139) (mod0 . g$665$19138) (div0 . g$665$19137) (div-and-mod . g$665$19136) (mod . g$665$19135) (div . g$665$19134) (denominator . g$665$19133) (cos . g$665$19132) (cons . g$665$19131) (complex? . g$665$19130) (char? . g$665$19129) (char>? . g$665$19128) (char>=? . g$665$19127) (char=? . g$665$19126) (char<? . g$665$19125) (char<=? . g$665$19124) (char->integer . g$665$19123) (ceiling . g$665$19122) (call-with-values . g$665$19121) (call/cc . g$665$19120) (call-with-current-continuation . g$665$19119) (cddddr . g$665$19118) (cdddar . g$665$19117) (cddadr . g$665$19116) (cddaar . g$665$19115) (cdaddr . g$665$19114) (cdadar . g$665$19113) (cdaadr . g$665$19112) (cdaaar . g$665$19111) (cadddr . g$665$19110) (caddar . g$665$19109) (cadadr . g$665$19108) (cadaar . g$665$19107) (caaddr . g$665$19106) (caadar . g$665$19105) (caaadr . g$665$19104) (caaaar . g$665$19103) (cdddr . g$665$19102) (cddar . g$665$19101) (cdadr . g$665$19100) (cdaar . g$665$19099) (caddr . g$665$19098) (cadar . g$665$19097) (caadr . g$665$19096) (caaar . g$665$19095) (cddr . g$665$19094) (cdar . g$665$19093) (cadr . g$665$19092) (caar . g$665$19091) (cdr . g$665$19090) (car . g$665$19089) (boolean? . g$665$19088) (boolean=? . g$665$19087) (atan . g$665$19086) (assertion-violation . g$665$19085) (asin . g$665$19084) (apply . g$665$19083) (append . g$665$19082) (angle . g$665$19081) (acos . g$665$19080) (abs . g$665$19079) (/ . g$665$19078) (* . g$665$19077) (- . g$665$19076) (+ . g$665$19075) (>= . g$665$19074) (> . g$665$19073) (= . g$665$19072) (<= . g$665$19071) (< . g$665$19070) (let*-values . g$665$19069) (unsyntax-splicing . g$665$19066) (unsyntax . g$665$19065) (unquote-splicing . g$665$19064) (unquote . g$665$19063) (_ . g$665$19062) (else . g$665$19061) (=> . g$665$19060) (|...| . g$665$19059) (assert . g$665$19058) (endianness . g$665$19057) (or . g$665$19054) (and . g$665$19053) (do . g$665$19052) (cond . g$665$19051) (let* . g$665$19050) (let . g$665$19049) (identifier-syntax . g$665$19048) (with-syntax . g$665$19047) (quasisyntax . g$665$19046) (quasiquote . g$665$19045) (syntax-rules . g$665$19044) (let-values . g$665$19041) (case . g$665$19040) (unless . g$665$19038) (when . g$665$19037) (if . g$665$19036) (letrec* . g$665$19035) (letrec . g$665$19034) (case-lambda . g$665$19032) (lambda . g$665$19031) (syntax . g$665$19030) (syntax-case . g$665$19029) (quote . g$665$19028) (letrec-syntax . g$665$19026) (let-syntax . g$665$19025) (set! . g$665$19024) (begin . g$665$19022) (define-syntax . g$665$19020) (define . g$665$19019)) '() values values '#t) (g$665$10649 'g$665$19733 '(rnrs r5rs) '() '() '() '() '((scheme-report-environment . g$665$19512) (quotient . g$665$19511) (null-environment . g$665$11475) (remainder . g$665$19510) (modulo . g$665$19509) (inexact->exact . g$665$19508) (force . g$665$19507) (exact->inexact . g$665$19506) (delay . g$665$19056)) '() values values '#t) (g$665$10649 'g$665$19734 '(rnrs control) '() '() '() '() '((do . g$665$19052) (unless . g$665$19038) (when . g$665$19037) (case-lambda . g$665$19032)) '() values values '#t) (g$665$10649 'g$665$19735 '(rnrs eval) '() '() '() '() '((eval . g$665$11481) (environment . g$665$11473)) '() values values '#t) (g$665$10649 'g$665$19736 '(rnrs mutable-pairs) '() '() '() '() '((set-cdr! . g$665$19501) (set-car! . g$665$19500)) '() values values '#t) (g$665$10649 'g$665$19737 '(rnrs mutable-strings) '() '() '() '() '((string-fill! . g$665$19503) (string-set! . g$665$19502)) '() values values '#t) (g$665$10649 'g$665$19738 '(rnrs programs) '() '() '() '() '((exit . g$665$19505) (command-line . g$665$19504)) '() values values '#t) (g$665$10649 'g$665$19739 '(rnrs syntax-case) '() '() '() '() '((make-variable-transformer . g$665$11089) (identifier? . g$665$11503) (generate-temporaries . g$665$11495) (free-identifier=? . g$665$11497) (syntax->datum . g$665$11507) (datum->syntax . g$665$11505) (bound-identifier=? . g$665$11499) (syntax-violation . g$665$19443) (unsyntax-splicing . g$665$19066) (unsyntax . g$665$19065) (_ . g$665$19062) (|...| . g$665$19059) (with-syntax . g$665$19047) (quasisyntax . g$665$19046) (syntax . g$665$19030) (syntax-case . g$665$19029)) '() values values '#t) (g$665$10649 'g$665$19740 '(rnrs files) '() '() '() '() '((delete-file . g$665$19659) (file-exists? . g$665$19658) (make-i/o-write-error . g$665$19576) (make-i/o-read-error . g$665$19575) (make-i/o-port-error . g$665$19574) (make-i/o-invalid-position-error . g$665$19573) (make-i/o-filename-error . g$665$19572) (make-i/o-file-protection-error . g$665$19571) (make-i/o-file-is-read-only-error . g$665$19570) (make-i/o-file-does-not-exist-error . g$665$19569) (make-i/o-file-already-exists-error . g$665$19568) (make-i/o-error . g$665$19567) (i/o-write-error? . g$665$19555) (&i/o-write . g$665$19554) (i/o-read-error? . g$665$19553) (&i/o-read . g$665$19552) (i/o-port-error? . g$665$19551) (&i/o-port . g$665$19550) (i/o-invalid-position-error? . g$665$19549) (&i/o-invalid-position . g$665$19548) (i/o-filename-error? . g$665$19547) (&i/o-filename . g$665$19546) (i/o-file-protection-error? . g$665$19545) (&i/o-file-protection . g$665$19544) (i/o-file-is-read-only-error? . g$665$19543) (&i/o-file-is-read-only . g$665$19542) (i/o-file-does-not-exist-error? . g$665$19541) (&i/o-file-does-not-exist . g$665$19540) (i/o-file-already-exists-error? . g$665$19539) (&i/o-file-already-exists . g$665$19538) (i/o-error? . g$665$19537) (i/o-error-port . g$665$19536) (i/o-error-filename . g$665$19535) (&i/o . g$665$19529)) '() values values '#t) (g$665$10649 'g$665$19741 '(rnrs sorting) '() '() '() '() '((vector-sort! . g$665$19657) (vector-sort . g$665$19656) (list-sort . g$665$19655)) '() values values '#t) (g$665$10649 'g$665$19742 '(rnrs base) '() '() '() '() '((zero? . g$665$19231) (vector? . g$665$19230) (vector-set! . g$665$19229) (vector-ref . g$665$19228) (vector-map . g$665$19227) (vector-length . g$665$19226) (vector-for-each . g$665$19225) (vector-fill! . g$665$19224) (vector->list . g$665$19223) (vector . g$665$19222) (values . g$665$19221) (truncate . g$665$19220) (tan . g$665$19219) (symbol? . g$665$19218) (symbol=? . g$665$19217) (symbol->string . g$665$19216) (substring . g$665$19215) (string? . g$665$19214) (string>? . g$665$19213) (string>=? . g$665$19212) (string=? . g$665$19211) (string<? . g$665$19210) (string<=? . g$665$19209) (string-ref . g$665$19208) (string-length . g$665$19207) (string-for-each . g$665$19206) (string-copy . g$665$19205) (string-append . g$665$19204) (string->symbol . g$665$19203) (string->number . g$665$19202) (string->list . g$665$19201) (string . g$665$19200) (sqrt . g$665$19199) (sin . g$665$19198) (round . g$665$19197) (reverse . g$665$19196) (real? . g$665$19195) (real-valued? . g$665$19194) (real-part . g$665$19193) (rationalize . g$665$19192) (rational? . g$665$19191) (rational-valued? . g$665$19190) (procedure? . g$665$19189) (positive? . g$665$19188) (pair? . g$665$19187) (odd? . g$665$19186) (numerator . g$665$19185) (number? . g$665$19184) (number->string . g$665$19183) (null? . g$665$19182) (not . g$665$19181) (negative? . g$665$19180) (nan? . g$665$19179) (min . g$665$19178) (max . g$665$19177) (map . g$665$19176) (make-vector . g$665$19175) (make-string . g$665$19174) (make-rectangular . g$665$19173) (make-polar . g$665$19172) (magnitude . g$665$19171) (log . g$665$19170) (list? . g$665$19169) (list-tail . g$665$19168) (list-ref . g$665$19167) (list->vector . g$665$19166) (list->string . g$665$19165) (list . g$665$19164) (length . g$665$19163) (lcm . g$665$19162) (integer? . g$665$19161) (integer-valued? . g$665$19160) (integer->char . g$665$19159) (infinite? . g$665$19158) (inexact? . g$665$19157) (inexact . g$665$19156) (imag-part . g$665$19155) (gcd . g$665$19154) (for-each . g$665$19153) (floor . g$665$19152) (finite? . g$665$19151) (expt . g$665$19150) (exp . g$665$19149) (exact? . g$665$19148) (exact-integer-sqrt . g$665$19147) (exact . g$665$19146) (even? . g$665$19145) (error . g$665$19144) (eqv? . g$665$19143) (equal? . g$665$19142) (eq? . g$665$19141) (dynamic-wind . g$665$19140) (div0-and-mod0 . g$665$19139) (mod0 . g$665$19138) (div0 . g$665$19137) (div-and-mod . g$665$19136) (mod . g$665$19135) (div . g$665$19134) (denominator . g$665$19133) (cos . g$665$19132) (cons . g$665$19131) (complex? . g$665$19130) (char? . g$665$19129) (char>? . g$665$19128) (char>=? . g$665$19127) (char=? . g$665$19126) (char<? . g$665$19125) (char<=? . g$665$19124) (char->integer . g$665$19123) (ceiling . g$665$19122) (call-with-values . g$665$19121) (call/cc . g$665$19120) (call-with-current-continuation . g$665$19119) (cddddr . g$665$19118) (cdddar . g$665$19117) (cddadr . g$665$19116) (cddaar . g$665$19115) (cdaddr . g$665$19114) (cdadar . g$665$19113) (cdaadr . g$665$19112) (cdaaar . g$665$19111) (cadddr . g$665$19110) (caddar . g$665$19109) (cadadr . g$665$19108) (cadaar . g$665$19107) (caaddr . g$665$19106) (caadar . g$665$19105) (caaadr . g$665$19104) (caaaar . g$665$19103) (cdddr . g$665$19102) (cddar . g$665$19101) (cdadr . g$665$19100) (cdaar . g$665$19099) (caddr . g$665$19098) (cadar . g$665$19097) (caadr . g$665$19096) (caaar . g$665$19095) (cddr . g$665$19094) (cdar . g$665$19093) (cadr . g$665$19092) (caar . g$665$19091) (cdr . g$665$19090) (car . g$665$19089) (boolean? . g$665$19088) (boolean=? . g$665$19087) (atan . g$665$19086) (assertion-violation . g$665$19085) (asin . g$665$19084) (apply . g$665$19083) (append . g$665$19082) (angle . g$665$19081) (acos . g$665$19080) (abs . g$665$19079) (/ . g$665$19078) (* . g$665$19077) (- . g$665$19076) (+ . g$665$19075) (>= . g$665$19074) (> . g$665$19073) (= . g$665$19072) (<= . g$665$19071) (< . g$665$19070) (let*-values . g$665$19069) (unquote-splicing . g$665$19064) (unquote . g$665$19063) (_ . g$665$19062) (else . g$665$19061) (=> . g$665$19060) (|...| . g$665$19059) (assert . g$665$19058) (or . g$665$19054) (and . g$665$19053) (cond . g$665$19051) (let* . g$665$19050) (let . g$665$19049) (identifier-syntax . g$665$19048) (quasiquote . g$665$19045) (syntax-rules . g$665$19044) (let-values . g$665$19041) (case . g$665$19040) (if . g$665$19036) (letrec* . g$665$19035) (letrec . g$665$19034) (lambda . g$665$19031) (quote . g$665$19028) (letrec-syntax . g$665$19026) (let-syntax . g$665$19025) (set! . g$665$19024) (begin . g$665$19022) (define-syntax . g$665$19020) (define . g$665$19019)) '() values values '#t) (g$665$10649 'g$665$19743 '(rnrs lists) '() '() '() '() '((remove . g$665$19499) (remv . g$665$19498) (remp . g$665$19497) (remq . g$665$19496) (partition . g$665$19495) (memv . g$665$19494) (memq . g$665$19493) (memp . g$665$19492) (member . g$665$19491) (exists . g$665$19490) (for-all . g$665$19489) (fold-right . g$665$19488) (fold-left . g$665$19487) (find . g$665$19486) (filter . g$665$19485) (cons* . g$665$19484) (assv . g$665$19483) (assq . g$665$19482) (assp . g$665$19481) (assoc . g$665$19480)) '() values values '#t) (g$665$10649 'g$665$19744 '(rnrs io simple) '() '() '() '() '((call-with-output-file . g$665$19633) (call-with-input-file . g$665$19632) (write-char . g$665$19631) (write . g$665$19630) (with-output-to-file . g$665$19629) (with-input-from-file . g$665$19628) (read-char . g$665$19627) (read . g$665$19626) (peek-char . g$665$19625) (open-output-file . g$665$19624) (open-input-file . g$665$19623) (newline . g$665$19622) (display . g$665$19621) (close-output-port . g$665$19620) (close-input-port . g$665$19619) (eof-object? . g$665$19618) (eof-object . g$665$19617) (current-error-port . g$665$19616) (current-output-port . g$665$19615) (current-input-port . g$665$19614) (output-port? . g$665$19613) (input-port? . g$665$19612) (make-i/o-write-error . g$665$19576) (make-i/o-read-error . g$665$19575) (make-i/o-port-error . g$665$19574) (make-i/o-invalid-position-error . g$665$19573) (make-i/o-filename-error . g$665$19572) (make-i/o-file-protection-error . g$665$19571) (make-i/o-file-is-read-only-error . g$665$19570) (make-i/o-file-does-not-exist-error . g$665$19569) (make-i/o-file-already-exists-error . g$665$19568) (make-i/o-error . g$665$19567) (i/o-write-error? . g$665$19555) (&i/o-write . g$665$19554) (i/o-read-error? . g$665$19553) (&i/o-read . g$665$19552) (i/o-port-error? . g$665$19551) (&i/o-port . g$665$19550) (i/o-invalid-position-error? . g$665$19549) (&i/o-invalid-position . g$665$19548) (i/o-filename-error? . g$665$19547) (&i/o-filename . g$665$19546) (i/o-file-protection-error? . g$665$19545) (&i/o-file-protection . g$665$19544) (i/o-file-is-read-only-error? . g$665$19543) (&i/o-file-is-read-only . g$665$19542) (i/o-file-does-not-exist-error? . g$665$19541) (&i/o-file-does-not-exist . g$665$19540) (i/o-file-already-exists-error? . g$665$19539) (&i/o-file-already-exists . g$665$19538) (i/o-error? . g$665$19537) (i/o-error-port . g$665$19536) (i/o-error-filename . g$665$19535) (&i/o . g$665$19529)) '() values values '#t) (g$665$10649 'g$665$19745 '(rnrs bytevectors) '() '() '() '() '((make-bytevector . g$665$19558) (utf32->string . g$665$19402) (utf16->string . g$665$19401) (utf8->string . g$665$19400) (uint-list->bytevector . g$665$19399) (u8-list->bytevector . g$665$19398) (string->utf8 . g$665$19397) (string->utf32 . g$665$19396) (string->utf16 . g$665$19395) (sint-list->bytevector . g$665$19394) (native-endianness . g$665$19393) (bytevector? . g$665$19392) (bytevector=? . g$665$19391) (bytevector-uint-set! . g$665$19390) (bytevector-uint-ref . g$665$19389) (bytevector-u8-set! . g$665$19388) (bytevector-u8-ref . g$665$19387) (bytevector-u64-set! . g$665$19386) (bytevector-u64-ref . g$665$19385) (bytevector-u64-native-set! . g$665$19384) (bytevector-u64-native-ref . g$665$19383) (bytevector-u32-set! . g$665$19382) (bytevector-u32-ref . g$665$19381) (bytevector-u32-native-set! . g$665$19380) (bytevector-u32-native-ref . g$665$19379) (bytevector-u16-set! . g$665$19378) (bytevector-u16-ref . g$665$19377) (bytevector-u16-native-set! . g$665$19376) (bytevector-u16-native-ref . g$665$19375) (bytevector-sint-set! . g$665$19374) (bytevector-sint-ref . g$665$19373) (bytevector-s8-set! . g$665$19372) (bytevector-s8-ref . g$665$19371) (bytevector-s64-set! . g$665$19370) (bytevector-s64-ref . g$665$19369) (bytevector-s64-native-set! . g$665$19368) (bytevector-s64-native-ref . g$665$19367) (bytevector-s32-set! . g$665$19366) (bytevector-s32-ref . g$665$19365) (bytevector-s32-native-set! . g$665$19364) (bytevector-s32-native-ref . g$665$19363) (bytevector-s16-set! . g$665$19362) (bytevector-s16-ref . g$665$19361) (bytevector-s16-native-set! . g$665$19360) (bytevector-s16-native-ref . g$665$19359) (bytevector-length . g$665$19358) (bytevector-ieee-single-ref . g$665$19357) (bytevector-ieee-single-native-set! . g$665$19356) (bytevector-ieee-single-native-ref . g$665$19355) (bytevector-ieee-double-ref . g$665$19354) (bytevector-ieee-double-native-set! . g$665$19353) (bytevector-ieee-double-native-ref . g$665$19352) (bytevector-fill! . g$665$19351) (bytevector-copy! . g$665$19350) (bytevector-copy . g$665$19349) (bytevector->uint-list . g$665$19348) (bytevector->u8-list . g$665$19347) (bytevector->sint-list . g$665$19346) (endianness . g$665$19057)) '() values values '#t) (g$665$10649 'g$665$19746 '(rnrs unicode) '() '() '() '() '((string-upcase . g$665$19717) (string-titlecase . g$665$19716) (string-normalize-nfkd . g$665$19715) (string-normalize-nfkc . g$665$19714) (string-normalize-nfd . g$665$19713) (string-normalize-nfc . g$665$19712) (string-foldcase . g$665$19711) (string-downcase . g$665$19710) (string-ci>? . g$665$19709) (string-ci>=? . g$665$19708) (string-ci=? . g$665$19707) (string-ci<? . g$665$19706) (string-ci<=? . g$665$19705) (char-whitespace? . g$665$19704) (char-upper-case? . g$665$19703) (char-title-case? . g$665$19702) (char-numeric? . g$665$19701) (char-lower-case? . g$665$19700) (char-general-category . g$665$19699) (char-upcase . g$665$19698) (char-titlecase . g$665$19697) (char-foldcase . g$665$19696) (char-downcase . g$665$19695) (char-ci>? . g$665$19694) (char-ci>=? . g$665$19693) (char-ci=? . g$665$19692) (char-ci<? . g$665$19691) (char-ci<=? . g$665$19690) (char-alphabetic? . g$665$19689)) '() values values '#t) (g$665$10649 'g$665$19747 '(rnrs exceptions) '() '() '() '() '((guard . g$665$19472) (with-exception-handler . g$665$19471) (raise-continuable . g$665$19470) (raise . g$665$19469) (else . g$665$19061) (=> . g$665$19060)) '() values values '#t) (g$665$10649 'g$665$19748 '(rnrs arithmetic bitwise) '() '() '() '() '((bitwise-rotate-bit-field . g$665$19248) (bitwise-reverse-bit-field . g$665$19247) (bitwise-length . g$665$19246) (bitwise-if . g$665$19245) (bitwise-first-bit-set . g$665$19244) (bitwise-copy-bit-field . g$665$19243) (bitwise-copy-bit . g$665$19242) (bitwise-bit-set? . g$665$19241) (bitwise-bit-field . g$665$19240) (bitwise-bit-count . g$665$19239) (bitwise-xor . g$665$19238) (bitwise-ior . g$665$19237) (bitwise-and . g$665$19236) (bitwise-not . g$665$19235) (bitwise-arithmetic-shift-right . g$665$19234) (bitwise-arithmetic-shift-left . g$665$19233) (bitwise-arithmetic-shift . g$665$19232)) '() values values '#t) (g$665$10649 'g$665$19749 '(rnrs arithmetic fixnums) '() '() '() '() '((fxzero? . g$665$19293) (fxxor . g$665$19292) (fxrotate-bit-field . g$665$19291) (fxreverse-bit-field . g$665$19290) (fxpositive? . g$665$19289) (fxodd? . g$665$19288) (fxnot . g$665$19287) (fxnegative? . g$665$19286) (fxmod0 . g$665$19285) (fxmod . g$665$19284) (fxmin . g$665$19283) (fxmax . g$665$19282) (fxlength . g$665$19281) (fxior . g$665$19280) (fxif . g$665$19279) (fxfirst-bit-set . g$665$19278) (fxeven? . g$665$19277) (fxdiv0-and-mod0 . g$665$19276) (fxdiv0 . g$665$19275) (fxdiv-and-mod . g$665$19274) (fxdiv . g$665$19273) (fxcopy-bit-field . g$665$19272) (fxcopy-bit . g$665$19271) (fxbit-set? . g$665$19270) (fxbit-field . g$665$19269) (fxbit-count . g$665$19268) (fxarithmetic-shift-right . g$665$19267) (fxarithmetic-shift-left . g$665$19266) (fxarithmetic-shift . g$665$19265) (fxand . g$665$19264) (fx>? . g$665$19263) (fx>=? . g$665$19262) (fx=? . g$665$19261) (fx<? . g$665$19260) (fx<=? . g$665$19259) (fx-/carry . g$665$19258) (fx- . g$665$19257) (fx+/carry . g$665$19256) (fx+ . g$665$19255) (fx*/carry . g$665$19254) (fx* . g$665$19253) (greatest-fixnum . g$665$19252) (least-fixnum . g$665$19251) (fixnum-width . g$665$19250) (fixnum? . g$665$19249)) '() values values '#t) (g$665$10649 'g$665$19750 '(rnrs arithmetic flonums) '() '() '() '() '((no-nans-violation? . g$665$19345) (&no-nans . g$665$19344) (no-infinities-violation? . g$665$19343) (&no-infinities . g$665$19342) (make-no-nans-violation . g$665$19341) (make-no-infinities-violation . g$665$19340) (real->flonum . g$665$19339) (flzero? . g$665$19338) (fltruncate . g$665$19337) (fltan . g$665$19336) (flsqrt . g$665$19335) (flsin . g$665$19334) (flround . g$665$19333) (flpositive? . g$665$19332) (flonum? . g$665$19331) (flodd? . g$665$19330) (flnumerator . g$665$19329) (flnegative? . g$665$19328) (flnan? . g$665$19327) (flmod0 . g$665$19326) (flmod . g$665$19325) (flmin . g$665$19324) (flmax . g$665$19323) (fllog . g$665$19322) (flinteger? . g$665$19321) (flinfinite? . g$665$19320) (flfloor . g$665$19319) (flfinite? . g$665$19318) (flexpt . g$665$19317) (flexp . g$665$19316) (fleven? . g$665$19315) (fldiv0-and-mod0 . g$665$19314) (fldiv0 . g$665$19313) (fldiv-and-mod . g$665$19312) (fldiv . g$665$19311) (fldenominator . g$665$19310) (flcos . g$665$19309) (flceiling . g$665$19308) (flatan . g$665$19307) (flasin . g$665$19306) (flacos . g$665$19305) (flabs . g$665$19304) (fl>? . g$665$19303) (fl>=? . g$665$19302) (fl=? . g$665$19301) (fl<? . g$665$19300) (fl<=? . g$665$19299) (fl/ . g$665$19298) (fl- . g$665$19297) (fl+ . g$665$19296) (fl* . g$665$19295) (fixnum->flonum . g$665$19294)) '() values values '#t) (g$665$10649 'g$665$19751 '(rnrs hashtables) '() '() '() '() '((symbol-hash . g$665$19654) (string-ci-hash . g$665$19653) (string-hash . g$665$19652) (equal-hash . g$665$19651) (hashtable-equivalence-function . g$665$19650) (make-hashtable . g$665$19649) (hashtable-hash-function . g$665$19648) (make-eqv-hashtable . g$665$19647) (make-eq-hashtable . g$665$19646) (hashtable? . g$665$19645) (hashtable-update! . g$665$19644) (hashtable-size . g$665$19643) (hashtable-set! . g$665$19642) (hashtable-ref . g$665$19641) (hashtable-mutable? . g$665$19640) (hashtable-keys . g$665$19639) (hashtable-entries . g$665$19638) (hashtable-delete! . g$665$19637) (hashtable-copy . g$665$19636) (hashtable-contains? . g$665$19635) (hashtable-clear! . g$665$19634)) '() values values '#t) (g$665$10649 'g$665$19752 '(rnrs io ports) '() '() '() '() '((eof-object? . g$665$19618) (eof-object . g$665$19617) (current-error-port . g$665$19616) (current-output-port . g$665$19615) (current-input-port . g$665$19614) (output-port? . g$665$19613) (input-port? . g$665$19612) (utf-8-codec . g$665$19611) (utf-16-codec . g$665$19610) (transcoder-error-handling-mode . g$665$19609) (transcoder-eol-style . g$665$19608) (transcoder-codec . g$665$19607) (transcoded-port . g$665$19606) (textual-port? . g$665$19605) (string->bytevector . g$665$19604) (standard-output-port . g$665$19603) (standard-input-port . g$665$19602) (standard-error-port . g$665$19601) (set-port-position! . g$665$19600) (put-u8 . g$665$19599) (put-string . g$665$19598) (put-datum . g$665$19597) (put-char . g$665$19596) (put-bytevector . g$665$19595) (port? . g$665$19594) (port-transcoder . g$665$19593) (port-position . g$665$19592) (port-has-set-port-position!? . g$665$19591) (port-has-port-position? . g$665$19590) (port-eof? . g$665$19589) (output-port-buffer-mode . g$665$19588) (open-string-output-port . g$665$19587) (open-string-input-port . g$665$19586) (open-file-output-port . g$665$19585) (open-file-input/output-port . g$665$19584) (open-file-input-port . g$665$19583) (open-bytevector-output-port . g$665$19582) (open-bytevector-input-port . g$665$19581) (native-transcoder . g$665$19580) (native-eol-style . g$665$19579) (make-transcoder . g$665$19578) (latin-1-codec . g$665$19577) (make-i/o-write-error . g$665$19576) (make-i/o-read-error . g$665$19575) (make-i/o-port-error . g$665$19574) (make-i/o-invalid-position-error . g$665$19573) (make-i/o-filename-error . g$665$19572) (make-i/o-file-protection-error . g$665$19571) (make-i/o-file-is-read-only-error . g$665$19570) (make-i/o-file-does-not-exist-error . g$665$19569) (make-i/o-file-already-exists-error . g$665$19568) (make-i/o-error . g$665$19567) (make-i/o-encoding-error . g$665$19566) (make-i/o-decoding-error . g$665$19565) (make-custom-textual-output-port . g$665$19564) (make-custom-textual-input/output-port . g$665$19563) (make-custom-textual-input-port . g$665$19562) (make-custom-binary-output-port . g$665$19561) (make-custom-binary-input/output-port . g$665$19560) (make-custom-binary-input-port . g$665$19559) (lookahead-u8 . g$665$19557) (lookahead-char . g$665$19556) (i/o-write-error? . g$665$19555) (&i/o-write . g$665$19554) (i/o-read-error? . g$665$19553) (&i/o-read . g$665$19552) (i/o-port-error? . g$665$19551) (&i/o-port . g$665$19550) (i/o-invalid-position-error? . g$665$19549) (&i/o-invalid-position . g$665$19548) (i/o-filename-error? . g$665$19547) (&i/o-filename . g$665$19546) (i/o-file-protection-error? . g$665$19545) (&i/o-file-protection . g$665$19544) (i/o-file-is-read-only-error? . g$665$19543) (&i/o-file-is-read-only . g$665$19542) (i/o-file-does-not-exist-error? . g$665$19541) (&i/o-file-does-not-exist . g$665$19540) (i/o-file-already-exists-error? . g$665$19539) (&i/o-file-already-exists . g$665$19538) (i/o-error? . g$665$19537) (i/o-error-port . g$665$19536) (i/o-error-filename . g$665$19535) (i/o-encoding-error? . g$665$19534) (i/o-encoding-error-char . g$665$19533) (&i/o-encoding . g$665$19532) (i/o-decoding-error? . g$665$19531) (&i/o-decoding . g$665$19530) (&i/o . g$665$19529) (get-u8 . g$665$19528) (get-string-n! . g$665$19527) (get-string-n . g$665$19526) (get-string-all . g$665$19525) (get-line . g$665$19524) (get-datum . g$665$19523) (get-char . g$665$19522) (get-bytevector-some . g$665$19521) (get-bytevector-n! . g$665$19520) (get-bytevector-n . g$665$19519) (get-bytevector-all . g$665$19518) (flush-output-port . g$665$19517) (file-options . g$665$19516) (error-handling-mode . g$665$19515) (eol-style . g$665$19514) (close-port . g$665$19513) (call-with-string-output-port . g$665$19479) (call-with-port . g$665$19478) (call-with-bytevector-output-port . g$665$19477) (bytevector->string . g$665$19476) (buffer-mode? . g$665$19475) (buffer-mode . g$665$19474) (binary-port? . g$665$19473)) '() values values '#t) (g$665$10649 'g$665$19753 '(rnrs enums) '() '() '() '() '((make-enumeration . g$665$19468) (enum-set=? . g$665$19467) (enum-set-universe . g$665$19466) (enum-set-union . g$665$19465) (enum-set-subset? . g$665$19464) (enum-set-projection . g$665$19463) (enum-set-member? . g$665$19462) (enum-set-intersection . g$665$19461) (enum-set-indexer . g$665$19460) (enum-set-difference . g$665$19459) (enum-set-constructor . g$665$19458) (enum-set-complement . g$665$19457) (enum-set->list . g$665$19456) (define-enumeration . g$665$19455)) '() values values '#t) (g$665$10649 'g$665$19754 '(rnrs conditions) '() '() '() '() '((who-condition? . g$665$19454) (&who . g$665$19453) (warning? . g$665$19452) (&warning . g$665$19451) (violation? . g$665$19450) (&violation . g$665$19449) (undefined-violation? . g$665$19448) (&undefined . g$665$19447) (syntax-violation? . g$665$19446) (syntax-violation-subform . g$665$19445) (syntax-violation-form . g$665$19444) (syntax-violation . g$665$19443) (&syntax . g$665$19442) (simple-conditions . g$665$19441) (serious-condition? . g$665$19440) (&serious . g$665$19439) (non-continuable-violation? . g$665$19438) (&non-continuable . g$665$19437) (message-condition? . g$665$19436) (&message . g$665$19435) (make-who-condition . g$665$19434) (make-warning . g$665$19433) (make-violation . g$665$19432) (make-undefined-violation . g$665$19431) (make-syntax-violation . g$665$19430) (make-serious-condition . g$665$19429) (make-non-continuable-violation . g$665$19428) (make-message-condition . g$665$19427) (make-lexical-violation . g$665$19426) (make-irritants-condition . g$665$19425) (make-implementation-restriction-violation . g$665$19424) (make-error . g$665$19423) (make-assertion-violation . g$665$19422) (lexical-violation? . g$665$19421) (&lexical . g$665$19420) (irritants-condition? . g$665$19419) (&irritants . g$665$19418) (implementation-restriction-violation? . g$665$19417) (&implementation-restriction . g$665$19416) (error? . g$665$19415) (&error . g$665$19414) (define-condition-type . g$665$19413) (condition-who . g$665$19412) (condition-predicate . g$665$19411) (condition-message . g$665$19410) (condition-irritants . g$665$19409) (condition-accessor . g$665$19408) (condition . g$665$19407) (&condition . g$665$19406) (assertion-violation? . g$665$19405) (&assertion . g$665$19404) (condition? . g$665$19403)) '() values values '#t) (g$665$10649 'g$665$19755 '(rnrs records inspection) '() '() '() '() '((record? . g$665$19681) (record-type-uid . g$665$19680) (record-type-sealed? . g$665$19679) (record-type-parent . g$665$19678) (record-type-opaque? . g$665$19677) (record-type-name . g$665$19676) (record-type-generative? . g$665$19675) (record-type-field-names . g$665$19674) (record-rtd . g$665$19673) (record-field-mutable? . g$665$19672)) '() values values '#t) (g$665$10649 'g$665$19756 '(rnrs records procedural) '() '() '() '() '((record-type-descriptor? . g$665$19688) (record-predicate . g$665$19687) (record-mutator . g$665$19686) (record-constructor . g$665$19685) (record-accessor . g$665$19684) (make-record-type-descriptor . g$665$19683) (make-record-constructor-descriptor . g$665$19682)) '() values values '#t) (g$665$10649 'g$665$19757 '(rnrs records syntactic) '() '() '() '() '((nongenerative . g$665$19671) (sealed . g$665$19670) (record-type-descriptor . g$665$19669) (record-constructor-descriptor . g$665$19668) (protocol . g$665$19667) (parent-rtd . g$665$19666) (parent . g$665$19665) (opaque . g$665$19664) (mutable . g$665$19663) (immutable . g$665$19662) (fields . g$665$19661) (define-record-type . g$665$19660)) '() values values '#t) (g$665$10649 'g$665$19758 '(psyntax system $all) '() '() '() '() '((syntax-error . g$665$11501) (syntax-dispatch . g$665$11372) (pretty-print . g$665$19726) (eval-core . g$665$19725) (set-symbol-value! . g$665$19724) (symbol-value . g$665$19723) (gensym . g$665$19722) (void . g$665$19721) (load . g$665$19720) (interaction-environment . g$665$19719) (char-ready? . g$665$19718) (string-upcase . g$665$19717) (string-titlecase . g$665$19716) (string-normalize-nfkd . g$665$19715) (string-normalize-nfkc . g$665$19714) (string-normalize-nfd . g$665$19713) (string-normalize-nfc . g$665$19712) (string-foldcase . g$665$19711) (string-downcase . g$665$19710) (string-ci>? . g$665$19709) (string-ci>=? . g$665$19708) (string-ci=? . g$665$19707) (string-ci<? . g$665$19706) (string-ci<=? . g$665$19705) (char-whitespace? . g$665$19704) (char-upper-case? . g$665$19703) (char-title-case? . g$665$19702) (char-numeric? . g$665$19701) (char-lower-case? . g$665$19700) (char-general-category . g$665$19699) (char-upcase . g$665$19698) (char-titlecase . g$665$19697) (char-foldcase . g$665$19696) (char-downcase . g$665$19695) (char-ci>? . g$665$19694) (char-ci>=? . g$665$19693) (char-ci=? . g$665$19692) (char-ci<? . g$665$19691) (char-ci<=? . g$665$19690) (char-alphabetic? . g$665$19689) (make-variable-transformer . g$665$11089) (identifier? . g$665$11503) (generate-temporaries . g$665$11495) (free-identifier=? . g$665$11497) (syntax->datum . g$665$11507) (datum->syntax . g$665$11505) (bound-identifier=? . g$665$11499) (record-type-descriptor? . g$665$19688) (record-predicate . g$665$19687) (record-mutator . g$665$19686) (record-constructor . g$665$19685) (record-accessor . g$665$19684) (make-record-type-descriptor . g$665$19683) (make-record-constructor-descriptor . g$665$19682) (record? . g$665$19681) (record-type-uid . g$665$19680) (record-type-sealed? . g$665$19679) (record-type-parent . g$665$19678) (record-type-opaque? . g$665$19677) (record-type-name . g$665$19676) (record-type-generative? . g$665$19675) (record-type-field-names . g$665$19674) (record-rtd . g$665$19673) (record-field-mutable? . g$665$19672) (nongenerative . g$665$19671) (sealed . g$665$19670) (record-type-descriptor . g$665$19669) (record-constructor-descriptor . g$665$19668) (protocol . g$665$19667) (parent-rtd . g$665$19666) (parent . g$665$19665) (opaque . g$665$19664) (mutable . g$665$19663) (immutable . g$665$19662) (fields . g$665$19661) (define-record-type . g$665$19660) (delete-file . g$665$19659) (file-exists? . g$665$19658) (vector-sort! . g$665$19657) (vector-sort . g$665$19656) (list-sort . g$665$19655) (symbol-hash . g$665$19654) (string-ci-hash . g$665$19653) (string-hash . g$665$19652) (equal-hash . g$665$19651) (hashtable-equivalence-function . g$665$19650) (make-hashtable . g$665$19649) (hashtable-hash-function . g$665$19648) (make-eqv-hashtable . g$665$19647) (make-eq-hashtable . g$665$19646) (hashtable? . g$665$19645) (hashtable-update! . g$665$19644) (hashtable-size . g$665$19643) (hashtable-set! . g$665$19642) (hashtable-ref . g$665$19641) (hashtable-mutable? . g$665$19640) (hashtable-keys . g$665$19639) (hashtable-entries . g$665$19638) (hashtable-delete! . g$665$19637) (hashtable-copy . g$665$19636) (hashtable-contains? . g$665$19635) (hashtable-clear! . g$665$19634) (call-with-output-file . g$665$19633) (call-with-input-file . g$665$19632) (write-char . g$665$19631) (write . g$665$19630) (with-output-to-file . g$665$19629) (with-input-from-file . g$665$19628) (read-char . g$665$19627) (read . g$665$19626) (peek-char . g$665$19625) (open-output-file . g$665$19624) (open-input-file . g$665$19623) (newline . g$665$19622) (display . g$665$19621) (close-output-port . g$665$19620) (close-input-port . g$665$19619) (eof-object? . g$665$19618) (eof-object . g$665$19617) (current-error-port . g$665$19616) (current-output-port . g$665$19615) (current-input-port . g$665$19614) (output-port? . g$665$19613) (input-port? . g$665$19612) (utf-8-codec . g$665$19611) (utf-16-codec . g$665$19610) (transcoder-error-handling-mode . g$665$19609) (transcoder-eol-style . g$665$19608) (transcoder-codec . g$665$19607) (transcoded-port . g$665$19606) (textual-port? . g$665$19605) (string->bytevector . g$665$19604) (standard-output-port . g$665$19603) (standard-input-port . g$665$19602) (standard-error-port . g$665$19601) (set-port-position! . g$665$19600) (put-u8 . g$665$19599) (put-string . g$665$19598) (put-datum . g$665$19597) (put-char . g$665$19596) (put-bytevector . g$665$19595) (port? . g$665$19594) (port-transcoder . g$665$19593) (port-position . g$665$19592) (port-has-set-port-position!? . g$665$19591) (port-has-port-position? . g$665$19590) (port-eof? . g$665$19589) (output-port-buffer-mode . g$665$19588) (open-string-output-port . g$665$19587) (open-string-input-port . g$665$19586) (open-file-output-port . g$665$19585) (open-file-input/output-port . g$665$19584) (open-file-input-port . g$665$19583) (open-bytevector-output-port . g$665$19582) (open-bytevector-input-port . g$665$19581) (native-transcoder . g$665$19580) (native-eol-style . g$665$19579) (make-transcoder . g$665$19578) (latin-1-codec . g$665$19577) (make-i/o-write-error . g$665$19576) (make-i/o-read-error . g$665$19575) (make-i/o-port-error . g$665$19574) (make-i/o-invalid-position-error . g$665$19573) (make-i/o-filename-error . g$665$19572) (make-i/o-file-protection-error . g$665$19571) (make-i/o-file-is-read-only-error . g$665$19570) (make-i/o-file-does-not-exist-error . g$665$19569) (make-i/o-file-already-exists-error . g$665$19568) (make-i/o-error . g$665$19567) (make-i/o-encoding-error . g$665$19566) (make-i/o-decoding-error . g$665$19565) (make-custom-textual-output-port . g$665$19564) (make-custom-textual-input/output-port . g$665$19563) (make-custom-textual-input-port . g$665$19562) (make-custom-binary-output-port . g$665$19561) (make-custom-binary-input/output-port . g$665$19560) (make-custom-binary-input-port . g$665$19559) (make-bytevector . g$665$19558) (lookahead-u8 . g$665$19557) (lookahead-char . g$665$19556) (i/o-write-error? . g$665$19555) (&i/o-write . g$665$19554) (i/o-read-error? . g$665$19553) (&i/o-read . g$665$19552) (i/o-port-error? . g$665$19551) (&i/o-port . g$665$19550) (i/o-invalid-position-error? . g$665$19549) (&i/o-invalid-position . g$665$19548) (i/o-filename-error? . g$665$19547) (&i/o-filename . g$665$19546) (i/o-file-protection-error? . g$665$19545) (&i/o-file-protection . g$665$19544) (i/o-file-is-read-only-error? . g$665$19543) (&i/o-file-is-read-only . g$665$19542) (i/o-file-does-not-exist-error? . g$665$19541) (&i/o-file-does-not-exist . g$665$19540) (i/o-file-already-exists-error? . g$665$19539) (&i/o-file-already-exists . g$665$19538) (i/o-error? . g$665$19537) (i/o-error-port . g$665$19536) (i/o-error-filename . g$665$19535) (i/o-encoding-error? . g$665$19534) (i/o-encoding-error-char . g$665$19533) (&i/o-encoding . g$665$19532) (i/o-decoding-error? . g$665$19531) (&i/o-decoding . g$665$19530) (&i/o . g$665$19529) (get-u8 . g$665$19528) (get-string-n! . g$665$19527) (get-string-n . g$665$19526) (get-string-all . g$665$19525) (get-line . g$665$19524) (get-datum . g$665$19523) (get-char . g$665$19522) (get-bytevector-some . g$665$19521) (get-bytevector-n! . g$665$19520) (get-bytevector-n . g$665$19519) (get-bytevector-all . g$665$19518) (flush-output-port . g$665$19517) (file-options . g$665$19516) (error-handling-mode . g$665$19515) (eol-style . g$665$19514) (close-port . g$665$19513) (scheme-report-environment . g$665$19512) (quotient . g$665$19511) (null-environment . g$665$11475) (remainder . g$665$19510) (modulo . g$665$19509) (inexact->exact . g$665$19508) (force . g$665$19507) (exact->inexact . g$665$19506) (exit . g$665$19505) (command-line . g$665$19504) (string-fill! . g$665$19503) (string-set! . g$665$19502) (set-cdr! . g$665$19501) (set-car! . g$665$19500) (remove . g$665$19499) (remv . g$665$19498) (remp . g$665$19497) (remq . g$665$19496) (partition . g$665$19495) (memv . g$665$19494) (memq . g$665$19493) (memp . g$665$19492) (member . g$665$19491) (exists . g$665$19490) (for-all . g$665$19489) (fold-right . g$665$19488) (fold-left . g$665$19487) (find . g$665$19486) (filter . g$665$19485) (cons* . g$665$19484) (assv . g$665$19483) (assq . g$665$19482) (assp . g$665$19481) (assoc . g$665$19480) (call-with-string-output-port . g$665$19479) (call-with-port . g$665$19478) (call-with-bytevector-output-port . g$665$19477) (bytevector->string . g$665$19476) (buffer-mode? . g$665$19475) (buffer-mode . g$665$19474) (binary-port? . g$665$19473) (guard . g$665$19472) (with-exception-handler . g$665$19471) (raise-continuable . g$665$19470) (raise . g$665$19469) (eval . g$665$11481) (environment . g$665$11473) (make-enumeration . g$665$19468) (enum-set=? . g$665$19467) (enum-set-universe . g$665$19466) (enum-set-union . g$665$19465) (enum-set-subset? . g$665$19464) (enum-set-projection . g$665$19463) (enum-set-member? . g$665$19462) (enum-set-intersection . g$665$19461) (enum-set-indexer . g$665$19460) (enum-set-difference . g$665$19459) (enum-set-constructor . g$665$19458) (enum-set-complement . g$665$19457) (enum-set->list . g$665$19456) (define-enumeration . g$665$19455) (who-condition? . g$665$19454) (&who . g$665$19453) (warning? . g$665$19452) (&warning . g$665$19451) (violation? . g$665$19450) (&violation . g$665$19449) (undefined-violation? . g$665$19448) (&undefined . g$665$19447) (syntax-violation? . g$665$19446) (syntax-violation-subform . g$665$19445) (syntax-violation-form . g$665$19444) (syntax-violation . g$665$19443) (&syntax . g$665$19442) (simple-conditions . g$665$19441) (serious-condition? . g$665$19440) (&serious . g$665$19439) (non-continuable-violation? . g$665$19438) (&non-continuable . g$665$19437) (message-condition? . g$665$19436) (&message . g$665$19435) (make-who-condition . g$665$19434) (make-warning . g$665$19433) (make-violation . g$665$19432) (make-undefined-violation . g$665$19431) (make-syntax-violation . g$665$19430) (make-serious-condition . g$665$19429) (make-non-continuable-violation . g$665$19428) (make-message-condition . g$665$19427) (make-lexical-violation . g$665$19426) (make-irritants-condition . g$665$19425) (make-implementation-restriction-violation . g$665$19424) (make-error . g$665$19423) (make-assertion-violation . g$665$19422) (lexical-violation? . g$665$19421) (&lexical . g$665$19420) (irritants-condition? . g$665$19419) (&irritants . g$665$19418) (implementation-restriction-violation? . g$665$19417) (&implementation-restriction . g$665$19416) (error? . g$665$19415) (&error . g$665$19414) (define-condition-type . g$665$19413) (condition-who . g$665$19412) (condition-predicate . g$665$19411) (condition-message . g$665$19410) (condition-irritants . g$665$19409) (condition-accessor . g$665$19408) (condition . g$665$19407) (&condition . g$665$19406) (assertion-violation? . g$665$19405) (&assertion . g$665$19404) (condition? . g$665$19403) (utf32->string . g$665$19402) (utf16->string . g$665$19401) (utf8->string . g$665$19400) (uint-list->bytevector . g$665$19399) (u8-list->bytevector . g$665$19398) (string->utf8 . g$665$19397) (string->utf32 . g$665$19396) (string->utf16 . g$665$19395) (sint-list->bytevector . g$665$19394) (native-endianness . g$665$19393) (bytevector? . g$665$19392) (bytevector=? . g$665$19391) (bytevector-uint-set! . g$665$19390) (bytevector-uint-ref . g$665$19389) (bytevector-u8-set! . g$665$19388) (bytevector-u8-ref . g$665$19387) (bytevector-u64-set! . g$665$19386) (bytevector-u64-ref . g$665$19385) (bytevector-u64-native-set! . g$665$19384) (bytevector-u64-native-ref . g$665$19383) (bytevector-u32-set! . g$665$19382) (bytevector-u32-ref . g$665$19381) (bytevector-u32-native-set! . g$665$19380) (bytevector-u32-native-ref . g$665$19379) (bytevector-u16-set! . g$665$19378) (bytevector-u16-ref . g$665$19377) (bytevector-u16-native-set! . g$665$19376) (bytevector-u16-native-ref . g$665$19375) (bytevector-sint-set! . g$665$19374) (bytevector-sint-ref . g$665$19373) (bytevector-s8-set! . g$665$19372) (bytevector-s8-ref . g$665$19371) (bytevector-s64-set! . g$665$19370) (bytevector-s64-ref . g$665$19369) (bytevector-s64-native-set! . g$665$19368) (bytevector-s64-native-ref . g$665$19367) (bytevector-s32-set! . g$665$19366) (bytevector-s32-ref . g$665$19365) (bytevector-s32-native-set! . g$665$19364) (bytevector-s32-native-ref . g$665$19363) (bytevector-s16-set! . g$665$19362) (bytevector-s16-ref . g$665$19361) (bytevector-s16-native-set! . g$665$19360) (bytevector-s16-native-ref . g$665$19359) (bytevector-length . g$665$19358) (bytevector-ieee-single-ref . g$665$19357) (bytevector-ieee-single-native-set! . g$665$19356) (bytevector-ieee-single-native-ref . g$665$19355) (bytevector-ieee-double-ref . g$665$19354) (bytevector-ieee-double-native-set! . g$665$19353) (bytevector-ieee-double-native-ref . g$665$19352) (bytevector-fill! . g$665$19351) (bytevector-copy! . g$665$19350) (bytevector-copy . g$665$19349) (bytevector->uint-list . g$665$19348) (bytevector->u8-list . g$665$19347) (bytevector->sint-list . g$665$19346) (no-nans-violation? . g$665$19345) (&no-nans . g$665$19344) (no-infinities-violation? . g$665$19343) (&no-infinities . g$665$19342) (make-no-nans-violation . g$665$19341) (make-no-infinities-violation . g$665$19340) (real->flonum . g$665$19339) (flzero? . g$665$19338) (fltruncate . g$665$19337) (fltan . g$665$19336) (flsqrt . g$665$19335) (flsin . g$665$19334) (flround . g$665$19333) (flpositive? . g$665$19332) (flonum? . g$665$19331) (flodd? . g$665$19330) (flnumerator . g$665$19329) (flnegative? . g$665$19328) (flnan? . g$665$19327) (flmod0 . g$665$19326) (flmod . g$665$19325) (flmin . g$665$19324) (flmax . g$665$19323) (fllog . g$665$19322) (flinteger? . g$665$19321) (flinfinite? . g$665$19320) (flfloor . g$665$19319) (flfinite? . g$665$19318) (flexpt . g$665$19317) (flexp . g$665$19316) (fleven? . g$665$19315) (fldiv0-and-mod0 . g$665$19314) (fldiv0 . g$665$19313) (fldiv-and-mod . g$665$19312) (fldiv . g$665$19311) (fldenominator . g$665$19310) (flcos . g$665$19309) (flceiling . g$665$19308) (flatan . g$665$19307) (flasin . g$665$19306) (flacos . g$665$19305) (flabs . g$665$19304) (fl>? . g$665$19303) (fl>=? . g$665$19302) (fl=? . g$665$19301) (fl<? . g$665$19300) (fl<=? . g$665$19299) (fl/ . g$665$19298) (fl- . g$665$19297) (fl+ . g$665$19296) (fl* . g$665$19295) (fixnum->flonum . g$665$19294) (fxzero? . g$665$19293) (fxxor . g$665$19292) (fxrotate-bit-field . g$665$19291) (fxreverse-bit-field . g$665$19290) (fxpositive? . g$665$19289) (fxodd? . g$665$19288) (fxnot . g$665$19287) (fxnegative? . g$665$19286) (fxmod0 . g$665$19285) (fxmod . g$665$19284) (fxmin . g$665$19283) (fxmax . g$665$19282) (fxlength . g$665$19281) (fxior . g$665$19280) (fxif . g$665$19279) (fxfirst-bit-set . g$665$19278) (fxeven? . g$665$19277) (fxdiv0-and-mod0 . g$665$19276) (fxdiv0 . g$665$19275) (fxdiv-and-mod . g$665$19274) (fxdiv . g$665$19273) (fxcopy-bit-field . g$665$19272) (fxcopy-bit . g$665$19271) (fxbit-set? . g$665$19270) (fxbit-field . g$665$19269) (fxbit-count . g$665$19268) (fxarithmetic-shift-right . g$665$19267) (fxarithmetic-shift-left . g$665$19266) (fxarithmetic-shift . g$665$19265) (fxand . g$665$19264) (fx>? . g$665$19263) (fx>=? . g$665$19262) (fx=? . g$665$19261) (fx<? . g$665$19260) (fx<=? . g$665$19259) (fx-/carry . g$665$19258) (fx- . g$665$19257) (fx+/carry . g$665$19256) (fx+ . g$665$19255) (fx*/carry . g$665$19254) (fx* . g$665$19253) (greatest-fixnum . g$665$19252) (least-fixnum . g$665$19251) (fixnum-width . g$665$19250) (fixnum? . g$665$19249) (bitwise-rotate-bit-field . g$665$19248) (bitwise-reverse-bit-field . g$665$19247) (bitwise-length . g$665$19246) (bitwise-if . g$665$19245) (bitwise-first-bit-set . g$665$19244) (bitwise-copy-bit-field . g$665$19243) (bitwise-copy-bit . g$665$19242) (bitwise-bit-set? . g$665$19241) (bitwise-bit-field . g$665$19240) (bitwise-bit-count . g$665$19239) (bitwise-xor . g$665$19238) (bitwise-ior . g$665$19237) (bitwise-and . g$665$19236) (bitwise-not . g$665$19235) (bitwise-arithmetic-shift-right . g$665$19234) (bitwise-arithmetic-shift-left . g$665$19233) (bitwise-arithmetic-shift . g$665$19232) (zero? . g$665$19231) (vector? . g$665$19230) (vector-set! . g$665$19229) (vector-ref . g$665$19228) (vector-map . g$665$19227) (vector-length . g$665$19226) (vector-for-each . g$665$19225) (vector-fill! . g$665$19224) (vector->list . g$665$19223) (vector . g$665$19222) (values . g$665$19221) (truncate . g$665$19220) (tan . g$665$19219) (symbol? . g$665$19218) (symbol=? . g$665$19217) (symbol->string . g$665$19216) (substring . g$665$19215) (string? . g$665$19214) (string>? . g$665$19213) (string>=? . g$665$19212) (string=? . g$665$19211) (string<? . g$665$19210) (string<=? . g$665$19209) (string-ref . g$665$19208) (string-length . g$665$19207) (string-for-each . g$665$19206) (string-copy . g$665$19205) (string-append . g$665$19204) (string->symbol . g$665$19203) (string->number . g$665$19202) (string->list . g$665$19201) (string . g$665$19200) (sqrt . g$665$19199) (sin . g$665$19198) (round . g$665$19197) (reverse . g$665$19196) (real? . g$665$19195) (real-valued? . g$665$19194) (real-part . g$665$19193) (rationalize . g$665$19192) (rational? . g$665$19191) (rational-valued? . g$665$19190) (procedure? . g$665$19189) (positive? . g$665$19188) (pair? . g$665$19187) (odd? . g$665$19186) (numerator . g$665$19185) (number? . g$665$19184) (number->string . g$665$19183) (null? . g$665$19182) (not . g$665$19181) (negative? . g$665$19180) (nan? . g$665$19179) (min . g$665$19178) (max . g$665$19177) (map . g$665$19176) (make-vector . g$665$19175) (make-string . g$665$19174) (make-rectangular . g$665$19173) (make-polar . g$665$19172) (magnitude . g$665$19171) (log . g$665$19170) (list? . g$665$19169) (list-tail . g$665$19168) (list-ref . g$665$19167) (list->vector . g$665$19166) (list->string . g$665$19165) (list . g$665$19164) (length . g$665$19163) (lcm . g$665$19162) (integer? . g$665$19161) (integer-valued? . g$665$19160) (integer->char . g$665$19159) (infinite? . g$665$19158) (inexact? . g$665$19157) (inexact . g$665$19156) (imag-part . g$665$19155) (gcd . g$665$19154) (for-each . g$665$19153) (floor . g$665$19152) (finite? . g$665$19151) (expt . g$665$19150) (exp . g$665$19149) (exact? . g$665$19148) (exact-integer-sqrt . g$665$19147) (exact . g$665$19146) (even? . g$665$19145) (error . g$665$19144) (eqv? . g$665$19143) (equal? . g$665$19142) (eq? . g$665$19141) (dynamic-wind . g$665$19140) (div0-and-mod0 . g$665$19139) (mod0 . g$665$19138) (div0 . g$665$19137) (div-and-mod . g$665$19136) (mod . g$665$19135) (div . g$665$19134) (denominator . g$665$19133) (cos . g$665$19132) (cons . g$665$19131) (complex? . g$665$19130) (char? . g$665$19129) (char>? . g$665$19128) (char>=? . g$665$19127) (char=? . g$665$19126) (char<? . g$665$19125) (char<=? . g$665$19124) (char->integer . g$665$19123) (ceiling . g$665$19122) (call-with-values . g$665$19121) (call/cc . g$665$19120) (call-with-current-continuation . g$665$19119) (cddddr . g$665$19118) (cdddar . g$665$19117) (cddadr . g$665$19116) (cddaar . g$665$19115) (cdaddr . g$665$19114) (cdadar . g$665$19113) (cdaadr . g$665$19112) (cdaaar . g$665$19111) (cadddr . g$665$19110) (caddar . g$665$19109) (cadadr . g$665$19108) (cadaar . g$665$19107) (caaddr . g$665$19106) (caadar . g$665$19105) (caaadr . g$665$19104) (caaaar . g$665$19103) (cdddr . g$665$19102) (cddar . g$665$19101) (cdadr . g$665$19100) (cdaar . g$665$19099) (caddr . g$665$19098) (cadar . g$665$19097) (caadr . g$665$19096) (caaar . g$665$19095) (cddr . g$665$19094) (cdar . g$665$19093) (cadr . g$665$19092) (caar . g$665$19091) (cdr . g$665$19090) (car . g$665$19089) (boolean? . g$665$19088) (boolean=? . g$665$19087) (atan . g$665$19086) (assertion-violation . g$665$19085) (asin . g$665$19084) (apply . g$665$19083) (append . g$665$19082) (angle . g$665$19081) (acos . g$665$19080) (abs . g$665$19079) (/ . g$665$19078) (* . g$665$19077) (- . g$665$19076) (+ . g$665$19075) (>= . g$665$19074) (> . g$665$19073) (= . g$665$19072) (<= . g$665$19071) (< . g$665$19070) (let*-values . g$665$19069) (trace-define . g$665$19068) (trace-lambda . g$665$19067) (unsyntax-splicing . g$665$19066) (unsyntax . g$665$19065) (unquote-splicing . g$665$19064) (unquote . g$665$19063) (_ . g$665$19062) (else . g$665$19061) (=> . g$665$19060) (|...| . g$665$19059) (assert . g$665$19058) (endianness . g$665$19057) (delay . g$665$19056) (time . g$665$19055) (or . g$665$19054) (and . g$665$19053) (do . g$665$19052) (cond . g$665$19051) (let* . g$665$19050) (let . g$665$19049) (identifier-syntax . g$665$19048) (with-syntax . g$665$19047) (quasisyntax . g$665$19046) (quasiquote . g$665$19045) (syntax-rules . g$665$19044) (include . g$665$19043) (define-record . g$665$19042) (let-values . g$665$19041) (case . g$665$19040) (parameterize . g$665$19039) (unless . g$665$19038) (when . g$665$19037) (if . g$665$19036) (letrec* . g$665$19035) (letrec . g$665$19034) (type-descriptor . g$665$19033) (case-lambda . g$665$19032) (lambda . g$665$19031) (syntax . g$665$19030) (syntax-case . g$665$19029) (quote . g$665$19028) (foreign-call . g$665$19027) (letrec-syntax . g$665$19026) (let-syntax . g$665$19025) (set! . g$665$19024) (import . g$665$19023) (begin . g$665$19022) (module . g$665$19021) (define-syntax . g$665$19020) (define . g$665$19019)) '((g$665$11501 core-prim . syntax-error) (g$665$11372 core-prim . syntax-dispatch) (g$665$19726 core-prim . pretty-print) (g$665$19725 core-prim . eval-core) (g$665$19724 core-prim . set-symbol-value!) (g$665$19723 core-prim . symbol-value) (g$665$19722 core-prim . gensym) (g$665$19721 core-prim . void) (g$665$19720 core-prim . load) (g$665$19719 core-prim . interaction-environment) (g$665$19718 core-prim . char-ready?) (g$665$19717 core-prim . string-upcase) (g$665$19716 core-prim . string-titlecase) (g$665$19715 core-prim . string-normalize-nfkd) (g$665$19714 core-prim . string-normalize-nfkc) (g$665$19713 core-prim . string-normalize-nfd) (g$665$19712 core-prim . string-normalize-nfc) (g$665$19711 core-prim . string-foldcase) (g$665$19710 core-prim . string-downcase) (g$665$19709 core-prim . string-ci>?) (g$665$19708 core-prim . string-ci>=?) (g$665$19707 core-prim . string-ci=?) (g$665$19706 core-prim . string-ci<?) (g$665$19705 core-prim . string-ci<=?) (g$665$19704 core-prim . char-whitespace?) (g$665$19703 core-prim . char-upper-case?) (g$665$19702 core-prim . char-title-case?) (g$665$19701 core-prim . char-numeric?) (g$665$19700 core-prim . char-lower-case?) (g$665$19699 core-prim . char-general-category) (g$665$19698 core-prim . char-upcase) (g$665$19697 core-prim . char-titlecase) (g$665$19696 core-prim . char-foldcase) (g$665$19695 core-prim . char-downcase) (g$665$19694 core-prim . char-ci>?) (g$665$19693 core-prim . char-ci>=?) (g$665$19692 core-prim . char-ci=?) (g$665$19691 core-prim . char-ci<?) (g$665$19690 core-prim . char-ci<=?) (g$665$19689 core-prim . char-alphabetic?) (g$665$11089 core-prim . make-variable-transformer) (g$665$11503 core-prim . identifier?) (g$665$11495 core-prim . generate-temporaries) (g$665$11497 core-prim . free-identifier=?) (g$665$11507 core-prim . syntax->datum) (g$665$11505 core-prim . datum->syntax) (g$665$11499 core-prim . bound-identifier=?) (g$665$19688 core-prim . record-type-descriptor?) (g$665$19687 core-prim . record-predicate) (g$665$19686 core-prim . record-mutator) (g$665$19685 core-prim . record-constructor) (g$665$19684 core-prim . record-accessor) (g$665$19683 core-prim . make-record-type-descriptor) (g$665$19682 core-prim . make-record-constructor-descriptor) (g$665$19681 core-prim . record?) (g$665$19680 core-prim . record-type-uid) (g$665$19679 core-prim . record-type-sealed?) (g$665$19678 core-prim . record-type-parent) (g$665$19677 core-prim . record-type-opaque?) (g$665$19676 core-prim . record-type-name) (g$665$19675 core-prim . record-type-generative?) (g$665$19674 core-prim . record-type-field-names) (g$665$19673 core-prim . record-rtd) (g$665$19672 core-prim . record-field-mutable?) (g$665$19671 core-prim . nongenerative) (g$665$19670 core-prim . sealed) (g$665$19669 core-prim . record-type-descriptor) (g$665$19668 core-prim . record-constructor-descriptor) (g$665$19667 core-prim . protocol) (g$665$19666 core-prim . parent-rtd) (g$665$19665 core-prim . parent) (g$665$19664 core-prim . opaque) (g$665$19663 core-prim . mutable) (g$665$19662 core-prim . immutable) (g$665$19661 core-prim . fields) (g$665$19660 core-prim . define-record-type) (g$665$19659 core-prim . delete-file) (g$665$19658 core-prim . file-exists?) (g$665$19657 core-prim . vector-sort!) (g$665$19656 core-prim . vector-sort) (g$665$19655 core-prim . list-sort) (g$665$19654 core-prim . symbol-hash) (g$665$19653 core-prim . string-ci-hash) (g$665$19652 core-prim . string-hash) (g$665$19651 core-prim . equal-hash) (g$665$19650 core-prim . hashtable-equivalence-function) (g$665$19649 core-prim . make-hashtable) (g$665$19648 core-prim . hashtable-hash-function) (g$665$19647 core-prim . make-eqv-hashtable) (g$665$19646 core-prim . make-eq-hashtable) (g$665$19645 core-prim . hashtable?) (g$665$19644 core-prim . hashtable-update!) (g$665$19643 core-prim . hashtable-size) (g$665$19642 core-prim . hashtable-set!) (g$665$19641 core-prim . hashtable-ref) (g$665$19640 core-prim . hashtable-mutable?) (g$665$19639 core-prim . hashtable-keys) (g$665$19638 core-prim . hashtable-entries) (g$665$19637 core-prim . hashtable-delete!) (g$665$19636 core-prim . hashtable-copy) (g$665$19635 core-prim . hashtable-contains?) (g$665$19634 core-prim . hashtable-clear!) (g$665$19633 core-prim . call-with-output-file) (g$665$19632 core-prim . call-with-input-file) (g$665$19631 core-prim . write-char) (g$665$19630 core-prim . write) (g$665$19629 core-prim . with-output-to-file) (g$665$19628 core-prim . with-input-from-file) (g$665$19627 core-prim . read-char) (g$665$19626 core-prim . read) (g$665$19625 core-prim . peek-char) (g$665$19624 core-prim . open-output-file) (g$665$19623 core-prim . open-input-file) (g$665$19622 core-prim . newline) (g$665$19621 core-prim . display) (g$665$19620 core-prim . close-output-port) (g$665$19619 core-prim . close-input-port) (g$665$19618 core-prim . eof-object?) (g$665$19617 core-prim . eof-object) (g$665$19616 core-prim . current-error-port) (g$665$19615 core-prim . current-output-port) (g$665$19614 core-prim . current-input-port) (g$665$19613 core-prim . output-port?) (g$665$19612 core-prim . input-port?) (g$665$19611 core-prim . utf-8-codec) (g$665$19610 core-prim . utf-16-codec) (g$665$19609 core-prim . transcoder-error-handling-mode) (g$665$19608 core-prim . transcoder-eol-style) (g$665$19607 core-prim . transcoder-codec) (g$665$19606 core-prim . transcoded-port) (g$665$19605 core-prim . textual-port?) (g$665$19604 core-prim . string->bytevector) (g$665$19603 core-prim . standard-output-port) (g$665$19602 core-prim . standard-input-port) (g$665$19601 core-prim . standard-error-port) (g$665$19600 core-prim . set-port-position!) (g$665$19599 core-prim . put-u8) (g$665$19598 core-prim . put-string) (g$665$19597 core-prim . put-datum) (g$665$19596 core-prim . put-char) (g$665$19595 core-prim . put-bytevector) (g$665$19594 core-prim . port?) (g$665$19593 core-prim . port-transcoder) (g$665$19592 core-prim . port-position) (g$665$19591 core-prim . port-has-set-port-position!?) (g$665$19590 core-prim . port-has-port-position?) (g$665$19589 core-prim . port-eof?) (g$665$19588 core-prim . output-port-buffer-mode) (g$665$19587 core-prim . open-string-output-port) (g$665$19586 core-prim . open-string-input-port) (g$665$19585 core-prim . open-file-output-port) (g$665$19584 core-prim . open-file-input/output-port) (g$665$19583 core-prim . open-file-input-port) (g$665$19582 core-prim . open-bytevector-output-port) (g$665$19581 core-prim . open-bytevector-input-port) (g$665$19580 core-prim . native-transcoder) (g$665$19579 core-prim . native-eol-style) (g$665$19578 core-prim . make-transcoder) (g$665$19577 core-prim . latin-1-codec) (g$665$19576 core-prim . make-i/o-write-error) (g$665$19575 core-prim . make-i/o-read-error) (g$665$19574 core-prim . make-i/o-port-error) (g$665$19573 core-prim . make-i/o-invalid-position-error) (g$665$19572 core-prim . make-i/o-filename-error) (g$665$19571 core-prim . make-i/o-file-protection-error) (g$665$19570 core-prim . make-i/o-file-is-read-only-error) (g$665$19569 core-prim . make-i/o-file-does-not-exist-error) (g$665$19568 core-prim . make-i/o-file-already-exists-error) (g$665$19567 core-prim . make-i/o-error) (g$665$19566 core-prim . make-i/o-encoding-error) (g$665$19565 core-prim . make-i/o-decoding-error) (g$665$19564 core-prim . make-custom-textual-output-port) (g$665$19563 core-prim . make-custom-textual-input/output-port) (g$665$19562 core-prim . make-custom-textual-input-port) (g$665$19561 core-prim . make-custom-binary-output-port) (g$665$19560 core-prim . make-custom-binary-input/output-port) (g$665$19559 core-prim . make-custom-binary-input-port) (g$665$19558 core-prim . make-bytevector) (g$665$19557 core-prim . lookahead-u8) (g$665$19556 core-prim . lookahead-char) (g$665$19555 core-prim . i/o-write-error?) (g$665$19554 core-prim . &i/o-write) (g$665$19553 core-prim . i/o-read-error?) (g$665$19552 core-prim . &i/o-read) (g$665$19551 core-prim . i/o-port-error?) (g$665$19550 core-prim . &i/o-port) (g$665$19549 core-prim . i/o-invalid-position-error?) (g$665$19548 core-prim . &i/o-invalid-position) (g$665$19547 core-prim . i/o-filename-error?) (g$665$19546 core-prim . &i/o-filename) (g$665$19545 core-prim . i/o-file-protection-error?) (g$665$19544 core-prim . &i/o-file-protection) (g$665$19543 core-prim . i/o-file-is-read-only-error?) (g$665$19542 core-prim . &i/o-file-is-read-only) (g$665$19541 core-prim . i/o-file-does-not-exist-error?) (g$665$19540 core-prim . &i/o-file-does-not-exist) (g$665$19539 core-prim . i/o-file-already-exists-error?) (g$665$19538 core-prim . &i/o-file-already-exists) (g$665$19537 core-prim . i/o-error?) (g$665$19536 core-prim . i/o-error-port) (g$665$19535 core-prim . i/o-error-filename) (g$665$19534 core-prim . i/o-encoding-error?) (g$665$19533 core-prim . i/o-encoding-error-char) (g$665$19532 core-prim . &i/o-encoding) (g$665$19531 core-prim . i/o-decoding-error?) (g$665$19530 core-prim . &i/o-decoding) (g$665$19529 core-prim . &i/o) (g$665$19528 core-prim . get-u8) (g$665$19527 core-prim . get-string-n!) (g$665$19526 core-prim . get-string-n) (g$665$19525 core-prim . get-string-all) (g$665$19524 core-prim . get-line) (g$665$19523 core-prim . get-datum) (g$665$19522 core-prim . get-char) (g$665$19521 core-prim . get-bytevector-some) (g$665$19520 core-prim . get-bytevector-n!) (g$665$19519 core-prim . get-bytevector-n) (g$665$19518 core-prim . get-bytevector-all) (g$665$19517 core-prim . flush-output-port) (g$665$19516 core-prim . file-options) (g$665$19515 core-prim . error-handling-mode) (g$665$19514 core-prim . eol-style) (g$665$19513 core-prim . close-port) (g$665$19512 core-prim . scheme-report-environment) (g$665$19511 core-prim . quotient) (g$665$11475 core-prim . null-environment) (g$665$19510 core-prim . remainder) (g$665$19509 core-prim . modulo) (g$665$19508 core-prim . inexact->exact) (g$665$19507 core-prim . force) (g$665$19506 core-prim . exact->inexact) (g$665$19505 core-prim . exit) (g$665$19504 core-prim . command-line) (g$665$19503 core-prim . string-fill!) (g$665$19502 core-prim . string-set!) (g$665$19501 core-prim . set-cdr!) (g$665$19500 core-prim . set-car!) (g$665$19499 core-prim . remove) (g$665$19498 core-prim . remv) (g$665$19497 core-prim . remp) (g$665$19496 core-prim . remq) (g$665$19495 core-prim . partition) (g$665$19494 core-prim . memv) (g$665$19493 core-prim . memq) (g$665$19492 core-prim . memp) (g$665$19491 core-prim . member) (g$665$19490 core-prim . exists) (g$665$19489 core-prim . for-all) (g$665$19488 core-prim . fold-right) (g$665$19487 core-prim . fold-left) (g$665$19486 core-prim . find) (g$665$19485 core-prim . filter) (g$665$19484 core-prim . cons*) (g$665$19483 core-prim . assv) (g$665$19482 core-prim . assq) (g$665$19481 core-prim . assp) (g$665$19480 core-prim . assoc) (g$665$19479 core-prim . call-with-string-output-port) (g$665$19478 core-prim . call-with-port) (g$665$19477 core-prim . call-with-bytevector-output-port) (g$665$19476 core-prim . bytevector->string) (g$665$19475 core-prim . buffer-mode?) (g$665$19474 core-prim . buffer-mode) (g$665$19473 core-prim . binary-port?) (g$665$19472 core-prim . guard) (g$665$19471 core-prim . with-exception-handler) (g$665$19470 core-prim . raise-continuable) (g$665$19469 core-prim . raise) (g$665$11481 core-prim . eval) (g$665$11473 core-prim . environment) (g$665$19468 core-prim . make-enumeration) (g$665$19467 core-prim . enum-set=?) (g$665$19466 core-prim . enum-set-universe) (g$665$19465 core-prim . enum-set-union) (g$665$19464 core-prim . enum-set-subset?) (g$665$19463 core-prim . enum-set-projection) (g$665$19462 core-prim . enum-set-member?) (g$665$19461 core-prim . enum-set-intersection) (g$665$19460 core-prim . enum-set-indexer) (g$665$19459 core-prim . enum-set-difference) (g$665$19458 core-prim . enum-set-constructor) (g$665$19457 core-prim . enum-set-complement) (g$665$19456 core-prim . enum-set->list) (g$665$19455 core-prim . define-enumeration) (g$665$19454 core-prim . who-condition?) (g$665$19453 core-prim . &who) (g$665$19452 core-prim . warning?) (g$665$19451 core-prim . &warning) (g$665$19450 core-prim . violation?) (g$665$19449 core-prim . &violation) (g$665$19448 core-prim . undefined-violation?) (g$665$19447 core-prim . &undefined) (g$665$19446 core-prim . syntax-violation?) (g$665$19445 core-prim . syntax-violation-subform) (g$665$19444 core-prim . syntax-violation-form) (g$665$19443 core-prim . syntax-violation) (g$665$19442 core-prim . &syntax) (g$665$19441 core-prim . simple-conditions) (g$665$19440 core-prim . serious-condition?) (g$665$19439 core-prim . &serious) (g$665$19438 core-prim . non-continuable-violation?) (g$665$19437 core-prim . &non-continuable) (g$665$19436 core-prim . message-condition?) (g$665$19435 core-prim . &message) (g$665$19434 core-prim . make-who-condition) (g$665$19433 core-prim . make-warning) (g$665$19432 core-prim . make-violation) (g$665$19431 core-prim . make-undefined-violation) (g$665$19430 core-prim . make-syntax-violation) (g$665$19429 core-prim . make-serious-condition) (g$665$19428 core-prim . make-non-continuable-violation) (g$665$19427 core-prim . make-message-condition) (g$665$19426 core-prim . make-lexical-violation) (g$665$19425 core-prim . make-irritants-condition) (g$665$19424 core-prim . make-implementation-restriction-violation) (g$665$19423 core-prim . make-error) (g$665$19422 core-prim . make-assertion-violation) (g$665$19421 core-prim . lexical-violation?) (g$665$19420 core-prim . &lexical) (g$665$19419 core-prim . irritants-condition?) (g$665$19418 core-prim . &irritants) (g$665$19417 core-prim . implementation-restriction-violation?) (g$665$19416 core-prim . &implementation-restriction) (g$665$19415 core-prim . error?) (g$665$19414 core-prim . &error) (g$665$19413 core-prim . define-condition-type) (g$665$19412 core-prim . condition-who) (g$665$19411 core-prim . condition-predicate) (g$665$19410 core-prim . condition-message) (g$665$19409 core-prim . condition-irritants) (g$665$19408 core-prim . condition-accessor) (g$665$19407 core-prim . condition) (g$665$19406 core-prim . &condition) (g$665$19405 core-prim . assertion-violation?) (g$665$19404 core-prim . &assertion) (g$665$19403 core-prim . condition?) (g$665$19402 core-prim . utf32->string) (g$665$19401 core-prim . utf16->string) (g$665$19400 core-prim . utf8->string) (g$665$19399 core-prim . uint-list->bytevector) (g$665$19398 core-prim . u8-list->bytevector) (g$665$19397 core-prim . string->utf8) (g$665$19396 core-prim . string->utf32) (g$665$19395 core-prim . string->utf16) (g$665$19394 core-prim . sint-list->bytevector) (g$665$19393 core-prim . native-endianness) (g$665$19392 core-prim . bytevector?) (g$665$19391 core-prim . bytevector=?) (g$665$19390 core-prim . bytevector-uint-set!) (g$665$19389 core-prim . bytevector-uint-ref) (g$665$19388 core-prim . bytevector-u8-set!) (g$665$19387 core-prim . bytevector-u8-ref) (g$665$19386 core-prim . bytevector-u64-set!) (g$665$19385 core-prim . bytevector-u64-ref) (g$665$19384 core-prim . bytevector-u64-native-set!) (g$665$19383 core-prim . bytevector-u64-native-ref) (g$665$19382 core-prim . bytevector-u32-set!) (g$665$19381 core-prim . bytevector-u32-ref) (g$665$19380 core-prim . bytevector-u32-native-set!) (g$665$19379 core-prim . bytevector-u32-native-ref) (g$665$19378 core-prim . bytevector-u16-set!) (g$665$19377 core-prim . bytevector-u16-ref) (g$665$19376 core-prim . bytevector-u16-native-set!) (g$665$19375 core-prim . bytevector-u16-native-ref) (g$665$19374 core-prim . bytevector-sint-set!) (g$665$19373 core-prim . bytevector-sint-ref) (g$665$19372 core-prim . bytevector-s8-set!) (g$665$19371 core-prim . bytevector-s8-ref) (g$665$19370 core-prim . bytevector-s64-set!) (g$665$19369 core-prim . bytevector-s64-ref) (g$665$19368 core-prim . bytevector-s64-native-set!) (g$665$19367 core-prim . bytevector-s64-native-ref) (g$665$19366 core-prim . bytevector-s32-set!) (g$665$19365 core-prim . bytevector-s32-ref) (g$665$19364 core-prim . bytevector-s32-native-set!) (g$665$19363 core-prim . bytevector-s32-native-ref) (g$665$19362 core-prim . bytevector-s16-set!) (g$665$19361 core-prim . bytevector-s16-ref) (g$665$19360 core-prim . bytevector-s16-native-set!) (g$665$19359 core-prim . bytevector-s16-native-ref) (g$665$19358 core-prim . bytevector-length) (g$665$19357 core-prim . bytevector-ieee-single-ref) (g$665$19356 core-prim . bytevector-ieee-single-native-set!) (g$665$19355 core-prim . bytevector-ieee-single-native-ref) (g$665$19354 core-prim . bytevector-ieee-double-ref) (g$665$19353 core-prim . bytevector-ieee-double-native-set!) (g$665$19352 core-prim . bytevector-ieee-double-native-ref) (g$665$19351 core-prim . bytevector-fill!) (g$665$19350 core-prim . bytevector-copy!) (g$665$19349 core-prim . bytevector-copy) (g$665$19348 core-prim . bytevector->uint-list) (g$665$19347 core-prim . bytevector->u8-list) (g$665$19346 core-prim . bytevector->sint-list) (g$665$19345 core-prim . no-nans-violation?) (g$665$19344 core-prim . &no-nans) (g$665$19343 core-prim . no-infinities-violation?) (g$665$19342 core-prim . &no-infinities) (g$665$19341 core-prim . make-no-nans-violation) (g$665$19340 core-prim . make-no-infinities-violation) (g$665$19339 core-prim . real->flonum) (g$665$19338 core-prim . flzero?) (g$665$19337 core-prim . fltruncate) (g$665$19336 core-prim . fltan) (g$665$19335 core-prim . flsqrt) (g$665$19334 core-prim . flsin) (g$665$19333 core-prim . flround) (g$665$19332 core-prim . flpositive?) (g$665$19331 core-prim . flonum?) (g$665$19330 core-prim . flodd?) (g$665$19329 core-prim . flnumerator) (g$665$19328 core-prim . flnegative?) (g$665$19327 core-prim . flnan?) (g$665$19326 core-prim . flmod0) (g$665$19325 core-prim . flmod) (g$665$19324 core-prim . flmin) (g$665$19323 core-prim . flmax) (g$665$19322 core-prim . fllog) (g$665$19321 core-prim . flinteger?) (g$665$19320 core-prim . flinfinite?) (g$665$19319 core-prim . flfloor) (g$665$19318 core-prim . flfinite?) (g$665$19317 core-prim . flexpt) (g$665$19316 core-prim . flexp) (g$665$19315 core-prim . fleven?) (g$665$19314 core-prim . fldiv0-and-mod0) (g$665$19313 core-prim . fldiv0) (g$665$19312 core-prim . fldiv-and-mod) (g$665$19311 core-prim . fldiv) (g$665$19310 core-prim . fldenominator) (g$665$19309 core-prim . flcos) (g$665$19308 core-prim . flceiling) (g$665$19307 core-prim . flatan) (g$665$19306 core-prim . flasin) (g$665$19305 core-prim . flacos) (g$665$19304 core-prim . flabs) (g$665$19303 core-prim . fl>?) (g$665$19302 core-prim . fl>=?) (g$665$19301 core-prim . fl=?) (g$665$19300 core-prim . fl<?) (g$665$19299 core-prim . fl<=?) (g$665$19298 core-prim . fl/) (g$665$19297 core-prim . fl-) (g$665$19296 core-prim . fl+) (g$665$19295 core-prim . fl*) (g$665$19294 core-prim . fixnum->flonum) (g$665$19293 core-prim . fxzero?) (g$665$19292 core-prim . fxxor) (g$665$19291 core-prim . fxrotate-bit-field) (g$665$19290 core-prim . fxreverse-bit-field) (g$665$19289 core-prim . fxpositive?) (g$665$19288 core-prim . fxodd?) (g$665$19287 core-prim . fxnot) (g$665$19286 core-prim . fxnegative?) (g$665$19285 core-prim . fxmod0) (g$665$19284 core-prim . fxmod) (g$665$19283 core-prim . fxmin) (g$665$19282 core-prim . fxmax) (g$665$19281 core-prim . fxlength) (g$665$19280 core-prim . fxior) (g$665$19279 core-prim . fxif) (g$665$19278 core-prim . fxfirst-bit-set) (g$665$19277 core-prim . fxeven?) (g$665$19276 core-prim . fxdiv0-and-mod0) (g$665$19275 core-prim . fxdiv0) (g$665$19274 core-prim . fxdiv-and-mod) (g$665$19273 core-prim . fxdiv) (g$665$19272 core-prim . fxcopy-bit-field) (g$665$19271 core-prim . fxcopy-bit) (g$665$19270 core-prim . fxbit-set?) (g$665$19269 core-prim . fxbit-field) (g$665$19268 core-prim . fxbit-count) (g$665$19267 core-prim . fxarithmetic-shift-right) (g$665$19266 core-prim . fxarithmetic-shift-left) (g$665$19265 core-prim . fxarithmetic-shift) (g$665$19264 core-prim . fxand) (g$665$19263 core-prim . fx>?) (g$665$19262 core-prim . fx>=?) (g$665$19261 core-prim . fx=?) (g$665$19260 core-prim . fx<?) (g$665$19259 core-prim . fx<=?) (g$665$19258 core-prim . fx-/carry) (g$665$19257 core-prim . fx-) (g$665$19256 core-prim . fx+/carry) (g$665$19255 core-prim . fx+) (g$665$19254 core-prim . fx*/carry) (g$665$19253 core-prim . fx*) (g$665$19252 core-prim . greatest-fixnum) (g$665$19251 core-prim . least-fixnum) (g$665$19250 core-prim . fixnum-width) (g$665$19249 core-prim . fixnum?) (g$665$19248 core-prim . bitwise-rotate-bit-field) (g$665$19247 core-prim . bitwise-reverse-bit-field) (g$665$19246 core-prim . bitwise-length) (g$665$19245 core-prim . bitwise-if) (g$665$19244 core-prim . bitwise-first-bit-set) (g$665$19243 core-prim . bitwise-copy-bit-field) (g$665$19242 core-prim . bitwise-copy-bit) (g$665$19241 core-prim . bitwise-bit-set?) (g$665$19240 core-prim . bitwise-bit-field) (g$665$19239 core-prim . bitwise-bit-count) (g$665$19238 core-prim . bitwise-xor) (g$665$19237 core-prim . bitwise-ior) (g$665$19236 core-prim . bitwise-and) (g$665$19235 core-prim . bitwise-not) (g$665$19234 core-prim . bitwise-arithmetic-shift-right) (g$665$19233 core-prim . bitwise-arithmetic-shift-left) (g$665$19232 core-prim . bitwise-arithmetic-shift) (g$665$19231 core-prim . zero?) (g$665$19230 core-prim . vector?) (g$665$19229 core-prim . vector-set!) (g$665$19228 core-prim . vector-ref) (g$665$19227 core-prim . vector-map) (g$665$19226 core-prim . vector-length) (g$665$19225 core-prim . vector-for-each) (g$665$19224 core-prim . vector-fill!) (g$665$19223 core-prim . vector->list) (g$665$19222 core-prim . vector) (g$665$19221 core-prim . values) (g$665$19220 core-prim . truncate) (g$665$19219 core-prim . tan) (g$665$19218 core-prim . symbol?) (g$665$19217 core-prim . symbol=?) (g$665$19216 core-prim . symbol->string) (g$665$19215 core-prim . substring) (g$665$19214 core-prim . string?) (g$665$19213 core-prim . string>?) (g$665$19212 core-prim . string>=?) (g$665$19211 core-prim . string=?) (g$665$19210 core-prim . string<?) (g$665$19209 core-prim . string<=?) (g$665$19208 core-prim . string-ref) (g$665$19207 core-prim . string-length) (g$665$19206 core-prim . string-for-each) (g$665$19205 core-prim . string-copy) (g$665$19204 core-prim . string-append) (g$665$19203 core-prim . string->symbol) (g$665$19202 core-prim . string->number) (g$665$19201 core-prim . string->list) (g$665$19200 core-prim . string) (g$665$19199 core-prim . sqrt) (g$665$19198 core-prim . sin) (g$665$19197 core-prim . round) (g$665$19196 core-prim . reverse) (g$665$19195 core-prim . real?) (g$665$19194 core-prim . real-valued?) (g$665$19193 core-prim . real-part) (g$665$19192 core-prim . rationalize) (g$665$19191 core-prim . rational?) (g$665$19190 core-prim . rational-valued?) (g$665$19189 core-prim . procedure?) (g$665$19188 core-prim . positive?) (g$665$19187 core-prim . pair?) (g$665$19186 core-prim . odd?) (g$665$19185 core-prim . numerator) (g$665$19184 core-prim . number?) (g$665$19183 core-prim . number->string) (g$665$19182 core-prim . null?) (g$665$19181 core-prim . not) (g$665$19180 core-prim . negative?) (g$665$19179 core-prim . nan?) (g$665$19178 core-prim . min) (g$665$19177 core-prim . max) (g$665$19176 core-prim . map) (g$665$19175 core-prim . make-vector) (g$665$19174 core-prim . make-string) (g$665$19173 core-prim . make-rectangular) (g$665$19172 core-prim . make-polar) (g$665$19171 core-prim . magnitude) (g$665$19170 core-prim . log) (g$665$19169 core-prim . list?) (g$665$19168 core-prim . list-tail) (g$665$19167 core-prim . list-ref) (g$665$19166 core-prim . list->vector) (g$665$19165 core-prim . list->string) (g$665$19164 core-prim . list) (g$665$19163 core-prim . length) (g$665$19162 core-prim . lcm) (g$665$19161 core-prim . integer?) (g$665$19160 core-prim . integer-valued?) (g$665$19159 core-prim . integer->char) (g$665$19158 core-prim . infinite?) (g$665$19157 core-prim . inexact?) (g$665$19156 core-prim . inexact) (g$665$19155 core-prim . imag-part) (g$665$19154 core-prim . gcd) (g$665$19153 core-prim . for-each) (g$665$19152 core-prim . floor) (g$665$19151 core-prim . finite?) (g$665$19150 core-prim . expt) (g$665$19149 core-prim . exp) (g$665$19148 core-prim . exact?) (g$665$19147 core-prim . exact-integer-sqrt) (g$665$19146 core-prim . exact) (g$665$19145 core-prim . even?) (g$665$19144 core-prim . error) (g$665$19143 core-prim . eqv?) (g$665$19142 core-prim . equal?) (g$665$19141 core-prim . eq?) (g$665$19140 core-prim . dynamic-wind) (g$665$19139 core-prim . div0-and-mod0) (g$665$19138 core-prim . mod0) (g$665$19137 core-prim . div0) (g$665$19136 core-prim . div-and-mod) (g$665$19135 core-prim . mod) (g$665$19134 core-prim . div) (g$665$19133 core-prim . denominator) (g$665$19132 core-prim . cos) (g$665$19131 core-prim . cons) (g$665$19130 core-prim . complex?) (g$665$19129 core-prim . char?) (g$665$19128 core-prim . char>?) (g$665$19127 core-prim . char>=?) (g$665$19126 core-prim . char=?) (g$665$19125 core-prim . char<?) (g$665$19124 core-prim . char<=?) (g$665$19123 core-prim . char->integer) (g$665$19122 core-prim . ceiling) (g$665$19121 core-prim . call-with-values) (g$665$19120 core-prim . call/cc) (g$665$19119 core-prim . call-with-current-continuation) (g$665$19118 core-prim . cddddr) (g$665$19117 core-prim . cdddar) (g$665$19116 core-prim . cddadr) (g$665$19115 core-prim . cddaar) (g$665$19114 core-prim . cdaddr) (g$665$19113 core-prim . cdadar) (g$665$19112 core-prim . cdaadr) (g$665$19111 core-prim . cdaaar) (g$665$19110 core-prim . cadddr) (g$665$19109 core-prim . caddar) (g$665$19108 core-prim . cadadr) (g$665$19107 core-prim . cadaar) (g$665$19106 core-prim . caaddr) (g$665$19105 core-prim . caadar) (g$665$19104 core-prim . caaadr) (g$665$19103 core-prim . caaaar) (g$665$19102 core-prim . cdddr) (g$665$19101 core-prim . cddar) (g$665$19100 core-prim . cdadr) (g$665$19099 core-prim . cdaar) (g$665$19098 core-prim . caddr) (g$665$19097 core-prim . cadar) (g$665$19096 core-prim . caadr) (g$665$19095 core-prim . caaar) (g$665$19094 core-prim . cddr) (g$665$19093 core-prim . cdar) (g$665$19092 core-prim . cadr) (g$665$19091 core-prim . caar) (g$665$19090 core-prim . cdr) (g$665$19089 core-prim . car) (g$665$19088 core-prim . boolean?) (g$665$19087 core-prim . boolean=?) (g$665$19086 core-prim . atan) (g$665$19085 core-prim . assertion-violation) (g$665$19084 core-prim . asin) (g$665$19083 core-prim . apply) (g$665$19082 core-prim . append) (g$665$19081 core-prim . angle) (g$665$19080 core-prim . acos) (g$665$19079 core-prim . abs) (g$665$19078 core-prim . /) (g$665$19077 core-prim . *) (g$665$19076 core-prim . -) (g$665$19075 core-prim . +) (g$665$19074 core-prim . >=) (g$665$19073 core-prim . >) (g$665$19072 core-prim . =) (g$665$19071 core-prim . <=) (g$665$19070 core-prim . <) (g$665$19069 core-prim . let*-values) (g$665$19068 macro . trace-define) (g$665$19067 macro . trace-lambda) (g$665$19066 macro . unsyntax-splicing) (g$665$19065 macro . unsyntax) (g$665$19064 macro . unquote-splicing) (g$665$19063 macro . unquote) (g$665$19062 macro . _) (g$665$19061 macro . else) (g$665$19060 macro . =>) (g$665$19059 macro . |...|) (g$665$19058 macro . assert) (g$665$19057 macro . endianness) (g$665$19056 macro . delay) (g$665$19055 macro . time) (g$665$19054 macro . or) (g$665$19053 macro . and) (g$665$19052 macro . do) (g$665$19051 macro . cond) (g$665$19050 macro . let*) (g$665$19049 macro . let) (g$665$19048 macro . identifier-syntax) (g$665$19047 macro . with-syntax) (g$665$19046 macro . quasisyntax) (g$665$19045 macro . quasiquote) (g$665$19044 macro . syntax-rules) (g$665$19043 macro . include) (g$665$19042 macro . define-record) (g$665$19041 core-macro . let-values) (g$665$19040 core-macro . case) (g$665$19039 core-macro . parameterize) (g$665$19038 core-macro . unless) (g$665$19037 core-macro . when) (g$665$19036 core-macro . if) (g$665$19035 core-macro . letrec*) (g$665$19034 core-macro . letrec) (g$665$19033 core-macro . type-descriptor) (g$665$19032 core-macro . case-lambda) (g$665$19031 core-macro . lambda) (g$665$19030 core-macro . syntax) (g$665$19029 core-macro . syntax-case) (g$665$19028 core-macro . quote) (g$665$19027 core-macro . foreign-call) (g$665$19026 letrec-syntax) (g$665$19025 let-syntax) (g$665$19024 set!) (g$665$19023 import) (g$665$19022 begin) (g$665$19021 module) (g$665$19020 define-syntax) (g$665$19019 define)) values values '#f) (g$665$10649 'g$665$19759 '(psyntax system $bootstrap) '() '() '() '() '((pretty-print . g$665$19726) (eval-core . g$665$19725) (set-symbol-value! . g$665$19724) (symbol-value . g$665$19723) (gensym . g$665$19722) (void . g$665$19721)) '() values values '#f))


(begin (define g$665$19017 '#f) ((lambda (g$665$19001) (begin (set! g$665$19001 (lambda (g$665$19003) ((lambda (g$665$19005) (g$665$18819 g$665$19005)) (with-input-from-file g$665$19003 (lambda () (letrec ((g$665$19007 (lambda () ((lambda (g$665$19009) (if (eof-object? g$665$19009) '() (cons g$665$19009 (g$665$19007)))) (read))))) (g$665$19007))))))) (begin (set! g$665$19017 g$665$19001) (display '"r6rs psyntax ready\n") ((lambda (g$665$19011) (begin (if (= (length g$665$19011) '2) (void) (begin (display '"provide a script name argument\n") (exit '17))) ((lambda (g$665$19013 g$665$19014) (g$665$19001 (car g$665$19014))) (car g$665$19011) (cdr g$665$19011)))) (command-line)) (exit '0)))) '#f))


