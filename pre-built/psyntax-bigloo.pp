;;; Copyright (c) 2006, 2007 Abdulaziz Ghuloum and Kent Dybvig
;;; automatically generated from psyntax sources
;;; for copyright details, see psyntax/main.ss

(begin (define g$0$10133 (quote #f)) ((lambda (g$0$10028) (begin (set! g$0$10028 (lambda g$0$10129 ((lambda (g$0$10130) (if (= g$0$10130 (quote 1)) (apply (lambda (g$0$10115) (g$0$10028 g$0$10115 (lambda (g$0$10117) g$0$10117))) g$0$10129) (if (= g$0$10130 (quote 2)) (apply (lambda (g$0$10119 g$0$10120) (begin (if (procedure? g$0$10120) (void) (error (quote assert) (quote "~s failed") (quote (procedure? fender)))) ((lambda (g$0$10123) (lambda g$0$10127 ((lambda (g$0$10128) (if (= g$0$10128 (quote 0)) (apply (lambda () g$0$10123) g$0$10127) (if (= g$0$10128 (quote 1)) (apply (lambda (g$0$10125) (set! g$0$10123 (g$0$10120 g$0$10125))) g$0$10127) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10127)))) (g$0$10120 g$0$10119)))) g$0$10129) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10129)))) (set! g$0$10133 g$0$10028))) (quote #f)))


(begin (define g$0$10211 (quote #f)) (define g$0$10210 (quote #f)) (define g$0$10209 (quote #f)) (define g$0$10208 (quote #f)) (define g$0$10207 (quote #f)) (define g$0$10206 (quote #f)) ((lambda (g$0$10135 g$0$10137 g$0$10139 g$0$10141 g$0$10143 g$0$10145) (begin (set! g$0$10135 (g$0$10133 (lambda (g$0$10147) (quote #f)) (lambda (g$0$10149) (begin (if (procedure? g$0$10149) (void) (error (quote assert) (quote "~s failed") (quote (procedure? p)))) g$0$10149)))) (set! g$0$10137 (lambda (g$0$10151) ((lambda (g$0$10153) (begin (set! g$0$10153 (lambda (g$0$10155) ((lambda (g$0$10157) (if g$0$10157 g$0$10157 ((lambda (g$0$10159) (if g$0$10159 g$0$10159 ((lambda (g$0$10161) (if g$0$10161 g$0$10161 ((lambda (g$0$10163) (if g$0$10163 g$0$10163 (begin (quote #f) (number? g$0$10155)))) (boolean? g$0$10155)))) (symbol? g$0$10155)))) (char? g$0$10155)))) (null? g$0$10155)))) (not (g$0$10153 g$0$10151)))) (quote #f)))) (set! g$0$10139 (lambda (g$0$10165) ((lambda (g$0$10167) (begin (set! g$0$10167 (lambda (g$0$10169) (if (pair? g$0$10169) ((lambda (g$0$10171) (if (memv g$0$10171 (quote (quote))) (if (if g$0$10165 (begin (quote #f) (g$0$10137 (cadr g$0$10169))) (quote #f)) ((lambda (g$0$10196) (begin (set-symbol-value! g$0$10196 (cadr g$0$10169)) g$0$10196)) (gensym)) g$0$10169) (if (memv g$0$10171 (quote (case-lambda))) (cons (quote case-lambda) (map (lambda (g$0$10194) (cons (car g$0$10194) (map g$0$10167 (cdr g$0$10194)))) (cdr g$0$10169))) (if (memv g$0$10171 (quote (lambda))) (cons* (quote lambda) (cadr g$0$10169) (map g$0$10167 (cddr g$0$10169))) (if (memv g$0$10171 (quote (letrec))) ((lambda (g$0$10186 g$0$10187) ((lambda (g$0$10190 g$0$10191) (cons* (quote letrec) (map list g$0$10190 (map g$0$10167 g$0$10191)) (map g$0$10167 g$0$10187))) (map car g$0$10186) (map cadr g$0$10186))) (cadr g$0$10169) (cddr g$0$10169)) (if (memv g$0$10171 (quote (letrec*))) ((lambda (g$0$10178 g$0$10179) ((lambda (g$0$10182 g$0$10183) (cons* (quote letrec*) (map list g$0$10182 (map g$0$10167 g$0$10183)) (map g$0$10167 g$0$10179))) (map car g$0$10178) (map cadr g$0$10178))) (cadr g$0$10169) (cddr g$0$10169)) (if (memv g$0$10171 (quote (begin))) (cons (quote begin) (map g$0$10167 (cdr g$0$10169))) (if (memv g$0$10171 (quote (set!))) (list (quote set!) (cadr g$0$10169) (g$0$10167 (caddr g$0$10169))) (if (memv g$0$10171 (quote (primitive))) ((lambda (g$0$10172) ((lambda (g$0$10174) (if g$0$10174 ((lambda (g$0$10176) g$0$10176) g$0$10174) g$0$10172)) ((g$0$10135) g$0$10172))) (cadr g$0$10169)) (if (memv g$0$10171 (quote (define))) g$0$10169 (if (list? g$0$10169) (map g$0$10167 g$0$10169) (error (quote rewrite) (quote "invalid form ~s ~s") g$0$10169 (list? g$0$10169))))))))))))) (car g$0$10169)) g$0$10169))) g$0$10167)) (quote #f)))) (set! g$0$10141 ((lambda (g$0$10198) (not (eq? (eval-core (list (quote quote) g$0$10198)) (eval-core (list (quote quote) g$0$10198))))) (cons (quote 1) (quote 2)))) (set! g$0$10143 (lambda (g$0$10200) ((g$0$10139 g$0$10141) g$0$10200))) (set! g$0$10145 (lambda (g$0$10202 g$0$10203) (begin (pretty-print ((g$0$10139 (quote #f)) g$0$10202) g$0$10203) (newline g$0$10203)))) (begin (set! g$0$10206 g$0$10145) (set! g$0$10207 g$0$10143) (set! g$0$10208 g$0$10141) (set! g$0$10209 g$0$10139) (set! g$0$10210 g$0$10137) (set! g$0$10211 g$0$10135)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(void)


(begin (define g$0$10689 (quote #f)) (define g$0$10688 (quote #f)) (define g$0$10687 (quote #f)) (define g$0$10686 (quote #f)) (define g$0$10685 (quote #f)) (define g$0$10684 (quote #f)) (define g$0$10683 (quote #f)) (define g$0$10682 (quote #f)) (define g$0$10681 (quote #f)) (define g$0$10680 (quote #f)) (define g$0$10679 (quote #f)) (define g$0$10678 (quote #f)) (define g$0$10677 (quote #f)) (define g$0$10676 (quote #f)) (define g$0$10675 (quote #f)) (define g$0$10674 (quote #f)) (define g$0$10673 (quote #f)) (define g$0$10672 (quote #f)) (define g$0$10671 (quote #f)) (define g$0$10670 (quote #f)) (define g$0$10669 (quote #f)) (define g$0$10668 (quote #f)) (define g$0$10667 (quote #f)) (define g$0$10666 (quote #f)) (define g$0$10665 (quote #f)) (define g$0$10664 (quote #f)) (define g$0$10663 (quote #f)) (define g$0$10662 (quote #f)) (define g$0$10661 (quote #f)) (define g$0$10660 (quote #f)) (define g$0$10659 (quote #f)) (define g$0$10658 (quote #f)) (define g$0$10657 (quote #f)) (define g$0$10656 (quote #f)) (define g$0$10655 (quote #f)) (define g$0$10654 (quote #f)) (define g$0$10653 (quote #f)) (define g$0$10652 (quote #f)) (define g$0$10651 (quote #f)) (define g$0$10650 (quote #f)) (define g$0$10649 (quote #f)) (define g$0$10648 (quote #f)) (define g$0$10647 (quote #f)) (define g$0$10646 (quote #f)) (define g$0$10645 (quote #f)) (define g$0$10644 (quote #f)) (define g$0$10643 (quote #f)) (define g$0$10642 (quote #f)) (define g$0$10641 (quote #f)) ((lambda (g$0$10265 g$0$10267 g$0$10270 g$0$10272 g$0$10274 g$0$10276 g$0$10278 g$0$10280 g$0$10282 g$0$10284 g$0$10286 g$0$10288 g$0$10290 g$0$10292 g$0$10294 g$0$10296 g$0$10298 g$0$10300 g$0$10302 g$0$10304 g$0$10306 g$0$10308 g$0$10310 g$0$10312 g$0$10314 g$0$10316 g$0$10318 g$0$10320 g$0$10322 g$0$10324 g$0$10326 g$0$10328 g$0$10330 g$0$10332 g$0$10334 g$0$10336 g$0$10338 g$0$10340 g$0$10342 g$0$10344 g$0$10346 g$0$10348 g$0$10350 g$0$10352 g$0$10354 g$0$10356 g$0$10358 g$0$10360 g$0$10362) (begin (set! g$0$10265 (lambda () ((lambda (g$0$10364) ((lambda (g$0$10366) (begin (set! g$0$10366 (lambda (g$0$10368 g$0$10369) (if (memq g$0$10368 g$0$10369) g$0$10369 (cons g$0$10368 g$0$10369)))) (lambda g$0$10374 ((lambda (g$0$10375) (if (= g$0$10375 (quote 0)) (apply (lambda () g$0$10364) g$0$10374) (if (= g$0$10375 (quote 1)) (apply (lambda (g$0$10372) (set! g$0$10364 (g$0$10366 g$0$10372 g$0$10364))) g$0$10374) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10374))))) (quote #f))) (quote ())))) (set! g$0$10267 (g$0$10133 (g$0$10265) (lambda (g$0$10376) (begin (if (procedure? g$0$10376) (void) (error (quote current-library-collection) (quote "~s is not a procedure") g$0$10376)) g$0$10376)))) (set! g$0$10270 (lambda (g$0$10378 g$0$10379 g$0$10380 g$0$10381 g$0$10382 g$0$10383 g$0$10384 g$0$10385 g$0$10386 g$0$10387 g$0$10388) (vector (quote g$0$10269) g$0$10378 g$0$10379 g$0$10380 g$0$10381 g$0$10382 g$0$10383 g$0$10384 g$0$10385 g$0$10386 g$0$10387 g$0$10388))) (set! g$0$10272 (lambda (g$0$10400) (if (vector? g$0$10400) (if (= (vector-length g$0$10400) (+ (quote 1) (length (quote (id name ver imp* vis* inv* subst env visit-state invoke-state visible?))))) (begin (quote #f) (eq? (vector-ref g$0$10400 (quote 0)) (quote g$0$10269))) (quote #f)) (quote #f)))) (set! g$0$10274 (lambda (g$0$10402) (if (g$0$10272 g$0$10402) (vector-ref g$0$10402 (quote 1)) (error (quote library-id) (quote "~s is not of type ~s") g$0$10402 (quote library))))) (set! g$0$10276 (lambda (g$0$10404) (if (g$0$10272 g$0$10404) (vector-ref g$0$10404 (quote 2)) (error (quote library-name) (quote "~s is not of type ~s") g$0$10404 (quote library))))) (set! g$0$10278 (lambda (g$0$10406) (if (g$0$10272 g$0$10406) (vector-ref g$0$10406 (quote 3)) (error (quote library-ver) (quote "~s is not of type ~s") g$0$10406 (quote library))))) (set! g$0$10280 (lambda (g$0$10408) (if (g$0$10272 g$0$10408) (vector-ref g$0$10408 (quote 4)) (error (quote library-imp*) (quote "~s is not of type ~s") g$0$10408 (quote library))))) (set! g$0$10282 (lambda (g$0$10410) (if (g$0$10272 g$0$10410) (vector-ref g$0$10410 (quote 5)) (error (quote library-vis*) (quote "~s is not of type ~s") g$0$10410 (quote library))))) (set! g$0$10284 (lambda (g$0$10412) (if (g$0$10272 g$0$10412) (vector-ref g$0$10412 (quote 6)) (error (quote library-inv*) (quote "~s is not of type ~s") g$0$10412 (quote library))))) (set! g$0$10286 (lambda (g$0$10414) (if (g$0$10272 g$0$10414) (vector-ref g$0$10414 (quote 7)) (error (quote library-subst) (quote "~s is not of type ~s") g$0$10414 (quote library))))) (set! g$0$10288 (lambda (g$0$10416) (if (g$0$10272 g$0$10416) (vector-ref g$0$10416 (quote 8)) (error (quote library-env) (quote "~s is not of type ~s") g$0$10416 (quote library))))) (set! g$0$10290 (lambda (g$0$10418) (if (g$0$10272 g$0$10418) (vector-ref g$0$10418 (quote 9)) (error (quote library-visit-state) (quote "~s is not of type ~s") g$0$10418 (quote library))))) (set! g$0$10292 (lambda (g$0$10420) (if (g$0$10272 g$0$10420) (vector-ref g$0$10420 (quote 10)) (error (quote library-invoke-state) (quote "~s is not of type ~s") g$0$10420 (quote library))))) (set! g$0$10294 (lambda (g$0$10422) (if (g$0$10272 g$0$10422) (vector-ref g$0$10422 (quote 11)) (error (quote library-visible?) (quote "~s is not of type ~s") g$0$10422 (quote library))))) (set! g$0$10296 (lambda (g$0$10424 g$0$10425) (if (g$0$10272 g$0$10424) (vector-set! g$0$10424 (quote 1) g$0$10425) (error (quote set-library-id!) (quote "~s is not of type ~s") g$0$10424 (quote library))))) (set! g$0$10298 (lambda (g$0$10428 g$0$10429) (if (g$0$10272 g$0$10428) (vector-set! g$0$10428 (quote 2) g$0$10429) (error (quote set-library-name!) (quote "~s is not of type ~s") g$0$10428 (quote library))))) (set! g$0$10300 (lambda (g$0$10432 g$0$10433) (if (g$0$10272 g$0$10432) (vector-set! g$0$10432 (quote 3) g$0$10433) (error (quote set-library-ver!) (quote "~s is not of type ~s") g$0$10432 (quote library))))) (set! g$0$10302 (lambda (g$0$10436 g$0$10437) (if (g$0$10272 g$0$10436) (vector-set! g$0$10436 (quote 4) g$0$10437) (error (quote set-library-imp*!) (quote "~s is not of type ~s") g$0$10436 (quote library))))) (set! g$0$10304 (lambda (g$0$10440 g$0$10441) (if (g$0$10272 g$0$10440) (vector-set! g$0$10440 (quote 5) g$0$10441) (error (quote set-library-vis*!) (quote "~s is not of type ~s") g$0$10440 (quote library))))) (set! g$0$10306 (lambda (g$0$10444 g$0$10445) (if (g$0$10272 g$0$10444) (vector-set! g$0$10444 (quote 6) g$0$10445) (error (quote set-library-inv*!) (quote "~s is not of type ~s") g$0$10444 (quote library))))) (set! g$0$10308 (lambda (g$0$10448 g$0$10449) (if (g$0$10272 g$0$10448) (vector-set! g$0$10448 (quote 7) g$0$10449) (error (quote set-library-subst!) (quote "~s is not of type ~s") g$0$10448 (quote library))))) (set! g$0$10310 (lambda (g$0$10452 g$0$10453) (if (g$0$10272 g$0$10452) (vector-set! g$0$10452 (quote 8) g$0$10453) (error (quote set-library-env!) (quote "~s is not of type ~s") g$0$10452 (quote library))))) (set! g$0$10312 (lambda (g$0$10456 g$0$10457) (if (g$0$10272 g$0$10456) (vector-set! g$0$10456 (quote 9) g$0$10457) (error (quote set-library-visit-state!) (quote "~s is not of type ~s") g$0$10456 (quote library))))) (set! g$0$10314 (lambda (g$0$10460 g$0$10461) (if (g$0$10272 g$0$10460) (vector-set! g$0$10460 (quote 10) g$0$10461) (error (quote set-library-invoke-state!) (quote "~s is not of type ~s") g$0$10460 (quote library))))) (set! g$0$10316 (lambda (g$0$10464 g$0$10465) (if (g$0$10272 g$0$10464) (vector-set! g$0$10464 (quote 11) g$0$10465) (error (quote set-library-visible?!) (quote "~s is not of type ~s") g$0$10464 (quote library))))) (set! g$0$10318 (lambda (g$0$10468) (if (null? g$0$10468) (quote ()) (error (quote find-dependencies) (quote "cannot handle deps yet"))))) (set! g$0$10320 (lambda (g$0$10470) (letrec ((g$0$10472 (lambda (g$0$10474) (if (null? g$0$10474) (quote #f) (if (g$0$10470 (car g$0$10474)) (car g$0$10474) (g$0$10472 (cdr g$0$10474))))))) (g$0$10472 ((g$0$10267)))))) (set! g$0$10322 (g$0$10133 (quote (".")) (lambda (g$0$10476) (if (if (list? g$0$10476) (begin (quote #f) (for-all string? g$0$10476)) (quote #f)) (map (lambda (g$0$10478) g$0$10478) g$0$10476) (error (quote library-path) (quote "~s is not a list of strings") g$0$10476))))) (set! g$0$10324 (lambda (g$0$10480) (call-with-values (lambda () (open-string-output-port)) (lambda (g$0$10482 g$0$10483) ((lambda (g$0$10486) (begin (set! g$0$10486 (lambda (g$0$10488) (if (<= (quote 0) g$0$10488 (quote 9)) (display g$0$10488 g$0$10482) (display (integer->char (+ (char->integer (quote #\A)) (- g$0$10488 (quote 10)))) g$0$10482)))) (begin (letrec ((g$0$10490 (lambda (g$0$10492) (if (null? g$0$10492) (display (quote ".ss") g$0$10482) (begin (display (quote "/") g$0$10482) (for-each (lambda (g$0$10494) (if ((lambda (g$0$10496) (if g$0$10496 g$0$10496 ((lambda (g$0$10498) (if g$0$10498 g$0$10498 ((lambda (g$0$10500) (if g$0$10500 g$0$10500 (begin (quote #f) (memv g$0$10494 (quote (#\- #\. #\_ #\~)))))) (char<=? (quote #\0) g$0$10494 (quote #\9))))) (char<=? (quote #\A) g$0$10494 (quote #\Z))))) (char<=? (quote #\a) g$0$10494 (quote #\z))) (display g$0$10494 g$0$10482) (begin (display (quote "%") g$0$10482) ((lambda (g$0$10502) (begin (g$0$10486 (quotient g$0$10502 (quote 16))) (g$0$10486 (remainder g$0$10502 (quote 16))))) (char->integer g$0$10494))))) (string->list (symbol->string (car g$0$10492)))) (g$0$10490 (cdr g$0$10492))))))) (g$0$10490 g$0$10480)) (g$0$10483)))) (quote #f)))))) (set! g$0$10326 (g$0$10133 (lambda (g$0$10504) ((lambda (g$0$10506) (letrec ((g$0$10508 (lambda (g$0$10510) (if (pair? g$0$10510) (begin (quote #f) ((lambda (g$0$10512) (if (file-exists? g$0$10512) g$0$10512 (g$0$10508 (cdr g$0$10510)))) (string-append (car g$0$10510) g$0$10506))) (quote #f))))) (g$0$10508 (g$0$10322)))) (g$0$10324 g$0$10504))) (lambda (g$0$10514) (if (procedure? g$0$10514) g$0$10514 (error (quote file-locator) (quote "~s is not a procedure") g$0$10514))))) (set! g$0$10328 (g$0$10133 (lambda (g$0$10516) ((lambda (g$0$10518) (if (string? g$0$10518) (begin (quote #f) (with-input-from-file g$0$10518 read)) (quote #f))) ((g$0$10326) g$0$10516))) (lambda (g$0$10520) (if (procedure? g$0$10520) g$0$10520 (error (quote library-locator) (quote "~s is not a procedure") g$0$10520))))) (set! g$0$10330 (g$0$10133 (lambda (g$0$10522) (error (quote library-expander) (quote "not initialized"))) (lambda (g$0$10524) (if (procedure? g$0$10524) g$0$10524 (error (quote library-expander) (quote "~s is not a procedure") g$0$10524))))) (set! g$0$10332 (g$0$10133 (quote ()))) (set! g$0$10334 (lambda (g$0$10526) (begin (if (member g$0$10526 (g$0$10332)) (error (quote #f) (quote "circular attempt to import library ~s detected") g$0$10526) (void)) ((lambda (g$0$10530 g$0$10531) ((lambda (g$0$10534) (dynamic-wind g$0$10534 (lambda () ((lambda (g$0$10536) (begin (if g$0$10536 (void) (error (quote #f) (quote "cannot find library ~s") g$0$10526)) ((g$0$10330) g$0$10536) ((lambda (g$0$10538) (if g$0$10538 g$0$10538 (begin (quote #f) (error (quote #f) (quote "handling external library of ~s did not yield the currect library") g$0$10526)))) (g$0$10320 (lambda (g$0$10540) (equal? (g$0$10276 g$0$10540) g$0$10526)))))) ((g$0$10328) g$0$10526))) g$0$10534)) (lambda () ((lambda (g$0$10542) (begin (g$0$10530 g$0$10531) (set! g$0$10531 g$0$10542))) (g$0$10530))))) g$0$10332 (cons g$0$10526 (g$0$10332)))))) (set! g$0$10336 (lambda (g$0$10544) ((lambda (g$0$10546) (if g$0$10546 g$0$10546 (begin (quote #f) (g$0$10334 g$0$10544)))) (g$0$10320 (lambda (g$0$10548) (equal? (g$0$10276 g$0$10548) g$0$10544)))))) (set! g$0$10338 (lambda (g$0$10550) (if (g$0$10320 (lambda (g$0$10552) (equal? (g$0$10276 g$0$10552) g$0$10550))) (begin (quote #f) (quote #t)) (quote #f)))) (set! g$0$10340 (lambda (g$0$10554) ((lambda (g$0$10556) ((lambda (g$0$10558) (if g$0$10558 g$0$10558 (begin (quote #f) (error (quote #f) (quote "cannot find library with spec ~s") g$0$10554)))) (g$0$10320 (lambda (g$0$10560) (eq? g$0$10556 (g$0$10274 g$0$10560)))))) (car g$0$10554)))) (set! g$0$10342 (make-eq-hashtable)) (set! g$0$10344 (lambda (g$0$10562) (begin ((lambda (g$0$10564) (for-each (lambda (g$0$10566) ((lambda (g$0$10568 g$0$10569) ((lambda (g$0$10572) (hashtable-set! g$0$10342 g$0$10568 g$0$10572)) ((lambda (g$0$10574) (if (memv g$0$10574 (quote (global))) (cons (quote global) (cons g$0$10562 (cdr g$0$10569))) (if (memv g$0$10574 (quote (global-macro))) (cons (quote global-macro) (cons g$0$10562 (cdr g$0$10569))) (if (memv g$0$10574 (quote (global-macro!))) (cons (quote global-macro!) (cons g$0$10562 (cdr g$0$10569))) g$0$10569)))) (car g$0$10569)))) (car g$0$10566) (cdr g$0$10566))) g$0$10564)) (g$0$10288 g$0$10562)) ((g$0$10267) g$0$10562)))) (set! g$0$10346 (lambda (g$0$10575 g$0$10576 g$0$10577 g$0$10578 g$0$10579 g$0$10580 g$0$10581 g$0$10582 g$0$10583 g$0$10584 g$0$10585) ((lambda (g$0$10597 g$0$10598 g$0$10599) (begin (if (if (symbol? g$0$10575) (if (list? g$0$10576) (begin (quote #f) (list? g$0$10577)) (quote #f)) (quote #f)) (void) (error (quote install-library) (quote "invalid spec ~s ~s ~s") g$0$10575 g$0$10576 g$0$10577)) (if (g$0$10338 g$0$10576) (error (quote install-library) (quote "~s is already installed") g$0$10576) (void)) ((lambda (g$0$10603) (g$0$10344 g$0$10603)) (g$0$10270 g$0$10575 g$0$10576 g$0$10577 g$0$10597 g$0$10598 g$0$10599 g$0$10581 g$0$10582 g$0$10583 g$0$10584 g$0$10585)))) (map g$0$10340 g$0$10578) (map g$0$10340 g$0$10579) (map g$0$10340 g$0$10580)))) (set! g$0$10348 (lambda (g$0$10605 g$0$10606 g$0$10607) (g$0$10308 g$0$10605 (cons (cons g$0$10606 g$0$10607) (g$0$10286 g$0$10605))))) (set! g$0$10350 (lambda (g$0$10611 g$0$10612 g$0$10613) (begin (g$0$10310 g$0$10611 (cons (cons g$0$10612 g$0$10613) (g$0$10288 g$0$10611))) (hashtable-set! g$0$10342 g$0$10612 g$0$10613)))) (set! g$0$10352 (lambda (g$0$10617) (hashtable-ref g$0$10342 g$0$10617 (quote #f)))) (set! g$0$10354 (lambda (g$0$10619) ((lambda (g$0$10621) (if (procedure? g$0$10621) (begin (g$0$10314 g$0$10619 (lambda () (error (quote invoke) (quote "circularity detected for ~s") g$0$10619))) (for-each g$0$10354 (g$0$10284 g$0$10619)) (g$0$10314 g$0$10619 (lambda () (error (quote invoke) (quote "first invoke did not return for ~s") g$0$10619))) (g$0$10621) (g$0$10314 g$0$10619 (quote #t))) (void))) (g$0$10292 g$0$10619)))) (set! g$0$10356 (lambda (g$0$10623) ((lambda (g$0$10625) (if (procedure? g$0$10625) (begin (g$0$10312 g$0$10623 (lambda () (error (quote visit) (quote "circularity detected for ~s") g$0$10623))) (for-each g$0$10354 (g$0$10282 g$0$10623)) (g$0$10312 g$0$10623 (lambda () (error (quote invoke) (quote "first visit did not return for ~s") g$0$10623))) (g$0$10625) (g$0$10312 g$0$10623 (quote #t))) (void))) (g$0$10290 g$0$10623)))) (set! g$0$10358 (lambda (g$0$10627) (g$0$10354 (g$0$10340 g$0$10627)))) (set! g$0$10360 (lambda g$0$10637 ((lambda (g$0$10638) (if (= g$0$10638 (quote 1)) (apply (lambda (g$0$10629) (letrec ((g$0$10631 (lambda (g$0$10633) (if (null? g$0$10633) (quote ()) (if ((lambda (g$0$10635) (if g$0$10635 g$0$10635 (begin (quote #f) (g$0$10294 (car g$0$10633))))) g$0$10629) (cons (car g$0$10633) (g$0$10631 (cdr g$0$10633))) (g$0$10631 (cdr g$0$10633))))))) (g$0$10631 ((g$0$10267))))) g$0$10637) (if (= g$0$10638 (quote 0)) (apply (lambda () (g$0$10360 (quote #f))) g$0$10637) (error (quote apply) (quote "invalid arg count"))))) (length g$0$10637)))) (set! g$0$10362 (lambda (g$0$10639) (begin (if (g$0$10272 g$0$10639) (void) (error (quote library-spec) (quote "~s is not a library") g$0$10639)) (list (g$0$10274 g$0$10639) (g$0$10276 g$0$10639) (g$0$10278 g$0$10639))))) (begin (set! g$0$10641 g$0$10362) (set! g$0$10642 g$0$10360) (set! g$0$10643 g$0$10358) (set! g$0$10644 g$0$10356) (set! g$0$10645 g$0$10354) (set! g$0$10646 g$0$10352) (set! g$0$10647 g$0$10350) (set! g$0$10648 g$0$10348) (set! g$0$10649 g$0$10346) (set! g$0$10650 g$0$10344) (set! g$0$10651 g$0$10342) (set! g$0$10652 g$0$10340) (set! g$0$10653 g$0$10338) (set! g$0$10654 g$0$10336) (set! g$0$10655 g$0$10334) (set! g$0$10656 g$0$10332) (set! g$0$10657 g$0$10330) (set! g$0$10658 g$0$10328) (set! g$0$10659 g$0$10326) (set! g$0$10660 g$0$10324) (set! g$0$10661 g$0$10322) (set! g$0$10662 g$0$10320) (set! g$0$10663 g$0$10318) (set! g$0$10664 g$0$10316) (set! g$0$10665 g$0$10314) (set! g$0$10666 g$0$10312) (set! g$0$10667 g$0$10310) (set! g$0$10668 g$0$10308) (set! g$0$10669 g$0$10306) (set! g$0$10670 g$0$10304) (set! g$0$10671 g$0$10302) (set! g$0$10672 g$0$10300) (set! g$0$10673 g$0$10298) (set! g$0$10674 g$0$10296) (set! g$0$10675 g$0$10294) (set! g$0$10676 g$0$10292) (set! g$0$10677 g$0$10290) (set! g$0$10678 g$0$10288) (set! g$0$10679 g$0$10286) (set! g$0$10680 g$0$10284) (set! g$0$10681 g$0$10282) (set! g$0$10682 g$0$10280) (set! g$0$10683 g$0$10278) (set! g$0$10684 g$0$10276) (set! g$0$10685 g$0$10274) (set! g$0$10686 g$0$10272) (set! g$0$10687 g$0$10270) (set! g$0$10688 g$0$10267) (set! g$0$10689 g$0$10265)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$10937 (quote #f)) (define g$0$10929 (quote #f)) (define g$0$10928 (quote #f)) (define g$0$10927 (quote #f)) (define g$0$10923 (quote #f)) (define g$0$10922 (quote #f)) (define g$0$10921 (quote #f)) (define g$0$10920 (quote #f)) ((lambda (g$0$10691 g$0$10768 g$0$10770 g$0$10772 g$0$10810 g$0$10812 g$0$10814 g$0$10816) (begin (set! g$0$10691 (lambda (g$0$10818) (cons (quote define) (cons g$0$10818 (quote ((quote #f))))))) (set! g$0$10768 (lambda (g$0$10820 g$0$10821 g$0$10822) (list (quote lambda) g$0$10821 g$0$10822))) (set! g$0$10770 (lambda (g$0$10826 g$0$10827 g$0$10828) ((lambda (g$0$10832 g$0$10834 g$0$10836 g$0$10838) (begin (set! g$0$10832 (lambda (g$0$10880) (list (quote (primitive error)) (quote (quote apply)) (list (quote quote) (quote "invalid arg count"))))) (set! g$0$10834 (lambda (g$0$10864 g$0$10865 g$0$10866) (call-with-values (lambda () (letrec ((g$0$10870 (lambda (g$0$10872 g$0$10873) (if (pair? g$0$10872) (g$0$10870 (cdr g$0$10872) (+ g$0$10873 (quote 1))) (if (null? g$0$10872) (values g$0$10873 (quote =)) (values g$0$10873 (quote >=))))))) (g$0$10870 g$0$10866 (quote 0)))) (lambda (g$0$10876 g$0$10877) (list (list (quote primitive) g$0$10877) g$0$10865 (list (quote quote) g$0$10876)))))) (set! g$0$10836 (lambda (g$0$10856 g$0$10857 g$0$10858 g$0$10859) (list (quote (primitive apply)) (g$0$10768 g$0$10856 g$0$10858 g$0$10859) g$0$10857))) (set! g$0$10838 (lambda (g$0$10840 g$0$10841 g$0$10842) ((lambda (g$0$10846 g$0$10847) (list (quote lambda) g$0$10846 (g$0$10772 g$0$10840 (list g$0$10847) (list (list (quote (primitive length)) g$0$10846)) (letrec ((g$0$10850 (lambda (g$0$10852 g$0$10853) (if (null? g$0$10852) (g$0$10832 g$0$10840) (list (quote if) (g$0$10834 g$0$10840 g$0$10847 (car g$0$10852)) (g$0$10836 g$0$10840 g$0$10846 (car g$0$10852) (car g$0$10853)) (g$0$10850 (cdr g$0$10852) (cdr g$0$10853))))))) (g$0$10850 g$0$10827 g$0$10842))))) (gensym) (gensym)))) (if (= (length g$0$10828) (quote 1)) (g$0$10768 g$0$10826 (car g$0$10827) (car g$0$10828)) (g$0$10838 g$0$10826 g$0$10827 g$0$10828)))) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$10772 (lambda (g$0$10882 g$0$10883 g$0$10884 g$0$10885) (cons (g$0$10768 g$0$10882 g$0$10883 g$0$10885) g$0$10884))) (set! g$0$10810 (lambda (g$0$10890 g$0$10891) (letrec ((g$0$10894 (lambda (g$0$10896) (if (null? (cdr g$0$10896)) (car g$0$10896) (if (equal? (car g$0$10896) (g$0$10812)) (g$0$10894 (cdr g$0$10896)) (cons (quote begin) g$0$10896)))))) (g$0$10894 g$0$10891)))) (set! g$0$10812 (lambda () (quote ((primitive void))))) (set! g$0$10814 (lambda (g$0$10898 g$0$10899 g$0$10900 g$0$10901) (if (null? g$0$10899) g$0$10901 (list (quote letrec) (map list g$0$10899 g$0$10900) g$0$10901)))) (set! g$0$10816 (lambda (g$0$10906 g$0$10907 g$0$10908 g$0$10909) (if (null? g$0$10907) g$0$10909 (g$0$10772 g$0$10906 g$0$10907 (map (lambda (g$0$10914) (list (quote quote) (quote #f))) g$0$10907) (g$0$10810 g$0$10906 (append (map (lambda (g$0$10916 g$0$10917) (list (quote set!) g$0$10916 g$0$10917)) g$0$10907 g$0$10908) (list g$0$10909))))))) (begin (set! g$0$10920 g$0$10816) (set! g$0$10921 g$0$10814) (set! g$0$10922 g$0$10812) (set! g$0$10923 g$0$10810) (set! g$0$10927 g$0$10772) (set! g$0$10928 g$0$10770) (set! g$0$10929 g$0$10768) (set! g$0$10937 g$0$10691)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (define g$0$18999 (quote #f)) (define g$0$18998 (quote #f)) (define g$0$18996 (quote #f)) (define g$0$18995 (quote #f)) (define g$0$18994 (quote #f)) (define g$0$18993 (quote #f)) (define g$0$18992 (quote #f)) (define g$0$18991 (quote #f)) (define g$0$18990 (quote #f)) (define g$0$18989 (quote #f)) (define g$0$18988 (quote #f)) (define g$0$18987 (quote #f)) (define g$0$18986 (quote #f)) (define g$0$18985 (quote #f)) (define g$0$18984 (quote #f)) (define g$0$18983 (quote #f)) (define g$0$18982 (quote #f)) (define g$0$18981 (quote #f)) (define g$0$18980 (quote #f)) (define g$0$18979 (quote #f)) (define g$0$18978 (quote #f)) (define g$0$18977 (quote #f)) (define g$0$18976 (quote #f)) (define g$0$18975 (quote #f)) (define g$0$18974 (quote #f)) (define g$0$18973 (quote #f)) (define g$0$18972 (quote #f)) (define g$0$18971 (quote #f)) (define g$0$18970 (quote #f)) (define g$0$18969 (quote #f)) (define g$0$18968 (quote #f)) (define g$0$18967 (quote #f)) (define g$0$18966 (quote #f)) (define g$0$18965 (quote #f)) (define g$0$18964 (quote #f)) (define g$0$18963 (quote #f)) (define g$0$18962 (quote #f)) (define g$0$18961 (quote #f)) (define g$0$18960 (quote #f)) (define g$0$18959 (quote #f)) (define g$0$18958 (quote #f)) (define g$0$18957 (quote #f)) (define g$0$18956 (quote #f)) (define g$0$18955 (quote #f)) (define g$0$18954 (quote #f)) (define g$0$18953 (quote #f)) (define g$0$18952 (quote #f)) (define g$0$18951 (quote #f)) (define g$0$18950 (quote #f)) (define g$0$18949 (quote #f)) (define g$0$18948 (quote #f)) (define g$0$18947 (quote #f)) (define g$0$18946 (quote #f)) (define g$0$18945 (quote #f)) (define g$0$18944 (quote #f)) (define g$0$18943 (quote #f)) (define g$0$18942 (quote #f)) (define g$0$18941 (quote #f)) (define g$0$18940 (quote #f)) (define g$0$18939 (quote #f)) (define g$0$18938 (quote #f)) (define g$0$18937 (quote #f)) (define g$0$18936 (quote #f)) (define g$0$18935 (quote #f)) (define g$0$18934 (quote #f)) (define g$0$18932 (quote #f)) (define g$0$18931 (quote #f)) (define g$0$18930 (quote #f)) (define g$0$18928 (quote #f)) (define g$0$18927 (quote #f)) (define g$0$18926 (quote #f)) (define g$0$18925 (quote #f)) (define g$0$18924 (quote #f)) (define g$0$18923 (quote #f)) (define g$0$18922 (quote #f)) (define g$0$18921 (quote #f)) (define g$0$18920 (quote #f)) (define g$0$18919 (quote #f)) (define g$0$18918 (quote #f)) (define g$0$18917 (quote #f)) (define g$0$18916 (quote #f)) (define g$0$18915 (quote #f)) (define g$0$18914 (quote #f)) (define g$0$18913 (quote #f)) (define g$0$18912 (quote #f)) (define g$0$18911 (quote #f)) (define g$0$18910 (quote #f)) (define g$0$18909 (quote #f)) (define g$0$18908 (quote #f)) (define g$0$18907 (quote #f)) (define g$0$18906 (quote #f)) (define g$0$18905 (quote #f)) (define g$0$18904 (quote #f)) (define g$0$18903 (quote #f)) (define g$0$18902 (quote #f)) (define g$0$18901 (quote #f)) (define g$0$18900 (quote #f)) (define g$0$18899 (quote #f)) (define g$0$18898 (quote #f)) (define g$0$18897 (quote #f)) (define g$0$18896 (quote #f)) (define g$0$18895 (quote #f)) (define g$0$18894 (quote #f)) (define g$0$18893 (quote #f)) (define g$0$18892 (quote #f)) (define g$0$18891 (quote #f)) (define g$0$18890 (quote #f)) (define g$0$18889 (quote #f)) (define g$0$18888 (quote #f)) (define g$0$18887 (quote #f)) (define g$0$18886 (quote #f)) (define g$0$18885 (quote #f)) (define g$0$18884 (quote #f)) (define g$0$18883 (quote #f)) (define g$0$18882 (quote #f)) (define g$0$18881 (quote #f)) (define g$0$18880 (quote #f)) (define g$0$18879 (quote #f)) (define g$0$18878 (quote #f)) (define g$0$18877 (quote #f)) (define g$0$18876 (quote #f)) (define g$0$18875 (quote #f)) (define g$0$18874 (quote #f)) (define g$0$18873 (quote #f)) (define g$0$18872 (quote #f)) (define g$0$18871 (quote #f)) (define g$0$18870 (quote #f)) (define g$0$18869 (quote #f)) (define g$0$18868 (quote #f)) (define g$0$18867 (quote #f)) (define g$0$18866 (quote #f)) (define g$0$18865 (quote #f)) (define g$0$18864 (quote #f)) (define g$0$18863 (quote #f)) (define g$0$18862 (quote #f)) (define g$0$18861 (quote #f)) (define g$0$18860 (quote #f)) (define g$0$18859 (quote #f)) (define g$0$18858 (quote #f)) (define g$0$18857 (quote #f)) (define g$0$18856 (quote #f)) (define g$0$18855 (quote #f)) (define g$0$18854 (quote #f)) (define g$0$18853 (quote #f)) (define g$0$18852 (quote #f)) (define g$0$18851 (quote #f)) (define g$0$18850 (quote #f)) (define g$0$18849 (quote #f)) (define g$0$18848 (quote #f)) (define g$0$18847 (quote #f)) (define g$0$18846 (quote #f)) (define g$0$18845 (quote #f)) (define g$0$18844 (quote #f)) (define g$0$18843 (quote #f)) (define g$0$18842 (quote #f)) (define g$0$18841 (quote #f)) (define g$0$18840 (quote #f)) (define g$0$18839 (quote #f)) (define g$0$18838 (quote #f)) (define g$0$18837 (quote #f)) (define g$0$18836 (quote #f)) (define g$0$18835 (quote #f)) (define g$0$18834 (quote #f)) (define g$0$18833 (quote #f)) (define g$0$18832 (quote #f)) (define g$0$18831 (quote #f)) (define g$0$18830 (quote #f)) (define g$0$18829 (quote #f)) (define g$0$18828 (quote #f)) (define g$0$18827 (quote #f)) (define g$0$18826 (quote #f)) (define g$0$18825 (quote #f)) (define g$0$18824 (quote #f)) (define g$0$18823 (quote #f)) (define g$0$18822 (quote #f)) (define g$0$18821 (quote #f)) (define g$0$18820 (quote #f)) (define g$0$18819 (quote #f)) (define g$0$18818 (quote #f)) (define g$0$18817 (quote #f)) (define g$0$18816 (quote #f)) ((lambda (g$0$10939 g$0$10941 g$0$10946 g$0$10948 g$0$10950 g$0$10952 g$0$10954 g$0$10957 g$0$10959 g$0$10961 g$0$10963 g$0$10965 g$0$10967 g$0$10969 g$0$10971 g$0$10973 g$0$10975 g$0$10977 g$0$10979 g$0$10981 g$0$10983 g$0$10985 g$0$10987 g$0$10990 g$0$10992 g$0$10994 g$0$10996 g$0$10998 g$0$11000 g$0$11002 g$0$11004 g$0$11006 g$0$11008 g$0$11010 g$0$11012 g$0$11014 g$0$11016 g$0$11018 g$0$11020 g$0$11022 g$0$11024 g$0$11026 g$0$11028 g$0$11030 g$0$11032 g$0$11034 g$0$11036 g$0$11038 g$0$11040 g$0$11042 g$0$11044 g$0$11046 g$0$11048 g$0$11050 g$0$11052 g$0$11054 g$0$11056 g$0$11058 g$0$11060 g$0$11062 g$0$11064 g$0$11066 g$0$11068 g$0$11070 g$0$11072 g$0$11086 g$0$11088 g$0$11090 g$0$11289 g$0$11291 g$0$11293 g$0$11295 g$0$11297 g$0$11299 g$0$11301 g$0$11303 g$0$11305 g$0$11307 g$0$11309 g$0$11311 g$0$11313 g$0$11315 g$0$11317 g$0$11319 g$0$11321 g$0$11323 g$0$11325 g$0$11327 g$0$11329 g$0$11331 g$0$11333 g$0$11335 g$0$11337 g$0$11339 g$0$11341 g$0$11343 g$0$11345 g$0$11347 g$0$11349 g$0$11351 g$0$11353 g$0$11355 g$0$11357 g$0$11359 g$0$11361 g$0$11363 g$0$11365 g$0$11367 g$0$11369 g$0$11371 g$0$11373 g$0$11375 g$0$11377 g$0$11379 g$0$11381 g$0$11383 g$0$11385 g$0$11387 g$0$11389 g$0$11391 g$0$11393 g$0$11395 g$0$11397 g$0$11399 g$0$11401 g$0$11403 g$0$11405 g$0$11407 g$0$11409 g$0$11411 g$0$11413 g$0$11415 g$0$11417 g$0$11419 g$0$11421 g$0$11423 g$0$11425 g$0$11427 g$0$11429 g$0$11431 g$0$11433 g$0$11435 g$0$11437 g$0$11439 g$0$11441 g$0$11443 g$0$11445 g$0$11447 g$0$11449 g$0$11451 g$0$11453 g$0$11455 g$0$11458 g$0$11460 g$0$11462 g$0$11464 g$0$11466 g$0$11468 g$0$11470 g$0$11472 g$0$11474 g$0$11476 g$0$11478 g$0$11480 g$0$11482 g$0$11484 g$0$11486 g$0$11488 g$0$11490 g$0$11492 g$0$11494 g$0$11496 g$0$11498 g$0$11500 g$0$11502 g$0$11504 g$0$11506 g$0$11508 g$0$11510 g$0$11512 g$0$11514) (begin (set! g$0$10939 (lambda (g$0$11516 g$0$11517) (if (memq g$0$11516 g$0$11517) g$0$11517 (cons g$0$11516 g$0$11517)))) (set! g$0$10941 (lambda (g$0$11520 g$0$11521) (if (null? g$0$11520) g$0$11521 (if (memq (car g$0$11520) g$0$11521) (g$0$10941 (cdr g$0$11520) g$0$11521) (cons (car g$0$11520) (g$0$10941 (cdr g$0$11520) g$0$11521)))))) (set! g$0$10946 (quote (top))) (set! g$0$10948 (lambda (g$0$11524) (memq (quote top) g$0$11524))) (set! g$0$10950 (lambda (g$0$11526) (if (symbol? g$0$11526) (gensym g$0$11526) (if (g$0$10992 g$0$11526) (g$0$10950 (g$0$11042 g$0$11526)) (error (quote gen-lexical) (quote "BUG: invalid arg ~s") g$0$11526))))) (set! g$0$10952 (lambda (g$0$11528) (g$0$10950 g$0$11528))) (set! g$0$10954 (lambda (g$0$11530) (gensym))) (set! g$0$10957 (lambda (g$0$11532 g$0$11533 g$0$11534 g$0$11535) (vector (quote g$0$10956) g$0$11532 g$0$11533 g$0$11534 g$0$11535))) (set! g$0$10959 (lambda (g$0$11540) (if (vector? g$0$11540) (if (= (vector-length g$0$11540) (+ (quote 1) (length (quote (sym* mark** label* sealed/freq))))) (begin (quote #f) (eq? (vector-ref g$0$11540 (quote 0)) (quote g$0$10956))) (quote #f)) (quote #f)))) (set! g$0$10961 (lambda (g$0$11542) (if (g$0$10959 g$0$11542) (vector-ref g$0$11542 (quote 1)) (error (quote rib-sym*) (quote "~s is not of type ~s") g$0$11542 (quote rib))))) (set! g$0$10963 (lambda (g$0$11544) (if (g$0$10959 g$0$11544) (vector-ref g$0$11544 (quote 2)) (error (quote rib-mark**) (quote "~s is not of type ~s") g$0$11544 (quote rib))))) (set! g$0$10965 (lambda (g$0$11546) (if (g$0$10959 g$0$11546) (vector-ref g$0$11546 (quote 3)) (error (quote rib-label*) (quote "~s is not of type ~s") g$0$11546 (quote rib))))) (set! g$0$10967 (lambda (g$0$11548) (if (g$0$10959 g$0$11548) (vector-ref g$0$11548 (quote 4)) (error (quote rib-sealed/freq) (quote "~s is not of type ~s") g$0$11548 (quote rib))))) (set! g$0$10969 (lambda (g$0$11550 g$0$11551) (if (g$0$10959 g$0$11550) (vector-set! g$0$11550 (quote 1) g$0$11551) (error (quote set-rib-sym*!) (quote "~s is not of type ~s") g$0$11550 (quote rib))))) (set! g$0$10971 (lambda (g$0$11554 g$0$11555) (if (g$0$10959 g$0$11554) (vector-set! g$0$11554 (quote 2) g$0$11555) (error (quote set-rib-mark**!) (quote "~s is not of type ~s") g$0$11554 (quote rib))))) (set! g$0$10973 (lambda (g$0$11558 g$0$11559) (if (g$0$10959 g$0$11558) (vector-set! g$0$11558 (quote 3) g$0$11559) (error (quote set-rib-label*!) (quote "~s is not of type ~s") g$0$11558 (quote rib))))) (set! g$0$10975 (lambda (g$0$11562 g$0$11563) (if (g$0$10959 g$0$11562) (vector-set! g$0$11562 (quote 4) g$0$11563) (error (quote set-rib-sealed/freq!) (quote "~s is not of type ~s") g$0$11562 (quote rib))))) (set! g$0$10977 (lambda () (g$0$10957 (quote ()) (quote ()) (quote ()) (quote #f)))) (set! g$0$10979 (lambda (g$0$11566 g$0$11567 g$0$11568) ((lambda (g$0$11572) (begin (set! g$0$11572 (lambda (g$0$11574 g$0$11575 g$0$11576 g$0$11577) (if (pair? g$0$11576) (begin (quote #f) ((lambda (g$0$11582) (if g$0$11582 g$0$11582 (begin (quote #f) (g$0$11572 g$0$11574 g$0$11575 (cdr g$0$11576) (cdr g$0$11577))))) (if (eq? g$0$11574 (car g$0$11576)) (begin (quote #f) (g$0$11044 g$0$11575 (car g$0$11577))) (quote #f)))) (quote #f)))) (begin (if (g$0$10967 g$0$11566) (error (quote extend-rib!) (quote "rib ~s is sealed") g$0$11566) (void)) ((lambda (g$0$11584 g$0$11585) ((lambda (g$0$11588) (begin (if (if (memq g$0$11584 (g$0$10961 g$0$11566)) (begin (quote #f) (g$0$11572 g$0$11584 g$0$11585 g$0$11588 (g$0$10963 g$0$11566))) (quote #f)) (error (quote expander) (quote "~a ~s") (quote "cannot redefine") (g$0$11058 g$0$11567 (quote ()))) (void)) (g$0$10969 g$0$11566 (cons g$0$11584 g$0$11588)) (g$0$10971 g$0$11566 (cons g$0$11585 (g$0$10963 g$0$11566))) (g$0$10973 g$0$11566 (cons g$0$11568 (g$0$10965 g$0$11566))))) (g$0$10961 g$0$11566))) (g$0$11042 g$0$11567) (g$0$10996 g$0$11567))))) (quote #f)))) (set! g$0$10981 (lambda (g$0$11590) ((lambda (g$0$11592) (if (null? g$0$11592) (void) ((lambda (g$0$11594) (begin (g$0$10969 g$0$11590 g$0$11594) (g$0$10971 g$0$11590 (list->vector (g$0$10963 g$0$11590))) (g$0$10973 g$0$11590 (list->vector (g$0$10965 g$0$11590))) (g$0$10975 g$0$11590 (make-vector (vector-length g$0$11594) (quote 0))))) (list->vector g$0$11592)))) (g$0$10961 g$0$11590)))) (set! g$0$10983 (lambda (g$0$11596) (if (g$0$10967 g$0$11596) (begin (g$0$10975 g$0$11596 (quote #f)) (g$0$10969 g$0$11596 (vector->list (g$0$10961 g$0$11596))) (g$0$10971 g$0$11596 (vector->list (g$0$10963 g$0$11596))) (g$0$10973 g$0$11596 (vector->list (g$0$10965 g$0$11596)))) (void)))) (set! g$0$10985 (lambda (g$0$11598 g$0$11599) ((lambda (g$0$11602) ((lambda (g$0$11604) ((lambda (g$0$11606) (begin (vector-set! g$0$11602 g$0$11606 (+ g$0$11604 (quote 1))) (if (= g$0$11606 g$0$11599) (void) ((lambda (g$0$11608 g$0$11609 g$0$11610) (begin ((lambda (g$0$11614) (begin (vector-set! g$0$11608 g$0$11599 (vector-ref g$0$11608 g$0$11606)) (vector-set! g$0$11608 g$0$11606 g$0$11614))) (vector-ref g$0$11608 g$0$11599)) ((lambda (g$0$11616) (begin (vector-set! g$0$11609 g$0$11599 (vector-ref g$0$11609 g$0$11606)) (vector-set! g$0$11609 g$0$11606 g$0$11616))) (vector-ref g$0$11609 g$0$11599)) ((lambda (g$0$11618) (begin (vector-set! g$0$11610 g$0$11599 (vector-ref g$0$11610 g$0$11606)) (vector-set! g$0$11610 g$0$11606 g$0$11618))) (vector-ref g$0$11610 g$0$11599)))) (g$0$10961 g$0$11598) (g$0$10963 g$0$11598) (g$0$10965 g$0$11598))))) (letrec ((g$0$11620 (lambda (g$0$11622) (if (zero? g$0$11622) (quote 0) ((lambda (g$0$11624) (if (= g$0$11604 (vector-ref g$0$11602 g$0$11624)) (g$0$11620 g$0$11624) g$0$11622)) (- g$0$11622 (quote 1))))))) (g$0$11620 g$0$11599)))) (vector-ref g$0$11602 g$0$11599))) (g$0$10967 g$0$11598)))) (set! g$0$10987 (lambda (g$0$11626 g$0$11627) (g$0$10957 (map g$0$11042 g$0$11626) (map g$0$10996 g$0$11626) g$0$11627 (quote #f)))) (set! g$0$10990 (lambda (g$0$11630 g$0$11631 g$0$11632) (vector (quote g$0$10989) g$0$11630 g$0$11631 g$0$11632))) (set! g$0$10992 (lambda (g$0$11636) (if (vector? g$0$11636) (if (= (vector-length g$0$11636) (+ (quote 1) (length (quote (expr mark* subst*))))) (begin (quote #f) (eq? (vector-ref g$0$11636 (quote 0)) (quote g$0$10989))) (quote #f)) (quote #f)))) (set! g$0$10994 (lambda (g$0$11638) (if (g$0$10992 g$0$11638) (vector-ref g$0$11638 (quote 1)) (error (quote stx-expr) (quote "~s is not of type ~s") g$0$11638 (quote stx))))) (set! g$0$10996 (lambda (g$0$11640) (if (g$0$10992 g$0$11640) (vector-ref g$0$11640 (quote 2)) (error (quote stx-mark*) (quote "~s is not of type ~s") g$0$11640 (quote stx))))) (set! g$0$10998 (lambda (g$0$11642) (if (g$0$10992 g$0$11642) (vector-ref g$0$11642 (quote 3)) (error (quote stx-subst*) (quote "~s is not of type ~s") g$0$11642 (quote stx))))) (set! g$0$11000 (lambda (g$0$11644 g$0$11645) (if (g$0$10992 g$0$11644) (vector-set! g$0$11644 (quote 1) g$0$11645) (error (quote set-stx-expr!) (quote "~s is not of type ~s") g$0$11644 (quote stx))))) (set! g$0$11002 (lambda (g$0$11648 g$0$11649) (if (g$0$10992 g$0$11648) (vector-set! g$0$11648 (quote 2) g$0$11649) (error (quote set-stx-mark*!) (quote "~s is not of type ~s") g$0$11648 (quote stx))))) (set! g$0$11004 (lambda (g$0$11652 g$0$11653) (if (g$0$10992 g$0$11652) (vector-set! g$0$11652 (quote 3) g$0$11653) (error (quote set-stx-subst*!) (quote "~s is not of type ~s") g$0$11652 (quote stx))))) (set! g$0$11006 (lambda (g$0$11656 g$0$11657) (g$0$10990 g$0$11657 (g$0$10996 g$0$11656) (g$0$10998 g$0$11656)))) (set! g$0$11008 (lambda () (string (quote #\m)))) (set! g$0$11010 (quote #f)) (set! g$0$11012 not) (set! g$0$11014 (lambda (g$0$11660 g$0$11661 g$0$11662) ((lambda (g$0$11666) (begin (set! g$0$11666 (lambda (g$0$11668 g$0$11669) (letrec ((g$0$11672 (lambda (g$0$11674 g$0$11675) (if (null? g$0$11675) (cdr g$0$11669) (cons g$0$11674 (g$0$11672 (car g$0$11675) (cdr g$0$11675))))))) (g$0$11672 (car g$0$11668) (cdr g$0$11668))))) ((lambda (g$0$11678 g$0$11679) (if (if (not (null? g$0$11660)) (if (not (null? g$0$11678)) (begin (quote #f) (g$0$11012 (car g$0$11678))) (quote #f)) (quote #f)) (values (g$0$11666 g$0$11660 g$0$11678) (g$0$11666 g$0$11661 g$0$11679)) (values (append g$0$11660 g$0$11678) (append g$0$11661 g$0$11679)))) (g$0$10996 g$0$11662) (g$0$10998 g$0$11662)))) (quote #f)))) (set! g$0$11016 (lambda (g$0$11682 g$0$11683 g$0$11684) (if (g$0$10992 g$0$11682) (call-with-values (lambda () (g$0$11014 g$0$11683 g$0$11684 g$0$11682)) (lambda (g$0$11688 g$0$11689) (g$0$10990 (g$0$10994 g$0$11682) g$0$11688 g$0$11689))) (g$0$10990 g$0$11682 g$0$11683 g$0$11684)))) (set! g$0$11018 (lambda (g$0$11692 g$0$11693) (g$0$11016 g$0$11693 (list g$0$11692) (quote (shift))))) (set! g$0$11020 (lambda (g$0$11696 g$0$11697) (g$0$11016 g$0$11697 (quote ()) (list g$0$11696)))) (set! g$0$11022 (lambda (g$0$11700 g$0$11701) (if (g$0$10992 g$0$11700) (g$0$11022 (g$0$10994 g$0$11700) g$0$11701) (g$0$11701 g$0$11700)))) (set! g$0$11024 (lambda (g$0$11704) (if (g$0$10992 g$0$11704) ((lambda (g$0$11706 g$0$11707 g$0$11708) (map (lambda (g$0$11712) (g$0$11016 g$0$11712 g$0$11707 g$0$11708)) g$0$11706)) (g$0$11024 (g$0$10994 g$0$11704)) (g$0$10996 g$0$11704) (g$0$10998 g$0$11704)) (if (vector? g$0$11704) (vector->list g$0$11704) (error (quote syntax-vector->list) (quote "not a syntax vector ~s") g$0$11704))))) (set! g$0$11026 (lambda (g$0$11714) (g$0$11022 g$0$11714 pair?))) (set! g$0$11028 (lambda (g$0$11716) (g$0$11022 g$0$11716 vector?))) (set! g$0$11030 (lambda (g$0$11718) (g$0$11022 g$0$11718 null?))) (set! g$0$11032 (lambda (g$0$11720) ((lambda (g$0$11722) (if g$0$11722 g$0$11722 (begin (quote #f) (if (g$0$11026 g$0$11720) (begin (quote #f) (g$0$11032 (g$0$11038 g$0$11720))) (quote #f))))) (g$0$11030 g$0$11720)))) (set! g$0$11034 (lambda (g$0$11724) (if (g$0$10992 g$0$11724) (g$0$11016 (g$0$11034 (g$0$10994 g$0$11724)) (g$0$10996 g$0$11724) (g$0$10998 g$0$11724)) (if (pair? g$0$11724) (car g$0$11724) (error (quote syntax-car) (quote "~s is not a pair") g$0$11724))))) (set! g$0$11036 (lambda (g$0$11726) (if (g$0$11026 g$0$11726) (cons (g$0$11034 g$0$11726) (g$0$11036 (g$0$11038 g$0$11726))) (if (g$0$11030 g$0$11726) (quote ()) (error (quote syntax->list) (quote "invalid ~s") g$0$11726))))) (set! g$0$11038 (lambda (g$0$11728) (if (g$0$10992 g$0$11728) (g$0$11016 (g$0$11038 (g$0$10994 g$0$11728)) (g$0$10996 g$0$11728) (g$0$10998 g$0$11728)) (if (pair? g$0$11728) (cdr g$0$11728) (error (quote syntax-cdr) (quote "~s is not a pair") g$0$11728))))) (set! g$0$11040 (lambda (g$0$11730) (g$0$11022 g$0$11730 symbol?))) (set! g$0$11042 (lambda (g$0$11732) (if (g$0$10992 g$0$11732) (g$0$11042 (g$0$10994 g$0$11732)) (if (symbol? g$0$11732) g$0$11732 (error (quote id->sym) (quote "~s is not an id") g$0$11732))))) (set! g$0$11044 (lambda (g$0$11734 g$0$11735) ((lambda (g$0$11738) (if g$0$11738 g$0$11738 (begin (quote #f) (if (pair? g$0$11734) (if (pair? g$0$11735) (if (eq? (car g$0$11734) (car g$0$11735)) (begin (quote #f) (g$0$11044 (cdr g$0$11734) (cdr g$0$11735))) (quote #f)) (quote #f)) (quote #f))))) (if (null? g$0$11734) (begin (quote #f) (null? g$0$11735)) (quote #f))))) (set! g$0$11046 (lambda (g$0$11740 g$0$11741) (if (eq? (g$0$11042 g$0$11740) (g$0$11042 g$0$11741)) (begin (quote #f) (g$0$11044 (g$0$10996 g$0$11740) (g$0$10996 g$0$11741))) (quote #f)))) (set! g$0$11048 (lambda (g$0$11744 g$0$11745) ((lambda (g$0$11748 g$0$11749) (if ((lambda (g$0$11752) (if g$0$11752 g$0$11752 (begin (quote #f) g$0$11749))) g$0$11748) (eq? g$0$11748 g$0$11749) (eq? (g$0$11042 g$0$11744) (g$0$11042 g$0$11745)))) (g$0$11062 g$0$11744) (g$0$11062 g$0$11745)))) (set! g$0$11050 (lambda (g$0$11754) (if (for-all g$0$11040 g$0$11754) (begin (quote #f) (g$0$11052 g$0$11754)) (quote #f)))) (set! g$0$11052 (lambda (g$0$11756) ((lambda (g$0$11758) (if g$0$11758 g$0$11758 (begin (quote #f) (if (not (g$0$11054 (car g$0$11756) (cdr g$0$11756))) (begin (quote #f) (g$0$11052 (cdr g$0$11756))) (quote #f))))) (null? g$0$11756)))) (set! g$0$11054 (lambda (g$0$11760 g$0$11761) (if (pair? g$0$11761) (begin (quote #f) ((lambda (g$0$11764) (if g$0$11764 g$0$11764 (begin (quote #f) (g$0$11054 g$0$11760 (cdr g$0$11761))))) (g$0$11046 g$0$11760 (car g$0$11761)))) (quote #f)))) (set! g$0$11056 (lambda (g$0$11766) ((lambda (g$0$11768) (if g$0$11768 g$0$11768 ((lambda (g$0$11770) (if g$0$11770 g$0$11770 ((lambda (g$0$11772) (if g$0$11772 g$0$11772 (begin (quote #f) (boolean? g$0$11766)))) (char? g$0$11766)))) (string? g$0$11766)))) (number? g$0$11766)))) (set! g$0$11058 (lambda (g$0$11774 g$0$11775) (if (g$0$10948 g$0$11775) g$0$11774 (letrec ((g$0$11778 (lambda (g$0$11780) (if (g$0$10992 g$0$11780) (g$0$11058 (g$0$10994 g$0$11780) (g$0$10996 g$0$11780)) (if (pair? g$0$11780) ((lambda (g$0$11782 g$0$11783) (if (if (eq? g$0$11782 (car g$0$11780)) (begin (quote #f) (eq? g$0$11783 (cdr g$0$11780))) (quote #f)) g$0$11780 (cons g$0$11782 g$0$11783))) (g$0$11778 (car g$0$11780)) (g$0$11778 (cdr g$0$11780))) (if (vector? g$0$11780) ((lambda (g$0$11786) ((lambda (g$0$11788) (if (for-all eq? g$0$11786 g$0$11788) g$0$11780 (list->vector g$0$11788))) (map g$0$11778 g$0$11786))) (vector->list g$0$11780)) g$0$11780)))))) (g$0$11778 g$0$11774))))) (set! g$0$11060 (lambda (g$0$11790) (g$0$11058 g$0$11790 (quote ())))) (set! g$0$11062 (lambda (g$0$11792) ((lambda (g$0$11794) (letrec ((g$0$11796 (lambda (g$0$11798 g$0$11799) (if (null? g$0$11798) (g$0$11512 g$0$11794) (if (eq? (car g$0$11798) (quote shift)) (g$0$11796 (cdr g$0$11798) (cdr g$0$11799)) ((lambda (g$0$11802) (if (g$0$10967 g$0$11802) ((lambda (g$0$11804) (letrec ((g$0$11806 (lambda (g$0$11808 g$0$11809) (if (= g$0$11808 g$0$11809) (g$0$11796 (cdr g$0$11798) g$0$11799) (if (if (eq? (vector-ref g$0$11804 g$0$11808) g$0$11794) (begin (quote #f) (g$0$11044 g$0$11799 (vector-ref (g$0$10963 g$0$11802) g$0$11808))) (quote #f)) ((lambda (g$0$11812) (begin (g$0$10985 g$0$11802 g$0$11808) g$0$11812)) (vector-ref (g$0$10965 g$0$11802) g$0$11808)) (g$0$11806 (+ g$0$11808 (quote 1)) g$0$11809)))))) (g$0$11806 (quote 0) (vector-length g$0$11804)))) (g$0$10961 g$0$11802)) (letrec ((g$0$11814 (lambda (g$0$11816 g$0$11817 g$0$11818) (if (null? g$0$11816) (g$0$11796 (cdr g$0$11798) g$0$11799) (if (if (eq? (car g$0$11816) g$0$11794) (begin (quote #f) (g$0$11044 (car g$0$11817) g$0$11799)) (quote #f)) (car g$0$11818) (g$0$11814 (cdr g$0$11816) (cdr g$0$11817) (cdr g$0$11818))))))) (g$0$11814 (g$0$10961 g$0$11802) (g$0$10963 g$0$11802) (g$0$10965 g$0$11802))))) (car g$0$11798))))))) (g$0$11796 (g$0$10998 g$0$11792) (g$0$10996 g$0$11792)))) (g$0$11042 g$0$11792)))) (set! g$0$11064 (lambda (g$0$11822 g$0$11823) ((lambda (g$0$11826) (if g$0$11826 g$0$11826 (begin (quote #f) ((lambda (g$0$11828) (if g$0$11828 (cdr g$0$11828) (quote (displaced-lexical . #f)))) (assq g$0$11822 g$0$11823))))) (g$0$10646 g$0$11822)))) (set! g$0$11066 cons) (set! g$0$11068 car) (set! g$0$11070 cdr) (set! g$0$11072 (lambda (g$0$11830 g$0$11831) (if (g$0$11040 g$0$11830) ((lambda (g$0$11834) ((lambda (g$0$11836) ((lambda (g$0$11838) ((lambda (g$0$11840) ((lambda () (begin (if g$0$11836 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (g$0$11058 g$0$11830 (quote ())))) ((lambda (g$0$11842) (if (memv g$0$11842 (quote (lexical core-prim macro macro! global local-macro local-macro! global-macro global-macro! displaced-lexical syntax import $module))) (values g$0$11840 (g$0$11070 g$0$11838) g$0$11834) (values (quote other) (quote #f) (quote #f)))) g$0$11840))))) (g$0$11068 g$0$11838))) (g$0$11064 g$0$11836 g$0$11831))) (g$0$11062 g$0$11834))) g$0$11830) (if (g$0$11026 g$0$11830) ((lambda (g$0$11843) (if (g$0$11040 g$0$11843) ((lambda (g$0$11845) ((lambda (g$0$11847) ((lambda (g$0$11849) ((lambda () (begin (if g$0$11845 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (g$0$11058 g$0$11830 (quote ())))) ((lambda (g$0$11851) (if (memv g$0$11851 (quote (define define-syntax core-macro begin macro macro! local-macro local-macro! global-macro global-macro! module set! let-syntax letrec-syntax import))) (values g$0$11849 (g$0$11070 g$0$11847) g$0$11843) (values (quote call) (quote #f) (quote #f)))) g$0$11849))))) (g$0$11068 g$0$11847))) (g$0$11064 g$0$11845 g$0$11831))) (g$0$11062 g$0$11843)) (values (quote call) (quote #f) (quote #f)))) (g$0$11034 g$0$11830)) ((lambda (g$0$11852) (if (g$0$11056 g$0$11852) (values (quote constant) g$0$11852 (quote #f)) (values (quote other) (quote #f) (quote #f)))) (g$0$11060 g$0$11830)))))) (set! g$0$11086 (lambda (g$0$11854 g$0$11855) (if (procedure? g$0$11854) (cons* (quote local-macro) g$0$11854 g$0$11855) (if (if (pair? g$0$11854) (if (eq? (car g$0$11854) (quote macro!)) (begin (quote #f) (procedure? (cdr g$0$11854))) (quote #f)) (quote #f)) (cons* (quote local-macro!) (cdr g$0$11854) g$0$11855) (if (if (pair? g$0$11854) (begin (quote #f) (eq? (car g$0$11854) (quote $rtd))) (quote #f)) g$0$11854 (error (quote expand) (quote "invalid transformer ~s") g$0$11854)))))) (set! g$0$11088 (lambda (g$0$11858) (if (procedure? g$0$11858) (cons (quote macro!) g$0$11858) (error (quote make-variable-transformer) (quote "~s is not a procedure") g$0$11858)))) (set! g$0$11090 (lambda (g$0$11860) (g$0$11086 (eval-core (g$0$10207 g$0$11860)) g$0$11860))) (set! g$0$11289 (lambda (g$0$11862) ((lambda (g$0$11864) ((lambda (g$0$11866) (if (if g$0$11866 (begin (quote #f) (apply (lambda (g$0$11868 g$0$11869 g$0$11870 g$0$11871) (g$0$11040 g$0$11868)) g$0$11866)) (quote #f)) (apply (lambda (g$0$11876 g$0$11877 g$0$11878 g$0$11879) (values g$0$11876 (cons (quote defun) (cons g$0$11877 (cons g$0$11878 g$0$11879))))) g$0$11866) ((lambda (g$0$11884) ((lambda (g$0$11886) (if (if g$0$11886 (begin (quote #f) (apply (lambda (g$0$11888 g$0$11889) (g$0$11040 g$0$11888)) g$0$11886)) (quote #f)) (apply (lambda (g$0$11892 g$0$11893) (values g$0$11892 (cons (quote expr) g$0$11893))) g$0$11886) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$11884 (quote ()))))) ((lambda (g$0$11896) (if (g$0$11026 g$0$11896) (begin (quote #f) ((lambda (g$0$11898) (if g$0$11898 (begin (quote #f) ((lambda (g$0$11900) (if g$0$11900 (begin (quote #f) (append g$0$11898 g$0$11900)) (quote #f))) ((lambda (g$0$11902) (if (g$0$11026 g$0$11902) (begin (quote #f) ((lambda (g$0$11904) (if g$0$11904 (begin (quote #f) ((lambda (g$0$11906) (if g$0$11906 (begin (quote #f) (append g$0$11904 g$0$11906)) (quote #f))) ((lambda (g$0$11908) (if (g$0$11026 g$0$11908) (begin (quote #f) ((lambda (g$0$11910) (if g$0$11910 (begin (quote #f) ((lambda (g$0$11912) (if g$0$11912 (begin (quote #f) (append g$0$11910 g$0$11912)) (quote #f))) ((lambda (g$0$11914) (if (equal? (g$0$11060 g$0$11914) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$11908)))) (quote #f))) ((lambda (g$0$11916) (list g$0$11916)) (g$0$11034 g$0$11908)))) (quote #f))) (g$0$11038 g$0$11902)))) (quote #f))) ((lambda (g$0$11918) (list g$0$11918)) (g$0$11034 g$0$11902)))) (quote #f))) (g$0$11038 g$0$11896)))) (quote #f))) ((lambda (g$0$11920) (quote ())) (g$0$11034 g$0$11896)))) (quote #f))) g$0$11884))) g$0$11864))) ((lambda (g$0$11922) (if (g$0$11026 g$0$11922) (begin (quote #f) ((lambda (g$0$11924) (if g$0$11924 (begin (quote #f) ((lambda (g$0$11926) (if g$0$11926 (begin (quote #f) (append g$0$11924 g$0$11926)) (quote #f))) ((lambda (g$0$11928) (if (g$0$11026 g$0$11928) (begin (quote #f) ((lambda (g$0$11930) (if g$0$11930 (begin (quote #f) ((lambda (g$0$11932) (if g$0$11932 (begin (quote #f) (append g$0$11930 g$0$11932)) (quote #f))) ((lambda (g$0$11934) (if (g$0$11026 g$0$11934) (begin (quote #f) ((lambda (g$0$11936) (if g$0$11936 (begin (quote #f) ((lambda (g$0$11938) (if g$0$11938 (begin (quote #f) (append g$0$11936 g$0$11938)) (quote #f))) ((letrec ((g$0$11940 (lambda (g$0$11942) (if (g$0$11026 g$0$11942) ((lambda (g$0$11944) (if g$0$11944 (begin (quote #f) ((lambda (g$0$11946) (if g$0$11946 (begin (quote #f) (map cons g$0$11944 g$0$11946)) (quote #f))) (g$0$11940 (g$0$11038 g$0$11942)))) (quote #f))) ((lambda (g$0$11948) (list g$0$11948)) (g$0$11034 g$0$11942))) (if (g$0$11030 g$0$11942) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$11940) (g$0$11038 g$0$11934)))) (quote #f))) ((lambda (g$0$11950) (list g$0$11950)) (g$0$11034 g$0$11934)))) (quote #f))) (g$0$11038 g$0$11928)))) (quote #f))) ((lambda (g$0$11952) (if (g$0$11026 g$0$11952) (begin (quote #f) ((lambda (g$0$11954) (if g$0$11954 (begin (quote #f) ((lambda (g$0$11956) (if g$0$11956 (begin (quote #f) (append g$0$11954 g$0$11956)) (quote #f))) ((lambda (g$0$11958) (list g$0$11958)) (g$0$11038 g$0$11952)))) (quote #f))) ((lambda (g$0$11960) (list g$0$11960)) (g$0$11034 g$0$11952)))) (quote #f))) (g$0$11034 g$0$11928)))) (quote #f))) (g$0$11038 g$0$11922)))) (quote #f))) ((lambda (g$0$11962) (quote ())) (g$0$11034 g$0$11922)))) (quote #f))) g$0$11864))) g$0$11862))) (set! g$0$11291 (lambda (g$0$11964) ((lambda (g$0$11966) ((lambda (g$0$11968) (if (if g$0$11968 (begin (quote #f) (apply (lambda (g$0$11970 g$0$11971) (g$0$11040 g$0$11970)) g$0$11968)) (quote #f)) (apply (lambda (g$0$11974 g$0$11975) (values g$0$11974 g$0$11975)) g$0$11968) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$11966 (quote ()))))) ((lambda (g$0$11978) (if (g$0$11026 g$0$11978) (begin (quote #f) ((lambda (g$0$11980) (if g$0$11980 (begin (quote #f) ((lambda (g$0$11982) (if g$0$11982 (begin (quote #f) (append g$0$11980 g$0$11982)) (quote #f))) ((lambda (g$0$11984) (if (g$0$11026 g$0$11984) (begin (quote #f) ((lambda (g$0$11986) (if g$0$11986 (begin (quote #f) ((lambda (g$0$11988) (if g$0$11988 (begin (quote #f) (append g$0$11986 g$0$11988)) (quote #f))) ((lambda (g$0$11990) (if (g$0$11026 g$0$11990) (begin (quote #f) ((lambda (g$0$11992) (if g$0$11992 (begin (quote #f) ((lambda (g$0$11994) (if g$0$11994 (begin (quote #f) (append g$0$11992 g$0$11994)) (quote #f))) ((lambda (g$0$11996) (if (equal? (g$0$11060 g$0$11996) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$11990)))) (quote #f))) ((lambda (g$0$11998) (list g$0$11998)) (g$0$11034 g$0$11990)))) (quote #f))) (g$0$11038 g$0$11984)))) (quote #f))) ((lambda (g$0$12000) (list g$0$12000)) (g$0$11034 g$0$11984)))) (quote #f))) (g$0$11038 g$0$11978)))) (quote #f))) ((lambda (g$0$12002) (quote ())) (g$0$11034 g$0$11978)))) (quote #f))) g$0$11966))) g$0$11964))) (set! g$0$11293 (lambda (g$0$12004) ((lambda (g$0$12006) ((lambda (g$0$12008) (if g$0$12008 ((lambda (g$0$12010) ((lambda (g$0$12012 g$0$12013) (g$0$11020 (g$0$10957 (list g$0$12012) (list g$0$10946) (list g$0$12013) (quote #f)) (g$0$11016 g$0$12004 g$0$10946 (quote ())))) (car g$0$12010) (cdr g$0$12010))) g$0$12008) (g$0$11016 g$0$12004 g$0$10946 (quote ())))) (assq g$0$12004 g$0$12006))) (g$0$10679 (g$0$10654 (quote (psyntax system $all))))))) (set! g$0$11295 (lambda (g$0$12016 g$0$12017 g$0$12018) (cons (cons* g$0$12016 (quote lexical) g$0$12017) g$0$12018))) (set! g$0$11297 (lambda (g$0$12022 g$0$12023 g$0$12024) (if (null? g$0$12022) g$0$12024 (g$0$11297 (cdr g$0$12022) (cdr g$0$12023) (g$0$11295 (car g$0$12022) (car g$0$12023) g$0$12024))))) (set! g$0$11299 (lambda (g$0$12028 g$0$12029 g$0$12030) ((lambda (g$0$12034) ((lambda (g$0$12036) (if (if g$0$12036 (begin (quote #f) (apply (lambda (g$0$12038 g$0$12039 g$0$12040 g$0$12041) (quote #t)) g$0$12036)) (quote #f)) (apply (lambda (g$0$12046 g$0$12047 g$0$12048 g$0$12049) ((lambda (g$0$12054) ((lambda (g$0$12056 g$0$12057) ((lambda (g$0$12060 g$0$12061 g$0$12062) (letrec ((g$0$12066 (lambda (g$0$12068 g$0$12069) (if (null? g$0$12068) (g$0$11411 (g$0$11020 (g$0$10987 g$0$12060 g$0$12061) (cons g$0$12048 g$0$12049)) (g$0$11297 g$0$12061 g$0$12062 g$0$12029) g$0$12030) (list (quote (primitive call-with-values)) (g$0$10929 (quote #f) (quote ()) (car g$0$12069)) (g$0$10929 (quote #f) (car g$0$12068) (g$0$12066 (cdr g$0$12068) (cdr g$0$12069)))))))) (g$0$12066 g$0$12056 g$0$12054))) (apply append g$0$12046) (apply append g$0$12057) (apply append g$0$12056))) (map (lambda (g$0$12072) (map g$0$10950 g$0$12072)) g$0$12046) (map (lambda (g$0$12074) (map g$0$10954 g$0$12074)) g$0$12046))) (g$0$11391 g$0$12047 g$0$12029 g$0$12030))) g$0$12036) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12034 (quote ()))))) ((lambda (g$0$12076) (if (g$0$11026 g$0$12076) (begin (quote #f) ((lambda (g$0$12078) (if g$0$12078 (begin (quote #f) ((lambda (g$0$12080) (if g$0$12080 (begin (quote #f) (append g$0$12078 g$0$12080)) (quote #f))) ((lambda (g$0$12082) (if (g$0$11026 g$0$12082) (begin (quote #f) ((lambda (g$0$12084) (if g$0$12084 (begin (quote #f) ((lambda (g$0$12086) (if g$0$12086 (begin (quote #f) (append g$0$12084 g$0$12086)) (quote #f))) ((lambda (g$0$12088) (if (g$0$11026 g$0$12088) (begin (quote #f) ((lambda (g$0$12090) (if g$0$12090 (begin (quote #f) ((lambda (g$0$12092) (if g$0$12092 (begin (quote #f) (append g$0$12090 g$0$12092)) (quote #f))) ((letrec ((g$0$12094 (lambda (g$0$12096) (if (g$0$11026 g$0$12096) ((lambda (g$0$12098) (if g$0$12098 (begin (quote #f) ((lambda (g$0$12100) (if g$0$12100 (begin (quote #f) (map cons g$0$12098 g$0$12100)) (quote #f))) (g$0$12094 (g$0$11038 g$0$12096)))) (quote #f))) ((lambda (g$0$12102) (list g$0$12102)) (g$0$11034 g$0$12096))) (if (g$0$11030 g$0$12096) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12094) (g$0$11038 g$0$12088)))) (quote #f))) ((lambda (g$0$12104) (list g$0$12104)) (g$0$11034 g$0$12088)))) (quote #f))) (g$0$11038 g$0$12082)))) (quote #f))) ((letrec ((g$0$12106 (lambda (g$0$12108) (if (g$0$11026 g$0$12108) ((lambda (g$0$12110) (if g$0$12110 (begin (quote #f) ((lambda (g$0$12112) (if g$0$12112 (begin (quote #f) (map cons g$0$12110 g$0$12112)) (quote #f))) (g$0$12106 (g$0$11038 g$0$12108)))) (quote #f))) ((lambda (g$0$12114) (if (g$0$11026 g$0$12114) (begin (quote #f) ((lambda (g$0$12116) (if g$0$12116 (begin (quote #f) ((lambda (g$0$12118) (if g$0$12118 (begin (quote #f) (append g$0$12116 g$0$12118)) (quote #f))) ((lambda (g$0$12120) (if (g$0$11026 g$0$12120) (begin (quote #f) ((lambda (g$0$12122) (if g$0$12122 (begin (quote #f) ((lambda (g$0$12124) (if g$0$12124 (begin (quote #f) (append g$0$12122 g$0$12124)) (quote #f))) ((lambda (g$0$12126) (if (equal? (g$0$11060 g$0$12126) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12120)))) (quote #f))) ((lambda (g$0$12128) (list g$0$12128)) (g$0$11034 g$0$12120)))) (quote #f))) (g$0$11038 g$0$12114)))) (quote #f))) ((letrec ((g$0$12130 (lambda (g$0$12132) (if (g$0$11026 g$0$12132) ((lambda (g$0$12134) (if g$0$12134 (begin (quote #f) ((lambda (g$0$12136) (if g$0$12136 (begin (quote #f) (map cons g$0$12134 g$0$12136)) (quote #f))) (g$0$12130 (g$0$11038 g$0$12132)))) (quote #f))) ((lambda (g$0$12138) (list g$0$12138)) (g$0$11034 g$0$12132))) (if (g$0$11030 g$0$12132) (list (begin (quote fml**) (quote ()))) (quote #f)))))) g$0$12130) (g$0$11034 g$0$12114)))) (quote #f))) (g$0$11034 g$0$12108))) (if (g$0$11030 g$0$12108) (list (begin (quote fml**) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$12106) (g$0$11034 g$0$12082)))) (quote #f))) (g$0$11038 g$0$12076)))) (quote #f))) ((lambda (g$0$12140) (quote ())) (g$0$11034 g$0$12076)))) (quote #f))) g$0$12034))) g$0$12028))) (set! g$0$11301 (lambda (g$0$12142 g$0$12143 g$0$12144 g$0$12145) ((lambda (g$0$12150) ((lambda (g$0$12152) (if (if g$0$12152 (begin (quote #f) (apply (lambda (g$0$12154 g$0$12155 g$0$12156 g$0$12157) (quote #t)) g$0$12152)) (quote #f)) (apply (lambda (g$0$12162 g$0$12163 g$0$12164 g$0$12165) (if (not (g$0$11050 g$0$12162)) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (g$0$11058 g$0$12142 (quote ()))) ((lambda (g$0$12170 g$0$12171) ((lambda (g$0$12174 g$0$12175) ((lambda (g$0$12178 g$0$12179) (g$0$12145 (quote #f) g$0$12170 g$0$12179 g$0$12178)) (g$0$11411 (g$0$11020 g$0$12174 (cons g$0$12164 g$0$12165)) g$0$12175 g$0$12144) (g$0$11391 (map (lambda (g$0$12182) (g$0$11020 g$0$12174 g$0$12182)) g$0$12163) g$0$12175 g$0$12144))) (g$0$10987 g$0$12162 g$0$12171) (g$0$11297 g$0$12171 g$0$12170 g$0$12143))) (map g$0$10950 g$0$12162) (map g$0$10954 g$0$12162)))) g$0$12152) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12150 (quote ()))))) ((lambda (g$0$12184) (if (g$0$11026 g$0$12184) (begin (quote #f) ((lambda (g$0$12186) (if g$0$12186 (begin (quote #f) ((lambda (g$0$12188) (if g$0$12188 (begin (quote #f) (append g$0$12186 g$0$12188)) (quote #f))) ((lambda (g$0$12190) (if (g$0$11026 g$0$12190) (begin (quote #f) ((lambda (g$0$12192) (if g$0$12192 (begin (quote #f) ((lambda (g$0$12194) (if g$0$12194 (begin (quote #f) (append g$0$12192 g$0$12194)) (quote #f))) ((lambda (g$0$12196) (if (g$0$11026 g$0$12196) (begin (quote #f) ((lambda (g$0$12198) (if g$0$12198 (begin (quote #f) ((lambda (g$0$12200) (if g$0$12200 (begin (quote #f) (append g$0$12198 g$0$12200)) (quote #f))) ((letrec ((g$0$12202 (lambda (g$0$12204) (if (g$0$11026 g$0$12204) ((lambda (g$0$12206) (if g$0$12206 (begin (quote #f) ((lambda (g$0$12208) (if g$0$12208 (begin (quote #f) (map cons g$0$12206 g$0$12208)) (quote #f))) (g$0$12202 (g$0$11038 g$0$12204)))) (quote #f))) ((lambda (g$0$12210) (list g$0$12210)) (g$0$11034 g$0$12204))) (if (g$0$11030 g$0$12204) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12202) (g$0$11038 g$0$12196)))) (quote #f))) ((lambda (g$0$12212) (list g$0$12212)) (g$0$11034 g$0$12196)))) (quote #f))) (g$0$11038 g$0$12190)))) (quote #f))) ((letrec ((g$0$12214 (lambda (g$0$12216) (if (g$0$11026 g$0$12216) ((lambda (g$0$12218) (if g$0$12218 (begin (quote #f) ((lambda (g$0$12220) (if g$0$12220 (begin (quote #f) (map cons g$0$12218 g$0$12220)) (quote #f))) (g$0$12214 (g$0$11038 g$0$12216)))) (quote #f))) ((lambda (g$0$12222) (if (g$0$11026 g$0$12222) (begin (quote #f) ((lambda (g$0$12224) (if g$0$12224 (begin (quote #f) ((lambda (g$0$12226) (if g$0$12226 (begin (quote #f) (append g$0$12224 g$0$12226)) (quote #f))) ((lambda (g$0$12228) (if (g$0$11026 g$0$12228) (begin (quote #f) ((lambda (g$0$12230) (if g$0$12230 (begin (quote #f) ((lambda (g$0$12232) (if g$0$12232 (begin (quote #f) (append g$0$12230 g$0$12232)) (quote #f))) ((lambda (g$0$12234) (if (equal? (g$0$11060 g$0$12234) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12228)))) (quote #f))) ((lambda (g$0$12236) (list g$0$12236)) (g$0$11034 g$0$12228)))) (quote #f))) (g$0$11038 g$0$12222)))) (quote #f))) ((lambda (g$0$12238) (list g$0$12238)) (g$0$11034 g$0$12222)))) (quote #f))) (g$0$11034 g$0$12216))) (if (g$0$11030 g$0$12216) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$12214) (g$0$11034 g$0$12190)))) (quote #f))) (g$0$11038 g$0$12184)))) (quote #f))) ((lambda (g$0$12240) (quote ())) (g$0$11034 g$0$12184)))) (quote #f))) g$0$12150))) g$0$12142))) (set! g$0$11303 (lambda (g$0$12242 g$0$12243 g$0$12244) (g$0$11301 g$0$12242 g$0$12243 g$0$12244 g$0$10921))) (set! g$0$11305 (lambda (g$0$12248 g$0$12249 g$0$12250) (g$0$11301 g$0$12248 g$0$12249 g$0$12250 g$0$10920))) (set! g$0$11307 (lambda (g$0$12254 g$0$12255 g$0$12256) ((lambda (g$0$12260) ((lambda (g$0$12262) (if (if g$0$12262 (begin (quote #f) (apply (lambda (g$0$12264) (g$0$11040 g$0$12264)) g$0$12262)) (quote #f)) (apply (lambda (g$0$12266) ((lambda (g$0$12268) ((lambda (g$0$12270) ((lambda (g$0$12272) ((lambda () (begin (if g$0$12268 (void) (error (quote expander) (quote "~a ~s") (quote "unbound identifier") (g$0$11058 g$0$12254 (quote ())))) ((lambda (g$0$12274) (if (memv g$0$12274 (quote ($rtd))) (list (quote quote) (g$0$11070 g$0$12270)) (error (quote expander) (quote "~a ~s") (quote "invalid type") (g$0$11058 g$0$12254 (quote ()))))) g$0$12272))))) (g$0$11068 g$0$12270))) (g$0$11064 g$0$12268 g$0$12255))) (g$0$11062 g$0$12266))) g$0$12262) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12260 (quote ()))))) ((lambda (g$0$12275) (if (g$0$11026 g$0$12275) (begin (quote #f) ((lambda (g$0$12277) (if g$0$12277 (begin (quote #f) ((lambda (g$0$12279) (if g$0$12279 (begin (quote #f) (append g$0$12277 g$0$12279)) (quote #f))) ((lambda (g$0$12281) (if (g$0$11026 g$0$12281) (begin (quote #f) ((lambda (g$0$12283) (if g$0$12283 (begin (quote #f) ((lambda (g$0$12285) (if g$0$12285 (begin (quote #f) (append g$0$12283 g$0$12285)) (quote #f))) ((lambda (g$0$12287) (if (equal? (g$0$11060 g$0$12287) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12281)))) (quote #f))) ((lambda (g$0$12289) (list g$0$12289)) (g$0$11034 g$0$12281)))) (quote #f))) (g$0$11038 g$0$12275)))) (quote #f))) ((lambda (g$0$12291) (quote ())) (g$0$11034 g$0$12275)))) (quote #f))) g$0$12260))) g$0$12254))) (set! g$0$11309 (lambda (g$0$12293 g$0$12294 g$0$12295) ((lambda (g$0$12299) ((lambda (g$0$12301) (if (if g$0$12301 (begin (quote #f) (apply (lambda (g$0$12303 g$0$12304 g$0$12305) (quote #t)) g$0$12301)) (quote #f)) (apply (lambda (g$0$12309 g$0$12310 g$0$12311) (list (quote if) (g$0$11395 g$0$12309 g$0$12294 g$0$12295) (g$0$10923 (quote #f) (g$0$11391 (cons g$0$12310 g$0$12311) g$0$12294 g$0$12295)) (g$0$10922))) g$0$12301) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12299 (quote ()))))) ((lambda (g$0$12315) (if (g$0$11026 g$0$12315) (begin (quote #f) ((lambda (g$0$12317) (if g$0$12317 (begin (quote #f) ((lambda (g$0$12319) (if g$0$12319 (begin (quote #f) (append g$0$12317 g$0$12319)) (quote #f))) ((lambda (g$0$12321) (if (g$0$11026 g$0$12321) (begin (quote #f) ((lambda (g$0$12323) (if g$0$12323 (begin (quote #f) ((lambda (g$0$12325) (if g$0$12325 (begin (quote #f) (append g$0$12323 g$0$12325)) (quote #f))) ((lambda (g$0$12327) (if (g$0$11026 g$0$12327) (begin (quote #f) ((lambda (g$0$12329) (if g$0$12329 (begin (quote #f) ((lambda (g$0$12331) (if g$0$12331 (begin (quote #f) (append g$0$12329 g$0$12331)) (quote #f))) ((letrec ((g$0$12333 (lambda (g$0$12335) (if (g$0$11026 g$0$12335) ((lambda (g$0$12337) (if g$0$12337 (begin (quote #f) ((lambda (g$0$12339) (if g$0$12339 (begin (quote #f) (map cons g$0$12337 g$0$12339)) (quote #f))) (g$0$12333 (g$0$11038 g$0$12335)))) (quote #f))) ((lambda (g$0$12341) (list g$0$12341)) (g$0$11034 g$0$12335))) (if (g$0$11030 g$0$12335) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12333) (g$0$11038 g$0$12327)))) (quote #f))) ((lambda (g$0$12343) (list g$0$12343)) (g$0$11034 g$0$12327)))) (quote #f))) (g$0$11038 g$0$12321)))) (quote #f))) ((lambda (g$0$12345) (list g$0$12345)) (g$0$11034 g$0$12321)))) (quote #f))) (g$0$11038 g$0$12315)))) (quote #f))) ((lambda (g$0$12347) (quote ())) (g$0$11034 g$0$12315)))) (quote #f))) g$0$12299))) g$0$12293))) (set! g$0$11311 (lambda (g$0$12349 g$0$12350 g$0$12351) ((lambda (g$0$12355) ((lambda (g$0$12357) (if (if g$0$12357 (begin (quote #f) (apply (lambda (g$0$12359 g$0$12360 g$0$12361) (quote #t)) g$0$12357)) (quote #f)) (apply (lambda (g$0$12365 g$0$12366 g$0$12367) (list (quote if) (g$0$11395 g$0$12365 g$0$12350 g$0$12351) (g$0$10922) (g$0$10923 (quote #f) (g$0$11391 (cons g$0$12366 g$0$12367) g$0$12350 g$0$12351)))) g$0$12357) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12355 (quote ()))))) ((lambda (g$0$12371) (if (g$0$11026 g$0$12371) (begin (quote #f) ((lambda (g$0$12373) (if g$0$12373 (begin (quote #f) ((lambda (g$0$12375) (if g$0$12375 (begin (quote #f) (append g$0$12373 g$0$12375)) (quote #f))) ((lambda (g$0$12377) (if (g$0$11026 g$0$12377) (begin (quote #f) ((lambda (g$0$12379) (if g$0$12379 (begin (quote #f) ((lambda (g$0$12381) (if g$0$12381 (begin (quote #f) (append g$0$12379 g$0$12381)) (quote #f))) ((lambda (g$0$12383) (if (g$0$11026 g$0$12383) (begin (quote #f) ((lambda (g$0$12385) (if g$0$12385 (begin (quote #f) ((lambda (g$0$12387) (if g$0$12387 (begin (quote #f) (append g$0$12385 g$0$12387)) (quote #f))) ((letrec ((g$0$12389 (lambda (g$0$12391) (if (g$0$11026 g$0$12391) ((lambda (g$0$12393) (if g$0$12393 (begin (quote #f) ((lambda (g$0$12395) (if g$0$12395 (begin (quote #f) (map cons g$0$12393 g$0$12395)) (quote #f))) (g$0$12389 (g$0$11038 g$0$12391)))) (quote #f))) ((lambda (g$0$12397) (list g$0$12397)) (g$0$11034 g$0$12391))) (if (g$0$11030 g$0$12391) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12389) (g$0$11038 g$0$12383)))) (quote #f))) ((lambda (g$0$12399) (list g$0$12399)) (g$0$11034 g$0$12383)))) (quote #f))) (g$0$11038 g$0$12377)))) (quote #f))) ((lambda (g$0$12401) (list g$0$12401)) (g$0$11034 g$0$12377)))) (quote #f))) (g$0$11038 g$0$12371)))) (quote #f))) ((lambda (g$0$12403) (quote ())) (g$0$11034 g$0$12371)))) (quote #f))) g$0$12355))) g$0$12349))) (set! g$0$11313 (lambda (g$0$12405 g$0$12406 g$0$12407) ((lambda (g$0$12411) ((lambda (g$0$12413) (if (if g$0$12413 (begin (quote #f) (apply (lambda (g$0$12415 g$0$12416 g$0$12417) (quote #t)) g$0$12413)) (quote #f)) (apply (lambda (g$0$12421 g$0$12422 g$0$12423) (list (quote if) (g$0$11395 g$0$12421 g$0$12406 g$0$12407) (g$0$11395 g$0$12422 g$0$12406 g$0$12407) (g$0$11395 g$0$12423 g$0$12406 g$0$12407))) g$0$12413) ((lambda (g$0$12427) ((lambda (g$0$12429) (if (if g$0$12429 (begin (quote #f) (apply (lambda (g$0$12431 g$0$12432) (quote #t)) g$0$12429)) (quote #f)) (apply (lambda (g$0$12435 g$0$12436) (list (quote if) (g$0$11395 g$0$12435 g$0$12406 g$0$12407) (g$0$11395 g$0$12436 g$0$12406 g$0$12407) (g$0$10922))) g$0$12429) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12427 (quote ()))))) ((lambda (g$0$12439) (if (g$0$11026 g$0$12439) (begin (quote #f) ((lambda (g$0$12441) (if g$0$12441 (begin (quote #f) ((lambda (g$0$12443) (if g$0$12443 (begin (quote #f) (append g$0$12441 g$0$12443)) (quote #f))) ((lambda (g$0$12445) (if (g$0$11026 g$0$12445) (begin (quote #f) ((lambda (g$0$12447) (if g$0$12447 (begin (quote #f) ((lambda (g$0$12449) (if g$0$12449 (begin (quote #f) (append g$0$12447 g$0$12449)) (quote #f))) ((lambda (g$0$12451) (if (g$0$11026 g$0$12451) (begin (quote #f) ((lambda (g$0$12453) (if g$0$12453 (begin (quote #f) ((lambda (g$0$12455) (if g$0$12455 (begin (quote #f) (append g$0$12453 g$0$12455)) (quote #f))) ((lambda (g$0$12457) (if (equal? (g$0$11060 g$0$12457) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12451)))) (quote #f))) ((lambda (g$0$12459) (list g$0$12459)) (g$0$11034 g$0$12451)))) (quote #f))) (g$0$11038 g$0$12445)))) (quote #f))) ((lambda (g$0$12461) (list g$0$12461)) (g$0$11034 g$0$12445)))) (quote #f))) (g$0$11038 g$0$12439)))) (quote #f))) ((lambda (g$0$12463) (quote ())) (g$0$11034 g$0$12439)))) (quote #f))) g$0$12427))) g$0$12411))) ((lambda (g$0$12465) (if (g$0$11026 g$0$12465) (begin (quote #f) ((lambda (g$0$12467) (if g$0$12467 (begin (quote #f) ((lambda (g$0$12469) (if g$0$12469 (begin (quote #f) (append g$0$12467 g$0$12469)) (quote #f))) ((lambda (g$0$12471) (if (g$0$11026 g$0$12471) (begin (quote #f) ((lambda (g$0$12473) (if g$0$12473 (begin (quote #f) ((lambda (g$0$12475) (if g$0$12475 (begin (quote #f) (append g$0$12473 g$0$12475)) (quote #f))) ((lambda (g$0$12477) (if (g$0$11026 g$0$12477) (begin (quote #f) ((lambda (g$0$12479) (if g$0$12479 (begin (quote #f) ((lambda (g$0$12481) (if g$0$12481 (begin (quote #f) (append g$0$12479 g$0$12481)) (quote #f))) ((lambda (g$0$12483) (if (g$0$11026 g$0$12483) (begin (quote #f) ((lambda (g$0$12485) (if g$0$12485 (begin (quote #f) ((lambda (g$0$12487) (if g$0$12487 (begin (quote #f) (append g$0$12485 g$0$12487)) (quote #f))) ((lambda (g$0$12489) (if (equal? (g$0$11060 g$0$12489) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12483)))) (quote #f))) ((lambda (g$0$12491) (list g$0$12491)) (g$0$11034 g$0$12483)))) (quote #f))) (g$0$11038 g$0$12477)))) (quote #f))) ((lambda (g$0$12493) (list g$0$12493)) (g$0$11034 g$0$12477)))) (quote #f))) (g$0$11038 g$0$12471)))) (quote #f))) ((lambda (g$0$12495) (list g$0$12495)) (g$0$11034 g$0$12471)))) (quote #f))) (g$0$11038 g$0$12465)))) (quote #f))) ((lambda (g$0$12497) (quote ())) (g$0$11034 g$0$12465)))) (quote #f))) g$0$12411))) g$0$12405))) (set! g$0$11315 (lambda (g$0$12499 g$0$12500 g$0$12501) ((lambda (g$0$12505 g$0$12507) (begin (set! g$0$12505 (lambda (g$0$12615 g$0$12616 g$0$12617) ((lambda (g$0$12621) ((lambda (g$0$12623) (if (if g$0$12623 (begin (quote #f) (apply (lambda (g$0$12625 g$0$12626 g$0$12627) (quote #t)) g$0$12623)) (quote #f)) (apply (lambda (g$0$12631 g$0$12632 g$0$12633) (list (quote if) (list (quote (primitive memv)) g$0$12615 (list (quote quote) (g$0$11060 g$0$12631))) (g$0$10923 (quote #f) (g$0$11391 (cons g$0$12632 g$0$12633) g$0$12500 g$0$12501)) g$0$12617)) g$0$12623) ((lambda (g$0$12637) ((lambda (g$0$12639) (if (if g$0$12639 (begin (quote #f) (apply (lambda (g$0$12641) (quote #t)) g$0$12639)) (quote #f)) (apply (lambda (g$0$12643) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$12499))) g$0$12639) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12637 (quote ()))))) ((lambda (g$0$12645) (list g$0$12645)) g$0$12637))) g$0$12621))) ((lambda (g$0$12647) (if (g$0$11026 g$0$12647) (begin (quote #f) ((lambda (g$0$12649) (if g$0$12649 (begin (quote #f) ((lambda (g$0$12651) (if g$0$12651 (begin (quote #f) (append g$0$12649 g$0$12651)) (quote #f))) ((lambda (g$0$12653) (if (g$0$11026 g$0$12653) (begin (quote #f) ((lambda (g$0$12655) (if g$0$12655 (begin (quote #f) ((lambda (g$0$12657) (if g$0$12657 (begin (quote #f) (append g$0$12655 g$0$12657)) (quote #f))) ((letrec ((g$0$12659 (lambda (g$0$12661) (if (g$0$11026 g$0$12661) ((lambda (g$0$12663) (if g$0$12663 (begin (quote #f) ((lambda (g$0$12665) (if g$0$12665 (begin (quote #f) (map cons g$0$12663 g$0$12665)) (quote #f))) (g$0$12659 (g$0$11038 g$0$12661)))) (quote #f))) ((lambda (g$0$12667) (list g$0$12667)) (g$0$11034 g$0$12661))) (if (g$0$11030 g$0$12661) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12659) (g$0$11038 g$0$12653)))) (quote #f))) ((lambda (g$0$12669) (list g$0$12669)) (g$0$11034 g$0$12653)))) (quote #f))) (g$0$11038 g$0$12647)))) (quote #f))) ((letrec ((g$0$12671 (lambda (g$0$12673) (if (g$0$11026 g$0$12673) ((lambda (g$0$12675) (if g$0$12675 (begin (quote #f) ((lambda (g$0$12677) (if g$0$12677 (begin (quote #f) (map cons g$0$12675 g$0$12677)) (quote #f))) (g$0$12671 (g$0$11038 g$0$12673)))) (quote #f))) ((lambda (g$0$12679) (list g$0$12679)) (g$0$11034 g$0$12673))) (if (g$0$11030 g$0$12673) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$12671) (g$0$11034 g$0$12647)))) (quote #f))) g$0$12621))) g$0$12616))) (set! g$0$12507 (lambda (g$0$12509 g$0$12510) ((lambda (g$0$12513) ((lambda (g$0$12515) (if (if g$0$12515 (begin (quote #f) (apply (lambda (g$0$12517 g$0$12518 g$0$12519) (quote #t)) g$0$12515)) (quote #f)) (apply (lambda (g$0$12523 g$0$12524 g$0$12525) (g$0$12505 g$0$12509 g$0$12510 (g$0$10922))) g$0$12515) ((lambda (g$0$12529) ((lambda (g$0$12531) (if (if g$0$12531 (begin (quote #f) (apply (lambda (g$0$12533 g$0$12534 g$0$12535) (quote #t)) g$0$12531)) (quote #f)) (apply (lambda (g$0$12539 g$0$12540 g$0$12541) (if (if (g$0$11040 g$0$12539) (begin (quote #f) (g$0$11048 g$0$12539 (g$0$11293 (quote else)))) (quote #f)) (g$0$10923 (quote #f) (g$0$11391 (cons g$0$12540 g$0$12541) g$0$12500 g$0$12501)) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$12499)))) g$0$12531) ((lambda (g$0$12545) ((lambda (g$0$12547) (if (if g$0$12547 (begin (quote #f) (apply (lambda (g$0$12549) (quote #t)) g$0$12547)) (quote #f)) (apply (lambda (g$0$12551) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$12499))) g$0$12547) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12545 (quote ()))))) ((lambda (g$0$12553) (list g$0$12553)) g$0$12545))) g$0$12529))) ((lambda (g$0$12555) (if (g$0$11026 g$0$12555) (begin (quote #f) ((lambda (g$0$12557) (if g$0$12557 (begin (quote #f) ((lambda (g$0$12559) (if g$0$12559 (begin (quote #f) (append g$0$12557 g$0$12559)) (quote #f))) ((lambda (g$0$12561) (if (g$0$11026 g$0$12561) (begin (quote #f) ((lambda (g$0$12563) (if g$0$12563 (begin (quote #f) ((lambda (g$0$12565) (if g$0$12565 (begin (quote #f) (append g$0$12563 g$0$12565)) (quote #f))) ((letrec ((g$0$12567 (lambda (g$0$12569) (if (g$0$11026 g$0$12569) ((lambda (g$0$12571) (if g$0$12571 (begin (quote #f) ((lambda (g$0$12573) (if g$0$12573 (begin (quote #f) (map cons g$0$12571 g$0$12573)) (quote #f))) (g$0$12567 (g$0$11038 g$0$12569)))) (quote #f))) ((lambda (g$0$12575) (list g$0$12575)) (g$0$11034 g$0$12569))) (if (g$0$11030 g$0$12569) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$12567) (g$0$11038 g$0$12561)))) (quote #f))) ((lambda (g$0$12577) (list g$0$12577)) (g$0$11034 g$0$12561)))) (quote #f))) (g$0$11038 g$0$12555)))) (quote #f))) ((lambda (g$0$12579) (list g$0$12579)) (g$0$11034 g$0$12555)))) (quote #f))) g$0$12529))) g$0$12513))) ((lambda (g$0$12581) (if (g$0$11026 g$0$12581) (begin (quote #f) ((lambda (g$0$12583) (if g$0$12583 (begin (quote #f) ((lambda (g$0$12585) (if g$0$12585 (begin (quote #f) (append g$0$12583 g$0$12585)) (quote #f))) ((lambda (g$0$12587) (if (g$0$11026 g$0$12587) (begin (quote #f) ((lambda (g$0$12589) (if g$0$12589 (begin (quote #f) ((lambda (g$0$12591) (if g$0$12591 (begin (quote #f) (append g$0$12589 g$0$12591)) (quote #f))) ((letrec ((g$0$12593 (lambda (g$0$12595) (if (g$0$11026 g$0$12595) ((lambda (g$0$12597) (if g$0$12597 (begin (quote #f) ((lambda (g$0$12599) (if g$0$12599 (begin (quote #f) (map cons g$0$12597 g$0$12599)) (quote #f))) (g$0$12593 (g$0$11038 g$0$12595)))) (quote #f))) ((lambda (g$0$12601) (list g$0$12601)) (g$0$11034 g$0$12595))) (if (g$0$11030 g$0$12595) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$12593) (g$0$11038 g$0$12587)))) (quote #f))) ((lambda (g$0$12603) (list g$0$12603)) (g$0$11034 g$0$12587)))) (quote #f))) (g$0$11038 g$0$12581)))) (quote #f))) ((letrec ((g$0$12605 (lambda (g$0$12607) (if (g$0$11026 g$0$12607) ((lambda (g$0$12609) (if g$0$12609 (begin (quote #f) ((lambda (g$0$12611) (if g$0$12611 (begin (quote #f) (map cons g$0$12609 g$0$12611)) (quote #f))) (g$0$12605 (g$0$11038 g$0$12607)))) (quote #f))) ((lambda (g$0$12613) (list g$0$12613)) (g$0$11034 g$0$12607))) (if (g$0$11030 g$0$12607) (list (begin (quote d*) (quote ()))) (quote #f)))))) g$0$12605) (g$0$11034 g$0$12581)))) (quote #f))) g$0$12513))) g$0$12510))) ((lambda (g$0$12681) ((lambda (g$0$12683) (if (if g$0$12683 (begin (quote #f) (apply (lambda (g$0$12685) (quote #t)) g$0$12683)) (quote #f)) (apply (lambda (g$0$12687) (g$0$10923 (quote #f) (list (g$0$11395 g$0$12687 g$0$12500 g$0$12501) (g$0$10922)))) g$0$12683) ((lambda (g$0$12689) ((lambda (g$0$12691) (if (if g$0$12691 (begin (quote #f) (apply (lambda (g$0$12693 g$0$12694 g$0$12695) (quote #t)) g$0$12691)) (quote #f)) (apply (lambda (g$0$12699 g$0$12700 g$0$12701) ((lambda (g$0$12705) (g$0$10927 (quote #f) (list g$0$12705) (list (g$0$11395 g$0$12699 g$0$12500 g$0$12501)) (letrec ((g$0$12707 (lambda (g$0$12709 g$0$12710) (if (null? g$0$12710) (g$0$12507 g$0$12705 g$0$12709) (g$0$12505 g$0$12705 g$0$12709 (g$0$12707 (car g$0$12710) (cdr g$0$12710))))))) (g$0$12707 g$0$12700 g$0$12701)))) (g$0$10950 (quote t)))) g$0$12691) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12689 (quote ()))))) ((lambda (g$0$12713) (if (g$0$11026 g$0$12713) (begin (quote #f) ((lambda (g$0$12715) (if g$0$12715 (begin (quote #f) ((lambda (g$0$12717) (if g$0$12717 (begin (quote #f) (append g$0$12715 g$0$12717)) (quote #f))) ((lambda (g$0$12719) (if (g$0$11026 g$0$12719) (begin (quote #f) ((lambda (g$0$12721) (if g$0$12721 (begin (quote #f) ((lambda (g$0$12723) (if g$0$12723 (begin (quote #f) (append g$0$12721 g$0$12723)) (quote #f))) ((lambda (g$0$12725) (if (g$0$11026 g$0$12725) (begin (quote #f) ((lambda (g$0$12727) (if g$0$12727 (begin (quote #f) ((lambda (g$0$12729) (if g$0$12729 (begin (quote #f) (append g$0$12727 g$0$12729)) (quote #f))) ((letrec ((g$0$12731 (lambda (g$0$12733) (if (g$0$11026 g$0$12733) ((lambda (g$0$12735) (if g$0$12735 (begin (quote #f) ((lambda (g$0$12737) (if g$0$12737 (begin (quote #f) (map cons g$0$12735 g$0$12737)) (quote #f))) (g$0$12731 (g$0$11038 g$0$12733)))) (quote #f))) ((lambda (g$0$12739) (list g$0$12739)) (g$0$11034 g$0$12733))) (if (g$0$11030 g$0$12733) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$12731) (g$0$11038 g$0$12725)))) (quote #f))) ((lambda (g$0$12741) (list g$0$12741)) (g$0$11034 g$0$12725)))) (quote #f))) (g$0$11038 g$0$12719)))) (quote #f))) ((lambda (g$0$12743) (list g$0$12743)) (g$0$11034 g$0$12719)))) (quote #f))) (g$0$11038 g$0$12713)))) (quote #f))) ((lambda (g$0$12745) (quote ())) (g$0$11034 g$0$12713)))) (quote #f))) g$0$12689))) g$0$12681))) ((lambda (g$0$12747) (if (g$0$11026 g$0$12747) (begin (quote #f) ((lambda (g$0$12749) (if g$0$12749 (begin (quote #f) ((lambda (g$0$12751) (if g$0$12751 (begin (quote #f) (append g$0$12749 g$0$12751)) (quote #f))) ((lambda (g$0$12753) (if (g$0$11026 g$0$12753) (begin (quote #f) ((lambda (g$0$12755) (if g$0$12755 (begin (quote #f) ((lambda (g$0$12757) (if g$0$12757 (begin (quote #f) (append g$0$12755 g$0$12757)) (quote #f))) ((lambda (g$0$12759) (if (equal? (g$0$11060 g$0$12759) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12753)))) (quote #f))) ((lambda (g$0$12761) (list g$0$12761)) (g$0$11034 g$0$12753)))) (quote #f))) (g$0$11038 g$0$12747)))) (quote #f))) ((lambda (g$0$12763) (quote ())) (g$0$11034 g$0$12747)))) (quote #f))) g$0$12681))) g$0$12499))) (quote #f) (quote #f)))) (set! g$0$11317 (lambda (g$0$12765 g$0$12766 g$0$12767) ((lambda (g$0$12771) ((lambda (g$0$12773) (if (if g$0$12773 (begin (quote #f) (apply (lambda (g$0$12775) (quote #t)) g$0$12773)) (quote #f)) (apply (lambda (g$0$12777) (list (quote quote) (g$0$11060 g$0$12777))) g$0$12773) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12771 (quote ()))))) ((lambda (g$0$12779) (if (g$0$11026 g$0$12779) (begin (quote #f) ((lambda (g$0$12781) (if g$0$12781 (begin (quote #f) ((lambda (g$0$12783) (if g$0$12783 (begin (quote #f) (append g$0$12781 g$0$12783)) (quote #f))) ((lambda (g$0$12785) (if (g$0$11026 g$0$12785) (begin (quote #f) ((lambda (g$0$12787) (if g$0$12787 (begin (quote #f) ((lambda (g$0$12789) (if g$0$12789 (begin (quote #f) (append g$0$12787 g$0$12789)) (quote #f))) ((lambda (g$0$12791) (if (equal? (g$0$11060 g$0$12791) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12785)))) (quote #f))) ((lambda (g$0$12793) (list g$0$12793)) (g$0$11034 g$0$12785)))) (quote #f))) (g$0$11038 g$0$12779)))) (quote #f))) ((lambda (g$0$12795) (quote ())) (g$0$11034 g$0$12779)))) (quote #f))) g$0$12771))) g$0$12765))) (set! g$0$11319 (lambda (g$0$12797 g$0$12798 g$0$12799) ((lambda (g$0$12803) ((lambda (g$0$12805) (if (if g$0$12805 (begin (quote #f) (apply (lambda (g$0$12807 g$0$12808 g$0$12809) (quote #t)) g$0$12805)) (quote #f)) (apply (lambda (g$0$12813 g$0$12814 g$0$12815) (call-with-values (lambda () (g$0$11401 g$0$12813 (map cons g$0$12814 g$0$12815) g$0$12798 g$0$12799)) (lambda (g$0$12819 g$0$12820) (g$0$10928 (quote #f) g$0$12819 g$0$12820)))) g$0$12805) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12803 (quote ()))))) ((lambda (g$0$12823) (if (g$0$11026 g$0$12823) (begin (quote #f) ((lambda (g$0$12825) (if g$0$12825 (begin (quote #f) ((lambda (g$0$12827) (if g$0$12827 (begin (quote #f) (append g$0$12825 g$0$12827)) (quote #f))) ((letrec ((g$0$12829 (lambda (g$0$12831) (if (g$0$11026 g$0$12831) ((lambda (g$0$12833) (if g$0$12833 (begin (quote #f) ((lambda (g$0$12835) (if g$0$12835 (begin (quote #f) (map cons g$0$12833 g$0$12835)) (quote #f))) (g$0$12829 (g$0$11038 g$0$12831)))) (quote #f))) ((lambda (g$0$12837) (if (g$0$11026 g$0$12837) (begin (quote #f) ((lambda (g$0$12839) (if g$0$12839 (begin (quote #f) ((lambda (g$0$12841) (if g$0$12841 (begin (quote #f) (append g$0$12839 g$0$12841)) (quote #f))) ((lambda (g$0$12843) (if (g$0$11026 g$0$12843) (begin (quote #f) ((lambda (g$0$12845) (if g$0$12845 (begin (quote #f) ((lambda (g$0$12847) (if g$0$12847 (begin (quote #f) (append g$0$12845 g$0$12847)) (quote #f))) ((letrec ((g$0$12849 (lambda (g$0$12851) (if (g$0$11026 g$0$12851) ((lambda (g$0$12853) (if g$0$12853 (begin (quote #f) ((lambda (g$0$12855) (if g$0$12855 (begin (quote #f) (map cons g$0$12853 g$0$12855)) (quote #f))) (g$0$12849 (g$0$11038 g$0$12851)))) (quote #f))) ((lambda (g$0$12857) (list g$0$12857)) (g$0$11034 g$0$12851))) (if (g$0$11030 g$0$12851) (list (begin (quote b**) (quote ()))) (quote #f)))))) g$0$12849) (g$0$11038 g$0$12843)))) (quote #f))) ((lambda (g$0$12859) (list g$0$12859)) (g$0$11034 g$0$12843)))) (quote #f))) (g$0$11038 g$0$12837)))) (quote #f))) ((lambda (g$0$12861) (list g$0$12861)) (g$0$11034 g$0$12837)))) (quote #f))) (g$0$11034 g$0$12831))) (if (g$0$11030 g$0$12831) (list (begin (quote fmls*) (quote ())) (begin (quote b*) (quote ())) (begin (quote b**) (quote ()))) (quote #f)))))) g$0$12829) (g$0$11038 g$0$12823)))) (quote #f))) ((lambda (g$0$12863) (quote ())) (g$0$11034 g$0$12823)))) (quote #f))) g$0$12803))) g$0$12797))) (set! g$0$11321 (lambda (g$0$12865 g$0$12866 g$0$12867) ((lambda (g$0$12871) ((lambda (g$0$12873) (if (if g$0$12873 (begin (quote #f) (apply (lambda (g$0$12875 g$0$12876 g$0$12877) (quote #t)) g$0$12873)) (quote #f)) (apply (lambda (g$0$12881 g$0$12882 g$0$12883) (call-with-values (lambda () (g$0$11399 g$0$12881 (cons g$0$12882 g$0$12883) g$0$12866 g$0$12867)) (lambda (g$0$12887 g$0$12888) (g$0$10929 (quote #f) g$0$12887 g$0$12888)))) g$0$12873) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12871 (quote ()))))) ((lambda (g$0$12891) (if (g$0$11026 g$0$12891) (begin (quote #f) ((lambda (g$0$12893) (if g$0$12893 (begin (quote #f) ((lambda (g$0$12895) (if g$0$12895 (begin (quote #f) (append g$0$12893 g$0$12895)) (quote #f))) ((lambda (g$0$12897) (if (g$0$11026 g$0$12897) (begin (quote #f) ((lambda (g$0$12899) (if g$0$12899 (begin (quote #f) ((lambda (g$0$12901) (if g$0$12901 (begin (quote #f) (append g$0$12899 g$0$12901)) (quote #f))) ((lambda (g$0$12903) (if (g$0$11026 g$0$12903) (begin (quote #f) ((lambda (g$0$12905) (if g$0$12905 (begin (quote #f) ((lambda (g$0$12907) (if g$0$12907 (begin (quote #f) (append g$0$12905 g$0$12907)) (quote #f))) ((letrec ((g$0$12909 (lambda (g$0$12911) (if (g$0$11026 g$0$12911) ((lambda (g$0$12913) (if g$0$12913 (begin (quote #f) ((lambda (g$0$12915) (if g$0$12915 (begin (quote #f) (map cons g$0$12913 g$0$12915)) (quote #f))) (g$0$12909 (g$0$11038 g$0$12911)))) (quote #f))) ((lambda (g$0$12917) (list g$0$12917)) (g$0$11034 g$0$12911))) (if (g$0$11030 g$0$12911) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12909) (g$0$11038 g$0$12903)))) (quote #f))) ((lambda (g$0$12919) (list g$0$12919)) (g$0$11034 g$0$12903)))) (quote #f))) (g$0$11038 g$0$12897)))) (quote #f))) ((lambda (g$0$12921) (list g$0$12921)) (g$0$11034 g$0$12897)))) (quote #f))) (g$0$11038 g$0$12891)))) (quote #f))) ((lambda (g$0$12923) (quote ())) (g$0$11034 g$0$12891)))) (quote #f))) g$0$12871))) g$0$12865))) (set! g$0$11323 (lambda (g$0$12925) (g$0$11016 (letrec ((g$0$12927 (lambda (g$0$12929) (if (g$0$10992 g$0$12929) g$0$12929 (if (pair? g$0$12929) (cons (g$0$12927 (car g$0$12929)) (g$0$12927 (cdr g$0$12929))) (if (symbol? g$0$12929) (g$0$11293 g$0$12929) (if (vector? g$0$12929) (list->vector (map g$0$12927 (vector->list g$0$12929))) g$0$12929))))))) (g$0$12927 g$0$12925)) (quote ()) (quote ())))) (set! g$0$11325 (lambda (g$0$12931) ((lambda (g$0$12933) ((lambda (g$0$12935) (if (if g$0$12935 (begin (quote #f) (apply (lambda (g$0$12937 g$0$12938 g$0$12939 g$0$12940) (quote #t)) g$0$12935)) (quote #f)) (apply (lambda (g$0$12945 g$0$12946 g$0$12947 g$0$12948) (g$0$11323 (list (quote syntax-case) (cons (quote list) g$0$12946) (quote ()) (list g$0$12945 (cons (quote begin) (cons g$0$12947 g$0$12948)))))) g$0$12935) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$12933 (quote ()))))) ((lambda (g$0$12953) (if (g$0$11026 g$0$12953) (begin (quote #f) ((lambda (g$0$12955) (if g$0$12955 (begin (quote #f) ((lambda (g$0$12957) (if g$0$12957 (begin (quote #f) (append g$0$12955 g$0$12957)) (quote #f))) ((lambda (g$0$12959) (if (g$0$11026 g$0$12959) (begin (quote #f) ((lambda (g$0$12961) (if g$0$12961 (begin (quote #f) ((lambda (g$0$12963) (if g$0$12963 (begin (quote #f) (append g$0$12961 g$0$12963)) (quote #f))) ((lambda (g$0$12965) (if (g$0$11026 g$0$12965) (begin (quote #f) ((lambda (g$0$12967) (if g$0$12967 (begin (quote #f) ((lambda (g$0$12969) (if g$0$12969 (begin (quote #f) (append g$0$12967 g$0$12969)) (quote #f))) ((letrec ((g$0$12971 (lambda (g$0$12973) (if (g$0$11026 g$0$12973) ((lambda (g$0$12975) (if g$0$12975 (begin (quote #f) ((lambda (g$0$12977) (if g$0$12977 (begin (quote #f) (map cons g$0$12975 g$0$12977)) (quote #f))) (g$0$12971 (g$0$11038 g$0$12973)))) (quote #f))) ((lambda (g$0$12979) (list g$0$12979)) (g$0$11034 g$0$12973))) (if (g$0$11030 g$0$12973) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$12971) (g$0$11038 g$0$12965)))) (quote #f))) ((lambda (g$0$12981) (list g$0$12981)) (g$0$11034 g$0$12965)))) (quote #f))) (g$0$11038 g$0$12959)))) (quote #f))) ((letrec ((g$0$12983 (lambda (g$0$12985) (if (g$0$11026 g$0$12985) ((lambda (g$0$12987) (if g$0$12987 (begin (quote #f) ((lambda (g$0$12989) (if g$0$12989 (begin (quote #f) (map cons g$0$12987 g$0$12989)) (quote #f))) (g$0$12983 (g$0$11038 g$0$12985)))) (quote #f))) ((lambda (g$0$12991) (if (g$0$11026 g$0$12991) (begin (quote #f) ((lambda (g$0$12993) (if g$0$12993 (begin (quote #f) ((lambda (g$0$12995) (if g$0$12995 (begin (quote #f) (append g$0$12993 g$0$12995)) (quote #f))) ((lambda (g$0$12997) (if (g$0$11026 g$0$12997) (begin (quote #f) ((lambda (g$0$12999) (if g$0$12999 (begin (quote #f) ((lambda (g$0$13001) (if g$0$13001 (begin (quote #f) (append g$0$12999 g$0$13001)) (quote #f))) ((lambda (g$0$13003) (if (equal? (g$0$11060 g$0$13003) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$12997)))) (quote #f))) ((lambda (g$0$13005) (list g$0$13005)) (g$0$11034 g$0$12997)))) (quote #f))) (g$0$11038 g$0$12991)))) (quote #f))) ((lambda (g$0$13007) (list g$0$13007)) (g$0$11034 g$0$12991)))) (quote #f))) (g$0$11034 g$0$12985))) (if (g$0$11030 g$0$12985) (list (begin (quote fml*) (quote ())) (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$12983) (g$0$11034 g$0$12959)))) (quote #f))) (g$0$11038 g$0$12953)))) (quote #f))) ((lambda (g$0$13009) (quote ())) (g$0$11034 g$0$12953)))) (quote #f))) g$0$12933))) g$0$12931))) (set! g$0$11327 (lambda (g$0$13011) ((lambda (g$0$13013) ((lambda (g$0$13015) (if (if g$0$13015 (begin (quote #f) (apply (lambda (g$0$13017 g$0$13018 g$0$13019 g$0$13020) (quote #t)) g$0$13015)) (quote #f)) (apply (lambda (g$0$13025 g$0$13026 g$0$13027 g$0$13028) (if (g$0$11050 g$0$13025) (g$0$11323 (cons (cons (quote lambda) (cons g$0$13025 (cons g$0$13027 g$0$13028))) g$0$13026)) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (g$0$11058 g$0$13011 (quote ()))))) g$0$13015) ((lambda (g$0$13033) ((lambda (g$0$13035) (if (if g$0$13035 (begin (quote #f) (apply (lambda (g$0$13037 g$0$13038 g$0$13039 g$0$13040 g$0$13041) (g$0$11040 g$0$13037)) g$0$13035)) (quote #f)) (apply (lambda (g$0$13047 g$0$13048 g$0$13049 g$0$13050 g$0$13051) (if (g$0$11050 g$0$13048) (g$0$11323 (list (quote letrec) (list (list g$0$13047 (cons (quote lambda) (cons g$0$13048 (cons g$0$13050 g$0$13051))))) (cons g$0$13047 g$0$13049))) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13011 (quote ()))))) g$0$13035) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13033 (quote ()))))) ((lambda (g$0$13057) (if (g$0$11026 g$0$13057) (begin (quote #f) ((lambda (g$0$13059) (if g$0$13059 (begin (quote #f) ((lambda (g$0$13061) (if g$0$13061 (begin (quote #f) (append g$0$13059 g$0$13061)) (quote #f))) ((lambda (g$0$13063) (if (g$0$11026 g$0$13063) (begin (quote #f) ((lambda (g$0$13065) (if g$0$13065 (begin (quote #f) ((lambda (g$0$13067) (if g$0$13067 (begin (quote #f) (append g$0$13065 g$0$13067)) (quote #f))) ((lambda (g$0$13069) (if (g$0$11026 g$0$13069) (begin (quote #f) ((lambda (g$0$13071) (if g$0$13071 (begin (quote #f) ((lambda (g$0$13073) (if g$0$13073 (begin (quote #f) (append g$0$13071 g$0$13073)) (quote #f))) ((lambda (g$0$13075) (if (g$0$11026 g$0$13075) (begin (quote #f) ((lambda (g$0$13077) (if g$0$13077 (begin (quote #f) ((lambda (g$0$13079) (if g$0$13079 (begin (quote #f) (append g$0$13077 g$0$13079)) (quote #f))) ((letrec ((g$0$13081 (lambda (g$0$13083) (if (g$0$11026 g$0$13083) ((lambda (g$0$13085) (if g$0$13085 (begin (quote #f) ((lambda (g$0$13087) (if g$0$13087 (begin (quote #f) (map cons g$0$13085 g$0$13087)) (quote #f))) (g$0$13081 (g$0$11038 g$0$13083)))) (quote #f))) ((lambda (g$0$13089) (list g$0$13089)) (g$0$11034 g$0$13083))) (if (g$0$11030 g$0$13083) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13081) (g$0$11038 g$0$13075)))) (quote #f))) ((lambda (g$0$13091) (list g$0$13091)) (g$0$11034 g$0$13075)))) (quote #f))) (g$0$11038 g$0$13069)))) (quote #f))) ((letrec ((g$0$13093 (lambda (g$0$13095) (if (g$0$11026 g$0$13095) ((lambda (g$0$13097) (if g$0$13097 (begin (quote #f) ((lambda (g$0$13099) (if g$0$13099 (begin (quote #f) (map cons g$0$13097 g$0$13099)) (quote #f))) (g$0$13093 (g$0$11038 g$0$13095)))) (quote #f))) ((lambda (g$0$13101) (if (g$0$11026 g$0$13101) (begin (quote #f) ((lambda (g$0$13103) (if g$0$13103 (begin (quote #f) ((lambda (g$0$13105) (if g$0$13105 (begin (quote #f) (append g$0$13103 g$0$13105)) (quote #f))) ((lambda (g$0$13107) (if (g$0$11026 g$0$13107) (begin (quote #f) ((lambda (g$0$13109) (if g$0$13109 (begin (quote #f) ((lambda (g$0$13111) (if g$0$13111 (begin (quote #f) (append g$0$13109 g$0$13111)) (quote #f))) ((lambda (g$0$13113) (if (equal? (g$0$11060 g$0$13113) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13107)))) (quote #f))) ((lambda (g$0$13115) (list g$0$13115)) (g$0$11034 g$0$13107)))) (quote #f))) (g$0$11038 g$0$13101)))) (quote #f))) ((lambda (g$0$13117) (list g$0$13117)) (g$0$11034 g$0$13101)))) (quote #f))) (g$0$11034 g$0$13095))) (if (g$0$11030 g$0$13095) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$13093) (g$0$11034 g$0$13069)))) (quote #f))) (g$0$11038 g$0$13063)))) (quote #f))) ((lambda (g$0$13119) (list g$0$13119)) (g$0$11034 g$0$13063)))) (quote #f))) (g$0$11038 g$0$13057)))) (quote #f))) ((lambda (g$0$13121) (quote ())) (g$0$11034 g$0$13057)))) (quote #f))) g$0$13033))) g$0$13013))) ((lambda (g$0$13123) (if (g$0$11026 g$0$13123) (begin (quote #f) ((lambda (g$0$13125) (if g$0$13125 (begin (quote #f) ((lambda (g$0$13127) (if g$0$13127 (begin (quote #f) (append g$0$13125 g$0$13127)) (quote #f))) ((lambda (g$0$13129) (if (g$0$11026 g$0$13129) (begin (quote #f) ((lambda (g$0$13131) (if g$0$13131 (begin (quote #f) ((lambda (g$0$13133) (if g$0$13133 (begin (quote #f) (append g$0$13131 g$0$13133)) (quote #f))) ((lambda (g$0$13135) (if (g$0$11026 g$0$13135) (begin (quote #f) ((lambda (g$0$13137) (if g$0$13137 (begin (quote #f) ((lambda (g$0$13139) (if g$0$13139 (begin (quote #f) (append g$0$13137 g$0$13139)) (quote #f))) ((letrec ((g$0$13141 (lambda (g$0$13143) (if (g$0$11026 g$0$13143) ((lambda (g$0$13145) (if g$0$13145 (begin (quote #f) ((lambda (g$0$13147) (if g$0$13147 (begin (quote #f) (map cons g$0$13145 g$0$13147)) (quote #f))) (g$0$13141 (g$0$11038 g$0$13143)))) (quote #f))) ((lambda (g$0$13149) (list g$0$13149)) (g$0$11034 g$0$13143))) (if (g$0$11030 g$0$13143) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13141) (g$0$11038 g$0$13135)))) (quote #f))) ((lambda (g$0$13151) (list g$0$13151)) (g$0$11034 g$0$13135)))) (quote #f))) (g$0$11038 g$0$13129)))) (quote #f))) ((letrec ((g$0$13153 (lambda (g$0$13155) (if (g$0$11026 g$0$13155) ((lambda (g$0$13157) (if g$0$13157 (begin (quote #f) ((lambda (g$0$13159) (if g$0$13159 (begin (quote #f) (map cons g$0$13157 g$0$13159)) (quote #f))) (g$0$13153 (g$0$11038 g$0$13155)))) (quote #f))) ((lambda (g$0$13161) (if (g$0$11026 g$0$13161) (begin (quote #f) ((lambda (g$0$13163) (if g$0$13163 (begin (quote #f) ((lambda (g$0$13165) (if g$0$13165 (begin (quote #f) (append g$0$13163 g$0$13165)) (quote #f))) ((lambda (g$0$13167) (if (g$0$11026 g$0$13167) (begin (quote #f) ((lambda (g$0$13169) (if g$0$13169 (begin (quote #f) ((lambda (g$0$13171) (if g$0$13171 (begin (quote #f) (append g$0$13169 g$0$13171)) (quote #f))) ((lambda (g$0$13173) (if (equal? (g$0$11060 g$0$13173) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13167)))) (quote #f))) ((lambda (g$0$13175) (list g$0$13175)) (g$0$11034 g$0$13167)))) (quote #f))) (g$0$11038 g$0$13161)))) (quote #f))) ((lambda (g$0$13177) (list g$0$13177)) (g$0$11034 g$0$13161)))) (quote #f))) (g$0$11034 g$0$13155))) (if (g$0$11030 g$0$13155) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$13153) (g$0$11034 g$0$13129)))) (quote #f))) (g$0$11038 g$0$13123)))) (quote #f))) ((lambda (g$0$13179) (quote ())) (g$0$11034 g$0$13123)))) (quote #f))) g$0$13013))) g$0$13011))) (set! g$0$11329 (lambda (g$0$13181) ((lambda (g$0$13183) ((lambda (g$0$13185) (if (if g$0$13185 (begin (quote #f) (apply (lambda (g$0$13187 g$0$13188 g$0$13189 g$0$13190) (quote #t)) g$0$13185)) (quote #f)) (apply (lambda (g$0$13195 g$0$13196 g$0$13197 g$0$13198) (if (g$0$11050 g$0$13196) (g$0$11323 (list (quote make-traced-procedure) (list (quote quote) g$0$13195) (cons (quote lambda) (cons g$0$13196 (cons g$0$13197 g$0$13198))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11058 g$0$13181 (quote ()))))) g$0$13185) ((lambda (g$0$13203) ((lambda (g$0$13205) (if (if g$0$13205 (begin (quote #f) (apply (lambda (g$0$13207 g$0$13208 g$0$13209 g$0$13210 g$0$13211) (quote #t)) g$0$13205)) (quote #f)) (apply (lambda (g$0$13217 g$0$13218 g$0$13219 g$0$13220 g$0$13221) (if (g$0$11050 (cons g$0$13219 g$0$13218)) (g$0$11323 (list (quote make-traced-procedure) (list (quote quote) g$0$13217) (cons (quote lambda) (cons (append g$0$13218 g$0$13219) (cons g$0$13220 g$0$13221))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11058 g$0$13181 (quote ()))))) g$0$13205) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13203 (quote ()))))) ((lambda (g$0$13227) (if (g$0$11026 g$0$13227) (begin (quote #f) ((lambda (g$0$13229) (if g$0$13229 (begin (quote #f) ((lambda (g$0$13231) (if g$0$13231 (begin (quote #f) (append g$0$13229 g$0$13231)) (quote #f))) ((lambda (g$0$13233) (if (g$0$11026 g$0$13233) (begin (quote #f) ((lambda (g$0$13235) (if g$0$13235 (begin (quote #f) ((lambda (g$0$13237) (if g$0$13237 (begin (quote #f) (append g$0$13235 g$0$13237)) (quote #f))) ((lambda (g$0$13239) (if (g$0$11026 g$0$13239) (begin (quote #f) ((lambda (g$0$13241) (if g$0$13241 (begin (quote #f) ((lambda (g$0$13243) (if g$0$13243 (begin (quote #f) (append g$0$13241 g$0$13243)) (quote #f))) ((lambda (g$0$13245) (if (g$0$11026 g$0$13245) (begin (quote #f) ((lambda (g$0$13247) (if g$0$13247 (begin (quote #f) ((lambda (g$0$13249) (if g$0$13249 (begin (quote #f) (append g$0$13247 g$0$13249)) (quote #f))) ((letrec ((g$0$13251 (lambda (g$0$13253) (if (g$0$11026 g$0$13253) ((lambda (g$0$13255) (if g$0$13255 (begin (quote #f) ((lambda (g$0$13257) (if g$0$13257 (begin (quote #f) (map cons g$0$13255 g$0$13257)) (quote #f))) (g$0$13251 (g$0$11038 g$0$13253)))) (quote #f))) ((lambda (g$0$13259) (list g$0$13259)) (g$0$11034 g$0$13253))) (if (g$0$11030 g$0$13253) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13251) (g$0$11038 g$0$13245)))) (quote #f))) ((lambda (g$0$13261) (list g$0$13261)) (g$0$11034 g$0$13245)))) (quote #f))) (g$0$11038 g$0$13239)))) (quote #f))) ((letrec ((g$0$13263 (lambda (g$0$13269) (if (g$0$11026 g$0$13269) ((lambda (g$0$13271) (if g$0$13271 (begin (quote #f) ((lambda (g$0$13273) (if g$0$13273 (begin (quote #f) (cons (map cons g$0$13271 (car g$0$13273)) (cdr g$0$13273))) (quote #f))) (g$0$13263 (g$0$11038 g$0$13269)))) (quote #f))) ((lambda (g$0$13275) (list g$0$13275)) (g$0$11034 g$0$13269))) ((lambda (g$0$13277) (if g$0$13277 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$13277)) (quote #f))) ((lambda (g$0$13279) (list g$0$13279)) g$0$13269)))))) (lambda (g$0$13265) ((lambda (g$0$13267) (if g$0$13267 (begin (quote #f) (append (car g$0$13267) (cdr g$0$13267))) (quote #f))) (g$0$13263 g$0$13265)))) (g$0$11034 g$0$13239)))) (quote #f))) (g$0$11038 g$0$13233)))) (quote #f))) ((lambda (g$0$13281) (list g$0$13281)) (g$0$11034 g$0$13233)))) (quote #f))) (g$0$11038 g$0$13227)))) (quote #f))) ((lambda (g$0$13283) (quote ())) (g$0$11034 g$0$13227)))) (quote #f))) g$0$13203))) g$0$13183))) ((lambda (g$0$13285) (if (g$0$11026 g$0$13285) (begin (quote #f) ((lambda (g$0$13287) (if g$0$13287 (begin (quote #f) ((lambda (g$0$13289) (if g$0$13289 (begin (quote #f) (append g$0$13287 g$0$13289)) (quote #f))) ((lambda (g$0$13291) (if (g$0$11026 g$0$13291) (begin (quote #f) ((lambda (g$0$13293) (if g$0$13293 (begin (quote #f) ((lambda (g$0$13295) (if g$0$13295 (begin (quote #f) (append g$0$13293 g$0$13295)) (quote #f))) ((lambda (g$0$13297) (if (g$0$11026 g$0$13297) (begin (quote #f) ((lambda (g$0$13299) (if g$0$13299 (begin (quote #f) ((lambda (g$0$13301) (if g$0$13301 (begin (quote #f) (append g$0$13299 g$0$13301)) (quote #f))) ((lambda (g$0$13303) (if (g$0$11026 g$0$13303) (begin (quote #f) ((lambda (g$0$13305) (if g$0$13305 (begin (quote #f) ((lambda (g$0$13307) (if g$0$13307 (begin (quote #f) (append g$0$13305 g$0$13307)) (quote #f))) ((letrec ((g$0$13309 (lambda (g$0$13311) (if (g$0$11026 g$0$13311) ((lambda (g$0$13313) (if g$0$13313 (begin (quote #f) ((lambda (g$0$13315) (if g$0$13315 (begin (quote #f) (map cons g$0$13313 g$0$13315)) (quote #f))) (g$0$13309 (g$0$11038 g$0$13311)))) (quote #f))) ((lambda (g$0$13317) (list g$0$13317)) (g$0$11034 g$0$13311))) (if (g$0$11030 g$0$13311) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13309) (g$0$11038 g$0$13303)))) (quote #f))) ((lambda (g$0$13319) (list g$0$13319)) (g$0$11034 g$0$13303)))) (quote #f))) (g$0$11038 g$0$13297)))) (quote #f))) ((letrec ((g$0$13321 (lambda (g$0$13323) (if (g$0$11026 g$0$13323) ((lambda (g$0$13325) (if g$0$13325 (begin (quote #f) ((lambda (g$0$13327) (if g$0$13327 (begin (quote #f) (map cons g$0$13325 g$0$13327)) (quote #f))) (g$0$13321 (g$0$11038 g$0$13323)))) (quote #f))) ((lambda (g$0$13329) (list g$0$13329)) (g$0$11034 g$0$13323))) (if (g$0$11030 g$0$13323) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$13321) (g$0$11034 g$0$13297)))) (quote #f))) (g$0$11038 g$0$13291)))) (quote #f))) ((lambda (g$0$13331) (list g$0$13331)) (g$0$11034 g$0$13291)))) (quote #f))) (g$0$11038 g$0$13285)))) (quote #f))) ((lambda (g$0$13333) (quote ())) (g$0$11034 g$0$13285)))) (quote #f))) g$0$13183))) g$0$13181))) (set! g$0$11331 (lambda (g$0$13335) ((lambda (g$0$13337) ((lambda (g$0$13339) (if (if g$0$13339 (begin (quote #f) (apply (lambda (g$0$13341 g$0$13342 g$0$13343 g$0$13344) (quote #t)) g$0$13339)) (quote #f)) (apply (lambda (g$0$13349 g$0$13350 g$0$13351 g$0$13352) (if (g$0$11050 g$0$13350) (g$0$11323 (list (quote define) g$0$13349 (list (quote make-traced-procedure) (list (quote quote) g$0$13349) (cons (quote lambda) (cons g$0$13350 (cons g$0$13351 g$0$13352)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11058 g$0$13335 (quote ()))))) g$0$13339) ((lambda (g$0$13357) ((lambda (g$0$13359) (if (if g$0$13359 (begin (quote #f) (apply (lambda (g$0$13361 g$0$13362 g$0$13363 g$0$13364 g$0$13365) (quote #t)) g$0$13359)) (quote #f)) (apply (lambda (g$0$13371 g$0$13372 g$0$13373 g$0$13374 g$0$13375) (if (g$0$11050 (cons g$0$13373 g$0$13372)) (g$0$11323 (list (quote define) g$0$13371 (list (quote make-traced-procedure) (list (quote quote) g$0$13371) (cons (quote lambda) (cons (append g$0$13372 g$0$13373) (cons g$0$13374 g$0$13375)))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11058 g$0$13335 (quote ()))))) g$0$13359) ((lambda (g$0$13381) ((lambda (g$0$13383) (if (if g$0$13383 (begin (quote #f) (apply (lambda (g$0$13385 g$0$13386) (quote #t)) g$0$13383)) (quote #f)) (apply (lambda (g$0$13389 g$0$13390) (if (g$0$11040 g$0$13389) (g$0$11323 (list (quote define) g$0$13389 (list (quote let) (list (list (quote v) g$0$13390)) (cons (quote if) (cons (quote (procedure? v)) (cons (cons (quote make-traced-procedure) (cons (list (quote quote) g$0$13389) (quote (v)))) (quote ((error (quote trace-define) "~s is not a procedure" v))))))))) (error (quote expander) (quote "~a ~s") (quote "invalid formals") (g$0$11058 g$0$13335 (quote ()))))) g$0$13383) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13381 (quote ()))))) ((lambda (g$0$13393) (if (g$0$11026 g$0$13393) (begin (quote #f) ((lambda (g$0$13395) (if g$0$13395 (begin (quote #f) ((lambda (g$0$13397) (if g$0$13397 (begin (quote #f) (append g$0$13395 g$0$13397)) (quote #f))) ((lambda (g$0$13399) (if (g$0$11026 g$0$13399) (begin (quote #f) ((lambda (g$0$13401) (if g$0$13401 (begin (quote #f) ((lambda (g$0$13403) (if g$0$13403 (begin (quote #f) (append g$0$13401 g$0$13403)) (quote #f))) ((lambda (g$0$13405) (if (g$0$11026 g$0$13405) (begin (quote #f) ((lambda (g$0$13407) (if g$0$13407 (begin (quote #f) ((lambda (g$0$13409) (if g$0$13409 (begin (quote #f) (append g$0$13407 g$0$13409)) (quote #f))) ((lambda (g$0$13411) (if (equal? (g$0$11060 g$0$13411) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13405)))) (quote #f))) ((lambda (g$0$13413) (list g$0$13413)) (g$0$11034 g$0$13405)))) (quote #f))) (g$0$11038 g$0$13399)))) (quote #f))) ((lambda (g$0$13415) (list g$0$13415)) (g$0$11034 g$0$13399)))) (quote #f))) (g$0$11038 g$0$13393)))) (quote #f))) ((lambda (g$0$13417) (quote ())) (g$0$11034 g$0$13393)))) (quote #f))) g$0$13381))) g$0$13357))) ((lambda (g$0$13419) (if (g$0$11026 g$0$13419) (begin (quote #f) ((lambda (g$0$13421) (if g$0$13421 (begin (quote #f) ((lambda (g$0$13423) (if g$0$13423 (begin (quote #f) (append g$0$13421 g$0$13423)) (quote #f))) ((lambda (g$0$13425) (if (g$0$11026 g$0$13425) (begin (quote #f) ((lambda (g$0$13427) (if g$0$13427 (begin (quote #f) ((lambda (g$0$13429) (if g$0$13429 (begin (quote #f) (append g$0$13427 g$0$13429)) (quote #f))) ((lambda (g$0$13431) (if (g$0$11026 g$0$13431) (begin (quote #f) ((lambda (g$0$13433) (if g$0$13433 (begin (quote #f) ((lambda (g$0$13435) (if g$0$13435 (begin (quote #f) (append g$0$13433 g$0$13435)) (quote #f))) ((letrec ((g$0$13437 (lambda (g$0$13439) (if (g$0$11026 g$0$13439) ((lambda (g$0$13441) (if g$0$13441 (begin (quote #f) ((lambda (g$0$13443) (if g$0$13443 (begin (quote #f) (map cons g$0$13441 g$0$13443)) (quote #f))) (g$0$13437 (g$0$11038 g$0$13439)))) (quote #f))) ((lambda (g$0$13445) (list g$0$13445)) (g$0$11034 g$0$13439))) (if (g$0$11030 g$0$13439) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13437) (g$0$11038 g$0$13431)))) (quote #f))) ((lambda (g$0$13447) (list g$0$13447)) (g$0$11034 g$0$13431)))) (quote #f))) (g$0$11038 g$0$13425)))) (quote #f))) ((lambda (g$0$13449) (if (g$0$11026 g$0$13449) (begin (quote #f) ((lambda (g$0$13451) (if g$0$13451 (begin (quote #f) ((lambda (g$0$13453) (if g$0$13453 (begin (quote #f) (append g$0$13451 g$0$13453)) (quote #f))) ((letrec ((g$0$13455 (lambda (g$0$13461) (if (g$0$11026 g$0$13461) ((lambda (g$0$13463) (if g$0$13463 (begin (quote #f) ((lambda (g$0$13465) (if g$0$13465 (begin (quote #f) (cons (map cons g$0$13463 (car g$0$13465)) (cdr g$0$13465))) (quote #f))) (g$0$13455 (g$0$11038 g$0$13461)))) (quote #f))) ((lambda (g$0$13467) (list g$0$13467)) (g$0$11034 g$0$13461))) ((lambda (g$0$13469) (if g$0$13469 (begin (quote #f) (cons (list (begin (quote fmls) (quote ()))) g$0$13469)) (quote #f))) ((lambda (g$0$13471) (list g$0$13471)) g$0$13461)))))) (lambda (g$0$13457) ((lambda (g$0$13459) (if g$0$13459 (begin (quote #f) (append (car g$0$13459) (cdr g$0$13459))) (quote #f))) (g$0$13455 g$0$13457)))) (g$0$11038 g$0$13449)))) (quote #f))) ((lambda (g$0$13473) (list g$0$13473)) (g$0$11034 g$0$13449)))) (quote #f))) (g$0$11034 g$0$13425)))) (quote #f))) (g$0$11038 g$0$13419)))) (quote #f))) ((lambda (g$0$13475) (quote ())) (g$0$11034 g$0$13419)))) (quote #f))) g$0$13357))) g$0$13337))) ((lambda (g$0$13477) (if (g$0$11026 g$0$13477) (begin (quote #f) ((lambda (g$0$13479) (if g$0$13479 (begin (quote #f) ((lambda (g$0$13481) (if g$0$13481 (begin (quote #f) (append g$0$13479 g$0$13481)) (quote #f))) ((lambda (g$0$13483) (if (g$0$11026 g$0$13483) (begin (quote #f) ((lambda (g$0$13485) (if g$0$13485 (begin (quote #f) ((lambda (g$0$13487) (if g$0$13487 (begin (quote #f) (append g$0$13485 g$0$13487)) (quote #f))) ((lambda (g$0$13489) (if (g$0$11026 g$0$13489) (begin (quote #f) ((lambda (g$0$13491) (if g$0$13491 (begin (quote #f) ((lambda (g$0$13493) (if g$0$13493 (begin (quote #f) (append g$0$13491 g$0$13493)) (quote #f))) ((letrec ((g$0$13495 (lambda (g$0$13497) (if (g$0$11026 g$0$13497) ((lambda (g$0$13499) (if g$0$13499 (begin (quote #f) ((lambda (g$0$13501) (if g$0$13501 (begin (quote #f) (map cons g$0$13499 g$0$13501)) (quote #f))) (g$0$13495 (g$0$11038 g$0$13497)))) (quote #f))) ((lambda (g$0$13503) (list g$0$13503)) (g$0$11034 g$0$13497))) (if (g$0$11030 g$0$13497) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$13495) (g$0$11038 g$0$13489)))) (quote #f))) ((lambda (g$0$13505) (list g$0$13505)) (g$0$11034 g$0$13489)))) (quote #f))) (g$0$11038 g$0$13483)))) (quote #f))) ((lambda (g$0$13507) (if (g$0$11026 g$0$13507) (begin (quote #f) ((lambda (g$0$13509) (if g$0$13509 (begin (quote #f) ((lambda (g$0$13511) (if g$0$13511 (begin (quote #f) (append g$0$13509 g$0$13511)) (quote #f))) ((letrec ((g$0$13513 (lambda (g$0$13515) (if (g$0$11026 g$0$13515) ((lambda (g$0$13517) (if g$0$13517 (begin (quote #f) ((lambda (g$0$13519) (if g$0$13519 (begin (quote #f) (map cons g$0$13517 g$0$13519)) (quote #f))) (g$0$13513 (g$0$11038 g$0$13515)))) (quote #f))) ((lambda (g$0$13521) (list g$0$13521)) (g$0$11034 g$0$13515))) (if (g$0$11030 g$0$13515) (list (begin (quote fmls) (quote ()))) (quote #f)))))) g$0$13513) (g$0$11038 g$0$13507)))) (quote #f))) ((lambda (g$0$13523) (list g$0$13523)) (g$0$11034 g$0$13507)))) (quote #f))) (g$0$11034 g$0$13483)))) (quote #f))) (g$0$11038 g$0$13477)))) (quote #f))) ((lambda (g$0$13525) (quote ())) (g$0$11034 g$0$13477)))) (quote #f))) g$0$13337))) g$0$13335))) (set! g$0$11333 (lambda (g$0$13527) ((lambda (g$0$13529) ((lambda (g$0$13531) (if (if g$0$13531 (begin (quote #f) (apply (lambda (g$0$13533) (quote #t)) g$0$13531)) (quote #f)) (apply (lambda (g$0$13535) (g$0$11323 (list (quote time-it) (list (quote quote) g$0$13535) (list (quote lambda) (quote ()) g$0$13535)))) g$0$13531) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13529 (quote ()))))) ((lambda (g$0$13537) (if (g$0$11026 g$0$13537) (begin (quote #f) ((lambda (g$0$13539) (if g$0$13539 (begin (quote #f) ((lambda (g$0$13541) (if g$0$13541 (begin (quote #f) (append g$0$13539 g$0$13541)) (quote #f))) ((lambda (g$0$13543) (if (g$0$11026 g$0$13543) (begin (quote #f) ((lambda (g$0$13545) (if g$0$13545 (begin (quote #f) ((lambda (g$0$13547) (if g$0$13547 (begin (quote #f) (append g$0$13545 g$0$13547)) (quote #f))) ((lambda (g$0$13549) (if (equal? (g$0$11060 g$0$13549) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13543)))) (quote #f))) ((lambda (g$0$13551) (list g$0$13551)) (g$0$11034 g$0$13543)))) (quote #f))) (g$0$11038 g$0$13537)))) (quote #f))) ((lambda (g$0$13553) (quote ())) (g$0$11034 g$0$13537)))) (quote #f))) g$0$13529))) g$0$13527))) (set! g$0$11335 (lambda (g$0$13555) ((lambda (g$0$13557) ((lambda (g$0$13559) (if (if g$0$13559 (begin (quote #f) (apply (lambda (g$0$13561) (quote #t)) g$0$13559)) (quote #f)) (apply (lambda (g$0$13563) (g$0$11323 (list (quote make-promise) (list (quote lambda) (quote ()) g$0$13563)))) g$0$13559) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13557 (quote ()))))) ((lambda (g$0$13565) (if (g$0$11026 g$0$13565) (begin (quote #f) ((lambda (g$0$13567) (if g$0$13567 (begin (quote #f) ((lambda (g$0$13569) (if g$0$13569 (begin (quote #f) (append g$0$13567 g$0$13569)) (quote #f))) ((lambda (g$0$13571) (if (g$0$11026 g$0$13571) (begin (quote #f) ((lambda (g$0$13573) (if g$0$13573 (begin (quote #f) ((lambda (g$0$13575) (if g$0$13575 (begin (quote #f) (append g$0$13573 g$0$13575)) (quote #f))) ((lambda (g$0$13577) (if (equal? (g$0$11060 g$0$13577) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13571)))) (quote #f))) ((lambda (g$0$13579) (list g$0$13579)) (g$0$11034 g$0$13571)))) (quote #f))) (g$0$11038 g$0$13565)))) (quote #f))) ((lambda (g$0$13581) (quote ())) (g$0$11034 g$0$13565)))) (quote #f))) g$0$13557))) g$0$13555))) (set! g$0$11337 (lambda (g$0$13583) ((lambda (g$0$13585) ((lambda (g$0$13587) (if (if g$0$13587 (begin (quote #f) (apply (lambda (g$0$13589) (quote #t)) g$0$13587)) (quote #f)) (apply (lambda (g$0$13591) (g$0$11323 (list (quote unless) g$0$13591 (list (quote error) (quote (quote assert)) (quote "~s failed") (list (quote quote) g$0$13591))))) g$0$13587) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13585 (quote ()))))) ((lambda (g$0$13593) (if (g$0$11026 g$0$13593) (begin (quote #f) ((lambda (g$0$13595) (if g$0$13595 (begin (quote #f) ((lambda (g$0$13597) (if g$0$13597 (begin (quote #f) (append g$0$13595 g$0$13597)) (quote #f))) ((lambda (g$0$13599) (if (g$0$11026 g$0$13599) (begin (quote #f) ((lambda (g$0$13601) (if g$0$13601 (begin (quote #f) ((lambda (g$0$13603) (if g$0$13603 (begin (quote #f) (append g$0$13601 g$0$13603)) (quote #f))) ((lambda (g$0$13605) (if (equal? (g$0$11060 g$0$13605) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13599)))) (quote #f))) ((lambda (g$0$13607) (list g$0$13607)) (g$0$11034 g$0$13599)))) (quote #f))) (g$0$11038 g$0$13593)))) (quote #f))) ((lambda (g$0$13609) (quote ())) (g$0$11034 g$0$13593)))) (quote #f))) g$0$13585))) g$0$13583))) (set! g$0$11339 (lambda (g$0$13611) ((lambda (g$0$13613) ((lambda (g$0$13615) (if (if g$0$13615 (begin (quote #f) (apply (lambda (g$0$13617) (quote #t)) g$0$13615)) (quote #f)) (apply (lambda (g$0$13619) ((lambda (g$0$13621) (if (memv g$0$13621 (quote (little))) (g$0$11323 (quote (quote little))) (if (memv g$0$13621 (quote (big))) (g$0$11323 (quote (quote big))) (error (quote expander) (quote "~a ~s") (quote "endianness must be big or little") (g$0$11058 g$0$13611 (quote ())))))) (g$0$11506 g$0$13619))) g$0$13615) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13613 (quote ()))))) ((lambda (g$0$13622) (if (g$0$11026 g$0$13622) (begin (quote #f) ((lambda (g$0$13624) (if g$0$13624 (begin (quote #f) ((lambda (g$0$13626) (if g$0$13626 (begin (quote #f) (append g$0$13624 g$0$13626)) (quote #f))) ((lambda (g$0$13628) (if (g$0$11026 g$0$13628) (begin (quote #f) ((lambda (g$0$13630) (if g$0$13630 (begin (quote #f) ((lambda (g$0$13632) (if g$0$13632 (begin (quote #f) (append g$0$13630 g$0$13632)) (quote #f))) ((lambda (g$0$13634) (if (equal? (g$0$11060 g$0$13634) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13628)))) (quote #f))) ((lambda (g$0$13636) (list g$0$13636)) (g$0$11034 g$0$13628)))) (quote #f))) (g$0$11038 g$0$13622)))) (quote #f))) ((lambda (g$0$13638) (quote ())) (g$0$11034 g$0$13622)))) (quote #f))) g$0$13613))) g$0$13611))) (set! g$0$11341 (lambda (g$0$13640) ((lambda (g$0$13642) ((lambda (g$0$13644) (if (if g$0$13644 (begin (quote #f) (apply (lambda (g$0$13646) (quote #t)) g$0$13644)) (quote #f)) (apply (lambda (g$0$13648) (g$0$11323 (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote ()) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$13648)) (list (quote (id e* |...|)) (quote (identifier? (syntax id))) (cons (quote cons) (cons (list (quote syntax) g$0$13648) (quote ((syntax (e* |...|))))))))))) g$0$13644) ((lambda (g$0$13650) ((lambda (g$0$13652) (if (if g$0$13652 (begin (quote #f) (apply (lambda (g$0$13654 g$0$13655 g$0$13656 g$0$13657 g$0$13658) (if (g$0$11040 g$0$13654) (if (g$0$11040 g$0$13656) (begin (quote #f) (g$0$11040 g$0$13657)) (quote #f)) (quote #f))) g$0$13652)) (quote #f)) (apply (lambda (g$0$13664 g$0$13665 g$0$13666 g$0$13667 g$0$13668) (g$0$11323 (list (quote cons) (quote (quote macro!)) (list (quote lambda) (quote (x)) (list (quote syntax-case) (quote x) (quote (set!)) (list (quote id) (quote (identifier? (syntax id))) (list (quote syntax) g$0$13665)) (list (list (quote set!) (quote id) g$0$13667) (list (quote syntax) g$0$13668)) (list (quote (id e* |...|)) (quote (identifier? (syntax id))) (list (quote syntax) (cons g$0$13665 (quote (e* |...|)))))))))) g$0$13652) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13650 (quote ()))))) ((lambda (g$0$13674) (if (g$0$11026 g$0$13674) (begin (quote #f) ((lambda (g$0$13676) (if g$0$13676 (begin (quote #f) ((lambda (g$0$13678) (if g$0$13678 (begin (quote #f) (append g$0$13676 g$0$13678)) (quote #f))) ((lambda (g$0$13680) (if (g$0$11026 g$0$13680) (begin (quote #f) ((lambda (g$0$13682) (if g$0$13682 (begin (quote #f) ((lambda (g$0$13684) (if g$0$13684 (begin (quote #f) (append g$0$13682 g$0$13684)) (quote #f))) ((lambda (g$0$13686) (if (g$0$11026 g$0$13686) (begin (quote #f) ((lambda (g$0$13688) (if g$0$13688 (begin (quote #f) ((lambda (g$0$13690) (if g$0$13690 (begin (quote #f) (append g$0$13688 g$0$13690)) (quote #f))) ((lambda (g$0$13692) (if (equal? (g$0$11060 g$0$13692) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13686)))) (quote #f))) ((lambda (g$0$13694) (if (g$0$11026 g$0$13694) (begin (quote #f) ((lambda (g$0$13696) (if g$0$13696 (begin (quote #f) ((lambda (g$0$13698) (if g$0$13698 (begin (quote #f) (append g$0$13696 g$0$13698)) (quote #f))) ((lambda (g$0$13700) (if (g$0$11026 g$0$13700) (begin (quote #f) ((lambda (g$0$13702) (if g$0$13702 (begin (quote #f) ((lambda (g$0$13704) (if g$0$13704 (begin (quote #f) (append g$0$13702 g$0$13704)) (quote #f))) ((lambda (g$0$13706) (if (equal? (g$0$11060 g$0$13706) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13700)))) (quote #f))) ((lambda (g$0$13708) (list g$0$13708)) (g$0$11034 g$0$13700)))) (quote #f))) (g$0$11038 g$0$13694)))) (quote #f))) ((lambda (g$0$13710) (if (g$0$11026 g$0$13710) (begin (quote #f) ((lambda (g$0$13712) (if g$0$13712 (begin (quote #f) ((lambda (g$0$13714) (if g$0$13714 (begin (quote #f) (append g$0$13712 g$0$13714)) (quote #f))) ((lambda (g$0$13716) (if (g$0$11026 g$0$13716) (begin (quote #f) ((lambda (g$0$13718) (if g$0$13718 (begin (quote #f) ((lambda (g$0$13720) (if g$0$13720 (begin (quote #f) (append g$0$13718 g$0$13720)) (quote #f))) ((lambda (g$0$13722) (if (g$0$11026 g$0$13722) (begin (quote #f) ((lambda (g$0$13724) (if g$0$13724 (begin (quote #f) ((lambda (g$0$13726) (if g$0$13726 (begin (quote #f) (append g$0$13724 g$0$13726)) (quote #f))) ((lambda (g$0$13728) (if (equal? (g$0$11060 g$0$13728) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13722)))) (quote #f))) ((lambda (g$0$13730) (list g$0$13730)) (g$0$11034 g$0$13722)))) (quote #f))) (g$0$11038 g$0$13716)))) (quote #f))) ((lambda (g$0$13732) (list g$0$13732)) (g$0$11034 g$0$13716)))) (quote #f))) (g$0$11038 g$0$13710)))) (quote #f))) ((lambda (g$0$13734) (if (g$0$11040 g$0$13734) (if (g$0$11048 g$0$13734 (g$0$11293 (quote set!))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$13710)))) (quote #f))) (g$0$11034 g$0$13694)))) (quote #f))) (g$0$11034 g$0$13686)))) (quote #f))) (g$0$11038 g$0$13680)))) (quote #f))) ((lambda (g$0$13736) (if (g$0$11026 g$0$13736) (begin (quote #f) ((lambda (g$0$13738) (if g$0$13738 (begin (quote #f) ((lambda (g$0$13740) (if g$0$13740 (begin (quote #f) (append g$0$13738 g$0$13740)) (quote #f))) ((lambda (g$0$13742) (if (g$0$11026 g$0$13742) (begin (quote #f) ((lambda (g$0$13744) (if g$0$13744 (begin (quote #f) ((lambda (g$0$13746) (if g$0$13746 (begin (quote #f) (append g$0$13744 g$0$13746)) (quote #f))) ((lambda (g$0$13748) (if (equal? (g$0$11060 g$0$13748) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13742)))) (quote #f))) ((lambda (g$0$13750) (list g$0$13750)) (g$0$11034 g$0$13742)))) (quote #f))) (g$0$11038 g$0$13736)))) (quote #f))) ((lambda (g$0$13752) (list g$0$13752)) (g$0$11034 g$0$13736)))) (quote #f))) (g$0$11034 g$0$13680)))) (quote #f))) (g$0$11038 g$0$13674)))) (quote #f))) ((lambda (g$0$13754) (quote ())) (g$0$11034 g$0$13674)))) (quote #f))) g$0$13650))) g$0$13642))) ((lambda (g$0$13756) (if (g$0$11026 g$0$13756) (begin (quote #f) ((lambda (g$0$13758) (if g$0$13758 (begin (quote #f) ((lambda (g$0$13760) (if g$0$13760 (begin (quote #f) (append g$0$13758 g$0$13760)) (quote #f))) ((lambda (g$0$13762) (if (g$0$11026 g$0$13762) (begin (quote #f) ((lambda (g$0$13764) (if g$0$13764 (begin (quote #f) ((lambda (g$0$13766) (if g$0$13766 (begin (quote #f) (append g$0$13764 g$0$13766)) (quote #f))) ((lambda (g$0$13768) (if (equal? (g$0$11060 g$0$13768) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13762)))) (quote #f))) ((lambda (g$0$13770) (list g$0$13770)) (g$0$11034 g$0$13762)))) (quote #f))) (g$0$11038 g$0$13756)))) (quote #f))) ((lambda (g$0$13772) (quote ())) (g$0$11034 g$0$13756)))) (quote #f))) g$0$13642))) g$0$13640))) (set! g$0$11343 (lambda (g$0$13774) ((lambda (g$0$13776) (begin (set! g$0$13776 (lambda (g$0$13778) ((lambda (g$0$13780) ((lambda (g$0$13782) (if (if g$0$13782 (begin (quote #f) (apply (lambda (g$0$13784 g$0$13785) (quote #t)) g$0$13782)) (quote #f)) (apply (lambda (g$0$13788 g$0$13789) (list g$0$13788 g$0$13789 g$0$13788)) g$0$13782) ((lambda (g$0$13792) ((lambda (g$0$13794) (if (if g$0$13794 (begin (quote #f) (apply (lambda (g$0$13796 g$0$13797 g$0$13798) (quote #t)) g$0$13794)) (quote #f)) (apply (lambda (g$0$13802 g$0$13803 g$0$13804) (list g$0$13802 g$0$13803 g$0$13804)) g$0$13794) ((lambda (g$0$13808) ((lambda (g$0$13810) (if (if g$0$13810 (begin (quote #f) (apply (lambda () (quote #t)) g$0$13810)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid binding") (g$0$11058 g$0$13774 (quote ())))) g$0$13810) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13808 (quote ()))))) ((lambda (g$0$13812) (quote ())) g$0$13808))) g$0$13792))) ((lambda (g$0$13814) (if (g$0$11026 g$0$13814) (begin (quote #f) ((lambda (g$0$13816) (if g$0$13816 (begin (quote #f) ((lambda (g$0$13818) (if g$0$13818 (begin (quote #f) (append g$0$13816 g$0$13818)) (quote #f))) ((lambda (g$0$13820) (if (g$0$11026 g$0$13820) (begin (quote #f) ((lambda (g$0$13822) (if g$0$13822 (begin (quote #f) ((lambda (g$0$13824) (if g$0$13824 (begin (quote #f) (append g$0$13822 g$0$13824)) (quote #f))) ((lambda (g$0$13826) (if (g$0$11026 g$0$13826) (begin (quote #f) ((lambda (g$0$13828) (if g$0$13828 (begin (quote #f) ((lambda (g$0$13830) (if g$0$13830 (begin (quote #f) (append g$0$13828 g$0$13830)) (quote #f))) ((lambda (g$0$13832) (if (equal? (g$0$11060 g$0$13832) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13826)))) (quote #f))) ((lambda (g$0$13834) (list g$0$13834)) (g$0$11034 g$0$13826)))) (quote #f))) (g$0$11038 g$0$13820)))) (quote #f))) ((lambda (g$0$13836) (list g$0$13836)) (g$0$11034 g$0$13820)))) (quote #f))) (g$0$11038 g$0$13814)))) (quote #f))) ((lambda (g$0$13838) (list g$0$13838)) (g$0$11034 g$0$13814)))) (quote #f))) g$0$13792))) g$0$13780))) ((lambda (g$0$13840) (if (g$0$11026 g$0$13840) (begin (quote #f) ((lambda (g$0$13842) (if g$0$13842 (begin (quote #f) ((lambda (g$0$13844) (if g$0$13844 (begin (quote #f) (append g$0$13842 g$0$13844)) (quote #f))) ((lambda (g$0$13846) (if (g$0$11026 g$0$13846) (begin (quote #f) ((lambda (g$0$13848) (if g$0$13848 (begin (quote #f) ((lambda (g$0$13850) (if g$0$13850 (begin (quote #f) (append g$0$13848 g$0$13850)) (quote #f))) ((lambda (g$0$13852) (if (equal? (g$0$11060 g$0$13852) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13846)))) (quote #f))) ((lambda (g$0$13854) (list g$0$13854)) (g$0$11034 g$0$13846)))) (quote #f))) (g$0$11038 g$0$13840)))) (quote #f))) ((lambda (g$0$13856) (list g$0$13856)) (g$0$11034 g$0$13840)))) (quote #f))) g$0$13780))) g$0$13778))) ((lambda (g$0$13858) ((lambda (g$0$13860) (if (if g$0$13860 (begin (quote #f) (apply (lambda (g$0$13862 g$0$13863 g$0$13864 g$0$13865) (quote #t)) g$0$13860)) (quote #f)) (apply (lambda (g$0$13870 g$0$13871 g$0$13872 g$0$13873) ((lambda (g$0$13878) ((lambda (g$0$13880) (if (if g$0$13880 (begin (quote #f) (apply (lambda (g$0$13882 g$0$13883 g$0$13884) (quote #t)) g$0$13880)) (quote #f)) (apply (lambda (g$0$13888 g$0$13889 g$0$13890) (if (g$0$11050 g$0$13888) (g$0$11323 (list (quote letrec) (list (list (quote loop) (list (quote lambda) g$0$13888 (list (quote if) g$0$13871 (cons (quote begin) (cons (quote (if #f #f)) g$0$13872)) (cons (quote begin) (append g$0$13873 (list (cons (quote loop) g$0$13890)))))))) (cons (quote loop) g$0$13889))) (error (quote expander) (quote "~a ~s") (quote "invalid bindings") (g$0$11058 g$0$13774 (quote ()))))) g$0$13880) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13878 (quote ()))))) ((letrec ((g$0$13894 (lambda (g$0$13896) (if (g$0$11026 g$0$13896) ((lambda (g$0$13898) (if g$0$13898 (begin (quote #f) ((lambda (g$0$13900) (if g$0$13900 (begin (quote #f) (map cons g$0$13898 g$0$13900)) (quote #f))) (g$0$13894 (g$0$11038 g$0$13896)))) (quote #f))) ((lambda (g$0$13902) (if (g$0$11026 g$0$13902) (begin (quote #f) ((lambda (g$0$13904) (if g$0$13904 (begin (quote #f) ((lambda (g$0$13906) (if g$0$13906 (begin (quote #f) (append g$0$13904 g$0$13906)) (quote #f))) ((lambda (g$0$13908) (if (g$0$11026 g$0$13908) (begin (quote #f) ((lambda (g$0$13910) (if g$0$13910 (begin (quote #f) ((lambda (g$0$13912) (if g$0$13912 (begin (quote #f) (append g$0$13910 g$0$13912)) (quote #f))) ((lambda (g$0$13914) (if (g$0$11026 g$0$13914) (begin (quote #f) ((lambda (g$0$13916) (if g$0$13916 (begin (quote #f) ((lambda (g$0$13918) (if g$0$13918 (begin (quote #f) (append g$0$13916 g$0$13918)) (quote #f))) ((lambda (g$0$13920) (if (equal? (g$0$11060 g$0$13920) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$13914)))) (quote #f))) ((lambda (g$0$13922) (list g$0$13922)) (g$0$11034 g$0$13914)))) (quote #f))) (g$0$11038 g$0$13908)))) (quote #f))) ((lambda (g$0$13924) (list g$0$13924)) (g$0$11034 g$0$13908)))) (quote #f))) (g$0$11038 g$0$13902)))) (quote #f))) ((lambda (g$0$13926) (list g$0$13926)) (g$0$11034 g$0$13902)))) (quote #f))) (g$0$11034 g$0$13896))) (if (g$0$11030 g$0$13896) (list (begin (quote x*) (quote ())) (begin (quote init*) (quote ())) (begin (quote step*) (quote ()))) (quote #f)))))) g$0$13894) g$0$13878))) (map g$0$13776 g$0$13870))) g$0$13860) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13858 (quote ()))))) ((lambda (g$0$13928) (if (g$0$11026 g$0$13928) (begin (quote #f) ((lambda (g$0$13930) (if g$0$13930 (begin (quote #f) ((lambda (g$0$13932) (if g$0$13932 (begin (quote #f) (append g$0$13930 g$0$13932)) (quote #f))) ((lambda (g$0$13934) (if (g$0$11026 g$0$13934) (begin (quote #f) ((lambda (g$0$13936) (if g$0$13936 (begin (quote #f) ((lambda (g$0$13938) (if g$0$13938 (begin (quote #f) (append g$0$13936 g$0$13938)) (quote #f))) ((lambda (g$0$13940) (if (g$0$11026 g$0$13940) (begin (quote #f) ((lambda (g$0$13942) (if g$0$13942 (begin (quote #f) ((lambda (g$0$13944) (if g$0$13944 (begin (quote #f) (append g$0$13942 g$0$13944)) (quote #f))) ((letrec ((g$0$13946 (lambda (g$0$13948) (if (g$0$11026 g$0$13948) ((lambda (g$0$13950) (if g$0$13950 (begin (quote #f) ((lambda (g$0$13952) (if g$0$13952 (begin (quote #f) (map cons g$0$13950 g$0$13952)) (quote #f))) (g$0$13946 (g$0$11038 g$0$13948)))) (quote #f))) ((lambda (g$0$13954) (list g$0$13954)) (g$0$11034 g$0$13948))) (if (g$0$11030 g$0$13948) (list (begin (quote command*) (quote ()))) (quote #f)))))) g$0$13946) (g$0$11038 g$0$13940)))) (quote #f))) ((lambda (g$0$13956) (if (g$0$11026 g$0$13956) (begin (quote #f) ((lambda (g$0$13958) (if g$0$13958 (begin (quote #f) ((lambda (g$0$13960) (if g$0$13960 (begin (quote #f) (append g$0$13958 g$0$13960)) (quote #f))) ((letrec ((g$0$13962 (lambda (g$0$13964) (if (g$0$11026 g$0$13964) ((lambda (g$0$13966) (if g$0$13966 (begin (quote #f) ((lambda (g$0$13968) (if g$0$13968 (begin (quote #f) (map cons g$0$13966 g$0$13968)) (quote #f))) (g$0$13962 (g$0$11038 g$0$13964)))) (quote #f))) ((lambda (g$0$13970) (list g$0$13970)) (g$0$11034 g$0$13964))) (if (g$0$11030 g$0$13964) (list (begin (quote expr*) (quote ()))) (quote #f)))))) g$0$13962) (g$0$11038 g$0$13956)))) (quote #f))) ((lambda (g$0$13972) (list g$0$13972)) (g$0$11034 g$0$13956)))) (quote #f))) (g$0$11034 g$0$13940)))) (quote #f))) (g$0$11038 g$0$13934)))) (quote #f))) ((letrec ((g$0$13974 (lambda (g$0$13976) (if (g$0$11026 g$0$13976) ((lambda (g$0$13978) (if g$0$13978 (begin (quote #f) ((lambda (g$0$13980) (if g$0$13980 (begin (quote #f) (map cons g$0$13978 g$0$13980)) (quote #f))) (g$0$13974 (g$0$11038 g$0$13976)))) (quote #f))) ((lambda (g$0$13982) (list g$0$13982)) (g$0$11034 g$0$13976))) (if (g$0$11030 g$0$13976) (list (begin (quote binding*) (quote ()))) (quote #f)))))) g$0$13974) (g$0$11034 g$0$13934)))) (quote #f))) (g$0$11038 g$0$13928)))) (quote #f))) ((lambda (g$0$13984) (quote ())) (g$0$11034 g$0$13928)))) (quote #f))) g$0$13858))) g$0$13774))) (quote #f)))) (set! g$0$11345 (lambda (g$0$13986) ((lambda (g$0$13988) ((lambda (g$0$13990) (if (if g$0$13990 (begin (quote #f) (apply (lambda (g$0$13992 g$0$13993 g$0$13994 g$0$13995) (for-all g$0$11040 g$0$13992)) g$0$13990)) (quote #f)) (apply (lambda (g$0$14000 g$0$14001 g$0$14002 g$0$14003) (g$0$11323 (letrec ((g$0$14008 (lambda (g$0$14010) (if (null? g$0$14010) (cons (quote let) (cons (quote ()) (cons g$0$14002 g$0$14003))) (list (quote let) (list (car g$0$14010)) (g$0$14008 (cdr g$0$14010))))))) (g$0$14008 (map list g$0$14000 g$0$14001))))) g$0$13990) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$13988 (quote ()))))) ((lambda (g$0$14012) (if (g$0$11026 g$0$14012) (begin (quote #f) ((lambda (g$0$14014) (if g$0$14014 (begin (quote #f) ((lambda (g$0$14016) (if g$0$14016 (begin (quote #f) (append g$0$14014 g$0$14016)) (quote #f))) ((lambda (g$0$14018) (if (g$0$11026 g$0$14018) (begin (quote #f) ((lambda (g$0$14020) (if g$0$14020 (begin (quote #f) ((lambda (g$0$14022) (if g$0$14022 (begin (quote #f) (append g$0$14020 g$0$14022)) (quote #f))) ((lambda (g$0$14024) (if (g$0$11026 g$0$14024) (begin (quote #f) ((lambda (g$0$14026) (if g$0$14026 (begin (quote #f) ((lambda (g$0$14028) (if g$0$14028 (begin (quote #f) (append g$0$14026 g$0$14028)) (quote #f))) ((letrec ((g$0$14030 (lambda (g$0$14032) (if (g$0$11026 g$0$14032) ((lambda (g$0$14034) (if g$0$14034 (begin (quote #f) ((lambda (g$0$14036) (if g$0$14036 (begin (quote #f) (map cons g$0$14034 g$0$14036)) (quote #f))) (g$0$14030 (g$0$11038 g$0$14032)))) (quote #f))) ((lambda (g$0$14038) (list g$0$14038)) (g$0$11034 g$0$14032))) (if (g$0$11030 g$0$14032) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$14030) (g$0$11038 g$0$14024)))) (quote #f))) ((lambda (g$0$14040) (list g$0$14040)) (g$0$11034 g$0$14024)))) (quote #f))) (g$0$11038 g$0$14018)))) (quote #f))) ((letrec ((g$0$14042 (lambda (g$0$14044) (if (g$0$11026 g$0$14044) ((lambda (g$0$14046) (if g$0$14046 (begin (quote #f) ((lambda (g$0$14048) (if g$0$14048 (begin (quote #f) (map cons g$0$14046 g$0$14048)) (quote #f))) (g$0$14042 (g$0$11038 g$0$14044)))) (quote #f))) ((lambda (g$0$14050) (if (g$0$11026 g$0$14050) (begin (quote #f) ((lambda (g$0$14052) (if g$0$14052 (begin (quote #f) ((lambda (g$0$14054) (if g$0$14054 (begin (quote #f) (append g$0$14052 g$0$14054)) (quote #f))) ((lambda (g$0$14056) (if (g$0$11026 g$0$14056) (begin (quote #f) ((lambda (g$0$14058) (if g$0$14058 (begin (quote #f) ((lambda (g$0$14060) (if g$0$14060 (begin (quote #f) (append g$0$14058 g$0$14060)) (quote #f))) ((lambda (g$0$14062) (if (equal? (g$0$11060 g$0$14062) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14056)))) (quote #f))) ((lambda (g$0$14064) (list g$0$14064)) (g$0$11034 g$0$14056)))) (quote #f))) (g$0$11038 g$0$14050)))) (quote #f))) ((lambda (g$0$14066) (list g$0$14066)) (g$0$11034 g$0$14050)))) (quote #f))) (g$0$11034 g$0$14044))) (if (g$0$11030 g$0$14044) (list (begin (quote lhs*) (quote ())) (begin (quote rhs*) (quote ()))) (quote #f)))))) g$0$14042) (g$0$11034 g$0$14018)))) (quote #f))) (g$0$11038 g$0$14012)))) (quote #f))) ((lambda (g$0$14068) (quote ())) (g$0$11034 g$0$14012)))) (quote #f))) g$0$13988))) g$0$13986))) (set! g$0$11347 (lambda (g$0$14070) ((lambda (g$0$14072) ((lambda (g$0$14074) (if (if g$0$14074 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14074)) (quote #f)) (apply (lambda () (quote #f)) g$0$14074) ((lambda (g$0$14076) ((lambda (g$0$14078) (if (if g$0$14078 (begin (quote #f) (apply (lambda (g$0$14080 g$0$14081) (quote #t)) g$0$14078)) (quote #f)) (apply (lambda (g$0$14084 g$0$14085) (g$0$11323 (letrec ((g$0$14088 (lambda (g$0$14090 g$0$14091) (if (null? g$0$14091) (list (quote begin) (quote #f) g$0$14090) (list (quote let) (list (list (quote t) g$0$14090)) (list (quote if) (quote t) (quote t) (g$0$14088 (car g$0$14091) (cdr g$0$14091)))))))) (g$0$14088 g$0$14084 g$0$14085)))) g$0$14078) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14076 (quote ()))))) ((lambda (g$0$14094) (if (g$0$11026 g$0$14094) (begin (quote #f) ((lambda (g$0$14096) (if g$0$14096 (begin (quote #f) ((lambda (g$0$14098) (if g$0$14098 (begin (quote #f) (append g$0$14096 g$0$14098)) (quote #f))) ((lambda (g$0$14100) (if (g$0$11026 g$0$14100) (begin (quote #f) ((lambda (g$0$14102) (if g$0$14102 (begin (quote #f) ((lambda (g$0$14104) (if g$0$14104 (begin (quote #f) (append g$0$14102 g$0$14104)) (quote #f))) ((letrec ((g$0$14106 (lambda (g$0$14108) (if (g$0$11026 g$0$14108) ((lambda (g$0$14110) (if g$0$14110 (begin (quote #f) ((lambda (g$0$14112) (if g$0$14112 (begin (quote #f) (map cons g$0$14110 g$0$14112)) (quote #f))) (g$0$14106 (g$0$11038 g$0$14108)))) (quote #f))) ((lambda (g$0$14114) (list g$0$14114)) (g$0$11034 g$0$14108))) (if (g$0$11030 g$0$14108) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14106) (g$0$11038 g$0$14100)))) (quote #f))) ((lambda (g$0$14116) (list g$0$14116)) (g$0$11034 g$0$14100)))) (quote #f))) (g$0$11038 g$0$14094)))) (quote #f))) ((lambda (g$0$14118) (quote ())) (g$0$11034 g$0$14094)))) (quote #f))) g$0$14076))) g$0$14072))) ((lambda (g$0$14120) (if (g$0$11026 g$0$14120) (begin (quote #f) ((lambda (g$0$14122) (if g$0$14122 (begin (quote #f) ((lambda (g$0$14124) (if g$0$14124 (begin (quote #f) (append g$0$14122 g$0$14124)) (quote #f))) ((lambda (g$0$14126) (if (equal? (g$0$11060 g$0$14126) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14120)))) (quote #f))) ((lambda (g$0$14128) (quote ())) (g$0$11034 g$0$14120)))) (quote #f))) g$0$14072))) g$0$14070))) (set! g$0$11349 (lambda (g$0$14130) ((lambda (g$0$14132) ((lambda (g$0$14134) (if (if g$0$14134 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14134)) (quote #f)) (apply (lambda () (quote #t)) g$0$14134) ((lambda (g$0$14136) ((lambda (g$0$14138) (if (if g$0$14138 (begin (quote #f) (apply (lambda (g$0$14140 g$0$14141) (quote #t)) g$0$14138)) (quote #f)) (apply (lambda (g$0$14144 g$0$14145) (g$0$11323 (letrec ((g$0$14148 (lambda (g$0$14150 g$0$14151) (if (null? g$0$14151) (list (quote begin) (quote #f) g$0$14150) (cons (quote if) (cons g$0$14150 (cons (g$0$14148 (car g$0$14151) (cdr g$0$14151)) (quote (#f))))))))) (g$0$14148 g$0$14144 g$0$14145)))) g$0$14138) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14136 (quote ()))))) ((lambda (g$0$14154) (if (g$0$11026 g$0$14154) (begin (quote #f) ((lambda (g$0$14156) (if g$0$14156 (begin (quote #f) ((lambda (g$0$14158) (if g$0$14158 (begin (quote #f) (append g$0$14156 g$0$14158)) (quote #f))) ((lambda (g$0$14160) (if (g$0$11026 g$0$14160) (begin (quote #f) ((lambda (g$0$14162) (if g$0$14162 (begin (quote #f) ((lambda (g$0$14164) (if g$0$14164 (begin (quote #f) (append g$0$14162 g$0$14164)) (quote #f))) ((letrec ((g$0$14166 (lambda (g$0$14168) (if (g$0$11026 g$0$14168) ((lambda (g$0$14170) (if g$0$14170 (begin (quote #f) ((lambda (g$0$14172) (if g$0$14172 (begin (quote #f) (map cons g$0$14170 g$0$14172)) (quote #f))) (g$0$14166 (g$0$11038 g$0$14168)))) (quote #f))) ((lambda (g$0$14174) (list g$0$14174)) (g$0$11034 g$0$14168))) (if (g$0$11030 g$0$14168) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14166) (g$0$11038 g$0$14160)))) (quote #f))) ((lambda (g$0$14176) (list g$0$14176)) (g$0$11034 g$0$14160)))) (quote #f))) (g$0$11038 g$0$14154)))) (quote #f))) ((lambda (g$0$14178) (quote ())) (g$0$11034 g$0$14154)))) (quote #f))) g$0$14136))) g$0$14132))) ((lambda (g$0$14180) (if (g$0$11026 g$0$14180) (begin (quote #f) ((lambda (g$0$14182) (if g$0$14182 (begin (quote #f) ((lambda (g$0$14184) (if g$0$14184 (begin (quote #f) (append g$0$14182 g$0$14184)) (quote #f))) ((lambda (g$0$14186) (if (equal? (g$0$11060 g$0$14186) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14180)))) (quote #f))) ((lambda (g$0$14188) (quote ())) (g$0$11034 g$0$14180)))) (quote #f))) g$0$14132))) g$0$14130))) (set! g$0$11351 (lambda (g$0$14190) ((lambda (g$0$14192) ((lambda (g$0$14194) (if (if g$0$14194 (begin (quote #f) (apply (lambda (g$0$14196 g$0$14197) (quote #t)) g$0$14194)) (quote #f)) (apply (lambda (g$0$14200 g$0$14201) (g$0$11323 (letrec ((g$0$14204 (lambda (g$0$14206 g$0$14207) (if (null? g$0$14207) ((lambda (g$0$14210) ((lambda (g$0$14212) (if (if g$0$14212 (begin (quote #f) (apply (lambda (g$0$14214 g$0$14215) (quote #t)) g$0$14212)) (quote #f)) (apply (lambda (g$0$14218 g$0$14219) (cons (quote begin) (cons g$0$14218 g$0$14219))) g$0$14212) ((lambda (g$0$14222) ((lambda (g$0$14224) (if (if g$0$14224 (begin (quote #f) (apply (lambda (g$0$14226 g$0$14227) (quote #t)) g$0$14224)) (quote #f)) (apply (lambda (g$0$14230 g$0$14231) (list (quote let) (list (list (quote t) g$0$14230)) (list (quote if) (quote t) (cons g$0$14231 (quote (t)))))) g$0$14224) ((lambda (g$0$14234) ((lambda (g$0$14236) (if (if g$0$14236 (begin (quote #f) (apply (lambda (g$0$14238) (quote #t)) g$0$14236)) (quote #f)) (apply (lambda (g$0$14240) (cons (quote or) (cons g$0$14240 (quote ((if #f #f)))))) g$0$14236) ((lambda (g$0$14242) ((lambda (g$0$14244) (if (if g$0$14244 (begin (quote #f) (apply (lambda (g$0$14246 g$0$14247) (quote #t)) g$0$14244)) (quote #f)) (apply (lambda (g$0$14250 g$0$14251) (list (quote if) g$0$14250 (cons (quote begin) g$0$14251))) g$0$14244) ((lambda (g$0$14254) ((lambda (g$0$14256) (if (if g$0$14256 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14256)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (g$0$11058 g$0$14190 (quote ())))) g$0$14256) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14254 (quote ()))))) ((lambda (g$0$14258) (quote ())) g$0$14254))) g$0$14242))) ((lambda (g$0$14260) (if (g$0$11026 g$0$14260) (begin (quote #f) ((lambda (g$0$14262) (if g$0$14262 (begin (quote #f) ((lambda (g$0$14264) (if g$0$14264 (begin (quote #f) (append g$0$14262 g$0$14264)) (quote #f))) ((letrec ((g$0$14266 (lambda (g$0$14268) (if (g$0$11026 g$0$14268) ((lambda (g$0$14270) (if g$0$14270 (begin (quote #f) ((lambda (g$0$14272) (if g$0$14272 (begin (quote #f) (map cons g$0$14270 g$0$14272)) (quote #f))) (g$0$14266 (g$0$11038 g$0$14268)))) (quote #f))) ((lambda (g$0$14274) (list g$0$14274)) (g$0$11034 g$0$14268))) (if (g$0$11030 g$0$14268) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14266) (g$0$11038 g$0$14260)))) (quote #f))) ((lambda (g$0$14276) (list g$0$14276)) (g$0$11034 g$0$14260)))) (quote #f))) g$0$14242))) g$0$14234))) ((lambda (g$0$14278) (if (g$0$11026 g$0$14278) (begin (quote #f) ((lambda (g$0$14280) (if g$0$14280 (begin (quote #f) ((lambda (g$0$14282) (if g$0$14282 (begin (quote #f) (append g$0$14280 g$0$14282)) (quote #f))) ((lambda (g$0$14284) (if (equal? (g$0$11060 g$0$14284) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14278)))) (quote #f))) ((lambda (g$0$14286) (list g$0$14286)) (g$0$11034 g$0$14278)))) (quote #f))) g$0$14234))) g$0$14222))) ((lambda (g$0$14288) (if (g$0$11026 g$0$14288) (begin (quote #f) ((lambda (g$0$14290) (if g$0$14290 (begin (quote #f) ((lambda (g$0$14292) (if g$0$14292 (begin (quote #f) (append g$0$14290 g$0$14292)) (quote #f))) ((lambda (g$0$14294) (if (g$0$11026 g$0$14294) (begin (quote #f) ((lambda (g$0$14296) (if g$0$14296 (begin (quote #f) ((lambda (g$0$14298) (if g$0$14298 (begin (quote #f) (append g$0$14296 g$0$14298)) (quote #f))) ((lambda (g$0$14300) (if (g$0$11026 g$0$14300) (begin (quote #f) ((lambda (g$0$14302) (if g$0$14302 (begin (quote #f) ((lambda (g$0$14304) (if g$0$14304 (begin (quote #f) (append g$0$14302 g$0$14304)) (quote #f))) ((lambda (g$0$14306) (if (equal? (g$0$11060 g$0$14306) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14300)))) (quote #f))) ((lambda (g$0$14308) (list g$0$14308)) (g$0$11034 g$0$14300)))) (quote #f))) (g$0$11038 g$0$14294)))) (quote #f))) ((lambda (g$0$14310) (if (g$0$11040 g$0$14310) (if (g$0$11048 g$0$14310 (g$0$11293 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14294)))) (quote #f))) (g$0$11038 g$0$14288)))) (quote #f))) ((lambda (g$0$14312) (list g$0$14312)) (g$0$11034 g$0$14288)))) (quote #f))) g$0$14222))) g$0$14210))) ((lambda (g$0$14314) (if (g$0$11026 g$0$14314) (begin (quote #f) ((lambda (g$0$14316) (if g$0$14316 (begin (quote #f) ((lambda (g$0$14318) (if g$0$14318 (begin (quote #f) (append g$0$14316 g$0$14318)) (quote #f))) ((lambda (g$0$14320) (if (g$0$11026 g$0$14320) (begin (quote #f) ((lambda (g$0$14322) (if g$0$14322 (begin (quote #f) ((lambda (g$0$14324) (if g$0$14324 (begin (quote #f) (append g$0$14322 g$0$14324)) (quote #f))) ((letrec ((g$0$14326 (lambda (g$0$14328) (if (g$0$11026 g$0$14328) ((lambda (g$0$14330) (if g$0$14330 (begin (quote #f) ((lambda (g$0$14332) (if g$0$14332 (begin (quote #f) (map cons g$0$14330 g$0$14332)) (quote #f))) (g$0$14326 (g$0$11038 g$0$14328)))) (quote #f))) ((lambda (g$0$14334) (list g$0$14334)) (g$0$11034 g$0$14328))) (if (g$0$11030 g$0$14328) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14326) (g$0$11038 g$0$14320)))) (quote #f))) ((lambda (g$0$14336) (list g$0$14336)) (g$0$11034 g$0$14320)))) (quote #f))) (g$0$11038 g$0$14314)))) (quote #f))) ((lambda (g$0$14338) (if (g$0$11040 g$0$14338) (if (g$0$11048 g$0$14338 (g$0$11293 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14314)))) (quote #f))) g$0$14210))) g$0$14206) ((lambda (g$0$14340) ((lambda (g$0$14342) (if (if g$0$14342 (begin (quote #f) (apply (lambda (g$0$14344 g$0$14345) (quote #t)) g$0$14342)) (quote #f)) (apply (lambda (g$0$14348 g$0$14349) (error (quote expander) (quote "~a ~s") (quote "incorrect position of keyword else") (g$0$11058 g$0$14190 (quote ())))) g$0$14342) ((lambda (g$0$14352) ((lambda (g$0$14354) (if (if g$0$14354 (begin (quote #f) (apply (lambda (g$0$14356 g$0$14357) (quote #t)) g$0$14354)) (quote #f)) (apply (lambda (g$0$14360 g$0$14361) (list (quote let) (list (list (quote t) g$0$14360)) (list (quote if) (quote t) (cons g$0$14361 (quote (t))) (g$0$14204 (car g$0$14207) (cdr g$0$14207))))) g$0$14354) ((lambda (g$0$14364) ((lambda (g$0$14366) (if (if g$0$14366 (begin (quote #f) (apply (lambda (g$0$14368) (quote #t)) g$0$14366)) (quote #f)) (apply (lambda (g$0$14370) (list (quote or) g$0$14370 (g$0$14204 (car g$0$14207) (cdr g$0$14207)))) g$0$14366) ((lambda (g$0$14372) ((lambda (g$0$14374) (if (if g$0$14374 (begin (quote #f) (apply (lambda (g$0$14376 g$0$14377) (quote #t)) g$0$14374)) (quote #f)) (apply (lambda (g$0$14380 g$0$14381) (list (quote if) g$0$14380 (cons (quote begin) g$0$14381) (g$0$14204 (car g$0$14207) (cdr g$0$14207)))) g$0$14374) ((lambda (g$0$14384) ((lambda (g$0$14386) (if (if g$0$14386 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14386)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid last clause") (g$0$11058 g$0$14190 (quote ())))) g$0$14386) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14384 (quote ()))))) ((lambda (g$0$14388) (quote ())) g$0$14384))) g$0$14372))) ((lambda (g$0$14390) (if (g$0$11026 g$0$14390) (begin (quote #f) ((lambda (g$0$14392) (if g$0$14392 (begin (quote #f) ((lambda (g$0$14394) (if g$0$14394 (begin (quote #f) (append g$0$14392 g$0$14394)) (quote #f))) ((letrec ((g$0$14396 (lambda (g$0$14398) (if (g$0$11026 g$0$14398) ((lambda (g$0$14400) (if g$0$14400 (begin (quote #f) ((lambda (g$0$14402) (if g$0$14402 (begin (quote #f) (map cons g$0$14400 g$0$14402)) (quote #f))) (g$0$14396 (g$0$11038 g$0$14398)))) (quote #f))) ((lambda (g$0$14404) (list g$0$14404)) (g$0$11034 g$0$14398))) (if (g$0$11030 g$0$14398) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14396) (g$0$11038 g$0$14390)))) (quote #f))) ((lambda (g$0$14406) (list g$0$14406)) (g$0$11034 g$0$14390)))) (quote #f))) g$0$14372))) g$0$14364))) ((lambda (g$0$14408) (if (g$0$11026 g$0$14408) (begin (quote #f) ((lambda (g$0$14410) (if g$0$14410 (begin (quote #f) ((lambda (g$0$14412) (if g$0$14412 (begin (quote #f) (append g$0$14410 g$0$14412)) (quote #f))) ((lambda (g$0$14414) (if (equal? (g$0$11060 g$0$14414) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14408)))) (quote #f))) ((lambda (g$0$14416) (list g$0$14416)) (g$0$11034 g$0$14408)))) (quote #f))) g$0$14364))) g$0$14352))) ((lambda (g$0$14418) (if (g$0$11026 g$0$14418) (begin (quote #f) ((lambda (g$0$14420) (if g$0$14420 (begin (quote #f) ((lambda (g$0$14422) (if g$0$14422 (begin (quote #f) (append g$0$14420 g$0$14422)) (quote #f))) ((lambda (g$0$14424) (if (g$0$11026 g$0$14424) (begin (quote #f) ((lambda (g$0$14426) (if g$0$14426 (begin (quote #f) ((lambda (g$0$14428) (if g$0$14428 (begin (quote #f) (append g$0$14426 g$0$14428)) (quote #f))) ((lambda (g$0$14430) (if (g$0$11026 g$0$14430) (begin (quote #f) ((lambda (g$0$14432) (if g$0$14432 (begin (quote #f) ((lambda (g$0$14434) (if g$0$14434 (begin (quote #f) (append g$0$14432 g$0$14434)) (quote #f))) ((lambda (g$0$14436) (if (equal? (g$0$11060 g$0$14436) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14430)))) (quote #f))) ((lambda (g$0$14438) (list g$0$14438)) (g$0$11034 g$0$14430)))) (quote #f))) (g$0$11038 g$0$14424)))) (quote #f))) ((lambda (g$0$14440) (if (g$0$11040 g$0$14440) (if (g$0$11048 g$0$14440 (g$0$11293 (quote =>))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14424)))) (quote #f))) (g$0$11038 g$0$14418)))) (quote #f))) ((lambda (g$0$14442) (list g$0$14442)) (g$0$11034 g$0$14418)))) (quote #f))) g$0$14352))) g$0$14340))) ((lambda (g$0$14444) (if (g$0$11026 g$0$14444) (begin (quote #f) ((lambda (g$0$14446) (if g$0$14446 (begin (quote #f) ((lambda (g$0$14448) (if g$0$14448 (begin (quote #f) (append g$0$14446 g$0$14448)) (quote #f))) ((lambda (g$0$14450) (if (g$0$11026 g$0$14450) (begin (quote #f) ((lambda (g$0$14452) (if g$0$14452 (begin (quote #f) ((lambda (g$0$14454) (if g$0$14454 (begin (quote #f) (append g$0$14452 g$0$14454)) (quote #f))) ((letrec ((g$0$14456 (lambda (g$0$14458) (if (g$0$11026 g$0$14458) ((lambda (g$0$14460) (if g$0$14460 (begin (quote #f) ((lambda (g$0$14462) (if g$0$14462 (begin (quote #f) (map cons g$0$14460 g$0$14462)) (quote #f))) (g$0$14456 (g$0$11038 g$0$14458)))) (quote #f))) ((lambda (g$0$14464) (list g$0$14464)) (g$0$11034 g$0$14458))) (if (g$0$11030 g$0$14458) (list (begin (quote e*) (quote ()))) (quote #f)))))) g$0$14456) (g$0$11038 g$0$14450)))) (quote #f))) ((lambda (g$0$14466) (list g$0$14466)) (g$0$11034 g$0$14450)))) (quote #f))) (g$0$11038 g$0$14444)))) (quote #f))) ((lambda (g$0$14468) (if (g$0$11040 g$0$14468) (if (g$0$11048 g$0$14468 (g$0$11293 (quote else))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14444)))) (quote #f))) g$0$14340))) g$0$14206))))) (g$0$14204 g$0$14200 g$0$14201)))) g$0$14194) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14192 (quote ()))))) ((lambda (g$0$14470) (if (g$0$11026 g$0$14470) (begin (quote #f) ((lambda (g$0$14472) (if g$0$14472 (begin (quote #f) ((lambda (g$0$14474) (if g$0$14474 (begin (quote #f) (append g$0$14472 g$0$14474)) (quote #f))) ((lambda (g$0$14476) (if (g$0$11026 g$0$14476) (begin (quote #f) ((lambda (g$0$14478) (if g$0$14478 (begin (quote #f) ((lambda (g$0$14480) (if g$0$14480 (begin (quote #f) (append g$0$14478 g$0$14480)) (quote #f))) ((letrec ((g$0$14482 (lambda (g$0$14484) (if (g$0$11026 g$0$14484) ((lambda (g$0$14486) (if g$0$14486 (begin (quote #f) ((lambda (g$0$14488) (if g$0$14488 (begin (quote #f) (map cons g$0$14486 g$0$14488)) (quote #f))) (g$0$14482 (g$0$11038 g$0$14484)))) (quote #f))) ((lambda (g$0$14490) (list g$0$14490)) (g$0$11034 g$0$14484))) (if (g$0$11030 g$0$14484) (list (begin (quote cls*) (quote ()))) (quote #f)))))) g$0$14482) (g$0$11038 g$0$14476)))) (quote #f))) ((lambda (g$0$14492) (list g$0$14492)) (g$0$11034 g$0$14476)))) (quote #f))) (g$0$11038 g$0$14470)))) (quote #f))) ((lambda (g$0$14494) (quote ())) (g$0$11034 g$0$14470)))) (quote #f))) g$0$14192))) g$0$14190))) (set! g$0$11353 (lambda (g$0$14496) ((lambda (g$0$14498) ((lambda (g$0$14500) (if (if g$0$14500 (begin (quote #f) (apply (lambda (g$0$14502 g$0$14503) (quote #t)) g$0$14500)) (quote #f)) (apply (lambda (g$0$14506 g$0$14507) ((lambda (g$0$14510) (begin (if (string? g$0$14510) (void) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$14496))) (with-input-from-file g$0$14510 (lambda () (letrec ((g$0$14512 (lambda (g$0$14514) ((lambda (g$0$14516) (if (eof-object? g$0$14516) (cons (g$0$11323 (quote begin)) (g$0$11006 g$0$14506 (reverse g$0$14514))) (g$0$14512 (cons g$0$14516 g$0$14514)))) (read))))) (g$0$14512 (quote ()))))))) (g$0$11060 g$0$14507))) g$0$14500) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14498 (quote ()))))) ((lambda (g$0$14518) (if (g$0$11026 g$0$14518) (begin (quote #f) ((lambda (g$0$14520) (if g$0$14520 (begin (quote #f) ((lambda (g$0$14522) (if g$0$14522 (begin (quote #f) (append g$0$14520 g$0$14522)) (quote #f))) ((lambda (g$0$14524) (if (g$0$11026 g$0$14524) (begin (quote #f) ((lambda (g$0$14526) (if g$0$14526 (begin (quote #f) ((lambda (g$0$14528) (if g$0$14528 (begin (quote #f) (append g$0$14526 g$0$14528)) (quote #f))) ((lambda (g$0$14530) (if (equal? (g$0$11060 g$0$14530) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14524)))) (quote #f))) ((lambda (g$0$14532) (list g$0$14532)) (g$0$11034 g$0$14524)))) (quote #f))) (g$0$11038 g$0$14518)))) (quote #f))) ((lambda (g$0$14534) (list g$0$14534)) (g$0$11034 g$0$14518)))) (quote #f))) g$0$14498))) g$0$14496))) (set! g$0$11355 (lambda (g$0$14536) ((lambda (g$0$14538) ((lambda (g$0$14540) (if (if g$0$14540 (begin (quote #f) (apply (lambda (g$0$14542 g$0$14543 g$0$14544) (quote #t)) g$0$14540)) (quote #f)) (apply (lambda (g$0$14548 g$0$14549 g$0$14550) (begin (if (for-all (lambda (g$0$14554) (if (g$0$11040 g$0$14554) (if (not (g$0$11048 g$0$14554 (g$0$11293 (quote |...|)))) (begin (quote #f) (not (g$0$11048 g$0$14554 (g$0$11293 (quote _))))) (quote #f)) (quote #f))) g$0$14548) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (g$0$11058 g$0$14536 (quote ())))) (g$0$11323 (list (quote lambda) (quote (x)) (cons (quote syntax-case) (cons (quote x) (cons g$0$14548 (map (lambda (g$0$14556 g$0$14557) (list g$0$14556 (list (quote syntax) g$0$14557))) g$0$14549 g$0$14550)))))))) g$0$14540) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14538 (quote ()))))) ((lambda (g$0$14560) (if (g$0$11026 g$0$14560) (begin (quote #f) ((lambda (g$0$14562) (if g$0$14562 (begin (quote #f) ((lambda (g$0$14564) (if g$0$14564 (begin (quote #f) (append g$0$14562 g$0$14564)) (quote #f))) ((lambda (g$0$14566) (if (g$0$11026 g$0$14566) (begin (quote #f) ((lambda (g$0$14568) (if g$0$14568 (begin (quote #f) ((lambda (g$0$14570) (if g$0$14570 (begin (quote #f) (append g$0$14568 g$0$14570)) (quote #f))) ((letrec ((g$0$14572 (lambda (g$0$14574) (if (g$0$11026 g$0$14574) ((lambda (g$0$14576) (if g$0$14576 (begin (quote #f) ((lambda (g$0$14578) (if g$0$14578 (begin (quote #f) (map cons g$0$14576 g$0$14578)) (quote #f))) (g$0$14572 (g$0$11038 g$0$14574)))) (quote #f))) ((lambda (g$0$14580) (if (g$0$11026 g$0$14580) (begin (quote #f) ((lambda (g$0$14582) (if g$0$14582 (begin (quote #f) ((lambda (g$0$14584) (if g$0$14584 (begin (quote #f) (append g$0$14582 g$0$14584)) (quote #f))) ((lambda (g$0$14586) (if (g$0$11026 g$0$14586) (begin (quote #f) ((lambda (g$0$14588) (if g$0$14588 (begin (quote #f) ((lambda (g$0$14590) (if g$0$14590 (begin (quote #f) (append g$0$14588 g$0$14590)) (quote #f))) ((lambda (g$0$14592) (if (equal? (g$0$11060 g$0$14592) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14586)))) (quote #f))) ((lambda (g$0$14594) (list g$0$14594)) (g$0$11034 g$0$14586)))) (quote #f))) (g$0$11038 g$0$14580)))) (quote #f))) ((lambda (g$0$14596) (list g$0$14596)) (g$0$11034 g$0$14580)))) (quote #f))) (g$0$11034 g$0$14574))) (if (g$0$11030 g$0$14574) (list (begin (quote pat*) (quote ())) (begin (quote tmp*) (quote ()))) (quote #f)))))) g$0$14572) (g$0$11038 g$0$14566)))) (quote #f))) ((letrec ((g$0$14598 (lambda (g$0$14600) (if (g$0$11026 g$0$14600) ((lambda (g$0$14602) (if g$0$14602 (begin (quote #f) ((lambda (g$0$14604) (if g$0$14604 (begin (quote #f) (map cons g$0$14602 g$0$14604)) (quote #f))) (g$0$14598 (g$0$11038 g$0$14600)))) (quote #f))) ((lambda (g$0$14606) (list g$0$14606)) (g$0$11034 g$0$14600))) (if (g$0$11030 g$0$14600) (list (begin (quote lits) (quote ()))) (quote #f)))))) g$0$14598) (g$0$11034 g$0$14566)))) (quote #f))) (g$0$11038 g$0$14560)))) (quote #f))) ((lambda (g$0$14608) (quote ())) (g$0$11034 g$0$14560)))) (quote #f))) g$0$14538))) g$0$14536))) (set! g$0$11357 ((lambda () ((lambda (g$0$14632 g$0$14634 g$0$14636 g$0$14638 g$0$14640 g$0$14642) (begin (set! g$0$14632 (lambda (g$0$15254 g$0$15255) (letrec ((g$0$15258 (lambda (g$0$15260) (if (null? g$0$15260) g$0$15255 (g$0$14634 (car g$0$15260) (g$0$15258 (cdr g$0$15260))))))) (g$0$15258 g$0$15254)))) (set! g$0$14634 (lambda (g$0$15148 g$0$15149) ((lambda (g$0$15152) ((lambda (g$0$15154) (if (if g$0$15154 (begin (quote #f) (apply (lambda (g$0$15156) (quote #t)) g$0$15154)) (quote #f)) (apply (lambda (g$0$15158) ((lambda (g$0$15160) ((lambda (g$0$15162) (if (if g$0$15162 (begin (quote #f) (apply (lambda (g$0$15164) (quote #t)) g$0$15162)) (quote #f)) (apply (lambda (g$0$15166) (list (g$0$11293 (quote quote)) (cons g$0$15166 g$0$15158))) g$0$15162) ((lambda (g$0$15168) ((lambda (g$0$15170) (if (if g$0$15170 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15170)) (quote #f)) (apply (lambda () ((lambda (g$0$15172) ((lambda (g$0$15174) (if (if g$0$15174 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15174)) (quote #f)) (apply (lambda () (list (g$0$11293 (quote list)) g$0$15148)) g$0$15174) ((lambda (g$0$15176) ((lambda (g$0$15178) (if (if g$0$15178 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15178)) (quote #f)) (apply (lambda () (list (g$0$11293 (quote cons)) g$0$15148 g$0$15149)) g$0$15178) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15176 (quote ()))))) ((lambda (g$0$15180) (quote ())) g$0$15176))) g$0$15172))) ((lambda (g$0$15182) (if (equal? (g$0$11060 g$0$15182) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$15172))) g$0$15158)) g$0$15170) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15168 (quote ()))))) ((lambda (g$0$15184) (quote ())) g$0$15168))) g$0$15160))) ((lambda (g$0$15186) (if (g$0$11026 g$0$15186) (begin (quote #f) ((lambda (g$0$15188) (if g$0$15188 (begin (quote #f) ((lambda (g$0$15190) (if g$0$15190 (begin (quote #f) (append g$0$15188 g$0$15190)) (quote #f))) ((lambda (g$0$15192) (if (g$0$11026 g$0$15192) (begin (quote #f) ((lambda (g$0$15194) (if g$0$15194 (begin (quote #f) ((lambda (g$0$15196) (if g$0$15196 (begin (quote #f) (append g$0$15194 g$0$15196)) (quote #f))) ((lambda (g$0$15198) (if (equal? (g$0$11060 g$0$15198) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15192)))) (quote #f))) ((lambda (g$0$15200) (list g$0$15200)) (g$0$11034 g$0$15192)))) (quote #f))) (g$0$11038 g$0$15186)))) (quote #f))) ((lambda (g$0$15202) (if (g$0$11040 g$0$15202) (if (g$0$11048 g$0$15202 (g$0$11293 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15186)))) (quote #f))) g$0$15160))) g$0$15148)) g$0$15154) ((lambda (g$0$15204) ((lambda (g$0$15206) (if (if g$0$15206 (begin (quote #f) (apply (lambda (g$0$15208) (quote #t)) g$0$15206)) (quote #f)) (apply (lambda (g$0$15210) (cons* (g$0$11293 (quote list)) g$0$15148 g$0$15210)) g$0$15206) ((lambda (g$0$15212) ((lambda (g$0$15214) (if (if g$0$15214 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15214)) (quote #f)) (apply (lambda () (list (g$0$11293 (quote cons)) g$0$15148 g$0$15149)) g$0$15214) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15212 (quote ()))))) ((lambda (g$0$15216) (quote ())) g$0$15212))) g$0$15204))) ((lambda (g$0$15218) (if (g$0$11026 g$0$15218) (begin (quote #f) ((lambda (g$0$15220) (if g$0$15220 (begin (quote #f) ((lambda (g$0$15222) (if g$0$15222 (begin (quote #f) (append g$0$15220 g$0$15222)) (quote #f))) ((letrec ((g$0$15224 (lambda (g$0$15226) (if (g$0$11026 g$0$15226) ((lambda (g$0$15228) (if g$0$15228 (begin (quote #f) ((lambda (g$0$15230) (if g$0$15230 (begin (quote #f) (map cons g$0$15228 g$0$15230)) (quote #f))) (g$0$15224 (g$0$11038 g$0$15226)))) (quote #f))) ((lambda (g$0$15232) (list g$0$15232)) (g$0$11034 g$0$15226))) (if (g$0$11030 g$0$15226) (list (begin (quote stuff) (quote ()))) (quote #f)))))) g$0$15224) (g$0$11038 g$0$15218)))) (quote #f))) ((lambda (g$0$15234) (if (g$0$11040 g$0$15234) (if (g$0$11048 g$0$15234 (g$0$11293 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15218)))) (quote #f))) g$0$15204))) g$0$15152))) ((lambda (g$0$15236) (if (g$0$11026 g$0$15236) (begin (quote #f) ((lambda (g$0$15238) (if g$0$15238 (begin (quote #f) ((lambda (g$0$15240) (if g$0$15240 (begin (quote #f) (append g$0$15238 g$0$15240)) (quote #f))) ((lambda (g$0$15242) (if (g$0$11026 g$0$15242) (begin (quote #f) ((lambda (g$0$15244) (if g$0$15244 (begin (quote #f) ((lambda (g$0$15246) (if g$0$15246 (begin (quote #f) (append g$0$15244 g$0$15246)) (quote #f))) ((lambda (g$0$15248) (if (equal? (g$0$11060 g$0$15248) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15242)))) (quote #f))) ((lambda (g$0$15250) (list g$0$15250)) (g$0$11034 g$0$15242)))) (quote #f))) (g$0$11038 g$0$15236)))) (quote #f))) ((lambda (g$0$15252) (if (g$0$11040 g$0$15252) (if (g$0$11048 g$0$15252 (g$0$11293 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15236)))) (quote #f))) g$0$15152))) g$0$15149))) (set! g$0$14636 (lambda (g$0$15082 g$0$15083) ((lambda (g$0$15086) (if (null? g$0$15086) (list (g$0$11293 (quote quote)) (quote ())) (if (null? (cdr g$0$15086)) (car g$0$15086) (cons* (g$0$11293 (quote append)) g$0$15086)))) (letrec ((g$0$15088 (lambda (g$0$15090) (if (null? g$0$15090) ((lambda (g$0$15092) ((lambda (g$0$15094) (if (if g$0$15094 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15094)) (quote #f)) (apply (lambda () (quote ())) g$0$15094) ((lambda (g$0$15096) ((lambda (g$0$15098) (if (if g$0$15098 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15098)) (quote #f)) (apply (lambda () (list g$0$15083)) g$0$15098) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15096 (quote ()))))) ((lambda (g$0$15100) (quote ())) g$0$15096))) g$0$15092))) ((lambda (g$0$15102) (if (g$0$11026 g$0$15102) (begin (quote #f) ((lambda (g$0$15104) (if g$0$15104 (begin (quote #f) ((lambda (g$0$15106) (if g$0$15106 (begin (quote #f) (append g$0$15104 g$0$15106)) (quote #f))) ((lambda (g$0$15108) (if (g$0$11026 g$0$15108) (begin (quote #f) ((lambda (g$0$15110) (if g$0$15110 (begin (quote #f) ((lambda (g$0$15112) (if g$0$15112 (begin (quote #f) (append g$0$15110 g$0$15112)) (quote #f))) ((lambda (g$0$15114) (if (equal? (g$0$11060 g$0$15114) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15108)))) (quote #f))) ((lambda (g$0$15116) (if (equal? (g$0$11060 g$0$15116) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11034 g$0$15108)))) (quote #f))) (g$0$11038 g$0$15102)))) (quote #f))) ((lambda (g$0$15118) (if (g$0$11040 g$0$15118) (if (g$0$11048 g$0$15118 (g$0$11293 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15102)))) (quote #f))) g$0$15092))) g$0$15083) ((lambda (g$0$15120) ((lambda (g$0$15122) (if (if g$0$15122 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15122)) (quote #f)) (apply (lambda () (g$0$15088 (cdr g$0$15090))) g$0$15122) ((lambda (g$0$15124) ((lambda (g$0$15126) (if (if g$0$15126 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15126)) (quote #f)) (apply (lambda () (cons (car g$0$15090) (g$0$15088 (cdr g$0$15090)))) g$0$15126) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15124 (quote ()))))) ((lambda (g$0$15128) (quote ())) g$0$15124))) g$0$15120))) ((lambda (g$0$15130) (if (g$0$11026 g$0$15130) (begin (quote #f) ((lambda (g$0$15132) (if g$0$15132 (begin (quote #f) ((lambda (g$0$15134) (if g$0$15134 (begin (quote #f) (append g$0$15132 g$0$15134)) (quote #f))) ((lambda (g$0$15136) (if (g$0$11026 g$0$15136) (begin (quote #f) ((lambda (g$0$15138) (if g$0$15138 (begin (quote #f) ((lambda (g$0$15140) (if g$0$15140 (begin (quote #f) (append g$0$15138 g$0$15140)) (quote #f))) ((lambda (g$0$15142) (if (equal? (g$0$11060 g$0$15142) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15136)))) (quote #f))) ((lambda (g$0$15144) (if (equal? (g$0$11060 g$0$15144) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11034 g$0$15136)))) (quote #f))) (g$0$11038 g$0$15130)))) (quote #f))) ((lambda (g$0$15146) (if (g$0$11040 g$0$15146) (if (g$0$11048 g$0$15146 (g$0$11293 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15130)))) (quote #f))) g$0$15120))) (car g$0$15090)))))) (g$0$15088 g$0$15082))))) (set! g$0$14638 (lambda (g$0$14922) ((lambda (g$0$14924) ((lambda (g$0$14926) ((lambda (g$0$14928) (if (if g$0$14928 (begin (quote #f) (apply (lambda (g$0$14930) (quote #t)) g$0$14928)) (quote #f)) (apply (lambda (g$0$14932) (list (g$0$11293 (quote quote)) (list->vector g$0$14932))) g$0$14928) ((lambda (g$0$14934) ((lambda (g$0$14936) (if (if g$0$14936 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14936)) (quote #f)) (apply (lambda () (letrec ((g$0$14938 (lambda (g$0$14942 g$0$14943) ((lambda (g$0$14946) ((lambda (g$0$14948) (if (if g$0$14948 (begin (quote #f) (apply (lambda (g$0$14950) (quote #t)) g$0$14948)) (quote #f)) (apply (lambda (g$0$14952) (g$0$14943 (map (lambda (g$0$14954) (list (g$0$11293 (quote quote)) g$0$14954)) g$0$14952))) g$0$14948) ((lambda (g$0$14956) ((lambda (g$0$14958) (if (if g$0$14958 (begin (quote #f) (apply (lambda (g$0$14960) (quote #t)) g$0$14958)) (quote #f)) (apply (lambda (g$0$14962) (g$0$14943 g$0$14962)) g$0$14958) ((lambda (g$0$14964) ((lambda (g$0$14966) (if (if g$0$14966 (begin (quote #f) (apply (lambda (g$0$14968 g$0$14969) (quote #t)) g$0$14966)) (quote #f)) (apply (lambda (g$0$14972 g$0$14973) (g$0$14938 g$0$14973 (lambda (g$0$14976) (g$0$14943 (cons g$0$14972 g$0$14976))))) g$0$14966) ((lambda (g$0$14978) ((lambda (g$0$14980) (if (if g$0$14980 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14980)) (quote #f)) (apply (lambda () (list (g$0$11293 (quote list->vector)) g$0$14924)) g$0$14980) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14978 (quote ()))))) ((lambda (g$0$14982) (quote ())) g$0$14978))) g$0$14964))) ((lambda (g$0$14984) (if (g$0$11026 g$0$14984) (begin (quote #f) ((lambda (g$0$14986) (if g$0$14986 (begin (quote #f) ((lambda (g$0$14988) (if g$0$14988 (begin (quote #f) (append g$0$14986 g$0$14988)) (quote #f))) ((lambda (g$0$14990) (if (g$0$11026 g$0$14990) (begin (quote #f) ((lambda (g$0$14992) (if g$0$14992 (begin (quote #f) ((lambda (g$0$14994) (if g$0$14994 (begin (quote #f) (append g$0$14992 g$0$14994)) (quote #f))) ((lambda (g$0$14996) (if (g$0$11026 g$0$14996) (begin (quote #f) ((lambda (g$0$14998) (if g$0$14998 (begin (quote #f) ((lambda (g$0$15000) (if g$0$15000 (begin (quote #f) (append g$0$14998 g$0$15000)) (quote #f))) ((lambda (g$0$15002) (if (equal? (g$0$11060 g$0$15002) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14996)))) (quote #f))) ((lambda (g$0$15004) (list g$0$15004)) (g$0$11034 g$0$14996)))) (quote #f))) (g$0$11038 g$0$14990)))) (quote #f))) ((lambda (g$0$15006) (list g$0$15006)) (g$0$11034 g$0$14990)))) (quote #f))) (g$0$11038 g$0$14984)))) (quote #f))) ((lambda (g$0$15008) (if (g$0$11040 g$0$15008) (if (g$0$11048 g$0$15008 (g$0$11293 (quote cons))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14984)))) (quote #f))) g$0$14964))) g$0$14956))) ((lambda (g$0$15010) (if (g$0$11026 g$0$15010) (begin (quote #f) ((lambda (g$0$15012) (if g$0$15012 (begin (quote #f) ((lambda (g$0$15014) (if g$0$15014 (begin (quote #f) (append g$0$15012 g$0$15014)) (quote #f))) ((letrec ((g$0$15016 (lambda (g$0$15018) (if (g$0$11026 g$0$15018) ((lambda (g$0$15020) (if g$0$15020 (begin (quote #f) ((lambda (g$0$15022) (if g$0$15022 (begin (quote #f) (map cons g$0$15020 g$0$15022)) (quote #f))) (g$0$15016 (g$0$11038 g$0$15018)))) (quote #f))) ((lambda (g$0$15024) (list g$0$15024)) (g$0$11034 g$0$15018))) (if (g$0$11030 g$0$15018) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$15016) (g$0$11038 g$0$15010)))) (quote #f))) ((lambda (g$0$15026) (if (g$0$11040 g$0$15026) (if (g$0$11048 g$0$15026 (g$0$11293 (quote list))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15010)))) (quote #f))) g$0$14956))) g$0$14946))) ((lambda (g$0$15028) (if (g$0$11026 g$0$15028) (begin (quote #f) ((lambda (g$0$15030) (if g$0$15030 (begin (quote #f) ((lambda (g$0$15032) (if g$0$15032 (begin (quote #f) (append g$0$15030 g$0$15032)) (quote #f))) ((lambda (g$0$15034) (if (g$0$11026 g$0$15034) (begin (quote #f) ((lambda (g$0$15036) (if g$0$15036 (begin (quote #f) ((lambda (g$0$15038) (if g$0$15038 (begin (quote #f) (append g$0$15036 g$0$15038)) (quote #f))) ((lambda (g$0$15040) (if (equal? (g$0$11060 g$0$15040) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15034)))) (quote #f))) ((letrec ((g$0$15042 (lambda (g$0$15044) (if (g$0$11026 g$0$15044) ((lambda (g$0$15046) (if g$0$15046 (begin (quote #f) ((lambda (g$0$15048) (if g$0$15048 (begin (quote #f) (map cons g$0$15046 g$0$15048)) (quote #f))) (g$0$15042 (g$0$11038 g$0$15044)))) (quote #f))) ((lambda (g$0$15050) (list g$0$15050)) (g$0$11034 g$0$15044))) (if (g$0$11030 g$0$15044) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$15042) (g$0$11034 g$0$15034)))) (quote #f))) (g$0$11038 g$0$15028)))) (quote #f))) ((lambda (g$0$15052) (if (g$0$11040 g$0$15052) (if (g$0$11048 g$0$15052 (g$0$11293 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15028)))) (quote #f))) g$0$14946))) g$0$14942)))) (g$0$14938 g$0$14922 (lambda (g$0$14940) (cons* (g$0$11293 (quote vector)) g$0$14940))))) g$0$14936) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14934 (quote ()))))) ((lambda (g$0$15054) (quote ())) g$0$14934))) g$0$14926))) ((lambda (g$0$15056) (if (g$0$11026 g$0$15056) (begin (quote #f) ((lambda (g$0$15058) (if g$0$15058 (begin (quote #f) ((lambda (g$0$15060) (if g$0$15060 (begin (quote #f) (append g$0$15058 g$0$15060)) (quote #f))) ((lambda (g$0$15062) (if (g$0$11026 g$0$15062) (begin (quote #f) ((lambda (g$0$15064) (if g$0$15064 (begin (quote #f) ((lambda (g$0$15066) (if g$0$15066 (begin (quote #f) (append g$0$15064 g$0$15066)) (quote #f))) ((lambda (g$0$15068) (if (equal? (g$0$11060 g$0$15068) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15062)))) (quote #f))) ((letrec ((g$0$15070 (lambda (g$0$15072) (if (g$0$11026 g$0$15072) ((lambda (g$0$15074) (if g$0$15074 (begin (quote #f) ((lambda (g$0$15076) (if g$0$15076 (begin (quote #f) (map cons g$0$15074 g$0$15076)) (quote #f))) (g$0$15070 (g$0$11038 g$0$15072)))) (quote #f))) ((lambda (g$0$15078) (list g$0$15078)) (g$0$11034 g$0$15072))) (if (g$0$11030 g$0$15072) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$15070) (g$0$11034 g$0$15062)))) (quote #f))) (g$0$11038 g$0$15056)))) (quote #f))) ((lambda (g$0$15080) (if (g$0$11040 g$0$15080) (if (g$0$11048 g$0$15080 (g$0$11293 (quote quote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15056)))) (quote #f))) g$0$14926))) g$0$14924)) g$0$14922))) (set! g$0$14640 (lambda (g$0$14828 g$0$14829) ((lambda (g$0$14832) ((lambda (g$0$14834) (if (if g$0$14834 (begin (quote #f) (apply (lambda (g$0$14836 g$0$14837) (quote #t)) g$0$14834)) (quote #f)) (apply (lambda (g$0$14840 g$0$14841) ((lambda (g$0$14844) ((lambda (g$0$14846) (if (if g$0$14846 (begin (quote #f) (apply (lambda (g$0$14848) (quote #t)) g$0$14846)) (quote #f)) (apply (lambda (g$0$14850) (if (= g$0$14829 (quote 0)) (g$0$14632 g$0$14850 (g$0$14640 g$0$14841 g$0$14829)) (g$0$14634 (g$0$14634 (list (g$0$11293 (quote quote)) (quote unquote)) (g$0$14642 g$0$14850 (- g$0$14829 (quote 1)))) (g$0$14640 g$0$14841 g$0$14829)))) g$0$14846) ((lambda (g$0$14852) ((lambda (g$0$14854) (if (if g$0$14854 (begin (quote #f) (apply (lambda (g$0$14856) (quote #t)) g$0$14854)) (quote #f)) (apply (lambda (g$0$14858) (if (= g$0$14829 (quote 0)) (g$0$14636 g$0$14858 (g$0$14640 g$0$14841 g$0$14829)) (g$0$14634 (g$0$14634 (list (g$0$11293 (quote quote)) (quote unquote-splicing)) (g$0$14642 g$0$14858 (- g$0$14829 (quote 1)))) (g$0$14640 g$0$14841 g$0$14829)))) g$0$14854) ((lambda (g$0$14860) ((lambda (g$0$14862) (if (if g$0$14862 (begin (quote #f) (apply (lambda (g$0$14864) (quote #t)) g$0$14862)) (quote #f)) (apply (lambda (g$0$14866) (g$0$14634 (g$0$14642 g$0$14866 g$0$14829) (g$0$14640 g$0$14841 g$0$14829))) g$0$14862) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14860 (quote ()))))) ((lambda (g$0$14868) (list g$0$14868)) g$0$14860))) g$0$14852))) ((lambda (g$0$14870) (if (g$0$11026 g$0$14870) (begin (quote #f) ((lambda (g$0$14872) (if g$0$14872 (begin (quote #f) ((lambda (g$0$14874) (if g$0$14874 (begin (quote #f) (append g$0$14872 g$0$14874)) (quote #f))) ((letrec ((g$0$14876 (lambda (g$0$14878) (if (g$0$11026 g$0$14878) ((lambda (g$0$14880) (if g$0$14880 (begin (quote #f) ((lambda (g$0$14882) (if g$0$14882 (begin (quote #f) (map cons g$0$14880 g$0$14882)) (quote #f))) (g$0$14876 (g$0$11038 g$0$14878)))) (quote #f))) ((lambda (g$0$14884) (list g$0$14884)) (g$0$11034 g$0$14878))) (if (g$0$11030 g$0$14878) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14876) (g$0$11038 g$0$14870)))) (quote #f))) ((lambda (g$0$14886) (if (g$0$11040 g$0$14886) (if (g$0$11048 g$0$14886 (g$0$11293 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14870)))) (quote #f))) g$0$14852))) g$0$14844))) ((lambda (g$0$14888) (if (g$0$11026 g$0$14888) (begin (quote #f) ((lambda (g$0$14890) (if g$0$14890 (begin (quote #f) ((lambda (g$0$14892) (if g$0$14892 (begin (quote #f) (append g$0$14890 g$0$14892)) (quote #f))) ((letrec ((g$0$14894 (lambda (g$0$14896) (if (g$0$11026 g$0$14896) ((lambda (g$0$14898) (if g$0$14898 (begin (quote #f) ((lambda (g$0$14900) (if g$0$14900 (begin (quote #f) (map cons g$0$14898 g$0$14900)) (quote #f))) (g$0$14894 (g$0$11038 g$0$14896)))) (quote #f))) ((lambda (g$0$14902) (list g$0$14902)) (g$0$11034 g$0$14896))) (if (g$0$11030 g$0$14896) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14894) (g$0$11038 g$0$14888)))) (quote #f))) ((lambda (g$0$14904) (if (g$0$11040 g$0$14904) (if (g$0$11048 g$0$14904 (g$0$11293 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14888)))) (quote #f))) g$0$14844))) g$0$14840)) g$0$14834) ((lambda (g$0$14906) ((lambda (g$0$14908) (if (if g$0$14908 (begin (quote #f) (apply (lambda () (quote #t)) g$0$14908)) (quote #f)) (apply (lambda () (list (g$0$11293 (quote quote)) (quote ()))) g$0$14908) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14906 (quote ()))))) ((lambda (g$0$14910) (if (equal? (g$0$11060 g$0$14910) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$14906))) g$0$14832))) ((lambda (g$0$14912) (if (g$0$11026 g$0$14912) (begin (quote #f) ((lambda (g$0$14914) (if g$0$14914 (begin (quote #f) ((lambda (g$0$14916) (if g$0$14916 (begin (quote #f) (append g$0$14914 g$0$14916)) (quote #f))) ((lambda (g$0$14918) (list g$0$14918)) (g$0$11038 g$0$14912)))) (quote #f))) ((lambda (g$0$14920) (list g$0$14920)) (g$0$11034 g$0$14912)))) (quote #f))) g$0$14832))) g$0$14828))) (set! g$0$14642 (lambda (g$0$14644 g$0$14645) ((lambda (g$0$14648) ((lambda (g$0$14650) (if (if g$0$14650 (begin (quote #f) (apply (lambda (g$0$14652) (quote #t)) g$0$14650)) (quote #f)) (apply (lambda (g$0$14654) (if (= g$0$14645 (quote 0)) g$0$14654 (g$0$14634 (list (g$0$11293 (quote quote)) (quote unquote)) (g$0$14642 (list g$0$14654) (- g$0$14645 (quote 1)))))) g$0$14650) ((lambda (g$0$14656) ((lambda (g$0$14658) (if (if g$0$14658 (begin (quote #f) (apply (lambda (g$0$14660 g$0$14661) (quote #t)) g$0$14658)) (quote #f)) (apply (lambda (g$0$14664 g$0$14665) (if (= g$0$14645 (quote 0)) (g$0$14632 g$0$14664 (g$0$14642 g$0$14665 g$0$14645)) (g$0$14634 (g$0$14634 (list (g$0$11293 (quote quote)) (quote unquote)) (g$0$14642 g$0$14664 (- g$0$14645 (quote 1)))) (g$0$14642 g$0$14665 g$0$14645)))) g$0$14658) ((lambda (g$0$14668) ((lambda (g$0$14670) (if (if g$0$14670 (begin (quote #f) (apply (lambda (g$0$14672 g$0$14673) (quote #t)) g$0$14670)) (quote #f)) (apply (lambda (g$0$14676 g$0$14677) (if (= g$0$14645 (quote 0)) (g$0$14636 g$0$14676 (g$0$14642 g$0$14677 g$0$14645)) (g$0$14634 (g$0$14634 (list (g$0$11293 (quote quote)) (quote unquote-splicing)) (g$0$14642 g$0$14676 (- g$0$14645 (quote 1)))) (g$0$14642 g$0$14677 g$0$14645)))) g$0$14670) ((lambda (g$0$14680) ((lambda (g$0$14682) (if (if g$0$14682 (begin (quote #f) (apply (lambda (g$0$14684) (quote #t)) g$0$14682)) (quote #f)) (apply (lambda (g$0$14686) (g$0$14634 (list (g$0$11293 (quote quote)) (quote quasiquote)) (g$0$14642 (list g$0$14686) (+ g$0$14645 (quote 1))))) g$0$14682) ((lambda (g$0$14688) ((lambda (g$0$14690) (if (if g$0$14690 (begin (quote #f) (apply (lambda (g$0$14692 g$0$14693) (quote #t)) g$0$14690)) (quote #f)) (apply (lambda (g$0$14696 g$0$14697) (g$0$14634 (g$0$14642 g$0$14696 g$0$14645) (g$0$14642 g$0$14697 g$0$14645))) g$0$14690) ((lambda (g$0$14700) ((lambda (g$0$14702) (if (if g$0$14702 (begin (quote #f) (apply (lambda (g$0$14704) (not (g$0$10992 g$0$14704))) g$0$14702)) (quote #f)) (apply (lambda (g$0$14706) (g$0$14638 (g$0$14640 g$0$14706 g$0$14645))) g$0$14702) ((lambda (g$0$14708) ((lambda (g$0$14710) (if (if g$0$14710 (begin (quote #f) (apply (lambda (g$0$14712) (quote #t)) g$0$14710)) (quote #f)) (apply (lambda (g$0$14714) (list (g$0$11293 (quote quote)) g$0$14714)) g$0$14710) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$14708 (quote ()))))) ((lambda (g$0$14716) (list g$0$14716)) g$0$14708))) g$0$14700))) ((lambda (g$0$14718) (if (g$0$11028 g$0$14718) (begin (quote #f) ((letrec ((g$0$14720 (lambda (g$0$14722) (if (g$0$11026 g$0$14722) ((lambda (g$0$14724) (if g$0$14724 (begin (quote #f) ((lambda (g$0$14726) (if g$0$14726 (begin (quote #f) (map cons g$0$14724 g$0$14726)) (quote #f))) (g$0$14720 (g$0$11038 g$0$14722)))) (quote #f))) ((lambda (g$0$14728) (list g$0$14728)) (g$0$11034 g$0$14722))) (if (g$0$11030 g$0$14722) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$14720) (g$0$11024 g$0$14718))) (quote #f))) g$0$14700))) g$0$14688))) ((lambda (g$0$14730) (if (g$0$11026 g$0$14730) (begin (quote #f) ((lambda (g$0$14732) (if g$0$14732 (begin (quote #f) ((lambda (g$0$14734) (if g$0$14734 (begin (quote #f) (append g$0$14732 g$0$14734)) (quote #f))) ((lambda (g$0$14736) (list g$0$14736)) (g$0$11038 g$0$14730)))) (quote #f))) ((lambda (g$0$14738) (list g$0$14738)) (g$0$11034 g$0$14730)))) (quote #f))) g$0$14688))) g$0$14680))) ((lambda (g$0$14740) (if (g$0$11026 g$0$14740) (begin (quote #f) ((lambda (g$0$14742) (if g$0$14742 (begin (quote #f) ((lambda (g$0$14744) (if g$0$14744 (begin (quote #f) (append g$0$14742 g$0$14744)) (quote #f))) ((lambda (g$0$14746) (if (g$0$11026 g$0$14746) (begin (quote #f) ((lambda (g$0$14748) (if g$0$14748 (begin (quote #f) ((lambda (g$0$14750) (if g$0$14750 (begin (quote #f) (append g$0$14748 g$0$14750)) (quote #f))) ((lambda (g$0$14752) (if (equal? (g$0$11060 g$0$14752) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14746)))) (quote #f))) ((lambda (g$0$14754) (list g$0$14754)) (g$0$11034 g$0$14746)))) (quote #f))) (g$0$11038 g$0$14740)))) (quote #f))) ((lambda (g$0$14756) (if (g$0$11040 g$0$14756) (if (g$0$11048 g$0$14756 (g$0$11293 (quote quasiquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14740)))) (quote #f))) g$0$14680))) g$0$14668))) ((lambda (g$0$14758) (if (g$0$11026 g$0$14758) (begin (quote #f) ((lambda (g$0$14760) (if g$0$14760 (begin (quote #f) ((lambda (g$0$14762) (if g$0$14762 (begin (quote #f) (append g$0$14760 g$0$14762)) (quote #f))) ((lambda (g$0$14764) (list g$0$14764)) (g$0$11038 g$0$14758)))) (quote #f))) ((lambda (g$0$14766) (if (g$0$11026 g$0$14766) (begin (quote #f) ((lambda (g$0$14768) (if g$0$14768 (begin (quote #f) ((lambda (g$0$14770) (if g$0$14770 (begin (quote #f) (append g$0$14768 g$0$14770)) (quote #f))) ((letrec ((g$0$14772 (lambda (g$0$14774) (if (g$0$11026 g$0$14774) ((lambda (g$0$14776) (if g$0$14776 (begin (quote #f) ((lambda (g$0$14778) (if g$0$14778 (begin (quote #f) (map cons g$0$14776 g$0$14778)) (quote #f))) (g$0$14772 (g$0$11038 g$0$14774)))) (quote #f))) ((lambda (g$0$14780) (list g$0$14780)) (g$0$11034 g$0$14774))) (if (g$0$11030 g$0$14774) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14772) (g$0$11038 g$0$14766)))) (quote #f))) ((lambda (g$0$14782) (if (g$0$11040 g$0$14782) (if (g$0$11048 g$0$14782 (g$0$11293 (quote unquote-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14766)))) (quote #f))) (g$0$11034 g$0$14758)))) (quote #f))) g$0$14668))) g$0$14656))) ((lambda (g$0$14784) (if (g$0$11026 g$0$14784) (begin (quote #f) ((lambda (g$0$14786) (if g$0$14786 (begin (quote #f) ((lambda (g$0$14788) (if g$0$14788 (begin (quote #f) (append g$0$14786 g$0$14788)) (quote #f))) ((lambda (g$0$14790) (list g$0$14790)) (g$0$11038 g$0$14784)))) (quote #f))) ((lambda (g$0$14792) (if (g$0$11026 g$0$14792) (begin (quote #f) ((lambda (g$0$14794) (if g$0$14794 (begin (quote #f) ((lambda (g$0$14796) (if g$0$14796 (begin (quote #f) (append g$0$14794 g$0$14796)) (quote #f))) ((letrec ((g$0$14798 (lambda (g$0$14800) (if (g$0$11026 g$0$14800) ((lambda (g$0$14802) (if g$0$14802 (begin (quote #f) ((lambda (g$0$14804) (if g$0$14804 (begin (quote #f) (map cons g$0$14802 g$0$14804)) (quote #f))) (g$0$14798 (g$0$11038 g$0$14800)))) (quote #f))) ((lambda (g$0$14806) (list g$0$14806)) (g$0$11034 g$0$14800))) (if (g$0$11030 g$0$14800) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$14798) (g$0$11038 g$0$14792)))) (quote #f))) ((lambda (g$0$14808) (if (g$0$11040 g$0$14808) (if (g$0$11048 g$0$14808 (g$0$11293 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14792)))) (quote #f))) (g$0$11034 g$0$14784)))) (quote #f))) g$0$14656))) g$0$14648))) ((lambda (g$0$14810) (if (g$0$11026 g$0$14810) (begin (quote #f) ((lambda (g$0$14812) (if g$0$14812 (begin (quote #f) ((lambda (g$0$14814) (if g$0$14814 (begin (quote #f) (append g$0$14812 g$0$14814)) (quote #f))) ((lambda (g$0$14816) (if (g$0$11026 g$0$14816) (begin (quote #f) ((lambda (g$0$14818) (if g$0$14818 (begin (quote #f) ((lambda (g$0$14820) (if g$0$14820 (begin (quote #f) (append g$0$14818 g$0$14820)) (quote #f))) ((lambda (g$0$14822) (if (equal? (g$0$11060 g$0$14822) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$14816)))) (quote #f))) ((lambda (g$0$14824) (list g$0$14824)) (g$0$11034 g$0$14816)))) (quote #f))) (g$0$11038 g$0$14810)))) (quote #f))) ((lambda (g$0$14826) (if (g$0$11040 g$0$14826) (if (g$0$11048 g$0$14826 (g$0$11293 (quote unquote))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$14810)))) (quote #f))) g$0$14648))) g$0$14644))) (lambda (g$0$15262) ((lambda (g$0$15264) ((lambda (g$0$15266) (if (if g$0$15266 (begin (quote #f) (apply (lambda (g$0$15268) (quote #t)) g$0$15266)) (quote #f)) (apply (lambda (g$0$15270) (g$0$14642 g$0$15270 (quote 0))) g$0$15266) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15264 (quote ()))))) ((lambda (g$0$15272) (if (g$0$11026 g$0$15272) (begin (quote #f) ((lambda (g$0$15274) (if g$0$15274 (begin (quote #f) ((lambda (g$0$15276) (if g$0$15276 (begin (quote #f) (append g$0$15274 g$0$15276)) (quote #f))) ((lambda (g$0$15278) (if (g$0$11026 g$0$15278) (begin (quote #f) ((lambda (g$0$15280) (if g$0$15280 (begin (quote #f) ((lambda (g$0$15282) (if g$0$15282 (begin (quote #f) (append g$0$15280 g$0$15282)) (quote #f))) ((lambda (g$0$15284) (if (equal? (g$0$11060 g$0$15284) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15278)))) (quote #f))) ((lambda (g$0$15286) (list g$0$15286)) (g$0$11034 g$0$15278)))) (quote #f))) (g$0$11038 g$0$15272)))) (quote #f))) ((lambda (g$0$15288) (quote ())) (g$0$11034 g$0$15272)))) (quote #f))) g$0$15264))) g$0$15262)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$11359 ((lambda () ((lambda (g$0$15290) (begin (set! g$0$15290 (lambda (g$0$15292 g$0$15293) ((lambda (g$0$15296) ((lambda (g$0$15298) (if (if g$0$15298 (begin (quote #f) (apply (lambda (g$0$15300) (quote #t)) g$0$15298)) (quote #f)) (apply (lambda (g$0$15302) (if (= g$0$15293 (quote 0)) ((lambda (g$0$15304) (values (list g$0$15304) (list g$0$15302) g$0$15304)) (gensym)) (call-with-values (lambda () (g$0$15290 g$0$15302 (- g$0$15293 (quote 1)))) (lambda (g$0$15306 g$0$15307 g$0$15308) (values g$0$15306 g$0$15307 (list (quote unsyntax) g$0$15308)))))) g$0$15298) ((lambda (g$0$15312) ((lambda (g$0$15314) (if (if g$0$15314 (begin (quote #f) (apply (lambda () (= g$0$15293 (quote 0))) g$0$15314)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax") (g$0$11058 g$0$15292 (quote ())))) g$0$15314) ((lambda (g$0$15316) ((lambda (g$0$15318) (if (if g$0$15318 (begin (quote #f) (apply (lambda (g$0$15320 g$0$15321) (quote #t)) g$0$15318)) (quote #f)) (apply (lambda (g$0$15324 g$0$15325) (call-with-values (lambda () (g$0$15290 g$0$15325 g$0$15293)) (lambda (g$0$15328 g$0$15329 g$0$15330) (if (= g$0$15293 (quote 0)) ((lambda (g$0$15334) (values (cons (cons g$0$15334 (quote (|...|))) g$0$15328) (cons g$0$15324 g$0$15329) (cons g$0$15334 (cons (quote |...|) g$0$15330)))) (gensym)) (call-with-values (lambda () (g$0$15290 g$0$15324 (- g$0$15293 (quote 1)))) (lambda (g$0$15336 g$0$15337 g$0$15338) (values (append g$0$15336 g$0$15328) (append g$0$15337 g$0$15329) (cons (list (quote unsyntax-splicing) g$0$15338) g$0$15330)))))))) g$0$15318) ((lambda (g$0$15342) ((lambda (g$0$15344) (if (if g$0$15344 (begin (quote #f) (apply (lambda () (= g$0$15293 (quote 0))) g$0$15344)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "incorrect use of unsyntax-splicing") (g$0$11058 g$0$15292 (quote ())))) g$0$15344) ((lambda (g$0$15346) ((lambda (g$0$15348) (if (if g$0$15348 (begin (quote #f) (apply (lambda (g$0$15350) (quote #t)) g$0$15348)) (quote #f)) (apply (lambda (g$0$15352) (call-with-values (lambda () (g$0$15290 g$0$15352 (+ g$0$15293 (quote 1)))) (lambda (g$0$15354 g$0$15355 g$0$15356) (values g$0$15354 g$0$15355 (list (quote quasisyntax) g$0$15356))))) g$0$15348) ((lambda (g$0$15360) ((lambda (g$0$15362) (if (if g$0$15362 (begin (quote #f) (apply (lambda (g$0$15364 g$0$15365) (quote #t)) g$0$15362)) (quote #f)) (apply (lambda (g$0$15368 g$0$15369) (call-with-values (lambda () (g$0$15290 g$0$15368 g$0$15293)) (lambda (g$0$15372 g$0$15373 g$0$15374) (call-with-values (lambda () (g$0$15290 g$0$15369 g$0$15293)) (lambda (g$0$15375 g$0$15376 g$0$15377) (values (append g$0$15375 g$0$15372) (append g$0$15376 g$0$15373) (cons g$0$15374 g$0$15377))))))) g$0$15362) ((lambda (g$0$15384) ((lambda (g$0$15386) (if (if g$0$15386 (begin (quote #f) (apply (lambda (g$0$15388) (not (g$0$10992 g$0$15292))) g$0$15386)) (quote #f)) (apply (lambda (g$0$15390) (call-with-values (lambda () (letrec ((g$0$15392 (lambda (g$0$15394) (if (null? g$0$15394) (values (quote ()) (quote ()) (quote ())) (call-with-values (lambda () (g$0$15290 (car g$0$15394) g$0$15293)) (lambda (g$0$15396 g$0$15397 g$0$15398) (call-with-values (lambda () (g$0$15392 (cdr g$0$15394))) (lambda (g$0$15402 g$0$15403 g$0$15404) (values (append g$0$15396 g$0$15402) (append g$0$15397 g$0$15403) (cons g$0$15398 g$0$15404)))))))))) (g$0$15392 g$0$15390))) (lambda (g$0$15408 g$0$15409 g$0$15410) (values g$0$15408 g$0$15409 (list->vector g$0$15410))))) g$0$15386) ((lambda (g$0$15414) ((lambda (g$0$15416) (if (if g$0$15416 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15416)) (quote #f)) (apply (lambda () (values (quote ()) (quote ()) g$0$15292)) g$0$15416) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15414 (quote ()))))) ((lambda (g$0$15418) (quote ())) g$0$15414))) g$0$15384))) ((lambda (g$0$15420) (if (g$0$11028 g$0$15420) (begin (quote #f) ((letrec ((g$0$15422 (lambda (g$0$15424) (if (g$0$11026 g$0$15424) ((lambda (g$0$15426) (if g$0$15426 (begin (quote #f) ((lambda (g$0$15428) (if g$0$15428 (begin (quote #f) (map cons g$0$15426 g$0$15428)) (quote #f))) (g$0$15422 (g$0$11038 g$0$15424)))) (quote #f))) ((lambda (g$0$15430) (list g$0$15430)) (g$0$11034 g$0$15424))) (if (g$0$11030 g$0$15424) (list (begin (quote x) (quote ()))) (quote #f)))))) g$0$15422) (g$0$11024 g$0$15420))) (quote #f))) g$0$15384))) g$0$15360))) ((lambda (g$0$15432) (if (g$0$11026 g$0$15432) (begin (quote #f) ((lambda (g$0$15434) (if g$0$15434 (begin (quote #f) ((lambda (g$0$15436) (if g$0$15436 (begin (quote #f) (append g$0$15434 g$0$15436)) (quote #f))) ((lambda (g$0$15438) (list g$0$15438)) (g$0$11038 g$0$15432)))) (quote #f))) ((lambda (g$0$15440) (list g$0$15440)) (g$0$11034 g$0$15432)))) (quote #f))) g$0$15360))) g$0$15346))) ((lambda (g$0$15442) (if (g$0$11026 g$0$15442) (begin (quote #f) ((lambda (g$0$15444) (if g$0$15444 (begin (quote #f) ((lambda (g$0$15446) (if g$0$15446 (begin (quote #f) (append g$0$15444 g$0$15446)) (quote #f))) ((lambda (g$0$15448) (if (g$0$11026 g$0$15448) (begin (quote #f) ((lambda (g$0$15450) (if g$0$15450 (begin (quote #f) ((lambda (g$0$15452) (if g$0$15452 (begin (quote #f) (append g$0$15450 g$0$15452)) (quote #f))) ((lambda (g$0$15454) (if (equal? (g$0$11060 g$0$15454) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15448)))) (quote #f))) ((lambda (g$0$15456) (list g$0$15456)) (g$0$11034 g$0$15448)))) (quote #f))) (g$0$11038 g$0$15442)))) (quote #f))) ((lambda (g$0$15458) (if (g$0$11040 g$0$15458) (if (g$0$11048 g$0$15458 (g$0$11293 (quote quasisyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15442)))) (quote #f))) g$0$15346))) g$0$15342))) ((lambda (g$0$15460) (if (g$0$11040 g$0$15460) (if (g$0$11048 g$0$15460 (g$0$11293 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$15342))) g$0$15316))) ((lambda (g$0$15462) (if (g$0$11026 g$0$15462) (begin (quote #f) ((lambda (g$0$15464) (if g$0$15464 (begin (quote #f) ((lambda (g$0$15466) (if g$0$15466 (begin (quote #f) (append g$0$15464 g$0$15466)) (quote #f))) ((lambda (g$0$15468) (list g$0$15468)) (g$0$11038 g$0$15462)))) (quote #f))) ((lambda (g$0$15470) (if (g$0$11026 g$0$15470) (begin (quote #f) ((lambda (g$0$15472) (if g$0$15472 (begin (quote #f) ((lambda (g$0$15474) (if g$0$15474 (begin (quote #f) (append g$0$15472 g$0$15474)) (quote #f))) ((lambda (g$0$15476) (if (g$0$11026 g$0$15476) (begin (quote #f) ((lambda (g$0$15478) (if g$0$15478 (begin (quote #f) ((lambda (g$0$15480) (if g$0$15480 (begin (quote #f) (append g$0$15478 g$0$15480)) (quote #f))) ((lambda (g$0$15482) (if (equal? (g$0$11060 g$0$15482) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15476)))) (quote #f))) ((lambda (g$0$15484) (list g$0$15484)) (g$0$11034 g$0$15476)))) (quote #f))) (g$0$11038 g$0$15470)))) (quote #f))) ((lambda (g$0$15486) (if (g$0$11040 g$0$15486) (if (g$0$11048 g$0$15486 (g$0$11293 (quote unsyntax-splicing))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15470)))) (quote #f))) (g$0$11034 g$0$15462)))) (quote #f))) g$0$15316))) g$0$15312))) ((lambda (g$0$15488) (if (g$0$11040 g$0$15488) (if (g$0$11048 g$0$15488 (g$0$11293 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) g$0$15312))) g$0$15296))) ((lambda (g$0$15490) (if (g$0$11026 g$0$15490) (begin (quote #f) ((lambda (g$0$15492) (if g$0$15492 (begin (quote #f) ((lambda (g$0$15494) (if g$0$15494 (begin (quote #f) (append g$0$15492 g$0$15494)) (quote #f))) ((lambda (g$0$15496) (if (g$0$11026 g$0$15496) (begin (quote #f) ((lambda (g$0$15498) (if g$0$15498 (begin (quote #f) ((lambda (g$0$15500) (if g$0$15500 (begin (quote #f) (append g$0$15498 g$0$15500)) (quote #f))) ((lambda (g$0$15502) (if (equal? (g$0$11060 g$0$15502) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15496)))) (quote #f))) ((lambda (g$0$15504) (list g$0$15504)) (g$0$11034 g$0$15496)))) (quote #f))) (g$0$11038 g$0$15490)))) (quote #f))) ((lambda (g$0$15506) (if (g$0$11040 g$0$15506) (if (g$0$11048 g$0$15506 (g$0$11293 (quote unsyntax))) (begin (quote #f) (quote ())) (quote #f)) (quote #f))) (g$0$11034 g$0$15490)))) (quote #f))) g$0$15296))) g$0$15292))) (lambda (g$0$15508) ((lambda (g$0$15510) ((lambda (g$0$15512) (if (if g$0$15512 (begin (quote #f) (apply (lambda (g$0$15514) (quote #t)) g$0$15512)) (quote #f)) (apply (lambda (g$0$15516) (call-with-values (lambda () (g$0$15290 g$0$15516 (quote 0))) (lambda (g$0$15518 g$0$15519 g$0$15520) (g$0$11323 (list (quote syntax-case) (cons (quote list) g$0$15519) (quote ()) (list g$0$15518 (list (quote syntax) g$0$15520))))))) g$0$15512) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15510 (quote ()))))) ((lambda (g$0$15524) (if (g$0$11026 g$0$15524) (begin (quote #f) ((lambda (g$0$15526) (if g$0$15526 (begin (quote #f) ((lambda (g$0$15528) (if g$0$15528 (begin (quote #f) (append g$0$15526 g$0$15528)) (quote #f))) ((lambda (g$0$15530) (if (g$0$11026 g$0$15530) (begin (quote #f) ((lambda (g$0$15532) (if g$0$15532 (begin (quote #f) ((lambda (g$0$15534) (if g$0$15534 (begin (quote #f) (append g$0$15532 g$0$15534)) (quote #f))) ((lambda (g$0$15536) (if (equal? (g$0$11060 g$0$15536) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15530)))) (quote #f))) ((lambda (g$0$15538) (list g$0$15538)) (g$0$11034 g$0$15530)))) (quote #f))) (g$0$11038 g$0$15524)))) (quote #f))) ((lambda (g$0$15540) (quote ())) (g$0$11034 g$0$15524)))) (quote #f))) g$0$15510))) g$0$15508)))) (quote #f))))) (set! g$0$11361 (lambda (g$0$15542) (error (quote expander) (quote "~a ~s") (quote "define-record not supported") (g$0$11058 g$0$15542 (quote ()))))) (set! g$0$11363 (lambda (g$0$15544) (error (quote expander) (quote "~a ~s") (quote "incorrect usage of auxilary keyword") (g$0$11058 g$0$15544 (quote ()))))) (set! g$0$11365 (lambda (g$0$15546 g$0$15547 g$0$15548) ((lambda (g$0$15552) ((lambda (g$0$15554) (if (if g$0$15554 (begin (quote #f) (apply (lambda (g$0$15556 g$0$15557) (quote #t)) g$0$15554)) (quote #f)) (apply (lambda (g$0$15560 g$0$15561) (g$0$11411 (cons g$0$15560 g$0$15561) g$0$15547 g$0$15548)) g$0$15554) ((lambda (g$0$15564) ((lambda (g$0$15566) (if (if g$0$15566 (begin (quote #f) (apply (lambda (g$0$15568 g$0$15569 g$0$15570 g$0$15571) (quote #t)) g$0$15566)) (quote #f)) (apply (lambda (g$0$15576 g$0$15577 g$0$15578 g$0$15579) ((lambda (g$0$15584 g$0$15585 g$0$15586 g$0$15587) (g$0$10927 (quote #f) (append g$0$15584 g$0$15585) (append (g$0$11391 g$0$15576 g$0$15547 g$0$15548) (g$0$11391 g$0$15577 g$0$15547 g$0$15548)) (g$0$10927 (quote #f) (list g$0$15587) (list (g$0$10929 (quote #f) (quote ()) (g$0$10923 (quote #f) (map (lambda (g$0$15592 g$0$15593 g$0$15594) (g$0$10927 (quote #f) (list g$0$15592) (list (list g$0$15593)) (g$0$10923 (quote #f) (list (list g$0$15593 g$0$15594) (list (quote set!) g$0$15594 g$0$15592))))) g$0$15586 g$0$15584 g$0$15585)))) (list (quote (primitive dynamic-wind)) g$0$15587 (g$0$10929 (quote #f) (quote ()) (g$0$11411 (cons g$0$15578 g$0$15579) g$0$15547 g$0$15548)) g$0$15587)))) (map (lambda (g$0$15598) (g$0$10950 (quote lhs))) g$0$15576) (map (lambda (g$0$15600) (g$0$10950 (quote rhs))) g$0$15576) (map (lambda (g$0$15602) (g$0$10950 (quote t))) g$0$15576) (g$0$10950 (quote swap)))) g$0$15566) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15564 (quote ()))))) ((lambda (g$0$15604) (if (g$0$11026 g$0$15604) (begin (quote #f) ((lambda (g$0$15606) (if g$0$15606 (begin (quote #f) ((lambda (g$0$15608) (if g$0$15608 (begin (quote #f) (append g$0$15606 g$0$15608)) (quote #f))) ((lambda (g$0$15610) (if (g$0$11026 g$0$15610) (begin (quote #f) ((lambda (g$0$15612) (if g$0$15612 (begin (quote #f) ((lambda (g$0$15614) (if g$0$15614 (begin (quote #f) (append g$0$15612 g$0$15614)) (quote #f))) ((lambda (g$0$15616) (if (g$0$11026 g$0$15616) (begin (quote #f) ((lambda (g$0$15618) (if g$0$15618 (begin (quote #f) ((lambda (g$0$15620) (if g$0$15620 (begin (quote #f) (append g$0$15618 g$0$15620)) (quote #f))) ((letrec ((g$0$15622 (lambda (g$0$15624) (if (g$0$11026 g$0$15624) ((lambda (g$0$15626) (if g$0$15626 (begin (quote #f) ((lambda (g$0$15628) (if g$0$15628 (begin (quote #f) (map cons g$0$15626 g$0$15628)) (quote #f))) (g$0$15622 (g$0$11038 g$0$15624)))) (quote #f))) ((lambda (g$0$15630) (list g$0$15630)) (g$0$11034 g$0$15624))) (if (g$0$11030 g$0$15624) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15622) (g$0$11038 g$0$15616)))) (quote #f))) ((lambda (g$0$15632) (list g$0$15632)) (g$0$11034 g$0$15616)))) (quote #f))) (g$0$11038 g$0$15610)))) (quote #f))) ((letrec ((g$0$15634 (lambda (g$0$15636) (if (g$0$11026 g$0$15636) ((lambda (g$0$15638) (if g$0$15638 (begin (quote #f) ((lambda (g$0$15640) (if g$0$15640 (begin (quote #f) (map cons g$0$15638 g$0$15640)) (quote #f))) (g$0$15634 (g$0$11038 g$0$15636)))) (quote #f))) ((lambda (g$0$15642) (if (g$0$11026 g$0$15642) (begin (quote #f) ((lambda (g$0$15644) (if g$0$15644 (begin (quote #f) ((lambda (g$0$15646) (if g$0$15646 (begin (quote #f) (append g$0$15644 g$0$15646)) (quote #f))) ((lambda (g$0$15648) (if (g$0$11026 g$0$15648) (begin (quote #f) ((lambda (g$0$15650) (if g$0$15650 (begin (quote #f) ((lambda (g$0$15652) (if g$0$15652 (begin (quote #f) (append g$0$15650 g$0$15652)) (quote #f))) ((lambda (g$0$15654) (if (equal? (g$0$11060 g$0$15654) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15648)))) (quote #f))) ((lambda (g$0$15656) (list g$0$15656)) (g$0$11034 g$0$15648)))) (quote #f))) (g$0$11038 g$0$15642)))) (quote #f))) ((lambda (g$0$15658) (list g$0$15658)) (g$0$11034 g$0$15642)))) (quote #f))) (g$0$11034 g$0$15636))) (if (g$0$11030 g$0$15636) (list (begin (quote olhs*) (quote ())) (begin (quote orhs*) (quote ()))) (quote #f)))))) g$0$15634) (g$0$11034 g$0$15610)))) (quote #f))) (g$0$11038 g$0$15604)))) (quote #f))) ((lambda (g$0$15660) (quote ())) (g$0$11034 g$0$15604)))) (quote #f))) g$0$15564))) g$0$15552))) ((lambda (g$0$15662) (if (g$0$11026 g$0$15662) (begin (quote #f) ((lambda (g$0$15664) (if g$0$15664 (begin (quote #f) ((lambda (g$0$15666) (if g$0$15666 (begin (quote #f) (append g$0$15664 g$0$15666)) (quote #f))) ((lambda (g$0$15668) (if (g$0$11026 g$0$15668) (begin (quote #f) ((lambda (g$0$15670) (if g$0$15670 (begin (quote #f) ((lambda (g$0$15672) (if g$0$15672 (begin (quote #f) (append g$0$15670 g$0$15672)) (quote #f))) ((lambda (g$0$15674) (if (g$0$11026 g$0$15674) (begin (quote #f) ((lambda (g$0$15676) (if g$0$15676 (begin (quote #f) ((lambda (g$0$15678) (if g$0$15678 (begin (quote #f) (append g$0$15676 g$0$15678)) (quote #f))) ((letrec ((g$0$15680 (lambda (g$0$15682) (if (g$0$11026 g$0$15682) ((lambda (g$0$15684) (if g$0$15684 (begin (quote #f) ((lambda (g$0$15686) (if g$0$15686 (begin (quote #f) (map cons g$0$15684 g$0$15686)) (quote #f))) (g$0$15680 (g$0$11038 g$0$15682)))) (quote #f))) ((lambda (g$0$15688) (list g$0$15688)) (g$0$11034 g$0$15682))) (if (g$0$11030 g$0$15682) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$15680) (g$0$11038 g$0$15674)))) (quote #f))) ((lambda (g$0$15690) (list g$0$15690)) (g$0$11034 g$0$15674)))) (quote #f))) (g$0$11038 g$0$15668)))) (quote #f))) ((lambda (g$0$15692) (if (equal? (g$0$11060 g$0$15692) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11034 g$0$15668)))) (quote #f))) (g$0$11038 g$0$15662)))) (quote #f))) ((lambda (g$0$15694) (quote ())) (g$0$11034 g$0$15662)))) (quote #f))) g$0$15552))) g$0$15546))) (set! g$0$11367 (lambda (g$0$15696 g$0$15697 g$0$15698) ((lambda (g$0$15702) ((lambda (g$0$15704) (if (if g$0$15704 (begin (quote #f) (apply (lambda (g$0$15706 g$0$15707) (quote #t)) g$0$15704)) (quote #f)) (apply (lambda (g$0$15710 g$0$15711) (cons (quote foreign-call) (cons (g$0$11395 g$0$15710 g$0$15697 g$0$15698) (g$0$11391 g$0$15711 g$0$15697 g$0$15698)))) g$0$15704) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15702 (quote ()))))) ((lambda (g$0$15714) (if (g$0$11026 g$0$15714) (begin (quote #f) ((lambda (g$0$15716) (if g$0$15716 (begin (quote #f) ((lambda (g$0$15718) (if g$0$15718 (begin (quote #f) (append g$0$15716 g$0$15718)) (quote #f))) ((lambda (g$0$15720) (if (g$0$11026 g$0$15720) (begin (quote #f) ((lambda (g$0$15722) (if g$0$15722 (begin (quote #f) ((lambda (g$0$15724) (if g$0$15724 (begin (quote #f) (append g$0$15722 g$0$15724)) (quote #f))) ((letrec ((g$0$15726 (lambda (g$0$15728) (if (g$0$11026 g$0$15728) ((lambda (g$0$15730) (if g$0$15730 (begin (quote #f) ((lambda (g$0$15732) (if g$0$15732 (begin (quote #f) (map cons g$0$15730 g$0$15732)) (quote #f))) (g$0$15726 (g$0$11038 g$0$15728)))) (quote #f))) ((lambda (g$0$15734) (list g$0$15734)) (g$0$11034 g$0$15728))) (if (g$0$11030 g$0$15728) (list (begin (quote arg*) (quote ()))) (quote #f)))))) g$0$15726) (g$0$11038 g$0$15720)))) (quote #f))) ((lambda (g$0$15736) (list g$0$15736)) (g$0$11034 g$0$15720)))) (quote #f))) (g$0$11038 g$0$15714)))) (quote #f))) ((lambda (g$0$15738) (quote ())) (g$0$11034 g$0$15714)))) (quote #f))) g$0$15702))) g$0$15696))) (set! g$0$11369 (lambda (g$0$15740 g$0$15741) ((lambda (g$0$15744 g$0$15746) (begin (set! g$0$15744 (lambda (g$0$15934 g$0$15935 g$0$15936) (if (null? g$0$15934) (values (quote ()) g$0$15936) (call-with-values (lambda () (g$0$15744 (cdr g$0$15934) g$0$15935 g$0$15936)) (lambda (g$0$15940 g$0$15941) (call-with-values (lambda () (g$0$15746 (car g$0$15934) g$0$15935 g$0$15941)) (lambda (g$0$15944 g$0$15945) (values (cons g$0$15944 g$0$15940) g$0$15945)))))))) (set! g$0$15746 (lambda (g$0$15748 g$0$15749 g$0$15750) ((lambda (g$0$15754) ((lambda (g$0$15756) (if (if g$0$15756 (begin (quote #f) (apply (lambda (g$0$15758) (g$0$11040 g$0$15758)) g$0$15756)) (quote #f)) (apply (lambda (g$0$15760) (if (g$0$11054 g$0$15748 g$0$15741) (values (vector (quote free-id) g$0$15748) g$0$15750) (if (g$0$11048 g$0$15748 (g$0$11293 (quote _))) (values (quote _) g$0$15750) (values (quote any) (cons (cons g$0$15748 g$0$15749) g$0$15750))))) g$0$15756) ((lambda (g$0$15762) ((lambda (g$0$15764) (if (if g$0$15764 (begin (quote #f) (apply (lambda (g$0$15766 g$0$15767) (g$0$11373 g$0$15767)) g$0$15764)) (quote #f)) (apply (lambda (g$0$15770 g$0$15771) (call-with-values (lambda () (g$0$15746 g$0$15770 (+ g$0$15749 (quote 1)) g$0$15750)) (lambda (g$0$15774 g$0$15775) (values (if (eq? g$0$15774 (quote any)) (quote each-any) (vector (quote each) g$0$15774)) g$0$15775)))) g$0$15764) ((lambda (g$0$15778) ((lambda (g$0$15780) (if (if g$0$15780 (begin (quote #f) (apply (lambda (g$0$15782 g$0$15783 g$0$15784 g$0$15785) (g$0$11373 g$0$15783)) g$0$15780)) (quote #f)) (apply (lambda (g$0$15790 g$0$15791 g$0$15792 g$0$15793) (call-with-values (lambda () (g$0$15746 g$0$15793 g$0$15749 g$0$15750)) (lambda (g$0$15798 g$0$15799) (call-with-values (lambda () (g$0$15744 g$0$15792 g$0$15749 g$0$15799)) (lambda (g$0$15802 g$0$15803) (call-with-values (lambda () (g$0$15746 g$0$15790 (+ g$0$15749 (quote 1)) g$0$15803)) (lambda (g$0$15806 g$0$15807) (values (vector (quote each+) g$0$15806 (reverse g$0$15802) g$0$15798) g$0$15807)))))))) g$0$15780) ((lambda (g$0$15810) ((lambda (g$0$15812) (if (if g$0$15812 (begin (quote #f) (apply (lambda (g$0$15814 g$0$15815) (quote #t)) g$0$15812)) (quote #f)) (apply (lambda (g$0$15818 g$0$15819) (call-with-values (lambda () (g$0$15746 g$0$15819 g$0$15749 g$0$15750)) (lambda (g$0$15822 g$0$15823) (call-with-values (lambda () (g$0$15746 g$0$15818 g$0$15749 g$0$15823)) (lambda (g$0$15826 g$0$15827) (values (cons g$0$15826 g$0$15822) g$0$15827)))))) g$0$15812) ((lambda (g$0$15830) ((lambda (g$0$15832) (if (if g$0$15832 (begin (quote #f) (apply (lambda () (quote #t)) g$0$15832)) (quote #f)) (apply (lambda () (values (quote ()) g$0$15750)) g$0$15832) ((lambda (g$0$15834) ((lambda (g$0$15836) (if (if g$0$15836 (begin (quote #f) (apply (lambda (g$0$15838) (not (g$0$10992 g$0$15838))) g$0$15836)) (quote #f)) (apply (lambda (g$0$15840) (call-with-values (lambda () (g$0$15746 g$0$15840 g$0$15749 g$0$15750)) (lambda (g$0$15842 g$0$15843) (values (vector (quote vector) g$0$15842) g$0$15843)))) g$0$15836) ((lambda (g$0$15846) ((lambda (g$0$15848) (if (if g$0$15848 (begin (quote #f) (apply (lambda (g$0$15850) (quote #t)) g$0$15848)) (quote #f)) (apply (lambda (g$0$15852) (values (vector (quote atom) (g$0$11060 g$0$15852)) g$0$15750)) g$0$15848) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$15846 (quote ()))))) ((lambda (g$0$15854) (list g$0$15854)) g$0$15846))) g$0$15834))) ((lambda (g$0$15856) (if (g$0$11028 g$0$15856) (begin (quote #f) ((letrec ((g$0$15858 (lambda (g$0$15860) (if (g$0$11026 g$0$15860) ((lambda (g$0$15862) (if g$0$15862 (begin (quote #f) ((lambda (g$0$15864) (if g$0$15864 (begin (quote #f) (map cons g$0$15862 g$0$15864)) (quote #f))) (g$0$15858 (g$0$11038 g$0$15860)))) (quote #f))) ((lambda (g$0$15866) (list g$0$15866)) (g$0$11034 g$0$15860))) (if (g$0$11030 g$0$15860) (list (begin (quote p) (quote ()))) (quote #f)))))) g$0$15858) (g$0$11024 g$0$15856))) (quote #f))) g$0$15834))) g$0$15830))) ((lambda (g$0$15868) (if (equal? (g$0$11060 g$0$15868) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$15830))) g$0$15810))) ((lambda (g$0$15870) (if (g$0$11026 g$0$15870) (begin (quote #f) ((lambda (g$0$15872) (if g$0$15872 (begin (quote #f) ((lambda (g$0$15874) (if g$0$15874 (begin (quote #f) (append g$0$15872 g$0$15874)) (quote #f))) ((lambda (g$0$15876) (list g$0$15876)) (g$0$11038 g$0$15870)))) (quote #f))) ((lambda (g$0$15878) (list g$0$15878)) (g$0$11034 g$0$15870)))) (quote #f))) g$0$15810))) g$0$15778))) ((lambda (g$0$15880) (if (g$0$11026 g$0$15880) (begin (quote #f) ((lambda (g$0$15882) (if g$0$15882 (begin (quote #f) ((lambda (g$0$15884) (if g$0$15884 (begin (quote #f) (append g$0$15882 g$0$15884)) (quote #f))) ((lambda (g$0$15886) (if (g$0$11026 g$0$15886) (begin (quote #f) ((lambda (g$0$15888) (if g$0$15888 (begin (quote #f) ((lambda (g$0$15890) (if g$0$15890 (begin (quote #f) (append g$0$15888 g$0$15890)) (quote #f))) ((letrec ((g$0$15892 (lambda (g$0$15898) (if (g$0$11026 g$0$15898) ((lambda (g$0$15900) (if g$0$15900 (begin (quote #f) ((lambda (g$0$15902) (if g$0$15902 (begin (quote #f) (cons (map cons g$0$15900 (car g$0$15902)) (cdr g$0$15902))) (quote #f))) (g$0$15892 (g$0$11038 g$0$15898)))) (quote #f))) ((lambda (g$0$15904) (list g$0$15904)) (g$0$11034 g$0$15898))) ((lambda (g$0$15906) (if g$0$15906 (begin (quote #f) (cons (list (begin (quote ys) (quote ()))) g$0$15906)) (quote #f))) ((lambda (g$0$15908) (list g$0$15908)) g$0$15898)))))) (lambda (g$0$15894) ((lambda (g$0$15896) (if g$0$15896 (begin (quote #f) (append (car g$0$15896) (cdr g$0$15896))) (quote #f))) (g$0$15892 g$0$15894)))) (g$0$11038 g$0$15886)))) (quote #f))) ((lambda (g$0$15910) (list g$0$15910)) (g$0$11034 g$0$15886)))) (quote #f))) (g$0$11038 g$0$15880)))) (quote #f))) ((lambda (g$0$15912) (list g$0$15912)) (g$0$11034 g$0$15880)))) (quote #f))) g$0$15778))) g$0$15762))) ((lambda (g$0$15914) (if (g$0$11026 g$0$15914) (begin (quote #f) ((lambda (g$0$15916) (if g$0$15916 (begin (quote #f) ((lambda (g$0$15918) (if g$0$15918 (begin (quote #f) (append g$0$15916 g$0$15918)) (quote #f))) ((lambda (g$0$15920) (if (g$0$11026 g$0$15920) (begin (quote #f) ((lambda (g$0$15922) (if g$0$15922 (begin (quote #f) ((lambda (g$0$15924) (if g$0$15924 (begin (quote #f) (append g$0$15922 g$0$15924)) (quote #f))) ((lambda (g$0$15926) (if (equal? (g$0$11060 g$0$15926) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$15920)))) (quote #f))) ((lambda (g$0$15928) (list g$0$15928)) (g$0$11034 g$0$15920)))) (quote #f))) (g$0$11038 g$0$15914)))) (quote #f))) ((lambda (g$0$15930) (list g$0$15930)) (g$0$11034 g$0$15914)))) (quote #f))) g$0$15762))) g$0$15754))) ((lambda (g$0$15932) (list g$0$15932)) g$0$15754))) g$0$15748))) (g$0$15746 g$0$15740 (quote 0) (quote ())))) (quote #f) (quote #f)))) (set! g$0$11371 (lambda (g$0$15948 g$0$15949) ((lambda (g$0$15952 g$0$15954 g$0$15956 g$0$15958 g$0$15960 g$0$15962 g$0$15964 g$0$15966) (begin (set! g$0$15952 (lambda (g$0$16074 g$0$16075 g$0$16076) (if (if (null? g$0$16075) (begin (quote #f) (null? g$0$16076)) (quote #f)) g$0$16074 (g$0$11016 g$0$16074 g$0$16075 g$0$16076)))) (set! g$0$15954 (lambda (g$0$16058 g$0$16059 g$0$16060 g$0$16061) (if (pair? g$0$16058) ((lambda (g$0$16066) (if g$0$16066 (begin (quote #f) ((lambda (g$0$16068) (if g$0$16068 (begin (quote #f) (cons g$0$16066 g$0$16068)) (quote #f))) (g$0$15954 (cdr g$0$16058) g$0$16059 g$0$16060 g$0$16061))) (quote #f))) (g$0$15966 (car g$0$16058) g$0$16059 g$0$16060 g$0$16061 (quote ()))) (if (null? g$0$16058) (quote ()) (if (g$0$10992 g$0$16058) (call-with-values (lambda () (g$0$11014 g$0$16060 g$0$16061 g$0$16058)) (lambda (g$0$16070 g$0$16071) (g$0$15954 (g$0$10994 g$0$16058) g$0$16059 g$0$16070 g$0$16071))) (quote #f)))))) (set! g$0$15956 (lambda (g$0$16024 g$0$16025 g$0$16026 g$0$16027 g$0$16028 g$0$16029 g$0$16030) (letrec ((g$0$16038 (lambda (g$0$16040 g$0$16041 g$0$16042) (if (pair? g$0$16040) (call-with-values (lambda () (g$0$16038 (cdr g$0$16040) g$0$16041 g$0$16042)) (lambda (g$0$16046 g$0$16047 g$0$16048) (if g$0$16048 (if (null? g$0$16047) ((lambda (g$0$16052) (if g$0$16052 (values (cons g$0$16052 g$0$16046) g$0$16047 g$0$16048) (values (quote #f) (quote #f) (quote #f)))) (g$0$15966 (car g$0$16040) g$0$16025 g$0$16041 g$0$16042 (quote ()))) (values (quote ()) (cdr g$0$16047) (g$0$15966 (car g$0$16040) (car g$0$16047) g$0$16041 g$0$16042 g$0$16048))) (values (quote #f) (quote #f) (quote #f))))) (if (g$0$10992 g$0$16040) (call-with-values (lambda () (g$0$11014 g$0$16041 g$0$16042 g$0$16040)) (lambda (g$0$16054 g$0$16055) (g$0$16038 (g$0$10994 g$0$16040) g$0$16054 g$0$16055))) (values (quote ()) g$0$16026 (g$0$15966 g$0$16040 g$0$16027 g$0$16041 g$0$16042 g$0$16030))))))) (g$0$16038 g$0$16024 g$0$16028 g$0$16029)))) (set! g$0$15958 (lambda (g$0$16012 g$0$16013 g$0$16014) (if (pair? g$0$16012) ((lambda (g$0$16018) (if g$0$16018 (begin (quote #f) (cons (g$0$15952 (car g$0$16012) g$0$16013 g$0$16014) g$0$16018)) (quote #f))) (g$0$15958 (cdr g$0$16012) g$0$16013 g$0$16014)) (if (null? g$0$16012) (quote ()) (if (g$0$10992 g$0$16012) (call-with-values (lambda () (g$0$11014 g$0$16013 g$0$16014 g$0$16012)) (lambda (g$0$16020 g$0$16021) (g$0$15958 (g$0$10994 g$0$16012) g$0$16020 g$0$16021))) (quote #f)))))) (set! g$0$15960 (lambda (g$0$16007 g$0$16008) (if (null? g$0$16007) g$0$16008 (if (eq? g$0$16007 (quote _)) g$0$16008 (if (eq? g$0$16007 (quote any)) (cons (quote ()) g$0$16008) (if (pair? g$0$16007) (g$0$15960 (car g$0$16007) (g$0$15960 (cdr g$0$16007) g$0$16008)) (if (eq? g$0$16007 (quote each-any)) (cons (quote ()) g$0$16008) ((lambda (g$0$16011) (if (memv g$0$16011 (quote (each))) (g$0$15960 (vector-ref g$0$16007 (quote 1)) g$0$16008) (if (memv g$0$16011 (quote (each+))) (g$0$15960 (vector-ref g$0$16007 (quote 1)) (g$0$15960 (reverse (vector-ref g$0$16007 (quote 2))) (g$0$15960 (vector-ref g$0$16007 (quote 3)) g$0$16008))) (if (memv g$0$16011 (quote (free-id atom))) g$0$16008 (if (memv g$0$16011 (quote (vector))) (g$0$15960 (vector-ref g$0$16007 (quote 1)) g$0$16008) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$16007)))))) (vector-ref g$0$16007 (quote 0)))))))))) (set! g$0$15962 (lambda (g$0$16003 g$0$16004) (if (null? (car g$0$16003)) g$0$16004 (cons (map car g$0$16003) (g$0$15962 (map cdr g$0$16003) g$0$16004))))) (set! g$0$15964 (lambda (g$0$15982 g$0$15983 g$0$15984 g$0$15985 g$0$15986) (if (null? g$0$15983) (if (null? g$0$15982) (begin (quote #f) g$0$15986) (quote #f)) (if (pair? g$0$15983) (if (pair? g$0$15982) (begin (quote #f) (g$0$15966 (car g$0$15982) (car g$0$15983) g$0$15984 g$0$15985 (g$0$15966 (cdr g$0$15982) (cdr g$0$15983) g$0$15984 g$0$15985 g$0$15986))) (quote #f)) (if (eq? g$0$15983 (quote each-any)) ((lambda (g$0$15992) (if g$0$15992 (begin (quote #f) (cons g$0$15992 g$0$15986)) (quote #f))) (g$0$15958 g$0$15982 g$0$15984 g$0$15985)) ((lambda (g$0$15994) (if (memv g$0$15994 (quote (each))) (if (null? g$0$15982) (g$0$15960 (vector-ref g$0$15983 (quote 1)) g$0$15986) ((lambda (g$0$16001) (if g$0$16001 (begin (quote #f) (g$0$15962 g$0$16001 g$0$15986)) (quote #f))) (g$0$15954 g$0$15982 (vector-ref g$0$15983 (quote 1)) g$0$15984 g$0$15985))) (if (memv g$0$15994 (quote (free-id))) (if (symbol? g$0$15982) (if (g$0$11048 (g$0$15952 g$0$15982 g$0$15984 g$0$15985) (vector-ref g$0$15983 (quote 1))) (begin (quote #f) g$0$15986) (quote #f)) (quote #f)) (if (memv g$0$15994 (quote (each+))) (call-with-values (lambda () (g$0$15956 g$0$15982 (vector-ref g$0$15983 (quote 1)) (vector-ref g$0$15983 (quote 2)) (vector-ref g$0$15983 (quote 3)) g$0$15984 g$0$15985 g$0$15986)) (lambda (g$0$15995 g$0$15996 g$0$15997) (if g$0$15997 (if (null? g$0$15996) (begin (quote #f) (if (null? g$0$15995) (g$0$15960 (vector-ref g$0$15983 (quote 1)) g$0$15997) (g$0$15962 g$0$15995 g$0$15997))) (quote #f)) (quote #f)))) (if (memv g$0$15994 (quote (atom))) (if (equal? (vector-ref g$0$15983 (quote 1)) (g$0$11058 g$0$15982 g$0$15984)) (begin (quote #f) g$0$15986) (quote #f)) (if (memv g$0$15994 (quote (vector))) (if (vector? g$0$15982) (begin (quote #f) (g$0$15966 (vector->list g$0$15982) (vector-ref g$0$15983 (quote 1)) g$0$15984 g$0$15985 g$0$15986)) (quote #f)) (error (quote syntax-dispatch) (quote "invalid pattern") g$0$15983))))))) (vector-ref g$0$15983 (quote 0)))))))) (set! g$0$15966 (lambda (g$0$15968 g$0$15969 g$0$15970 g$0$15971 g$0$15972) (if (not g$0$15972) (quote #f) (if (eq? g$0$15969 (quote _)) g$0$15972 (if (eq? g$0$15969 (quote any)) (cons (g$0$15952 g$0$15968 g$0$15970 g$0$15971) g$0$15972) (if (g$0$10992 g$0$15968) (call-with-values (lambda () (g$0$11014 g$0$15970 g$0$15971 g$0$15968)) (lambda (g$0$15978 g$0$15979) (g$0$15966 (g$0$10994 g$0$15968) g$0$15969 g$0$15978 g$0$15979 g$0$15972))) (g$0$15964 g$0$15968 g$0$15969 g$0$15970 g$0$15971 g$0$15972))))))) (g$0$15966 g$0$15948 g$0$15949 (quote ()) (quote ()) (quote ())))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$11373 (lambda (g$0$16080) (if (g$0$11040 g$0$16080) (begin (quote #f) (g$0$11048 g$0$16080 (g$0$11293 (quote |...|)))) (quote #f)))) (set! g$0$11375 ((lambda () ((lambda (g$0$16082 g$0$16084 g$0$16086 g$0$16088) (begin (set! g$0$16082 (lambda (g$0$16222 g$0$16223 g$0$16224 g$0$16225 g$0$16226) ((lambda (g$0$16232 g$0$16233) ((lambda (g$0$16236 g$0$16237) ((lambda (g$0$16240) (list (quote (primitive apply)) (g$0$10929 (quote #f) g$0$16237 g$0$16240) g$0$16224)) (g$0$11395 (g$0$11020 (g$0$10987 g$0$16232 g$0$16236) g$0$16223) (append (map (lambda (g$0$16242 g$0$16243 g$0$16244) (cons g$0$16242 (g$0$11066 (quote syntax) (cons g$0$16243 g$0$16244)))) g$0$16236 g$0$16237 (map cdr g$0$16222)) g$0$16225) g$0$16226))) (map g$0$10954 g$0$16232) (map g$0$10950 g$0$16232))) (map car g$0$16222) (map cdr g$0$16222)))) (set! g$0$16084 (lambda (g$0$16210 g$0$16211 g$0$16212) (letrec ((g$0$16216 (lambda (g$0$16218 g$0$16219) (if (null? g$0$16218) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$16211)) (if (g$0$11040 (car g$0$16218)) (if (g$0$11054 (car g$0$16218) g$0$16219) (g$0$11500 (car g$0$16218) (quote "duplicate ") g$0$16212) (g$0$16216 (cdr g$0$16218) (cons (car g$0$16218) g$0$16219))) (g$0$11500 (car g$0$16218) (quote "invalid ") g$0$16212)))))) (g$0$16216 g$0$16210 (quote ()))))) (set! g$0$16086 (lambda (g$0$16178 g$0$16179 g$0$16180 g$0$16181 g$0$16182 g$0$16183 g$0$16184 g$0$16185) (call-with-values (lambda () (g$0$11369 g$0$16183 g$0$16179)) (lambda (g$0$16194 g$0$16195) (if (not (g$0$11052 (map car g$0$16195))) (g$0$16084 (map car g$0$16195) g$0$16183 (quote "pattern variable")) (if (not (for-all (lambda (g$0$16198) (not (g$0$11373 (car g$0$16198)))) g$0$16195)) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax-case pattern") (g$0$11058 g$0$16183 (quote ()))) ((lambda (g$0$16200) ((lambda (g$0$16202) ((lambda (g$0$16204) ((lambda (g$0$16206) (list (g$0$10929 (quote #f) (list g$0$16200) (list (quote if) g$0$16202 g$0$16204 g$0$16206)) (list (quote (primitive syntax-dispatch)) g$0$16178 (list (quote quote) g$0$16194)))) (g$0$16088 g$0$16178 g$0$16179 g$0$16180 g$0$16181 g$0$16182))) (g$0$16082 g$0$16195 g$0$16185 g$0$16200 g$0$16181 g$0$16182))) (if (eq? g$0$16184 (quote #t)) g$0$16200 ((lambda (g$0$16208) (list (quote if) g$0$16200 g$0$16208 (list (quote quote) (quote #f)))) (g$0$16082 g$0$16195 g$0$16184 g$0$16200 g$0$16181 g$0$16182))))) (g$0$10950 (quote tmp))))))))) (set! g$0$16088 (lambda (g$0$16090 g$0$16091 g$0$16092 g$0$16093 g$0$16094) (if (null? g$0$16092) (list (quote (primitive syntax-error)) g$0$16090) ((lambda (g$0$16100) ((lambda (g$0$16102) (if (if g$0$16102 (begin (quote #f) (apply (lambda (g$0$16104 g$0$16105) (quote #t)) g$0$16102)) (quote #f)) (apply (lambda (g$0$16108 g$0$16109) (if (if (g$0$11040 g$0$16108) (if (not (g$0$11054 g$0$16108 g$0$16091)) (begin (quote #f) (not (g$0$11373 g$0$16108))) (quote #f)) (quote #f)) (if (g$0$11048 g$0$16108 (g$0$11293 (quote _))) (g$0$11395 g$0$16109 g$0$16093 g$0$16094) ((lambda (g$0$16112 g$0$16113) ((lambda (g$0$16116) (list (g$0$10929 (quote #f) (list g$0$16113) g$0$16116) g$0$16090)) (g$0$11395 (g$0$11020 (g$0$10987 (list g$0$16108) (list g$0$16112)) g$0$16109) (cons (cons g$0$16112 (g$0$11066 (quote syntax) (cons g$0$16113 (quote 0)))) g$0$16093) g$0$16094))) (g$0$10954 g$0$16108) (g$0$10950 g$0$16108))) (g$0$16086 g$0$16090 g$0$16091 (cdr g$0$16092) g$0$16093 g$0$16094 g$0$16108 (quote #t) g$0$16109))) g$0$16102) ((lambda (g$0$16118) ((lambda (g$0$16120) (if (if g$0$16120 (begin (quote #f) (apply (lambda (g$0$16122 g$0$16123 g$0$16124) (quote #t)) g$0$16120)) (quote #f)) (apply (lambda (g$0$16128 g$0$16129 g$0$16130) (g$0$16086 g$0$16090 g$0$16091 (cdr g$0$16092) g$0$16093 g$0$16094 g$0$16128 g$0$16129 g$0$16130)) g$0$16120) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16118 (quote ()))))) ((lambda (g$0$16134) (if (g$0$11026 g$0$16134) (begin (quote #f) ((lambda (g$0$16136) (if g$0$16136 (begin (quote #f) ((lambda (g$0$16138) (if g$0$16138 (begin (quote #f) (append g$0$16136 g$0$16138)) (quote #f))) ((lambda (g$0$16140) (if (g$0$11026 g$0$16140) (begin (quote #f) ((lambda (g$0$16142) (if g$0$16142 (begin (quote #f) ((lambda (g$0$16144) (if g$0$16144 (begin (quote #f) (append g$0$16142 g$0$16144)) (quote #f))) ((lambda (g$0$16146) (if (g$0$11026 g$0$16146) (begin (quote #f) ((lambda (g$0$16148) (if g$0$16148 (begin (quote #f) ((lambda (g$0$16150) (if g$0$16150 (begin (quote #f) (append g$0$16148 g$0$16150)) (quote #f))) ((lambda (g$0$16152) (if (equal? (g$0$11060 g$0$16152) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$16146)))) (quote #f))) ((lambda (g$0$16154) (list g$0$16154)) (g$0$11034 g$0$16146)))) (quote #f))) (g$0$11038 g$0$16140)))) (quote #f))) ((lambda (g$0$16156) (list g$0$16156)) (g$0$11034 g$0$16140)))) (quote #f))) (g$0$11038 g$0$16134)))) (quote #f))) ((lambda (g$0$16158) (list g$0$16158)) (g$0$11034 g$0$16134)))) (quote #f))) g$0$16118))) g$0$16100))) ((lambda (g$0$16160) (if (g$0$11026 g$0$16160) (begin (quote #f) ((lambda (g$0$16162) (if g$0$16162 (begin (quote #f) ((lambda (g$0$16164) (if g$0$16164 (begin (quote #f) (append g$0$16162 g$0$16164)) (quote #f))) ((lambda (g$0$16166) (if (g$0$11026 g$0$16166) (begin (quote #f) ((lambda (g$0$16168) (if g$0$16168 (begin (quote #f) ((lambda (g$0$16170) (if g$0$16170 (begin (quote #f) (append g$0$16168 g$0$16170)) (quote #f))) ((lambda (g$0$16172) (if (equal? (g$0$11060 g$0$16172) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$16166)))) (quote #f))) ((lambda (g$0$16174) (list g$0$16174)) (g$0$11034 g$0$16166)))) (quote #f))) (g$0$11038 g$0$16160)))) (quote #f))) ((lambda (g$0$16176) (list g$0$16176)) (g$0$11034 g$0$16160)))) (quote #f))) g$0$16100))) (car g$0$16092))))) (lambda (g$0$16248 g$0$16249 g$0$16250) ((lambda (g$0$16254) ((lambda (g$0$16256) (if (if g$0$16256 (begin (quote #f) (apply (lambda (g$0$16258 g$0$16259 g$0$16260) (quote #t)) g$0$16256)) (quote #f)) (apply (lambda (g$0$16264 g$0$16265 g$0$16266) (begin (if (for-all (lambda (g$0$16270) (if (g$0$11040 g$0$16270) (begin (quote #f) (not (g$0$11373 g$0$16270))) (quote #f))) g$0$16265) (void) (error (quote expander) (quote "~a ~s") (quote "invalid literals") (g$0$11058 g$0$16248 (quote ())))) ((lambda (g$0$16272) ((lambda (g$0$16274) (list (g$0$10929 (quote #f) (list g$0$16272) g$0$16274) (g$0$11395 g$0$16264 g$0$16249 g$0$16250))) (g$0$16088 g$0$16272 g$0$16265 g$0$16266 g$0$16249 g$0$16250))) (g$0$10950 (quote tmp))))) g$0$16256) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16254 (quote ()))))) ((lambda (g$0$16276) (if (g$0$11026 g$0$16276) (begin (quote #f) ((lambda (g$0$16278) (if g$0$16278 (begin (quote #f) ((lambda (g$0$16280) (if g$0$16280 (begin (quote #f) (append g$0$16278 g$0$16280)) (quote #f))) ((lambda (g$0$16282) (if (g$0$11026 g$0$16282) (begin (quote #f) ((lambda (g$0$16284) (if g$0$16284 (begin (quote #f) ((lambda (g$0$16286) (if g$0$16286 (begin (quote #f) (append g$0$16284 g$0$16286)) (quote #f))) ((lambda (g$0$16288) (if (g$0$11026 g$0$16288) (begin (quote #f) ((lambda (g$0$16290) (if g$0$16290 (begin (quote #f) ((lambda (g$0$16292) (if g$0$16292 (begin (quote #f) (append g$0$16290 g$0$16292)) (quote #f))) ((letrec ((g$0$16294 (lambda (g$0$16296) (if (g$0$11026 g$0$16296) ((lambda (g$0$16298) (if g$0$16298 (begin (quote #f) ((lambda (g$0$16300) (if g$0$16300 (begin (quote #f) (map cons g$0$16298 g$0$16300)) (quote #f))) (g$0$16294 (g$0$11038 g$0$16296)))) (quote #f))) ((lambda (g$0$16302) (list g$0$16302)) (g$0$11034 g$0$16296))) (if (g$0$11030 g$0$16296) (list (begin (quote clauses) (quote ()))) (quote #f)))))) g$0$16294) (g$0$11038 g$0$16288)))) (quote #f))) ((letrec ((g$0$16304 (lambda (g$0$16306) (if (g$0$11026 g$0$16306) ((lambda (g$0$16308) (if g$0$16308 (begin (quote #f) ((lambda (g$0$16310) (if g$0$16310 (begin (quote #f) (map cons g$0$16308 g$0$16310)) (quote #f))) (g$0$16304 (g$0$11038 g$0$16306)))) (quote #f))) ((lambda (g$0$16312) (list g$0$16312)) (g$0$11034 g$0$16306))) (if (g$0$11030 g$0$16306) (list (begin (quote keys) (quote ()))) (quote #f)))))) g$0$16304) (g$0$11034 g$0$16288)))) (quote #f))) (g$0$11038 g$0$16282)))) (quote #f))) ((lambda (g$0$16314) (list g$0$16314)) (g$0$11034 g$0$16282)))) (quote #f))) (g$0$11038 g$0$16276)))) (quote #f))) ((lambda (g$0$16316) (quote ())) (g$0$11034 g$0$16276)))) (quote #f))) g$0$16254))) g$0$16248)))) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$11377 ((lambda () ((lambda (g$0$16318 g$0$16320 g$0$16322 g$0$16324 g$0$16326 g$0$16328 g$0$16330 g$0$16332) (begin (set! g$0$16318 (lambda (g$0$16404 g$0$16405 g$0$16406 g$0$16407 g$0$16408 g$0$16409) ((lambda (g$0$16416) ((lambda (g$0$16418) (if (if g$0$16418 (begin (quote #f) (apply (lambda (g$0$16420) (g$0$16408 g$0$16420)) g$0$16418)) (quote #f)) (apply (lambda (g$0$16422) (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (g$0$11058 g$0$16404 (quote ())))) g$0$16418) ((lambda (g$0$16424) ((lambda (g$0$16426) (if (if g$0$16426 (begin (quote #f) (apply (lambda (g$0$16428) (g$0$11040 g$0$16428)) g$0$16426)) (quote #f)) (apply (lambda (g$0$16430) ((lambda (g$0$16432) ((lambda (g$0$16434) ((lambda () (if (eq? (g$0$11068 g$0$16434) (quote syntax)) (call-with-values (lambda () ((lambda (g$0$16436) (g$0$16320 g$0$16404 (car g$0$16436) (cdr g$0$16436) g$0$16407)) (g$0$11070 g$0$16434))) (lambda (g$0$16438 g$0$16439) (values (list (quote ref) g$0$16438) g$0$16439))) (values (list (quote quote) g$0$16405) g$0$16407))))) (g$0$11064 g$0$16432 g$0$16406))) (g$0$11062 g$0$16405))) g$0$16426) ((lambda (g$0$16442) ((lambda (g$0$16444) (if (if g$0$16444 (begin (quote #f) (apply (lambda (g$0$16446 g$0$16447) (g$0$16408 g$0$16446)) g$0$16444)) (quote #f)) (apply (lambda (g$0$16450 g$0$16451) (if g$0$16409 (error (quote expander) (quote "~a ~s") (quote "misplaced ellipsis in syntax form") (g$0$11058 g$0$16404 (quote ()))) (g$0$16318 g$0$16404 g$0$16451 g$0$16406 g$0$16407 (lambda (g$0$16454) (quote #f)) (quote #f)))) g$0$16444) ((lambda (g$0$16456) ((lambda (g$0$16458) (if (if g$0$16458 (begin (quote #f) (apply (lambda (g$0$16460 g$0$16461 g$0$16462) (g$0$16408 g$0$16461)) g$0$16458)) (quote #f)) (apply (lambda (g$0$16466 g$0$16467 g$0$16468) (letrec ((g$0$16472 (lambda (g$0$16480 g$0$16481) ((lambda (g$0$16484) ((lambda (g$0$16486) (if (if g$0$16486 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16486)) (quote #f)) (apply (lambda () (g$0$16481 g$0$16407)) g$0$16486) ((lambda (g$0$16488) ((lambda (g$0$16490) (if (if g$0$16490 (begin (quote #f) (apply (lambda (g$0$16492 g$0$16493) (g$0$16408 g$0$16492)) g$0$16490)) (quote #f)) (apply (lambda (g$0$16496 g$0$16497) (g$0$16472 g$0$16497 (lambda (g$0$16500) (call-with-values (lambda () (g$0$16481 (cons (quote ()) g$0$16500))) (lambda (g$0$16502 g$0$16503) (if (null? (car g$0$16503)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (g$0$11058 g$0$16404 (quote ()))) (values (g$0$16324 g$0$16502 (car g$0$16503)) (cdr g$0$16503)))))))) g$0$16490) ((lambda (g$0$16506) ((lambda (g$0$16508) (if (if g$0$16508 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16508)) (quote #f)) (apply (lambda () (call-with-values (lambda () (g$0$16318 g$0$16404 g$0$16480 g$0$16406 g$0$16407 g$0$16408 g$0$16409)) (lambda (g$0$16510 g$0$16511) (call-with-values (lambda () (g$0$16481 g$0$16511)) (lambda (g$0$16514 g$0$16515) (values (g$0$16322 g$0$16514 g$0$16510) g$0$16515)))))) g$0$16508) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16506 (quote ()))))) ((lambda (g$0$16518) (quote ())) g$0$16506))) g$0$16488))) ((lambda (g$0$16520) (if (g$0$11026 g$0$16520) (begin (quote #f) ((lambda (g$0$16522) (if g$0$16522 (begin (quote #f) ((lambda (g$0$16524) (if g$0$16524 (begin (quote #f) (append g$0$16522 g$0$16524)) (quote #f))) ((lambda (g$0$16526) (list g$0$16526)) (g$0$11038 g$0$16520)))) (quote #f))) ((lambda (g$0$16528) (list g$0$16528)) (g$0$11034 g$0$16520)))) (quote #f))) g$0$16488))) g$0$16484))) ((lambda (g$0$16530) (if (equal? (g$0$11060 g$0$16530) (quote ())) (begin (quote #f) (quote ())) (quote #f))) g$0$16484))) g$0$16480)))) (g$0$16472 g$0$16468 (lambda (g$0$16474) (call-with-values (lambda () (g$0$16318 g$0$16404 g$0$16466 g$0$16406 (cons (quote ()) g$0$16474) g$0$16408 (quote #f))) (lambda (g$0$16476 g$0$16477) (if (null? (car g$0$16477)) (error (quote expander) (quote "~a ~s") (quote "extra ellipsis in syntax form") (g$0$11058 g$0$16404 (quote ()))) (values (g$0$16326 g$0$16476 (car g$0$16477)) (cdr g$0$16477))))))))) g$0$16458) ((lambda (g$0$16532) ((lambda (g$0$16534) (if (if g$0$16534 (begin (quote #f) (apply (lambda (g$0$16536 g$0$16537) (quote #t)) g$0$16534)) (quote #f)) (apply (lambda (g$0$16540 g$0$16541) (call-with-values (lambda () (g$0$16318 g$0$16404 g$0$16540 g$0$16406 g$0$16407 g$0$16408 (quote #f))) (lambda (g$0$16544 g$0$16545) (call-with-values (lambda () (g$0$16318 g$0$16404 g$0$16541 g$0$16406 g$0$16545 g$0$16408 g$0$16409)) (lambda (g$0$16548 g$0$16549) (values (g$0$16328 g$0$16405 g$0$16540 g$0$16541 g$0$16544 g$0$16548) g$0$16549)))))) g$0$16534) ((lambda (g$0$16552) ((lambda (g$0$16554) (if (if g$0$16554 (begin (quote #f) (apply (lambda (g$0$16556) (not (g$0$10992 g$0$16405))) g$0$16554)) (quote #f)) (apply (lambda (g$0$16558) (call-with-values (lambda () (g$0$16318 g$0$16404 g$0$16558 g$0$16406 g$0$16407 g$0$16408 (quote #t))) (lambda (g$0$16560 g$0$16561) (values (g$0$16330 g$0$16405 g$0$16558 g$0$16560) g$0$16561)))) g$0$16554) ((lambda (g$0$16564) ((lambda (g$0$16566) (if (if g$0$16566 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16566)) (quote #f)) (apply (lambda () (values (list (quote quote) g$0$16405) g$0$16407)) g$0$16566) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16564 (quote ()))))) ((lambda (g$0$16568) (quote ())) g$0$16564))) g$0$16552))) ((lambda (g$0$16570) (if (g$0$11028 g$0$16570) (begin (quote #f) ((letrec ((g$0$16572 (lambda (g$0$16574) (if (g$0$11026 g$0$16574) ((lambda (g$0$16576) (if g$0$16576 (begin (quote #f) ((lambda (g$0$16578) (if g$0$16578 (begin (quote #f) (map cons g$0$16576 g$0$16578)) (quote #f))) (g$0$16572 (g$0$11038 g$0$16574)))) (quote #f))) ((lambda (g$0$16580) (list g$0$16580)) (g$0$11034 g$0$16574))) (if (g$0$11030 g$0$16574) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$16572) (g$0$11024 g$0$16570))) (quote #f))) g$0$16552))) g$0$16532))) ((lambda (g$0$16582) (if (g$0$11026 g$0$16582) (begin (quote #f) ((lambda (g$0$16584) (if g$0$16584 (begin (quote #f) ((lambda (g$0$16586) (if g$0$16586 (begin (quote #f) (append g$0$16584 g$0$16586)) (quote #f))) ((lambda (g$0$16588) (list g$0$16588)) (g$0$11038 g$0$16582)))) (quote #f))) ((lambda (g$0$16590) (list g$0$16590)) (g$0$11034 g$0$16582)))) (quote #f))) g$0$16532))) g$0$16456))) ((lambda (g$0$16592) (if (g$0$11026 g$0$16592) (begin (quote #f) ((lambda (g$0$16594) (if g$0$16594 (begin (quote #f) ((lambda (g$0$16596) (if g$0$16596 (begin (quote #f) (append g$0$16594 g$0$16596)) (quote #f))) ((lambda (g$0$16598) (if (g$0$11026 g$0$16598) (begin (quote #f) ((lambda (g$0$16600) (if g$0$16600 (begin (quote #f) ((lambda (g$0$16602) (if g$0$16602 (begin (quote #f) (append g$0$16600 g$0$16602)) (quote #f))) ((lambda (g$0$16604) (list g$0$16604)) (g$0$11038 g$0$16598)))) (quote #f))) ((lambda (g$0$16606) (list g$0$16606)) (g$0$11034 g$0$16598)))) (quote #f))) (g$0$11038 g$0$16592)))) (quote #f))) ((lambda (g$0$16608) (list g$0$16608)) (g$0$11034 g$0$16592)))) (quote #f))) g$0$16456))) g$0$16442))) ((lambda (g$0$16610) (if (g$0$11026 g$0$16610) (begin (quote #f) ((lambda (g$0$16612) (if g$0$16612 (begin (quote #f) ((lambda (g$0$16614) (if g$0$16614 (begin (quote #f) (append g$0$16612 g$0$16614)) (quote #f))) ((lambda (g$0$16616) (if (g$0$11026 g$0$16616) (begin (quote #f) ((lambda (g$0$16618) (if g$0$16618 (begin (quote #f) ((lambda (g$0$16620) (if g$0$16620 (begin (quote #f) (append g$0$16618 g$0$16620)) (quote #f))) ((lambda (g$0$16622) (if (equal? (g$0$11060 g$0$16622) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$16616)))) (quote #f))) ((lambda (g$0$16624) (list g$0$16624)) (g$0$11034 g$0$16616)))) (quote #f))) (g$0$11038 g$0$16610)))) (quote #f))) ((lambda (g$0$16626) (list g$0$16626)) (g$0$11034 g$0$16610)))) (quote #f))) g$0$16442))) g$0$16424))) ((lambda (g$0$16628) (list g$0$16628)) g$0$16424))) g$0$16416))) ((lambda (g$0$16630) (list g$0$16630)) g$0$16416))) g$0$16405))) (set! g$0$16320 (lambda (g$0$16386 g$0$16387 g$0$16388 g$0$16389) (if (= g$0$16388 (quote 0)) (values g$0$16387 g$0$16389) (if (null? g$0$16389) (error (quote expander) (quote "~a ~s") (quote "missing ellipsis in syntax form") (g$0$11058 g$0$16386 (quote ()))) (call-with-values (lambda () (g$0$16320 g$0$16386 g$0$16387 (- g$0$16388 (quote 1)) (cdr g$0$16389))) (lambda (g$0$16394 g$0$16395) ((lambda (g$0$16398) (if g$0$16398 ((lambda (g$0$16400) (values (cdr g$0$16400) g$0$16389)) g$0$16398) ((lambda (g$0$16402) (values g$0$16402 (cons (cons (cons g$0$16394 g$0$16402) (car g$0$16389)) g$0$16395))) (g$0$10950 (quote tmp))))) (assq g$0$16394 (car g$0$16389))))))))) (set! g$0$16322 (lambda (g$0$16382 g$0$16383) (if (equal? g$0$16383 (quote (quote ()))) g$0$16382 (list (quote append) g$0$16382 g$0$16383)))) (set! g$0$16324 (lambda (g$0$16378 g$0$16379) (list (quote apply) (quote (primitive append)) (g$0$16326 g$0$16378 g$0$16379)))) (set! g$0$16326 (lambda (g$0$16360 g$0$16361) ((lambda (g$0$16364 g$0$16365) (if (eq? (car g$0$16360) (quote ref)) (car g$0$16365) (if (for-all (lambda (g$0$16368) (if (eq? (car g$0$16368) (quote ref)) (begin (quote #f) (memq (cadr g$0$16368) g$0$16364)) (quote #f))) (cdr g$0$16360)) ((lambda (g$0$16370) (cons (quote map) (cons (list (quote primitive) (car g$0$16360)) g$0$16370))) (map ((lambda (g$0$16372) (lambda (g$0$16374) (cdr (assq (cadr g$0$16374) g$0$16372)))) (map cons g$0$16364 g$0$16365)) (cdr g$0$16360))) (cons* (quote map) (list (quote lambda) g$0$16364 g$0$16360) g$0$16365)))) (map cdr g$0$16361) (map (lambda (g$0$16376) (list (quote ref) (car g$0$16376))) g$0$16361)))) (set! g$0$16328 (lambda (g$0$16345 g$0$16346 g$0$16347 g$0$16348 g$0$16349) ((lambda (g$0$16355) (if (memv g$0$16355 (quote (quote))) (if (eq? (car g$0$16348) (quote quote)) ((lambda (g$0$16356 g$0$16357) (if (if (eq? g$0$16356 g$0$16346) (begin (quote #f) (eq? g$0$16357 g$0$16347)) (quote #f)) (list (quote quote) g$0$16345) (list (quote quote) (cons g$0$16356 g$0$16357)))) (cadr g$0$16348) (cadr g$0$16349)) (if (null? (cadr g$0$16349)) (list (quote list) g$0$16348) (list (quote cons) g$0$16348 g$0$16349))) (if (memv g$0$16355 (quote (list))) (cons (quote list) (cons g$0$16348 (cdr g$0$16349))) (list (quote cons) g$0$16348 g$0$16349)))) (car g$0$16349)))) (set! g$0$16330 (lambda (g$0$16339 g$0$16340 g$0$16341) (if (eq? (car g$0$16341) (quote quote)) (if (eq? (cadr g$0$16341) g$0$16340) (list (quote quote) g$0$16339) (list (quote quote) (list->vector (cadr g$0$16341)))) (if (eq? (car g$0$16341) (quote list)) (cons (quote vector) (cdr g$0$16341)) (list (quote list->vector) g$0$16341))))) (set! g$0$16332 (lambda (g$0$16334) ((lambda (g$0$16336) (if (memv g$0$16336 (quote (ref))) (cadr g$0$16334) (if (memv g$0$16336 (quote (primitive))) (list (quote primitive) (cadr g$0$16334)) (if (memv g$0$16336 (quote (quote))) (list (quote quote) (cadr g$0$16334)) (if (memv g$0$16336 (quote (lambda))) (g$0$10929 (quote #f) (cadr g$0$16334) (g$0$16332 (caddr g$0$16334))) (if (memv g$0$16336 (quote (map))) ((lambda (g$0$16337) (cons (quote (primitive map)) g$0$16337)) (map g$0$16332 (cdr g$0$16334))) (cons (list (quote primitive) (car g$0$16334)) (map g$0$16332 (cdr g$0$16334))))))))) (car g$0$16334)))) (lambda (g$0$16632 g$0$16633 g$0$16634) ((lambda (g$0$16638) ((lambda (g$0$16640) (if (if g$0$16640 (begin (quote #f) (apply (lambda (g$0$16642) (quote #t)) g$0$16640)) (quote #f)) (apply (lambda (g$0$16644) (call-with-values (lambda () (g$0$16318 g$0$16632 g$0$16644 g$0$16633 (quote ()) g$0$11373 (quote #f))) (lambda (g$0$16646 g$0$16647) (g$0$16332 g$0$16646)))) g$0$16640) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16638 (quote ()))))) ((lambda (g$0$16650) (if (g$0$11026 g$0$16650) (begin (quote #f) ((lambda (g$0$16652) (if g$0$16652 (begin (quote #f) ((lambda (g$0$16654) (if g$0$16654 (begin (quote #f) (append g$0$16652 g$0$16654)) (quote #f))) ((lambda (g$0$16656) (if (g$0$11026 g$0$16656) (begin (quote #f) ((lambda (g$0$16658) (if g$0$16658 (begin (quote #f) ((lambda (g$0$16660) (if g$0$16660 (begin (quote #f) (append g$0$16658 g$0$16660)) (quote #f))) ((lambda (g$0$16662) (if (equal? (g$0$11060 g$0$16662) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$16656)))) (quote #f))) ((lambda (g$0$16664) (list g$0$16664)) (g$0$11034 g$0$16656)))) (quote #f))) (g$0$11038 g$0$16650)))) (quote #f))) ((lambda (g$0$16666) (quote ())) (g$0$11034 g$0$16650)))) (quote #f))) g$0$16638))) g$0$16632)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f))))) (set! g$0$11379 (lambda (g$0$16668) ((lambda (g$0$16670) (if (memv g$0$16670 (quote (quote))) g$0$11317 (if (memv g$0$16670 (quote (lambda))) g$0$11321 (if (memv g$0$16670 (quote (case-lambda))) g$0$11319 (if (memv g$0$16670 (quote (let-values))) g$0$11299 (if (memv g$0$16670 (quote (letrec))) g$0$11303 (if (memv g$0$16670 (quote (letrec*))) g$0$11305 (if (memv g$0$16670 (quote (case))) g$0$11315 (if (memv g$0$16670 (quote (if))) g$0$11313 (if (memv g$0$16670 (quote (when))) g$0$11309 (if (memv g$0$16670 (quote (unless))) g$0$11311 (if (memv g$0$16670 (quote (parameterize))) g$0$11365 (if (memv g$0$16670 (quote (foreign-call))) g$0$11367 (if (memv g$0$16670 (quote (syntax-case))) g$0$11375 (if (memv g$0$16670 (quote (syntax))) g$0$11377 (if (memv g$0$16670 (quote (type-descriptor))) g$0$11307 (error (quote macro-transformer) (quote "cannot find ~s") g$0$16668))))))))))))))))) g$0$16668))) (set! g$0$11381 (lambda (g$0$16671) (if (procedure? g$0$16671) g$0$16671 (if (symbol? g$0$16671) ((lambda (g$0$16673) (if (memv g$0$16673 (quote (define-record))) g$0$11361 (if (memv g$0$16673 (quote (include))) g$0$11353 (if (memv g$0$16673 (quote (cond))) g$0$11351 (if (memv g$0$16673 (quote (let))) g$0$11327 (if (memv g$0$16673 (quote (do))) g$0$11343 (if (memv g$0$16673 (quote (or))) g$0$11347 (if (memv g$0$16673 (quote (and))) g$0$11349 (if (memv g$0$16673 (quote (let*))) g$0$11345 (if (memv g$0$16673 (quote (syntax-rules))) g$0$11355 (if (memv g$0$16673 (quote (quasiquote))) g$0$11357 (if (memv g$0$16673 (quote (quasisyntax))) g$0$11359 (if (memv g$0$16673 (quote (with-syntax))) g$0$11325 (if (memv g$0$16673 (quote (identifier-syntax))) g$0$11341 (if (memv g$0$16673 (quote (time))) g$0$11333 (if (memv g$0$16673 (quote (delay))) g$0$11335 (if (memv g$0$16673 (quote (assert))) g$0$11337 (if (memv g$0$16673 (quote (endianness))) g$0$11339 (if (memv g$0$16673 (quote (trace-lambda))) g$0$11329 (if (memv g$0$16673 (quote (trace-define))) g$0$11331 (if (memv g$0$16673 (quote (|...| => _ else unquote unquote-splicing unsyntax unsyntax-splicing))) g$0$11363 (error (quote macro-transformer) (quote "invalid macro ~s") g$0$16671)))))))))))))))))))))) g$0$16671) (error (quote core-macro-transformer) (quote "invalid macro ~s") g$0$16671))))) (set! g$0$11383 (lambda (g$0$16674) (car g$0$16674))) (set! g$0$11385 (lambda (g$0$16676 g$0$16677) ((lambda (g$0$16680) (g$0$11018 (g$0$11008) g$0$16680)) ((g$0$11381 g$0$16676) (g$0$11018 g$0$11010 g$0$16677))))) (set! g$0$11387 (lambda (g$0$16682 g$0$16683) ((lambda (g$0$16686) (g$0$11018 (g$0$11008) g$0$16686)) ((g$0$11383 g$0$16682) (g$0$11018 g$0$11010 g$0$16683))))) (set! g$0$11389 (lambda (g$0$16688 g$0$16689) ((lambda (g$0$16692 g$0$16693) (begin (g$0$10644 g$0$16692) ((lambda (g$0$16696) ((lambda (g$0$16698) ((lambda (g$0$16700) (g$0$11018 (g$0$11008) g$0$16700)) (g$0$16698 (g$0$11018 g$0$11010 g$0$16689)))) (if (procedure? g$0$16696) g$0$16696 (error (quote chi-global-macro) (quote "~s is not a procedure"))))) (symbol-value g$0$16693)))) (car g$0$16688) (cdr g$0$16688)))) (set! g$0$11391 (lambda (g$0$16702 g$0$16703 g$0$16704) (if (null? g$0$16702) (quote ()) ((lambda (g$0$16708) (cons g$0$16708 (g$0$11391 (cdr g$0$16702) g$0$16703 g$0$16704))) (g$0$11395 (car g$0$16702) g$0$16703 g$0$16704))))) (set! g$0$11393 (lambda (g$0$16710 g$0$16711 g$0$16712) ((lambda (g$0$16716) ((lambda (g$0$16718) (if (if g$0$16718 (begin (quote #f) (apply (lambda (g$0$16720 g$0$16721) (quote #t)) g$0$16718)) (quote #f)) (apply (lambda (g$0$16724 g$0$16725) ((lambda (g$0$16728) (cons g$0$16728 (g$0$11391 g$0$16725 g$0$16711 g$0$16712))) (g$0$11395 g$0$16724 g$0$16711 g$0$16712))) g$0$16718) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16716 (quote ()))))) ((lambda (g$0$16730) (if (g$0$11026 g$0$16730) (begin (quote #f) ((lambda (g$0$16732) (if g$0$16732 (begin (quote #f) ((lambda (g$0$16734) (if g$0$16734 (begin (quote #f) (append g$0$16732 g$0$16734)) (quote #f))) ((letrec ((g$0$16736 (lambda (g$0$16738) (if (g$0$11026 g$0$16738) ((lambda (g$0$16740) (if g$0$16740 (begin (quote #f) ((lambda (g$0$16742) (if g$0$16742 (begin (quote #f) (map cons g$0$16740 g$0$16742)) (quote #f))) (g$0$16736 (g$0$11038 g$0$16738)))) (quote #f))) ((lambda (g$0$16744) (list g$0$16744)) (g$0$11034 g$0$16738))) (if (g$0$11030 g$0$16738) (list (begin (quote rands) (quote ()))) (quote #f)))))) g$0$16736) (g$0$11038 g$0$16730)))) (quote #f))) ((lambda (g$0$16746) (list g$0$16746)) (g$0$11034 g$0$16730)))) (quote #f))) g$0$16716))) g$0$16710))) (set! g$0$11395 (lambda (g$0$16748 g$0$16749 g$0$16750) (call-with-values (lambda () (g$0$11072 g$0$16748 g$0$16749)) (lambda (g$0$16754 g$0$16755 g$0$16756) ((lambda (g$0$16760) (if (memv g$0$16760 (quote (core-macro))) ((lambda (g$0$16897) (g$0$16897 g$0$16748 g$0$16749 g$0$16750)) (g$0$11379 g$0$16755)) (if (memv g$0$16760 (quote (global))) ((lambda (g$0$16893) ((lambda (g$0$16895) ((lambda () (begin ((g$0$11443) g$0$16893) g$0$16895)))) (cdr g$0$16755))) (car g$0$16755)) (if (memv g$0$16760 (quote (core-prim))) ((lambda (g$0$16891) (list (quote primitive) g$0$16891)) g$0$16755) (if (memv g$0$16760 (quote (call))) (g$0$11393 g$0$16748 g$0$16749 g$0$16750) (if (memv g$0$16760 (quote (lexical))) ((lambda (g$0$16889) g$0$16889) g$0$16755) (if (memv g$0$16760 (quote (global-macro global-macro!))) (g$0$11395 (g$0$11389 g$0$16755 g$0$16748) g$0$16749 g$0$16750) (if (memv g$0$16760 (quote (local-macro local-macro!))) (g$0$11395 (g$0$11387 g$0$16755 g$0$16748) g$0$16749 g$0$16750) (if (memv g$0$16760 (quote (macro macro!))) (g$0$11395 (g$0$11385 g$0$16755 g$0$16748) g$0$16749 g$0$16750) (if (memv g$0$16760 (quote (constant))) ((lambda (g$0$16887) (list (quote quote) g$0$16887)) g$0$16755) (if (memv g$0$16760 (quote (set!))) (g$0$11397 g$0$16748 g$0$16749 g$0$16750) (if (memv g$0$16760 (quote (begin))) ((lambda (g$0$16849) ((lambda (g$0$16851) (if (if g$0$16851 (begin (quote #f) (apply (lambda (g$0$16853 g$0$16854) (quote #t)) g$0$16851)) (quote #f)) (apply (lambda (g$0$16857 g$0$16858) (g$0$10923 (quote #f) (g$0$11391 (cons g$0$16857 g$0$16858) g$0$16749 g$0$16750))) g$0$16851) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16849 (quote ()))))) ((lambda (g$0$16861) (if (g$0$11026 g$0$16861) (begin (quote #f) ((lambda (g$0$16863) (if g$0$16863 (begin (quote #f) ((lambda (g$0$16865) (if g$0$16865 (begin (quote #f) (append g$0$16863 g$0$16865)) (quote #f))) ((lambda (g$0$16867) (if (g$0$11026 g$0$16867) (begin (quote #f) ((lambda (g$0$16869) (if g$0$16869 (begin (quote #f) ((lambda (g$0$16871) (if g$0$16871 (begin (quote #f) (append g$0$16869 g$0$16871)) (quote #f))) ((letrec ((g$0$16873 (lambda (g$0$16875) (if (g$0$11026 g$0$16875) ((lambda (g$0$16877) (if g$0$16877 (begin (quote #f) ((lambda (g$0$16879) (if g$0$16879 (begin (quote #f) (map cons g$0$16877 g$0$16879)) (quote #f))) (g$0$16873 (g$0$11038 g$0$16875)))) (quote #f))) ((lambda (g$0$16881) (list g$0$16881)) (g$0$11034 g$0$16875))) (if (g$0$11030 g$0$16875) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$16873) (g$0$11038 g$0$16867)))) (quote #f))) ((lambda (g$0$16883) (list g$0$16883)) (g$0$11034 g$0$16867)))) (quote #f))) (g$0$11038 g$0$16861)))) (quote #f))) ((lambda (g$0$16885) (quote ())) (g$0$11034 g$0$16861)))) (quote #f))) g$0$16849))) g$0$16748) (if (memv g$0$16760 (quote (let-syntax letrec-syntax))) ((lambda (g$0$16761) ((lambda (g$0$16763) (if (if g$0$16763 (begin (quote #f) (apply (lambda (g$0$16765 g$0$16766 g$0$16767 g$0$16768) (if (g$0$11050 g$0$16765) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (g$0$11058 g$0$16748 (quote ()))))) g$0$16763)) (quote #f)) (apply (lambda (g$0$16773 g$0$16774 g$0$16775 g$0$16776) ((lambda (g$0$16781) ((lambda (g$0$16783) ((lambda (g$0$16785) ((lambda () (g$0$10923 (quote #f) (g$0$11391 (map (lambda (g$0$16787) (g$0$11020 g$0$16783 g$0$16787)) (cons g$0$16775 g$0$16776)) (append (map cons g$0$16781 g$0$16785) g$0$16749) (append (map cons g$0$16781 g$0$16785) g$0$16750)))))) (map (lambda (g$0$16789) (g$0$11090 (g$0$11429 (if (eq? g$0$16754 (quote let-syntax)) g$0$16789 (g$0$11020 g$0$16783 g$0$16789)) g$0$16750))) g$0$16774))) (g$0$10987 g$0$16773 g$0$16781))) (map g$0$10954 g$0$16773))) g$0$16763) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16761 (quote ()))))) ((lambda (g$0$16791) (if (g$0$11026 g$0$16791) (begin (quote #f) ((lambda (g$0$16793) (if g$0$16793 (begin (quote #f) ((lambda (g$0$16795) (if g$0$16795 (begin (quote #f) (append g$0$16793 g$0$16795)) (quote #f))) ((lambda (g$0$16797) (if (g$0$11026 g$0$16797) (begin (quote #f) ((lambda (g$0$16799) (if g$0$16799 (begin (quote #f) ((lambda (g$0$16801) (if g$0$16801 (begin (quote #f) (append g$0$16799 g$0$16801)) (quote #f))) ((lambda (g$0$16803) (if (g$0$11026 g$0$16803) (begin (quote #f) ((lambda (g$0$16805) (if g$0$16805 (begin (quote #f) ((lambda (g$0$16807) (if g$0$16807 (begin (quote #f) (append g$0$16805 g$0$16807)) (quote #f))) ((letrec ((g$0$16809 (lambda (g$0$16811) (if (g$0$11026 g$0$16811) ((lambda (g$0$16813) (if g$0$16813 (begin (quote #f) ((lambda (g$0$16815) (if g$0$16815 (begin (quote #f) (map cons g$0$16813 g$0$16815)) (quote #f))) (g$0$16809 (g$0$11038 g$0$16811)))) (quote #f))) ((lambda (g$0$16817) (list g$0$16817)) (g$0$11034 g$0$16811))) (if (g$0$11030 g$0$16811) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$16809) (g$0$11038 g$0$16803)))) (quote #f))) ((lambda (g$0$16819) (list g$0$16819)) (g$0$11034 g$0$16803)))) (quote #f))) (g$0$11038 g$0$16797)))) (quote #f))) ((letrec ((g$0$16821 (lambda (g$0$16823) (if (g$0$11026 g$0$16823) ((lambda (g$0$16825) (if g$0$16825 (begin (quote #f) ((lambda (g$0$16827) (if g$0$16827 (begin (quote #f) (map cons g$0$16825 g$0$16827)) (quote #f))) (g$0$16821 (g$0$11038 g$0$16823)))) (quote #f))) ((lambda (g$0$16829) (if (g$0$11026 g$0$16829) (begin (quote #f) ((lambda (g$0$16831) (if g$0$16831 (begin (quote #f) ((lambda (g$0$16833) (if g$0$16833 (begin (quote #f) (append g$0$16831 g$0$16833)) (quote #f))) ((lambda (g$0$16835) (if (g$0$11026 g$0$16835) (begin (quote #f) ((lambda (g$0$16837) (if g$0$16837 (begin (quote #f) ((lambda (g$0$16839) (if g$0$16839 (begin (quote #f) (append g$0$16837 g$0$16839)) (quote #f))) ((lambda (g$0$16841) (if (equal? (g$0$11060 g$0$16841) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$16835)))) (quote #f))) ((lambda (g$0$16843) (list g$0$16843)) (g$0$11034 g$0$16835)))) (quote #f))) (g$0$11038 g$0$16829)))) (quote #f))) ((lambda (g$0$16845) (list g$0$16845)) (g$0$11034 g$0$16829)))) (quote #f))) (g$0$11034 g$0$16823))) (if (g$0$11030 g$0$16823) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$16821) (g$0$11034 g$0$16797)))) (quote #f))) (g$0$11038 g$0$16791)))) (quote #f))) ((lambda (g$0$16847) (quote ())) (g$0$11034 g$0$16791)))) (quote #f))) g$0$16761))) g$0$16748) (if (memv g$0$16760 (quote (displaced-lexical))) (error (quote expander) (quote "~a ~s") (quote "identifier out of context") (g$0$11058 g$0$16748 (quote ()))) (if (memv g$0$16760 (quote (syntax))) (error (quote expander) (quote "~a ~s") (quote "reference to pattern variable outside a syntax form") (g$0$11058 g$0$16748 (quote ()))) (if (memv g$0$16760 (quote (define define-syntax module import))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (g$0$11058 g$0$16748 (quote ()))) (error (quote expander) (quote "~a ~s") (quote "invalid expression") (g$0$11058 g$0$16748 (quote ()))))))))))))))))))) g$0$16754))))) (set! g$0$11397 (lambda (g$0$16899 g$0$16900 g$0$16901) ((lambda (g$0$16905) ((lambda (g$0$16907) (if (if g$0$16907 (begin (quote #f) (apply (lambda (g$0$16909 g$0$16910) (g$0$11040 g$0$16909)) g$0$16907)) (quote #f)) (apply (lambda (g$0$16913 g$0$16914) (call-with-values (lambda () (g$0$11072 g$0$16913 g$0$16900)) (lambda (g$0$16917 g$0$16918 g$0$16919) ((lambda (g$0$16923) (if (memv g$0$16923 (quote (lexical))) (list (quote set!) g$0$16918 (g$0$11395 g$0$16914 g$0$16900 g$0$16901)) (if (memv g$0$16923 (quote (global core-prim))) (error (quote expander) (quote "~a ~s") (quote "cannot modify imported identifier in") (g$0$11058 g$0$16899 (quote ()))) (if (memv g$0$16923 (quote (global-macro!))) (g$0$11395 (g$0$11389 g$0$16918 g$0$16899) g$0$16900 g$0$16901) (if (memv g$0$16923 (quote (local-macro!))) (g$0$11395 (g$0$11387 g$0$16918 g$0$16899) g$0$16900 g$0$16901) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$16899))))))) g$0$16917)))) g$0$16907) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16905 (quote ()))))) ((lambda (g$0$16924) (if (g$0$11026 g$0$16924) (begin (quote #f) ((lambda (g$0$16926) (if g$0$16926 (begin (quote #f) ((lambda (g$0$16928) (if g$0$16928 (begin (quote #f) (append g$0$16926 g$0$16928)) (quote #f))) ((lambda (g$0$16930) (if (g$0$11026 g$0$16930) (begin (quote #f) ((lambda (g$0$16932) (if g$0$16932 (begin (quote #f) ((lambda (g$0$16934) (if g$0$16934 (begin (quote #f) (append g$0$16932 g$0$16934)) (quote #f))) ((lambda (g$0$16936) (if (g$0$11026 g$0$16936) (begin (quote #f) ((lambda (g$0$16938) (if g$0$16938 (begin (quote #f) ((lambda (g$0$16940) (if g$0$16940 (begin (quote #f) (append g$0$16938 g$0$16940)) (quote #f))) ((lambda (g$0$16942) (if (equal? (g$0$11060 g$0$16942) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$16936)))) (quote #f))) ((lambda (g$0$16944) (list g$0$16944)) (g$0$11034 g$0$16936)))) (quote #f))) (g$0$11038 g$0$16930)))) (quote #f))) ((lambda (g$0$16946) (list g$0$16946)) (g$0$11034 g$0$16930)))) (quote #f))) (g$0$11038 g$0$16924)))) (quote #f))) ((lambda (g$0$16948) (quote ())) (g$0$11034 g$0$16924)))) (quote #f))) g$0$16905))) g$0$16899))) (set! g$0$11399 (lambda (g$0$16950 g$0$16951 g$0$16952 g$0$16953) ((lambda (g$0$16958) ((lambda (g$0$16960) (if (if g$0$16960 (begin (quote #f) (apply (lambda (g$0$16962) (quote #t)) g$0$16960)) (quote #f)) (apply (lambda (g$0$16964) (if (g$0$11050 g$0$16964) ((lambda (g$0$16966 g$0$16967) (values g$0$16966 (g$0$11411 (g$0$11020 (g$0$10987 g$0$16964 g$0$16967) g$0$16951) (g$0$11297 g$0$16967 g$0$16966 g$0$16952) g$0$16953))) (map g$0$10950 g$0$16964) (map g$0$10954 g$0$16964)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (g$0$11058 g$0$16950 (quote ()))))) g$0$16960) ((lambda (g$0$16970) ((lambda (g$0$16972) (if (if g$0$16972 (begin (quote #f) (apply (lambda (g$0$16974 g$0$16975) (quote #t)) g$0$16972)) (quote #f)) (apply (lambda (g$0$16978 g$0$16979) (if (g$0$11050 (cons g$0$16979 g$0$16978)) ((lambda (g$0$16982 g$0$16983 g$0$16984 g$0$16985) (values (append g$0$16982 g$0$16984) (g$0$11411 (g$0$11020 (g$0$10987 (cons g$0$16979 g$0$16978) (cons g$0$16985 g$0$16983)) g$0$16951) (g$0$11297 (cons g$0$16985 g$0$16983) (cons g$0$16984 g$0$16982) g$0$16952) g$0$16953))) (map g$0$10950 g$0$16978) (map g$0$10954 g$0$16978) (g$0$10950 g$0$16979) (g$0$10954 g$0$16979)) (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (g$0$11058 g$0$16950 (quote ()))))) g$0$16972) ((lambda (g$0$16990) ((lambda (g$0$16992) (if (if g$0$16992 (begin (quote #f) (apply (lambda () (quote #t)) g$0$16992)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid fmls") (g$0$11058 g$0$16950 (quote ())))) g$0$16992) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$16990 (quote ()))))) ((lambda (g$0$16994) (quote ())) g$0$16990))) g$0$16970))) ((letrec ((g$0$16996 (lambda (g$0$17002) (if (g$0$11026 g$0$17002) ((lambda (g$0$17004) (if g$0$17004 (begin (quote #f) ((lambda (g$0$17006) (if g$0$17006 (begin (quote #f) (cons (map cons g$0$17004 (car g$0$17006)) (cdr g$0$17006))) (quote #f))) (g$0$16996 (g$0$11038 g$0$17002)))) (quote #f))) ((lambda (g$0$17008) (list g$0$17008)) (g$0$11034 g$0$17002))) ((lambda (g$0$17010) (if g$0$17010 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$0$17010)) (quote #f))) ((lambda (g$0$17012) (list g$0$17012)) g$0$17002)))))) (lambda (g$0$16998) ((lambda (g$0$17000) (if g$0$17000 (begin (quote #f) (append (car g$0$17000) (cdr g$0$17000))) (quote #f))) (g$0$16996 g$0$16998)))) g$0$16970))) g$0$16958))) ((letrec ((g$0$17014 (lambda (g$0$17016) (if (g$0$11026 g$0$17016) ((lambda (g$0$17018) (if g$0$17018 (begin (quote #f) ((lambda (g$0$17020) (if g$0$17020 (begin (quote #f) (map cons g$0$17018 g$0$17020)) (quote #f))) (g$0$17014 (g$0$11038 g$0$17016)))) (quote #f))) ((lambda (g$0$17022) (list g$0$17022)) (g$0$11034 g$0$17016))) (if (g$0$11030 g$0$17016) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17014) g$0$16958))) g$0$16950))) (set! g$0$11401 (lambda (g$0$17024 g$0$17025 g$0$17026 g$0$17027) (if (null? g$0$17024) (values (quote ()) (quote ())) (call-with-values (lambda () (g$0$11399 (car g$0$17024) (car g$0$17025) g$0$17026 g$0$17027)) (lambda (g$0$17032 g$0$17033) (call-with-values (lambda () (g$0$11401 (cdr g$0$17024) (cdr g$0$17025) g$0$17026 g$0$17027)) (lambda (g$0$17036 g$0$17037) (values (cons g$0$17032 g$0$17036) (cons g$0$17033 g$0$17037))))))))) (set! g$0$11403 (lambda (g$0$17040 g$0$17041 g$0$17042) ((lambda (g$0$17046) (if (memv g$0$17046 (quote (defun))) ((lambda (g$0$17051) ((lambda (g$0$17053 g$0$17054) (call-with-values (lambda () (g$0$11399 g$0$17053 g$0$17054 g$0$17041 g$0$17042)) (lambda (g$0$17057 g$0$17058) (g$0$10929 (quote #f) g$0$17057 g$0$17058)))) (car g$0$17051) (cdr g$0$17051))) (cdr g$0$17040)) (if (memv g$0$17046 (quote (expr))) ((lambda (g$0$17049) (g$0$11395 g$0$17049 g$0$17041 g$0$17042)) (cdr g$0$17040)) (if (memv g$0$17046 (quote (top-expr))) ((lambda (g$0$17047) (g$0$10923 (quote #f) (list (g$0$11395 g$0$17047 g$0$17041 g$0$17042) (g$0$10922)))) (cdr g$0$17040)) (error (quote chi-rhs) (quote "invalid rhs ~s") g$0$17040))))) (car g$0$17040)))) (set! g$0$11405 (lambda (g$0$17061 g$0$17062 g$0$17063) (letrec ((g$0$17067 (lambda (g$0$17069) (if (null? g$0$17069) (quote ()) ((lambda (g$0$17071) (cons g$0$17071 (g$0$17067 (cdr g$0$17069)))) (g$0$11403 (car g$0$17069) g$0$17062 g$0$17063)))))) (g$0$17067 g$0$17061)))) (set! g$0$11407 (lambda (g$0$17073 g$0$17074 g$0$17075) (if (null? g$0$17074) (quote #f) (if (g$0$11046 g$0$17073 (car g$0$17074)) (car g$0$17075) (g$0$11407 g$0$17073 (cdr g$0$17074) (cdr g$0$17075)))))) (set! g$0$11409 (lambda (g$0$17079) (letrec ((g$0$17081 (lambda (g$0$17083 g$0$17084) (if (null? g$0$17083) g$0$17084 ((lambda (g$0$17087) (if g$0$17087 ((lambda (g$0$17089) (g$0$17081 (cdr g$0$17083) (cons (list (car g$0$17083) g$0$17089) g$0$17084))) g$0$17087) (g$0$17081 (cdr g$0$17083) g$0$17084))) (g$0$11407 (car g$0$17083) (cdr g$0$17083) (cdr g$0$17083))))))) (g$0$17081 g$0$17079 (quote ()))))) (set! g$0$11411 (lambda (g$0$17091 g$0$17092 g$0$17093) ((lambda (g$0$17097) (call-with-values (lambda () (g$0$11417 (map (lambda (g$0$17099) (g$0$11020 g$0$17097 g$0$17099)) (g$0$11036 g$0$17091)) g$0$17092 g$0$17093 (quote ()) (quote ()) (quote ()) (quote ()) g$0$17097 (quote #f))) (lambda (g$0$17101 g$0$17102 g$0$17103 g$0$17104 g$0$17105 g$0$17106 g$0$17107) (begin (if (null? g$0$17101) (error (quote expander) (quote "~a ~s") (quote "no expression in body") (g$0$11058 g$0$17101 (quote ()))) (void)) ((lambda (g$0$17115 g$0$17116) (g$0$10920 (quote #f) (reverse g$0$17104) (reverse g$0$17115) (g$0$10923 (quote #f) g$0$17116))) (g$0$11405 g$0$17105 g$0$17102 g$0$17103) (g$0$11391 (append (apply append (reverse g$0$17106)) g$0$17101) g$0$17102 g$0$17103)))))) (g$0$10977)))) (set! g$0$11413 (lambda (g$0$17119) ((lambda (g$0$17121) ((lambda (g$0$17123) (if (if g$0$17123 (begin (quote #f) (apply (lambda (g$0$17125 g$0$17126) (quote #t)) g$0$17123)) (quote #f)) (apply (lambda (g$0$17129 g$0$17130) (begin (if (for-all g$0$11040 g$0$17129) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (g$0$11058 g$0$17119 (quote ())))) (values (quote #f) g$0$17129 g$0$17130))) g$0$17123) ((lambda (g$0$17133) ((lambda (g$0$17135) (if (if g$0$17135 (begin (quote #f) (apply (lambda (g$0$17137 g$0$17138 g$0$17139) (quote #t)) g$0$17135)) (quote #f)) (apply (lambda (g$0$17143 g$0$17144 g$0$17145) (begin (if (g$0$11040 g$0$17143) (void) (error (quote expander) (quote "~a ~s") (quote "module name must be an identifier") (g$0$11058 g$0$17119 (quote ())))) (if (for-all g$0$11040 g$0$17144) (void) (error (quote expander) (quote "~a ~s") (quote "module exports must be identifiers") (g$0$11058 g$0$17119 (quote ())))) (values g$0$17143 g$0$17144 g$0$17145))) g$0$17135) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17133 (quote ()))))) ((lambda (g$0$17149) (if (g$0$11026 g$0$17149) (begin (quote #f) ((lambda (g$0$17151) (if g$0$17151 (begin (quote #f) ((lambda (g$0$17153) (if g$0$17153 (begin (quote #f) (append g$0$17151 g$0$17153)) (quote #f))) ((lambda (g$0$17155) (if (g$0$11026 g$0$17155) (begin (quote #f) ((lambda (g$0$17157) (if g$0$17157 (begin (quote #f) ((lambda (g$0$17159) (if g$0$17159 (begin (quote #f) (append g$0$17157 g$0$17159)) (quote #f))) ((lambda (g$0$17161) (if (g$0$11026 g$0$17161) (begin (quote #f) ((lambda (g$0$17163) (if g$0$17163 (begin (quote #f) ((lambda (g$0$17165) (if g$0$17165 (begin (quote #f) (append g$0$17163 g$0$17165)) (quote #f))) ((letrec ((g$0$17167 (lambda (g$0$17169) (if (g$0$11026 g$0$17169) ((lambda (g$0$17171) (if g$0$17171 (begin (quote #f) ((lambda (g$0$17173) (if g$0$17173 (begin (quote #f) (map cons g$0$17171 g$0$17173)) (quote #f))) (g$0$17167 (g$0$11038 g$0$17169)))) (quote #f))) ((lambda (g$0$17175) (list g$0$17175)) (g$0$11034 g$0$17169))) (if (g$0$11030 g$0$17169) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$17167) (g$0$11038 g$0$17161)))) (quote #f))) ((letrec ((g$0$17177 (lambda (g$0$17179) (if (g$0$11026 g$0$17179) ((lambda (g$0$17181) (if g$0$17181 (begin (quote #f) ((lambda (g$0$17183) (if g$0$17183 (begin (quote #f) (map cons g$0$17181 g$0$17183)) (quote #f))) (g$0$17177 (g$0$11038 g$0$17179)))) (quote #f))) ((lambda (g$0$17185) (list g$0$17185)) (g$0$11034 g$0$17179))) (if (g$0$11030 g$0$17179) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$17177) (g$0$11034 g$0$17161)))) (quote #f))) (g$0$11038 g$0$17155)))) (quote #f))) ((lambda (g$0$17187) (list g$0$17187)) (g$0$11034 g$0$17155)))) (quote #f))) (g$0$11038 g$0$17149)))) (quote #f))) ((lambda (g$0$17189) (quote ())) (g$0$11034 g$0$17149)))) (quote #f))) g$0$17133))) g$0$17121))) ((lambda (g$0$17191) (if (g$0$11026 g$0$17191) (begin (quote #f) ((lambda (g$0$17193) (if g$0$17193 (begin (quote #f) ((lambda (g$0$17195) (if g$0$17195 (begin (quote #f) (append g$0$17193 g$0$17195)) (quote #f))) ((lambda (g$0$17197) (if (g$0$11026 g$0$17197) (begin (quote #f) ((lambda (g$0$17199) (if g$0$17199 (begin (quote #f) ((lambda (g$0$17201) (if g$0$17201 (begin (quote #f) (append g$0$17199 g$0$17201)) (quote #f))) ((letrec ((g$0$17203 (lambda (g$0$17205) (if (g$0$11026 g$0$17205) ((lambda (g$0$17207) (if g$0$17207 (begin (quote #f) ((lambda (g$0$17209) (if g$0$17209 (begin (quote #f) (map cons g$0$17207 g$0$17209)) (quote #f))) (g$0$17203 (g$0$11038 g$0$17205)))) (quote #f))) ((lambda (g$0$17211) (list g$0$17211)) (g$0$11034 g$0$17205))) (if (g$0$11030 g$0$17205) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$17203) (g$0$11038 g$0$17197)))) (quote #f))) ((letrec ((g$0$17213 (lambda (g$0$17215) (if (g$0$11026 g$0$17215) ((lambda (g$0$17217) (if g$0$17217 (begin (quote #f) ((lambda (g$0$17219) (if g$0$17219 (begin (quote #f) (map cons g$0$17217 g$0$17219)) (quote #f))) (g$0$17213 (g$0$11038 g$0$17215)))) (quote #f))) ((lambda (g$0$17221) (list g$0$17221)) (g$0$11034 g$0$17215))) (if (g$0$11030 g$0$17215) (list (begin (quote export*) (quote ()))) (quote #f)))))) g$0$17213) (g$0$11034 g$0$17197)))) (quote #f))) (g$0$11038 g$0$17191)))) (quote #f))) ((lambda (g$0$17223) (quote ())) (g$0$11034 g$0$17191)))) (quote #f))) g$0$17121))) g$0$17119))) (set! g$0$11415 (lambda (g$0$17225 g$0$17226 g$0$17227 g$0$17228 g$0$17229 g$0$17230 g$0$17231) (call-with-values (lambda () (g$0$11413 g$0$17225)) (lambda (g$0$17239 g$0$17240 g$0$17241) ((lambda (g$0$17245) ((lambda (g$0$17247) ((lambda () (call-with-values (lambda () (g$0$11417 g$0$17247 g$0$17226 g$0$17227 g$0$17228 g$0$17229 g$0$17230 g$0$17231 g$0$17245 (quote #f))) (lambda (g$0$17249 g$0$17250 g$0$17251 g$0$17252 g$0$17253 g$0$17254 g$0$17255) ((lambda (g$0$17263 g$0$17264) (if (not g$0$17239) (values g$0$17252 g$0$17253 g$0$17240 g$0$17263 g$0$17250 g$0$17251 g$0$17264 g$0$17255) ((lambda (g$0$17267 g$0$17268) (values g$0$17252 g$0$17253 (list g$0$17239) (list g$0$17267) (cons (cons g$0$17267 (cons (quote $module) g$0$17268)) g$0$17250) (cons (cons g$0$17267 (cons (quote $module) g$0$17268)) g$0$17251) g$0$17264 g$0$17255)) (g$0$10954 (quote module)) (cons g$0$17240 g$0$17263)))) (map (lambda (g$0$17271) ((lambda (g$0$17273) (if g$0$17273 g$0$17273 (begin (quote #f) (error (quote expander) (quote "~a ~s") (quote "cannot find module export") (g$0$11058 g$0$17271 (quote ())))))) (g$0$11062 (g$0$11020 g$0$17245 g$0$17271)))) g$0$17240) (cons g$0$17249 g$0$17254))))))) (map (lambda (g$0$17275) (g$0$11020 g$0$17245 g$0$17275)) (g$0$11036 g$0$17241)))) (g$0$10977)))))) (set! g$0$11417 (lambda (g$0$17277 g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17283 g$0$17284 g$0$17285) (if (null? g$0$17277) (values g$0$17277 g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17283) ((lambda (g$0$17295) (call-with-values (lambda () (g$0$11072 g$0$17295 g$0$17278)) (lambda (g$0$17297 g$0$17298 g$0$17299) ((lambda (g$0$17303) ((lambda (g$0$17305) (if (memv g$0$17305 (quote (define))) (call-with-values (lambda () (g$0$11289 g$0$17295)) (lambda (g$0$17491 g$0$17492) (begin (if (g$0$11054 g$0$17491 g$0$17303) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (g$0$11058 g$0$17295 (quote ()))) (void)) ((lambda (g$0$17495 g$0$17496) (begin (g$0$10979 g$0$17284 g$0$17491 g$0$17496) (g$0$11417 (cdr g$0$17277) (g$0$11295 g$0$17496 g$0$17495 g$0$17278) g$0$17279 (cons g$0$17495 g$0$17280) (cons g$0$17492 g$0$17281) g$0$17282 g$0$17303 g$0$17284 g$0$17285))) (g$0$10950 g$0$17491) (g$0$10954 g$0$17491))))) (if (memv g$0$17305 (quote (define-syntax))) (call-with-values (lambda () (g$0$11291 g$0$17295)) (lambda (g$0$17481 g$0$17482) (begin (if (g$0$11054 g$0$17481 g$0$17303) (error (quote expander) (quote "~a ~s") (quote "cannot redefine keyword") (g$0$11058 g$0$17295 (quote ()))) (void)) ((lambda (g$0$17485 g$0$17486) (begin (g$0$10979 g$0$17284 g$0$17481 g$0$17485) ((lambda (g$0$17489) (g$0$11417 (cdr g$0$17277) (cons (cons g$0$17485 g$0$17489) g$0$17278) (cons (cons g$0$17485 g$0$17489) g$0$17279) g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285)) (g$0$11090 g$0$17486)))) (g$0$10954 g$0$17481) (g$0$11429 g$0$17482 g$0$17279))))) (if (memv g$0$17305 (quote (let-syntax letrec-syntax))) ((lambda (g$0$17405) ((lambda (g$0$17407) (if (if g$0$17407 (begin (quote #f) (apply (lambda (g$0$17409 g$0$17410 g$0$17411) (if (g$0$11050 g$0$17409) (void) (error (quote expander) (quote "~a ~s") (quote "invalid identifiers") (g$0$11058 g$0$17295 (quote ()))))) g$0$17407)) (quote #f)) (apply (lambda (g$0$17415 g$0$17416 g$0$17417) ((lambda (g$0$17421) ((lambda (g$0$17423) ((lambda (g$0$17425) ((lambda () (g$0$11417 (append (map (lambda (g$0$17427) (g$0$11020 g$0$17423 g$0$17427)) g$0$17417) (cdr g$0$17277)) (append (map cons g$0$17421 g$0$17425) g$0$17278) (append (map cons g$0$17421 g$0$17425) g$0$17279) g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285)))) (map (lambda (g$0$17429) (g$0$11090 (g$0$11429 (if (eq? g$0$17297 (quote let-syntax)) g$0$17429 (g$0$11020 g$0$17423 g$0$17429)) g$0$17279))) g$0$17416))) (g$0$10987 g$0$17415 g$0$17421))) (map g$0$10954 g$0$17415))) g$0$17407) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17405 (quote ()))))) ((lambda (g$0$17431) (if (g$0$11026 g$0$17431) (begin (quote #f) ((lambda (g$0$17433) (if g$0$17433 (begin (quote #f) ((lambda (g$0$17435) (if g$0$17435 (begin (quote #f) (append g$0$17433 g$0$17435)) (quote #f))) ((lambda (g$0$17437) (if (g$0$11026 g$0$17437) (begin (quote #f) ((lambda (g$0$17439) (if g$0$17439 (begin (quote #f) ((lambda (g$0$17441) (if g$0$17441 (begin (quote #f) (append g$0$17439 g$0$17441)) (quote #f))) ((letrec ((g$0$17443 (lambda (g$0$17445) (if (g$0$11026 g$0$17445) ((lambda (g$0$17447) (if g$0$17447 (begin (quote #f) ((lambda (g$0$17449) (if g$0$17449 (begin (quote #f) (map cons g$0$17447 g$0$17449)) (quote #f))) (g$0$17443 (g$0$11038 g$0$17445)))) (quote #f))) ((lambda (g$0$17451) (list g$0$17451)) (g$0$11034 g$0$17445))) (if (g$0$11030 g$0$17445) (list (begin (quote xbody*) (quote ()))) (quote #f)))))) g$0$17443) (g$0$11038 g$0$17437)))) (quote #f))) ((letrec ((g$0$17453 (lambda (g$0$17455) (if (g$0$11026 g$0$17455) ((lambda (g$0$17457) (if g$0$17457 (begin (quote #f) ((lambda (g$0$17459) (if g$0$17459 (begin (quote #f) (map cons g$0$17457 g$0$17459)) (quote #f))) (g$0$17453 (g$0$11038 g$0$17455)))) (quote #f))) ((lambda (g$0$17461) (if (g$0$11026 g$0$17461) (begin (quote #f) ((lambda (g$0$17463) (if g$0$17463 (begin (quote #f) ((lambda (g$0$17465) (if g$0$17465 (begin (quote #f) (append g$0$17463 g$0$17465)) (quote #f))) ((lambda (g$0$17467) (if (g$0$11026 g$0$17467) (begin (quote #f) ((lambda (g$0$17469) (if g$0$17469 (begin (quote #f) ((lambda (g$0$17471) (if g$0$17471 (begin (quote #f) (append g$0$17469 g$0$17471)) (quote #f))) ((lambda (g$0$17473) (if (equal? (g$0$11060 g$0$17473) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$17467)))) (quote #f))) ((lambda (g$0$17475) (list g$0$17475)) (g$0$11034 g$0$17467)))) (quote #f))) (g$0$11038 g$0$17461)))) (quote #f))) ((lambda (g$0$17477) (list g$0$17477)) (g$0$11034 g$0$17461)))) (quote #f))) (g$0$11034 g$0$17455))) (if (g$0$11030 g$0$17455) (list (begin (quote xlhs*) (quote ())) (begin (quote xrhs*) (quote ()))) (quote #f)))))) g$0$17453) (g$0$11034 g$0$17437)))) (quote #f))) (g$0$11038 g$0$17431)))) (quote #f))) ((lambda (g$0$17479) (quote ())) (g$0$11034 g$0$17431)))) (quote #f))) g$0$17405))) g$0$17295) (if (memv g$0$17305 (quote (begin))) ((lambda (g$0$17379) ((lambda (g$0$17381) (if (if g$0$17381 (begin (quote #f) (apply (lambda (g$0$17383) (quote #t)) g$0$17381)) (quote #f)) (apply (lambda (g$0$17385) (g$0$11417 (append g$0$17385 (cdr g$0$17277)) g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285)) g$0$17381) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17379 (quote ()))))) ((lambda (g$0$17387) (if (g$0$11026 g$0$17387) (begin (quote #f) ((lambda (g$0$17389) (if g$0$17389 (begin (quote #f) ((lambda (g$0$17391) (if g$0$17391 (begin (quote #f) (append g$0$17389 g$0$17391)) (quote #f))) ((letrec ((g$0$17393 (lambda (g$0$17395) (if (g$0$11026 g$0$17395) ((lambda (g$0$17397) (if g$0$17397 (begin (quote #f) ((lambda (g$0$17399) (if g$0$17399 (begin (quote #f) (map cons g$0$17397 g$0$17399)) (quote #f))) (g$0$17393 (g$0$11038 g$0$17395)))) (quote #f))) ((lambda (g$0$17401) (list g$0$17401)) (g$0$11034 g$0$17395))) (if (g$0$11030 g$0$17395) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17393) (g$0$11038 g$0$17387)))) (quote #f))) ((lambda (g$0$17403) (quote ())) (g$0$11034 g$0$17387)))) (quote #f))) g$0$17379))) g$0$17295) (if (memv g$0$17305 (quote (global-macro global-macro!))) (g$0$11417 (cons (g$0$11020 g$0$17284 (g$0$11389 g$0$17298 g$0$17295)) (cdr g$0$17277)) g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285) (if (memv g$0$17305 (quote (local-macro local-macro!))) (g$0$11417 (cons (g$0$11020 g$0$17284 (g$0$11387 g$0$17298 g$0$17295)) (cdr g$0$17277)) g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285) (if (memv g$0$17305 (quote (macro macro!))) (g$0$11417 (cons (g$0$11020 g$0$17284 (g$0$11385 g$0$17298 g$0$17295)) (cdr g$0$17277)) g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285) (if (memv g$0$17305 (quote (module))) (call-with-values (lambda () (g$0$11415 g$0$17295 g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303)) (lambda (g$0$17359 g$0$17360 g$0$17361 g$0$17362 g$0$17363 g$0$17364 g$0$17365 g$0$17366) (begin (for-each (lambda (g$0$17375 g$0$17376) (g$0$10979 g$0$17284 g$0$17375 g$0$17376)) g$0$17361 g$0$17362) (g$0$11417 (cdr g$0$17277) g$0$17363 g$0$17364 g$0$17359 g$0$17360 g$0$17365 g$0$17366 g$0$17284 g$0$17285)))) (if (memv g$0$17305 (quote (import))) (begin ((lambda () ((lambda (g$0$17306) (begin (set! g$0$17306 (lambda (g$0$17308 g$0$17309) ((lambda (g$0$17312) ((lambda (g$0$17314) (if (if g$0$17314 (begin (quote #f) (apply (lambda (g$0$17316) (g$0$11040 g$0$17316)) g$0$17314)) (quote #f)) (apply (lambda (g$0$17318) (call-with-values (lambda () (g$0$11072 g$0$17318 g$0$17309)) (lambda (g$0$17320 g$0$17321 g$0$17322) ((lambda (g$0$17326) (if (memv g$0$17326 (quote ($module))) ((lambda (g$0$17327) ((lambda (g$0$17329 g$0$17330) (values g$0$17329 g$0$17330)) (car g$0$17327) (cdr g$0$17327))) g$0$17321) (error (quote expander) (quote "~a ~s") (quote "invalid import") (g$0$11058 g$0$17308 (quote ()))))) g$0$17320)))) g$0$17314) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17312 (quote ()))))) ((lambda (g$0$17333) (if (g$0$11026 g$0$17333) (begin (quote #f) ((lambda (g$0$17335) (if g$0$17335 (begin (quote #f) ((lambda (g$0$17337) (if g$0$17337 (begin (quote #f) (append g$0$17335 g$0$17337)) (quote #f))) ((lambda (g$0$17339) (if (g$0$11026 g$0$17339) (begin (quote #f) ((lambda (g$0$17341) (if g$0$17341 (begin (quote #f) ((lambda (g$0$17343) (if g$0$17343 (begin (quote #f) (append g$0$17341 g$0$17343)) (quote #f))) ((lambda (g$0$17345) (if (equal? (g$0$11060 g$0$17345) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$17339)))) (quote #f))) ((lambda (g$0$17347) (list g$0$17347)) (g$0$11034 g$0$17339)))) (quote #f))) (g$0$11038 g$0$17333)))) (quote #f))) ((lambda (g$0$17349) (quote ())) (g$0$11034 g$0$17333)))) (quote #f))) g$0$17312))) g$0$17308))) (call-with-values (lambda () (g$0$17306 g$0$17295 g$0$17278)) (lambda (g$0$17351 g$0$17352) (for-each (lambda (g$0$17355 g$0$17356) (g$0$10979 g$0$17284 g$0$17355 g$0$17356)) g$0$17351 g$0$17352))))) (quote #f)))) (g$0$11417 (cdr g$0$17277) g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303 g$0$17284 g$0$17285)) (if g$0$17285 (g$0$11417 (cdr g$0$17277) g$0$17278 g$0$17279 (cons (g$0$10950 (quote dummy)) g$0$17280) (cons (cons (quote top-expr) g$0$17295) g$0$17281) g$0$17282 g$0$17303 g$0$17284 g$0$17285) (values g$0$17277 g$0$17278 g$0$17279 g$0$17280 g$0$17281 g$0$17282 g$0$17303)))))))))))) g$0$17297)) (if (g$0$11040 g$0$17299) (cons g$0$17299 g$0$17283) g$0$17283))))) (car g$0$17277))))) (set! g$0$11419 (lambda (g$0$17499 g$0$17500 g$0$17501) (begin (g$0$10648 (g$0$11510) g$0$17499 g$0$17500) (g$0$10647 (g$0$11510) g$0$17500 g$0$17501)))) (set! g$0$11421 (lambda (g$0$17505 g$0$17506) (g$0$11423 g$0$17505 g$0$17506))) (set! g$0$11423 (lambda (g$0$17509 g$0$17510) ((lambda (g$0$17513) ((lambda (g$0$17515) ((lambda (g$0$17517) (if (memv g$0$17517 (quote (global))) ((lambda (g$0$17518) ((lambda (g$0$17520 g$0$17521) (if (eq? g$0$17520 (g$0$11510)) g$0$17521 (error (quote expander) (quote "~a ~s") (quote "cannot modify imported binding") (g$0$11058 g$0$17510 (quote ()))))) (car g$0$17518) (cdr g$0$17518))) (g$0$11070 g$0$17515)) (error (quote expander) (quote "~a ~s") (quote "cannot modify binding in") (g$0$11058 g$0$17510 (quote ()))))) (g$0$11068 g$0$17515))) (g$0$10646 g$0$17513))) (g$0$11062 g$0$17509)))) (set! g$0$11425 (lambda (g$0$17524) ((lambda (g$0$17526) ((lambda (g$0$17528) (if (if g$0$17528 (begin (quote #f) (apply (lambda (g$0$17530 g$0$17531) (g$0$11040 g$0$17530)) g$0$17528)) (quote #f)) (apply (lambda (g$0$17534 g$0$17535) ((lambda (g$0$17538) ((lambda (g$0$17540) (values g$0$17538 g$0$17540)) (g$0$11395 g$0$17535 (quote ()) (quote ())))) (g$0$11423 g$0$17534 g$0$17524))) g$0$17528) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17526 (quote ()))))) ((lambda (g$0$17542) (if (g$0$11026 g$0$17542) (begin (quote #f) ((lambda (g$0$17544) (if g$0$17544 (begin (quote #f) ((lambda (g$0$17546) (if g$0$17546 (begin (quote #f) (append g$0$17544 g$0$17546)) (quote #f))) ((lambda (g$0$17548) (if (g$0$11026 g$0$17548) (begin (quote #f) ((lambda (g$0$17550) (if g$0$17550 (begin (quote #f) ((lambda (g$0$17552) (if g$0$17552 (begin (quote #f) (append g$0$17550 g$0$17552)) (quote #f))) ((lambda (g$0$17554) (if (g$0$11026 g$0$17554) (begin (quote #f) ((lambda (g$0$17556) (if g$0$17556 (begin (quote #f) ((lambda (g$0$17558) (if g$0$17558 (begin (quote #f) (append g$0$17556 g$0$17558)) (quote #f))) ((lambda (g$0$17560) (if (equal? (g$0$11060 g$0$17560) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$17554)))) (quote #f))) ((lambda (g$0$17562) (list g$0$17562)) (g$0$11034 g$0$17554)))) (quote #f))) (g$0$11038 g$0$17548)))) (quote #f))) ((lambda (g$0$17564) (list g$0$17564)) (g$0$11034 g$0$17548)))) (quote #f))) (g$0$11038 g$0$17542)))) (quote #f))) ((lambda (g$0$17566) (quote ())) (g$0$11034 g$0$17542)))) (quote #f))) g$0$17526))) g$0$17524))) (set! g$0$11427 (lambda (g$0$17568 g$0$17569) (if (null? g$0$17568) g$0$17569 ((lambda (g$0$17572) (call-with-values (lambda () (g$0$11072 g$0$17572 (quote ()))) (lambda (g$0$17574 g$0$17575 g$0$17576) ((lambda (g$0$17580) (if (memv g$0$17580 (quote (define))) (call-with-values (lambda () (g$0$11289 g$0$17572)) (lambda (g$0$17621 g$0$17622) ((lambda (g$0$17625) ((lambda (g$0$17627) (g$0$11427 (cdr g$0$17568) (cons (cons g$0$17625 g$0$17627) g$0$17569))) (g$0$11403 g$0$17622 (quote ()) (quote ())))) (g$0$11423 g$0$17621 g$0$17572)))) (if (memv g$0$17580 (quote (set!))) (call-with-values (lambda () (g$0$11425 g$0$17572)) (lambda (g$0$17617 g$0$17618) (g$0$11427 (cdr g$0$17568) (cons (cons g$0$17617 g$0$17618) g$0$17569)))) (if (memv g$0$17580 (quote (define-syntax))) (call-with-values (lambda () (g$0$11291 g$0$17572)) (lambda (g$0$17607 g$0$17608) ((lambda (g$0$17611) ((lambda (g$0$17613) ((lambda (g$0$17615) (begin (g$0$11419 (g$0$11042 g$0$17607) g$0$17611 g$0$17615) (g$0$11427 (cdr g$0$17568) g$0$17569))) (g$0$11090 g$0$17613))) (g$0$11429 g$0$17608 (quote ())))) (g$0$11421 g$0$17607 g$0$17572)))) (if (memv g$0$17580 (quote (let-syntax letrec-syntax))) (error (quote chi-top*) (quote "~s is not supported yet at top level") g$0$17574) (if (memv g$0$17580 (quote (begin))) ((lambda (g$0$17581) ((lambda (g$0$17583) (if (if g$0$17583 (begin (quote #f) (apply (lambda (g$0$17585) (quote #t)) g$0$17583)) (quote #f)) (apply (lambda (g$0$17587) (g$0$11427 (append g$0$17587 (cdr g$0$17568)) g$0$17569)) g$0$17583) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17581 (quote ()))))) ((lambda (g$0$17589) (if (g$0$11026 g$0$17589) (begin (quote #f) ((lambda (g$0$17591) (if g$0$17591 (begin (quote #f) ((lambda (g$0$17593) (if g$0$17593 (begin (quote #f) (append g$0$17591 g$0$17593)) (quote #f))) ((letrec ((g$0$17595 (lambda (g$0$17597) (if (g$0$11026 g$0$17597) ((lambda (g$0$17599) (if g$0$17599 (begin (quote #f) ((lambda (g$0$17601) (if g$0$17601 (begin (quote #f) (map cons g$0$17599 g$0$17601)) (quote #f))) (g$0$17595 (g$0$11038 g$0$17597)))) (quote #f))) ((lambda (g$0$17603) (list g$0$17603)) (g$0$11034 g$0$17597))) (if (g$0$11030 g$0$17597) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17595) (g$0$11038 g$0$17589)))) (quote #f))) ((lambda (g$0$17605) (quote ())) (g$0$11034 g$0$17589)))) (quote #f))) g$0$17581))) g$0$17572) (if (memv g$0$17580 (quote (global-macro global-macro!))) (g$0$11427 (cons (g$0$11389 g$0$17575 g$0$17572) (cdr g$0$17568)) g$0$17569) (if (memv g$0$17580 (quote (local-macro local-macro!))) (g$0$11427 (cons (g$0$11387 g$0$17575 g$0$17572) (cdr g$0$17568)) g$0$17569) (if (memv g$0$17580 (quote (macro macro!))) (g$0$11427 (cons (g$0$11385 g$0$17575 g$0$17572) (cdr g$0$17568)) g$0$17569) (g$0$11427 (cdr g$0$17568) (cons (cons (quote #f) (g$0$11395 g$0$17572 (quote ()) (quote ()))) g$0$17569))))))))))) g$0$17574)))) (car g$0$17568))))) (set! g$0$11429 (lambda (g$0$17629 g$0$17630) ((lambda (g$0$17633) ((lambda (g$0$17635) (begin (for-each ((lambda (g$0$17637) (lambda (g$0$17639) (begin (g$0$10645 g$0$17639) (g$0$17637 g$0$17639)))) (g$0$11445)) (g$0$17633)) g$0$17635)) ((lambda (g$0$17645 g$0$17646 g$0$17647 g$0$17648) ((lambda (g$0$17653) (dynamic-wind g$0$17653 (lambda () (g$0$11395 g$0$17629 g$0$17630 g$0$17630)) g$0$17653)) (lambda () (begin ((lambda (g$0$17655) (begin (g$0$17645 g$0$17647) (set! g$0$17647 g$0$17655))) (g$0$17645)) ((lambda (g$0$17657) (begin (g$0$17646 g$0$17648) (set! g$0$17648 g$0$17657))) (g$0$17646)))))) g$0$11443 g$0$11445 g$0$17633 (lambda (g$0$17659) (values))))) (g$0$11441)))) (set! g$0$11431 (lambda (g$0$17661) (letrec ((g$0$17663 (lambda (g$0$17665 g$0$17666 g$0$17667) (if (null? g$0$17665) (begin ((lambda (g$0$17671) (if (g$0$11050 g$0$17671) (void) (error (quote expander) (quote "invalid exports of ~s") (g$0$11409 g$0$17671)))) (map (lambda (g$0$17673) (g$0$11016 g$0$17673 g$0$10946 (quote ()))) g$0$17667)) (values g$0$17666 g$0$17667)) ((lambda (g$0$17675) ((lambda (g$0$17677) (if (if g$0$17677 (begin (quote #f) (apply (lambda (g$0$17679 g$0$17680 g$0$17681) (quote #t)) g$0$17677)) (quote #f)) (apply (lambda (g$0$17685 g$0$17686 g$0$17687) (begin (if (if (eq? g$0$17685 (quote rename)) (if (for-all symbol? g$0$17686) (begin (quote #f) (for-all symbol? g$0$17687)) (quote #f)) (quote #f)) (void) (error (quote expander) (quote "invalid export specifier ~s") (car g$0$17665))) (g$0$17663 (cdr g$0$17665) (append g$0$17686 g$0$17666) (append g$0$17687 g$0$17667)))) g$0$17677) ((lambda (g$0$17691) ((lambda (g$0$17693) (if (if g$0$17693 (begin (quote #f) (apply (lambda (g$0$17695) (quote #t)) g$0$17693)) (quote #f)) (apply (lambda (g$0$17697) (begin (if (symbol? g$0$17697) (void) (error (quote expander) (quote "invalid export ~s") g$0$17697)) (g$0$17663 (cdr g$0$17665) (cons g$0$17697 g$0$17666) (cons g$0$17697 g$0$17667)))) g$0$17693) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17691 (quote ()))))) ((lambda (g$0$17699) (list g$0$17699)) g$0$17691))) g$0$17675))) ((lambda (g$0$17701) (if (g$0$11026 g$0$17701) (begin (quote #f) ((lambda (g$0$17703) (if g$0$17703 (begin (quote #f) ((lambda (g$0$17705) (if g$0$17705 (begin (quote #f) (append g$0$17703 g$0$17705)) (quote #f))) ((letrec ((g$0$17707 (lambda (g$0$17709) (if (g$0$11026 g$0$17709) ((lambda (g$0$17711) (if g$0$17711 (begin (quote #f) ((lambda (g$0$17713) (if g$0$17713 (begin (quote #f) (map cons g$0$17711 g$0$17713)) (quote #f))) (g$0$17707 (g$0$11038 g$0$17709)))) (quote #f))) ((lambda (g$0$17715) (if (g$0$11026 g$0$17715) (begin (quote #f) ((lambda (g$0$17717) (if g$0$17717 (begin (quote #f) ((lambda (g$0$17719) (if g$0$17719 (begin (quote #f) (append g$0$17717 g$0$17719)) (quote #f))) ((lambda (g$0$17721) (if (g$0$11026 g$0$17721) (begin (quote #f) ((lambda (g$0$17723) (if g$0$17723 (begin (quote #f) ((lambda (g$0$17725) (if g$0$17725 (begin (quote #f) (append g$0$17723 g$0$17725)) (quote #f))) ((lambda (g$0$17727) (if (equal? (g$0$11060 g$0$17727) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$17721)))) (quote #f))) ((lambda (g$0$17729) (list g$0$17729)) (g$0$11034 g$0$17721)))) (quote #f))) (g$0$11038 g$0$17715)))) (quote #f))) ((lambda (g$0$17731) (list g$0$17731)) (g$0$11034 g$0$17715)))) (quote #f))) (g$0$11034 g$0$17709))) (if (g$0$11030 g$0$17709) (list (begin (quote i*) (quote ())) (begin (quote e*) (quote ()))) (quote #f)))))) g$0$17707) (g$0$11038 g$0$17701)))) (quote #f))) ((lambda (g$0$17733) (list g$0$17733)) (g$0$11034 g$0$17701)))) (quote #f))) g$0$17675))) (car g$0$17665)))))) (g$0$17663 g$0$17661 (quote ()) (quote ()))))) (set! g$0$11433 (lambda (g$0$17735) ((lambda (g$0$17737) (begin (set! g$0$17737 (lambda (g$0$17739) ((lambda (g$0$17741) ((lambda (g$0$17743) (if (if g$0$17743 (begin (quote #f) (apply (lambda (g$0$17745 g$0$17746) (if (for-all symbol? g$0$17745) (begin (quote #f) (for-all (lambda (g$0$17749) (if (integer? g$0$17749) (begin (quote #f) (exact? g$0$17749)) (quote #f))) g$0$17746)) (quote #f))) g$0$17743)) (quote #f)) (apply (lambda (g$0$17751 g$0$17752) (values g$0$17751 g$0$17752)) g$0$17743) ((lambda (g$0$17755) ((lambda (g$0$17757) (if (if g$0$17757 (begin (quote #f) (apply (lambda (g$0$17759) (for-all symbol? g$0$17759)) g$0$17757)) (quote #f)) (apply (lambda (g$0$17761) (values g$0$17761 (quote ()))) g$0$17757) ((lambda (g$0$17763) ((lambda (g$0$17765) (if (if g$0$17765 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17765)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "invalid library name") (g$0$11058 g$0$17739 (quote ())))) g$0$17765) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17763 (quote ()))))) ((lambda (g$0$17767) (quote ())) g$0$17763))) g$0$17755))) ((letrec ((g$0$17769 (lambda (g$0$17771) (if (g$0$11026 g$0$17771) ((lambda (g$0$17773) (if g$0$17773 (begin (quote #f) ((lambda (g$0$17775) (if g$0$17775 (begin (quote #f) (map cons g$0$17773 g$0$17775)) (quote #f))) (g$0$17769 (g$0$11038 g$0$17771)))) (quote #f))) ((lambda (g$0$17777) (list g$0$17777)) (g$0$11034 g$0$17771))) (if (g$0$11030 g$0$17771) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$17769) g$0$17755))) g$0$17741))) ((letrec ((g$0$17779 (lambda (g$0$17785) (if (g$0$11026 g$0$17785) ((lambda (g$0$17787) (if g$0$17787 (begin (quote #f) ((lambda (g$0$17789) (if g$0$17789 (begin (quote #f) (cons (map cons g$0$17787 (car g$0$17789)) (cdr g$0$17789))) (quote #f))) (g$0$17779 (g$0$11038 g$0$17785)))) (quote #f))) ((lambda (g$0$17791) (list g$0$17791)) (g$0$11034 g$0$17785))) ((lambda (g$0$17793) (if g$0$17793 (begin (quote #f) (cons (list (begin (quote x*) (quote ()))) g$0$17793)) (quote #f))) ((lambda (g$0$17795) (if (g$0$11026 g$0$17795) (begin (quote #f) ((lambda (g$0$17797) (if g$0$17797 (begin (quote #f) ((lambda (g$0$17799) (if g$0$17799 (begin (quote #f) (append g$0$17797 g$0$17799)) (quote #f))) ((lambda (g$0$17801) (if (equal? (g$0$11060 g$0$17801) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$17795)))) (quote #f))) ((letrec ((g$0$17803 (lambda (g$0$17805) (if (g$0$11026 g$0$17805) ((lambda (g$0$17807) (if g$0$17807 (begin (quote #f) ((lambda (g$0$17809) (if g$0$17809 (begin (quote #f) (map cons g$0$17807 g$0$17809)) (quote #f))) (g$0$17803 (g$0$11038 g$0$17805)))) (quote #f))) ((lambda (g$0$17811) (list g$0$17811)) (g$0$11034 g$0$17805))) (if (g$0$11030 g$0$17805) (list (begin (quote v*) (quote ()))) (quote #f)))))) g$0$17803) (g$0$11034 g$0$17795)))) (quote #f))) g$0$17785)))))) (lambda (g$0$17781) ((lambda (g$0$17783) (if g$0$17783 (begin (quote #f) (append (car g$0$17783) (cdr g$0$17783))) (quote #f))) (g$0$17779 g$0$17781)))) g$0$17741))) g$0$17739))) (call-with-values (lambda () (g$0$17737 g$0$17735)) (lambda (g$0$17813 g$0$17814) (begin (if (null? g$0$17813) (error (quote expander) (quote "~a ~s") (quote "empty library name") (g$0$11058 g$0$17735 (quote ()))) (void)) (values g$0$17813 g$0$17814)))))) (quote #f)))) (set! g$0$11435 (lambda (g$0$17817) ((lambda (g$0$17819) ((lambda (g$0$17821) (if (if g$0$17821 (begin (quote #f) (apply (lambda (g$0$17823 g$0$17824 g$0$17825 g$0$17826 g$0$17827 g$0$17828 g$0$17829) (if (eq? g$0$17825 (quote export)) (if (eq? g$0$17827 (quote import)) (begin (quote #f) (eq? g$0$17823 (quote library))) (quote #f)) (quote #f))) g$0$17821)) (quote #f)) (apply (lambda (g$0$17837 g$0$17838 g$0$17839 g$0$17840 g$0$17841 g$0$17842 g$0$17843) (values g$0$17838 g$0$17840 g$0$17842 g$0$17843)) g$0$17821) ((lambda (g$0$17851) ((lambda (g$0$17853) (if (if g$0$17853 (begin (quote #f) (apply (lambda () (quote #t)) g$0$17853)) (quote #f)) (apply (lambda () (error (quote expander) (quote "~a ~s") (quote "malformed library") (g$0$11058 g$0$17817 (quote ())))) g$0$17853) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$17851 (quote ()))))) ((lambda (g$0$17855) (quote ())) g$0$17851))) g$0$17819))) ((lambda (g$0$17857) (if (g$0$11026 g$0$17857) (begin (quote #f) ((lambda (g$0$17859) (if g$0$17859 (begin (quote #f) ((lambda (g$0$17861) (if g$0$17861 (begin (quote #f) (append g$0$17859 g$0$17861)) (quote #f))) ((lambda (g$0$17863) (if (g$0$11026 g$0$17863) (begin (quote #f) ((lambda (g$0$17865) (if g$0$17865 (begin (quote #f) ((lambda (g$0$17867) (if g$0$17867 (begin (quote #f) (append g$0$17865 g$0$17867)) (quote #f))) ((lambda (g$0$17869) (if (g$0$11026 g$0$17869) (begin (quote #f) ((lambda (g$0$17871) (if g$0$17871 (begin (quote #f) ((lambda (g$0$17873) (if g$0$17873 (begin (quote #f) (append g$0$17871 g$0$17873)) (quote #f))) ((lambda (g$0$17875) (if (g$0$11026 g$0$17875) (begin (quote #f) ((lambda (g$0$17877) (if g$0$17877 (begin (quote #f) ((lambda (g$0$17879) (if g$0$17879 (begin (quote #f) (append g$0$17877 g$0$17879)) (quote #f))) ((letrec ((g$0$17881 (lambda (g$0$17883) (if (g$0$11026 g$0$17883) ((lambda (g$0$17885) (if g$0$17885 (begin (quote #f) ((lambda (g$0$17887) (if g$0$17887 (begin (quote #f) (map cons g$0$17885 g$0$17887)) (quote #f))) (g$0$17881 (g$0$11038 g$0$17883)))) (quote #f))) ((lambda (g$0$17889) (list g$0$17889)) (g$0$11034 g$0$17883))) (if (g$0$11030 g$0$17883) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$17881) (g$0$11038 g$0$17875)))) (quote #f))) ((lambda (g$0$17891) (if (g$0$11026 g$0$17891) (begin (quote #f) ((lambda (g$0$17893) (if g$0$17893 (begin (quote #f) ((lambda (g$0$17895) (if g$0$17895 (begin (quote #f) (append g$0$17893 g$0$17895)) (quote #f))) ((letrec ((g$0$17897 (lambda (g$0$17899) (if (g$0$11026 g$0$17899) ((lambda (g$0$17901) (if g$0$17901 (begin (quote #f) ((lambda (g$0$17903) (if g$0$17903 (begin (quote #f) (map cons g$0$17901 g$0$17903)) (quote #f))) (g$0$17897 (g$0$11038 g$0$17899)))) (quote #f))) ((lambda (g$0$17905) (list g$0$17905)) (g$0$11034 g$0$17899))) (if (g$0$11030 g$0$17899) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$17897) (g$0$11038 g$0$17891)))) (quote #f))) ((lambda (g$0$17907) (list g$0$17907)) (g$0$11034 g$0$17891)))) (quote #f))) (g$0$11034 g$0$17875)))) (quote #f))) (g$0$11038 g$0$17869)))) (quote #f))) ((lambda (g$0$17909) (if (g$0$11026 g$0$17909) (begin (quote #f) ((lambda (g$0$17911) (if g$0$17911 (begin (quote #f) ((lambda (g$0$17913) (if g$0$17913 (begin (quote #f) (append g$0$17911 g$0$17913)) (quote #f))) ((letrec ((g$0$17915 (lambda (g$0$17917) (if (g$0$11026 g$0$17917) ((lambda (g$0$17919) (if g$0$17919 (begin (quote #f) ((lambda (g$0$17921) (if g$0$17921 (begin (quote #f) (map cons g$0$17919 g$0$17921)) (quote #f))) (g$0$17915 (g$0$11038 g$0$17917)))) (quote #f))) ((lambda (g$0$17923) (list g$0$17923)) (g$0$11034 g$0$17917))) (if (g$0$11030 g$0$17917) (list (begin (quote exp*) (quote ()))) (quote #f)))))) g$0$17915) (g$0$11038 g$0$17909)))) (quote #f))) ((lambda (g$0$17925) (list g$0$17925)) (g$0$11034 g$0$17909)))) (quote #f))) (g$0$11034 g$0$17869)))) (quote #f))) (g$0$11038 g$0$17863)))) (quote #f))) ((letrec ((g$0$17927 (lambda (g$0$17929) (if (g$0$11026 g$0$17929) ((lambda (g$0$17931) (if g$0$17931 (begin (quote #f) ((lambda (g$0$17933) (if g$0$17933 (begin (quote #f) (map cons g$0$17931 g$0$17933)) (quote #f))) (g$0$17927 (g$0$11038 g$0$17929)))) (quote #f))) ((lambda (g$0$17935) (list g$0$17935)) (g$0$11034 g$0$17929))) (if (g$0$11030 g$0$17929) (list (begin (quote name*) (quote ()))) (quote #f)))))) g$0$17927) (g$0$11034 g$0$17863)))) (quote #f))) (g$0$11038 g$0$17857)))) (quote #f))) ((lambda (g$0$17937) (list g$0$17937)) (g$0$11034 g$0$17857)))) (quote #f))) g$0$17819))) g$0$17817))) (set! g$0$11437 (lambda (g$0$17939) ((lambda (g$0$17941 g$0$17943 g$0$17945 g$0$17947 g$0$17949 g$0$17951 g$0$17953) (begin (set! g$0$17941 (g$0$11441)) (set! g$0$17943 (lambda (g$0$18277 g$0$18278) ((lambda (g$0$18281) (begin (set! g$0$18281 (lambda (g$0$18283 g$0$18284) ((lambda (g$0$18287 g$0$18288) ((lambda (g$0$18291) (if g$0$18291 ((lambda (g$0$18293) (if (eq? (cdr g$0$18293) g$0$18288) g$0$18284 (error (quote import) (quote "two imports of ~s with different bindings") g$0$18287))) g$0$18291) (cons g$0$18283 g$0$18284))) (assq g$0$18287 g$0$18284))) (car g$0$18283) (cdr g$0$18283)))) (if (null? g$0$18277) g$0$18278 (g$0$18281 (car g$0$18277) (g$0$17943 (cdr g$0$18277) g$0$18278))))) (quote #f)))) (set! g$0$17945 (lambda (g$0$18253 g$0$18254) ((lambda (g$0$18257) (begin (set! g$0$18257 (lambda (g$0$18259 g$0$18260) (if (null? g$0$18260) (error (quote import) (quote "cannot rename unbound identifier ~s") g$0$18259) (if (eq? g$0$18259 (caar g$0$18260)) (values (cdar g$0$18260) (cdr g$0$18260)) ((lambda (g$0$18263) (call-with-values (lambda () (g$0$18257 g$0$18259 (cdr g$0$18260))) (lambda (g$0$18265 g$0$18266) (values g$0$18265 (cons g$0$18263 g$0$18266))))) (car g$0$18260)))))) (if (null? g$0$18253) (values (quote ()) g$0$18254) (call-with-values (lambda () (g$0$18257 (car g$0$18253) g$0$18254)) (lambda (g$0$18269 g$0$18270) (call-with-values (lambda () (g$0$17945 (cdr g$0$18253) g$0$18270)) (lambda (g$0$18273 g$0$18274) (values (cons g$0$18269 g$0$18273) g$0$18274)))))))) (quote #f)))) (set! g$0$17947 (lambda (g$0$18245 g$0$18246) (map (lambda (g$0$18249) ((lambda (g$0$18251) (if g$0$18251 (cdr g$0$18251) (error (quote import) (quote "cannot find identifier ~s") g$0$18249))) (assq g$0$18249 g$0$18246))) g$0$18245))) (set! g$0$17949 (lambda (g$0$18237 g$0$18238) (letrec ((g$0$18241 (lambda (g$0$18243) (if (null? g$0$18243) (quote ()) (if (memq (caar g$0$18243) g$0$18237) (g$0$18241 (cdr g$0$18243)) (cons (car g$0$18243) (g$0$18241 (cdr g$0$18243)))))))) (g$0$18241 g$0$18238)))) (set! g$0$17951 (lambda (g$0$18235) (if (null? g$0$18235) (quote ()) (if (memq (car g$0$18235) (cdr g$0$18235)) (g$0$17951 (cdr g$0$18235)) (cons (car g$0$18235) (g$0$17951 (cdr g$0$18235))))))) (set! g$0$17953 (lambda (g$0$17955) ((lambda (g$0$17957) ((lambda (g$0$17959) (if (if g$0$17959 (begin (quote #f) (apply (lambda (g$0$17961 g$0$17962 g$0$17963 g$0$17964) (if (eq? g$0$17961 (quote rename)) (if (for-all symbol? g$0$17963) (begin (quote #f) (for-all symbol? g$0$17964)) (quote #f)) (quote #f))) g$0$17959)) (quote #f)) (apply (lambda (g$0$17969 g$0$17970 g$0$17971 g$0$17972) ((lambda (g$0$17977) ((lambda (g$0$17979) ((lambda (g$0$17981) (g$0$17943 (map cons g$0$17972 g$0$17979) g$0$17981)) (g$0$17949 g$0$17971 g$0$17977))) (g$0$17947 g$0$17971 g$0$17977))) (g$0$17953 g$0$17970))) g$0$17959) ((lambda (g$0$17983) ((lambda (g$0$17985) (if (if g$0$17985 (begin (quote #f) (apply (lambda (g$0$17987 g$0$17988 g$0$17989) (if (eq? g$0$17987 (quote except)) (begin (quote #f) (for-all symbol? g$0$17989)) (quote #f))) g$0$17985)) (quote #f)) (apply (lambda (g$0$17993 g$0$17994 g$0$17995) ((lambda (g$0$17999) (g$0$17949 g$0$17995 g$0$17999)) (g$0$17953 g$0$17994))) g$0$17985) ((lambda (g$0$18001) ((lambda (g$0$18003) (if (if g$0$18003 (begin (quote #f) (apply (lambda (g$0$18005 g$0$18006 g$0$18007) (if (eq? g$0$18005 (quote only)) (begin (quote #f) (for-all symbol? g$0$18007)) (quote #f))) g$0$18003)) (quote #f)) (apply (lambda (g$0$18011 g$0$18012 g$0$18013) ((lambda (g$0$18017) ((lambda (g$0$18019) ((lambda (g$0$18021) (map cons g$0$18019 g$0$18021)) (g$0$17947 g$0$18019 g$0$18017))) (g$0$17951 g$0$18013))) (g$0$17953 g$0$18012))) g$0$18003) ((lambda (g$0$18023) ((lambda (g$0$18025) (if (if g$0$18025 (begin (quote #f) (apply (lambda (g$0$18027 g$0$18028 g$0$18029) (if (eq? g$0$18027 (quote prefix)) (begin (quote #f) (symbol? g$0$18029)) (quote #f))) g$0$18025)) (quote #f)) (apply (lambda (g$0$18033 g$0$18034 g$0$18035) ((lambda (g$0$18039) (map (lambda (g$0$18041) (cons (string->symbol (string-append (symbol->string g$0$18035) (symbol->string (car g$0$18041)))) (cdr g$0$18041))) g$0$18039)) (g$0$17953 g$0$18034))) g$0$18025) ((lambda (g$0$18043) ((lambda (g$0$18045) (if (if g$0$18045 (begin (quote #f) (apply (lambda (g$0$18047 g$0$18048) (eq? g$0$18047 (quote library))) g$0$18045)) (quote #f)) (apply (lambda (g$0$18051 g$0$18052) ((lambda (g$0$18055) (begin (if g$0$18055 (void) (error (quote import) (quote "cannot find library satisfying ~s") g$0$18052)) (g$0$17941 g$0$18055) (g$0$10679 g$0$18055))) (g$0$10654 g$0$18052))) g$0$18045) ((lambda (g$0$18057) ((lambda (g$0$18059) (if (if g$0$18059 (begin (quote #f) (apply (lambda (g$0$18061 g$0$18062) (not (memq g$0$18061 (quote (rename except only prefix library))))) g$0$18059)) (quote #f)) (apply (lambda (g$0$18065 g$0$18066) (g$0$17953 (list (quote library) (cons g$0$18065 g$0$18066)))) g$0$18059) ((lambda (g$0$18069) ((lambda (g$0$18071) (if (if g$0$18071 (begin (quote #f) (apply (lambda (g$0$18073) (quote #t)) g$0$18071)) (quote #f)) (apply (lambda (g$0$18075) (error (quote import) (quote "invalid import spec ~s") g$0$18075)) g$0$18071) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$18069 (quote ()))))) ((lambda (g$0$18077) (list g$0$18077)) g$0$18069))) g$0$18057))) ((lambda (g$0$18079) (if (g$0$11026 g$0$18079) (begin (quote #f) ((lambda (g$0$18081) (if g$0$18081 (begin (quote #f) ((lambda (g$0$18083) (if g$0$18083 (begin (quote #f) (append g$0$18081 g$0$18083)) (quote #f))) ((letrec ((g$0$18085 (lambda (g$0$18087) (if (g$0$11026 g$0$18087) ((lambda (g$0$18089) (if g$0$18089 (begin (quote #f) ((lambda (g$0$18091) (if g$0$18091 (begin (quote #f) (map cons g$0$18089 g$0$18091)) (quote #f))) (g$0$18085 (g$0$11038 g$0$18087)))) (quote #f))) ((lambda (g$0$18093) (list g$0$18093)) (g$0$11034 g$0$18087))) (if (g$0$11030 g$0$18087) (list (begin (quote x*) (quote ()))) (quote #f)))))) g$0$18085) (g$0$11038 g$0$18079)))) (quote #f))) ((lambda (g$0$18095) (list g$0$18095)) (g$0$11034 g$0$18079)))) (quote #f))) g$0$18057))) g$0$18043))) ((lambda (g$0$18097) (if (g$0$11026 g$0$18097) (begin (quote #f) ((lambda (g$0$18099) (if g$0$18099 (begin (quote #f) ((lambda (g$0$18101) (if g$0$18101 (begin (quote #f) (append g$0$18099 g$0$18101)) (quote #f))) ((lambda (g$0$18103) (if (g$0$11026 g$0$18103) (begin (quote #f) ((lambda (g$0$18105) (if g$0$18105 (begin (quote #f) ((lambda (g$0$18107) (if g$0$18107 (begin (quote #f) (append g$0$18105 g$0$18107)) (quote #f))) ((lambda (g$0$18109) (if (equal? (g$0$11060 g$0$18109) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$18103)))) (quote #f))) ((lambda (g$0$18111) (list g$0$18111)) (g$0$11034 g$0$18103)))) (quote #f))) (g$0$11038 g$0$18097)))) (quote #f))) ((lambda (g$0$18113) (list g$0$18113)) (g$0$11034 g$0$18097)))) (quote #f))) g$0$18043))) g$0$18023))) ((lambda (g$0$18115) (if (g$0$11026 g$0$18115) (begin (quote #f) ((lambda (g$0$18117) (if g$0$18117 (begin (quote #f) ((lambda (g$0$18119) (if g$0$18119 (begin (quote #f) (append g$0$18117 g$0$18119)) (quote #f))) ((lambda (g$0$18121) (if (g$0$11026 g$0$18121) (begin (quote #f) ((lambda (g$0$18123) (if g$0$18123 (begin (quote #f) ((lambda (g$0$18125) (if g$0$18125 (begin (quote #f) (append g$0$18123 g$0$18125)) (quote #f))) ((lambda (g$0$18127) (if (g$0$11026 g$0$18127) (begin (quote #f) ((lambda (g$0$18129) (if g$0$18129 (begin (quote #f) ((lambda (g$0$18131) (if g$0$18131 (begin (quote #f) (append g$0$18129 g$0$18131)) (quote #f))) ((lambda (g$0$18133) (if (equal? (g$0$11060 g$0$18133) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$18127)))) (quote #f))) ((lambda (g$0$18135) (list g$0$18135)) (g$0$11034 g$0$18127)))) (quote #f))) (g$0$11038 g$0$18121)))) (quote #f))) ((lambda (g$0$18137) (list g$0$18137)) (g$0$11034 g$0$18121)))) (quote #f))) (g$0$11038 g$0$18115)))) (quote #f))) ((lambda (g$0$18139) (list g$0$18139)) (g$0$11034 g$0$18115)))) (quote #f))) g$0$18023))) g$0$18001))) ((lambda (g$0$18141) (if (g$0$11026 g$0$18141) (begin (quote #f) ((lambda (g$0$18143) (if g$0$18143 (begin (quote #f) ((lambda (g$0$18145) (if g$0$18145 (begin (quote #f) (append g$0$18143 g$0$18145)) (quote #f))) ((lambda (g$0$18147) (if (g$0$11026 g$0$18147) (begin (quote #f) ((lambda (g$0$18149) (if g$0$18149 (begin (quote #f) ((lambda (g$0$18151) (if g$0$18151 (begin (quote #f) (append g$0$18149 g$0$18151)) (quote #f))) ((letrec ((g$0$18153 (lambda (g$0$18155) (if (g$0$11026 g$0$18155) ((lambda (g$0$18157) (if g$0$18157 (begin (quote #f) ((lambda (g$0$18159) (if g$0$18159 (begin (quote #f) (map cons g$0$18157 g$0$18159)) (quote #f))) (g$0$18153 (g$0$11038 g$0$18155)))) (quote #f))) ((lambda (g$0$18161) (list g$0$18161)) (g$0$11034 g$0$18155))) (if (g$0$11030 g$0$18155) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$18153) (g$0$11038 g$0$18147)))) (quote #f))) ((lambda (g$0$18163) (list g$0$18163)) (g$0$11034 g$0$18147)))) (quote #f))) (g$0$11038 g$0$18141)))) (quote #f))) ((lambda (g$0$18165) (list g$0$18165)) (g$0$11034 g$0$18141)))) (quote #f))) g$0$18001))) g$0$17983))) ((lambda (g$0$18167) (if (g$0$11026 g$0$18167) (begin (quote #f) ((lambda (g$0$18169) (if g$0$18169 (begin (quote #f) ((lambda (g$0$18171) (if g$0$18171 (begin (quote #f) (append g$0$18169 g$0$18171)) (quote #f))) ((lambda (g$0$18173) (if (g$0$11026 g$0$18173) (begin (quote #f) ((lambda (g$0$18175) (if g$0$18175 (begin (quote #f) ((lambda (g$0$18177) (if g$0$18177 (begin (quote #f) (append g$0$18175 g$0$18177)) (quote #f))) ((letrec ((g$0$18179 (lambda (g$0$18181) (if (g$0$11026 g$0$18181) ((lambda (g$0$18183) (if g$0$18183 (begin (quote #f) ((lambda (g$0$18185) (if g$0$18185 (begin (quote #f) (map cons g$0$18183 g$0$18185)) (quote #f))) (g$0$18179 (g$0$11038 g$0$18181)))) (quote #f))) ((lambda (g$0$18187) (list g$0$18187)) (g$0$11034 g$0$18181))) (if (g$0$11030 g$0$18181) (list (begin (quote sym*) (quote ()))) (quote #f)))))) g$0$18179) (g$0$11038 g$0$18173)))) (quote #f))) ((lambda (g$0$18189) (list g$0$18189)) (g$0$11034 g$0$18173)))) (quote #f))) (g$0$11038 g$0$18167)))) (quote #f))) ((lambda (g$0$18191) (list g$0$18191)) (g$0$11034 g$0$18167)))) (quote #f))) g$0$17983))) g$0$17957))) ((lambda (g$0$18193) (if (g$0$11026 g$0$18193) (begin (quote #f) ((lambda (g$0$18195) (if g$0$18195 (begin (quote #f) ((lambda (g$0$18197) (if g$0$18197 (begin (quote #f) (append g$0$18195 g$0$18197)) (quote #f))) ((lambda (g$0$18199) (if (g$0$11026 g$0$18199) (begin (quote #f) ((lambda (g$0$18201) (if g$0$18201 (begin (quote #f) ((lambda (g$0$18203) (if g$0$18203 (begin (quote #f) (append g$0$18201 g$0$18203)) (quote #f))) ((letrec ((g$0$18205 (lambda (g$0$18207) (if (g$0$11026 g$0$18207) ((lambda (g$0$18209) (if g$0$18209 (begin (quote #f) ((lambda (g$0$18211) (if g$0$18211 (begin (quote #f) (map cons g$0$18209 g$0$18211)) (quote #f))) (g$0$18205 (g$0$11038 g$0$18207)))) (quote #f))) ((lambda (g$0$18213) (if (g$0$11026 g$0$18213) (begin (quote #f) ((lambda (g$0$18215) (if g$0$18215 (begin (quote #f) ((lambda (g$0$18217) (if g$0$18217 (begin (quote #f) (append g$0$18215 g$0$18217)) (quote #f))) ((lambda (g$0$18219) (if (g$0$11026 g$0$18219) (begin (quote #f) ((lambda (g$0$18221) (if g$0$18221 (begin (quote #f) ((lambda (g$0$18223) (if g$0$18223 (begin (quote #f) (append g$0$18221 g$0$18223)) (quote #f))) ((lambda (g$0$18225) (if (equal? (g$0$11060 g$0$18225) (quote ())) (begin (quote #f) (quote ())) (quote #f))) (g$0$11038 g$0$18219)))) (quote #f))) ((lambda (g$0$18227) (list g$0$18227)) (g$0$11034 g$0$18219)))) (quote #f))) (g$0$11038 g$0$18213)))) (quote #f))) ((lambda (g$0$18229) (list g$0$18229)) (g$0$11034 g$0$18213)))) (quote #f))) (g$0$11034 g$0$18207))) (if (g$0$11030 g$0$18207) (list (begin (quote old*) (quote ())) (begin (quote new*) (quote ()))) (quote #f)))))) g$0$18205) (g$0$11038 g$0$18199)))) (quote #f))) ((lambda (g$0$18231) (list g$0$18231)) (g$0$11034 g$0$18199)))) (quote #f))) (g$0$11038 g$0$18193)))) (quote #f))) ((lambda (g$0$18233) (list g$0$18233)) (g$0$11034 g$0$18193)))) (quote #f))) g$0$17957))) g$0$17955))) (letrec ((g$0$18295 (lambda (g$0$18297 g$0$18298) (if (null? g$0$18297) (values g$0$18298 (g$0$17941)) (g$0$18295 (cdr g$0$18297) (g$0$17943 (g$0$17953 (car g$0$18297)) g$0$18298)))))) (g$0$18295 g$0$17939 (quote ()))))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))) (set! g$0$11439 (lambda (g$0$18301) ((lambda (g$0$18303) (begin (for-each (lambda (g$0$18305) ((lambda (g$0$18307 g$0$18308) (g$0$10979 g$0$18303 (g$0$11016 g$0$18307 g$0$10946 (quote ())) g$0$18308)) (car g$0$18305) (cdr g$0$18305))) g$0$18301) g$0$18303)) (g$0$10977)))) (set! g$0$11441 (lambda () ((lambda (g$0$18311) (lambda g$0$18315 ((lambda (g$0$18316) (if (= g$0$18316 (quote 0)) (apply (lambda () g$0$18311) g$0$18315) (if (= g$0$18316 (quote 1)) (apply (lambda (g$0$18313) (set! g$0$18311 (g$0$10939 g$0$18313 g$0$18311))) g$0$18315) (error (quote apply) (quote "invalid arg count"))))) (length g$0$18315)))) (quote ())))) (set! g$0$11443 (g$0$10133 (lambda g$0$18317 (error (quote inv-collector) (quote "not initialized"))) (lambda (g$0$18319) (begin (if (procedure? g$0$18319) (void) (error (quote inv-collector) (quote "~s is not a procedure") g$0$18319)) g$0$18319)))) (set! g$0$11445 (g$0$10133 (lambda g$0$18321 (error (quote vis-collector) (quote "not initialized"))) (lambda (g$0$18323) (begin (if (procedure? g$0$18323) (void) (error (quote vis-collector) (quote "~s is not a procedure") g$0$18323)) g$0$18323)))) (set! g$0$11447 (lambda (g$0$18325 g$0$18326 g$0$18327) (call-with-values (lambda () (g$0$11417 g$0$18325 (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) g$0$18326 g$0$18327)) (lambda (g$0$18331 g$0$18332 g$0$18333 g$0$18334 g$0$18335 g$0$18336 g$0$18337) (values (append (apply append (reverse g$0$18336)) g$0$18331) g$0$18332 g$0$18333 (reverse g$0$18334) (reverse g$0$18335)))))) (set! g$0$11449 (lambda (g$0$18345 g$0$18346 g$0$18347) (call-with-values (lambda () (g$0$11431 g$0$18345)) (lambda (g$0$18351 g$0$18352) (call-with-values (lambda () (g$0$11437 g$0$18346)) (lambda (g$0$18353 g$0$18354) ((lambda (g$0$18359) ((lambda (g$0$18361 g$0$18362 g$0$18363) ((lambda (g$0$18371 g$0$18372 g$0$18373 g$0$18374) ((lambda (g$0$18379) (dynamic-wind g$0$18379 (lambda () (call-with-values (lambda () (g$0$11447 g$0$18361 g$0$18359 (quote #f))) (lambda (g$0$18381 g$0$18382 g$0$18383 g$0$18384 g$0$18385) (begin (g$0$10981 g$0$18359) ((lambda (g$0$18391 g$0$18392) (begin (g$0$10983 g$0$18359) ((lambda (g$0$18395) (call-with-values (lambda () (g$0$11492 g$0$18382)) (lambda (g$0$18397 g$0$18398 g$0$18399) ((lambda (g$0$18403 g$0$18404) (values g$0$18354 (g$0$18362) (g$0$18363) (g$0$10923 (quote #f) (append g$0$18404 (list g$0$18403))) g$0$18399 g$0$18395 g$0$18397)) (g$0$10920 (quote #f) g$0$18384 g$0$18391 (g$0$11488 g$0$18398 g$0$18392)) (map g$0$10937 (map cdr g$0$18398)))))) (g$0$11490 g$0$18351 g$0$18352 g$0$18359)))) (g$0$11405 g$0$18385 g$0$18382 g$0$18383) (g$0$11391 g$0$18381 g$0$18382 g$0$18383)))))) g$0$18379)) (lambda () (begin ((lambda (g$0$18407) (begin (g$0$18371 g$0$18373) (set! g$0$18373 g$0$18407))) (g$0$18371)) ((lambda (g$0$18409) (begin (g$0$18372 g$0$18374) (set! g$0$18374 g$0$18409))) (g$0$18372)))))) g$0$11443 g$0$11445 g$0$18362 g$0$18363)) (map (lambda (g$0$18411) (g$0$11016 g$0$18411 g$0$10946 (list g$0$18359))) g$0$18347) (g$0$11441) (g$0$11441))) (g$0$11439 g$0$18353)))))))) (set! g$0$11451 (lambda (g$0$18413) (call-with-values (lambda () (g$0$11435 g$0$18413)) (lambda (g$0$18415 g$0$18416 g$0$18417 g$0$18418) (call-with-values (lambda () (g$0$11433 g$0$18415)) (lambda (g$0$18423 g$0$18424) (call-with-values (lambda () (g$0$11449 g$0$18416 g$0$18417 g$0$18418)) (lambda (g$0$18427 g$0$18428 g$0$18429 g$0$18430 g$0$18431 g$0$18432 g$0$18433) (values g$0$18423 g$0$18427 g$0$18428 g$0$18429 g$0$18430 g$0$18431 g$0$18432 g$0$18433))))))))) (set! g$0$11453 (lambda (g$0$18441) ((lambda (g$0$18443) ((lambda (g$0$18445) (if (if g$0$18445 (begin (quote #f) (apply (lambda (g$0$18447 g$0$18448 g$0$18449) (eq? g$0$18447 (quote import))) g$0$18445)) (quote #f)) (apply (lambda (g$0$18453 g$0$18454 g$0$18455) (values g$0$18454 g$0$18455)) g$0$18445) ((lambda (g$0$18459) ((lambda (g$0$18461) (if (if g$0$18461 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18461)) (quote #f)) (apply (lambda () (error (quote "invalid syntax of top-level program"))) g$0$18461) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$18459 (quote ()))))) ((lambda (g$0$18463) (quote ())) g$0$18459))) g$0$18443))) ((lambda (g$0$18465) (if (g$0$11026 g$0$18465) (begin (quote #f) ((lambda (g$0$18467) (if g$0$18467 (begin (quote #f) ((lambda (g$0$18469) (if g$0$18469 (begin (quote #f) (append g$0$18467 g$0$18469)) (quote #f))) ((letrec ((g$0$18471 (lambda (g$0$18473) (if (g$0$11026 g$0$18473) ((lambda (g$0$18475) (if g$0$18475 (begin (quote #f) ((lambda (g$0$18477) (if g$0$18477 (begin (quote #f) (map cons g$0$18475 g$0$18477)) (quote #f))) (g$0$18471 (g$0$11038 g$0$18473)))) (quote #f))) ((lambda (g$0$18479) (list g$0$18479)) (g$0$11034 g$0$18473))) (if (g$0$11030 g$0$18473) (list (begin (quote b*) (quote ()))) (quote #f)))))) g$0$18471) (g$0$11038 g$0$18465)))) (quote #f))) ((lambda (g$0$18481) (if (g$0$11026 g$0$18481) (begin (quote #f) ((lambda (g$0$18483) (if g$0$18483 (begin (quote #f) ((lambda (g$0$18485) (if g$0$18485 (begin (quote #f) (append g$0$18483 g$0$18485)) (quote #f))) ((letrec ((g$0$18487 (lambda (g$0$18489) (if (g$0$11026 g$0$18489) ((lambda (g$0$18491) (if g$0$18491 (begin (quote #f) ((lambda (g$0$18493) (if g$0$18493 (begin (quote #f) (map cons g$0$18491 g$0$18493)) (quote #f))) (g$0$18487 (g$0$11038 g$0$18489)))) (quote #f))) ((lambda (g$0$18495) (list g$0$18495)) (g$0$11034 g$0$18489))) (if (g$0$11030 g$0$18489) (list (begin (quote imp*) (quote ()))) (quote #f)))))) g$0$18487) (g$0$11038 g$0$18481)))) (quote #f))) ((lambda (g$0$18497) (list g$0$18497)) (g$0$11034 g$0$18481)))) (quote #f))) (g$0$11034 g$0$18465)))) (quote #f))) g$0$18443))) g$0$18441))) (set! g$0$11455 (lambda (g$0$18499) (call-with-values (lambda () (g$0$11453 g$0$18499)) (lambda (g$0$18501 g$0$18502) (call-with-values (lambda () (g$0$11449 (quote ()) g$0$18501 g$0$18502)) (lambda (g$0$18505 g$0$18506 g$0$18507 g$0$18508 g$0$18509 g$0$18510 g$0$18511) (values g$0$18506 g$0$18508))))))) (set! g$0$11458 (lambda (g$0$18519 g$0$18520) (vector (quote g$0$11457) g$0$18519 g$0$18520))) (set! g$0$11460 (lambda (g$0$18523) (if (vector? g$0$18523) (if (= (vector-length g$0$18523) (+ (quote 1) (length (quote (subst imp*))))) (begin (quote #f) (eq? (vector-ref g$0$18523 (quote 0)) (quote g$0$11457))) (quote #f)) (quote #f)))) (set! g$0$11462 (lambda (g$0$18525) (if (g$0$11460 g$0$18525) (vector-ref g$0$18525 (quote 1)) (error (quote env-subst) (quote "~s is not of type ~s") g$0$18525 (quote env))))) (set! g$0$11464 (lambda (g$0$18527) (if (g$0$11460 g$0$18527) (vector-ref g$0$18527 (quote 2)) (error (quote env-imp*) (quote "~s is not of type ~s") g$0$18527 (quote env))))) (set! g$0$11466 (lambda (g$0$18529 g$0$18530) (if (g$0$11460 g$0$18529) (vector-set! g$0$18529 (quote 1) g$0$18530) (error (quote set-env-subst!) (quote "~s is not of type ~s") g$0$18529 (quote env))))) (set! g$0$11468 (lambda (g$0$18533 g$0$18534) (if (g$0$11460 g$0$18533) (vector-set! g$0$18533 (quote 2) g$0$18534) (error (quote set-env-imp*!) (quote "~s is not of type ~s") g$0$18533 (quote env))))) (set! g$0$11470 (lambda (g$0$18537) (g$0$11460 g$0$18537))) (set! g$0$11472 (lambda g$0$18539 (call-with-values (lambda () (g$0$11437 g$0$18539)) (lambda (g$0$18541 g$0$18542) (g$0$11458 g$0$18541 g$0$18542))))) (set! g$0$11474 (lambda (g$0$18545) (begin (if (eqv? g$0$18545 (quote 5)) (void) (error (quote null-environment) (quote "~s is not 5") g$0$18545)) (g$0$11472 (quote (psyntax null-environment-5)))))) (set! g$0$11476 (lambda (g$0$18547) (begin (if (eqv? g$0$18547 (quote 5)) (void) (error (quote scheme-report-environment) (quote "~s is not 5") g$0$18547)) (g$0$11472 (quote (psyntax scheme-report-environment-5)))))) (set! g$0$11478 (lambda (g$0$18549 g$0$18550) (begin (if (g$0$11460 g$0$18550) (void) (error (quote expand) (quote "~s is not an environment") g$0$18550)) ((lambda (g$0$18553) ((lambda (g$0$18555) ((lambda (g$0$18557 g$0$18558 g$0$18559) ((lambda (g$0$18563) (begin (g$0$10981 g$0$18555) (values g$0$18563 (g$0$18558)))) ((lambda (g$0$18569 g$0$18570 g$0$18571 g$0$18572) ((lambda (g$0$18577) (dynamic-wind g$0$18577 (lambda () (g$0$11395 g$0$18557 (quote ()) (quote ()))) g$0$18577)) (lambda () (begin ((lambda (g$0$18579) (begin (g$0$18569 g$0$18571) (set! g$0$18571 g$0$18579))) (g$0$18569)) ((lambda (g$0$18581) (begin (g$0$18570 g$0$18572) (set! g$0$18572 g$0$18581))) (g$0$18570)))))) g$0$11443 g$0$11445 g$0$18558 g$0$18559))) (g$0$11016 g$0$18549 g$0$10946 (list g$0$18555)) (g$0$11441) (g$0$11441))) (g$0$11439 g$0$18553))) (g$0$11462 g$0$18550))))) (set! g$0$11480 (lambda (g$0$18583 g$0$18584) (begin (if (g$0$11460 g$0$18584) (void) (error (quote eval) (quote "~s is not an environment") g$0$18584)) (call-with-values (lambda () (g$0$11478 g$0$18583 g$0$18584)) (lambda (g$0$18587 g$0$18588) (begin (for-each g$0$10645 g$0$18588) (eval-core (g$0$10207 g$0$18587)))))))) (set! g$0$11482 (lambda (g$0$18591) ((lambda (g$0$18593 g$0$18595) (begin (set! g$0$18593 (lambda (g$0$18605) (if (null? g$0$18605) (g$0$10922) (g$0$10923 (quote #f) (map (lambda (g$0$18607) ((lambda (g$0$18609 g$0$18610) (list (quote set!) g$0$18609 g$0$18610)) (car g$0$18607) (cddr g$0$18607))) g$0$18605))))) (set! g$0$18595 (lambda (g$0$18597) (for-each (lambda (g$0$18599) ((lambda (g$0$18601 g$0$18602) (set-symbol-value! g$0$18601 g$0$18602)) (car g$0$18599) (cadr g$0$18599))) g$0$18597))) (call-with-values (lambda () (g$0$11451 g$0$18591)) (lambda (g$0$18613 g$0$18614 g$0$18615 g$0$18616 g$0$18617 g$0$18618 g$0$18619 g$0$18620) ((lambda (g$0$18629 g$0$18630 g$0$18631 g$0$18632 g$0$18633 g$0$18634) (begin (g$0$10649 g$0$18629 g$0$18630 g$0$18631 g$0$18632 g$0$18633 g$0$18634 g$0$18619 g$0$18620 (lambda () (g$0$18595 g$0$18618)) (lambda () (eval-core (g$0$10207 g$0$18617))) (quote #t)) (values g$0$18617 (g$0$18593 g$0$18618) g$0$18619 g$0$18620))) (gensym) g$0$18613 (quote ()) (map g$0$10641 g$0$18614) (map g$0$10641 g$0$18616) (map g$0$10641 g$0$18615)))))) (quote #f) (quote #f)))) (set! g$0$11484 (lambda (g$0$18641) (call-with-values (lambda () (g$0$11482 g$0$18641)) (lambda (g$0$18643 g$0$18644 g$0$18645 g$0$18646) (values g$0$18643 g$0$18645 g$0$18646))))) (set! g$0$11486 (lambda (g$0$18651 g$0$18652 g$0$18653) (if (null? g$0$18652) g$0$18653 (g$0$11486 g$0$18651 (cdr g$0$18652) (cons (g$0$18651 (car g$0$18652)) g$0$18653))))) (set! g$0$11488 (lambda (g$0$18657 g$0$18658) (g$0$10923 (quote #f) (cons (g$0$10922) (g$0$11486 (lambda (g$0$18661) (list (quote set!) (cdr g$0$18661) (car g$0$18661))) g$0$18657 g$0$18658))))) (set! g$0$11490 (lambda (g$0$18663 g$0$18664 g$0$18665) (map (lambda (g$0$18669 g$0$18670) ((lambda (g$0$18673) ((lambda (g$0$18675) ((lambda () (begin (if g$0$18675 (void) (error (quote expander) (quote "~a ~s") (quote "cannot export unbound identifier") (g$0$11058 g$0$18673 (quote ())))) (cons g$0$18670 g$0$18675))))) (g$0$11062 g$0$18673))) (g$0$11016 g$0$18669 g$0$10946 (list g$0$18665)))) g$0$18663 g$0$18664))) (set! g$0$11492 (lambda (g$0$18677) (letrec ((g$0$18679 (lambda (g$0$18681 g$0$18682 g$0$18683 g$0$18684) (if (null? g$0$18681) (values g$0$18682 g$0$18683 g$0$18684) ((lambda (g$0$18689) ((lambda (g$0$18691 g$0$18692) ((lambda (g$0$18695) (if (memv g$0$18695 (quote (lexical))) ((lambda (g$0$18700) (g$0$18679 (cdr g$0$18681) (cons (cons* g$0$18691 (quote global) g$0$18700) g$0$18682) (cons (cons (g$0$11070 g$0$18692) g$0$18700) g$0$18683) g$0$18684)) (g$0$10952 (g$0$11070 g$0$18692))) (if (memv g$0$18695 (quote (local-macro))) ((lambda (g$0$18698) (g$0$18679 (cdr g$0$18681) (cons (cons* g$0$18691 (quote global-macro) g$0$18698) g$0$18682) g$0$18683 (cons (cons g$0$18698 (g$0$11070 g$0$18692)) g$0$18684))) (gensym)) (if (memv g$0$18695 (quote (local-macro!))) ((lambda (g$0$18696) (g$0$18679 (cdr g$0$18681) (cons (cons* g$0$18691 (quote global-macro!) g$0$18696) g$0$18682) g$0$18683 (cons (cons g$0$18696 (g$0$11070 g$0$18692)) g$0$18684))) (gensym)) (if (memv g$0$18695 (quote ($rtd $module))) (g$0$18679 (cdr g$0$18681) (cons g$0$18689 g$0$18682) g$0$18683 g$0$18684) (error (quote expander) (quote "BUG: do not know how to export ~s ~s") (g$0$11068 g$0$18692) (g$0$11070 g$0$18692))))))) (g$0$11068 g$0$18692))) (car g$0$18689) (cdr g$0$18689))) (car g$0$18681)))))) (g$0$18679 g$0$18677 (quote ()) (quote ()) (quote ()))))) (set! g$0$11494 (lambda (g$0$18702) ((lambda (g$0$18704) ((lambda (g$0$18706) (if (if g$0$18706 (begin (quote #f) (apply (lambda (g$0$18708) (quote #t)) g$0$18706)) (quote #f)) (apply (lambda (g$0$18710) (map (lambda (g$0$18712) (g$0$10990 (gensym (quote t)) g$0$10946 (quote ()))) g$0$18710)) g$0$18706) ((lambda (g$0$18714) ((lambda (g$0$18716) (if (if g$0$18716 (begin (quote #f) (apply (lambda () (quote #t)) g$0$18716)) (quote #f)) (apply (lambda () (error (quote generate-temporaries) (quote "~s is not a list"))) g$0$18716) (error (quote expander) (quote "~a ~s") (quote "invalid syntax") (g$0$11058 g$0$18714 (quote ()))))) ((lambda (g$0$18718) (quote ())) g$0$18714))) g$0$18704))) ((letrec ((g$0$18720 (lambda (g$0$18722) (if (g$0$11026 g$0$18722) ((lambda (g$0$18724) (if g$0$18724 (begin (quote #f) ((lambda (g$0$18726) (if g$0$18726 (begin (quote #f) (map cons g$0$18724 g$0$18726)) (quote #f))) (g$0$18720 (g$0$11038 g$0$18722)))) (quote #f))) ((lambda (g$0$18728) (list g$0$18728)) (g$0$11034 g$0$18722))) (if (g$0$11030 g$0$18722) (list (begin (quote ls) (quote ()))) (quote #f)))))) g$0$18720) g$0$18704))) g$0$18702))) (set! g$0$11496 (lambda (g$0$18730 g$0$18731) (if (g$0$11040 g$0$18730) (if (g$0$11040 g$0$18731) (g$0$11048 g$0$18730 g$0$18731) (error (quote free-identifier=?) (quote "~s is not an identifier") g$0$18731)) (error (quote free-identifier=?) (quote "~s is not an identifier") g$0$18730)))) (set! g$0$11498 (lambda (g$0$18734 g$0$18735) (if (g$0$11040 g$0$18734) (if (g$0$11040 g$0$18735) (g$0$11046 g$0$18734 g$0$18735) (error (quote bound-identifier=?) (quote "~s is not an identifier") g$0$18735)) (error (quote bound-identifier=?) (quote "~s is not an identifier") g$0$18734)))) (set! g$0$11500 (lambda (g$0$18738 . g$0$18740) (begin (if (for-all string? g$0$18740) (void) (error (quote syntax-error) (quote "invalid argument ~s") g$0$18740)) (if (null? g$0$18740) (error (quote expander) (quote "invalid syntax ~s") (g$0$11060 g$0$18738)) (error (quote expander) (quote "~s ~a") (g$0$11060 g$0$18738) (apply string-append g$0$18740)))))) (set! g$0$11502 (lambda (g$0$18742) (g$0$11040 g$0$18742))) (set! g$0$11504 (lambda (g$0$18744 g$0$18745) (if (g$0$11040 g$0$18744) (g$0$11006 g$0$18744 g$0$18745) (error (quote datum->syntax) (quote "~s is not an identifier") g$0$18744)))) (set! g$0$11506 (lambda (g$0$18748) (g$0$11060 g$0$18748))) (set! g$0$11508 (lambda (g$0$18750) (call-with-values (lambda () (g$0$11455 g$0$18750)) (lambda (g$0$18752 g$0$18753) (begin (for-each g$0$10645 g$0$18752) (eval-core (g$0$10207 g$0$18753))))))) (set! g$0$11510 (g$0$10133 (quote #f))) (set! g$0$11512 (lambda (g$0$18756) ((lambda (g$0$18758) (if g$0$18758 ((lambda (g$0$18760) ((lambda (g$0$18762) (if g$0$18762 (cdr g$0$18762) ((lambda (g$0$18764) ((lambda (g$0$18766) (if g$0$18766 ((lambda (g$0$18768) ((lambda (g$0$18770) (begin (g$0$10648 g$0$18760 g$0$18756 g$0$18770) g$0$18770)) (cdr g$0$18768))) g$0$18766) ((lambda (g$0$18772) (begin (g$0$10648 g$0$18760 g$0$18756 g$0$18772) (g$0$10647 g$0$18760 g$0$18772 (cons (quote global) (cons g$0$18760 (g$0$10952 g$0$18756)))) g$0$18772)) (g$0$10954 g$0$18756)))) (assq g$0$18756 g$0$18764))) (if (g$0$10653 (quote (ikarus))) (g$0$10679 (g$0$10654 (quote (ikarus)))) (quote ()))))) (assq g$0$18756 (g$0$10679 g$0$18760)))) g$0$18758) (quote #f))) (g$0$11510)))) (set! g$0$11514 (lambda (g$0$18774) ((lambda (g$0$18776) (begin (set! g$0$18776 (lambda (g$0$18778) ((lambda (g$0$18780 g$0$18781) (if g$0$18780 (set-symbol-value! g$0$18780 (eval-core (g$0$10207 g$0$18781))) (eval-core (g$0$10207 g$0$18781)))) (car g$0$18778) (cdr g$0$18778)))) ((lambda (g$0$18784 g$0$18785) ((lambda (g$0$18788) (begin (for-each g$0$10645 (g$0$18784)) (if (null? g$0$18788) (void) (begin (for-each g$0$18776 (reverse (cdr g$0$18788))) (g$0$18776 (car g$0$18788)))))) ((lambda (g$0$18796 g$0$18797 g$0$18798 g$0$18799 g$0$18800 g$0$18801) ((lambda (g$0$18808) (dynamic-wind g$0$18808 (lambda () (g$0$11427 (list (g$0$11016 g$0$18774 g$0$10946 (quote ()))) (quote ()))) g$0$18808)) (lambda () (begin ((lambda (g$0$18810) (begin (g$0$18796 g$0$18799) (set! g$0$18799 g$0$18810))) (g$0$18796)) ((lambda (g$0$18812) (begin (g$0$18797 g$0$18800) (set! g$0$18800 g$0$18812))) (g$0$18797)) ((lambda (g$0$18814) (begin (g$0$18798 g$0$18801) (set! g$0$18801 g$0$18814))) (g$0$18798)))))) g$0$11443 g$0$11445 g$0$11510 g$0$18784 g$0$18785 (g$0$10654 (quote (ikarus interaction)))))) (g$0$11441) (g$0$11441)))) (quote #f)))) (begin (set! g$0$18816 g$0$11514) (set! g$0$18817 g$0$11512) (set! g$0$18818 g$0$11510) (set! g$0$18819 g$0$11508) (set! g$0$18820 g$0$11506) (set! g$0$18821 g$0$11504) (set! g$0$18822 g$0$11502) (set! g$0$18823 g$0$11500) (set! g$0$18824 g$0$11498) (set! g$0$18825 g$0$11496) (set! g$0$18826 g$0$11494) (set! g$0$18827 g$0$11492) (set! g$0$18828 g$0$11490) (set! g$0$18829 g$0$11488) (set! g$0$18830 g$0$11486) (set! g$0$18831 g$0$11484) (set! g$0$18832 g$0$11482) (set! g$0$18833 g$0$11480) (set! g$0$18834 g$0$11478) (set! g$0$18835 g$0$11476) (set! g$0$18836 g$0$11474) (set! g$0$18837 g$0$11472) (set! g$0$18838 g$0$11470) (set! g$0$18839 g$0$11468) (set! g$0$18840 g$0$11466) (set! g$0$18841 g$0$11464) (set! g$0$18842 g$0$11462) (set! g$0$18843 g$0$11460) (set! g$0$18844 g$0$11458) (set! g$0$18845 g$0$11455) (set! g$0$18846 g$0$11453) (set! g$0$18847 g$0$11451) (set! g$0$18848 g$0$11449) (set! g$0$18849 g$0$11447) (set! g$0$18850 g$0$11445) (set! g$0$18851 g$0$11443) (set! g$0$18852 g$0$11441) (set! g$0$18853 g$0$11439) (set! g$0$18854 g$0$11437) (set! g$0$18855 g$0$11435) (set! g$0$18856 g$0$11433) (set! g$0$18857 g$0$11431) (set! g$0$18858 g$0$11429) (set! g$0$18859 g$0$11427) (set! g$0$18860 g$0$11425) (set! g$0$18861 g$0$11423) (set! g$0$18862 g$0$11421) (set! g$0$18863 g$0$11419) (set! g$0$18864 g$0$11417) (set! g$0$18865 g$0$11415) (set! g$0$18866 g$0$11413) (set! g$0$18867 g$0$11411) (set! g$0$18868 g$0$11409) (set! g$0$18869 g$0$11407) (set! g$0$18870 g$0$11405) (set! g$0$18871 g$0$11403) (set! g$0$18872 g$0$11401) (set! g$0$18873 g$0$11399) (set! g$0$18874 g$0$11397) (set! g$0$18875 g$0$11395) (set! g$0$18876 g$0$11393) (set! g$0$18877 g$0$11391) (set! g$0$18878 g$0$11389) (set! g$0$18879 g$0$11387) (set! g$0$18880 g$0$11385) (set! g$0$18881 g$0$11383) (set! g$0$18882 g$0$11381) (set! g$0$18883 g$0$11379) (set! g$0$18884 g$0$11377) (set! g$0$18885 g$0$11375) (set! g$0$18886 g$0$11373) (set! g$0$18887 g$0$11371) (set! g$0$18888 g$0$11369) (set! g$0$18889 g$0$11367) (set! g$0$18890 g$0$11365) (set! g$0$18891 g$0$11363) (set! g$0$18892 g$0$11361) (set! g$0$18893 g$0$11359) (set! g$0$18894 g$0$11357) (set! g$0$18895 g$0$11355) (set! g$0$18896 g$0$11353) (set! g$0$18897 g$0$11351) (set! g$0$18898 g$0$11349) (set! g$0$18899 g$0$11347) (set! g$0$18900 g$0$11345) (set! g$0$18901 g$0$11343) (set! g$0$18902 g$0$11341) (set! g$0$18903 g$0$11339) (set! g$0$18904 g$0$11337) (set! g$0$18905 g$0$11335) (set! g$0$18906 g$0$11333) (set! g$0$18907 g$0$11331) (set! g$0$18908 g$0$11329) (set! g$0$18909 g$0$11327) (set! g$0$18910 g$0$11325) (set! g$0$18911 g$0$11323) (set! g$0$18912 g$0$11321) (set! g$0$18913 g$0$11319) (set! g$0$18914 g$0$11317) (set! g$0$18915 g$0$11315) (set! g$0$18916 g$0$11313) (set! g$0$18917 g$0$11311) (set! g$0$18918 g$0$11309) (set! g$0$18919 g$0$11307) (set! g$0$18920 g$0$11305) (set! g$0$18921 g$0$11303) (set! g$0$18922 g$0$11301) (set! g$0$18923 g$0$11299) (set! g$0$18924 g$0$11297) (set! g$0$18925 g$0$11295) (set! g$0$18926 g$0$11293) (set! g$0$18927 g$0$11291) (set! g$0$18928 g$0$11289) (set! g$0$18930 g$0$11090) (set! g$0$18931 g$0$11088) (set! g$0$18932 g$0$11086) (set! g$0$18934 g$0$11072) (set! g$0$18935 g$0$11070) (set! g$0$18936 g$0$11068) (set! g$0$18937 g$0$11066) (set! g$0$18938 g$0$11064) (set! g$0$18939 g$0$11062) (set! g$0$18940 g$0$11060) (set! g$0$18941 g$0$11058) (set! g$0$18942 g$0$11056) (set! g$0$18943 g$0$11054) (set! g$0$18944 g$0$11052) (set! g$0$18945 g$0$11050) (set! g$0$18946 g$0$11048) (set! g$0$18947 g$0$11046) (set! g$0$18948 g$0$11044) (set! g$0$18949 g$0$11042) (set! g$0$18950 g$0$11040) (set! g$0$18951 g$0$11038) (set! g$0$18952 g$0$11036) (set! g$0$18953 g$0$11034) (set! g$0$18954 g$0$11032) (set! g$0$18955 g$0$11030) (set! g$0$18956 g$0$11028) (set! g$0$18957 g$0$11026) (set! g$0$18958 g$0$11024) (set! g$0$18959 g$0$11022) (set! g$0$18960 g$0$11020) (set! g$0$18961 g$0$11018) (set! g$0$18962 g$0$11016) (set! g$0$18963 g$0$11014) (set! g$0$18964 g$0$11012) (set! g$0$18965 g$0$11010) (set! g$0$18966 g$0$11008) (set! g$0$18967 g$0$11006) (set! g$0$18968 g$0$11004) (set! g$0$18969 g$0$11002) (set! g$0$18970 g$0$11000) (set! g$0$18971 g$0$10998) (set! g$0$18972 g$0$10996) (set! g$0$18973 g$0$10994) (set! g$0$18974 g$0$10992) (set! g$0$18975 g$0$10990) (set! g$0$18976 g$0$10987) (set! g$0$18977 g$0$10985) (set! g$0$18978 g$0$10983) (set! g$0$18979 g$0$10981) (set! g$0$18980 g$0$10979) (set! g$0$18981 g$0$10977) (set! g$0$18982 g$0$10975) (set! g$0$18983 g$0$10973) (set! g$0$18984 g$0$10971) (set! g$0$18985 g$0$10969) (set! g$0$18986 g$0$10967) (set! g$0$18987 g$0$10965) (set! g$0$18988 g$0$10963) (set! g$0$18989 g$0$10961) (set! g$0$18990 g$0$10959) (set! g$0$18991 g$0$10957) (set! g$0$18992 g$0$10954) (set! g$0$18993 g$0$10952) (set! g$0$18994 g$0$10950) (set! g$0$18995 g$0$10948) (set! g$0$18996 g$0$10946) (set! g$0$18998 g$0$10941) (set! g$0$18999 g$0$10939) (g$0$10657 g$0$11482)))) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f) (quote #f)))


(begin (g$0$10211 (lambda (g$0$19760) ((lambda (g$0$19762) (if g$0$19762 (cdr g$0$19762) (quote #f))) (assq g$0$19760 (quote ((syntax-error . g$0$18823) (syntax-dispatch . g$0$18887) (make-variable-transformer . g$0$18931) (identifier? . g$0$18822) (generate-temporaries . g$0$18826) (free-identifier=? . g$0$18825) (syntax->datum . g$0$18820) (datum->syntax . g$0$18821) (bound-identifier=? . g$0$18824) (null-environment . g$0$18836) (eval . g$0$18833) (environment . g$0$18837))))))) (g$0$10649 (quote g$0$19727) (quote (ikarus interaction)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19728) (quote (psyntax null-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((unquote-splicing . g$0$19064) (unquote . g$0$19063) (delay . g$0$19056) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (case . g$0$19040) (if . g$0$19036) (letrec . g$0$19034) (lambda . g$0$19031) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19729) (quote (psyntax scheme-report-environment-5)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-upcase . g$0$19698) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689) (call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object . g$0$19617) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (scheme-report-environment . g$0$19512) (quotient . g$0$19511) (null-environment . g$0$11475) (remainder . g$0$19510) (modulo . g$0$19509) (inexact->exact . g$0$19508) (force . g$0$19507) (exact->inexact . g$0$19506) (string-fill! . g$0$19503) (string-set! . g$0$19502) (set-cdr! . g$0$19501) (set-car! . g$0$19500) (memv . g$0$19494) (memq . g$0$19493) (member . g$0$19491) (assv . g$0$19483) (assq . g$0$19482) (assoc . g$0$19480) (eval . g$0$11481) (zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-length . g$0$19226) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (not . g$0$19181) (negative? . g$0$19180) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer->char . g$0$19159) (inexact? . g$0$19157) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (even? . g$0$19145) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (atan . g$0$19086) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (delay . g$0$19056) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (case . g$0$19040) (if . g$0$19036) (letrec . g$0$19034) (lambda . g$0$19031) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19730) (quote (psyntax modules)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((module . g$0$19021))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19731) (quote (chez parameters)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19732) (quote (rnrs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$19717) (string-titlecase . g$0$19716) (string-normalize-nfkd . g$0$19715) (string-normalize-nfkc . g$0$19714) (string-normalize-nfd . g$0$19713) (string-normalize-nfc . g$0$19712) (string-foldcase . g$0$19711) (string-downcase . g$0$19710) (string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-title-case? . g$0$19702) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-general-category . g$0$19699) (char-upcase . g$0$19698) (char-titlecase . g$0$19697) (char-foldcase . g$0$19696) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689) (make-variable-transformer . g$0$11089) (identifier? . g$0$11503) (generate-temporaries . g$0$11495) (free-identifier=? . g$0$11497) (syntax->datum . g$0$11507) (datum->syntax . g$0$11505) (bound-identifier=? . g$0$11499) (record-type-descriptor? . g$0$19688) (record-predicate . g$0$19687) (record-mutator . g$0$19686) (record-constructor . g$0$19685) (record-accessor . g$0$19684) (make-record-type-descriptor . g$0$19683) (make-record-constructor-descriptor . g$0$19682) (record? . g$0$19681) (record-type-uid . g$0$19680) (record-type-sealed? . g$0$19679) (record-type-parent . g$0$19678) (record-type-opaque? . g$0$19677) (record-type-name . g$0$19676) (record-type-generative? . g$0$19675) (record-type-field-names . g$0$19674) (record-rtd . g$0$19673) (record-field-mutable? . g$0$19672) (nongenerative . g$0$19671) (sealed . g$0$19670) (record-type-descriptor . g$0$19669) (record-constructor-descriptor . g$0$19668) (protocol . g$0$19667) (parent-rtd . g$0$19666) (parent . g$0$19665) (opaque . g$0$19664) (mutable . g$0$19663) (immutable . g$0$19662) (fields . g$0$19661) (define-record-type . g$0$19660) (delete-file . g$0$19659) (file-exists? . g$0$19658) (vector-sort! . g$0$19657) (vector-sort . g$0$19656) (list-sort . g$0$19655) (symbol-hash . g$0$19654) (string-ci-hash . g$0$19653) (string-hash . g$0$19652) (equal-hash . g$0$19651) (hashtable-equivalence-function . g$0$19650) (make-hashtable . g$0$19649) (hashtable-hash-function . g$0$19648) (make-eqv-hashtable . g$0$19647) (make-eq-hashtable . g$0$19646) (hashtable? . g$0$19645) (hashtable-update! . g$0$19644) (hashtable-size . g$0$19643) (hashtable-set! . g$0$19642) (hashtable-ref . g$0$19641) (hashtable-mutable? . g$0$19640) (hashtable-keys . g$0$19639) (hashtable-entries . g$0$19638) (hashtable-delete! . g$0$19637) (hashtable-copy . g$0$19636) (hashtable-contains? . g$0$19635) (hashtable-clear! . g$0$19634) (call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (utf-8-codec . g$0$19611) (utf-16-codec . g$0$19610) (transcoder-error-handling-mode . g$0$19609) (transcoder-eol-style . g$0$19608) (transcoder-codec . g$0$19607) (transcoded-port . g$0$19606) (textual-port? . g$0$19605) (string->bytevector . g$0$19604) (standard-output-port . g$0$19603) (standard-input-port . g$0$19602) (standard-error-port . g$0$19601) (set-port-position! . g$0$19600) (put-u8 . g$0$19599) (put-string . g$0$19598) (put-datum . g$0$19597) (put-char . g$0$19596) (put-bytevector . g$0$19595) (port? . g$0$19594) (port-transcoder . g$0$19593) (port-position . g$0$19592) (port-has-set-port-position!? . g$0$19591) (port-has-port-position? . g$0$19590) (port-eof? . g$0$19589) (output-port-buffer-mode . g$0$19588) (open-string-output-port . g$0$19587) (open-string-input-port . g$0$19586) (open-file-output-port . g$0$19585) (open-file-input/output-port . g$0$19584) (open-file-input-port . g$0$19583) (open-bytevector-output-port . g$0$19582) (open-bytevector-input-port . g$0$19581) (native-transcoder . g$0$19580) (native-eol-style . g$0$19579) (make-transcoder . g$0$19578) (latin-1-codec . g$0$19577) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (make-i/o-encoding-error . g$0$19566) (make-i/o-decoding-error . g$0$19565) (make-custom-textual-output-port . g$0$19564) (make-custom-textual-input/output-port . g$0$19563) (make-custom-textual-input-port . g$0$19562) (make-custom-binary-output-port . g$0$19561) (make-custom-binary-input/output-port . g$0$19560) (make-custom-binary-input-port . g$0$19559) (make-bytevector . g$0$19558) (lookahead-u8 . g$0$19557) (lookahead-char . g$0$19556) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (i/o-encoding-error? . g$0$19534) (i/o-encoding-error-char . g$0$19533) (&i/o-encoding . g$0$19532) (i/o-decoding-error? . g$0$19531) (&i/o-decoding . g$0$19530) (&i/o . g$0$19529) (get-u8 . g$0$19528) (get-string-n! . g$0$19527) (get-string-n . g$0$19526) (get-string-all . g$0$19525) (get-line . g$0$19524) (get-datum . g$0$19523) (get-char . g$0$19522) (get-bytevector-some . g$0$19521) (get-bytevector-n! . g$0$19520) (get-bytevector-n . g$0$19519) (get-bytevector-all . g$0$19518) (flush-output-port . g$0$19517) (file-options . g$0$19516) (error-handling-mode . g$0$19515) (eol-style . g$0$19514) (close-port . g$0$19513) (exit . g$0$19505) (command-line . g$0$19504) (remove . g$0$19499) (remv . g$0$19498) (remp . g$0$19497) (remq . g$0$19496) (partition . g$0$19495) (memv . g$0$19494) (memq . g$0$19493) (memp . g$0$19492) (member . g$0$19491) (exists . g$0$19490) (for-all . g$0$19489) (fold-right . g$0$19488) (fold-left . g$0$19487) (find . g$0$19486) (filter . g$0$19485) (cons* . g$0$19484) (assv . g$0$19483) (assq . g$0$19482) (assp . g$0$19481) (assoc . g$0$19480) (call-with-string-output-port . g$0$19479) (call-with-port . g$0$19478) (call-with-bytevector-output-port . g$0$19477) (bytevector->string . g$0$19476) (buffer-mode? . g$0$19475) (buffer-mode . g$0$19474) (binary-port? . g$0$19473) (guard . g$0$19472) (with-exception-handler . g$0$19471) (raise-continuable . g$0$19470) (raise . g$0$19469) (make-enumeration . g$0$19468) (enum-set=? . g$0$19467) (enum-set-universe . g$0$19466) (enum-set-union . g$0$19465) (enum-set-subset? . g$0$19464) (enum-set-projection . g$0$19463) (enum-set-member? . g$0$19462) (enum-set-intersection . g$0$19461) (enum-set-indexer . g$0$19460) (enum-set-difference . g$0$19459) (enum-set-constructor . g$0$19458) (enum-set-complement . g$0$19457) (enum-set->list . g$0$19456) (define-enumeration . g$0$19455) (who-condition? . g$0$19454) (&who . g$0$19453) (warning? . g$0$19452) (&warning . g$0$19451) (violation? . g$0$19450) (&violation . g$0$19449) (undefined-violation? . g$0$19448) (&undefined . g$0$19447) (syntax-violation? . g$0$19446) (syntax-violation-subform . g$0$19445) (syntax-violation-form . g$0$19444) (syntax-violation . g$0$19443) (&syntax . g$0$19442) (simple-conditions . g$0$19441) (serious-condition? . g$0$19440) (&serious . g$0$19439) (non-continuable-violation? . g$0$19438) (&non-continuable . g$0$19437) (message-condition? . g$0$19436) (&message . g$0$19435) (make-who-condition . g$0$19434) (make-warning . g$0$19433) (make-violation . g$0$19432) (make-undefined-violation . g$0$19431) (make-syntax-violation . g$0$19430) (make-serious-condition . g$0$19429) (make-non-continuable-violation . g$0$19428) (make-message-condition . g$0$19427) (make-lexical-violation . g$0$19426) (make-irritants-condition . g$0$19425) (make-implementation-restriction-violation . g$0$19424) (make-error . g$0$19423) (make-assertion-violation . g$0$19422) (lexical-violation? . g$0$19421) (&lexical . g$0$19420) (irritants-condition? . g$0$19419) (&irritants . g$0$19418) (implementation-restriction-violation? . g$0$19417) (&implementation-restriction . g$0$19416) (error? . g$0$19415) (&error . g$0$19414) (define-condition-type . g$0$19413) (condition-who . g$0$19412) (condition-predicate . g$0$19411) (condition-message . g$0$19410) (condition-irritants . g$0$19409) (condition-accessor . g$0$19408) (condition . g$0$19407) (&condition . g$0$19406) (assertion-violation? . g$0$19405) (&assertion . g$0$19404) (condition? . g$0$19403) (utf32->string . g$0$19402) (utf16->string . g$0$19401) (utf8->string . g$0$19400) (uint-list->bytevector . g$0$19399) (u8-list->bytevector . g$0$19398) (string->utf8 . g$0$19397) (string->utf32 . g$0$19396) (string->utf16 . g$0$19395) (sint-list->bytevector . g$0$19394) (native-endianness . g$0$19393) (bytevector? . g$0$19392) (bytevector=? . g$0$19391) (bytevector-uint-set! . g$0$19390) (bytevector-uint-ref . g$0$19389) (bytevector-u8-set! . g$0$19388) (bytevector-u8-ref . g$0$19387) (bytevector-u64-set! . g$0$19386) (bytevector-u64-ref . g$0$19385) (bytevector-u64-native-set! . g$0$19384) (bytevector-u64-native-ref . g$0$19383) (bytevector-u32-set! . g$0$19382) (bytevector-u32-ref . g$0$19381) (bytevector-u32-native-set! . g$0$19380) (bytevector-u32-native-ref . g$0$19379) (bytevector-u16-set! . g$0$19378) (bytevector-u16-ref . g$0$19377) (bytevector-u16-native-set! . g$0$19376) (bytevector-u16-native-ref . g$0$19375) (bytevector-sint-set! . g$0$19374) (bytevector-sint-ref . g$0$19373) (bytevector-s8-set! . g$0$19372) (bytevector-s8-ref . g$0$19371) (bytevector-s64-set! . g$0$19370) (bytevector-s64-ref . g$0$19369) (bytevector-s64-native-set! . g$0$19368) (bytevector-s64-native-ref . g$0$19367) (bytevector-s32-set! . g$0$19366) (bytevector-s32-ref . g$0$19365) (bytevector-s32-native-set! . g$0$19364) (bytevector-s32-native-ref . g$0$19363) (bytevector-s16-set! . g$0$19362) (bytevector-s16-ref . g$0$19361) (bytevector-s16-native-set! . g$0$19360) (bytevector-s16-native-ref . g$0$19359) (bytevector-length . g$0$19358) (bytevector-ieee-single-ref . g$0$19357) (bytevector-ieee-single-native-set! . g$0$19356) (bytevector-ieee-single-native-ref . g$0$19355) (bytevector-ieee-double-ref . g$0$19354) (bytevector-ieee-double-native-set! . g$0$19353) (bytevector-ieee-double-native-ref . g$0$19352) (bytevector-fill! . g$0$19351) (bytevector-copy! . g$0$19350) (bytevector-copy . g$0$19349) (bytevector->uint-list . g$0$19348) (bytevector->u8-list . g$0$19347) (bytevector->sint-list . g$0$19346) (no-nans-violation? . g$0$19345) (&no-nans . g$0$19344) (no-infinities-violation? . g$0$19343) (&no-infinities . g$0$19342) (make-no-nans-violation . g$0$19341) (make-no-infinities-violation . g$0$19340) (real->flonum . g$0$19339) (flzero? . g$0$19338) (fltruncate . g$0$19337) (fltan . g$0$19336) (flsqrt . g$0$19335) (flsin . g$0$19334) (flround . g$0$19333) (flpositive? . g$0$19332) (flonum? . g$0$19331) (flodd? . g$0$19330) (flnumerator . g$0$19329) (flnegative? . g$0$19328) (flnan? . g$0$19327) (flmod0 . g$0$19326) (flmod . g$0$19325) (flmin . g$0$19324) (flmax . g$0$19323) (fllog . g$0$19322) (flinteger? . g$0$19321) (flinfinite? . g$0$19320) (flfloor . g$0$19319) (flfinite? . g$0$19318) (flexpt . g$0$19317) (flexp . g$0$19316) (fleven? . g$0$19315) (fldiv0-and-mod0 . g$0$19314) (fldiv0 . g$0$19313) (fldiv-and-mod . g$0$19312) (fldiv . g$0$19311) (fldenominator . g$0$19310) (flcos . g$0$19309) (flceiling . g$0$19308) (flatan . g$0$19307) (flasin . g$0$19306) (flacos . g$0$19305) (flabs . g$0$19304) (fl>? . g$0$19303) (fl>=? . g$0$19302) (fl=? . g$0$19301) (fl<? . g$0$19300) (fl<=? . g$0$19299) (fl/ . g$0$19298) (fl- . g$0$19297) (fl+ . g$0$19296) (fl* . g$0$19295) (fixnum->flonum . g$0$19294) (fxzero? . g$0$19293) (fxxor . g$0$19292) (fxrotate-bit-field . g$0$19291) (fxreverse-bit-field . g$0$19290) (fxpositive? . g$0$19289) (fxodd? . g$0$19288) (fxnot . g$0$19287) (fxnegative? . g$0$19286) (fxmod0 . g$0$19285) (fxmod . g$0$19284) (fxmin . g$0$19283) (fxmax . g$0$19282) (fxlength . g$0$19281) (fxior . g$0$19280) (fxif . g$0$19279) (fxfirst-bit-set . g$0$19278) (fxeven? . g$0$19277) (fxdiv0-and-mod0 . g$0$19276) (fxdiv0 . g$0$19275) (fxdiv-and-mod . g$0$19274) (fxdiv . g$0$19273) (fxcopy-bit-field . g$0$19272) (fxcopy-bit . g$0$19271) (fxbit-set? . g$0$19270) (fxbit-field . g$0$19269) (fxbit-count . g$0$19268) (fxarithmetic-shift-right . g$0$19267) (fxarithmetic-shift-left . g$0$19266) (fxarithmetic-shift . g$0$19265) (fxand . g$0$19264) (fx>? . g$0$19263) (fx>=? . g$0$19262) (fx=? . g$0$19261) (fx<? . g$0$19260) (fx<=? . g$0$19259) (fx-/carry . g$0$19258) (fx- . g$0$19257) (fx+/carry . g$0$19256) (fx+ . g$0$19255) (fx*/carry . g$0$19254) (fx* . g$0$19253) (greatest-fixnum . g$0$19252) (least-fixnum . g$0$19251) (fixnum-width . g$0$19250) (fixnum? . g$0$19249) (bitwise-rotate-bit-field . g$0$19248) (bitwise-reverse-bit-field . g$0$19247) (bitwise-length . g$0$19246) (bitwise-if . g$0$19245) (bitwise-first-bit-set . g$0$19244) (bitwise-copy-bit-field . g$0$19243) (bitwise-copy-bit . g$0$19242) (bitwise-bit-set? . g$0$19241) (bitwise-bit-field . g$0$19240) (bitwise-bit-count . g$0$19239) (bitwise-xor . g$0$19238) (bitwise-ior . g$0$19237) (bitwise-and . g$0$19236) (bitwise-not . g$0$19235) (bitwise-arithmetic-shift-right . g$0$19234) (bitwise-arithmetic-shift-left . g$0$19233) (bitwise-arithmetic-shift . g$0$19232) (zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-map . g$0$19227) (vector-length . g$0$19226) (vector-for-each . g$0$19225) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol=? . g$0$19217) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-for-each . g$0$19206) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-valued? . g$0$19194) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (rational-valued? . g$0$19190) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (null? . g$0$19182) (not . g$0$19181) (negative? . g$0$19180) (nan? . g$0$19179) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer-valued? . g$0$19160) (integer->char . g$0$19159) (infinite? . g$0$19158) (inexact? . g$0$19157) (inexact . g$0$19156) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (finite? . g$0$19151) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (exact-integer-sqrt . g$0$19147) (exact . g$0$19146) (even? . g$0$19145) (error . g$0$19144) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (div0-and-mod0 . g$0$19139) (mod0 . g$0$19138) (div0 . g$0$19137) (div-and-mod . g$0$19136) (mod . g$0$19135) (div . g$0$19134) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call/cc . g$0$19120) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (boolean=? . g$0$19087) (atan . g$0$19086) (assertion-violation . g$0$19085) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (let*-values . g$0$19069) (unsyntax-splicing . g$0$19066) (unsyntax . g$0$19065) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (_ . g$0$19062) (else . g$0$19061) (=> . g$0$19060) (|...| . g$0$19059) (assert . g$0$19058) (endianness . g$0$19057) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (identifier-syntax . g$0$19048) (with-syntax . g$0$19047) (quasisyntax . g$0$19046) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (let-values . g$0$19041) (case . g$0$19040) (unless . g$0$19038) (when . g$0$19037) (if . g$0$19036) (letrec* . g$0$19035) (letrec . g$0$19034) (case-lambda . g$0$19032) (lambda . g$0$19031) (syntax . g$0$19030) (syntax-case . g$0$19029) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19733) (quote (rnrs r5rs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((scheme-report-environment . g$0$19512) (quotient . g$0$19511) (null-environment . g$0$11475) (remainder . g$0$19510) (modulo . g$0$19509) (inexact->exact . g$0$19508) (force . g$0$19507) (exact->inexact . g$0$19506) (delay . g$0$19056))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19734) (quote (rnrs control)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((do . g$0$19052) (unless . g$0$19038) (when . g$0$19037) (case-lambda . g$0$19032))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19735) (quote (rnrs eval)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eval . g$0$11481) (environment . g$0$11473))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19736) (quote (rnrs mutable-pairs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((set-cdr! . g$0$19501) (set-car! . g$0$19500))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19737) (quote (rnrs mutable-strings)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-fill! . g$0$19503) (string-set! . g$0$19502))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19738) (quote (rnrs programs)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((exit . g$0$19505) (command-line . g$0$19504))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19739) (quote (rnrs syntax-case)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-variable-transformer . g$0$11089) (identifier? . g$0$11503) (generate-temporaries . g$0$11495) (free-identifier=? . g$0$11497) (syntax->datum . g$0$11507) (datum->syntax . g$0$11505) (bound-identifier=? . g$0$11499) (syntax-violation . g$0$19443) (unsyntax-splicing . g$0$19066) (unsyntax . g$0$19065) (_ . g$0$19062) (|...| . g$0$19059) (with-syntax . g$0$19047) (quasisyntax . g$0$19046) (syntax . g$0$19030) (syntax-case . g$0$19029))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19740) (quote (rnrs files)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((delete-file . g$0$19659) (file-exists? . g$0$19658) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (&i/o . g$0$19529))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19741) (quote (rnrs sorting)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((vector-sort! . g$0$19657) (vector-sort . g$0$19656) (list-sort . g$0$19655))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19742) (quote (rnrs base)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-map . g$0$19227) (vector-length . g$0$19226) (vector-for-each . g$0$19225) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol=? . g$0$19217) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-for-each . g$0$19206) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-valued? . g$0$19194) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (rational-valued? . g$0$19190) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (null? . g$0$19182) (not . g$0$19181) (negative? . g$0$19180) (nan? . g$0$19179) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer-valued? . g$0$19160) (integer->char . g$0$19159) (infinite? . g$0$19158) (inexact? . g$0$19157) (inexact . g$0$19156) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (finite? . g$0$19151) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (exact-integer-sqrt . g$0$19147) (exact . g$0$19146) (even? . g$0$19145) (error . g$0$19144) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (div0-and-mod0 . g$0$19139) (mod0 . g$0$19138) (div0 . g$0$19137) (div-and-mod . g$0$19136) (mod . g$0$19135) (div . g$0$19134) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call/cc . g$0$19120) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (boolean=? . g$0$19087) (atan . g$0$19086) (assertion-violation . g$0$19085) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (let*-values . g$0$19069) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (_ . g$0$19062) (else . g$0$19061) (=> . g$0$19060) (|...| . g$0$19059) (assert . g$0$19058) (or . g$0$19054) (and . g$0$19053) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (identifier-syntax . g$0$19048) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (let-values . g$0$19041) (case . g$0$19040) (if . g$0$19036) (letrec* . g$0$19035) (letrec . g$0$19034) (lambda . g$0$19031) (quote . g$0$19028) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (begin . g$0$19022) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19743) (quote (rnrs lists)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((remove . g$0$19499) (remv . g$0$19498) (remp . g$0$19497) (remq . g$0$19496) (partition . g$0$19495) (memv . g$0$19494) (memq . g$0$19493) (memp . g$0$19492) (member . g$0$19491) (exists . g$0$19490) (for-all . g$0$19489) (fold-right . g$0$19488) (fold-left . g$0$19487) (find . g$0$19486) (filter . g$0$19485) (cons* . g$0$19484) (assv . g$0$19483) (assq . g$0$19482) (assp . g$0$19481) (assoc . g$0$19480))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19744) (quote (rnrs io simple)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (&i/o . g$0$19529))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19745) (quote (rnrs bytevectors)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-bytevector . g$0$19558) (utf32->string . g$0$19402) (utf16->string . g$0$19401) (utf8->string . g$0$19400) (uint-list->bytevector . g$0$19399) (u8-list->bytevector . g$0$19398) (string->utf8 . g$0$19397) (string->utf32 . g$0$19396) (string->utf16 . g$0$19395) (sint-list->bytevector . g$0$19394) (native-endianness . g$0$19393) (bytevector? . g$0$19392) (bytevector=? . g$0$19391) (bytevector-uint-set! . g$0$19390) (bytevector-uint-ref . g$0$19389) (bytevector-u8-set! . g$0$19388) (bytevector-u8-ref . g$0$19387) (bytevector-u64-set! . g$0$19386) (bytevector-u64-ref . g$0$19385) (bytevector-u64-native-set! . g$0$19384) (bytevector-u64-native-ref . g$0$19383) (bytevector-u32-set! . g$0$19382) (bytevector-u32-ref . g$0$19381) (bytevector-u32-native-set! . g$0$19380) (bytevector-u32-native-ref . g$0$19379) (bytevector-u16-set! . g$0$19378) (bytevector-u16-ref . g$0$19377) (bytevector-u16-native-set! . g$0$19376) (bytevector-u16-native-ref . g$0$19375) (bytevector-sint-set! . g$0$19374) (bytevector-sint-ref . g$0$19373) (bytevector-s8-set! . g$0$19372) (bytevector-s8-ref . g$0$19371) (bytevector-s64-set! . g$0$19370) (bytevector-s64-ref . g$0$19369) (bytevector-s64-native-set! . g$0$19368) (bytevector-s64-native-ref . g$0$19367) (bytevector-s32-set! . g$0$19366) (bytevector-s32-ref . g$0$19365) (bytevector-s32-native-set! . g$0$19364) (bytevector-s32-native-ref . g$0$19363) (bytevector-s16-set! . g$0$19362) (bytevector-s16-ref . g$0$19361) (bytevector-s16-native-set! . g$0$19360) (bytevector-s16-native-ref . g$0$19359) (bytevector-length . g$0$19358) (bytevector-ieee-single-ref . g$0$19357) (bytevector-ieee-single-native-set! . g$0$19356) (bytevector-ieee-single-native-ref . g$0$19355) (bytevector-ieee-double-ref . g$0$19354) (bytevector-ieee-double-native-set! . g$0$19353) (bytevector-ieee-double-native-ref . g$0$19352) (bytevector-fill! . g$0$19351) (bytevector-copy! . g$0$19350) (bytevector-copy . g$0$19349) (bytevector->uint-list . g$0$19348) (bytevector->u8-list . g$0$19347) (bytevector->sint-list . g$0$19346) (endianness . g$0$19057))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19746) (quote (rnrs unicode)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((string-upcase . g$0$19717) (string-titlecase . g$0$19716) (string-normalize-nfkd . g$0$19715) (string-normalize-nfkc . g$0$19714) (string-normalize-nfd . g$0$19713) (string-normalize-nfc . g$0$19712) (string-foldcase . g$0$19711) (string-downcase . g$0$19710) (string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-title-case? . g$0$19702) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-general-category . g$0$19699) (char-upcase . g$0$19698) (char-titlecase . g$0$19697) (char-foldcase . g$0$19696) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19747) (quote (rnrs exceptions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((guard . g$0$19472) (with-exception-handler . g$0$19471) (raise-continuable . g$0$19470) (raise . g$0$19469) (else . g$0$19061) (=> . g$0$19060))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19748) (quote (rnrs arithmetic bitwise)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((bitwise-rotate-bit-field . g$0$19248) (bitwise-reverse-bit-field . g$0$19247) (bitwise-length . g$0$19246) (bitwise-if . g$0$19245) (bitwise-first-bit-set . g$0$19244) (bitwise-copy-bit-field . g$0$19243) (bitwise-copy-bit . g$0$19242) (bitwise-bit-set? . g$0$19241) (bitwise-bit-field . g$0$19240) (bitwise-bit-count . g$0$19239) (bitwise-xor . g$0$19238) (bitwise-ior . g$0$19237) (bitwise-and . g$0$19236) (bitwise-not . g$0$19235) (bitwise-arithmetic-shift-right . g$0$19234) (bitwise-arithmetic-shift-left . g$0$19233) (bitwise-arithmetic-shift . g$0$19232))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19749) (quote (rnrs arithmetic fixnums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((fxzero? . g$0$19293) (fxxor . g$0$19292) (fxrotate-bit-field . g$0$19291) (fxreverse-bit-field . g$0$19290) (fxpositive? . g$0$19289) (fxodd? . g$0$19288) (fxnot . g$0$19287) (fxnegative? . g$0$19286) (fxmod0 . g$0$19285) (fxmod . g$0$19284) (fxmin . g$0$19283) (fxmax . g$0$19282) (fxlength . g$0$19281) (fxior . g$0$19280) (fxif . g$0$19279) (fxfirst-bit-set . g$0$19278) (fxeven? . g$0$19277) (fxdiv0-and-mod0 . g$0$19276) (fxdiv0 . g$0$19275) (fxdiv-and-mod . g$0$19274) (fxdiv . g$0$19273) (fxcopy-bit-field . g$0$19272) (fxcopy-bit . g$0$19271) (fxbit-set? . g$0$19270) (fxbit-field . g$0$19269) (fxbit-count . g$0$19268) (fxarithmetic-shift-right . g$0$19267) (fxarithmetic-shift-left . g$0$19266) (fxarithmetic-shift . g$0$19265) (fxand . g$0$19264) (fx>? . g$0$19263) (fx>=? . g$0$19262) (fx=? . g$0$19261) (fx<? . g$0$19260) (fx<=? . g$0$19259) (fx-/carry . g$0$19258) (fx- . g$0$19257) (fx+/carry . g$0$19256) (fx+ . g$0$19255) (fx*/carry . g$0$19254) (fx* . g$0$19253) (greatest-fixnum . g$0$19252) (least-fixnum . g$0$19251) (fixnum-width . g$0$19250) (fixnum? . g$0$19249))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19750) (quote (rnrs arithmetic flonums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((no-nans-violation? . g$0$19345) (&no-nans . g$0$19344) (no-infinities-violation? . g$0$19343) (&no-infinities . g$0$19342) (make-no-nans-violation . g$0$19341) (make-no-infinities-violation . g$0$19340) (real->flonum . g$0$19339) (flzero? . g$0$19338) (fltruncate . g$0$19337) (fltan . g$0$19336) (flsqrt . g$0$19335) (flsin . g$0$19334) (flround . g$0$19333) (flpositive? . g$0$19332) (flonum? . g$0$19331) (flodd? . g$0$19330) (flnumerator . g$0$19329) (flnegative? . g$0$19328) (flnan? . g$0$19327) (flmod0 . g$0$19326) (flmod . g$0$19325) (flmin . g$0$19324) (flmax . g$0$19323) (fllog . g$0$19322) (flinteger? . g$0$19321) (flinfinite? . g$0$19320) (flfloor . g$0$19319) (flfinite? . g$0$19318) (flexpt . g$0$19317) (flexp . g$0$19316) (fleven? . g$0$19315) (fldiv0-and-mod0 . g$0$19314) (fldiv0 . g$0$19313) (fldiv-and-mod . g$0$19312) (fldiv . g$0$19311) (fldenominator . g$0$19310) (flcos . g$0$19309) (flceiling . g$0$19308) (flatan . g$0$19307) (flasin . g$0$19306) (flacos . g$0$19305) (flabs . g$0$19304) (fl>? . g$0$19303) (fl>=? . g$0$19302) (fl=? . g$0$19301) (fl<? . g$0$19300) (fl<=? . g$0$19299) (fl/ . g$0$19298) (fl- . g$0$19297) (fl+ . g$0$19296) (fl* . g$0$19295) (fixnum->flonum . g$0$19294))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19751) (quote (rnrs hashtables)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((symbol-hash . g$0$19654) (string-ci-hash . g$0$19653) (string-hash . g$0$19652) (equal-hash . g$0$19651) (hashtable-equivalence-function . g$0$19650) (make-hashtable . g$0$19649) (hashtable-hash-function . g$0$19648) (make-eqv-hashtable . g$0$19647) (make-eq-hashtable . g$0$19646) (hashtable? . g$0$19645) (hashtable-update! . g$0$19644) (hashtable-size . g$0$19643) (hashtable-set! . g$0$19642) (hashtable-ref . g$0$19641) (hashtable-mutable? . g$0$19640) (hashtable-keys . g$0$19639) (hashtable-entries . g$0$19638) (hashtable-delete! . g$0$19637) (hashtable-copy . g$0$19636) (hashtable-contains? . g$0$19635) (hashtable-clear! . g$0$19634))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19752) (quote (rnrs io ports)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (utf-8-codec . g$0$19611) (utf-16-codec . g$0$19610) (transcoder-error-handling-mode . g$0$19609) (transcoder-eol-style . g$0$19608) (transcoder-codec . g$0$19607) (transcoded-port . g$0$19606) (textual-port? . g$0$19605) (string->bytevector . g$0$19604) (standard-output-port . g$0$19603) (standard-input-port . g$0$19602) (standard-error-port . g$0$19601) (set-port-position! . g$0$19600) (put-u8 . g$0$19599) (put-string . g$0$19598) (put-datum . g$0$19597) (put-char . g$0$19596) (put-bytevector . g$0$19595) (port? . g$0$19594) (port-transcoder . g$0$19593) (port-position . g$0$19592) (port-has-set-port-position!? . g$0$19591) (port-has-port-position? . g$0$19590) (port-eof? . g$0$19589) (output-port-buffer-mode . g$0$19588) (open-string-output-port . g$0$19587) (open-string-input-port . g$0$19586) (open-file-output-port . g$0$19585) (open-file-input/output-port . g$0$19584) (open-file-input-port . g$0$19583) (open-bytevector-output-port . g$0$19582) (open-bytevector-input-port . g$0$19581) (native-transcoder . g$0$19580) (native-eol-style . g$0$19579) (make-transcoder . g$0$19578) (latin-1-codec . g$0$19577) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (make-i/o-encoding-error . g$0$19566) (make-i/o-decoding-error . g$0$19565) (make-custom-textual-output-port . g$0$19564) (make-custom-textual-input/output-port . g$0$19563) (make-custom-textual-input-port . g$0$19562) (make-custom-binary-output-port . g$0$19561) (make-custom-binary-input/output-port . g$0$19560) (make-custom-binary-input-port . g$0$19559) (lookahead-u8 . g$0$19557) (lookahead-char . g$0$19556) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (i/o-encoding-error? . g$0$19534) (i/o-encoding-error-char . g$0$19533) (&i/o-encoding . g$0$19532) (i/o-decoding-error? . g$0$19531) (&i/o-decoding . g$0$19530) (&i/o . g$0$19529) (get-u8 . g$0$19528) (get-string-n! . g$0$19527) (get-string-n . g$0$19526) (get-string-all . g$0$19525) (get-line . g$0$19524) (get-datum . g$0$19523) (get-char . g$0$19522) (get-bytevector-some . g$0$19521) (get-bytevector-n! . g$0$19520) (get-bytevector-n . g$0$19519) (get-bytevector-all . g$0$19518) (flush-output-port . g$0$19517) (file-options . g$0$19516) (error-handling-mode . g$0$19515) (eol-style . g$0$19514) (close-port . g$0$19513) (call-with-string-output-port . g$0$19479) (call-with-port . g$0$19478) (call-with-bytevector-output-port . g$0$19477) (bytevector->string . g$0$19476) (buffer-mode? . g$0$19475) (buffer-mode . g$0$19474) (binary-port? . g$0$19473))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19753) (quote (rnrs enums)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((make-enumeration . g$0$19468) (enum-set=? . g$0$19467) (enum-set-universe . g$0$19466) (enum-set-union . g$0$19465) (enum-set-subset? . g$0$19464) (enum-set-projection . g$0$19463) (enum-set-member? . g$0$19462) (enum-set-intersection . g$0$19461) (enum-set-indexer . g$0$19460) (enum-set-difference . g$0$19459) (enum-set-constructor . g$0$19458) (enum-set-complement . g$0$19457) (enum-set->list . g$0$19456) (define-enumeration . g$0$19455))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19754) (quote (rnrs conditions)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((who-condition? . g$0$19454) (&who . g$0$19453) (warning? . g$0$19452) (&warning . g$0$19451) (violation? . g$0$19450) (&violation . g$0$19449) (undefined-violation? . g$0$19448) (&undefined . g$0$19447) (syntax-violation? . g$0$19446) (syntax-violation-subform . g$0$19445) (syntax-violation-form . g$0$19444) (syntax-violation . g$0$19443) (&syntax . g$0$19442) (simple-conditions . g$0$19441) (serious-condition? . g$0$19440) (&serious . g$0$19439) (non-continuable-violation? . g$0$19438) (&non-continuable . g$0$19437) (message-condition? . g$0$19436) (&message . g$0$19435) (make-who-condition . g$0$19434) (make-warning . g$0$19433) (make-violation . g$0$19432) (make-undefined-violation . g$0$19431) (make-syntax-violation . g$0$19430) (make-serious-condition . g$0$19429) (make-non-continuable-violation . g$0$19428) (make-message-condition . g$0$19427) (make-lexical-violation . g$0$19426) (make-irritants-condition . g$0$19425) (make-implementation-restriction-violation . g$0$19424) (make-error . g$0$19423) (make-assertion-violation . g$0$19422) (lexical-violation? . g$0$19421) (&lexical . g$0$19420) (irritants-condition? . g$0$19419) (&irritants . g$0$19418) (implementation-restriction-violation? . g$0$19417) (&implementation-restriction . g$0$19416) (error? . g$0$19415) (&error . g$0$19414) (define-condition-type . g$0$19413) (condition-who . g$0$19412) (condition-predicate . g$0$19411) (condition-message . g$0$19410) (condition-irritants . g$0$19409) (condition-accessor . g$0$19408) (condition . g$0$19407) (&condition . g$0$19406) (assertion-violation? . g$0$19405) (&assertion . g$0$19404) (condition? . g$0$19403))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19755) (quote (rnrs records inspection)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record? . g$0$19681) (record-type-uid . g$0$19680) (record-type-sealed? . g$0$19679) (record-type-parent . g$0$19678) (record-type-opaque? . g$0$19677) (record-type-name . g$0$19676) (record-type-generative? . g$0$19675) (record-type-field-names . g$0$19674) (record-rtd . g$0$19673) (record-field-mutable? . g$0$19672))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19756) (quote (rnrs records procedural)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((record-type-descriptor? . g$0$19688) (record-predicate . g$0$19687) (record-mutator . g$0$19686) (record-constructor . g$0$19685) (record-accessor . g$0$19684) (make-record-type-descriptor . g$0$19683) (make-record-constructor-descriptor . g$0$19682))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19757) (quote (rnrs records syntactic)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((nongenerative . g$0$19671) (sealed . g$0$19670) (record-type-descriptor . g$0$19669) (record-constructor-descriptor . g$0$19668) (protocol . g$0$19667) (parent-rtd . g$0$19666) (parent . g$0$19665) (opaque . g$0$19664) (mutable . g$0$19663) (immutable . g$0$19662) (fields . g$0$19661) (define-record-type . g$0$19660))) (quote ()) values values (quote #t)) (g$0$10649 (quote g$0$19758) (quote (psyntax system $all)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((syntax-error . g$0$11501) (syntax-dispatch . g$0$11372) (pretty-print . g$0$19726) (eval-core . g$0$19725) (set-symbol-value! . g$0$19724) (symbol-value . g$0$19723) (gensym . g$0$19722) (void . g$0$19721) (load . g$0$19720) (interaction-environment . g$0$19719) (char-ready? . g$0$19718) (string-upcase . g$0$19717) (string-titlecase . g$0$19716) (string-normalize-nfkd . g$0$19715) (string-normalize-nfkc . g$0$19714) (string-normalize-nfd . g$0$19713) (string-normalize-nfc . g$0$19712) (string-foldcase . g$0$19711) (string-downcase . g$0$19710) (string-ci>? . g$0$19709) (string-ci>=? . g$0$19708) (string-ci=? . g$0$19707) (string-ci<? . g$0$19706) (string-ci<=? . g$0$19705) (char-whitespace? . g$0$19704) (char-upper-case? . g$0$19703) (char-title-case? . g$0$19702) (char-numeric? . g$0$19701) (char-lower-case? . g$0$19700) (char-general-category . g$0$19699) (char-upcase . g$0$19698) (char-titlecase . g$0$19697) (char-foldcase . g$0$19696) (char-downcase . g$0$19695) (char-ci>? . g$0$19694) (char-ci>=? . g$0$19693) (char-ci=? . g$0$19692) (char-ci<? . g$0$19691) (char-ci<=? . g$0$19690) (char-alphabetic? . g$0$19689) (make-variable-transformer . g$0$11089) (identifier? . g$0$11503) (generate-temporaries . g$0$11495) (free-identifier=? . g$0$11497) (syntax->datum . g$0$11507) (datum->syntax . g$0$11505) (bound-identifier=? . g$0$11499) (record-type-descriptor? . g$0$19688) (record-predicate . g$0$19687) (record-mutator . g$0$19686) (record-constructor . g$0$19685) (record-accessor . g$0$19684) (make-record-type-descriptor . g$0$19683) (make-record-constructor-descriptor . g$0$19682) (record? . g$0$19681) (record-type-uid . g$0$19680) (record-type-sealed? . g$0$19679) (record-type-parent . g$0$19678) (record-type-opaque? . g$0$19677) (record-type-name . g$0$19676) (record-type-generative? . g$0$19675) (record-type-field-names . g$0$19674) (record-rtd . g$0$19673) (record-field-mutable? . g$0$19672) (nongenerative . g$0$19671) (sealed . g$0$19670) (record-type-descriptor . g$0$19669) (record-constructor-descriptor . g$0$19668) (protocol . g$0$19667) (parent-rtd . g$0$19666) (parent . g$0$19665) (opaque . g$0$19664) (mutable . g$0$19663) (immutable . g$0$19662) (fields . g$0$19661) (define-record-type . g$0$19660) (delete-file . g$0$19659) (file-exists? . g$0$19658) (vector-sort! . g$0$19657) (vector-sort . g$0$19656) (list-sort . g$0$19655) (symbol-hash . g$0$19654) (string-ci-hash . g$0$19653) (string-hash . g$0$19652) (equal-hash . g$0$19651) (hashtable-equivalence-function . g$0$19650) (make-hashtable . g$0$19649) (hashtable-hash-function . g$0$19648) (make-eqv-hashtable . g$0$19647) (make-eq-hashtable . g$0$19646) (hashtable? . g$0$19645) (hashtable-update! . g$0$19644) (hashtable-size . g$0$19643) (hashtable-set! . g$0$19642) (hashtable-ref . g$0$19641) (hashtable-mutable? . g$0$19640) (hashtable-keys . g$0$19639) (hashtable-entries . g$0$19638) (hashtable-delete! . g$0$19637) (hashtable-copy . g$0$19636) (hashtable-contains? . g$0$19635) (hashtable-clear! . g$0$19634) (call-with-output-file . g$0$19633) (call-with-input-file . g$0$19632) (write-char . g$0$19631) (write . g$0$19630) (with-output-to-file . g$0$19629) (with-input-from-file . g$0$19628) (read-char . g$0$19627) (read . g$0$19626) (peek-char . g$0$19625) (open-output-file . g$0$19624) (open-input-file . g$0$19623) (newline . g$0$19622) (display . g$0$19621) (close-output-port . g$0$19620) (close-input-port . g$0$19619) (eof-object? . g$0$19618) (eof-object . g$0$19617) (current-error-port . g$0$19616) (current-output-port . g$0$19615) (current-input-port . g$0$19614) (output-port? . g$0$19613) (input-port? . g$0$19612) (utf-8-codec . g$0$19611) (utf-16-codec . g$0$19610) (transcoder-error-handling-mode . g$0$19609) (transcoder-eol-style . g$0$19608) (transcoder-codec . g$0$19607) (transcoded-port . g$0$19606) (textual-port? . g$0$19605) (string->bytevector . g$0$19604) (standard-output-port . g$0$19603) (standard-input-port . g$0$19602) (standard-error-port . g$0$19601) (set-port-position! . g$0$19600) (put-u8 . g$0$19599) (put-string . g$0$19598) (put-datum . g$0$19597) (put-char . g$0$19596) (put-bytevector . g$0$19595) (port? . g$0$19594) (port-transcoder . g$0$19593) (port-position . g$0$19592) (port-has-set-port-position!? . g$0$19591) (port-has-port-position? . g$0$19590) (port-eof? . g$0$19589) (output-port-buffer-mode . g$0$19588) (open-string-output-port . g$0$19587) (open-string-input-port . g$0$19586) (open-file-output-port . g$0$19585) (open-file-input/output-port . g$0$19584) (open-file-input-port . g$0$19583) (open-bytevector-output-port . g$0$19582) (open-bytevector-input-port . g$0$19581) (native-transcoder . g$0$19580) (native-eol-style . g$0$19579) (make-transcoder . g$0$19578) (latin-1-codec . g$0$19577) (make-i/o-write-error . g$0$19576) (make-i/o-read-error . g$0$19575) (make-i/o-port-error . g$0$19574) (make-i/o-invalid-position-error . g$0$19573) (make-i/o-filename-error . g$0$19572) (make-i/o-file-protection-error . g$0$19571) (make-i/o-file-is-read-only-error . g$0$19570) (make-i/o-file-does-not-exist-error . g$0$19569) (make-i/o-file-already-exists-error . g$0$19568) (make-i/o-error . g$0$19567) (make-i/o-encoding-error . g$0$19566) (make-i/o-decoding-error . g$0$19565) (make-custom-textual-output-port . g$0$19564) (make-custom-textual-input/output-port . g$0$19563) (make-custom-textual-input-port . g$0$19562) (make-custom-binary-output-port . g$0$19561) (make-custom-binary-input/output-port . g$0$19560) (make-custom-binary-input-port . g$0$19559) (make-bytevector . g$0$19558) (lookahead-u8 . g$0$19557) (lookahead-char . g$0$19556) (i/o-write-error? . g$0$19555) (&i/o-write . g$0$19554) (i/o-read-error? . g$0$19553) (&i/o-read . g$0$19552) (i/o-port-error? . g$0$19551) (&i/o-port . g$0$19550) (i/o-invalid-position-error? . g$0$19549) (&i/o-invalid-position . g$0$19548) (i/o-filename-error? . g$0$19547) (&i/o-filename . g$0$19546) (i/o-file-protection-error? . g$0$19545) (&i/o-file-protection . g$0$19544) (i/o-file-is-read-only-error? . g$0$19543) (&i/o-file-is-read-only . g$0$19542) (i/o-file-does-not-exist-error? . g$0$19541) (&i/o-file-does-not-exist . g$0$19540) (i/o-file-already-exists-error? . g$0$19539) (&i/o-file-already-exists . g$0$19538) (i/o-error? . g$0$19537) (i/o-error-port . g$0$19536) (i/o-error-filename . g$0$19535) (i/o-encoding-error? . g$0$19534) (i/o-encoding-error-char . g$0$19533) (&i/o-encoding . g$0$19532) (i/o-decoding-error? . g$0$19531) (&i/o-decoding . g$0$19530) (&i/o . g$0$19529) (get-u8 . g$0$19528) (get-string-n! . g$0$19527) (get-string-n . g$0$19526) (get-string-all . g$0$19525) (get-line . g$0$19524) (get-datum . g$0$19523) (get-char . g$0$19522) (get-bytevector-some . g$0$19521) (get-bytevector-n! . g$0$19520) (get-bytevector-n . g$0$19519) (get-bytevector-all . g$0$19518) (flush-output-port . g$0$19517) (file-options . g$0$19516) (error-handling-mode . g$0$19515) (eol-style . g$0$19514) (close-port . g$0$19513) (scheme-report-environment . g$0$19512) (quotient . g$0$19511) (null-environment . g$0$11475) (remainder . g$0$19510) (modulo . g$0$19509) (inexact->exact . g$0$19508) (force . g$0$19507) (exact->inexact . g$0$19506) (exit . g$0$19505) (command-line . g$0$19504) (string-fill! . g$0$19503) (string-set! . g$0$19502) (set-cdr! . g$0$19501) (set-car! . g$0$19500) (remove . g$0$19499) (remv . g$0$19498) (remp . g$0$19497) (remq . g$0$19496) (partition . g$0$19495) (memv . g$0$19494) (memq . g$0$19493) (memp . g$0$19492) (member . g$0$19491) (exists . g$0$19490) (for-all . g$0$19489) (fold-right . g$0$19488) (fold-left . g$0$19487) (find . g$0$19486) (filter . g$0$19485) (cons* . g$0$19484) (assv . g$0$19483) (assq . g$0$19482) (assp . g$0$19481) (assoc . g$0$19480) (call-with-string-output-port . g$0$19479) (call-with-port . g$0$19478) (call-with-bytevector-output-port . g$0$19477) (bytevector->string . g$0$19476) (buffer-mode? . g$0$19475) (buffer-mode . g$0$19474) (binary-port? . g$0$19473) (guard . g$0$19472) (with-exception-handler . g$0$19471) (raise-continuable . g$0$19470) (raise . g$0$19469) (eval . g$0$11481) (environment . g$0$11473) (make-enumeration . g$0$19468) (enum-set=? . g$0$19467) (enum-set-universe . g$0$19466) (enum-set-union . g$0$19465) (enum-set-subset? . g$0$19464) (enum-set-projection . g$0$19463) (enum-set-member? . g$0$19462) (enum-set-intersection . g$0$19461) (enum-set-indexer . g$0$19460) (enum-set-difference . g$0$19459) (enum-set-constructor . g$0$19458) (enum-set-complement . g$0$19457) (enum-set->list . g$0$19456) (define-enumeration . g$0$19455) (who-condition? . g$0$19454) (&who . g$0$19453) (warning? . g$0$19452) (&warning . g$0$19451) (violation? . g$0$19450) (&violation . g$0$19449) (undefined-violation? . g$0$19448) (&undefined . g$0$19447) (syntax-violation? . g$0$19446) (syntax-violation-subform . g$0$19445) (syntax-violation-form . g$0$19444) (syntax-violation . g$0$19443) (&syntax . g$0$19442) (simple-conditions . g$0$19441) (serious-condition? . g$0$19440) (&serious . g$0$19439) (non-continuable-violation? . g$0$19438) (&non-continuable . g$0$19437) (message-condition? . g$0$19436) (&message . g$0$19435) (make-who-condition . g$0$19434) (make-warning . g$0$19433) (make-violation . g$0$19432) (make-undefined-violation . g$0$19431) (make-syntax-violation . g$0$19430) (make-serious-condition . g$0$19429) (make-non-continuable-violation . g$0$19428) (make-message-condition . g$0$19427) (make-lexical-violation . g$0$19426) (make-irritants-condition . g$0$19425) (make-implementation-restriction-violation . g$0$19424) (make-error . g$0$19423) (make-assertion-violation . g$0$19422) (lexical-violation? . g$0$19421) (&lexical . g$0$19420) (irritants-condition? . g$0$19419) (&irritants . g$0$19418) (implementation-restriction-violation? . g$0$19417) (&implementation-restriction . g$0$19416) (error? . g$0$19415) (&error . g$0$19414) (define-condition-type . g$0$19413) (condition-who . g$0$19412) (condition-predicate . g$0$19411) (condition-message . g$0$19410) (condition-irritants . g$0$19409) (condition-accessor . g$0$19408) (condition . g$0$19407) (&condition . g$0$19406) (assertion-violation? . g$0$19405) (&assertion . g$0$19404) (condition? . g$0$19403) (utf32->string . g$0$19402) (utf16->string . g$0$19401) (utf8->string . g$0$19400) (uint-list->bytevector . g$0$19399) (u8-list->bytevector . g$0$19398) (string->utf8 . g$0$19397) (string->utf32 . g$0$19396) (string->utf16 . g$0$19395) (sint-list->bytevector . g$0$19394) (native-endianness . g$0$19393) (bytevector? . g$0$19392) (bytevector=? . g$0$19391) (bytevector-uint-set! . g$0$19390) (bytevector-uint-ref . g$0$19389) (bytevector-u8-set! . g$0$19388) (bytevector-u8-ref . g$0$19387) (bytevector-u64-set! . g$0$19386) (bytevector-u64-ref . g$0$19385) (bytevector-u64-native-set! . g$0$19384) (bytevector-u64-native-ref . g$0$19383) (bytevector-u32-set! . g$0$19382) (bytevector-u32-ref . g$0$19381) (bytevector-u32-native-set! . g$0$19380) (bytevector-u32-native-ref . g$0$19379) (bytevector-u16-set! . g$0$19378) (bytevector-u16-ref . g$0$19377) (bytevector-u16-native-set! . g$0$19376) (bytevector-u16-native-ref . g$0$19375) (bytevector-sint-set! . g$0$19374) (bytevector-sint-ref . g$0$19373) (bytevector-s8-set! . g$0$19372) (bytevector-s8-ref . g$0$19371) (bytevector-s64-set! . g$0$19370) (bytevector-s64-ref . g$0$19369) (bytevector-s64-native-set! . g$0$19368) (bytevector-s64-native-ref . g$0$19367) (bytevector-s32-set! . g$0$19366) (bytevector-s32-ref . g$0$19365) (bytevector-s32-native-set! . g$0$19364) (bytevector-s32-native-ref . g$0$19363) (bytevector-s16-set! . g$0$19362) (bytevector-s16-ref . g$0$19361) (bytevector-s16-native-set! . g$0$19360) (bytevector-s16-native-ref . g$0$19359) (bytevector-length . g$0$19358) (bytevector-ieee-single-ref . g$0$19357) (bytevector-ieee-single-native-set! . g$0$19356) (bytevector-ieee-single-native-ref . g$0$19355) (bytevector-ieee-double-ref . g$0$19354) (bytevector-ieee-double-native-set! . g$0$19353) (bytevector-ieee-double-native-ref . g$0$19352) (bytevector-fill! . g$0$19351) (bytevector-copy! . g$0$19350) (bytevector-copy . g$0$19349) (bytevector->uint-list . g$0$19348) (bytevector->u8-list . g$0$19347) (bytevector->sint-list . g$0$19346) (no-nans-violation? . g$0$19345) (&no-nans . g$0$19344) (no-infinities-violation? . g$0$19343) (&no-infinities . g$0$19342) (make-no-nans-violation . g$0$19341) (make-no-infinities-violation . g$0$19340) (real->flonum . g$0$19339) (flzero? . g$0$19338) (fltruncate . g$0$19337) (fltan . g$0$19336) (flsqrt . g$0$19335) (flsin . g$0$19334) (flround . g$0$19333) (flpositive? . g$0$19332) (flonum? . g$0$19331) (flodd? . g$0$19330) (flnumerator . g$0$19329) (flnegative? . g$0$19328) (flnan? . g$0$19327) (flmod0 . g$0$19326) (flmod . g$0$19325) (flmin . g$0$19324) (flmax . g$0$19323) (fllog . g$0$19322) (flinteger? . g$0$19321) (flinfinite? . g$0$19320) (flfloor . g$0$19319) (flfinite? . g$0$19318) (flexpt . g$0$19317) (flexp . g$0$19316) (fleven? . g$0$19315) (fldiv0-and-mod0 . g$0$19314) (fldiv0 . g$0$19313) (fldiv-and-mod . g$0$19312) (fldiv . g$0$19311) (fldenominator . g$0$19310) (flcos . g$0$19309) (flceiling . g$0$19308) (flatan . g$0$19307) (flasin . g$0$19306) (flacos . g$0$19305) (flabs . g$0$19304) (fl>? . g$0$19303) (fl>=? . g$0$19302) (fl=? . g$0$19301) (fl<? . g$0$19300) (fl<=? . g$0$19299) (fl/ . g$0$19298) (fl- . g$0$19297) (fl+ . g$0$19296) (fl* . g$0$19295) (fixnum->flonum . g$0$19294) (fxzero? . g$0$19293) (fxxor . g$0$19292) (fxrotate-bit-field . g$0$19291) (fxreverse-bit-field . g$0$19290) (fxpositive? . g$0$19289) (fxodd? . g$0$19288) (fxnot . g$0$19287) (fxnegative? . g$0$19286) (fxmod0 . g$0$19285) (fxmod . g$0$19284) (fxmin . g$0$19283) (fxmax . g$0$19282) (fxlength . g$0$19281) (fxior . g$0$19280) (fxif . g$0$19279) (fxfirst-bit-set . g$0$19278) (fxeven? . g$0$19277) (fxdiv0-and-mod0 . g$0$19276) (fxdiv0 . g$0$19275) (fxdiv-and-mod . g$0$19274) (fxdiv . g$0$19273) (fxcopy-bit-field . g$0$19272) (fxcopy-bit . g$0$19271) (fxbit-set? . g$0$19270) (fxbit-field . g$0$19269) (fxbit-count . g$0$19268) (fxarithmetic-shift-right . g$0$19267) (fxarithmetic-shift-left . g$0$19266) (fxarithmetic-shift . g$0$19265) (fxand . g$0$19264) (fx>? . g$0$19263) (fx>=? . g$0$19262) (fx=? . g$0$19261) (fx<? . g$0$19260) (fx<=? . g$0$19259) (fx-/carry . g$0$19258) (fx- . g$0$19257) (fx+/carry . g$0$19256) (fx+ . g$0$19255) (fx*/carry . g$0$19254) (fx* . g$0$19253) (greatest-fixnum . g$0$19252) (least-fixnum . g$0$19251) (fixnum-width . g$0$19250) (fixnum? . g$0$19249) (bitwise-rotate-bit-field . g$0$19248) (bitwise-reverse-bit-field . g$0$19247) (bitwise-length . g$0$19246) (bitwise-if . g$0$19245) (bitwise-first-bit-set . g$0$19244) (bitwise-copy-bit-field . g$0$19243) (bitwise-copy-bit . g$0$19242) (bitwise-bit-set? . g$0$19241) (bitwise-bit-field . g$0$19240) (bitwise-bit-count . g$0$19239) (bitwise-xor . g$0$19238) (bitwise-ior . g$0$19237) (bitwise-and . g$0$19236) (bitwise-not . g$0$19235) (bitwise-arithmetic-shift-right . g$0$19234) (bitwise-arithmetic-shift-left . g$0$19233) (bitwise-arithmetic-shift . g$0$19232) (zero? . g$0$19231) (vector? . g$0$19230) (vector-set! . g$0$19229) (vector-ref . g$0$19228) (vector-map . g$0$19227) (vector-length . g$0$19226) (vector-for-each . g$0$19225) (vector-fill! . g$0$19224) (vector->list . g$0$19223) (vector . g$0$19222) (values . g$0$19221) (truncate . g$0$19220) (tan . g$0$19219) (symbol? . g$0$19218) (symbol=? . g$0$19217) (symbol->string . g$0$19216) (substring . g$0$19215) (string? . g$0$19214) (string>? . g$0$19213) (string>=? . g$0$19212) (string=? . g$0$19211) (string<? . g$0$19210) (string<=? . g$0$19209) (string-ref . g$0$19208) (string-length . g$0$19207) (string-for-each . g$0$19206) (string-copy . g$0$19205) (string-append . g$0$19204) (string->symbol . g$0$19203) (string->number . g$0$19202) (string->list . g$0$19201) (string . g$0$19200) (sqrt . g$0$19199) (sin . g$0$19198) (round . g$0$19197) (reverse . g$0$19196) (real? . g$0$19195) (real-valued? . g$0$19194) (real-part . g$0$19193) (rationalize . g$0$19192) (rational? . g$0$19191) (rational-valued? . g$0$19190) (procedure? . g$0$19189) (positive? . g$0$19188) (pair? . g$0$19187) (odd? . g$0$19186) (numerator . g$0$19185) (number? . g$0$19184) (number->string . g$0$19183) (null? . g$0$19182) (not . g$0$19181) (negative? . g$0$19180) (nan? . g$0$19179) (min . g$0$19178) (max . g$0$19177) (map . g$0$19176) (make-vector . g$0$19175) (make-string . g$0$19174) (make-rectangular . g$0$19173) (make-polar . g$0$19172) (magnitude . g$0$19171) (log . g$0$19170) (list? . g$0$19169) (list-tail . g$0$19168) (list-ref . g$0$19167) (list->vector . g$0$19166) (list->string . g$0$19165) (list . g$0$19164) (length . g$0$19163) (lcm . g$0$19162) (integer? . g$0$19161) (integer-valued? . g$0$19160) (integer->char . g$0$19159) (infinite? . g$0$19158) (inexact? . g$0$19157) (inexact . g$0$19156) (imag-part . g$0$19155) (gcd . g$0$19154) (for-each . g$0$19153) (floor . g$0$19152) (finite? . g$0$19151) (expt . g$0$19150) (exp . g$0$19149) (exact? . g$0$19148) (exact-integer-sqrt . g$0$19147) (exact . g$0$19146) (even? . g$0$19145) (error . g$0$19144) (eqv? . g$0$19143) (equal? . g$0$19142) (eq? . g$0$19141) (dynamic-wind . g$0$19140) (div0-and-mod0 . g$0$19139) (mod0 . g$0$19138) (div0 . g$0$19137) (div-and-mod . g$0$19136) (mod . g$0$19135) (div . g$0$19134) (denominator . g$0$19133) (cos . g$0$19132) (cons . g$0$19131) (complex? . g$0$19130) (char? . g$0$19129) (char>? . g$0$19128) (char>=? . g$0$19127) (char=? . g$0$19126) (char<? . g$0$19125) (char<=? . g$0$19124) (char->integer . g$0$19123) (ceiling . g$0$19122) (call-with-values . g$0$19121) (call/cc . g$0$19120) (call-with-current-continuation . g$0$19119) (cddddr . g$0$19118) (cdddar . g$0$19117) (cddadr . g$0$19116) (cddaar . g$0$19115) (cdaddr . g$0$19114) (cdadar . g$0$19113) (cdaadr . g$0$19112) (cdaaar . g$0$19111) (cadddr . g$0$19110) (caddar . g$0$19109) (cadadr . g$0$19108) (cadaar . g$0$19107) (caaddr . g$0$19106) (caadar . g$0$19105) (caaadr . g$0$19104) (caaaar . g$0$19103) (cdddr . g$0$19102) (cddar . g$0$19101) (cdadr . g$0$19100) (cdaar . g$0$19099) (caddr . g$0$19098) (cadar . g$0$19097) (caadr . g$0$19096) (caaar . g$0$19095) (cddr . g$0$19094) (cdar . g$0$19093) (cadr . g$0$19092) (caar . g$0$19091) (cdr . g$0$19090) (car . g$0$19089) (boolean? . g$0$19088) (boolean=? . g$0$19087) (atan . g$0$19086) (assertion-violation . g$0$19085) (asin . g$0$19084) (apply . g$0$19083) (append . g$0$19082) (angle . g$0$19081) (acos . g$0$19080) (abs . g$0$19079) (/ . g$0$19078) (* . g$0$19077) (- . g$0$19076) (+ . g$0$19075) (>= . g$0$19074) (> . g$0$19073) (= . g$0$19072) (<= . g$0$19071) (< . g$0$19070) (let*-values . g$0$19069) (trace-define . g$0$19068) (trace-lambda . g$0$19067) (unsyntax-splicing . g$0$19066) (unsyntax . g$0$19065) (unquote-splicing . g$0$19064) (unquote . g$0$19063) (_ . g$0$19062) (else . g$0$19061) (=> . g$0$19060) (|...| . g$0$19059) (assert . g$0$19058) (endianness . g$0$19057) (delay . g$0$19056) (time . g$0$19055) (or . g$0$19054) (and . g$0$19053) (do . g$0$19052) (cond . g$0$19051) (let* . g$0$19050) (let . g$0$19049) (identifier-syntax . g$0$19048) (with-syntax . g$0$19047) (quasisyntax . g$0$19046) (quasiquote . g$0$19045) (syntax-rules . g$0$19044) (include . g$0$19043) (define-record . g$0$19042) (let-values . g$0$19041) (case . g$0$19040) (parameterize . g$0$19039) (unless . g$0$19038) (when . g$0$19037) (if . g$0$19036) (letrec* . g$0$19035) (letrec . g$0$19034) (type-descriptor . g$0$19033) (case-lambda . g$0$19032) (lambda . g$0$19031) (syntax . g$0$19030) (syntax-case . g$0$19029) (quote . g$0$19028) (foreign-call . g$0$19027) (letrec-syntax . g$0$19026) (let-syntax . g$0$19025) (set! . g$0$19024) (import . g$0$19023) (begin . g$0$19022) (module . g$0$19021) (define-syntax . g$0$19020) (define . g$0$19019))) (quote ((g$0$11501 core-prim . syntax-error) (g$0$11372 core-prim . syntax-dispatch) (g$0$19726 core-prim . pretty-print) (g$0$19725 core-prim . eval-core) (g$0$19724 core-prim . set-symbol-value!) (g$0$19723 core-prim . symbol-value) (g$0$19722 core-prim . gensym) (g$0$19721 core-prim . void) (g$0$19720 core-prim . load) (g$0$19719 core-prim . interaction-environment) (g$0$19718 core-prim . char-ready?) (g$0$19717 core-prim . string-upcase) (g$0$19716 core-prim . string-titlecase) (g$0$19715 core-prim . string-normalize-nfkd) (g$0$19714 core-prim . string-normalize-nfkc) (g$0$19713 core-prim . string-normalize-nfd) (g$0$19712 core-prim . string-normalize-nfc) (g$0$19711 core-prim . string-foldcase) (g$0$19710 core-prim . string-downcase) (g$0$19709 core-prim . string-ci>?) (g$0$19708 core-prim . string-ci>=?) (g$0$19707 core-prim . string-ci=?) (g$0$19706 core-prim . string-ci<?) (g$0$19705 core-prim . string-ci<=?) (g$0$19704 core-prim . char-whitespace?) (g$0$19703 core-prim . char-upper-case?) (g$0$19702 core-prim . char-title-case?) (g$0$19701 core-prim . char-numeric?) (g$0$19700 core-prim . char-lower-case?) (g$0$19699 core-prim . char-general-category) (g$0$19698 core-prim . char-upcase) (g$0$19697 core-prim . char-titlecase) (g$0$19696 core-prim . char-foldcase) (g$0$19695 core-prim . char-downcase) (g$0$19694 core-prim . char-ci>?) (g$0$19693 core-prim . char-ci>=?) (g$0$19692 core-prim . char-ci=?) (g$0$19691 core-prim . char-ci<?) (g$0$19690 core-prim . char-ci<=?) (g$0$19689 core-prim . char-alphabetic?) (g$0$11089 core-prim . make-variable-transformer) (g$0$11503 core-prim . identifier?) (g$0$11495 core-prim . generate-temporaries) (g$0$11497 core-prim . free-identifier=?) (g$0$11507 core-prim . syntax->datum) (g$0$11505 core-prim . datum->syntax) (g$0$11499 core-prim . bound-identifier=?) (g$0$19688 core-prim . record-type-descriptor?) (g$0$19687 core-prim . record-predicate) (g$0$19686 core-prim . record-mutator) (g$0$19685 core-prim . record-constructor) (g$0$19684 core-prim . record-accessor) (g$0$19683 core-prim . make-record-type-descriptor) (g$0$19682 core-prim . make-record-constructor-descriptor) (g$0$19681 core-prim . record?) (g$0$19680 core-prim . record-type-uid) (g$0$19679 core-prim . record-type-sealed?) (g$0$19678 core-prim . record-type-parent) (g$0$19677 core-prim . record-type-opaque?) (g$0$19676 core-prim . record-type-name) (g$0$19675 core-prim . record-type-generative?) (g$0$19674 core-prim . record-type-field-names) (g$0$19673 core-prim . record-rtd) (g$0$19672 core-prim . record-field-mutable?) (g$0$19671 core-prim . nongenerative) (g$0$19670 core-prim . sealed) (g$0$19669 core-prim . record-type-descriptor) (g$0$19668 core-prim . record-constructor-descriptor) (g$0$19667 core-prim . protocol) (g$0$19666 core-prim . parent-rtd) (g$0$19665 core-prim . parent) (g$0$19664 core-prim . opaque) (g$0$19663 core-prim . mutable) (g$0$19662 core-prim . immutable) (g$0$19661 core-prim . fields) (g$0$19660 core-prim . define-record-type) (g$0$19659 core-prim . delete-file) (g$0$19658 core-prim . file-exists?) (g$0$19657 core-prim . vector-sort!) (g$0$19656 core-prim . vector-sort) (g$0$19655 core-prim . list-sort) (g$0$19654 core-prim . symbol-hash) (g$0$19653 core-prim . string-ci-hash) (g$0$19652 core-prim . string-hash) (g$0$19651 core-prim . equal-hash) (g$0$19650 core-prim . hashtable-equivalence-function) (g$0$19649 core-prim . make-hashtable) (g$0$19648 core-prim . hashtable-hash-function) (g$0$19647 core-prim . make-eqv-hashtable) (g$0$19646 core-prim . make-eq-hashtable) (g$0$19645 core-prim . hashtable?) (g$0$19644 core-prim . hashtable-update!) (g$0$19643 core-prim . hashtable-size) (g$0$19642 core-prim . hashtable-set!) (g$0$19641 core-prim . hashtable-ref) (g$0$19640 core-prim . hashtable-mutable?) (g$0$19639 core-prim . hashtable-keys) (g$0$19638 core-prim . hashtable-entries) (g$0$19637 core-prim . hashtable-delete!) (g$0$19636 core-prim . hashtable-copy) (g$0$19635 core-prim . hashtable-contains?) (g$0$19634 core-prim . hashtable-clear!) (g$0$19633 core-prim . call-with-output-file) (g$0$19632 core-prim . call-with-input-file) (g$0$19631 core-prim . write-char) (g$0$19630 core-prim . write) (g$0$19629 core-prim . with-output-to-file) (g$0$19628 core-prim . with-input-from-file) (g$0$19627 core-prim . read-char) (g$0$19626 core-prim . read) (g$0$19625 core-prim . peek-char) (g$0$19624 core-prim . open-output-file) (g$0$19623 core-prim . open-input-file) (g$0$19622 core-prim . newline) (g$0$19621 core-prim . display) (g$0$19620 core-prim . close-output-port) (g$0$19619 core-prim . close-input-port) (g$0$19618 core-prim . eof-object?) (g$0$19617 core-prim . eof-object) (g$0$19616 core-prim . current-error-port) (g$0$19615 core-prim . current-output-port) (g$0$19614 core-prim . current-input-port) (g$0$19613 core-prim . output-port?) (g$0$19612 core-prim . input-port?) (g$0$19611 core-prim . utf-8-codec) (g$0$19610 core-prim . utf-16-codec) (g$0$19609 core-prim . transcoder-error-handling-mode) (g$0$19608 core-prim . transcoder-eol-style) (g$0$19607 core-prim . transcoder-codec) (g$0$19606 core-prim . transcoded-port) (g$0$19605 core-prim . textual-port?) (g$0$19604 core-prim . string->bytevector) (g$0$19603 core-prim . standard-output-port) (g$0$19602 core-prim . standard-input-port) (g$0$19601 core-prim . standard-error-port) (g$0$19600 core-prim . set-port-position!) (g$0$19599 core-prim . put-u8) (g$0$19598 core-prim . put-string) (g$0$19597 core-prim . put-datum) (g$0$19596 core-prim . put-char) (g$0$19595 core-prim . put-bytevector) (g$0$19594 core-prim . port?) (g$0$19593 core-prim . port-transcoder) (g$0$19592 core-prim . port-position) (g$0$19591 core-prim . port-has-set-port-position!?) (g$0$19590 core-prim . port-has-port-position?) (g$0$19589 core-prim . port-eof?) (g$0$19588 core-prim . output-port-buffer-mode) (g$0$19587 core-prim . open-string-output-port) (g$0$19586 core-prim . open-string-input-port) (g$0$19585 core-prim . open-file-output-port) (g$0$19584 core-prim . open-file-input/output-port) (g$0$19583 core-prim . open-file-input-port) (g$0$19582 core-prim . open-bytevector-output-port) (g$0$19581 core-prim . open-bytevector-input-port) (g$0$19580 core-prim . native-transcoder) (g$0$19579 core-prim . native-eol-style) (g$0$19578 core-prim . make-transcoder) (g$0$19577 core-prim . latin-1-codec) (g$0$19576 core-prim . make-i/o-write-error) (g$0$19575 core-prim . make-i/o-read-error) (g$0$19574 core-prim . make-i/o-port-error) (g$0$19573 core-prim . make-i/o-invalid-position-error) (g$0$19572 core-prim . make-i/o-filename-error) (g$0$19571 core-prim . make-i/o-file-protection-error) (g$0$19570 core-prim . make-i/o-file-is-read-only-error) (g$0$19569 core-prim . make-i/o-file-does-not-exist-error) (g$0$19568 core-prim . make-i/o-file-already-exists-error) (g$0$19567 core-prim . make-i/o-error) (g$0$19566 core-prim . make-i/o-encoding-error) (g$0$19565 core-prim . make-i/o-decoding-error) (g$0$19564 core-prim . make-custom-textual-output-port) (g$0$19563 core-prim . make-custom-textual-input/output-port) (g$0$19562 core-prim . make-custom-textual-input-port) (g$0$19561 core-prim . make-custom-binary-output-port) (g$0$19560 core-prim . make-custom-binary-input/output-port) (g$0$19559 core-prim . make-custom-binary-input-port) (g$0$19558 core-prim . make-bytevector) (g$0$19557 core-prim . lookahead-u8) (g$0$19556 core-prim . lookahead-char) (g$0$19555 core-prim . i/o-write-error?) (g$0$19554 core-prim . &i/o-write) (g$0$19553 core-prim . i/o-read-error?) (g$0$19552 core-prim . &i/o-read) (g$0$19551 core-prim . i/o-port-error?) (g$0$19550 core-prim . &i/o-port) (g$0$19549 core-prim . i/o-invalid-position-error?) (g$0$19548 core-prim . &i/o-invalid-position) (g$0$19547 core-prim . i/o-filename-error?) (g$0$19546 core-prim . &i/o-filename) (g$0$19545 core-prim . i/o-file-protection-error?) (g$0$19544 core-prim . &i/o-file-protection) (g$0$19543 core-prim . i/o-file-is-read-only-error?) (g$0$19542 core-prim . &i/o-file-is-read-only) (g$0$19541 core-prim . i/o-file-does-not-exist-error?) (g$0$19540 core-prim . &i/o-file-does-not-exist) (g$0$19539 core-prim . i/o-file-already-exists-error?) (g$0$19538 core-prim . &i/o-file-already-exists) (g$0$19537 core-prim . i/o-error?) (g$0$19536 core-prim . i/o-error-port) (g$0$19535 core-prim . i/o-error-filename) (g$0$19534 core-prim . i/o-encoding-error?) (g$0$19533 core-prim . i/o-encoding-error-char) (g$0$19532 core-prim . &i/o-encoding) (g$0$19531 core-prim . i/o-decoding-error?) (g$0$19530 core-prim . &i/o-decoding) (g$0$19529 core-prim . &i/o) (g$0$19528 core-prim . get-u8) (g$0$19527 core-prim . get-string-n!) (g$0$19526 core-prim . get-string-n) (g$0$19525 core-prim . get-string-all) (g$0$19524 core-prim . get-line) (g$0$19523 core-prim . get-datum) (g$0$19522 core-prim . get-char) (g$0$19521 core-prim . get-bytevector-some) (g$0$19520 core-prim . get-bytevector-n!) (g$0$19519 core-prim . get-bytevector-n) (g$0$19518 core-prim . get-bytevector-all) (g$0$19517 core-prim . flush-output-port) (g$0$19516 core-prim . file-options) (g$0$19515 core-prim . error-handling-mode) (g$0$19514 core-prim . eol-style) (g$0$19513 core-prim . close-port) (g$0$19512 core-prim . scheme-report-environment) (g$0$19511 core-prim . quotient) (g$0$11475 core-prim . null-environment) (g$0$19510 core-prim . remainder) (g$0$19509 core-prim . modulo) (g$0$19508 core-prim . inexact->exact) (g$0$19507 core-prim . force) (g$0$19506 core-prim . exact->inexact) (g$0$19505 core-prim . exit) (g$0$19504 core-prim . command-line) (g$0$19503 core-prim . string-fill!) (g$0$19502 core-prim . string-set!) (g$0$19501 core-prim . set-cdr!) (g$0$19500 core-prim . set-car!) (g$0$19499 core-prim . remove) (g$0$19498 core-prim . remv) (g$0$19497 core-prim . remp) (g$0$19496 core-prim . remq) (g$0$19495 core-prim . partition) (g$0$19494 core-prim . memv) (g$0$19493 core-prim . memq) (g$0$19492 core-prim . memp) (g$0$19491 core-prim . member) (g$0$19490 core-prim . exists) (g$0$19489 core-prim . for-all) (g$0$19488 core-prim . fold-right) (g$0$19487 core-prim . fold-left) (g$0$19486 core-prim . find) (g$0$19485 core-prim . filter) (g$0$19484 core-prim . cons*) (g$0$19483 core-prim . assv) (g$0$19482 core-prim . assq) (g$0$19481 core-prim . assp) (g$0$19480 core-prim . assoc) (g$0$19479 core-prim . call-with-string-output-port) (g$0$19478 core-prim . call-with-port) (g$0$19477 core-prim . call-with-bytevector-output-port) (g$0$19476 core-prim . bytevector->string) (g$0$19475 core-prim . buffer-mode?) (g$0$19474 core-prim . buffer-mode) (g$0$19473 core-prim . binary-port?) (g$0$19472 core-prim . guard) (g$0$19471 core-prim . with-exception-handler) (g$0$19470 core-prim . raise-continuable) (g$0$19469 core-prim . raise) (g$0$11481 core-prim . eval) (g$0$11473 core-prim . environment) (g$0$19468 core-prim . make-enumeration) (g$0$19467 core-prim . enum-set=?) (g$0$19466 core-prim . enum-set-universe) (g$0$19465 core-prim . enum-set-union) (g$0$19464 core-prim . enum-set-subset?) (g$0$19463 core-prim . enum-set-projection) (g$0$19462 core-prim . enum-set-member?) (g$0$19461 core-prim . enum-set-intersection) (g$0$19460 core-prim . enum-set-indexer) (g$0$19459 core-prim . enum-set-difference) (g$0$19458 core-prim . enum-set-constructor) (g$0$19457 core-prim . enum-set-complement) (g$0$19456 core-prim . enum-set->list) (g$0$19455 core-prim . define-enumeration) (g$0$19454 core-prim . who-condition?) (g$0$19453 core-prim . &who) (g$0$19452 core-prim . warning?) (g$0$19451 core-prim . &warning) (g$0$19450 core-prim . violation?) (g$0$19449 core-prim . &violation) (g$0$19448 core-prim . undefined-violation?) (g$0$19447 core-prim . &undefined) (g$0$19446 core-prim . syntax-violation?) (g$0$19445 core-prim . syntax-violation-subform) (g$0$19444 core-prim . syntax-violation-form) (g$0$19443 core-prim . syntax-violation) (g$0$19442 core-prim . &syntax) (g$0$19441 core-prim . simple-conditions) (g$0$19440 core-prim . serious-condition?) (g$0$19439 core-prim . &serious) (g$0$19438 core-prim . non-continuable-violation?) (g$0$19437 core-prim . &non-continuable) (g$0$19436 core-prim . message-condition?) (g$0$19435 core-prim . &message) (g$0$19434 core-prim . make-who-condition) (g$0$19433 core-prim . make-warning) (g$0$19432 core-prim . make-violation) (g$0$19431 core-prim . make-undefined-violation) (g$0$19430 core-prim . make-syntax-violation) (g$0$19429 core-prim . make-serious-condition) (g$0$19428 core-prim . make-non-continuable-violation) (g$0$19427 core-prim . make-message-condition) (g$0$19426 core-prim . make-lexical-violation) (g$0$19425 core-prim . make-irritants-condition) (g$0$19424 core-prim . make-implementation-restriction-violation) (g$0$19423 core-prim . make-error) (g$0$19422 core-prim . make-assertion-violation) (g$0$19421 core-prim . lexical-violation?) (g$0$19420 core-prim . &lexical) (g$0$19419 core-prim . irritants-condition?) (g$0$19418 core-prim . &irritants) (g$0$19417 core-prim . implementation-restriction-violation?) (g$0$19416 core-prim . &implementation-restriction) (g$0$19415 core-prim . error?) (g$0$19414 core-prim . &error) (g$0$19413 core-prim . define-condition-type) (g$0$19412 core-prim . condition-who) (g$0$19411 core-prim . condition-predicate) (g$0$19410 core-prim . condition-message) (g$0$19409 core-prim . condition-irritants) (g$0$19408 core-prim . condition-accessor) (g$0$19407 core-prim . condition) (g$0$19406 core-prim . &condition) (g$0$19405 core-prim . assertion-violation?) (g$0$19404 core-prim . &assertion) (g$0$19403 core-prim . condition?) (g$0$19402 core-prim . utf32->string) (g$0$19401 core-prim . utf16->string) (g$0$19400 core-prim . utf8->string) (g$0$19399 core-prim . uint-list->bytevector) (g$0$19398 core-prim . u8-list->bytevector) (g$0$19397 core-prim . string->utf8) (g$0$19396 core-prim . string->utf32) (g$0$19395 core-prim . string->utf16) (g$0$19394 core-prim . sint-list->bytevector) (g$0$19393 core-prim . native-endianness) (g$0$19392 core-prim . bytevector?) (g$0$19391 core-prim . bytevector=?) (g$0$19390 core-prim . bytevector-uint-set!) (g$0$19389 core-prim . bytevector-uint-ref) (g$0$19388 core-prim . bytevector-u8-set!) (g$0$19387 core-prim . bytevector-u8-ref) (g$0$19386 core-prim . bytevector-u64-set!) (g$0$19385 core-prim . bytevector-u64-ref) (g$0$19384 core-prim . bytevector-u64-native-set!) (g$0$19383 core-prim . bytevector-u64-native-ref) (g$0$19382 core-prim . bytevector-u32-set!) (g$0$19381 core-prim . bytevector-u32-ref) (g$0$19380 core-prim . bytevector-u32-native-set!) (g$0$19379 core-prim . bytevector-u32-native-ref) (g$0$19378 core-prim . bytevector-u16-set!) (g$0$19377 core-prim . bytevector-u16-ref) (g$0$19376 core-prim . bytevector-u16-native-set!) (g$0$19375 core-prim . bytevector-u16-native-ref) (g$0$19374 core-prim . bytevector-sint-set!) (g$0$19373 core-prim . bytevector-sint-ref) (g$0$19372 core-prim . bytevector-s8-set!) (g$0$19371 core-prim . bytevector-s8-ref) (g$0$19370 core-prim . bytevector-s64-set!) (g$0$19369 core-prim . bytevector-s64-ref) (g$0$19368 core-prim . bytevector-s64-native-set!) (g$0$19367 core-prim . bytevector-s64-native-ref) (g$0$19366 core-prim . bytevector-s32-set!) (g$0$19365 core-prim . bytevector-s32-ref) (g$0$19364 core-prim . bytevector-s32-native-set!) (g$0$19363 core-prim . bytevector-s32-native-ref) (g$0$19362 core-prim . bytevector-s16-set!) (g$0$19361 core-prim . bytevector-s16-ref) (g$0$19360 core-prim . bytevector-s16-native-set!) (g$0$19359 core-prim . bytevector-s16-native-ref) (g$0$19358 core-prim . bytevector-length) (g$0$19357 core-prim . bytevector-ieee-single-ref) (g$0$19356 core-prim . bytevector-ieee-single-native-set!) (g$0$19355 core-prim . bytevector-ieee-single-native-ref) (g$0$19354 core-prim . bytevector-ieee-double-ref) (g$0$19353 core-prim . bytevector-ieee-double-native-set!) (g$0$19352 core-prim . bytevector-ieee-double-native-ref) (g$0$19351 core-prim . bytevector-fill!) (g$0$19350 core-prim . bytevector-copy!) (g$0$19349 core-prim . bytevector-copy) (g$0$19348 core-prim . bytevector->uint-list) (g$0$19347 core-prim . bytevector->u8-list) (g$0$19346 core-prim . bytevector->sint-list) (g$0$19345 core-prim . no-nans-violation?) (g$0$19344 core-prim . &no-nans) (g$0$19343 core-prim . no-infinities-violation?) (g$0$19342 core-prim . &no-infinities) (g$0$19341 core-prim . make-no-nans-violation) (g$0$19340 core-prim . make-no-infinities-violation) (g$0$19339 core-prim . real->flonum) (g$0$19338 core-prim . flzero?) (g$0$19337 core-prim . fltruncate) (g$0$19336 core-prim . fltan) (g$0$19335 core-prim . flsqrt) (g$0$19334 core-prim . flsin) (g$0$19333 core-prim . flround) (g$0$19332 core-prim . flpositive?) (g$0$19331 core-prim . flonum?) (g$0$19330 core-prim . flodd?) (g$0$19329 core-prim . flnumerator) (g$0$19328 core-prim . flnegative?) (g$0$19327 core-prim . flnan?) (g$0$19326 core-prim . flmod0) (g$0$19325 core-prim . flmod) (g$0$19324 core-prim . flmin) (g$0$19323 core-prim . flmax) (g$0$19322 core-prim . fllog) (g$0$19321 core-prim . flinteger?) (g$0$19320 core-prim . flinfinite?) (g$0$19319 core-prim . flfloor) (g$0$19318 core-prim . flfinite?) (g$0$19317 core-prim . flexpt) (g$0$19316 core-prim . flexp) (g$0$19315 core-prim . fleven?) (g$0$19314 core-prim . fldiv0-and-mod0) (g$0$19313 core-prim . fldiv0) (g$0$19312 core-prim . fldiv-and-mod) (g$0$19311 core-prim . fldiv) (g$0$19310 core-prim . fldenominator) (g$0$19309 core-prim . flcos) (g$0$19308 core-prim . flceiling) (g$0$19307 core-prim . flatan) (g$0$19306 core-prim . flasin) (g$0$19305 core-prim . flacos) (g$0$19304 core-prim . flabs) (g$0$19303 core-prim . fl>?) (g$0$19302 core-prim . fl>=?) (g$0$19301 core-prim . fl=?) (g$0$19300 core-prim . fl<?) (g$0$19299 core-prim . fl<=?) (g$0$19298 core-prim . fl/) (g$0$19297 core-prim . fl-) (g$0$19296 core-prim . fl+) (g$0$19295 core-prim . fl*) (g$0$19294 core-prim . fixnum->flonum) (g$0$19293 core-prim . fxzero?) (g$0$19292 core-prim . fxxor) (g$0$19291 core-prim . fxrotate-bit-field) (g$0$19290 core-prim . fxreverse-bit-field) (g$0$19289 core-prim . fxpositive?) (g$0$19288 core-prim . fxodd?) (g$0$19287 core-prim . fxnot) (g$0$19286 core-prim . fxnegative?) (g$0$19285 core-prim . fxmod0) (g$0$19284 core-prim . fxmod) (g$0$19283 core-prim . fxmin) (g$0$19282 core-prim . fxmax) (g$0$19281 core-prim . fxlength) (g$0$19280 core-prim . fxior) (g$0$19279 core-prim . fxif) (g$0$19278 core-prim . fxfirst-bit-set) (g$0$19277 core-prim . fxeven?) (g$0$19276 core-prim . fxdiv0-and-mod0) (g$0$19275 core-prim . fxdiv0) (g$0$19274 core-prim . fxdiv-and-mod) (g$0$19273 core-prim . fxdiv) (g$0$19272 core-prim . fxcopy-bit-field) (g$0$19271 core-prim . fxcopy-bit) (g$0$19270 core-prim . fxbit-set?) (g$0$19269 core-prim . fxbit-field) (g$0$19268 core-prim . fxbit-count) (g$0$19267 core-prim . fxarithmetic-shift-right) (g$0$19266 core-prim . fxarithmetic-shift-left) (g$0$19265 core-prim . fxarithmetic-shift) (g$0$19264 core-prim . fxand) (g$0$19263 core-prim . fx>?) (g$0$19262 core-prim . fx>=?) (g$0$19261 core-prim . fx=?) (g$0$19260 core-prim . fx<?) (g$0$19259 core-prim . fx<=?) (g$0$19258 core-prim . fx-/carry) (g$0$19257 core-prim . fx-) (g$0$19256 core-prim . fx+/carry) (g$0$19255 core-prim . fx+) (g$0$19254 core-prim . fx*/carry) (g$0$19253 core-prim . fx*) (g$0$19252 core-prim . greatest-fixnum) (g$0$19251 core-prim . least-fixnum) (g$0$19250 core-prim . fixnum-width) (g$0$19249 core-prim . fixnum?) (g$0$19248 core-prim . bitwise-rotate-bit-field) (g$0$19247 core-prim . bitwise-reverse-bit-field) (g$0$19246 core-prim . bitwise-length) (g$0$19245 core-prim . bitwise-if) (g$0$19244 core-prim . bitwise-first-bit-set) (g$0$19243 core-prim . bitwise-copy-bit-field) (g$0$19242 core-prim . bitwise-copy-bit) (g$0$19241 core-prim . bitwise-bit-set?) (g$0$19240 core-prim . bitwise-bit-field) (g$0$19239 core-prim . bitwise-bit-count) (g$0$19238 core-prim . bitwise-xor) (g$0$19237 core-prim . bitwise-ior) (g$0$19236 core-prim . bitwise-and) (g$0$19235 core-prim . bitwise-not) (g$0$19234 core-prim . bitwise-arithmetic-shift-right) (g$0$19233 core-prim . bitwise-arithmetic-shift-left) (g$0$19232 core-prim . bitwise-arithmetic-shift) (g$0$19231 core-prim . zero?) (g$0$19230 core-prim . vector?) (g$0$19229 core-prim . vector-set!) (g$0$19228 core-prim . vector-ref) (g$0$19227 core-prim . vector-map) (g$0$19226 core-prim . vector-length) (g$0$19225 core-prim . vector-for-each) (g$0$19224 core-prim . vector-fill!) (g$0$19223 core-prim . vector->list) (g$0$19222 core-prim . vector) (g$0$19221 core-prim . values) (g$0$19220 core-prim . truncate) (g$0$19219 core-prim . tan) (g$0$19218 core-prim . symbol?) (g$0$19217 core-prim . symbol=?) (g$0$19216 core-prim . symbol->string) (g$0$19215 core-prim . substring) (g$0$19214 core-prim . string?) (g$0$19213 core-prim . string>?) (g$0$19212 core-prim . string>=?) (g$0$19211 core-prim . string=?) (g$0$19210 core-prim . string<?) (g$0$19209 core-prim . string<=?) (g$0$19208 core-prim . string-ref) (g$0$19207 core-prim . string-length) (g$0$19206 core-prim . string-for-each) (g$0$19205 core-prim . string-copy) (g$0$19204 core-prim . string-append) (g$0$19203 core-prim . string->symbol) (g$0$19202 core-prim . string->number) (g$0$19201 core-prim . string->list) (g$0$19200 core-prim . string) (g$0$19199 core-prim . sqrt) (g$0$19198 core-prim . sin) (g$0$19197 core-prim . round) (g$0$19196 core-prim . reverse) (g$0$19195 core-prim . real?) (g$0$19194 core-prim . real-valued?) (g$0$19193 core-prim . real-part) (g$0$19192 core-prim . rationalize) (g$0$19191 core-prim . rational?) (g$0$19190 core-prim . rational-valued?) (g$0$19189 core-prim . procedure?) (g$0$19188 core-prim . positive?) (g$0$19187 core-prim . pair?) (g$0$19186 core-prim . odd?) (g$0$19185 core-prim . numerator) (g$0$19184 core-prim . number?) (g$0$19183 core-prim . number->string) (g$0$19182 core-prim . null?) (g$0$19181 core-prim . not) (g$0$19180 core-prim . negative?) (g$0$19179 core-prim . nan?) (g$0$19178 core-prim . min) (g$0$19177 core-prim . max) (g$0$19176 core-prim . map) (g$0$19175 core-prim . make-vector) (g$0$19174 core-prim . make-string) (g$0$19173 core-prim . make-rectangular) (g$0$19172 core-prim . make-polar) (g$0$19171 core-prim . magnitude) (g$0$19170 core-prim . log) (g$0$19169 core-prim . list?) (g$0$19168 core-prim . list-tail) (g$0$19167 core-prim . list-ref) (g$0$19166 core-prim . list->vector) (g$0$19165 core-prim . list->string) (g$0$19164 core-prim . list) (g$0$19163 core-prim . length) (g$0$19162 core-prim . lcm) (g$0$19161 core-prim . integer?) (g$0$19160 core-prim . integer-valued?) (g$0$19159 core-prim . integer->char) (g$0$19158 core-prim . infinite?) (g$0$19157 core-prim . inexact?) (g$0$19156 core-prim . inexact) (g$0$19155 core-prim . imag-part) (g$0$19154 core-prim . gcd) (g$0$19153 core-prim . for-each) (g$0$19152 core-prim . floor) (g$0$19151 core-prim . finite?) (g$0$19150 core-prim . expt) (g$0$19149 core-prim . exp) (g$0$19148 core-prim . exact?) (g$0$19147 core-prim . exact-integer-sqrt) (g$0$19146 core-prim . exact) (g$0$19145 core-prim . even?) (g$0$19144 core-prim . error) (g$0$19143 core-prim . eqv?) (g$0$19142 core-prim . equal?) (g$0$19141 core-prim . eq?) (g$0$19140 core-prim . dynamic-wind) (g$0$19139 core-prim . div0-and-mod0) (g$0$19138 core-prim . mod0) (g$0$19137 core-prim . div0) (g$0$19136 core-prim . div-and-mod) (g$0$19135 core-prim . mod) (g$0$19134 core-prim . div) (g$0$19133 core-prim . denominator) (g$0$19132 core-prim . cos) (g$0$19131 core-prim . cons) (g$0$19130 core-prim . complex?) (g$0$19129 core-prim . char?) (g$0$19128 core-prim . char>?) (g$0$19127 core-prim . char>=?) (g$0$19126 core-prim . char=?) (g$0$19125 core-prim . char<?) (g$0$19124 core-prim . char<=?) (g$0$19123 core-prim . char->integer) (g$0$19122 core-prim . ceiling) (g$0$19121 core-prim . call-with-values) (g$0$19120 core-prim . call/cc) (g$0$19119 core-prim . call-with-current-continuation) (g$0$19118 core-prim . cddddr) (g$0$19117 core-prim . cdddar) (g$0$19116 core-prim . cddadr) (g$0$19115 core-prim . cddaar) (g$0$19114 core-prim . cdaddr) (g$0$19113 core-prim . cdadar) (g$0$19112 core-prim . cdaadr) (g$0$19111 core-prim . cdaaar) (g$0$19110 core-prim . cadddr) (g$0$19109 core-prim . caddar) (g$0$19108 core-prim . cadadr) (g$0$19107 core-prim . cadaar) (g$0$19106 core-prim . caaddr) (g$0$19105 core-prim . caadar) (g$0$19104 core-prim . caaadr) (g$0$19103 core-prim . caaaar) (g$0$19102 core-prim . cdddr) (g$0$19101 core-prim . cddar) (g$0$19100 core-prim . cdadr) (g$0$19099 core-prim . cdaar) (g$0$19098 core-prim . caddr) (g$0$19097 core-prim . cadar) (g$0$19096 core-prim . caadr) (g$0$19095 core-prim . caaar) (g$0$19094 core-prim . cddr) (g$0$19093 core-prim . cdar) (g$0$19092 core-prim . cadr) (g$0$19091 core-prim . caar) (g$0$19090 core-prim . cdr) (g$0$19089 core-prim . car) (g$0$19088 core-prim . boolean?) (g$0$19087 core-prim . boolean=?) (g$0$19086 core-prim . atan) (g$0$19085 core-prim . assertion-violation) (g$0$19084 core-prim . asin) (g$0$19083 core-prim . apply) (g$0$19082 core-prim . append) (g$0$19081 core-prim . angle) (g$0$19080 core-prim . acos) (g$0$19079 core-prim . abs) (g$0$19078 core-prim . /) (g$0$19077 core-prim . *) (g$0$19076 core-prim . -) (g$0$19075 core-prim . +) (g$0$19074 core-prim . >=) (g$0$19073 core-prim . >) (g$0$19072 core-prim . =) (g$0$19071 core-prim . <=) (g$0$19070 core-prim . <) (g$0$19069 core-prim . let*-values) (g$0$19068 macro . trace-define) (g$0$19067 macro . trace-lambda) (g$0$19066 macro . unsyntax-splicing) (g$0$19065 macro . unsyntax) (g$0$19064 macro . unquote-splicing) (g$0$19063 macro . unquote) (g$0$19062 macro . _) (g$0$19061 macro . else) (g$0$19060 macro . =>) (g$0$19059 macro . |...|) (g$0$19058 macro . assert) (g$0$19057 macro . endianness) (g$0$19056 macro . delay) (g$0$19055 macro . time) (g$0$19054 macro . or) (g$0$19053 macro . and) (g$0$19052 macro . do) (g$0$19051 macro . cond) (g$0$19050 macro . let*) (g$0$19049 macro . let) (g$0$19048 macro . identifier-syntax) (g$0$19047 macro . with-syntax) (g$0$19046 macro . quasisyntax) (g$0$19045 macro . quasiquote) (g$0$19044 macro . syntax-rules) (g$0$19043 macro . include) (g$0$19042 macro . define-record) (g$0$19041 core-macro . let-values) (g$0$19040 core-macro . case) (g$0$19039 core-macro . parameterize) (g$0$19038 core-macro . unless) (g$0$19037 core-macro . when) (g$0$19036 core-macro . if) (g$0$19035 core-macro . letrec*) (g$0$19034 core-macro . letrec) (g$0$19033 core-macro . type-descriptor) (g$0$19032 core-macro . case-lambda) (g$0$19031 core-macro . lambda) (g$0$19030 core-macro . syntax) (g$0$19029 core-macro . syntax-case) (g$0$19028 core-macro . quote) (g$0$19027 core-macro . foreign-call) (g$0$19026 letrec-syntax) (g$0$19025 let-syntax) (g$0$19024 set!) (g$0$19023 import) (g$0$19022 begin) (g$0$19021 module) (g$0$19020 define-syntax) (g$0$19019 define))) values values (quote #f)) (g$0$10649 (quote g$0$19759) (quote (psyntax system $bootstrap)) (quote ()) (quote ()) (quote ()) (quote ()) (quote ((pretty-print . g$0$19726) (eval-core . g$0$19725) (set-symbol-value! . g$0$19724) (symbol-value . g$0$19723) (gensym . g$0$19722) (void . g$0$19721))) (quote ()) values values (quote #f)))


(begin (define g$0$19017 (quote #f)) ((lambda (g$0$19001) (begin (set! g$0$19001 (lambda (g$0$19003) ((lambda (g$0$19005) (g$0$18819 g$0$19005)) (with-input-from-file g$0$19003 (lambda () (letrec ((g$0$19007 (lambda () ((lambda (g$0$19009) (if (eof-object? g$0$19009) (quote ()) (cons g$0$19009 (g$0$19007)))) (read))))) (g$0$19007))))))) (begin (set! g$0$19017 g$0$19001) (display (quote "r6rs psyntax ready\n")) ((lambda (g$0$19011) (begin (if (= (length g$0$19011) (quote 2)) (void) (begin (display (quote "provide a script name argument\n")) (exit (quote 17)))) ((lambda (g$0$19013 g$0$19014) (g$0$19001 (car g$0$19014))) (car g$0$19011) (cdr g$0$19011)))) (command-line)) (exit (quote 0))))) (quote #f)))


